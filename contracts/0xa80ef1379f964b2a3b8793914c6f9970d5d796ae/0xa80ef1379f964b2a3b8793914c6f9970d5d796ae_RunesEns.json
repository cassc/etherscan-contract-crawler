{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SubDomainsFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\n/*\\n *     ,_,\\n *    (',')\\n *    {/\\\"\\\\}\\n *    -\\\"-\\\"-\\n */\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\n\\nimport \\\"OwnableUpgradeable.sol\\\";\\n\\ninterface IDefaultReverseResolver {\\n\\tfunction name(bytes32) external view returns(string memory);\\n}\\n\\ninterface IEnsFallback {\\n\\tfunction setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\\n\\tfunction owner(bytes32 node) external view returns(address);\\n}\\n\\ninterface IResolver {\\n\\tfunction setAddr(bytes32 node, address a) external;\\n\\tfunction setAddr(bytes32 node, uint coinType, bytes memory a) external;\\n\\tfunction setText(bytes32 node, string calldata key, string calldata value) external;\\n\\tfunction setName(bytes32 node, string calldata name) external;\\n\\tfunction multicall(bytes[] calldata data) external;\\n\\tfunction setContenthash(bytes32, bytes calldata) external;\\n}\\n\\n// owl.runes.eth\\ncontract RunesEns is OwnableUpgradeable {\\n\\n\\tIEnsFallback constant ENS_FALLBACK = IEnsFallback(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\n\\tbytes32 constant public RUNES_NODE = 0x6d3426b54d1269cef0f748234b3aaf0daba9b93b703dad0048dfe10abf0c3427;\\n\\n\\tIResolver public resolver = IResolver(0x231b0Ee14048e9dCcD1d247744d114a4EB5E8E63);\\n\\tIERC20 public ygg = IERC20(0x94e496474F1725f1c1824cB5BDb92d7691A4F03a);\\n\\taddress public runesNft;\\n\\n\\tbool public paused;\\n\\tmapping(address => bool) public acceptedNfts;\\n\\tmapping(address => string)public nftBaseUrl;\\n\\tmapping(address => string) public nftSuffix;\\n\\tmapping(address => bool) public upForGrabs;\\n\\tmapping(bytes32 => string) public hashToStr;\\n\\tmapping(bytes32 => bytes32) public nftToHash;\\n\\tmapping(bytes32 => bytes32) public hashToNft;\\n\\tmapping(bytes32 => uint256) public nftDataToExpiryDate;\\n\\tmapping(bytes32 => bool) public reservedOrBanned;\\n\\tmapping(address => mapping(uint256 => bool)) public grabbed;\\n\\tmapping(address => bool) public authorised;\\n\\taddress public treasury;\\n\\n\\tevent DomainAdded(string label, address nft, uint256 tokenId);\\n\\tevent DomainDeleted(string label, address nft, uint256 tokenId);\\n\\n\\tfunction initialize() public initializer {\\n\\t\\t__Ownable_init();\\n\\t}\\n\\n\\tmodifier isPaused() {\\n\\t\\trequire(!paused);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isAuth(address _user) {\\n\\t\\trequire(authorised[_user]);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setPause() external onlyOwner {\\n\\t\\tpaused = !paused;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Update rune nft\\n\\t * @param _nft runes nft\\n\\t */\\n\\tfunction updateRunesNft(address _nft) external onlyOwner {\\n\\t\\trunesNft = _nft;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to set ban or reserve a label\\n\\t * @param _names Names to reserve or ban\\n\\t * @param _vals set values\\n\\t */\\n\\tfunction updateReserveOrBanned(string[] calldata _names, bool[] calldata _vals) external onlyOwner {\\n\\t\\tfor (uint256 i; i < _names.length; i++)\\n\\t\\t\\treservedOrBanned[keccak256(abi.encodePacked(_names[i]))] = _vals[i];\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the base uri of a collection\\n\\t * @param _address Collection to update base uri from\\n\\t * @param _url new base url\\n\\t */\\n\\tfunction updateBaseUrl(address _address, string calldata _url) external onlyOwner {\\n\\t\\tnftBaseUrl[_address] = _url;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the base uri of a collection\\n\\t * @param _address Collection to update base uri from\\n\\t * @param _suffix new base url\\n\\t */\\n\\tfunction updateSuffixUrl(address _address, string calldata _suffix) external onlyOwner {\\n\\t\\tnftSuffix[_address] = _suffix;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update authorised addresses\\n\\t * @param _address address to change auth access\\n\\t * @param _val bool\\n\\t */\\n\\tfunction updateAuthorised(address _address, bool _val) external onlyOwner {\\n\\t\\tauthorised[_address] = _val;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Set if eligible fro grabs\\n\\t * @param _collec New collection\\n\\t * @param _value Set value\\n\\t */\\n\\tfunction setGrab(address _collec, bool _value) external onlyOwner {\\n\\t\\tupForGrabs[_collec] = _value;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update treasury address in contract\\n\\t * @param _treasury New collection\\n\\t */\\n\\tfunction setTreasury(address _treasury) external onlyOwner {\\n\\t\\ttreasury = _treasury;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to validate collection in contract\\n\\t * @param _collec New collection\\n\\t * @param _value Set value\\n\\t */\\n\\tfunction setNewCollection(address _collec, bool _value) external onlyOwner {\\n\\t\\tacceptedNfts[_collec] = _value;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the ens resolver address\\n\\t * @param _resolver New resolver address\\n\\t */\\n\\tfunction updateResolver(address _resolver) external onlyOwner {\\n\\t\\tresolver = IResolver(_resolver);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the ygg address\\n\\t * @param _ygg New ygg address\\n\\t */\\n\\tfunction updateygg(address _ygg) external onlyOwner {\\n\\t\\tygg = IERC20(_ygg);\\n\\t}\\n\\n   function getSelectors(bytes[] calldata _payloads) internal pure returns(bytes4[] memory){\\n        bytes4[] memory sels = new bytes4[](_payloads.length);\\n        for (uint256 i = 0 ; i < _payloads.length; i++) {\\n            bytes4 s;\\n            bytes calldata d = _payloads[i];\\n            assembly {\\n                s := calldataload(d.offset)\\n            }\\n            sels[i] = s;\\n        }\\n        return sels;\\n    }\\n\\n\\tfunction multicall(uint256 _tokenId, address _nft, bytes[] calldata _data) external {\\n\\t\\t(bytes32 subnode,) = _validateParamsOwner(_tokenId, _nft);\\n\\t\\tbytes4[] memory selectors = getSelectors(_data);\\n\\t\\tfor(uint256 i = 0; i < _data.length; i++) {\\n\\t\\t\\trequire (selectors[i] == IResolver.setText.selector ||\\n\\t\\t\\t\\t\\tselectors[i] == IResolver.setName.selector ||\\n\\t\\t\\t\\t\\tselectors[i] == IResolver.setContenthash.selector ||\\n\\t\\t\\t\\t\\tselectors[i] == bytes4(0xd5fa2b00) ||\\n\\t\\t\\t\\t\\tselectors[i] == bytes4(0x8b95dd71));\\n\\t\\t\\tif (selectors[i] == IResolver.setText.selector) {\\n\\t\\t\\t\\t(bytes32 _subnode, string memory _key,) = abi.decode(_data[i][4:], (bytes32, string, string));\\n\\t\\t\\t\\trequire(_subnode == subnode);\\n\\t\\t\\t\\trequire(keccak256(abi.encodePacked(_key)) != keccak256(abi.encodePacked(\\\"avatar\\\")), \\\"No touch avatar key\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tresolver.multicall(_data);\\n\\t}\\n\\n\\tfunction setAddr(uint256 _tokenId, address _nft, address _bind) external {\\n\\t\\t(bytes32 subnode,) = _validateParamsOwner(_tokenId, _nft);\\n\\t\\tresolver.setAddr(subnode, _bind);\\n\\t}\\n\\n\\tfunction setAddr(uint256 _tokenId, address _nft, uint256 _coin, bytes memory _a) external {\\n\\t\\t(bytes32 subnode,) = _validateParamsOwner(_tokenId, _nft);\\n\\t\\tresolver.setAddr(subnode, _coin, _a);\\n\\t}\\n\\n\\tfunction setManyText(uint256 _tokenId, address _nft, string[] memory _keys, string[] calldata _values) external {\\n\\t\\t(bytes32 subnode,) = _validateParamsOwner(_tokenId, _nft);\\n\\t\\trequire(_keys.length == _values.length);\\n\\t\\tfor (uint256 i = 0 ; i < _keys.length; i++) {\\n\\t\\t\\trequire(keccak256(abi.encodePacked(_keys[i])) != keccak256(abi.encodePacked(\\\"avatar\\\")), \\\"No touch avatar key\\\");\\n\\t\\t\\tresolver.setText(subnode, _keys[i], _values[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setText(uint256 _tokenId, address _nft, string memory _key, string calldata _value) external {\\n\\t\\t(bytes32 subnode,) = _validateParamsOwner(_tokenId, _nft);\\n\\t\\trequire(keccak256(abi.encodePacked(_key)) != keccak256(abi.encodePacked(\\\"avatar\\\")), \\\"No touch avatar key\\\");\\n\\t\\tresolver.setText(subnode, _key, _value);\\n\\t}\\n\\n\\t// to keep commented, reverse is done by calling reverse registrar\\n\\t// function setName(string calldata _label, uint256 _tokenId, address _nft, string calldata _name) external {\\n\\t// \\t(bytes32 nameHash, bytes32 subnode, bytes32 nftData) = _validateParams(_label, _tokenId, _nft);\\n\\t// \\tresolver.setName(subnode, _name);\\n\\t// }\\n\\n\\n\\tfunction giftSubdomains(\\n\\t\\tstring[] calldata _labels,\\n\\t\\tuint256[] calldata _tokenIds,\\n\\t\\taddress _nft,\\n\\t\\taddress[] calldata _binds) external onlyOwner {\\n\\t\\tfor (uint256 i; i < _labels.length; i++)\\n\\t\\t\\tgiftSubdomain(_labels[i], _tokenIds[i], _nft, _binds[i]);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to gift a subdomain to an nft if not set yet\\n\\t * @param _label Name of subdomain\\n\\t * @param _tokenId Token Id of nft\\n\\t * @param _nft collection address\\n\\t * @param _bind Address to which subdomain resolves to\\n\\t */\\n\\tfunction giftSubdomain(string calldata _label, uint256 _tokenId, address _nft, address _bind) internal {\\n\\t\\t(bytes32 nameHash, bytes32 subnode, bytes32 nftData) = _adminCheckParams(_label, _tokenId, _nft);\\n\\t\\trequire(hashToNft[nameHash] == bytes32(0), 'Label already taken');\\n\\t\\trequire(nftToHash[nftData] == bytes32(0), 'Token ID has label binded');\\n\\n\\t\\t// make previous attached ens avaiable for others to claim\\n\\t\\tbytes32 attachedHash = nftToHash[nftData];\\n\\t\\tif (attachedHash != bytes32(0)) {\\n\\t\\t\\tdelete hashToNft[attachedHash];\\n\\t\\t\\tresolver.setAddr(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), address(0));\\n\\t\\t}\\n\\n\\t\\thashToNft[nameHash] = nftData;\\n\\t\\tnftToHash[nftData] = nameHash;\\n\\t\\tif (bytes(hashToStr[nameHash]).length == 0) {\\n\\t\\t\\tENS_FALLBACK.setSubnodeRecord(RUNES_NODE, nameHash, address(this), address(resolver), 0);\\n\\t\\t\\thashToStr[nameHash] = _label;\\n\\t\\t}\\n\\t\\tnftDataToExpiryDate[nftData] = block.timestamp + 365 days;\\n\\t\\tresolver.setAddr(subnode, _bind);\\n\\t\\tresolver.setText(subnode, \\\"avatar\\\", _generateUrl(_nft, _tokenId));\\n\\t\\temit DomainAdded(_label, _nft, _tokenId);\\n\\t}\\n\\n\\t// /**  \\n\\t//  * @notice\\n\\t//  * Used to remove a subdomain. Only owner can call it. To remove profanity\\n\\t//  * @param _label Name of subdomain\\n\\t//  * @param _tokenId Token Id of nft\\n\\t//  * @param _nft collection address\\n\\t//  */\\n\\t// function dropSubdomain(string calldata _label, uint256 _tokenId, address _nft) external onlyOwner {\\n\\t// \\t(,, bytes32 nftData) = _adminCheckParams(_label, _tokenId, _nft);\\n\\n\\t// \\t// make previous attached ens avaiable for others to claim\\n\\t// \\tbytes32 attachedHash = nftToHash[nftData];\\n\\t// \\tif (attachedHash != bytes32(0)) {\\n\\t// \\t\\tdelete hashToNft[attachedHash];\\n\\t// \\t\\tdelete nftToHash[nftData];\\n\\t// \\t\\tdelete nftDataToExpiryDate[nftData];\\n\\t// \\t\\tresolver.setAddr(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), address(0));\\n\\t// \\t\\tresolver.setText(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), \\\"avatar\\\", \\\"\\\");\\n\\t// \\t}\\n\\t// \\temit DomainDeleted(_label, _nft, _tokenId);\\n\\t// }\\n\\n\\t// /**  \\n\\t//  * @notice\\n\\t//  * Used to update the avatar url of a token ID\\n\\t//  * @param _tokenId Token Id of nft\\n\\t//  * @param _nft collection address\\n\\t//  */\\n\\t// function updateAvatar(uint256 _tokenId, address _nft) external {\\n\\t// \\t(bytes32 subnode, bytes32 nftData) = _validateParamsOwner(_tokenId, _nft);\\n\\t// \\tuint256 expiryDate = nftDataToExpiryDate[nftData];\\n\\t// \\trequire(expiryDate > 0, \\\"Token has no label\\\");\\n\\t// \\tresolver.setText(subnode, \\\"avatar\\\", _generateUrl(_nft, _tokenId));\\n\\t// }\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the avatar url of a token ID\\n\\t * @param _tokenId Token Id of nft\\n\\t * @param _nft collection address\\n\\t */\\n\\tfunction updateAvatarAdmin(uint256 _tokenId, address _nft) external onlyOwner {\\n\\t\\t(bytes32 subnode, bytes32 nftData) = _validateParamsAdmin(_tokenId, _nft);\\n\\t\\tuint256 expiryDate = nftDataToExpiryDate[nftData];\\n\\t\\trequire(expiryDate > 0, \\\"Token has no label\\\");\\n\\t\\tresolver.setText(subnode, \\\"avatar\\\", _generateUrl(_nft, _tokenId));\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to claim a subdomain on an nft for free.\\n\\t * @param _label Name of subdomain\\n\\t * @param _tokenId Token Id of nft\\n\\t * @param _nft collection address\\n\\t * @param _bind Address to which subdomain resolves to\\n\\t */\\n\\tfunction grabSubdomain(string calldata _label, uint256 _tokenId, address _nft, address _bind) external isPaused isAuth(msg.sender) {\\n\\t\\t(bytes32 nameHash, bytes32 subnode, bytes32 nftData) = _checkParams(_label, _tokenId, _nft);\\n\\t\\tbytes32 attachedNftData = hashToNft[nameHash];\\n\\t\\trequire(upForGrabs[_nft], \\\"Not eligible for grabs\\\");\\n\\t\\trequire(!grabbed[_nft][_tokenId], \\\"Grabbed\\\");\\n\\t\\trequire(nftDataToExpiryDate[attachedNftData] < block.timestamp, \\\"Label already taken\\\");\\n\\n\\t\\tgrabbed[_nft][_tokenId] = true;\\n\\t\\t// delete expiry of previously attached token\\n\\t\\tif (nftData != attachedNftData) {\\n\\t\\t\\tdelete nftDataToExpiryDate[attachedNftData];\\n\\t\\t\\tdelete nftToHash[attachedNftData];\\n\\t\\t}\\n\\t\\t// make previous attached ens avaiable for others to claim\\n\\t\\tbytes32 attachedHash = nftToHash[nftData];\\n\\t\\tif (attachedHash != bytes32(0)) {\\n\\t\\t\\tdelete hashToNft[attachedHash];\\n\\t\\t\\tresolver.setAddr(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), address(0));\\n\\t\\t\\tresolver.setText(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), \\\"avatar\\\", \\\"\\\");\\n\\t\\t\\temit DomainDeleted(hashToStr[attachedHash], _nft, _tokenId);\\n\\t\\t}\\n\\t\\thashToNft[nameHash] = nftData;\\n\\t\\tnftToHash[nftData] = nameHash;\\n\\t\\tif (bytes(hashToStr[nameHash]).length == 0) {\\n\\t\\t\\tENS_FALLBACK.setSubnodeRecord(RUNES_NODE, nameHash, address(this), address(resolver), 0);\\n\\t\\t\\thashToStr[nameHash] = _label;\\n\\t\\t}\\n\\t\\tnftDataToExpiryDate[nftData] = block.timestamp + 3650 days;\\n\\t\\tresolver.setAddr(subnode, _bind);\\n\\t\\tresolver.setText(subnode, \\\"avatar\\\", _generateUrl(_nft, _tokenId));\\n\\t\\temit DomainAdded(_label, _nft, _tokenId);\\n\\t}\\n\\n\\t// /**  \\n\\t//  * @notice\\n\\t//  * Used to claim a subdomain on an nft.\\n\\t//  * @param _label Name of subdomain\\n\\t//  * @param _tokenId Token Id of nft\\n\\t//  * @param _nft collection address\\n\\t//  * @param _bind Address to which subdomain resolves to\\n\\t//  */\\n\\t// function addSubdomain(string calldata _label, uint256 _tokenId, address _nft, address _bind) external isPaused {\\n\\t// \\t(bytes32 nameHash, bytes32 subnode, bytes32 nftData) = _checkParams(_label, _tokenId, _nft);\\n\\t// \\tbytes32 attachedNftData = hashToNft[nameHash];\\n\\t// \\trequire(nftDataToExpiryDate[attachedNftData] < block.timestamp, \\\"Label already taken\\\");\\n\\n\\t// \\t// delete expiry of previously attached token\\n\\t// \\tif (nftData != attachedNftData) {\\n\\t// \\t\\tdelete nftDataToExpiryDate[attachedNftData];\\n\\t// \\t\\tdelete nftToHash[attachedNftData];\\n\\t// \\t}\\n\\t// \\t// make previous attached ens avaiable for others to claim\\n\\t// \\tbytes32 attachedHash = nftToHash[nftData];\\n\\t// \\tif (attachedHash != bytes32(0)) {\\n\\t// \\t\\tdelete hashToNft[attachedHash];\\n\\t// \\t\\tresolver.setAddr(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), address(0));\\n\\t// \\t\\tresolver.setText(keccak256(abi.encodePacked(RUNES_NODE, attachedHash)), \\\"avatar\\\", \\\"\\\");\\n\\t// \\t\\temit DomainDeleted(hashToStr[attachedHash], _nft, _tokenId);\\n\\t// \\t}\\n\\t// \\thashToNft[nameHash] = nftData;\\n\\t// \\tnftToHash[nftData] = nameHash;\\n\\t// \\tif (bytes(hashToStr[nameHash]).length == 0) {\\n\\t// \\t\\tENS_FALLBACK.setSubnodeRecord(RUNES_NODE, nameHash, address(this), address(resolver), 0);\\n\\t// \\t\\thashToStr[nameHash] = _label;\\n\\t// \\t}\\n\\t// \\tnftDataToExpiryDate[nftData] = block.timestamp + 365 days;\\n\\t// \\tresolver.setAddr(subnode, _bind);\\n\\t// \\tresolver.setText(subnode, \\\"avatar\\\", _generateUrl(_nft, _tokenId));\\n\\t// \\tygg.transferFrom(msg.sender, treasury, getFee(bytes(_label).length));\\n\\t// \\temit DomainAdded(_label, _nft, _tokenId);\\n\\t// }\\n\\n\\t// /**  \\n\\t//  * @notice\\n\\t//  * Used to extend a subdomain registration.\\n\\t//  * @param _tokenId Token Id of nft\\n\\t//  * @param _nft collection address\\n\\t//  * @param _amount Amount of nana to send to extend duration\\n\\t//  */\\n\\t// function extendSubdomain(uint256 _tokenId, address _nft, uint256 _amount) external {\\n\\t// \\tbytes32 nftData = _validateParamsNotOwner(_tokenId, _nft);\\n\\t// \\tuint256 expiryDate = nftDataToExpiryDate[nftData];\\n\\t// \\trequire(expiryDate > 0, \\\"Token has no label\\\");\\n\\t// \\tuint256 fee = getFee(bytes(hashToStr[nftToHash[nftData]]).length);\\n\\t// \\tuint256 extraDuration = (365 days * _amount) / fee;\\n\\n\\t// \\tnftDataToExpiryDate[nftData] = (expiryDate > block.timestamp ? expiryDate : block.timestamp)  + extraDuration;\\n\\t// \\tygg.transferFrom(msg.sender, treasury, _amount);\\n\\t// }\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to fetch ens name of an nft\\n\\t * @param _nft collection address\\n\\t * @param _tokenId Token Id of nft\\n\\t */\\n\\tfunction name(address _nft, uint256 _tokenId) public view returns(string memory) {\\n\\t\\tbytes32 nameHash = nftToHash[_concatNftData(_nft, _tokenId)];\\n\\t\\tif (nameHash == 0x0)\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\treturn string(abi.encodePacked(hashToStr[nameHash], \\\".kongz.eth\\\"));\\n\\t}\\n\\n\\tfunction validateName(string memory str) public pure returns (bool){\\n\\t\\tbytes memory b = bytes(str);\\n\\t\\tif(b.length < 1) return false;\\n\\t\\t// if(b.length > 32) return false; // Cannot be longer than 32 characters\\n\\n\\t\\tfor(uint i; i<b.length; i++){\\n\\t\\t\\tbytes1 char = b[i];\\n\\n\\t\\t\\tif (char == 0x20) return false; // Cannot contain spaces\\n\\n\\t\\t\\tif (char == 0xf0) {\\n\\t\\t\\t\\tif (b.length - 1 - i < 3)  return false; // unicode must have 3 more bytes\\n\\t\\t\\t\\ti += 3;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (char == 0x2d)\\n\\t\\t\\t\\tcontinue; // if car is - continue\\n\\n\\t\\t\\tif(\\n\\t\\t\\t\\t!(char >= 0x30 && char <= 0x39) && //9-0\\n\\t\\t\\t\\t// !(char >= 0x41 && char <= 0x5A) && //A-Z\\n\\t\\t\\t\\t!(char >= 0x61 && char <= 0x7A) //a-z\\n\\t\\t\\t)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _checkParams(string calldata _label, uint256 _tokenId, address _nft) internal view returns (bytes32 nameHash, bytes32 subnode, bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft], \\\"wong\\\");\\n\\t\\trequire(IERC721(_nft).ownerOf(_tokenId) == msg.sender || msg.sender == runesNft, \\\"!owner\\\");\\n\\t\\trequire(validateName(_label), \\\"!name\\\");\\n\\t\\trequire(!reservedOrBanned[keccak256(abi.encodePacked(_label))], \\\"!use\\\");\\n\\t\\tnameHash = _nameHash(_label);\\n\\t\\tsubnode = keccak256(abi.encodePacked(RUNES_NODE, nameHash));\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t}\\n\\n\\tfunction _adminCheckParams(string calldata _label, uint256 _tokenId, address _nft) internal view returns (bytes32 nameHash, bytes32 subnode, bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft]);\\n\\t\\trequire(validateName(_label));\\n\\t\\tnameHash = _nameHash(_label);\\n\\t\\tsubnode = keccak256(abi.encodePacked(RUNES_NODE, nameHash));\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t}\\n\\n\\tfunction _validateParams(string calldata _label, uint256 _tokenId, address _nft) internal view returns (bytes32 nameHash, bytes32 subnode, bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft]);\\n\\t\\trequire(IERC721(_nft).ownerOf(_tokenId) == msg.sender, \\\"!owner\\\");\\n\\t\\trequire(validateName(_label));\\n\\t\\tnameHash = _nameHash(_label);\\n\\t\\tsubnode = keccak256(abi.encodePacked(RUNES_NODE, nameHash));\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t\\trequire(hashToNft[nameHash] == nftData, \\\"domain !binded to nft\\\");\\n\\t}\\n\\n\\tfunction _validateParamsOwner(uint256 _tokenId, address _nft) internal view returns (bytes32 subnode, bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft]);\\n\\t\\trequire(IERC721(_nft).ownerOf(_tokenId) == msg.sender, \\\"!owner\\\");\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t\\trequire(nftDataToExpiryDate[nftData] > 0, \\\"Token has no label\\\");\\n\\t\\tbytes32 nameHash = nftToHash[nftData];\\n\\t\\tsubnode = keccak256(abi.encodePacked(RUNES_NODE, nameHash));\\n\\t}\\n\\n\\tfunction _validateParamsAdmin(uint256 _tokenId, address _nft) internal view returns (bytes32 subnode, bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft]);\\n\\t\\t// require(IERC721(_nft).ownerOf(_tokenId) == msg.sender, \\\"!owner\\\");\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t\\trequire(nftDataToExpiryDate[nftData] > 0, \\\"Token has no label\\\");\\n\\t\\tbytes32 nameHash = nftToHash[nftData];\\n\\t\\tsubnode = keccak256(abi.encodePacked(RUNES_NODE, nameHash));\\n\\t}\\n\\n\\tfunction _validateParamsNotOwner(uint256 _tokenId, address _nft) internal view returns (bytes32 nftData) {\\n\\t\\trequire(acceptedNfts[_nft]);\\n\\t\\tnftData = _concatNftData(_nft, _tokenId);\\n\\t}\\n\\n\\tfunction _nameHash(string calldata _label) internal pure returns(bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(_label));\\n\\t}\\n\\n\\tfunction _concatNftData(address _nft, uint256 _tokenId) internal pure returns(bytes32) {\\n\\t\\tuint256 data = (uint256(uint160(_nft)) << 96) + _tokenId;\\n\\t\\treturn bytes32(data);\\n\\t}\\n\\n\\tfunction _parseNftData(bytes32 _data) internal pure returns(address, uint256) {\\n\\t\\tuint256 tokenId = uint256(_data) & 0xffffffffffff;\\n\\t\\taddress nft = address(uint160(uint256(_data) >> 96));\\n\\t\\treturn (nft, tokenId);\\n\\t}\\n\\n\\tfunction _generateUrl(address _nft, uint256 _tokenId) internal view returns(string memory) {\\n\\t\\t// return string(abi.encodePacked(nftBaseUrl[_nft], _toString(_tokenId), nftSuffix[_nft]));\\n\\t\\treturn IERC721Metadata(_nft).tokenURI(_tokenId);\\n\\t}\\n\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ContextUpgradeable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"SubDomainsFactory.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DomainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DomainDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RUNES_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedNfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_labels\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_binds\",\"type\":\"address[]\"}],\"name\":\"giftSubdomains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bind\",\"type\":\"address\"}],\"name\":\"grabSubdomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grabbed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToNft\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftBaseUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nftDataToExpiryDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nftToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"reservedOrBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runesNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bind\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collec\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setGrab\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_values\",\"type\":\"string[]\"}],\"name\":\"setManyText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collec\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setNewCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upForGrabs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"updateAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"updateAvatarAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"updateBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"_vals\",\"type\":\"bool[]\"}],\"name\":\"updateReserveOrBanned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"updateRunesNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_suffix\",\"type\":\"string\"}],\"name\":\"updateSuffixUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ygg\",\"type\":\"address\"}],\"name\":\"updateygg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"validateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ygg\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RunesEns", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}