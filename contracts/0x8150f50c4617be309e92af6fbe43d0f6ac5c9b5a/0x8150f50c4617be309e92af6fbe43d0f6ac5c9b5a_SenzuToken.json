{"SourceCode": "// https://x.com/senzubeanseth\r\n// https://t.me/SenzuBeanETH\r\n// https://senzubeans.trade/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract SenzuToken is IERC20, Ownable {\r\n    // events\r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n\r\n    // constants\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint256 constant MAX_FEE = 15;\r\n\r\n    // states\r\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public UNISWAP_V2_PAIR;\r\n\r\n    struct Fee {\r\n        uint8 reflection;\r\n        uint8 marketing;\r\n        uint8 lp;\r\n        uint8 buyback;\r\n        uint8 burn;\r\n        uint128 total;\r\n    }\r\n\r\n    string _name = \"Senzu\";\r\n    string _symbol = \"SENZU\";\r\n\r\n    uint256 _totalSupply = 1_000_000_000 ether;\r\n    uint256 public _maxTxAmount = (_totalSupply * 2) / 1000; // 0.2%\r\n\r\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */\r\n    mapping(address => uint256) public _rOwned;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    bool public limitsEnabled = false;\r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n\r\n    Fee public buyFee =\r\n        Fee({\r\n            reflection: 2,\r\n            marketing: 2,\r\n            lp: 2,\r\n            buyback: 2,\r\n            burn: 2,\r\n            total: 10\r\n        });\r\n    Fee public sellFee =\r\n        Fee({\r\n            reflection: 3,\r\n            marketing: 3,\r\n            lp: 3,\r\n            buyback: 3,\r\n            burn: 3,\r\n            total: 15\r\n        });\r\n\r\n    bool public launched = false;\r\n\r\n    address private marketingFeeReceiver;\r\n    address private lpFeeReceiver;\r\n    address private buybackFeeReceiver;\r\n\r\n    bool public claimingFees = false;\r\n    uint256 public swapThreshold = (_totalSupply * 1) / 10000;\r\n    bool inSwap;\r\n    mapping(address => bool) public blacklists;\r\n\r\n    // modifiers\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // constructor\r\n    constructor() payable Ownable(_msgSender()) {\r\n        marketingFeeReceiver = 0x3853220017c1f4629D5Ffc9169c0ed177a1Eb128;\r\n        lpFeeReceiver = 0xD81285F791761454bec476505BFEc7943e8086a9;\r\n        buybackFeeReceiver = 0x6B9458FD8C6AC721bde491dCa5C253BFB1817355;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(UNISWAP_V2_ROUTER)] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[owner()] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n        isFeeExempt[owner()] = true;\r\n\r\n        uint256 supplyForMarketing = (_totalSupply * 5) / 100;\r\n        uint256 supplyForLiquidity = (_totalSupply * 10) / 100;\r\n        uint256 supplyForOwner = (_totalSupply * 85) / 100;\r\n        _rOwned[marketingFeeReceiver] = supplyForMarketing;\r\n        _rOwned[address(this)] = supplyForLiquidity;\r\n        _rOwned[owner()] = supplyForOwner;\r\n        emit Transfer(address(0), marketingFeeReceiver, supplyForMarketing);\r\n        emit Transfer(address(0), address(this), supplyForLiquidity);\r\n        emit Transfer(address(0), owner(), supplyForOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // ERC20\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(\r\n                _allowances[sender][msg.sender] >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    // views\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return (tokens * _totalProportion) / _totalSupply;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 proportion)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (proportion * _totalSupply) / _totalProportion;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    // owners\r\n    function launch(address _owner) external onlyOwner {\r\n        require(!launched, \"Already launched.\");\r\n\r\n        UNISWAP_V2_PAIR = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory())\r\n            .createPair(address(this), UNISWAP_V2_ROUTER.WETH());\r\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256)\r\n            .max;\r\n        _allowances[address(this)][address(UNISWAP_V2_PAIR)] = type(uint256)\r\n            .max;\r\n        _allowances[address(this)][_owner] = type(uint256).max;\r\n        IERC20(UNISWAP_V2_PAIR).approve(\r\n            address(UNISWAP_V2_ROUTER),\r\n            type(uint256).max\r\n        );\r\n\r\n        UNISWAP_V2_ROUTER.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            _owner,\r\n            block.timestamp\r\n        );\r\n\r\n        claimingFees = true;\r\n        limitsEnabled = true;\r\n        launched = true;\r\n    }\r\n\r\n    function clearStuckBalance() external onlyOwner {\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function clearStuckToken() external onlyOwner {\r\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        claimingFees = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function changeFees(\r\n        uint8 reflectionFeeBuy,\r\n        uint8 marketingFeeBuy,\r\n        uint8 lpFeeBuy,\r\n        uint8 buybackFeeBuy,\r\n        uint8 burnFeeBuy,\r\n        uint8 reflectionFeeSell,\r\n        uint8 marketingFeeSell,\r\n        uint8 lpFeeSell,\r\n        uint8 buybackFeeSell,\r\n        uint8 burnFeeSell\r\n    ) external onlyOwner {\r\n        uint128 __totalBuyFee = reflectionFeeBuy +\r\n            marketingFeeBuy +\r\n            lpFeeBuy +\r\n            buybackFeeBuy +\r\n            burnFeeBuy;\r\n        uint128 __totalSellFee = reflectionFeeSell +\r\n            marketingFeeSell +\r\n            lpFeeSell +\r\n            buybackFeeSell +\r\n            burnFeeSell;\r\n\r\n        require(__totalBuyFee <= MAX_FEE, \"Buy fees too high\");\r\n        require(__totalSellFee <= MAX_FEE, \"Sell fees too high\");\r\n\r\n        buyFee = Fee({\r\n            reflection: reflectionFeeBuy,\r\n            marketing: reflectionFeeBuy,\r\n            lp: reflectionFeeBuy,\r\n            buyback: reflectionFeeBuy,\r\n            burn: burnFeeBuy,\r\n            total: __totalBuyFee\r\n        });\r\n\r\n        sellFee = Fee({\r\n            reflection: reflectionFeeSell,\r\n            marketing: reflectionFeeSell,\r\n            lp: reflectionFeeSell,\r\n            buyback: reflectionFeeSell,\r\n            burn: burnFeeSell,\r\n            total: __totalSellFee\r\n        });\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address m_,\r\n        address lp_,\r\n        address b_\r\n    ) external onlyOwner {\r\n        marketingFeeReceiver = m_;\r\n        lpFeeReceiver = lp_;\r\n        buybackFeeReceiver = b_;\r\n    }\r\n\r\n    function setMaxTxBasisPoint(uint256 p_) external onlyOwner {\r\n        _maxTxAmount = (_totalSupply * p_) / 10000;\r\n    }\r\n\r\n    function setLimitsEnabled(bool e_) external onlyOwner {\r\n        limitsEnabled = e_;\r\n    }\r\n\r\n    function blacklist(address _address, bool _isBlacklisting)\r\n        external\r\n        onlyOwner\r\n    {\r\n        blacklists[_address] = _isBlacklisting;\r\n    }\r\n\r\n    // private\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(!blacklists[recipient] && !blacklists[sender], \"Blacklisted\");\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (\r\n            limitsEnabled &&\r\n            !isTxLimitExempt[sender] &&\r\n            !isTxLimitExempt[recipient]\r\n        ) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n        }\r\n\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        require(_rOwned[sender] >= proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\r\n\r\n        uint256 proportionReceived = _shouldTakeFee(sender, recipient)\r\n            ? _takeFeeInProportions(\r\n                sender == UNISWAP_V2_PAIR ? true : false,\r\n                sender,\r\n                proportionAmount\r\n            )\r\n            : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + proportionReceived;\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            tokenFromReflection(proportionReceived)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        require(_rOwned[sender] >= proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + proportionAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _takeFeeInProportions(\r\n        bool buying,\r\n        address sender,\r\n        uint256 proportionAmount\r\n    ) internal returns (uint256) {\r\n        Fee memory __buyFee = buyFee;\r\n        Fee memory __sellFee = sellFee;\r\n\r\n        uint256 proportionFeeAmount = buying == true\r\n            ? (proportionAmount * __buyFee.total) / 100\r\n            : (proportionAmount * __sellFee.total) / 100;\r\n\r\n        // reflect\r\n        uint256 proportionReflected = buying == true\r\n            ? (proportionFeeAmount * __buyFee.reflection) / __buyFee.total\r\n            : (proportionFeeAmount * __sellFee.reflection) / __sellFee.total;\r\n\r\n        _totalProportion = _totalProportion - proportionReflected;\r\n\r\n        // take fees\r\n        uint256 _proportionToContract = proportionFeeAmount -\r\n            proportionReflected;\r\n        if (_proportionToContract > 0) {\r\n            _rOwned[address(this)] =\r\n                _rOwned[address(this)] +\r\n                _proportionToContract;\r\n\r\n            emit Transfer(\r\n                sender,\r\n                address(this),\r\n                tokenFromReflection(_proportionToContract)\r\n            );\r\n        }\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount - proportionFeeAmount;\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != UNISWAP_V2_PAIR &&\r\n            !inSwap &&\r\n            claimingFees &&\r\n            balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        Fee memory __sellFee = sellFee;\r\n\r\n        uint256 __swapThreshold = swapThreshold;\r\n        uint256 amountToBurn = (__swapThreshold * __sellFee.burn) /\r\n            __sellFee.total;\r\n        uint256 amountToSwap = __swapThreshold - amountToBurn;\r\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\r\n\r\n        // burn\r\n        _transferFrom(address(this), DEAD, amountToBurn);\r\n\r\n        // swap\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UNISWAP_V2_ROUTER.WETH();\r\n\r\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        uint256 totalSwapFee = __sellFee.total -\r\n            __sellFee.reflection -\r\n            __sellFee.burn;\r\n        uint256 amountETHMarketing = (amountETH * __sellFee.marketing) /\r\n            totalSwapFee;\r\n        uint256 amountETHLP = (amountETH * __sellFee.lp) / totalSwapFee;\r\n        uint256 amountETHBuyback = (amountETH * __sellFee.buyback) /\r\n            totalSwapFee;\r\n\r\n        // send\r\n        (bool tmpSuccess, ) = payable(marketingFeeReceiver).call{\r\n            value: amountETHMarketing\r\n        }(\"\");\r\n        (tmpSuccess, ) = payable(lpFeeReceiver).call{value: amountETHLP}(\"\");\r\n        (tmpSuccess, ) = payable(buybackFeeReceiver).call{\r\n            value: amountETHBuyback\r\n        }(\"\");\r\n    }\r\n\r\n    function _shouldTakeFee(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyback\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"reflectionFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lpFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buybackFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflectionFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lpFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buybackFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFeeSell\",\"type\":\"uint8\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyback\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p_\",\"type\":\"uint256\"}],\"name\":\"setMaxTxBasisPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SenzuToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09e8f0f86581df77c8bd19ee44ceacc79048f6e5a171eaed09c8042ae42750a5"}