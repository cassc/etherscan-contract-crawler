{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TownToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface TownInterface {\r\n    function checkProposal(address proposal) external returns (bool);\r\n    function voteOn(address externalToken, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract TownToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Town Token\";\r\n    string public constant symbol = \"TTW\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    bool public initiated;\r\n\r\n    address[] private _holders;\r\n\r\n    TownInterface _town;\r\n\r\n    constructor () public {\r\n        initiated = false;\r\n    }\r\n\r\n    function getHoldersCount() external view returns (uint256) {\r\n        return _holders.length;\r\n    }\r\n\r\n    function getHolderByIndex(uint256 index) external view returns (address) {\r\n        return _holders[index];\r\n    }\r\n\r\n    function init (uint256 totalSupply, address townContract) public onlyOwner {\r\n        require(initiated == false, \"contract already initiated\");\r\n        _town = TownInterface(townContract);\r\n        _mint(townContract, totalSupply);\r\n        initiated = true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        if (msg.sender != address(_town)) {\r\n            if (_town.checkProposal(recipient) == true) {\r\n                super.transfer(address(_town), amount);\r\n                return _town.voteOn(recipient, amount);\r\n            }\r\n            // check 223 ERC and call voteOn function\r\n        }\r\n\r\n        if (recipient != address(_town)) {\r\n            bool found = false;\r\n            for (uint i = 0; i < _holders.length; ++i) {    // find recipient address in holders list\r\n                if (_holders[i] == recipient) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (found == false) {                           // if recipient not found, we push new address\r\n                _holders.push(recipient);\r\n            }\r\n        }\r\n\r\n        if (balanceOf(address(msg.sender)) == amount && msg.sender != address(_town)) { // remove address with 0 balance from holders\r\n            uint i = 0;\r\n            for (; i < _holders.length; ++i) {\r\n                if (_holders[i] == address(msg.sender)) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (i < (_holders.length - 1)) {\r\n                _holders[i] = _holders[_holders.length - 1];\r\n                delete _holders[_holders.length - 1];\r\n                _holders.length--;\r\n            }\r\n        }\r\n\r\n        return super.transfer(recipient, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/ExternalTokenTemplate.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ExternalTokenTemplate is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Karma Finance\";\r\n    string public constant symbol = \"KFI\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    constructor (uint256 totalSupply) public {\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n}\r\n\r\n// File: contracts/Town.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract Town is TownInterface {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _distributionPeriod;\r\n    uint256 private _distributionPeriodsNumber;\r\n    uint256 private _startRate;\r\n    uint256 private _minTokenGetAmount;\r\n    uint256 private _durationOfMinTokenGetAmount;\r\n    uint256 private _maxTokenGetAmount;\r\n    uint256 private _minExternalTokensAmount;\r\n    uint256 private _minSignAmount;\r\n    uint256 private _lastDistributionsDate;\r\n\r\n    uint256 private _transactionsCount;\r\n\r\n    struct ExternalTokenDistributionsInfo {\r\n        address _official;\r\n        uint256 _distributionAmount;\r\n        uint256 _distributionsCount;\r\n    }\r\n\r\n    struct ExternalToken {\r\n        ExternalTokenDistributionsInfo[] _entities;\r\n        uint256 _weight;\r\n    }\r\n\r\n    struct TransactionsInfo {\r\n        uint256 _rate;\r\n        uint256 _amount;\r\n    }\r\n\r\n    struct TownTokenRequest {\r\n        address _address;\r\n        TransactionsInfo _info;\r\n    }\r\n\r\n    struct RemunerationsInfo {\r\n        address payable _address;\r\n        uint256 _priority;\r\n        uint256 _amount;\r\n    }\r\n\r\n    struct RemunerationsOfficialsInfo {\r\n        uint256 _amount;\r\n        uint256 _decayTimestamp;\r\n    }\r\n\r\n    TownToken private _token;\r\n\r\n    mapping (address => TransactionsInfo[]) private _historyTransactions;\r\n\r\n    TownTokenRequest[] private _queueTownTokenRequests;\r\n\r\n    RemunerationsInfo[] private _remunerationsQueue;\r\n\r\n    mapping (address => ExternalToken) private _externalTokens;\r\n    address[] private _externalTokensAddresses;\r\n\r\n    mapping (address => mapping (address => uint256)) private _townHoldersLedger;\r\n    mapping (address => address[]) private _ledgerExternalTokensAddresses;\r\n\r\n    mapping (address => RemunerationsOfficialsInfo) private _officialsLedger;\r\n\r\n    address[] private _externalTokensWithWight;\r\n\r\n    modifier onlyTownTokenSmartContract {\r\n        require(msg.sender == address(_token), \"only town token smart contract can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        uint256 distributionPeriod,\r\n        uint256 distributionPeriodsNumber,\r\n        uint256 startRate,\r\n        uint256 minTokenGetAmount,\r\n        uint256 durationOfMinTokenGetAmount,\r\n        uint256 maxTokenGetAmount,\r\n        uint256 minExternalTokensAmount,\r\n        address tokenAddress) public {\r\n        require(distributionPeriod > 0, \"distributionPeriod wrong\");\r\n        require(distributionPeriodsNumber > 0, \"distributionPeriodsNumber wrong\");\r\n        require(minTokenGetAmount > 0, \"minTokenGetAmount wrong\");\r\n        require(durationOfMinTokenGetAmount > 0, \"durationOfMinTokenGetAmount wrong\");\r\n        require(maxTokenGetAmount > 0, \"maxTokenGetAmount wrong\");\r\n        require(minExternalTokensAmount > 0, \"minExternalTokensAmount wrong\");\r\n\r\n        _distributionPeriod = distributionPeriod * 1 days;\r\n        _distributionPeriodsNumber = distributionPeriodsNumber;\r\n        _startRate = startRate;\r\n\r\n        _token = TownToken(tokenAddress);\r\n\r\n        _transactionsCount = 0;\r\n        _minTokenGetAmount = minTokenGetAmount;\r\n        _durationOfMinTokenGetAmount = durationOfMinTokenGetAmount;\r\n        _maxTokenGetAmount = maxTokenGetAmount;\r\n        _minExternalTokensAmount = minExternalTokensAmount;\r\n        _lastDistributionsDate = (now.div(86400).add(1)).mul(86400);\r\n        _minSignAmount = 10000000000000;\r\n    }\r\n\r\n    function () external payable {\r\n        if (msg.value <= _minSignAmount) {\r\n            if (_officialsLedger[msg.sender]._amount > 0) {\r\n                claimFunds(msg.sender);\r\n            }\r\n            if (_ledgerExternalTokensAddresses[msg.sender].length > 0) {\r\n                claimExternalTokens(msg.sender);\r\n            }\r\n            return;\r\n        }\r\n        uint256 tokenAmount = IWantTakeTokensToAmount(msg.value);\r\n        require(_transactionsCount > _durationOfMinTokenGetAmount || tokenAmount > _minTokenGetAmount, \"insufficient amount\");\r\n\r\n        getTownTokens(msg.sender);\r\n    }\r\n\r\n    function token() external view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function distributionPeriod() external view returns (uint256) {\r\n        return _distributionPeriod;\r\n    }\r\n\r\n    function distributionPeriodsNumber() external view returns (uint256) {\r\n        return _distributionPeriodsNumber;\r\n    }\r\n\r\n    function startRate() external view returns (uint256) {\r\n        return _startRate;\r\n    }\r\n\r\n    function minTokenGetAmount() external view returns (uint256) {\r\n        return _minTokenGetAmount;\r\n    }\r\n\r\n    function durationOfMinTokenGetAmount() external view returns (uint256) {\r\n        return _durationOfMinTokenGetAmount;\r\n    }\r\n\r\n    function maxTokenGetAmount() external view returns (uint256) {\r\n        return _maxTokenGetAmount;\r\n    }\r\n\r\n    function minExternalTokensAmount() external view returns (uint256) {\r\n        return _minExternalTokensAmount;\r\n    }\r\n\r\n    function lastDistributionsDate() external view returns (uint256) {\r\n        return _lastDistributionsDate;\r\n    }\r\n\r\n    function transactionsCount() external view returns (uint256) {\r\n        return _transactionsCount;\r\n    }\r\n\r\n    function getCurrentRate() external view returns (uint256) {\r\n        return currentRate();\r\n    }\r\n\r\n    function getLengthRemunerationQueue() external view returns (uint256) {\r\n        return _remunerationsQueue.length;\r\n    }\r\n\r\n    function getMinSignAmount() external view returns (uint256) {\r\n        return _minSignAmount;\r\n    }\r\n\r\n    function getRemunerationQueue(uint256 index) external view returns (address, uint256, uint256) {\r\n        return (_remunerationsQueue[index]._address, _remunerationsQueue[index]._priority, _remunerationsQueue[index]._amount);\r\n    }\r\n\r\n    function getLengthQueueTownTokenRequests() external view returns (uint256) {\r\n        return _queueTownTokenRequests.length;\r\n    }\r\n\r\n    function getQueueTownTokenRequests(uint256 index) external  view returns (address, uint256, uint256) {\r\n        TownTokenRequest memory tokenRequest = _queueTownTokenRequests[index];\r\n        return (tokenRequest._address, tokenRequest._info._rate, tokenRequest._info._amount);\r\n    }\r\n\r\n    function getMyTownTokens() external view returns (uint256, uint256) {\r\n        uint256 amount = 0;\r\n        uint256 tokenAmount = 0;\r\n        for (uint256 i = 0; i < _historyTransactions[msg.sender].length; ++i) {\r\n            amount = amount.add(_historyTransactions[msg.sender][i]._amount.mul(_historyTransactions[msg.sender][i]._rate).div(10 ** 18));\r\n            tokenAmount = tokenAmount.add(_historyTransactions[msg.sender][i]._amount);\r\n        }\r\n        return (amount, tokenAmount);\r\n    }\r\n\r\n    function checkProposal(address proposal) external returns (bool) {\r\n        if (_externalTokens[proposal]._entities.length > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function sendExternalTokens(address official, address externalToken) external returns (bool) {\r\n        ERC20 tokenERC20 = ERC20(externalToken);\r\n        uint256 balance = tokenERC20.allowance(official, address(this));\r\n        require(tokenERC20.balanceOf(official) >= balance, \"Official should have external tokens for approved\");\r\n        require(balance > 0, \"External tokens must be approved for town smart contract\");\r\n        tokenERC20.transferFrom(official, address(this), balance);\r\n\r\n        ExternalTokenDistributionsInfo memory tokenInfo;\r\n        tokenInfo._official = official;\r\n        tokenInfo._distributionsCount = _distributionPeriodsNumber;\r\n        tokenInfo._distributionAmount = balance.div(_distributionPeriodsNumber);\r\n\r\n        ExternalToken storage tokenObj = _externalTokens[externalToken];\r\n\r\n        if (tokenObj._entities.length == 0) {\r\n            _externalTokensAddresses.push(externalToken);\r\n        }\r\n\r\n        tokenObj._entities.push(tokenInfo);\r\n\r\n        return true;\r\n    }\r\n\r\n    function remuneration(uint256 tokensAmount) external returns (bool) {\r\n        require(_token.balanceOf(msg.sender) >= tokensAmount, \"Town tokens not found\");\r\n        require(_token.allowance(msg.sender, address(this)) >= tokensAmount, \"Town tokens must be approved for town smart contract\");\r\n\r\n        uint256 debt = 0;\r\n        uint256 restOfTokens = tokensAmount;\r\n        uint256 executedRequestCount = 0;\r\n        for (uint256 i = 0; i < _queueTownTokenRequests.length; ++i) {\r\n            address user = _queueTownTokenRequests[i]._address;\r\n            uint256 rate = _queueTownTokenRequests[i]._info._rate;\r\n            uint256 amount = _queueTownTokenRequests[i]._info._amount;\r\n            if (restOfTokens > amount) {\r\n                _token.transferFrom(msg.sender, user, amount);\r\n                restOfTokens = restOfTokens.sub(amount);\r\n                debt = debt.add(amount.mul(rate).div(10 ** 18));\r\n                executedRequestCount++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (restOfTokens > 0) {\r\n            _token.transferFrom(msg.sender, address(this), restOfTokens);\r\n        }\r\n\r\n        if (executedRequestCount > 0) {\r\n            for (uint256 i = executedRequestCount; i < _queueTownTokenRequests.length; ++i) {\r\n                _queueTownTokenRequests[i - executedRequestCount] = _queueTownTokenRequests[i];\r\n            }\r\n\r\n            for (uint256 i = 0; i < executedRequestCount; ++i) {\r\n                delete _queueTownTokenRequests[_queueTownTokenRequests.length - 1];\r\n                _queueTownTokenRequests.length--;\r\n            }\r\n        }\r\n\r\n        if (_historyTransactions[msg.sender].length > 0) {\r\n            for (uint256 i = _historyTransactions[msg.sender].length - 1; ; --i) {\r\n                uint256 rate = _historyTransactions[msg.sender][i]._rate;\r\n                uint256 amount = _historyTransactions[msg.sender][i]._amount;\r\n                delete _historyTransactions[msg.sender][i];\r\n                _historyTransactions[msg.sender].length--;\r\n\r\n                if (restOfTokens < amount) {\r\n                    TransactionsInfo memory info = TransactionsInfo(rate, amount.sub(restOfTokens));\r\n                    _historyTransactions[msg.sender].push(info);\r\n\r\n                    debt = debt.add(restOfTokens.mul(rate).div(10 ** 18));\r\n                    break;\r\n                }\r\n\r\n                debt = debt.add(amount.mul(rate).div(10 ** 18));\r\n                restOfTokens = restOfTokens.sub(amount);\r\n\r\n                if (i == 0) break;\r\n            }\r\n        }\r\n\r\n        if (debt > address(this).balance) {\r\n            msg.sender.transfer(address(this).balance);\r\n\r\n            RemunerationsInfo memory info = RemunerationsInfo(msg.sender, 2, debt.sub(address(this).balance));\r\n            _remunerationsQueue.push(info);\r\n        } else {\r\n            msg.sender.transfer(debt);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function distributionSnapshot() external returns (bool) {\r\n        require(now > (_lastDistributionsDate + _distributionPeriod), \"distribution time has not yet arrived\");\r\n\r\n        uint256 sumWeight = 0;\r\n        address[] memory tempArray;\r\n        _externalTokensWithWight = tempArray;\r\n        for (uint256 i = 0; i < _externalTokensAddresses.length; ++i) {\r\n            ExternalToken memory externalToken = _externalTokens[_externalTokensAddresses[i]];\r\n            if (externalToken._weight > 0) {\r\n                uint256 sumExternalTokens = 0;\r\n                for (uint256 j = 0; j < externalToken._entities.length; ++j) {\r\n                    if (externalToken._entities[j]._distributionsCount > 0) {\r\n                        ExternalTokenDistributionsInfo memory info = externalToken._entities[j];\r\n                        sumExternalTokens = sumExternalTokens.add(info._distributionAmount.mul(info._distributionsCount));\r\n                    }\r\n                }\r\n                if (sumExternalTokens > _minExternalTokensAmount) {\r\n                    sumWeight = sumWeight.add(externalToken._weight);\r\n                    _externalTokensWithWight.push(_externalTokensAddresses[i]);\r\n                } else {\r\n                    externalToken._weight = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 fullBalance = address(this).balance;\r\n        for (uint256 i = 0; i < _externalTokensWithWight.length; ++i) {\r\n            ExternalToken memory externalToken = _externalTokens[_externalTokensWithWight[i]];\r\n            uint256 sumExternalTokens = 0;\r\n            for (uint256 j = 0; j < externalToken._entities.length; ++j) {\r\n                sumExternalTokens = sumExternalTokens.add(externalToken._entities[j]._distributionAmount);\r\n            }\r\n            uint256 externalTokenCost = fullBalance.mul(externalToken._weight).div(sumWeight);\r\n            for (uint256 j = 0; j < externalToken._entities.length; ++j) {\r\n                address official = externalToken._entities[j]._official;\r\n                uint256 tokensAmount = externalToken._entities[j]._distributionAmount;\r\n                uint256 amount = externalTokenCost.mul(tokensAmount).div(sumExternalTokens);\r\n                uint256 decayTimestamp = (now - _lastDistributionsDate).div(_distributionPeriod).mul(_distributionPeriod).add(_lastDistributionsDate).add(_distributionPeriod);\r\n                _officialsLedger[official] = RemunerationsOfficialsInfo(amount, decayTimestamp);\r\n            }\r\n        }\r\n\r\n        uint256 sumHoldersTokens = _token.totalSupply().sub(_token.balanceOf(address(this)));\r\n\r\n        if (sumHoldersTokens != 0) {\r\n            for (uint256 i = 0; i < _token.getHoldersCount(); ++i) {\r\n                address holder = _token.getHolderByIndex(i);\r\n                uint256 balance = _token.balanceOf(holder);\r\n                for (uint256 j = 0; j < _externalTokensAddresses.length; ++j) {\r\n                    address externalTokenAddress = _externalTokensAddresses[j];\r\n                    ExternalToken memory externalToken = _externalTokens[externalTokenAddress];\r\n                    for (uint256 k = 0; k < externalToken._entities.length; ++k) {\r\n                        if (holder != address(this) && externalToken._entities[k]._distributionsCount > 0) {\r\n                            uint256 percent = balance.mul(externalToken._entities[k]._distributionAmount).div(sumHoldersTokens);\r\n                            if (percent > (10 ** 4)) {\r\n                                address[] memory externalTokensForHolder = _ledgerExternalTokensAddresses[holder];\r\n                                bool found = false;\r\n                                for (uint256 h = 0; h < externalTokensForHolder.length; ++h) {\r\n                                    if (externalTokensForHolder[h] == externalTokenAddress) {\r\n                                        found = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (found == false) {\r\n                                    _ledgerExternalTokensAddresses[holder].push(externalTokenAddress);\r\n                                }\r\n\r\n                                _townHoldersLedger[holder][externalTokenAddress] = _townHoldersLedger[holder][externalTokenAddress].add(percent);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (uint256 j = 0; j < _externalTokensAddresses.length; ++j) {\r\n                ExternalTokenDistributionsInfo[] memory tempEntities = _externalTokens[_externalTokensAddresses[j]]._entities;\r\n\r\n                for (uint256 k = 0; k < tempEntities.length; ++k) {\r\n                    delete _externalTokens[_externalTokensAddresses[j]]._entities[k];\r\n                }\r\n                _externalTokens[_externalTokensAddresses[j]]._entities.length = 0;\r\n\r\n                for (uint256 k = 0; k < tempEntities.length; ++k) {\r\n                    tempEntities[k]._distributionsCount--;\r\n                    if (tempEntities[k]._distributionsCount > 0) {\r\n                        _externalTokens[_externalTokensAddresses[j]]._entities.push(tempEntities[k]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < _externalTokensAddresses.length; ++i) {\r\n            if (_externalTokens[_externalTokensAddresses[i]]._weight > 0) {\r\n                _externalTokens[_externalTokensAddresses[i]]._weight = 0;\r\n            }\r\n        }\r\n\r\n        _lastDistributionsDate = _lastDistributionsDate.add(_distributionPeriod);\r\n        return true;\r\n    }\r\n\r\n    function voteOn(address externalToken, uint256 amount) external onlyTownTokenSmartContract returns (bool) {\r\n        require(_externalTokens[externalToken]._entities.length > 0, \"external token address not found\");\r\n        require(now < (_lastDistributionsDate + _distributionPeriod), \"need call distributionSnapshot function\");\r\n\r\n        _externalTokens[externalToken]._weight = _externalTokens[externalToken]._weight.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function claimExternalTokens(address holder) public returns (bool) {\r\n        address[] memory externalTokensForHolder = _ledgerExternalTokensAddresses[holder];\r\n        if (externalTokensForHolder.length > 0) {\r\n            for (uint256 i = externalTokensForHolder.length - 1; ; --i) {\r\n                ERC20(externalTokensForHolder[i]).transfer(holder, _townHoldersLedger[holder][externalTokensForHolder[i]]);\r\n                delete _townHoldersLedger[holder][externalTokensForHolder[i]];\r\n                delete _ledgerExternalTokensAddresses[holder][i];\r\n                _ledgerExternalTokensAddresses[holder].length--;\r\n\r\n                if (i == 0) break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function claimFunds(address payable official) public returns (bool) {\r\n        require(_officialsLedger[official]._amount != 0, \"official address not found in ledger\");\r\n\r\n        if (now >= _officialsLedger[official]._decayTimestamp) {\r\n            RemunerationsOfficialsInfo memory info = RemunerationsOfficialsInfo(0, 0);\r\n            _officialsLedger[official] = info;\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = _officialsLedger[official]._amount;\r\n        if (address(this).balance >= amount) {\r\n            official.transfer(amount);\r\n        } else {\r\n            RemunerationsInfo memory info = RemunerationsInfo(official, 1, amount);\r\n            _remunerationsQueue.push(info);\r\n        }\r\n        RemunerationsOfficialsInfo memory info = RemunerationsOfficialsInfo(0, 0);\r\n        _officialsLedger[official] = info;\r\n\r\n        return true;\r\n    }\r\n\r\n    function IWantTakeTokensToAmount(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(10 ** 18).div(currentRate());\r\n    }\r\n\r\n    function getTownTokens(address holder) public payable returns (bool) {\r\n        require(holder != address(0), \"holder address cannot be null\");\r\n\r\n        uint256 amount = msg.value;\r\n        uint256 tokenAmount = IWantTakeTokensToAmount(amount);\r\n        uint256 rate = currentRate();\r\n        if (_transactionsCount < _durationOfMinTokenGetAmount && tokenAmount < _minTokenGetAmount) {\r\n            return false;\r\n        }\r\n        if (tokenAmount >= _maxTokenGetAmount) {\r\n            tokenAmount = _maxTokenGetAmount;\r\n            uint256 change = amount.sub(_maxTokenGetAmount.mul(rate).div(10 ** 18));\r\n            msg.sender.transfer(change);\r\n            amount = amount.sub(change);\r\n        }\r\n\r\n        if (_token.balanceOf(address(this)) >= tokenAmount) {\r\n            TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenAmount);\r\n            _token.transfer(holder, tokenAmount);\r\n            _historyTransactions[holder].push(transactionsHistory);\r\n            _transactionsCount = _transactionsCount.add(1);\r\n        } else {\r\n            if (_token.balanceOf(address(this)) > 0) {\r\n                uint256 tokenBalance = _token.balanceOf(address(this));\r\n                _token.transfer(holder, tokenBalance);\r\n                TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenBalance);\r\n                _historyTransactions[holder].push(transactionsHistory);\r\n                tokenAmount = tokenAmount.sub(tokenBalance);\r\n            }\r\n\r\n            TransactionsInfo memory transactionsInfo = TransactionsInfo(rate, tokenAmount);\r\n            TownTokenRequest memory tokenRequest = TownTokenRequest(holder, transactionsInfo);\r\n            _queueTownTokenRequests.push(tokenRequest);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _remunerationsQueue.length; ++i) {\r\n            if (_remunerationsQueue[i]._priority == 1) {\r\n                if (_remunerationsQueue[i]._amount > amount) {\r\n                    _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount);\r\n                    amount = amount.sub(_remunerationsQueue[i]._amount);\r\n\r\n                    delete _remunerationsQueue[i];\r\n                    for (uint j = i + 1; j < _remunerationsQueue.length; ++j) {\r\n                        _remunerationsQueue[j - 1] = _remunerationsQueue[j];\r\n                    }\r\n                    _remunerationsQueue.length--;\r\n                } else {\r\n                    _remunerationsQueue[i]._address.transfer(amount);\r\n                    _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < _remunerationsQueue.length; ++i) {\r\n            if (_remunerationsQueue[i]._amount > amount) {\r\n                _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount);\r\n                amount = amount.sub(_remunerationsQueue[i]._amount);\r\n\r\n                delete _remunerationsQueue[i];\r\n                for (uint j = i + 1; j < _remunerationsQueue.length; ++j) {\r\n                    _remunerationsQueue[j - 1] = _remunerationsQueue[j];\r\n                }\r\n                _remunerationsQueue.length--;\r\n            } else {\r\n                _remunerationsQueue[i]._address.transfer(amount);\r\n                _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function currentRate() internal view returns (uint256) {\r\n        return _startRate;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "ExternalTokenTemplate", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000006ca1c92539831ea00000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9339ef5b2e25ba12675510675acbcefeac4b6cd1ab5db6b2fb4c5158b647ac44"}