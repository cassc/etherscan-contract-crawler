{"SourceCode": "# @version 0.3.9\r\n\r\n\"\"\"\r\n@title LoansOTC\r\n@author [Zharta](https://zharta.io/)\r\n@notice The loans contract exists as the main interface to create peer-to-pool NFT-backed loans\r\n\"\"\"\r\n\r\n# Interfaces\r\n\r\nfrom vyper.interfaces import ERC165 as IERC165\r\nfrom vyper.interfaces import ERC721 as IERC721\r\nfrom vyper.interfaces import ERC20 as IERC20\r\n\r\ninterface ICollateralVault:\r\n    def storeCollateral(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address, _createDelegation: bool): nonpayable\r\n    def transferCollateralFromLoan(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address): nonpayable\r\n    def isCollateralApprovedForVault(_borrower: address, _collateralAddress: address, _tokenId: uint256) -> bool: view\r\n    def setCollateralDelegation(_wallet: address, _collateralAddress: address, _tokenId: uint256, _erc20TokenContract: address, _value: bool): nonpayable\r\n\r\ninterface IERC20Symbol:\r\n    def symbol() -> String[100]: view\r\n\r\ninterface ILendingPool:\r\n    def maxFundsInvestable() -> uint256: view \r\n    def erc20TokenContract() -> address: view\r\n    def sendFundsEth(_to: address, _amount: uint256): nonpayable\r\n    def sendFunds(_to: address, _amount: uint256): nonpayable\r\n    def receiveFundsEth(_borrower: address, _amount: uint256, _rewardsAmount: uint256): payable\r\n    def receiveFunds(_borrower: address, _amount: uint256, _rewardsAmount: uint256): payable\r\n\r\ninterface ILiquidations:\r\n    def addLiquidation(_borrower: address, _loanId: uint256, _erc20TokenContract: address): nonpayable\r\n\r\ninterface ISelf:\r\n    def initialize(\r\n        _owner: address,\r\n        _interestAccrualPeriod: uint256,\r\n        _lendingPoolContract: address,\r\n        _collateralVaultContract: address,\r\n        _genesisContract: address,\r\n        _isPayable: bool\r\n    ): nonpayable\r\n\r\n\r\n# Structs\r\n\r\nstruct Collateral:\r\n    contractAddress: address\r\n    tokenId: uint256\r\n    amount: uint256\r\n\r\nstruct Loan:\r\n    id: uint256\r\n    amount: uint256\r\n    interest: uint256 # parts per 10000, e.g. 2.5% is represented by 250 parts per 10000\r\n    maturity: uint256\r\n    startTime: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    paidPrincipal: uint256\r\n    paidInterestAmount: uint256\r\n    started: bool\r\n    invalidated: bool\r\n    paid: bool\r\n    defaulted: bool\r\n    canceled: bool\r\n\r\n\r\nstruct EIP712Domain:\r\n    name: String[100]\r\n    version: String[10]\r\n    chain_id: uint256\r\n    verifying_contract: address\r\n\r\nstruct ReserveMessageContent:\r\n    amount: uint256\r\n    interest: uint256\r\n    maturity: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    delegations: DynArray[bool, 100]\r\n    deadline: uint256\r\n\r\n\r\n# Events\r\n\r\nevent ProxyCreated:\r\n    proxyAddress: address\r\n    owner: address\r\n    interestAccrualPeriod: uint256\r\n    lendingPoolContract: address\r\n    collateralVaultContract: address\r\n    genesisContract: address\r\n    isPayable: bool\r\n\r\nevent OwnershipTransferred:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent OwnerProposed:\r\n    ownerIndexed: indexed(address)\r\n    proposedOwnerIndexed: indexed(address)\r\n    owner: address\r\n    proposedOwner: address\r\n    erc20TokenContract: address\r\n\r\nevent AdminTransferred:\r\n    currentValue: address\r\n    newValue: address\r\n\r\n\r\nevent InterestAccrualPeriodChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: uint256\r\n    newValue: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LendingPoolPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent CollateralVaultPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidationsPeripheralAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent LiquidityControlsAddressSet:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    currentValue: address\r\n    newValue: address\r\n    erc20TokenContract: address\r\n\r\nevent ContractStatusChanged:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    value: bool\r\n    erc20TokenContract: address\r\n\r\nevent ContractDeprecated:\r\n    erc20TokenContractIndexed: indexed(address)\r\n    erc20TokenContract: address\r\n\r\nevent LoanCreated:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    erc20TokenContract: address\r\n    apr: uint256 # calculated from the interest to 365 days, in bps\r\n    amount: uint256\r\n    duration: uint256\r\n    collaterals: DynArray[Collateral, 100]\r\n    genesisToken: uint256\r\n\r\nevent LoanPayment:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    principal: uint256\r\n    interestAmount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LoanPaid:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    erc20TokenContract: address\r\n\r\nevent LoanDefaulted:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    loanId: uint256\r\n    amount: uint256\r\n    erc20TokenContract: address\r\n\r\nevent PaymentSent:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\nevent PaymentReceived:\r\n    walletIndexed: indexed(address)\r\n    wallet: address\r\n    amount: uint256\r\n\r\n\r\n# Global variables\r\n\r\nowner: public(address)\r\nadmin: public(address)\r\nproposedOwner: public(address)\r\n\r\ninterestAccrualPeriod: public(uint256)\r\n\r\nisAcceptingLoans: public(bool)\r\nisDeprecated: public(bool)\r\n\r\nlendingPoolContract: public(ILendingPool)\r\nerc20TokenContract: public(address)\r\ncollateralVaultContract: public(ICollateralVault)\r\nliquidationsContract: public(ILiquidations)\r\ngenesisContract: public(IERC721)\r\nisPayable: public(bool)\r\n\r\nloans: HashMap[address, DynArray[Loan, 2**16]]\r\n\r\nZHARTA_DOMAIN_NAME: constant(String[6]) = \"Zharta\"\r\nZHARTA_DOMAIN_VERSION: constant(String[1]) = \"1\"\r\n\r\nCOLLATERAL_TYPE_DEF: constant(String[66]) = \"Collateral(address contractAddress,uint256 tokenId,uint256 amount)\"\r\nRESERVE_TYPE_DEF: constant(String[269]) = \"ReserveMessageContent(address borrower,uint256 amount,uint256 interest,uint256 maturity,Collateral[] collaterals,\" \\\r\n                                          \"bool delegations,uint256 deadline,uint256 nonce,uint256 genesisToken)\" \\\r\n                                          \"Collateral(address contractAddress,uint256 tokenId,uint256 amount)\"\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\nCOLLATERAL_TYPE_HASH: constant(bytes32) = keccak256(COLLATERAL_TYPE_DEF)\r\nRESERVE_TYPE_HASH: constant(bytes32) = keccak256(RESERVE_TYPE_DEF)\r\n\r\nreserve_message_typehash: bytes32\r\nreserve_sig_domain_separator: bytes32\r\n\r\nMINIMUM_INTEREST_PERIOD: constant(uint256) = 604800  # 7 days\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.owner = msg.sender\r\n    self.isAcceptingLoans = False\r\n    self.isDeprecated = True\r\n\r\n\r\n@external\r\ndef initialize(\r\n    _owner: address,\r\n    _interestAccrualPeriod: uint256,\r\n    _lendingPoolContract: address,\r\n    _collateralVaultContract: address,\r\n    _genesisContract: address,\r\n    _isPayable: bool\r\n):\r\n    assert self.owner == empty(address), \"already initialized\"\r\n\r\n    assert _lendingPoolContract != empty(address), \"address is the zero address\"\r\n    assert _collateralVaultContract != empty(address), \"address is the zero address\"\r\n    assert _genesisContract != empty(address), \"address is the zero address\"\r\n\r\n    self.owner = _owner\r\n    self.admin = _owner\r\n    self.interestAccrualPeriod = _interestAccrualPeriod\r\n    self.lendingPoolContract = ILendingPool(_lendingPoolContract)\r\n    self.erc20TokenContract = ILendingPool(_lendingPoolContract).erc20TokenContract()\r\n    self.collateralVaultContract = ICollateralVault(_collateralVaultContract)\r\n    self.genesisContract = IERC721(_genesisContract)\r\n    self.isAcceptingLoans = True\r\n    self.isPayable = _isPayable\r\n\r\n    self.reserve_sig_domain_separator = keccak256(\r\n        _abi_encode(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(ZHARTA_DOMAIN_NAME),\r\n            keccak256(ZHARTA_DOMAIN_VERSION),\r\n            chain.id,\r\n            self\r\n        )\r\n    )\r\n\r\n\r\n@external\r\ndef create_proxy(\r\n    _interestAccrualPeriod: uint256,\r\n    _lendingPoolContract: address,\r\n    _collateralVaultContract: address,\r\n    _genesisContract: address,\r\n    _isPayable: bool\r\n) -> address:\r\n    proxy: address = create_minimal_proxy_to(self)\r\n\r\n    ISelf(proxy).initialize(\r\n        msg.sender,\r\n        _interestAccrualPeriod,\r\n        _lendingPoolContract,\r\n        _collateralVaultContract,\r\n        _genesisContract,\r\n        _isPayable\r\n    )\r\n\r\n    log ProxyCreated(\r\n        proxy,\r\n        msg.sender,\r\n        _interestAccrualPeriod,\r\n        _lendingPoolContract,\r\n        _collateralVaultContract,\r\n        _genesisContract,\r\n        _isPayable\r\n    )\r\n\r\n    return proxy\r\n\r\n\r\n##### INTERNAL METHODS #####\r\n\r\n@view\r\n@internal\r\ndef _is_loan_created(_borrower: address, _loanId: uint256) -> bool:\r\n    return _loanId < len(self.loans[_borrower])\r\n\r\n\r\n@internal\r\ndef _are_collaterals_owned(_borrower: address, _collaterals: DynArray[Collateral, 100]) -> bool:\r\n    for collateral in _collaterals:\r\n        if IERC721(collateral.contractAddress).ownerOf(collateral.tokenId) != _borrower:\r\n            return False\r\n    return True\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_loan(_borrower: address, _loanId: uint256) -> Loan:\r\n  if self._is_loan_created(_borrower, _loanId):\r\n    return self.loans[_borrower][_loanId]\r\n  return empty(Loan)\r\n\r\n\r\n@internal\r\ndef _add_loan(\r\n    _borrower: address,\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100]\r\n) -> uint256:\r\n\r\n    new_loan: Loan = Loan(\r\n        {\r\n            id: len(self.loans[_borrower]),\r\n            amount: _amount,\r\n            interest: _interest,\r\n            maturity: _maturity,\r\n            startTime: block.timestamp,\r\n            collaterals: _collaterals,\r\n            paidPrincipal: 0,\r\n            paidInterestAmount: 0,\r\n            started: True,\r\n            invalidated: False,\r\n            paid: False,\r\n            defaulted: False,\r\n            canceled: False,\r\n        }\r\n    )\r\n\r\n    self.loans[_borrower].append(new_loan)\r\n\r\n    return new_loan.id\r\n\r\n\r\n@internal\r\ndef _update_loan_paid_amount(_borrower: address, _loanId: uint256, _paidPrincipal: uint256, _paidInterestAmount: uint256):\r\n    self.loans[_borrower][_loanId].paidPrincipal += _paidPrincipal\r\n    self.loans[_borrower][_loanId].paidInterestAmount += _paidInterestAmount\r\n\r\n\r\n@internal\r\ndef _update_paid_loan(_borrower: address, _loanId: uint256):\r\n    self.loans[_borrower][_loanId].paid = True\r\n\r\n\r\n@internal\r\ndef _update_defaulted_loan(_borrower: address, _loanId: uint256):\r\n    self.loans[_borrower][_loanId].defaulted = True\r\n\r\n@view\r\n@internal\r\ndef _are_collaterals_approved(_borrower: address, _collaterals: DynArray[Collateral, 100]) -> bool:\r\n    for collateral in _collaterals:\r\n        if not self.collateralVaultContract.isCollateralApprovedForVault(\r\n            _borrower,\r\n            collateral.contractAddress,\r\n            collateral.tokenId\r\n        ):\r\n            return False\r\n    return True\r\n\r\n\r\n@pure\r\n@internal\r\ndef _collaterals_amounts(_collaterals: DynArray[Collateral, 100]) -> uint256:\r\n    sumAmount: uint256 = 0\r\n    for collateral in _collaterals:\r\n        sumAmount += collateral.amount\r\n\r\n    return sumAmount\r\n\r\n\r\n@pure\r\n@internal\r\ndef _loan_payable_amount(\r\n    _amount: uint256,\r\n    _paidAmount: uint256,\r\n    _interest: uint256,\r\n    _maxLoanDuration: uint256,\r\n    _timePassed: uint256,\r\n    _interestAccrualPeriod: uint256\r\n) -> uint256:\r\n    return (_amount - _paidAmount) * (10000 * _maxLoanDuration + _interest * (max(_timePassed + _interestAccrualPeriod, MINIMUM_INTEREST_PERIOD))) / (10000 * _maxLoanDuration)\r\n\r\n\r\n@pure\r\n@internal\r\ndef _compute_period_passed_in_seconds(_recentTimestamp: uint256, _olderTimestamp: uint256, _period: uint256) -> uint256:\r\n    return (_recentTimestamp - _olderTimestamp) - ((_recentTimestamp - _olderTimestamp) % _period)\r\n\r\n\r\n@internal\r\ndef _recover_reserve_signer(\r\n    _borrower: address,\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> address:\r\n    \"\"\"\r\n        @notice recovers the sender address of the signed reserve function call\r\n    \"\"\"\r\n    collaterals_data_hash: DynArray[bytes32, 100] = []\r\n    for c in _collaterals:\r\n        collaterals_data_hash.append(keccak256(_abi_encode(COLLATERAL_TYPE_HASH, c.contractAddress, c.tokenId, c.amount)))\r\n\r\n    data_hash: bytes32 = keccak256(_abi_encode(\r\n                RESERVE_TYPE_HASH,\r\n                _borrower,\r\n                _amount,\r\n                _interest,\r\n                _maturity,\r\n                keccak256(slice(_abi_encode(collaterals_data_hash), 32*2, 32*len(_collaterals))),\r\n                _delegations,\r\n                _deadline,\r\n                _nonce,\r\n                _genesisToken\r\n                ))\r\n\r\n    sig_hash: bytes32 = keccak256(concat(convert(\"\\x19\\x01\", Bytes[2]), _abi_encode(self.reserve_sig_domain_separator, data_hash)))\r\n    signer: address = ecrecover(sig_hash, _v, _r, _s)\r\n\r\n    return signer\r\n\r\n\r\n@internal\r\ndef _reserve(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    assert not self.isDeprecated, \"contract is deprecated\"\r\n    assert self.isAcceptingLoans, \"contract is not accepting loans\"\r\n    assert block.timestamp < _maturity, \"maturity is in the past\"\r\n    assert block.timestamp <= _deadline, \"deadline has passed\"\r\n    assert self._collaterals_amounts(_collaterals) == _amount, \"amount in collats != than amount\"\r\n    assert self.lendingPoolContract.maxFundsInvestable() >= _amount, \"insufficient liquidity\"\r\n\r\n    assert not self._is_loan_created(msg.sender, _nonce), \"loan already created\"\r\n    if _nonce > 0:\r\n        assert self._is_loan_created(msg.sender, _nonce - 1), \"loan is not sequential\"\r\n    \r\n    signer: address = self._recover_reserve_signer(msg.sender, _amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n    assert signer == self.admin, \"invalid message signature\"\r\n\r\n    assert _genesisToken == 0 or self.genesisContract.ownerOf(_genesisToken) == msg.sender, \"genesisToken not owned\"\r\n\r\n    newLoanId: uint256 = self._add_loan(msg.sender, _amount, _interest, _maturity, _collaterals)\r\n\r\n    for collateral in _collaterals:\r\n\r\n        self.collateralVaultContract.storeCollateral(\r\n            msg.sender,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            self.erc20TokenContract,\r\n            _delegations\r\n        )\r\n\r\n    log LoanCreated(\r\n        msg.sender,\r\n        msg.sender,\r\n        newLoanId,\r\n        self.erc20TokenContract,\r\n        _interest * 365 * 86400 / (_maturity - block.timestamp),\r\n        _amount,\r\n        _maturity - block.timestamp,\r\n        _collaterals,\r\n        _genesisToken\r\n    )\r\n\r\n    return newLoanId\r\n\r\n\r\n##### EXTERNAL METHODS #####\r\n\r\n@view\r\n@external\r\ndef loansCoreContract() -> address:\r\n    return self\r\n\r\n@view\r\n@external\r\ndef getLoanAmount(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).amount\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanMaturity(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).maturity\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanInterest(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).interest\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanCollaterals(_borrower: address, _loanId: uint256) -> DynArray[Collateral, 100]:\r\n    return self._get_loan(_borrower, _loanId).collaterals\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanStartTime(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).startTime\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanPaidPrincipal(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).paidPrincipal\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanPaidInterestAmount(_borrower: address, _loanId: uint256) -> uint256:\r\n    return self._get_loan(_borrower, _loanId).paidInterestAmount\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanStarted(_borrower: address, _loanId: uint256) -> bool:\r\n    return self._get_loan(_borrower, _loanId).started\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanInvalidated(_borrower: address, _loanId: uint256) -> bool:\r\n    return self._get_loan(_borrower, _loanId).invalidated\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanPaid(_borrower: address, _loanId: uint256) -> bool:\r\n    return self._get_loan(_borrower, _loanId).paid\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanDefaulted(_borrower: address, _loanId: uint256) -> bool:\r\n    return self._get_loan(_borrower, _loanId).defaulted\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanCanceled(_borrower: address, _loanId: uint256) -> bool:\r\n    if _loanId < len(self.loans[_borrower]):\r\n        return self.loans[_borrower][_loanId].canceled\r\n    return False\r\n\r\n\r\n@view\r\n@external\r\ndef getLoan(_borrower: address, _loanId: uint256) -> Loan:\r\n    return self._get_loan(_borrower, _loanId)\r\n\r\n\r\n@external\r\ndef proposeOwner(_address: address):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _address != empty(address), \"_address it the zero address\"\r\n    assert self.owner != _address, \"proposed owner addr is the owner\"\r\n    assert self.proposedOwner != _address, \"proposed owner addr is the same\"\r\n\r\n    self.proposedOwner = _address\r\n\r\n    log OwnerProposed(\r\n        self.owner,\r\n        _address,\r\n        self.owner,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef claimOwnership():\r\n    assert msg.sender == self.proposedOwner, \"msg.sender is not the proposed\"\r\n\r\n    log OwnershipTransferred(\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.owner,\r\n        self.proposedOwner,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.owner = self.proposedOwner\r\n    self.proposedOwner = empty(address)\r\n\r\n\r\n@external\r\ndef changeInterestAccrualPeriod(_value: uint256):\r\n    \"\"\"\r\n    @notice Sets the interest accrual period, considered on loan payment calculations\r\n    @dev Logs `InterestAccrualPeriodChanged` event\r\n    @param _value The interest accrual period in seconds\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert _value != self.interestAccrualPeriod, \"_value is the same\"\r\n\r\n    log InterestAccrualPeriodChanged(\r\n        self.erc20TokenContract,\r\n        self.interestAccrualPeriod,\r\n        _value,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.interestAccrualPeriod = _value\r\n\r\n\r\n@external\r\ndef changeAdmin(_admin: address):\r\n    assert msg.sender == self.owner  # reason: msg.sender is not the owner\r\n    log AdminTransferred(self.admin, _admin)\r\n\r\n    self.admin = _admin\r\n\r\n@external\r\ndef setLendingPoolPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner  # reason: msg.sender is not the owner\r\n    assert _address != empty(address)  # reason: address is the zero address\r\n\r\n    log LendingPoolPeripheralAddressSet(\r\n        self.erc20TokenContract,\r\n        self.lendingPoolContract.address,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.lendingPoolContract = ILendingPool(_address)\r\n    self.erc20TokenContract = ILendingPool(_address).erc20TokenContract()\r\n\r\n\r\n@external\r\ndef setCollateralVaultPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner  # reason: msg.sender is not the owner\r\n    assert _address != empty(address)  # reason: address is the zero address\r\n\r\n    log CollateralVaultPeripheralAddressSet(\r\n        self.erc20TokenContract,\r\n        self.collateralVaultContract.address,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.collateralVaultContract = ICollateralVault(_address)\r\n\r\n\r\n@external\r\ndef setLiquidationsPeripheralAddress(_address: address):\r\n    assert msg.sender == self.owner  # reason: msg.sender is not the owner\r\n    assert _address != empty(address)  # reason: address is the zero address\r\n\r\n    log LiquidationsPeripheralAddressSet(\r\n        self.erc20TokenContract,\r\n        self.liquidationsContract.address,\r\n        _address,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    self.liquidationsContract = ILiquidations(_address)\r\n\r\n\r\n@external\r\ndef changeContractStatus(_flag: bool):\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert not self.isDeprecated, \"contract is deprecated\"\r\n\r\n    self.isAcceptingLoans = _flag\r\n\r\n    log ContractStatusChanged(\r\n        self.erc20TokenContract,\r\n        _flag,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef deprecate():\r\n    assert msg.sender == self.owner, \"msg.sender is not the owner\"\r\n    assert not self.isDeprecated, \"contract is already deprecated\"\r\n\r\n    self.isDeprecated = True\r\n    self.isAcceptingLoans = False\r\n\r\n    log ContractDeprecated(\r\n        self.erc20TokenContract,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef erc20TokenSymbol() -> String[100]:\r\n    return IERC20Symbol(self.erc20TokenContract).symbol()\r\n\r\n\r\n@view\r\n@external\r\ndef getLoanPayableAmount(_borrower: address, _loanId: uint256, _timestamp: uint256) -> uint256:\r\n    loan: Loan = self._get_loan(_borrower, _loanId)\r\n\r\n    if loan.paid:\r\n        return 0\r\n\r\n    if loan.startTime > _timestamp:\r\n        return max_value(uint256)\r\n\r\n    if loan.started:\r\n        timePassed: uint256 = self._compute_period_passed_in_seconds(\r\n            _timestamp,\r\n            loan.startTime,\r\n            self.interestAccrualPeriod\r\n        )\r\n        return self._loan_payable_amount(\r\n            loan.amount,\r\n            loan.paidPrincipal,\r\n            loan.interest,\r\n            loan.maturity - loan.startTime,\r\n            timePassed,\r\n            self.interestAccrualPeriod\r\n        )\r\n\r\n    return max_value(uint256)\r\n\r\n\r\n@external\r\ndef reserve(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract admin.\r\n    @dev Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract admin of the implicit message consisting of the remaining parameters, in order for the loan to be created\r\n    @param _amount The loan amount in wei\r\n    @param _interest The interest rate in bps (1/1000) for the loan duration\r\n    @param _maturity The loan maturity in unix epoch format\r\n    @param _collaterals The list of collaterals supporting the loan\r\n    @param _delegations Wether to set the requesting wallet as a delegate for all collaterals\r\n    @param _deadline The deadline of validity for the signed message in unix epoch format\r\n    @param _genesisToken The optional Genesis Pass token used to determine the loan conditions, must be > 0\r\n    @param _v recovery id for public key recover\r\n    @param _r r value in ECDSA signature\r\n    @param _s s value in ECDSA signature\r\n    @return The loan id\r\n    \"\"\"\r\n\r\n    newLoanId: uint256 = self._reserve(_amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n\r\n    self.lendingPoolContract.sendFunds(msg.sender, _amount)\r\n\r\n    return newLoanId\r\n\r\n\r\n@external\r\ndef reserveEth(\r\n    _amount: uint256,\r\n    _interest: uint256,\r\n    _maturity: uint256,\r\n    _collaterals: DynArray[Collateral, 100],\r\n    _delegations: bool,\r\n    _deadline: uint256,\r\n    _nonce: uint256,\r\n    _genesisToken: uint256,\r\n    _v: uint256,\r\n    _r: uint256,\r\n    _s: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Creates a new loan with the defined amount, interest rate and collateral. The message must be signed by the contract admin.\r\n    @dev Logs `LoanCreated` event. The last 3 parameters must match a signature by the contract admin of the implicit message consisting of the remaining parameters, in order for the loan to be created\r\n    @param _amount The loan amount in wei\r\n    @param _interest The interest rate in bps (1/1000) for the loan duration\r\n    @param _maturity The loan maturity in unix epoch format\r\n    @param _collaterals The list of collaterals supporting the loan\r\n    @param _delegations Wether to set the requesting wallet as a delegate for all collaterals\r\n    @param _deadline The deadline of validity for the signed message in unix epoch format\r\n    @param _genesisToken The optional Genesis Pass token used to determine the loan conditions, must be > 0\r\n    @param _v recovery id for public key recover\r\n    @param _r r value in ECDSA signature\r\n    @param _s s value in ECDSA signature\r\n    @return The loan id\r\n    \"\"\"\r\n\r\n    newLoanId: uint256 = self._reserve(_amount, _interest, _maturity, _collaterals, _delegations, _deadline, _nonce, _genesisToken, _v, _r, _s)\r\n\r\n    self.lendingPoolContract.sendFundsEth(msg.sender, _amount)\r\n\r\n    return newLoanId\r\n\r\n\r\n@payable\r\n@external\r\ndef pay(_loanId: uint256):\r\n\r\n    \"\"\"\r\n    @notice Closes an active loan by paying the full amount\r\n    @dev Logs the `LoanPayment` and `LoanPaid` events. The associated `LendingPoolCore` contract must be approved for the payment amount\r\n    @param _loanId The id of the loan to settle\r\n    \"\"\"\r\n\r\n    receivedAmount: uint256 = msg.value\r\n    if not self.isPayable:\r\n        assert receivedAmount == 0, \"no ETH allowed for this loan\"\r\n\r\n    assert self._is_loan_created(msg.sender, _loanId), \"loan not found\"\r\n\r\n    loan: Loan = self._get_loan(msg.sender, _loanId)\r\n    assert block.timestamp <= loan.maturity, \"loan maturity reached\"\r\n    assert not loan.paid, \"loan already paid\"\r\n\r\n    # compute days passed in seconds\r\n    timePassed: uint256 = self._compute_period_passed_in_seconds(\r\n        block.timestamp,\r\n        loan.startTime,\r\n        self.interestAccrualPeriod\r\n    )\r\n\r\n    # pro-rata computation of max amount payable based on actual loan duration in days\r\n    paymentAmount: uint256 = self._loan_payable_amount(\r\n        loan.amount,\r\n        loan.paidPrincipal,\r\n        loan.interest,\r\n        loan.maturity - loan.startTime,\r\n        timePassed,\r\n        self.interestAccrualPeriod\r\n    )\r\n\r\n    erc20TokenContract: address = self.erc20TokenContract\r\n    excessAmount: uint256 = 0\r\n\r\n    if receivedAmount > 0:\r\n        assert receivedAmount >= paymentAmount, \"insufficient value received\"\r\n        excessAmount = receivedAmount - paymentAmount\r\n        log PaymentReceived(msg.sender, msg.sender, receivedAmount)\r\n    else:\r\n        assert IERC20(erc20TokenContract).balanceOf(msg.sender) >= paymentAmount, \"insufficient balance\"\r\n        assert IERC20(erc20TokenContract).allowance(\r\n                msg.sender,\r\n                self.lendingPoolContract.address\r\n        ) >= paymentAmount, \"insufficient allowance\"\r\n\r\n    paidInterestAmount: uint256 = paymentAmount - loan.amount\r\n\r\n    self._update_loan_paid_amount(msg.sender, _loanId, loan.amount, paidInterestAmount)\r\n    self._update_paid_loan(msg.sender, _loanId)\r\n\r\n    if receivedAmount > 0:\r\n        self.lendingPoolContract.receiveFundsEth(msg.sender, loan.amount, paidInterestAmount, value=paymentAmount)\r\n        log PaymentSent(self.lendingPoolContract.address, self.lendingPoolContract.address, paymentAmount)\r\n    else:\r\n        self.lendingPoolContract.receiveFunds(msg.sender, loan.amount, paidInterestAmount)\r\n\r\n    for collateral in loan.collaterals:\r\n        self.collateralVaultContract.transferCollateralFromLoan(\r\n            msg.sender,\r\n            collateral.contractAddress,\r\n            collateral.tokenId,\r\n            erc20TokenContract\r\n        )\r\n\r\n    if excessAmount > 0:\r\n        send(msg.sender, excessAmount)\r\n        log PaymentSent(msg.sender, msg.sender,excessAmount)\r\n\r\n    log LoanPayment(\r\n        msg.sender,\r\n        msg.sender,\r\n        _loanId,\r\n        loan.amount,\r\n        paidInterestAmount,\r\n        erc20TokenContract\r\n    )\r\n    \r\n    log LoanPaid(\r\n        msg.sender,\r\n        msg.sender,\r\n        _loanId,\r\n        erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef settleDefault(_borrower: address, _loanId: uint256):\r\n    \"\"\"\r\n    @notice Settles an active loan as defaulted\r\n    @dev Logs the `LoanDefaulted` event, removes the collaterals from the loan and creates a liquidation\r\n    @param _borrower The wallet address of the borrower\r\n    @param _loanId The id of the loan to settle\r\n    \"\"\"\r\n    assert msg.sender == self.admin, \"msg.sender is not the admin\"\r\n    assert self._is_loan_created(_borrower, _loanId), \"loan not found\"\r\n    \r\n    loan: Loan = self._get_loan(_borrower, _loanId)\r\n    assert not loan.paid, \"loan already paid\"\r\n    assert block.timestamp > loan.maturity, \"loan is within maturity period\"\r\n    assert self.liquidationsContract.address != empty(address), \"BNPeriph is the zero address\"\r\n\r\n    self._update_defaulted_loan(_borrower, _loanId)\r\n\r\n    self.liquidationsContract.addLiquidation(\r\n        _borrower,\r\n        _loanId,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n    log LoanDefaulted(\r\n        _borrower,\r\n        _borrower,\r\n        _loanId,\r\n        loan.amount,\r\n        self.erc20TokenContract\r\n    )\r\n\r\n\r\n@external\r\ndef setDelegation(_loanId: uint256, _collateralAddress: address, _tokenId: uint256, _value: bool):\r\n\r\n    \"\"\"\r\n    @notice Sets / unsets a delegation for some collateral of a given loan. Only available to unpaid loans until maturity is reached\r\n    @param _loanId The id of the loan to settle\r\n    @param _collateralAddress The contract address of the collateral\r\n    @param _tokenId The token id of the collateral\r\n    @param _value Wether to set or unset the token delegation\r\n    \"\"\"\r\n\r\n    loan: Loan = self._get_loan(msg.sender, _loanId)\r\n    assert loan.amount > 0, \"invalid loan id\"\r\n    assert block.timestamp <= loan.maturity, \"loan maturity reached\"\r\n    assert not loan.paid, \"loan already paid\"\r\n    \r\n    for collateral in loan.collaterals:\r\n        if collateral.contractAddress ==_collateralAddress and collateral.tokenId == _tokenId:\r\n            self.collateralVaultContract.setCollateralDelegation(\r\n                msg.sender,\r\n                _collateralAddress,\r\n                _tokenId,\r\n                self.erc20TokenContract,\r\n                _value\r\n            )", "ABI": "[{\"name\":\"ProxyCreated\",\"inputs\":[{\"name\":\"proxyAddress\",\"type\":\"address\",\"indexed\":false},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"interestAccrualPeriod\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"lendingPoolContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateralVaultContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"genesisContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"isPayable\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnerProposed\",\"inputs\":[{\"name\":\"ownerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"proposedOwnerIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"proposedOwner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminTransferred\",\"inputs\":[{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"InterestAccrualPeriodChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LendingPoolPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CollateralVaultPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidationsPeripheralAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LiquidityControlsAddressSet\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"currentValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"newValue\",\"type\":\"address\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ContractDeprecated\",\"inputs\":[{\"name\":\"erc20TokenContractIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanCreated\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false},{\"name\":\"apr\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false},{\"name\":\"genesisToken\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanPayment\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"principal\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"interestAmount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanPaid\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LoanDefaulted\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"loanId\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"erc20TokenContract\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentSent\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PaymentReceived\",\"inputs\":[{\"name\":\"walletIndexed\",\"type\":\"address\",\"indexed\":true},{\"name\":\"wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_interestAccrualPeriod\",\"type\":\"uint256\"},{\"name\":\"_lendingPoolContract\",\"type\":\"address\"},{\"name\":\"_collateralVaultContract\",\"type\":\"address\"},{\"name\":\"_genesisContract\",\"type\":\"address\"},{\"name\":\"_isPayable\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_proxy\",\"inputs\":[{\"name\":\"_interestAccrualPeriod\",\"type\":\"uint256\"},{\"name\":\"_lendingPoolContract\",\"type\":\"address\"},{\"name\":\"_collateralVaultContract\",\"type\":\"address\"},{\"name\":\"_genesisContract\",\"type\":\"address\"},{\"name\":\"_isPayable\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"loansCoreContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanAmount\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanMaturity\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanInterest\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanCollaterals\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanStartTime\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanPaidPrincipal\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanPaidInterestAmount\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanStarted\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanInvalidated\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanPaid\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanDefaulted\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanCanceled\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoan\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"maturity\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},{\"name\":\"paidPrincipal\",\"type\":\"uint256\"},{\"name\":\"paidInterestAmount\",\"type\":\"uint256\"},{\"name\":\"started\",\"type\":\"bool\"},{\"name\":\"invalidated\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"bool\"},{\"name\":\"defaulted\",\"type\":\"bool\"},{\"name\":\"canceled\",\"type\":\"bool\"}]}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposeOwner\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimOwnership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeInterestAccrualPeriod\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeAdmin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLendingPoolPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCollateralVaultPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationsPeripheralAddress\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeContractStatus\",\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deprecate\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20TokenSymbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLoanPayableAmount\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reserve\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_maturity\",\"type\":\"uint256\"},{\"name\":\"_collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},{\"name\":\"_delegations\",\"type\":\"bool\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_genesisToken\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint256\"},{\"name\":\"_r\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reserveEth\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_maturity\",\"type\":\"uint256\"},{\"name\":\"_collaterals\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}]},{\"name\":\"_delegations\",\"type\":\"bool\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_genesisToken\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint256\"},{\"name\":\"_r\",\"type\":\"uint256\"},{\"name\":\"_s\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"pay\",\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"settleDefault\",\"inputs\":[{\"name\":\"_borrower\",\"type\":\"address\"},{\"name\":\"_loanId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDelegation\",\"inputs\":[{\"name\":\"_loanId\",\"type\":\"uint256\"},{\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposedOwner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"interestAccrualPeriod\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isAcceptingLoans\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isDeprecated\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lendingPoolContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20TokenContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralVaultContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationsContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesisContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isPayable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "LoansOTC", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}