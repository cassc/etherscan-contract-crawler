{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LibesEntryV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './mocks/NFTEntry.sol';\\nimport './interfaces/metatx/ERC2771ContextUpgradeable.sol';\\nimport './interfaces/metatx/ECDSAUpgradeable.sol';\\nimport './libraries/OwnerOperator.sol';\\n\\n\\ncontract LibesEntryV2 is ERC2771ContextUpgradeable, OwnerOperator{\\n    using Counters for Counters.Counter;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    event CreateTournament(uint256 tournamentId, string indexed name);\\n    event LibesEntry(uint256 entryId, uint256 tournamentId, address owner, uint256[] tokenId);\\n    event Cancel(uint256 entryId, uint256[] tokenId);\\n    event AdminCancel(uint256[] tokenId);\\n    event EndTournament(uint256 tournamentId);\\n\\n    Counters.Counter private tournamentIdCounter;\\n    Counters.Counter private entryIdCounter;\\n\\n    struct Tournament {\\n        uint256 tournamentId;\\n        string tournamentName;\\n        bool status;\\n    }\\n    struct Entry {\\n        uint256 _TournamentId;\\n        uint256[] tokenId;\\n        address owner;\\n    }\\n    struct Winner {\\n        address winnerAddress;\\n        uint256[] tokenId;\\n    }\\n\\n    address payable public nftEntryAddress;\\n\\n    mapping(uint256 => Tournament) public tournaments;\\n    mapping(uint256 => Entry[]) entryers;\\n    mapping(uint256 => Entry) entryer;\\n    mapping(uint256 => bool) History;\\n    mapping(address => mapping(uint256 => bool)) seenNonces;\\n\\n    \\n    /**\\n     * @dev Initialize the contract with trusted forwarders and initial owner operators.\\n     * @param _nftAddress Address of nft entry.\\n     * @param _trustedForwarder List of trusted forwarder contract addresses for meta transactions.\\n     */\\n\\n    function initialize(address payable _nftAddress, address[] memory _trustedForwarder) external initializer {\\n        // Inititalize the operator for contract\\n        OwnerOperator.initialize();\\n        // Inititalize the context for ERC2771 meta transactions\\n        __ERC2771Context_init(_trustedForwarder);\\n        // Set nft entry address\\n         nftEntryAddress = _nftAddress;\\n        \\n    }\\n\\n\\n    modifier verifySignature(\\n        uint256 nonce,\\n        uint256 tournamentId,\\n        bytes memory signature\\n    ) {\\n        // This recreates the message hash that was signed on the client.\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, nonce, tournamentId));\\n        bytes32 messageHash = hash.toEthSignedMessageHash();\\n        // Verify that the message's signer is the owner of the order\\n        require(messageHash.recover(signature) == owner(), 'INVALID SIGNATURE');\\n        require(!seenNonces[msg.sender][nonce], 'USED NONCE');\\n        seenNonces[msg.sender][nonce] = true;\\n        _;\\n    }\\n\\n    /**\\n     * @dev The `setNFTEntryAddress` function is used to set the address of the nft by operator.\\n     * @param _nftEntryAddress Address of nft entry\\n     */\\n    function setNFTEntryAddress(address payable _nftEntryAddress) public operatorOrOwner {\\n        require(_nftEntryAddress != address(0), 'INVALID NFT ENTRY ADDRESS.');\\n        nftEntryAddress = _nftEntryAddress;\\n    }\\n\\n    /**\\n     * The `createTournament` function is called by operator when creating a new tournament.\\n     * @param _tournamentName Name of the tournament\\n     */\\n    function createTournament(string memory _tournamentName) external operatorOrOwner returns (uint256 _tournamentId) {\\n        tournamentIdCounter.increment();\\n        _tournamentId = tournamentIdCounter.current();\\n        bool _status = false;\\n        Tournament memory tournament = Tournament(_tournamentId, _tournamentName, _status);\\n        tournaments[_tournamentId] = tournament;\\n        emit CreateTournament(_tournamentId, _tournamentName);\\n    }\\n\\n\\n    /**\\n     * @dev The libesEntry function is a function for user can be entry by nft entry\\n     * @param _tournamentId Id of the tournament.\\n     * @param _tokenId List token ID to entry.\\n     * @param _userAddress Address of user.\\n     */\\n    function libesEntry(\\n        uint256 _tournamentId,\\n        uint256[] memory _tokenId,\\n        address _userAddress\\n    ) external \\n    returns (uint256 _entryId) {\\n        // Check if msg.sender is contract Trust Forward or not\\n        require(isTrustedForwarder(msg.sender) == true, \\\"YOU ARE NOT THE ENTRYER\\\");\\n\\n        // Check if tournament is over or not\\n         require(tournaments[_tournamentId].status != true, 'THE TOURNAMENT IS OVER');\\n        for (uint256 i = 0; i < _tokenId.length; i++) {\\n            // Check if user is owner of nft or not\\n            require(\\n                IERC721A(nftEntryAddress).ownerOf(_tokenId[i]) == _userAddress,\\n                'YOU ARE NOT THE OWNER OF THE NFT'\\n            );\\n\\n            // Check if nft is entryed or not\\n            require(History[_tokenId[i]] != true, 'THIS TOKEN HAS BEEN ENTRYED!');\\n        }\\n\\n        // Lock nft when user entry\\n        NFTEntry(nftEntryAddress).lockToken(_tokenId);\\n\\n        // Increase entry id\\n        entryIdCounter.increment();\\n        _entryId = entryIdCounter.current();\\n\\n        // Add to list entry\\n        Entry memory entry = Entry(_tournamentId, _tokenId, _userAddress);\\n        entryers[_tournamentId].push(entry);\\n        entryer[_entryId] = entry;\\n\\n        // Add nft to the history list so user don't use it to entry next time\\n        addHistory(_tokenId);\\n\\n        emit LibesEntry(_entryId, _tournamentId, _userAddress, _tokenId);\\n    }\\n\\n\\n    function addHistory(uint256[] memory _tokenId) private {\\n        for (uint256 i = 0; i < _tokenId.length; i++) {\\n            History[_tokenId[i]] = true;\\n        }\\n    }\\n\\n    function checkHistory(uint256 _tokenId) public view returns (bool) {\\n        return History[_tokenId];\\n    }\\n\\n    /**\\n     * @dev The `cancel` function is called when the user wants to cancel the entry if tournament is not finished yet.\\n     * @param _entryId ID of the entry.\\n     * @param _listToken List of tokens that be entryed.\\n     * @param nonce Nonce of the user entry.\\n     * @param signature Signatur of the user entry\\n     */\\n    function cancel(\\n        uint256 _entryId,\\n        uint256[] memory _listToken,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) external verifySignature(nonce, _entryId, signature) {\\n        // Check if msg.sender is entryer or not\\n        require(entryer[_entryId].owner == msg.sender, 'YOU ARE NOT THE ENTRYER');\\n\\n        // Check if tournament is finished or not\\n        require(tournaments[entryer[_entryId]._TournamentId].status != true, 'THE TOURNAMENT IS FINISHED YET');\\n\\n        // Unlock nft for user\\n        NFTEntry(nftEntryAddress).unlockToken(_listToken);\\n        // Delete nft from history entry\\n        for (uint256 i = 0; i < _listToken.length; i++) {\\n            History[_listToken[i]] = false;\\n        }\\n\\n        emit Cancel(_entryId, _listToken);\\n    }\\n\\n    function adminCancel(\\n        uint256[] memory _listToken\\n    ) external operatorOrOwner {\\n\\n        // Unlock nft for user\\n        NFTEntry(nftEntryAddress).unlockToken(_listToken);\\n        // Delete nft from history entry\\n        for (uint256 i = 0; i < _listToken.length; i++) {\\n            History[_listToken[i]] = false;\\n        }\\n\\n        emit AdminCancel(_listToken);\\n    }\\n    \\n    /**\\n     * @dev The `endTournament` function is called by operator when the tournament is ended.\\n     * @param _tournamentId ID of the tournament\\n     */\\n    function endTournament(uint256 _tournamentId) external operatorOrOwner {\\n        // Check if tournament is finished or not\\n        require(tournaments[_tournamentId].status != true, 'THE TOURNAMENT IS FINISHED YET');\\n\\n        // Change status of the tournament\\n        tournaments[_tournamentId].status = true;\\n\\n        // Unlock nft for users entryed the tournament\\n        for (uint256 i = 0; i < entryers[_tournamentId].length; i++) {\\n            NFTEntry(nftEntryAddress).unlockToken(entryers[_tournamentId][i].tokenId);\\n        }\\n        emit EndTournament(_tournamentId);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/NFTEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../libraries/ECDSA.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\nimport \\\"../libraries/Counters.sol\\\";\\nimport \\\"../interfaces/ERC721A/ERC721A.sol\\\";\\nimport \\\"../interfaces/ERC721A/IERC721A.sol\\\";\\nimport \\\"../interfaces/ERC721A/ERC721ABurnable.sol\\\";\\nimport \\\"../interfaces/ERC721A/ERC721AQueryable.sol\\\";\\n\\ncontract NFTEntry is ERC721A, ERC721ABurnable, ERC721AQueryable, Ownable {\\n    constructor() ERC721A(\\\"Libes Entry NFT\\\", \\\"LbENT\\\") {}\\n\\n    using ECDSA for bytes32;\\n\\n    receive() external payable {}\\n\\n    string private _baseURIExtended;\\n    address public entryAddress;\\n    uint256 public quantityUserMinted = 0;\\n    uint256[] Tokens;\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    mapping(address => mapping(uint256 => bool)) seenNonces;\\n    mapping(uint256 => uint256[]) public orders;\\n\\n    event AdminMint(address caller, uint256 quantity, uint256 totalSupply);\\n    event UserMint(\\n        address caller,\\n        uint256 quantity,\\n        uint256 orderId,\\n        uint256[] tokenId\\n    );\\n    event Withdraw(address caller, uint256 amount);\\n\\n    modifier verifySignature(\\n        uint256 nonce,\\n        uint256 orderId,\\n        uint256 timestamp,\\n        uint256 quantity,\\n        bytes memory signature\\n    ) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(msg.sender, nonce, orderId, quantity)\\n        );\\n        // This recreates the message hash that was signed on the client.\\n        bytes32 messageHash = hash.toEthSignedMessageHash();\\n        // Verify that the message's signer is the owner of the order\\n        require(messageHash.recover(signature) == owner(), \\\"INVALID SIGNATURE\\\");\\n        require(!seenNonces[msg.sender][nonce], \\\"USED NONCE\\\");\\n        require(timestamp >= block.timestamp, \\\"SIGNATURE EXPIRED\\\");\\n        seenNonces[msg.sender][nonce] = true;\\n        _;\\n    }\\n\\n    function setBaseURI(string memory baseURI_) public onlyOwner {\\n        _baseURIExtended = baseURI_;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseURIExtended;\\n    }\\n\\n    function getOwnershipAt(\\n        uint256 index\\n    ) public view returns (TokenOwnership memory) {\\n        return _ownershipAt(index);\\n    }\\n\\n    function totalMinted() public view onlyOwner returns (uint256) {\\n        return _totalMinted();\\n    }\\n\\n    function totalBurned() public view onlyOwner returns (uint256) {\\n        return _totalBurned();\\n    }\\n\\n    function numberBurned(\\n        address owner\\n    ) public view onlyOwner returns (uint256) {\\n        return _numberBurned(owner);\\n    }\\n\\n    function numberMinted(\\n        address owner\\n    ) public view onlyOwner returns (uint256) {\\n        return _numberMinted(owner);\\n    }\\n\\n    function nextTokenId() public view returns (uint256) {\\n        return _nextTokenId();\\n    }\\n\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function setEntryAddress(address _entryAddress) public onlyOwner {\\n        require(_entryAddress != address(0), \\\"INVALID ENTRY ADDRESS.\\\");\\n        entryAddress = _entryAddress;\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function userMint(\\n        uint256 eth,\\n        uint256 quantity,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        uint256 orderId,\\n        bytes memory signature\\n    )\\n        public\\n        payable\\n        verifySignature(nonce, orderId, timestamp, quantity, signature)\\n    {\\n        require(quantity > 0, \\\"QUANTITY MUST BE GREATER THAN 0\\\");\\n        require(\\n            balanceOf(address(this)) >= quantity,\\n            \\\"QUANTITY IS MORE THAN POOL\\\"\\n        );\\n        require(\\n            msg.value >= eth,\\n            \\\"BALANCE TO MINT INSUFFICIENT\\\"\\n        );\\n        TransferHelper.safeTransferETH(\\n            address(this),\\n            eth\\n        );\\n\\n        for (\\n            uint256 i = quantityUserMinted;\\n            i < (quantityUserMinted + quantity);\\n            i++\\n        ) {\\n            transferToken(address(this), msg.sender, i);\\n            orders[orderId].push(i);\\n        }\\n\\n        quantityUserMinted += quantity;\\n        emit UserMint(msg.sender, quantity, orderId, orders[orderId]);\\n    }\\n\\n    function getOrder(uint256 _orderId) public view returns (uint256[] memory) {\\n        return orders[_orderId];\\n    }\\n\\n    function mint(uint256 quantity) public onlyOwner {\\n        _mint(address(this), quantity);\\n        uint256 totalSupply = totalSupply();\\n        emit AdminMint(msg.sender, quantity, totalSupply);\\n    }\\n\\n    function safeMint (\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) public onlyOwner {\\n        _safeMint(to, quantity, _data);\\n    }\\n \\n    function withdraw(uint256 amount) public onlyOwner {\\n        require(amount > 0, \\\"AMOUNT MUST BE GREATER THAN 0\\\");\\n\\n        address _owner = owner();\\n        (bool sent, ) = _owner.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"FAILED TO SEND ETHER\\\");\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function safeMint(address to, uint256 quantity) public onlyOwner {\\n        _safeMint(to, quantity);\\n    }\\n\\n    function lockToken(uint256[] memory tokenid) public {\\n        require(msg.sender == entryAddress, \\\"YOU NOT ALLOWED TO LOCK TOKEN\\\");\\n        _lockToken(tokenid);\\n    }\\n\\n    function unlockToken(uint256[] memory tokenid) public {\\n        require(msg.sender == entryAddress, \\\"YOU NOT ALLOWED TO LOCK TOKEN\\\");\\n        _unlockToken(tokenid);\\n    }\\n\\n    function burn(uint256 tokenId, bool approvalCheck) public onlyOwner {\\n        _burn(tokenId, approvalCheck);\\n    }\\n\\n    function toString(uint256 x) public pure returns (string memory) {\\n        return _toString(x);\\n    }\\n\\n    function getOwnershipOf(\\n        uint256 index\\n    ) public view returns (TokenOwnership memory) {\\n        return _ownershipOf(index);\\n    }\\n\\n    function initializeOwnershipAt(uint256 index) public onlyOwner {\\n        _initializeOwnershipAt(index);\\n    }\\n\\n    function random(uint256 number) public view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp,\\n                        block.difficulty,\\n                        msg.sender\\n                    )\\n                )\\n            ) % number;\\n    }\\n\\n    function transferToken(address from, address to, uint256 tokenId) private {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n        require(lock[tokenId] != true, \\\"TOKEN HAS BEEN LOCKED!\\\");\\n\\n        if (address(uint160(prevOwnershipPacked)) != from)\\n            revert TransferFromIncorrectOwner();\\n\\n        (\\n            uint256 approvedAddressSlot,\\n            address approvedAddress\\n        ) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED |\\n                    _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../ContextUpgradeable.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    mapping(address => bool) private _trustedForwarder;\\n\\n    function __ERC2771Context_init(\\n        address[] memory trustedForwarder\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(\\n        address[] memory trustedForwarder\\n    ) internal onlyInitializing {\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            _trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(\\n        address forwarder\\n    ) public view virtual returns (bool) {\\n        return _trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/metatx/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OwnerOperator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\nimport \\\"../interfaces/OwnerUpgradeable.sol\\\";\\n\\nabstract contract OwnerOperator is OwnableUpgradeable {\\n    mapping(address => bool) public operators;\\n\\n    function initialize() public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    modifier operatorOrOwner() {\\n        require(\\n            operators[msg.sender] || owner() == msg.sender,\\n            \\\"OwnerOperator: !operator, !owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"OwnerOperator: !operator\\\");\\n        _;\\n    }\\n\\n    function addOperator(address operator) external virtual onlyOwner {\\n        require(\\n            operator != address(0),\\n            \\\"OwnerOperator: operator is the zero address\\\"\\n        );\\n        operators[operator] = true;\\n    }\\n\\n    function removeOperator(address operator) external virtual onlyOwner {\\n        require(\\n            operator != address(0),\\n            \\\"OwnerOperator: operator is the zero address\\\"\\n        );\\n        operators[operator] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x095ea7b3, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: APPROVE_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(new bytes(0));\\n    require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ECDSA.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary ECDSA {\\n\\n  /**\\n   * @dev Recover signer address from a message by using their signature\\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n   * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n   */\\n  function recover(bytes32 hash, bytes memory signature)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    // Check the signature length\\n    if (signature.length != 65) {\\n      return (address(0));\\n    }\\n\\n    // Divide the signature in r, s and v variables with inline assembly.\\n    assembly {\\n      r := mload(add(signature, 0x20))\\n      s := mload(add(signature, 0x40))\\n      v := byte(0, mload(add(signature, 0x60)))\\n    }\\n\\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n    if (v < 27) {\\n      v += 27;\\n    }\\n\\n    // If the version is correct return the signer address\\n    if (v != 27 && v != 28) {\\n      return (address(0));\\n    } else {\\n      // solium-disable-next-line arg-overflow\\n      return ecrecover(hash, v, r, s);\\n    }\\n  }\\n\\n  /**\\n    * toEthSignedMessageHash\\n    * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n    * and hash the result\\n    */\\n  function toEthSignedMessageHash(bytes32 hash)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721A.sol\\\";\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n  // Reference type for token approval.\\n\\n  struct TokenApprovalRef {\\n    address value;\\n  }\\n\\n  // =============================================================\\n  //                           CONSTANTS\\n  // =============================================================\\n\\n  // Mask of an entry in packed address data.\\n  uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n  // The bit position of `numberMinted` in packed address data.\\n  uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n  // The bit position of `numberBurned` in packed address data.\\n  uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n  // The bit position of `aux` in packed address data.\\n  uint256 private constant _BITPOS_AUX = 192;\\n\\n  // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n  uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n  // The bit position of `startTimestamp` in packed ownership.\\n  uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n  // The bit mask of the `burned` bit in packed ownership.\\n  uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n  // The bit position of the `nextInitialized` bit in packed ownership.\\n  uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n  // The bit mask of the `nextInitialized` bit in packed ownership.\\n  uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n  // The bit position of `extraData` in packed ownership.\\n  uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n  // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n  uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n  // The mask of the lower 160 bits for addresses.\\n  uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n  // The maximum `quantity` that can be minted with {_mintERC2309}.\\n  // This limit is to prevent overflows on the address data entries.\\n  // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n  // is required to cause an overflow, which is unrealistic.\\n  uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n  // The `Transfer` event signature is given by:\\n  // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n  bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n  // =============================================================\\n  //                            STORAGE\\n  // =============================================================\\n\\n  // The next token ID to be minted.\\n  uint256 internal _currentIndex;\\n\\n  // The number of tokens burned.\\n  uint256 private _burnCounter;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned.\\n  // See {_packedOwnershipOf} implementation for details.\\n  //\\n  // Bits Layout:\\n  // - [0..159]   `addr`\\n  // - [160..223] `startTimestamp`\\n  // - [224]      `burned`\\n  // - [225]      `nextInitialized`\\n  // - [232..255] `extraData`\\n  mapping(uint256 => uint256) internal _packedOwnerships;\\n\\n  // Mapping owner address to address data.\\n  //\\n  // Bits Layout:\\n  // - [0..63]    `balance`\\n  // - [64..127]  `numberMinted`\\n  // - [128..191] `numberBurned`\\n  // - [192..255] `aux`\\n  mapping(address => uint256) internal _packedAddressData;\\n\\n  // Mapping from token ID to approved address.\\n  mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n  mapping(uint256 => bool) public lock;\\n\\n  // =============================================================\\n  //                          CONSTRUCTOR\\n  // =============================================================\\n\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _currentIndex = _startTokenId();\\n  }\\n\\n  // =============================================================\\n  //                   TOKEN COUNTING OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the starting token ID.\\n   * To change the starting token ID, please override this function.\\n   */\\n  function _startTokenId() internal view virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Returns the next token ID to be minted.\\n   */\\n  function _nextTokenId() internal view virtual returns (uint256) {\\n    return _currentIndex;\\n  }\\n\\n  function _lockToken(uint256[] memory tokenid)\\n    internal\\n    virtual\\n    returns (bool)\\n  {\\n  \\n    for (uint256 i = 0; i < tokenid.length; i++) {\\n      lock[tokenid[i]] = true;\\n    }\\n    for (uint256 i = 0; i < tokenid.length; i++) {\\n      return lock[tokenid[i]];\\n    }\\n  }\\n\\n  function _unlockToken(uint256[] memory tokenid)\\n    internal\\n    virtual\\n    returns (bool)\\n  {\\n    for (uint256 i = 0; i < tokenid.length; i++) {\\n      lock[tokenid[i]] = false;\\n    }\\n    for (uint256 i = 0; i < tokenid.length; i++) {\\n      return lock[tokenid[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total number of tokens in existence.\\n   * Burned tokens will reduce the count.\\n   * To get the total number of tokens minted, please see {_totalMinted}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    // Counter underflow is impossible as _burnCounter cannot be incremented\\n    // more than `_currentIndex - _startTokenId()` times.\\n    unchecked {\\n      return _currentIndex - _burnCounter - _startTokenId();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total amount of tokens minted in the contract.\\n   */\\n  function _totalMinted() internal view virtual returns (uint256) {\\n    // Counter underflow is impossible as `_currentIndex` does not decrement,\\n    // and it is initialized to `_startTokenId()`.\\n    unchecked {\\n      return _currentIndex - _startTokenId();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total number of tokens burned.\\n   */\\n  function _totalBurned() internal view virtual returns (uint256) {\\n    return _burnCounter;\\n  }\\n\\n  // =============================================================\\n  //                    ADDRESS DATA OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the number of tokens in `owner`'s account.\\n   */\\n  function balanceOf(address owner)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n    return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n  }\\n\\n  /**\\n   * Returns the number of tokens minted by `owner`.\\n   */\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    return\\n      (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) &\\n      _BITMASK_ADDRESS_DATA_ENTRY;\\n  }\\n\\n  /**\\n   * Returns the number of tokens burned by or on behalf of `owner`.\\n   */\\n  function _numberBurned(address owner) internal view returns (uint256) {\\n    return\\n      (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) &\\n      _BITMASK_ADDRESS_DATA_ENTRY;\\n  }\\n\\n  /**\\n   * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n   */\\n  function _getAux(address owner) internal view returns (uint64) {\\n    return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n  }\\n\\n  /**\\n   * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n   * If there are multiple variables, please pack them into a uint64.\\n   */\\n  function _setAux(address owner, uint64 aux) internal virtual {\\n    uint256 packed = _packedAddressData[owner];\\n    uint256 auxCasted;\\n    // Cast `aux` with assembly to avoid redundant masking.\\n    assembly {\\n      auxCasted := aux\\n    }\\n    packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n    _packedAddressData[owner] = packed;\\n  }\\n\\n  // =============================================================\\n  //                            IERC165\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    // The interface IDs are constants representing the first 4 bytes\\n    // of the XOR of all function selectors in the interface.\\n    // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n    // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n    return\\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n      interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n      interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n  }\\n\\n  // =============================================================\\n  //                        IERC721Metadata\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the token collection name.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the token collection symbol.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length != 0\\n        ? string(abi.encodePacked(baseURI, _toString(tokenId)))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, it can be overridden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Casts the address to uint256 without masking.\\n   */\\n  function _addressToUint256(address value)\\n    private\\n    pure\\n    returns (uint256 result)\\n  {\\n    assembly {\\n      result := value\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts the boolean to uint256 without branching.\\n   */\\n  function _boolToUint256(bool value) private pure returns (uint256 result) {\\n    assembly {\\n      result := value\\n    }\\n  }\\n\\n  // =============================================================\\n  //                     OWNERSHIPS OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return address(uint160(_packedOwnershipOf(tokenId)));\\n  }\\n\\n  /**\\n   * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n   * It gradually moves to O(1) as tokens get transferred around over time.\\n   */\\n  function _ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    returns (TokenOwnership memory)\\n  {\\n    return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n  }\\n\\n  /**\\n   * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n   */\\n  function _ownershipAt(uint256 index)\\n    internal\\n    view\\n    virtual\\n    returns (TokenOwnership memory)\\n  {\\n    return _unpackedOwnership(_packedOwnerships[index]);\\n  }\\n\\n  /**\\n   * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n   */\\n  function _initializeOwnershipAt(uint256 index) internal virtual {\\n    if (_packedOwnerships[index] == 0) {\\n      _packedOwnerships[index] = _packedOwnershipOf(index);\\n    }\\n  }\\n\\n  /**\\n   * Returns the packed ownership data of `tokenId`.\\n   */\\n  function _packedOwnershipOf(uint256 tokenId) internal view returns (uint256) {\\n    uint256 curr = tokenId;\\n\\n    unchecked {\\n      if (_startTokenId() <= curr)\\n        if (curr < _currentIndex) {\\n          uint256 packed = _packedOwnerships[curr];\\n          // If not burned.\\n          if (packed & _BITMASK_BURNED == 0) {\\n            // Invariant:\\n            // There will always be an initialized ownership slot\\n            // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n            // before an unintialized ownership slot\\n            // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n            // Hence, `curr` will not underflow.\\n            //\\n            // We can directly compare the packed value.\\n            // If the address is zero, packed will be zero.\\n            while (packed == 0) {\\n              packed = _packedOwnerships[--curr];\\n            }\\n            return packed;\\n          }\\n        }\\n    }\\n    revert OwnerQueryForNonexistentToken();\\n  }\\n\\n  /**\\n   * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n   */\\n  function _unpackedOwnership(uint256 packed)\\n    private\\n    pure\\n    returns (TokenOwnership memory ownership)\\n  {\\n    ownership.addr = address(uint160(packed));\\n    ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n    ownership.burned = packed & _BITMASK_BURNED != 0;\\n    ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n  }\\n\\n  /**\\n   * @dev Packs ownership data into a single uint256.\\n   */\\n  function _packOwnershipData(address owner, uint256 flags)\\n    internal\\n    view\\n    returns (uint256 result)\\n  {\\n    assembly {\\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n      owner := and(owner, _BITMASK_ADDRESS)\\n      // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n      result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n   */\\n  function _nextInitializedFlag(uint256 quantity)\\n    private\\n    pure\\n    returns (uint256 result)\\n  {\\n    // For branchless setting of the `nextInitialized` flag.\\n    assembly {\\n      // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n      result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n    }\\n  }\\n\\n  // =============================================================\\n  //                      APPROVAL OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the\\n   * zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n\\n    if (_msgSenderERC721A() != owner)\\n      if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n        revert ApprovalCallerNotOwnerNorApproved();\\n      }\\n\\n    _tokenApprovals[tokenId].value = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n    return _tokenApprovals[tokenId].value;\\n  }\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom}\\n   * for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override\\n  {\\n    if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n    _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n    emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted. See {_mint}.\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return\\n      _startTokenId() <= tokenId &&\\n      tokenId < _currentIndex && // If within bounds,\\n      _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n  }\\n\\n  /**\\n   * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n   */\\n  function _isSenderApprovedOrOwner(\\n    address approvedAddress,\\n    address owner,\\n    address msgSender\\n  ) internal pure returns (bool result) {\\n    assembly {\\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n      owner := and(owner, _BITMASK_ADDRESS)\\n      // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n      msgSender := and(msgSender, _BITMASK_ADDRESS)\\n      // `msgSender == owner || msgSender == approvedAddress`.\\n      result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n   */\\n  function _getApprovedSlotAndAddress(uint256 tokenId)\\n    internal\\n    view\\n    returns (uint256 approvedAddressSlot, address approvedAddress)\\n  {\\n    TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n    // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n    assembly {\\n      approvedAddressSlot := tokenApproval.slot\\n      approvedAddress := sload(approvedAddressSlot)\\n    }\\n  }\\n\\n  // =============================================================\\n  //                      TRANSFER OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token\\n   * by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n    require(lock[tokenId] != true, \\\"token have been locked!\\\");\\n\\n    if (address(uint160(prevOwnershipPacked)) != from)\\n      revert TransferFromIncorrectOwner();\\n\\n    (\\n      uint256 approvedAddressSlot,\\n      address approvedAddress\\n    ) = _getApprovedSlotAndAddress(tokenId);\\n\\n    // The nested ifs save around 20+ gas over a compound boolean condition.\\n    if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n      if (!isApprovedForAll(from, _msgSenderERC721A()))\\n        revert TransferCallerNotOwnerNorApproved();\\n\\n    if (to == address(0)) revert TransferToZeroAddress();\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner.\\n    assembly {\\n      if approvedAddress {\\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n        sstore(approvedAddressSlot, 0)\\n      }\\n    }\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n    unchecked {\\n      // We can directly increment and decrement the balances.\\n      --_packedAddressData[from]; // Updates: `balance -= 1`.\\n      ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n      // Updates:\\n      // - `address` to the next owner.\\n      // - `startTimestamp` to the timestamp of transfering.\\n      // - `burned` to `false`.\\n      // - `nextInitialized` to `true`.\\n      _packedOwnerships[tokenId] = _packOwnershipData(\\n        to,\\n        _BITMASK_NEXT_INITIALIZED |\\n          _nextExtraData(from, to, prevOwnershipPacked)\\n      );\\n\\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n      if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n        uint256 nextTokenId = tokenId + 1;\\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n        if (_packedOwnerships[nextTokenId] == 0) {\\n          // If the next slot is within bounds.\\n          if (nextTokenId != _currentIndex) {\\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n          }\\n        }\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    require(lock[tokenId] != true, \\\"token have been locked!\\\");\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token\\n   * by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement\\n   * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(lock[tokenId] != true, \\\"token have been locked!\\\");\\n    transferFrom(from, to, tokenId);\\n    if (to.code.length != 0)\\n      if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n        revert TransferToNonERC721ReceiverImplementer();\\n      }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token IDs\\n   * are about to be transferred. This includes minting.\\n   * And also called before burning one token.\\n   *\\n   * `startTokenId` - the first token ID to be transferred.\\n   * `quantity` - the amount to be transferred.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token IDs\\n   * have been transferred. This includes minting.\\n   * And also called after one token has been burned.\\n   *\\n   * `startTokenId` - the first token ID to be transferred.\\n   * `quantity` - the amount to be transferred.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` has been minted for `to`.\\n   * - When `to` is zero, `tokenId` has been burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n   *\\n   * `from` - Previous owner of the given token ID.\\n   * `to` - Target address that will receive the token.\\n   * `tokenId` - Token ID to be transferred.\\n   * `_data` - Optional data to send along with the call.\\n   *\\n   * Returns whether the call correctly returned the expected magic value.\\n   */\\n  function _checkContractOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    try\\n      ERC721A__IERC721Receiver(to).onERC721Received(\\n        _msgSenderERC721A(),\\n        from,\\n        tokenId,\\n        _data\\n      )\\n    returns (bytes4 retval) {\\n      return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n    } catch (bytes memory reason) {\\n      if (reason.length == 0) {\\n        revert TransferToNonERC721ReceiverImplementer();\\n      } else {\\n        assembly {\\n          revert(add(32, reason), mload(reason))\\n        }\\n      }\\n    }\\n  }\\n\\n  // =============================================================\\n  //                        MINT OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {Transfer} event for each mint.\\n   */\\n  function _mint(address to, uint256 quantity) internal virtual {\\n    uint256 startTokenId = _currentIndex;\\n    if (quantity == 0) revert MintZeroQuantity();\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    // Overflows are incredibly unrealistic.\\n    // `balance` and `numberMinted` have a maximum limit of 2**64.\\n    // `tokenId` has a maximum limit of 2**256.\\n    unchecked {\\n      // Updates:\\n      // - `balance += quantity`.\\n      // - `numberMinted += quantity`.\\n      //\\n      // We can directly add to the `balance` and `numberMinted`.\\n      _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n      // Updates:\\n      // - `address` to the owner.\\n      // - `startTimestamp` to the timestamp of minting.\\n      // - `burned` to `false`.\\n      // - `nextInitialized` to `quantity == 1`.\\n      _packedOwnerships[startTokenId] = _packOwnershipData(\\n        to,\\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n      );\\n\\n      uint256 toMasked;\\n      uint256 end = startTokenId + quantity;\\n\\n      // Use assembly to loop and emit the `Transfer` event for gas savings.\\n      // The duplicated `log4` removes an extra check and reduces stack juggling.\\n      // The assembly, together with the surrounding Solidity code, have been\\n      // delicately arranged to nudge the compiler into producing optimized opcodes.\\n      assembly {\\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n        toMasked := and(to, _BITMASK_ADDRESS)\\n        // Emit the `Transfer` event.\\n        log4(\\n          0, // Start of data (0, since no data).\\n          0, // End of data (0, since no data).\\n          _TRANSFER_EVENT_SIGNATURE, // Signature.\\n          0, // `address(0)`.\\n          toMasked, // `to`.\\n          startTokenId // `tokenId`.\\n        )\\n\\n        for {\\n          let tokenId := add(startTokenId, 1)\\n        } iszero(eq(tokenId, end)) {\\n          tokenId := add(tokenId, 1)\\n        } {\\n          // Emit the `Transfer` event. Similar to above.\\n          log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n        }\\n      }\\n      if (toMasked == 0) revert MintToZeroAddress();\\n\\n      _currentIndex = end;\\n    }\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * This function is intended for efficient minting only during contract creation.\\n   *\\n   * It emits only one {ConsecutiveTransfer} as defined in\\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n   * instead of a sequence of {Transfer} event(s).\\n   *\\n   * Calling this function outside of contract creation WILL make your contract\\n   * non-compliant with the ERC721 standard.\\n   * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n   * {ConsecutiveTransfer} event is only permissible during contract creation.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {ConsecutiveTransfer} event.\\n   */\\n  function _mintERC2309(address to, uint256 quantity) internal virtual {\\n    uint256 startTokenId = _currentIndex;\\n    if (to == address(0)) revert MintToZeroAddress();\\n    if (quantity == 0) revert MintZeroQuantity();\\n    if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT)\\n      revert MintERC2309QuantityExceedsLimit();\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n    unchecked {\\n      // Updates:\\n      // - `balance += quantity`.\\n      // - `numberMinted += quantity`.\\n      //\\n      // We can directly add to the `balance` and `numberMinted`.\\n      _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n      // Updates:\\n      // - `address` to the owner.\\n      // - `startTimestamp` to the timestamp of minting.\\n      // - `burned` to `false`.\\n      // - `nextInitialized` to `quantity == 1`.\\n      _packedOwnerships[startTokenId] = _packOwnershipData(\\n        to,\\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n      );\\n\\n      emit ConsecutiveTransfer(\\n        startTokenId,\\n        startTokenId + quantity - 1,\\n        address(0),\\n        to\\n      );\\n\\n      _currentIndex = startTokenId + quantity;\\n    }\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement\\n   * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * See {_mint}.\\n   *\\n   * Emits a {Transfer} event for each mint.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal virtual {\\n    _mint(to, quantity);\\n\\n    unchecked {\\n      if (to.code.length != 0) {\\n        uint256 end = _currentIndex;\\n        uint256 index = end - quantity;\\n        do {\\n          if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n          }\\n        } while (index < end);\\n        // Reentrancy protection.\\n        if (_currentIndex != end) revert();\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n   */\\n  function _safeMint(address to, uint256 quantity) internal virtual {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  // =============================================================\\n  //                        BURN OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Equivalent to `_burn(tokenId, false)`.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    _burn(tokenId, false);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n    address from = address(uint160(prevOwnershipPacked));\\n\\n    (\\n      uint256 approvedAddressSlot,\\n      address approvedAddress\\n    ) = _getApprovedSlotAndAddress(tokenId);\\n\\n    if (approvalCheck) {\\n      // The nested ifs save around 20+ gas over a compound boolean condition.\\n      if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n        if (!isApprovedForAll(from, _msgSenderERC721A()))\\n          revert TransferCallerNotOwnerNorApproved();\\n    }\\n\\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n    // Clear approvals from the previous owner.\\n    assembly {\\n      if approvedAddress {\\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n        sstore(approvedAddressSlot, 0)\\n      }\\n    }\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n    unchecked {\\n      // Updates:\\n      // - `balance -= 1`.\\n      // - `numberBurned += 1`.\\n      //\\n      // We can directly decrement the balance, and increment the number burned.\\n      // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n      _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n      // Updates:\\n      // - `address` to the last owner.\\n      // - `startTimestamp` to the timestamp of burning.\\n      // - `burned` to `true`.\\n      // - `nextInitialized` to `true`.\\n      _packedOwnerships[tokenId] = _packOwnershipData(\\n        from,\\n        (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\\n          _nextExtraData(from, address(0), prevOwnershipPacked)\\n      );\\n\\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n      if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n        uint256 nextTokenId = tokenId + 1;\\n        // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n        if (_packedOwnerships[nextTokenId] == 0) {\\n          // If the next slot is within bounds.\\n          if (nextTokenId != _currentIndex) {\\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n          }\\n        }\\n      }\\n    }\\n\\n    emit Transfer(from, address(0), tokenId);\\n    _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n    unchecked {\\n      _burnCounter++;\\n    }\\n  }\\n\\n  // =============================================================\\n  //                     EXTRA DATA OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Directly sets the extra data for the ownership data `index`.\\n   */\\n  function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n    uint256 packed = _packedOwnerships[index];\\n    if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n    uint256 extraDataCasted;\\n    // Cast `extraData` with assembly to avoid redundant masking.\\n    assembly {\\n      extraDataCasted := extraData\\n    }\\n    packed =\\n      (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\\n      (extraDataCasted << _BITPOS_EXTRA_DATA);\\n    _packedOwnerships[index] = packed;\\n  }\\n\\n  /**\\n   * @dev Called during each token transfer to set the 24bit `extraData` field.\\n   * Intended to be overridden by the cosumer contract.\\n   *\\n   * `previousExtraData` - the value of `extraData` before transfer.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _extraData(\\n    address from,\\n    address to,\\n    uint24 previousExtraData\\n  ) internal view virtual returns (uint24) {}\\n\\n  /**\\n   * @dev Returns the next extra data for the packed ownership data.\\n   * The returned result is shifted into position.\\n   */\\n  function _nextExtraData(\\n    address from,\\n    address to,\\n    uint256 prevOwnershipPacked\\n  ) internal view returns (uint256) {\\n    uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n    return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n  }\\n\\n  // =============================================================\\n  //                       OTHER OPERATIONS\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the message sender (defaults to `msg.sender`).\\n   *\\n   * If you are writing GSN compatible contracts, you need to override this function.\\n   */\\n  function _msgSenderERC721A() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  /**\\n   * @dev Converts a uint256 to its ASCII string decimal representation.\\n   */\\n  function _toString(uint256 value)\\n    internal\\n    pure\\n    virtual\\n    returns (string memory str)\\n  {\\n    assembly {\\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n      // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aligned.\\n      // We will need 1 32-byte word to store the length,\\n      // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\\n      str := add(mload(0x40), 0x80)\\n      // Update the free memory pointer to allocate.\\n      mstore(0x40, str)\\n\\n      // Cache the end of the memory to calculate the length later.\\n      let end := str\\n\\n      // We write the string from rightmost digit to leftmost digit.\\n      // The following is essentially a do-while loop that also handles the zero case.\\n      // prettier-ignore\\n      for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n      let length := sub(end, str)\\n      // Move the pointer 32 bytes leftwards to make room for the length.\\n      str := sub(str, 0x20)\\n      // Store the length.\\n      mstore(str, length)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n  /**\\n   * The caller must own the token or be an approved operator.\\n   */\\n  error ApprovalCallerNotOwnerNorApproved();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error ApprovalQueryForNonexistentToken();\\n\\n  /**\\n   * The caller cannot approve to their own address.\\n   */\\n  error ApproveToCaller();\\n\\n  /**\\n   * Cannot query the balance for the zero address.\\n   */\\n  error BalanceQueryForZeroAddress();\\n\\n  /**\\n   * Cannot mint to the zero address.\\n   */\\n  error MintToZeroAddress();\\n\\n  /**\\n   * The quantity of tokens minted must be more than zero.\\n   */\\n  error MintZeroQuantity();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error OwnerQueryForNonexistentToken();\\n\\n  /**\\n   * The caller must own the token or be an approved operator.\\n   */\\n  error TransferCallerNotOwnerNorApproved();\\n\\n  /**\\n   * The token must be owned by `from`.\\n   */\\n  error TransferFromIncorrectOwner();\\n\\n  /**\\n   * Cannot safely transfer to a contract that does not implement the\\n   * ERC721Receiver interface.\\n   */\\n  error TransferToNonERC721ReceiverImplementer();\\n\\n  /**\\n   * Cannot transfer to the zero address.\\n   */\\n  error TransferToZeroAddress();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error URIQueryForNonexistentToken();\\n\\n  /**\\n   * The `quantity` minted with ERC2309 exceeds the safety limit.\\n   */\\n  error MintERC2309QuantityExceedsLimit();\\n\\n  /**\\n   * The `extraData` cannot be set on an unintialized ownership slot.\\n   */\\n  error OwnershipNotInitializedForExtraData();\\n\\n  // =============================================================\\n  //                            STRUCTS\\n  // =============================================================\\n\\n  struct TokenOwnership {\\n    // The address of the owner.\\n    address addr;\\n    // Stores the start time of ownership with minimal overhead for tokenomics.\\n    uint64 startTimestamp;\\n    // Whether the token has been burned.\\n    bool burned;\\n    // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n    uint24 extraData;\\n  }\\n\\n  // =============================================================\\n  //                         TOKEN COUNTERS\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the total number of tokens in existence.\\n   * Burned tokens will reduce the count.\\n   * To get the total number of tokens minted, please see {_totalMinted}.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  // function _lockToken(uint256[] memory tokenid) internal returns (bool);\\n  // function _unlockToken(uint256[] memory tokenid) internal returns (bool);\\n\\n  // =============================================================\\n  //                            IERC165\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n  // =============================================================\\n  //                            IERC721\\n  // =============================================================\\n\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed tokenId\\n  );\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(\\n    address indexed owner,\\n    address indexed approved,\\n    uint256 indexed tokenId\\n  );\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables\\n   * (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  /**\\n   * @dev Returns the number of tokens in `owner`'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`,\\n   * checking first that contract recipients are aware of the ERC721 protocol\\n   * to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move\\n   * this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement\\n   * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n   * whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token\\n   * by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the\\n   * zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom}\\n   * for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId)\\n    external\\n    view\\n    returns (address operator);\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    external\\n    view\\n    returns (bool);\\n\\n  // =============================================================\\n  //                        IERC721Metadata\\n  // =============================================================\\n\\n  /**\\n   * @dev Returns the token collection name.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the token collection symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n   */\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n  // =============================================================\\n  //                           IERC2309\\n  // =============================================================\\n\\n  /**\\n   * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n   * (inclusive) is transferred from `from` to `to`, as defined in the\\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n   *\\n   * See {_mintERC2309} for more details.\\n   */\\n  event ConsecutiveTransfer(\\n    uint256 indexed fromTokenId,\\n    uint256 toTokenId,\\n    address indexed from,\\n    address indexed to\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/ERC721ABurnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"./IERC721ABurnable.sol\\\";\\n/**\\n * @title ERC721A Burnable Token\\n * @dev ERC721A Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721ABurnable is ERC721A, IERC721ABurnable {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual override {\\n        _burn(tokenId, true);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/ERC721AQueryable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"./IERC721AQueryable.sol\\\";\\n/**\\n * @title ERC721A Queryable\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *   - `addr` = `address(0)`\\n     *   - `startTimestamp` = `0`\\n     *   - `burned` = `false`\\n     *\\n     * If the `tokenId` is burned:\\n     *   - `addr` = `<Address of owner before token was burned>`\\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\\n     *   - `burned = `true`\\n     *\\n     * Otherwise:\\n     *   - `addr` = `<Address of owner>`\\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n     *   - `burned = `false`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view override returns (TokenOwnership[] memory) {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/IERC721ABurnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721A.sol\\\";\\n/**\\n * @dev Interface of an ERC721ABurnable compliant contract.\\n */\\ninterface IERC721ABurnable is IERC721A {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721A/IERC721AQueryable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721A.sol\\\";\\n/**\\n * @dev Interface of an ERC721AQueryable compliant contract.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *   - `addr` = `address(0)`\\n     *   - `startTimestamp` = `0`\\n     *   - `burned` = `false`\\n     *\\n     * If the `tokenId` is burned:\\n     *   - `addr` = `<Address of owner before token was burned>`\\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\\n     *   - `burned = `true`\\n     *\\n     * Otherwise:\\n     *   - `addr` = `<Address of owner>`\\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n     *   - `burned = `false`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/metatx/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MathUpgradeable.sol\\\";\\nimport \\\"./SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/metatx/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/metatx/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/OwnerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ERC2771ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"AdminCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CreateTournament\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"}],\"name\":\"EndTournament\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"LibesEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_listToken\",\"type\":\"uint256[]\"}],\"name\":\"adminCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_listToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"}],\"name\":\"createTournament\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tournamentId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tournamentId\",\"type\":\"uint256\"}],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarder\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"libesEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftEntryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_nftEntryAddress\",\"type\":\"address\"}],\"name\":\"setNFTEntryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tournaments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tournamentName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LibesEntryV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}