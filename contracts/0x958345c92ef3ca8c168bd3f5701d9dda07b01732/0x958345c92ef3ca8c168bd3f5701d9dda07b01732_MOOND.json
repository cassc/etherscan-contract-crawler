{"SourceCode": "// SPDX-License-Identifier: MIT\r\n   pragma solidity 0.8.17;\r\n   \r\n   \r\n   interface Manager {\r\n       function uniswapRouterV2() external view returns(address);\r\n       function pToken() external view returns(address);\r\n       function iUniswapV2Factory() external view returns(address);\r\n       function owner() external view returns(address);\r\n       function moonb() external view returns(address);\r\n       function lpToken() external view returns(address);\r\n       function vault() external view returns(address);\r\n       function stPool() external view returns(address);\r\n       function exPool() external view returns(address);\r\n       function pair() external view returns(address);\r\n       function receiverA() external view returns(address);\r\n       function receiverB() external view returns(address);\r\n   }\r\n   interface IERC20 {\r\n       function totalSupply() external view returns (uint256);\r\n       function balanceOf(address account) external view returns (uint256);\r\n       function transfer(address recipient, uint256 amount) external returns (bool);\r\n       function allowance(address owner, address spender) external view returns (uint256);\r\n       function approve(address spender, uint256 amount) external returns (bool);\r\n       function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n       event Transfer(address indexed from, address indexed to, uint256 value);\r\n       event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   }\r\n   library SafeMath {\r\n       function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n           uint256 c = a + b;\r\n           require(c >= a, \"SafeMath: addition overflow\");\r\n           return c;\r\n       }\r\n       function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n           require(b <= a, \"SafeMath: subtraction overflow\");\r\n           uint256 c = a - b;\r\n           return c;\r\n       }\r\n       function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n           if (a == 0) {\r\n               return 0;\r\n           }\r\n           uint256 c = a * b;\r\n           require(c / a == b, \"SafeMath: multiplication overflow\");\r\n           return c;\r\n       }\r\n       function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n           require(b > 0, \"SafeMath: division by zero\");\r\n           uint256 c = a / b;\r\n           return c;\r\n       }\r\n       function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n           require(b != 0, \"SafeMath: modulo by zero\");\r\n           return a % b;\r\n       }\r\n   }\r\n   \r\n   contract ERC20 is IERC20 {\r\n       using SafeMath for uint256;\r\n   \r\n       mapping (address => uint256) private _balances;\r\n   \r\n       mapping (address => mapping (address => uint256)) private _allowances;\r\n   \r\n       mapping (address => bool) private _blackList;\r\n   \r\n       mapping (address => bool) private _whiteList;\r\n   \r\n       uint256 private _totalSupply;\r\n   \r\n       uint256 private _initialValue = 1e18;\r\n   \r\n       uint256 private _inProportion = 10;\r\n   \r\n       uint256 private _outProportion = 10;\r\n   \r\n       address public manager;\r\n   \r\n       function totalSupply() public view returns (uint256) {\r\n           return _totalSupply.mul(_initialValue).div(1e18);\r\n       }\r\n   \r\n       function initialValue() public view returns (uint256) {\r\n           return _initialValue;\r\n       }\r\n   \r\n       function inProportion() public view returns (uint256){\r\n           return _inProportion;\r\n       }\r\n   \r\n       function outProportion() public view returns (uint256) {\r\n           return _outProportion;\r\n       }\r\n   \r\n       function getBlackList(address user) public view returns(bool) {\r\n          return _blackList[user];\r\n       }\r\n   \r\n       function getWhiteList(address user) public view returns(bool) {\r\n           return _whiteList[user];\r\n       }\r\n   \r\n       function balanceOf(address account) public view returns (uint256) {\r\n           return _balances[account].mul(_initialValue).div(1e18);\r\n       }\r\n   \r\n       function setInProportion(uint256 newInProportion) public onlyOwner returns (bool){\r\n           assert(newInProportion < 100);\r\n           _inProportion = newInProportion;\r\n           return true;\r\n       }\r\n   \r\n       function setManger(address _manager) public onlyOwner{\r\n           manager = _manager;\r\n       }\r\n   \r\n       function setOutProportion(uint256 newOutProportion) public onlyOwner returns(bool) {\r\n           assert(newOutProportion < 100);\r\n           _outProportion = newOutProportion;\r\n           return true;\r\n       }\r\n      \r\n       function rebase(uint256 coefficient) public onlyOwner returns (bool){\r\n           require(coefficient <= 10000,\"ERC20: rebase error\");\r\n           address stPool = Manager(manager).stPool();\r\n           uint256 beforeRebase = balanceOf(stPool);\r\n           _initialValue = _initialValue.mul(coefficient).div(10000);\r\n           uint256 afterRebase = balanceOf(stPool);\r\n           _mint(stPool, beforeRebase.sub(afterRebase));\r\n           return true;\r\n       }\r\n   \r\n       function setBlackList(address user) public onlyOwner {\r\n           _blackList[user] = true;\r\n       }\r\n   \r\n       function setWhiteList(address user) public onlyOwner{\r\n           _whiteList[user] = true;\r\n       }\r\n   \r\n       function cancelBlackList(address user) public onlyOwner {\r\n           _blackList[user] = false;\r\n       }\r\n   \r\n       function cancelWhiteList(address user) public onlyOwner{\r\n           _whiteList[user] = false;\r\n       }\r\n   \r\n       function transfer(address recipient, uint256 amount) public returns (bool) {\r\n           _transfer(msg.sender, recipient, amount);\r\n           return true;\r\n       }\r\n   \r\n       function allowance(address user, address spender) public view returns (uint256) {\r\n           return _allowances[user][spender];\r\n       }\r\n   \r\n       function approve(address spender, uint256 value) public returns (bool) {\r\n           _approve(msg.sender, spender, value);\r\n           return true;\r\n       }\r\n   \r\n       function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n           _transfer(sender, recipient, amount);\r\n           _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n           return true;\r\n       }\r\n   \r\n       function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n           _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n           return true;\r\n       }\r\n   \r\n       function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n           _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n           return true;\r\n       }\r\n   \r\n       function burn(uint256 value) public {\r\n         _burn(msg.sender, value);\r\n       }\r\n   \r\n       function _transfer(address sender, address recipient, uint256 amount) internal {\r\n           require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n           require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n           require(!_blackList[sender],\"ERC20: this is an illegal address\");\r\n   \r\n           uint256 rebaseBeforeAmount = getBeforeRebase(amount);\r\n   \r\n           if(!_whiteList[sender] && !_whiteList[tx.origin]){\r\n               uint256 proportion;\r\n               address pair = Manager(manager).pair();\r\n               if(sender == pair){\r\n                   proportion = _outProportion;\r\n               }else if(recipient == pair){\r\n                   proportion = _inProportion;\r\n               }\r\n               if(proportion > 0){\r\n                   address exPool = Manager(manager).exPool();\r\n                   _balances[sender] = _balances[sender].sub(rebaseBeforeAmount);\r\n                   uint256 toAmount = rebaseBeforeAmount.mul(uint256(100).sub(proportion)).div(100);\r\n                   _balances[recipient] = _balances[recipient].add(toAmount);\r\n                   _balances[exPool] = _balances[exPool].add(rebaseBeforeAmount.sub(toAmount));\r\n                   toAmount = toAmount.mul(_initialValue).div(1e18);\r\n                   emit Transfer(sender, recipient, toAmount);\r\n                   emit Transfer(sender, exPool, amount.sub(toAmount));\r\n                   return;\r\n               }\r\n           }\r\n           _balances[sender] = _balances[sender].sub(rebaseBeforeAmount);\r\n           _balances[recipient] = _balances[recipient].add(rebaseBeforeAmount);\r\n           emit Transfer(sender, recipient, amount);\r\n       }\r\n   \r\n       function _mint(address account, uint256 amount) internal {\r\n           require(account != address(0), \"ERC20: mint to the zero address\");\r\n           uint256 rebaseBeforeAmount = getBeforeRebase(amount);\r\n   \r\n           _totalSupply = _totalSupply.add(rebaseBeforeAmount);\r\n           _balances[account] = _balances[account].add(rebaseBeforeAmount);\r\n           emit Transfer(address(0), account, amount);\r\n       }\r\n   \r\n       function getBeforeRebase(uint256 amount) internal view returns (uint256) {\r\n           return amount.mul(1e18).div(_initialValue);\r\n       }\r\n   \r\n       function _burn(address account, uint256 value) internal {\r\n           require(account != address(0), \"ERC20: burn from the zero address\");\r\n           uint256 rebaseBeforeAmount = getBeforeRebase(value);\r\n           _totalSupply = _totalSupply.sub(rebaseBeforeAmount);\r\n           _balances[account] = _balances[account].sub(rebaseBeforeAmount);\r\n           emit Transfer(account, address(0), value);\r\n       }\r\n   \r\n       function _approve(address user, address spender, uint256 value) internal {\r\n           require(user != address(0), \"ERC20: approve from the zero address\");\r\n           require(spender != address(0), \"ERC20: approve to the zero address\");\r\n   \r\n           _allowances[user][spender] = value;\r\n           emit Approval(user, spender, value);\r\n       }\r\n   \r\n       function _burnFrom(address account, uint256 amount) internal {\r\n           _burn(account, amount);\r\n           _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n       }\r\n   \r\n       modifier onlyOwner() {\r\n           require(msg.sender == Manager(manager).owner(),\"ERC20: address is not owner\");\r\n           _;\r\n       }\r\n   }\r\n   \r\n   \r\n   contract MOOND is ERC20 {\r\n   \r\n       string public  name;\r\n       string public symbol;\r\n       uint8 public decimals;\r\n   \r\n       constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, uint256 amount,address _manager)   {\r\n         name = tokenName;\r\n         symbol = tokenSymbol;\r\n         decimals = tokenDecimals;\r\n   \r\n         _mint(msg.sender, amount);\r\n         manager = _manager;\r\n       }\r\n   }", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cancelBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cancelWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coefficient\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInProportion\",\"type\":\"uint256\"}],\"name\":\"setInProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOutProportion\",\"type\":\"uint256\"}],\"name\":\"setOutProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MOOND", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000fdbe45159b2a73f901765c75cddf509f4ab873b000000000000000000000000000000000000000000000000000000000000000a4d4f4f4e44544f4b454e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054d4f4f4e44000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9917660330a9c7494572253a1cf389de02c877e2b3e293b9cfaad29f6afcb99d"}