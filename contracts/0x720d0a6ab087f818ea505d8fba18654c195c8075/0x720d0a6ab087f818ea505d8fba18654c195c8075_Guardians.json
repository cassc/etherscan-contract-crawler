{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Guardians.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./libraries/GuardianTimeMath.sol\\\";\\nimport \\\"./interfaces/IERC11554K.sol\\\";\\nimport \\\"./interfaces/IFeesManager.sol\\\";\\nimport \\\"./interfaces/IERC11554KController.sol\\\";\\n\\n/**\\n * @dev Guardians management contract version 0.2.2\\n * Sets guardians parameters, fees, info\\n * by guardians themselves and the protocol.\\n */\\ncontract Guardians is Initializable, OwnableUpgradeable {\\n    /// @dev Guardian Info struct.\\n    struct GuardianInfo {\\n        /// @notice Hashed physical address of a guardian.\\n        bytes32 addressHash; //0\\n        /// @notice Logo of a guardian.\\n        string logo; //1\\n        /// @notice Name of a guardian.\\n        string name; //2\\n        /// @notice A guardian's redirect URI for future authentication flows.\\n        string redirect; //3\\n        /// @notice Guardian's policy.\\n        string policy; //4\\n        /// @notice Active status for a guardian\\n        bool isActive; //5\\n        /// @notice Private status for a guardian.\\n        bool isPrivate; //6\\n    }\\n\\n    enum GuardianFeeRatePeriods {\\n        SECONDS,\\n        MINUTES,\\n        HOURS,\\n        DAYS\\n    }\\n\\n    /// @dev Guardian class struct.\\n    struct GuardianClass {\\n        /// @notice Maximum insurance on-chain coverage.\\n        uint256 maximumCoverage; //0\\n        /// @notice Minting fee. Stored scaled by 10^18.\\n        uint256 mintingFee; //1\\n        /// @notice Redemption fee. Stored scaled by 10^18.\\n        uint256 redemptionFee; //2\\n        /// @notice The base unit for the guardian fee rate.\\n        uint256 guardianFeeRatePeriod; //3\\n        /// @notice Guardian fee rate per period. Stored scaled by 10^18.\\n        uint256 guardianFeeRate; //4\\n        /// @notice Guardian fee rate historic minimum.\\n        uint256 guardianFeeRateMinimum; //5\\n        /// @notice Last Guardian fee rate increase update timestamp.\\n        uint256 lastGuardianFeeRateIncrease; //6\\n        /// @notice Is guardian class active.\\n        bool isActive; //7\\n        /// @notice Guardian URI for metadata.\\n        string uri; //8\\n    }\\n\\n    uint256 public constant SECOND = 1;\\n    uint256 public constant MINUTE = 60;\\n    uint256 public constant HOUR = MINUTE * 60;\\n    uint256 public constant DAY = HOUR * 24;\\n\\n    /// @notice Fee manager contract.\\n    IFeesManager public feesManager;\\n\\n    /// @notice Controller contract.\\n    IERC11554KController public controller;\\n\\n    /// @notice Percentage factor with 0.01% precision. For internal float calculations.\\n    uint256 public constant PERCENTAGE_FACTOR = 10000;\\n\\n    /// @notice Minimum minting request fee.\\n    uint256 public minimumRequestFee;\\n    /// @notice Minimum time window for guardian fee rate increase.\\n    uint256 public guardianFeeSetWindow;\\n    /// @notice Maximum guardian fee rate percentage increase during single fee set, 0.01% precision.\\n    uint256 public maximumGuardianFeeSet;\\n    /// @notice Minimum storage time an item needs to have for transfers.\\n    uint256 public minStorageTime;\\n\\n    /// @notice Is an address a 4K whitelisted guardian.\\n    mapping(address => bool) public isWhitelisted;\\n\\n    /// @notice Metadata info about a guardian\\n    mapping(address => GuardianInfo) public guardianInfo;\\n\\n    /// @notice Guardians whitelisted users for services.\\n    mapping(address => mapping(address => bool)) public guardianWhitelist;\\n    /// @notice To whom (if) guardian delegated functions to execute\\n    mapping(address => address) public delegated;\\n    /// @notice  Guardian classes of a particular guardian.\\n    mapping(address => GuardianClass[]) public guardiansClasses;\\n    /// @notice How much items with id guardian keeps.\\n    /// guardian -> collection -> id -> amount\\n    mapping(address => mapping(IERC11554K => mapping(uint256 => uint256)))\\n        public stored;\\n    /// @notice At which guardian is each item stored.\\n    /// collection address -> item id -> guardian address\\n    mapping(IERC11554K => mapping(uint256 => address)) public whereItemStored;\\n\\n    /// @notice In which guardian class is the item? (within the context of the guardian where the item is stored)\\n    /// collection address -> item id -> guardian class index\\n    mapping(IERC11554K => mapping(uint256 => uint256)) public itemGuardianClass;\\n\\n    /// @notice Mapping from a token holder address to a collection to an item id, to the date until storage has been paid.\\n    mapping(address => mapping(IERC11554K => mapping(uint256 => uint256)))\\n        public guardianFeePaidUntil;\\n\\n    /// @notice Mapping from a collection, to item id, to the date until storage has been paid (globally, collectively for all users).\\n    /// @dev DEPRECATED\\n    mapping(IERC11554K => mapping(uint256 => uint256))\\n        public globalItemGuardianFeePaidUntil;\\n\\n    /// @notice user -> collection -> item id -> num items in repossession\\n    /// @notice Number of items in a collection that a user has in repossession.\\n    mapping(address => mapping(IERC11554K => mapping(uint256 => uint256)))\\n        public inRepossession;\\n\\n    /// @notice guardian => delegatee => true if guardian delegates some functions to delegatee.\\n    mapping(address => mapping(address => bool)) public delegatedAll;\\n\\n    /// @notice guardian => collection => delegatee if guardian delegates some functions to delegatee.\\n    mapping(address => mapping(IERC11554K => address))\\n        public delegatedCollection;\\n\\n    /// @notice Version of the contract\\n    bytes32 public version;\\n\\n    /// @dev Guardian has been added.\\n    event GuardianAdded(address indexed guardian, GuardianInfo newGuardianInfo);\\n    /// @dev Guardian has been removed.\\n    event GuardianRemoved(address indexed guardian);\\n    /// @dev Guardian has been modified\\n    event GuardianModified(\\n        address indexed guardian,\\n        uint8 fieldIndexModified,\\n        GuardianInfo newGuardianInfo\\n    );\\n    /// @dev Guardian class has been added.\\n    event GuardianClassAdded(\\n        address indexed guardian,\\n        uint256 classID,\\n        GuardianClass newGuardianClass\\n    );\\n    /// @dev Guardian class has been modified.\\n    event GuardianClassModified(\\n        address indexed guardian,\\n        uint256 classID,\\n        uint8 fieldIndexModified,\\n        GuardianClass newGuardianClass\\n    );\\n\\n    /// @dev Item has been stored by the guardian\\n    event ItemStored(\\n        address indexed guardian,\\n        uint256 classID,\\n        uint256 tokenId,\\n        IERC11554K collection\\n    );\\n\\n    /// @dev Item has been moved from one guardian to another\\n    event ItemMoved(\\n        address indexed fromGuardian,\\n        address indexed toGuardian,\\n        uint256 toGuardianClassId,\\n        uint256 tokenId,\\n        IERC11554K collection\\n    );\\n\\n    /// @dev Storage time has been purchased for an item.\\n    event StorageTimeAdded(\\n        uint256 indexed id,\\n        address indexed guardian,\\n        uint256 timeAmount,\\n        address beneficiary,\\n        IERC11554K collection\\n    );\\n    /// @dev Item(s) have been set for repossession.\\n    event SetForRepossession(\\n        uint256 indexed id,\\n        IERC11554K indexed collection,\\n        address indexed guardian,\\n        uint256 amount\\n    );\\n    /// @dev Guardian has been added - with metadata.\\n    event GuardianRegistered(\\n        address indexed guardian,\\n        GuardianInfo newGuardianInfo\\n    );\\n\\n    /// @dev Errors\\n    error GuardianNotWhitelisted();\\n    error CallerNotController();\\n    error NotCallersGuardianData();\\n    error MinStorageTimeTooLow();\\n    error TooManyReposessionItems();\\n    error OldGuardianAvailable();\\n    error NewGuardianUnavailable();\\n    error ClassNotActive();\\n    error NotGuardianOfItems();\\n    error FreeStorageItemsCantBeRepossessed();\\n    error GuardianFeePaidUntilStillInFuture();\\n    error NoItemsToRepossess();\\n    error MintingFeeTooLow();\\n    error DifferentPeriodRequired();\\n    error CollectionIsNotActiveOrLinked();\\n    error GuardianClassFeeRateTooLow();\\n    error GuardianFeeTooLow();\\n    error BeneficiaryDoesNotOwnItem();\\n    error GuardianDoesNotStoreItem();\\n    error ItemNotYetMinted();\\n    error GuardianFeeNotChangeableOnFreeStorageClass();\\n    error GuardianFeeWindowHasntPassed();\\n    error GuardianFeeRateLimitExceeded();\\n\\n    /**\\n     * @dev Only whitelisted guardian modifier.\\n     */\\n    modifier onlyWhitelisted(address guardian) {\\n        if (!isWhitelisted[guardian]) {\\n            revert GuardianNotWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only controller modifier.\\n     */\\n    modifier onlyController() {\\n        if (_msgSender() != address(controller)) {\\n            revert CallerNotController();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only controller modifier.\\n     */\\n    modifier ifNotOwnerGuardianIsCaller(address guardian) {\\n        if (_msgSender() != owner()) {\\n            if (_msgSender() != guardian) {\\n                revert NotCallersGuardianData();\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize Guardians contract.\\n     * @param minimumRequestFee_ The minimum mint request fee.\\n     * @param guardianFeeSetWindow_ The window of time in seconds within a guardian is allowed to increase a guardian fee rate.\\n     * @param maximumGuardianFeeSet_ The max percentage increase that a guardian can increase a guardian fee rate by. Numerator that generates percentage, over the PERCENTAGE_FACTOR.\\n     * @param feesManager_ Fees manager contract address.\\n     * @param controller_ Controller contract address.\\n     * @param version_ Version of contract\\n     */\\n    function initialize(\\n        uint256 minimumRequestFee_,\\n        uint256 guardianFeeSetWindow_,\\n        uint256 maximumGuardianFeeSet_,\\n        IFeesManager feesManager_,\\n        IERC11554KController controller_,\\n        bytes32 version_\\n    ) external initializer {\\n        __Ownable_init();\\n        minimumRequestFee = minimumRequestFee_;\\n        guardianFeeSetWindow = guardianFeeSetWindow_;\\n        maximumGuardianFeeSet = maximumGuardianFeeSet_;\\n        minStorageTime = 7776000; // default 90 days\\n        feesManager = feesManager_;\\n        controller = controller_;\\n        version = version_;\\n    }\\n\\n    /**\\n     * @notice Set controller.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract admin.\\n     * @param controller_ New address of controller contract.\\n     */\\n    function setController(\\n        IERC11554KController controller_\\n    ) external virtual onlyOwner {\\n        controller = controller_;\\n    }\\n\\n    /**\\n     * @notice Set fees manager.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract admin.\\n     @param feesManager_ New address of fees manager contract.\\n     */\\n    function setFeesManager(\\n        IFeesManager feesManager_\\n    ) external virtual onlyOwner {\\n        feesManager = feesManager_;\\n    }\\n\\n    /**\\n     * @notice Sets new min storage time.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract admin.\\n     * @param minStorageTime_ New minimum storage time that items require to have, in seconds.\\n     */\\n    function setMinStorageTime(\\n        uint256 minStorageTime_\\n    ) external virtual onlyOwner {\\n        if (minStorageTime_ == 0) {\\n            revert MinStorageTimeTooLow();\\n        }\\n        minStorageTime = minStorageTime_;\\n    }\\n\\n    /**\\n     * @notice Sets minimum mining fee.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param minimumRequestFee_ New minumum mint request fee.\\n     */\\n    function setMinimumRequestFee(\\n        uint256 minimumRequestFee_\\n    ) external onlyOwner {\\n        minimumRequestFee = minimumRequestFee_;\\n    }\\n\\n    /**\\n     * @notice Sets maximum Guardian fee rate set percentage.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param maximumGuardianFeeSet_ New max percentage increase that a guardian can increase a guardian fee rate by. Numerator that generates percentage, over the PERCENTAGE_FACTOR\\n     */\\n    function setMaximumGuardianFeeSet(\\n        uint256 maximumGuardianFeeSet_\\n    ) external onlyOwner {\\n        maximumGuardianFeeSet = maximumGuardianFeeSet_;\\n    }\\n\\n    /**\\n     * @notice Sets minimum Guardian fee.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param guardianFeeSetWindow_ New window of time in seconds within a guardian is allowed to increase a guardian fee rate\\n     */\\n    function setGuardianFeeSetWindow(\\n        uint256 guardianFeeSetWindow_\\n    ) external onlyOwner {\\n        guardianFeeSetWindow = guardianFeeSetWindow_;\\n    }\\n\\n    /**\\n     * @notice Does a batch adding of storage for all the items passed.\\n     * @param collections Array of collections that contain the items for which guardian time will be purchased.\\n     * @param beneficiaries Array of addresses that will be receiving the purchased guardian time.\\n     * @param ids Array of item ids for which guardian time will be purchased.\\n     * @param guardianFeeAmounts Array of guardian fee inputs for purchasing guardian time.\\n     */\\n    function batchAddStorageTime(\\n        IERC11554K[] calldata collections,\\n        address[] calldata beneficiaries,\\n        uint256[] calldata ids,\\n        uint256[] calldata guardianFeeAmounts\\n    ) external virtual {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            addStorageTime(\\n                collections[i],\\n                beneficiaries[i],\\n                ids[i],\\n                guardianFeeAmounts[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Externally called store item function by controller.\\n     * @param collection Address of the collection that the item being stored belongs to.\\n     * @param mintAddress Address of entity receiving the token(s).\\n     * @param id Item id of the item being stored.\\n     * @param guardian Address of guardian the item will be stored in.\\n     * @param guardianClassIndex Index of the guardian class the item will be stored in.\\n     * @param guardianFeeAmount Amount of fee that is being paid to purchase guardian time.\\n     * @param numItems Number of items being stored\\n     * @param feePayer The address of the entity paying the guardian fee.\\n     */\\n    function controllerStoreItem(\\n        IERC11554K collection,\\n        address mintAddress,\\n        uint256 id,\\n        address guardian,\\n        uint256 guardianClassIndex,\\n        uint256 guardianFeeAmount,\\n        uint256 numItems,\\n        address feePayer,\\n        IERC20Upgradeable paymentAsset\\n    ) external virtual onlyController {\\n        stored[guardian][collection][id] += numItems;\\n        whereItemStored[collection][id] = guardian;\\n        itemGuardianClass[collection][id] = guardianClassIndex;\\n\\n        // Only needs to be done in non-free guardian classes\\n        if (\\n            guardiansClasses[guardian][guardianClassIndex].guardianFeeRate > 0\\n        ) {\\n            // Initialize paid until timelines on first ever mints\\n            if (guardianFeePaidUntil[mintAddress][collection][id] == 0) {\\n                guardianFeePaidUntil[mintAddress][collection][id] = block\\n                    .timestamp;\\n            }\\n            {\\n                uint256 addedStorageTime = GuardianTimeMath\\n                    .calculateAddedGuardianTime(\\n                        guardianFeeAmount,\\n                        guardiansClasses[guardian][guardianClassIndex]\\n                            .guardianFeeRate,\\n                        guardiansClasses[guardian][guardianClassIndex]\\n                            .guardianFeeRatePeriod,\\n                        numItems\\n                    );\\n\\n                guardianFeePaidUntil[mintAddress][collection][\\n                    id\\n                ] += addedStorageTime;\\n\\n                emit StorageTimeAdded(\\n                    id,\\n                    guardian,\\n                    addedStorageTime,\\n                    mintAddress,\\n                    collection\\n                );\\n            }\\n\\n            feesManager.payGuardianFee(\\n                guardianFeeAmount,\\n                (guardiansClasses[guardian][guardianClassIndex]\\n                    .guardianFeeRate * numItems) /\\n                    getGuardianFeeRatePeriod(guardian, guardianClassIndex),\\n                guardian,\\n                guardianFeePaidUntil[mintAddress][collection][id],\\n                feePayer,\\n                paymentAsset\\n            );\\n\\n            emit ItemStored(guardian, guardianClassIndex, id, collection);\\n        }\\n    }\\n\\n    /**\\n     * @dev Externally called take item out function by controller.\\n     * @param guardian Address of guardian the item is being stored in.\\n     * @param collection Address of the collection that the item being stored belongs to.\\n     * @param id Item id of the item being stored.\\n     * @param numItems Number of items that are being taken out of the guardian.\\n     * @param from Address of the entity requesting the redemption/removal of the item(s).\\n     */\\n    function controllerTakeItemOut(\\n        address guardian,\\n        IERC11554K collection,\\n        uint256 id,\\n        uint256 numItems,\\n        address from\\n    ) external virtual onlyController {\\n        if (inRepossession[from][collection][id] >= numItems) {\\n            revert TooManyReposessionItems();\\n        }\\n        uint256 guardianClassFeeRate = getGuardianFeeRate(\\n            guardian,\\n            itemGuardianClass[collection][id]\\n        );\\n\\n        uint256 guardianFeeRatePeriod = getGuardianFeeRatePeriod(\\n            guardian,\\n            itemGuardianClass[collection][id]\\n        );\\n\\n        // No refunds\\n        // uint256 previousPaidUntil = guardianFeePaidUntil[from][collection][id];\\n        // uint256 guardianFeeRefundAmount;\\n\\n        if (guardianClassFeeRate > 0) {\\n            // No refunds\\n            // guardianFeeRefundAmount =\\n            _shiftGuardianFeesOnTokenRedeem(\\n                from,\\n                collection,\\n                id,\\n                numItems,\\n                guardianClassFeeRate,\\n                guardianFeeRatePeriod\\n            );\\n        }\\n\\n        stored[guardian][collection][id] -= numItems;\\n        if (stored[guardian][collection][id] == 0) {\\n            whereItemStored[collection][id] = address(0);\\n        }\\n\\n        // No refunds\\n        /*\\n        uint256 guardianClassFeeRateMin = getGuardianFeeRateMinimum(guardian, itemGuardianClass[collection][id]);\\n        if (guardianClassFeeRate > 0) {\\n            feesManager.refundGuardianFee(\\n                guardianFeeRefundAmount,\\n                (guardianClassFeeRateMin * numItems) / guardianFeeRatePeriod,\\n                guardian,\\n                previousPaidUntil,\\n                from,\\n                paymentAsset\\n            );\\n        }\\n        */\\n    }\\n\\n    /**\\n     * @notice Moves items from inactive guardian to active guardian. Move ALL items,\\n     * in the case of semi-fungibles. Must pass a guardian classe for each item for the new guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be 4K.\\n     * 2) Old guardian must be inactive.\\n     * 3) New guardian must be active.\\n     * 4) Each class passed for each item for the new guardian must be active.\\n     * 5) Must only be used to move ALL items and have movement of guardian fees after moving ALL items.\\n     * @param collection Address of the collection that includes the items being moved.\\n     * @param ids Array of item ids being moved.\\n     * @param oldGuardian Address of the guardian items are being moved from.\\n     * @param newGuardian Address of the guardian items are being moved to.\\n     * @param newGuardianClassIndeces Array of the newGuardian's guardian class indices the items will be moved to.\\n     */\\n    function moveItems(\\n        IERC11554K collection,\\n        uint256[] calldata ids,\\n        address oldGuardian,\\n        address newGuardian,\\n        uint256[] calldata newGuardianClassIndeces\\n    ) external virtual onlyOwner {\\n        if (isAvailable(oldGuardian)) {\\n            revert OldGuardianAvailable();\\n        }\\n        if (!isAvailable(newGuardian)) {\\n            revert NewGuardianUnavailable();\\n        }\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            if (!isClassActive(newGuardian, newGuardianClassIndeces[i])) {\\n                revert ClassNotActive();\\n            }\\n            _moveSingleItem(\\n                collection,\\n                ids[i],\\n                oldGuardian,\\n                newGuardian,\\n                newGuardianClassIndeces[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Copies all guardian classes from one guardian to another.\\n     * @dev If new guardian has no guardian classes before this, class indeces will be the same. If not, copies classes will have new indeces.\\n     *\\n     * @param oldGuardian Address of the guardian whose classes will be moved.\\n     * @param newGuardian Address of the guardian that will be receiving the classes.\\n     */\\n    function copyGuardianClasses(\\n        address oldGuardian,\\n        address newGuardian\\n    ) external virtual onlyOwner {\\n        for (uint256 i = 0; i < guardiansClasses[oldGuardian].length; i++) {\\n            _copyGuardianClass(oldGuardian, newGuardian, i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function for the guardian to set item(s) to be flagged for repossession.\\n     * @param collection Collection that contains the item to be repossessed.\\n     * @param itemId Id of item(s) being reposessed.\\n     * @param owner Current owner of the item(s).\\n     */\\n    function setItemsToRepossessed(\\n        IERC11554K collection,\\n        uint256 itemId,\\n        address owner\\n    ) external {\\n        if (whereItemStored[collection][itemId] != _msgSender()) {\\n            revert NotGuardianOfItems();\\n        }\\n        if (getGuardianFeeRateByCollectionItem(collection, itemId) == 0) {\\n            revert FreeStorageItemsCantBeRepossessed();\\n        }\\n        if (\\n            guardianFeePaidUntil[owner][collection][itemId] >= block.timestamp\\n        ) {\\n            revert GuardianFeePaidUntilStillInFuture();\\n        }\\n\\n        uint256 currAmount = IERC11554K(collection).balanceOf(owner, itemId);\\n        if (currAmount == 0) {\\n            revert NoItemsToRepossess();\\n        }\\n\\n        uint256 prevInReposession = inRepossession[owner][collection][itemId];\\n        inRepossession[owner][collection][itemId] = currAmount;\\n\\n        emit SetForRepossession(\\n            itemId,\\n            collection,\\n            _msgSender(),\\n            currAmount - prevInReposession\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets activity mode for the guardian. Either active or not.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose activity mode will be set.\\n     * @param activity Boolean for guardian activity mode.\\n     */\\n    function setActivity(\\n        address guardian,\\n        bool activity\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].isActive = activity;\\n        emit GuardianModified(guardian, 5, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets privacy mode for the guardian. Either public false or private true.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose privacy mode will be set.\\n     * @param privacy Boolean for guardian privacy mode.\\n     */\\n    function setPrivacy(\\n        address guardian,\\n        bool privacy\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].isPrivate = privacy;\\n        emit GuardianModified(guardian, 4, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets logo for the guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian address of guardian whose logo will be set.\\n     * @param logo URI of logo for guardian.\\n     */\\n    function setLogo(\\n        address guardian,\\n        string calldata logo\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].logo = logo;\\n        emit GuardianModified(guardian, 1, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets name for the guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose name will be set.\\n     * @param name Name of guardian.\\n     */\\n    function setName(\\n        address guardian,\\n        string calldata name\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].name = name;\\n        emit GuardianModified(guardian, 2, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets physical address hash for the guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose physical address will be set.\\n     * @param physicalAddressHash Bytes hash of physical address of the guardian.\\n     */\\n    function setPhysicalAddressHash(\\n        address guardian,\\n        bytes32 physicalAddressHash\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].addressHash = physicalAddressHash;\\n        emit GuardianModified(guardian, 0, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets policy for the guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose policy will be set.\\n     * @param policy Guardian policy.\\n     */\\n    function setPolicy(\\n        address guardian,\\n        string calldata policy\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].policy = policy;\\n        emit GuardianModified(guardian, 4, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Sets redirects for the guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose redirect URI will be set.\\n     * @param redirect Redirect URI for guardian.\\n     */\\n    function setRedirect(\\n        address guardian,\\n        string calldata redirect\\n    ) external onlyWhitelisted(guardian) ifNotOwnerGuardianIsCaller(guardian) {\\n        guardianInfo[guardian].redirect = redirect;\\n        emit GuardianModified(guardian, 3, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Adds or removes users addresses to guardian whitelist.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian whose users whitelist status will be modified.\\n     * @param users Array of user addresses whose whitelist status will be modified.\\n     * @param whitelistStatus Boolean for the whitelisted status of the users.\\n     */\\n    function changeWhitelistUsersStatus(\\n        address guardian,\\n        address[] calldata users,\\n        bool whitelistStatus\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        for (uint256 i = 0; i < users.length; ++i) {\\n            guardianWhitelist[guardian][users[i]] = whitelistStatus;\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes guardian from the whitelist.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param guardian address of guardian who will be removed.\\n     */\\n    function removeGuardian(address guardian) external virtual onlyOwner {\\n        isWhitelisted[guardian] = false;\\n        guardianInfo[guardian].isActive = false;\\n        emit GuardianRemoved(guardian);\\n    }\\n\\n    /**\\n     * @notice Sets minting fee for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or the owner.\\n     * @param guardian Address of the guardian whose guardian class minting fee will be modified.\\n     * @param classID Guardian's guardian class index whose minting fee will be modified.\\n     * @param mintingFee New minting fee. Minting fee must be passed as already scaled by 10^18 from real life value.\\n     */\\n    function setGuardianClassMintingFee(\\n        address guardian,\\n        uint256 classID,\\n        uint256 mintingFee\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        if (mintingFee < minimumRequestFee) {\\n            revert MintingFeeTooLow();\\n        }\\n        guardiansClasses[guardian][classID].mintingFee = mintingFee;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            1,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets redemption fee for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or the owner\\n     * @param guardian Address of the guardian whose guardian class redemption fee will be modified.\\n     * @param classID Guardian's guardian class index whose redemption fee will be modified.\\n     * @param redemptionFee New redemption fee. Redemption fee must be passed as already scaled by 10^18 from real life value.\\n     */\\n    function setGuardianClassRedemptionFee(\\n        address guardian,\\n        uint256 classID,\\n        uint256 redemptionFee\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        guardiansClasses[guardian][classID].redemptionFee = redemptionFee;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            2,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets Guardian fee rate for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or the owner.\\n     * @param guardian Address of the guardian whose guardian class guardian fee rate will be modified.\\n     * @param classID Guardian's guardian class index whose guardian fee rate  will be modified.\\n     * @param guardianFeeRate New guardian fee rate. Guardain fee rate must be passed as already scaled by 10^18 from real life value.\\n     */\\n    function setGuardianClassGuardianFeeRate(\\n        address guardian,\\n        uint256 classID,\\n        uint256 guardianFeeRate\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        _setGuardianClassGuardianFeeRate(\\n            guardian,\\n            classID,\\n            guardianFeeRate,\\n            guardiansClasses[guardian][classID].guardianFeeRatePeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets Guardian fee rate and guardian fee rate period for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or the owner.\\n     * @param guardian Address of the guardian whose guardian class guardian fee rate will be modified.\\n     * @param classID Guardian's guardian class index whose guardian fee rate  will be modified.\\n     * @param guardianFeeRatePeriod New guardian fee rate period.\\n     * @param guardianFeeRate New guardian fee rate. Guardain fee rate must be passed as already scaled by 10^18 from real life value.\\n     */\\n    function setGuardianClassGuardianFeePeriodAndRate(\\n        address guardian,\\n        uint256 classID,\\n        GuardianFeeRatePeriods guardianFeeRatePeriod,\\n        uint256 guardianFeeRate\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        uint256 newPeriodMultiple;\\n        if (guardianFeeRatePeriod == GuardianFeeRatePeriods.SECONDS) {\\n            newPeriodMultiple = SECOND;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.MINUTES) {\\n            newPeriodMultiple = MINUTE;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.HOURS) {\\n            newPeriodMultiple = HOUR;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.DAYS) {\\n            newPeriodMultiple = DAY;\\n        }\\n        if (\\n            guardiansClasses[guardian][classID].guardianFeeRatePeriod ==\\n            newPeriodMultiple\\n        ) {\\n            revert DifferentPeriodRequired();\\n        }\\n        _setGuardianClassGuardianFeeRate(\\n            guardian,\\n            classID,\\n            guardianFeeRate,\\n            newPeriodMultiple\\n        );\\n\\n        guardiansClasses[guardian][classID]\\n            .guardianFeeRatePeriod = newPeriodMultiple;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            3,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets URI for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or owner.\\n     * @param guardian Address of the guardian whose guardian class URI will be modified.\\n     * @param classID Guardian's guardian class index whose class URI will be modified.\\n     * @param uri New URI.\\n     */\\n    function setGuardianClassURI(\\n        address guardian,\\n        uint256 classID,\\n        string calldata uri\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        guardiansClasses[guardian][classID].uri = uri;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            8,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets guardian class as active or not active by guardian or owner\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or owner.\\n     * @param guardian Address of the guardian whose guardian class active status will be modified.\\n     * @param classID Guardian's guardian class index whose guardian class active status will be modified.\\n     * @param activeStatus New guardian class active status.\\n     */\\n    function setGuardianClassActiveStatus(\\n        address guardian,\\n        uint256 classID,\\n        bool activeStatus\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        guardiansClasses[guardian][classID].isActive = activeStatus;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            7,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets maximum insurance coverage for guardian class by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian.\\n     * @param guardian Address of the guardian whose guardian class maximum coverage will be modified.\\n     * @param classID Guardian's guardian class index whose guardian class maximum coverage will be modified.\\n     * @param maximumCoverage New guardian class maximum coverage.\\n     */\\n    function setGuardianClassMaximumCoverage(\\n        address guardian,\\n        uint256 classID,\\n        uint256 maximumCoverage\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n    {\\n        guardiansClasses[guardian][classID].maximumCoverage = maximumCoverage;\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            0,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the version of the contract.\\n     * @param version_ New version of contract.\\n     */\\n    function setVersion(bytes32 version_) external virtual onlyOwner {\\n        version = version_;\\n    }\\n\\n    /**\\n     * @dev Externally called store item function by controller to update Guardian fees on token transfer. Complex logic needed for semi-fungibles.\\n     * @param from Address of entity sending token(s).\\n     * @param to Address of entity receiving token(s).\\n     * @param id Token id of token(s) being sent.\\n     * @param amount Amount of tokens being sent.\\n     */\\n    function shiftGuardianFeesOnTokenMove(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external virtual {\\n        if (\\n            !controller.isActiveCollection(_msgSender()) ||\\n            !controller.isLinkedCollection(_msgSender())\\n        ) {\\n            revert CollectionIsNotActiveOrLinked();\\n        }\\n        IERC11554K collection = IERC11554K(_msgSender());\\n\\n        uint256 guardianClassFeeRate = getGuardianFeeRateByCollectionItem(\\n            collection,\\n            id\\n        );\\n\\n        uint256 guardianClassFeeRatePeriod = getGuardianFeeRatePeriodByCollectionItem(\\n                collection,\\n                id\\n            );\\n\\n        uint256 guardianFeeShiftAmount = GuardianTimeMath\\n            .calculateRemainingFeeAmount(\\n                guardianFeePaidUntil[from][collection][id],\\n                guardianClassFeeRate,\\n                guardianClassFeeRatePeriod,\\n                amount\\n            );\\n\\n        uint256 remainingFeeAmountFrom = GuardianTimeMath\\n            .calculateRemainingFeeAmount(\\n                guardianFeePaidUntil[from][collection][id],\\n                guardianClassFeeRate,\\n                guardianClassFeeRatePeriod,\\n                collection.balanceOf(from, id)\\n            );\\n\\n        uint256 remainingFeeAmountTo = GuardianTimeMath\\n            .calculateRemainingFeeAmount(\\n                guardianFeePaidUntil[to][collection][id],\\n                guardianClassFeeRate,\\n                guardianClassFeeRatePeriod,\\n                collection.balanceOf(to, id)\\n            );\\n\\n        // Recalculate the remaining time with new params for FROM\\n        uint256 newAmountFrom = collection.balanceOf(from, id) - amount;\\n        if (newAmountFrom == 0) {\\n            guardianFeePaidUntil[from][collection][id] = 0; //default\\n        } else {\\n            guardianFeePaidUntil[from][collection][id] =\\n                block.timestamp +\\n                GuardianTimeMath.calculateAddedGuardianTime(\\n                    remainingFeeAmountFrom - guardianFeeShiftAmount,\\n                    guardianClassFeeRate,\\n                    guardianClassFeeRatePeriod,\\n                    newAmountFrom\\n                );\\n        }\\n\\n        // Recalculate the remaining time with new params for TO\\n        uint256 newAmountTo = collection.balanceOf(to, id) + amount;\\n        guardianFeePaidUntil[to][collection][id] =\\n            block.timestamp +\\n            GuardianTimeMath.calculateAddedGuardianTime(\\n                remainingFeeAmountTo + guardianFeeShiftAmount,\\n                guardianClassFeeRate,\\n                guardianClassFeeRatePeriod,\\n                newAmountTo\\n            );\\n    }\\n\\n    /**\\n     * @notice Adds guardian class to guardian by guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a whitelisted guardian or contract owner.\\n     * @param guardian Address of guardian who is adding a new class.\\n     * @param maximumCoverage Max coverage of new guardian class.\\n     * @param mintingFee Minting fee of new guardian class. Minting fee must be passed as already scaled by 10^18 from real life value.\\n     * @param redemptionFee Redemption fee of new guardian class. Redemption fee must be passed as already scaled by 10^18 from real life value.\\n     * @param guardianFeeRate Guardian fee rate of new guardian class. Guardian fee rate must be passed as already scaled by 10^18 from real life value.\\n     * @param guardianFeeRatePeriod The size of the period unit for the guardian fee rate: per second, minute, hour, or day.\\n     */\\n    function addGuardianClass(\\n        address guardian,\\n        uint256 maximumCoverage,\\n        uint256 mintingFee,\\n        uint256 redemptionFee,\\n        uint256 guardianFeeRate,\\n        GuardianFeeRatePeriods guardianFeeRatePeriod,\\n        string calldata uri\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted(guardian)\\n        ifNotOwnerGuardianIsCaller(guardian)\\n        returns (uint256 classID)\\n    {\\n        classID = _addGuardianClass(\\n            guardian,\\n            maximumCoverage,\\n            mintingFee,\\n            redemptionFee,\\n            guardianFeeRate,\\n            guardianFeeRatePeriod,\\n            uri\\n        );\\n    }\\n\\n    /**\\n     * @notice Registers guardian.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param guardian Address of the new guardian.\\n     * @param name Name of new guardian.\\n     * @param logo URI of new guardian logo.\\n     * @param policy Policy of new guardian.\\n     * @param redirect Redirect URI of new guardian.\\n     * @param physicalAddressHash physical address hash of new guardian.\\n     * @param privacy Boolean - is the new guardian private or not.\\n     */\\n    function registerGuardian(\\n        address guardian,\\n        string calldata name,\\n        string calldata logo,\\n        string calldata policy,\\n        string calldata redirect,\\n        bytes32 physicalAddressHash,\\n        bool privacy\\n    ) external virtual {\\n        guardianInfo[guardian].isActive = true;\\n        guardianInfo[guardian].name = name;\\n        guardianInfo[guardian].logo = logo;\\n        guardianInfo[guardian].policy = policy;\\n        guardianInfo[guardian].isPrivate = privacy;\\n        guardianInfo[guardian].redirect = redirect;\\n        guardianInfo[guardian].addressHash = physicalAddressHash;\\n        addGuardian(guardian);\\n        emit GuardianRegistered(guardian, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Delegates whole minting/redemption for all or single collection to `delegatee`\\n     * @param delegatee Address to which the calling guardian will delegate to.\\n     * @param collection If not zero address, then delegates processes only for this collection.\\n     */\\n    function delegate(\\n        address delegatee,\\n        IERC11554K collection\\n    ) external virtual onlyWhitelisted(_msgSender()) {\\n        if (address(collection) == address(0)) {\\n            delegatedAll[_msgSender()][delegatee] = true;\\n        } else {\\n            delegatedCollection[_msgSender()][collection] = delegatee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Undelegates whole minting/redemption for all or single collection from `delegatee`\\n     * @param delegatee Address to which the calling guardian will undelegate from.\\n     * @param collection If not zero address, then undelegates processes only for this collection.\\n     */\\n    function undelegate(\\n        address delegatee,\\n        IERC11554K collection\\n    ) external virtual onlyWhitelisted(_msgSender()) {\\n        if (address(collection) == address(0)) {\\n            delegatedAll[_msgSender()][delegatee] = false;\\n        } else {\\n            delegatedCollection[_msgSender()][collection] = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Queries if the amount of guardian fee provided purchases the minimum guardian time for a particular guardian class.\\n     * @param guardianFeeAmount the amount of guardian fee being queried.\\n     * @param numItems Number of total items the guardian would be storing.\\n     * @param guardian Address of the guardian that would be doing the storing.\\n     * @param guardianClassIndex Index of guardian class that would be doing the storing.\\n     */\\n    function isFeeAboveMinimum(\\n        uint256 guardianFeeAmount,\\n        uint256 numItems,\\n        address guardian,\\n        uint256 guardianClassIndex\\n    ) external view virtual returns (bool) {\\n        uint256 guardianClassFeeRate = getGuardianFeeRate(\\n            guardian,\\n            guardianClassIndex\\n        );\\n        uint256 guardianFeeRatePeriod = getGuardianFeeRatePeriod(\\n            guardian,\\n            guardianClassIndex\\n        );\\n\\n        if (guardianClassFeeRate == 0) {\\n            revert GuardianClassFeeRateTooLow();\\n        }\\n\\n        return\\n            minStorageTime <=\\n            GuardianTimeMath.calculateAddedGuardianTime(\\n                guardianFeeAmount,\\n                guardianClassFeeRate,\\n                guardianFeeRatePeriod,\\n                numItems\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns guardian class redemption fee.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @param classID Guardian's guardian class index being queried.\\n     * @return redemptionFee Guardian class's redemption fee. Returns scaled by 10^18 real life value.\\n     */\\n    function getRedemptionFee(\\n        address guardian,\\n        uint256 classID\\n    ) external view virtual returns (uint256) {\\n        return guardiansClasses[guardian][classID].redemptionFee;\\n    }\\n\\n    /**\\n     * @notice Returns guardian class minting fee.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @param classID Guardian's guardian class index being queried.\\n     * @return mintingFee Guardian class's minting fee. Returns scaled by 10^18 real life value.\\n     */\\n    function getMintingFee(\\n        address guardian,\\n        uint256 classID\\n    ) external view virtual returns (uint256) {\\n        return guardiansClasses[guardian][classID].mintingFee;\\n    }\\n\\n    /**\\n     * @notice Returns guardian classes number.\\n     * @param guardian Address of guardian whose guardian classes are being queried.\\n     * @return count How many guardian classes the guardian has.\\n     */\\n    function guardianClassesCount(\\n        address guardian\\n    ) external view virtual returns (uint256) {\\n        return guardiansClasses[guardian].length;\\n    }\\n\\n    /**\\n     * @notice Checks if delegator delegated collection handling to delegatee.\\n     * @param collection Delegator guardian address.\\n     * @param delegatee Delegatee address.\\n     * @param collection Collection address.\\n     * @return true if delegated, false otherwise.\\n     */\\n    function isDelegated(\\n        address delegator,\\n        address delegatee,\\n        IERC11554K collection\\n    ) external view virtual returns (bool) {\\n        return\\n            delegatedCollection[delegator][collection] == delegatee ||\\n            delegatedAll[delegator][delegatee];\\n    }\\n\\n    /**\\n     * @notice Adds guardian to the whitelist.\\n     *\\n     * Requirements:\\n     *\\n     * 1) The caller must be a contract owner.\\n     * @param guardian Address of the new guardian.\\n     */\\n    function addGuardian(address guardian) public virtual onlyOwner {\\n        isWhitelisted[guardian] = true;\\n        guardianInfo[guardian].isActive = true;\\n        emit GuardianAdded(guardian, guardianInfo[guardian]);\\n    }\\n\\n    /**\\n     * @notice Anyone can add Guardian fees to a guardian holding an item.\\n     * @param collection Address of the collection the item belongs to.\\n     * @param beneficiary The address of the holder of the item.\\n     * @param itemId Id of the item.\\n     * @param guardianFeeAmount The amount of guardian fee being paid.\\n     */\\n    function addStorageTime(\\n        IERC11554K collection,\\n        address beneficiary,\\n        uint256 itemId,\\n        uint256 guardianFeeAmount\\n    ) public virtual {\\n        uint256 currAmount = collection.balanceOf(beneficiary, itemId);\\n\\n        address guardian = whereItemStored[collection][itemId];\\n        uint256 guardianClassIndex = itemGuardianClass[collection][itemId];\\n\\n        uint256 guardianClassFeeRate = getGuardianFeeRate(\\n            guardian,\\n            guardianClassIndex\\n        );\\n        if (guardianClassFeeRate == 0) {\\n            revert GuardianClassFeeRateTooLow();\\n        }\\n        if (guardianFeeAmount == 0) {\\n            revert GuardianFeeTooLow();\\n        }\\n        if (currAmount == 0) {\\n            revert BeneficiaryDoesNotOwnItem();\\n        }\\n        if (guardian == address(0)) {\\n            revert GuardianDoesNotStoreItem();\\n        }\\n        {\\n            uint256 addedStorageTime = GuardianTimeMath\\n                .calculateAddedGuardianTime(\\n                    guardianFeeAmount,\\n                    guardianClassFeeRate,\\n                    getGuardianFeeRatePeriod(guardian, guardianClassIndex),\\n                    currAmount\\n                );\\n\\n            guardianFeePaidUntil[beneficiary][collection][\\n                itemId\\n            ] += addedStorageTime;\\n            emit StorageTimeAdded(\\n                itemId,\\n                guardian,\\n                addedStorageTime,\\n                beneficiary,\\n                collection\\n            );\\n        }\\n\\n        feesManager.payGuardianFee(\\n            guardianFeeAmount,\\n            (guardianClassFeeRate * currAmount) /\\n                getGuardianFeeRatePeriod(guardian, guardianClassIndex),\\n            guardian,\\n            guardianFeePaidUntil[beneficiary][collection][itemId],\\n            _msgSender(),\\n            controller.paymentToken()\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns guardian class guardian fee rate of the stored item in collection with  itemId.\\n     * @param collection Address of the collection where the item being queried belongs to.\\n     * @param itemId Item id of item whose guardian fee rate is being queried.\\n     * @return guardianFeeRate Fee rate of the item being queried (of guardian class it's in). Returns scaled by 10^18 real life value.\\n     */\\n    function getGuardianFeeRateByCollectionItem(\\n        IERC11554K collection,\\n        uint256 itemId\\n    ) public view virtual returns (uint256) {\\n        if (collection.totalSupply(itemId) == 0) {\\n            revert ItemNotYetMinted();\\n        }\\n        return\\n            guardiansClasses[whereItemStored[collection][itemId]][\\n                itemGuardianClass[collection][itemId]\\n            ].guardianFeeRate;\\n    }\\n\\n    /**\\n     * @notice Returns guardian class guardian fee rate period size of the stored item in collection with  itemId.\\n     * @param collection Address of the collection where the item being queried belongs to.\\n     * @param itemId Item id of item whose guardian fee rate is being queried.\\n     * @return guardianFeeRatePeriod Size of the item being queried (of guardian class it's in).\\n     */\\n    function getGuardianFeeRatePeriodByCollectionItem(\\n        IERC11554K collection,\\n        uint256 itemId\\n    ) public view virtual returns (uint256) {\\n        if (collection.totalSupply(itemId) == 0) {\\n            revert ItemNotYetMinted();\\n        }\\n        return\\n            guardiansClasses[whereItemStored[collection][itemId]][\\n                itemGuardianClass[collection][itemId]\\n            ].guardianFeeRatePeriod;\\n    }\\n\\n    /**\\n     * @notice Returns true if the guardian is active and whitelisted.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @return boolean Is the guardian active and whitelisted.\\n     */\\n    function isAvailable(address guardian) public view returns (bool) {\\n        return isWhitelisted[guardian] && guardianInfo[guardian].isActive;\\n    }\\n\\n    /**\\n     * @notice Returns guardian class classID guardian fee rate.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @param classID Guardian's class index for class being queried.\\n     * @return guardianFeeRate The guardian class guardian fee rate. Returns scaled by 10^18 real life value.\\n     */\\n    function getGuardianFeeRate(\\n        address guardian,\\n        uint256 classID\\n    ) public view virtual returns (uint256) {\\n        return guardiansClasses[guardian][classID].guardianFeeRate;\\n    }\\n\\n    /**\\n     * @notice Returns guardian class classID guardian fee rate period size.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @param classID Guardian's class index for class being queried.\\n     * @return guardianFeeRatePeriod The unit of time for the guardian fee rate.\\n     */\\n    function getGuardianFeeRatePeriod(\\n        address guardian,\\n        uint256 classID\\n    ) public view virtual returns (uint256) {\\n        return guardiansClasses[guardian][classID].guardianFeeRatePeriod;\\n    }\\n\\n    /**\\n     * @notice Returns guardian class classID activity true/false.\\n     * @param guardian Address of guardian whose guardian class is being queried.\\n     * @param classID Guardian's class index for class being queried.\\n     * @return activeStatus Boolean - is the class active or not.\\n     */\\n    function isClassActive(\\n        address guardian,\\n        uint256 classID\\n    ) public view virtual returns (bool) {\\n        return guardiansClasses[guardian][classID].isActive;\\n    }\\n\\n    /**\\n     * @dev Internal call, adds guardian class.\\n     */\\n    function _addGuardianClass(\\n        address guardian,\\n        uint256 maximumCoverage,\\n        uint256 mintingFee,\\n        uint256 redemptionFee,\\n        uint256 guardianFeeRate,\\n        GuardianFeeRatePeriods guardianFeeRatePeriod,\\n        string calldata uri\\n    ) internal virtual returns (uint256 classID) {\\n        classID = guardiansClasses[guardian].length;\\n\\n        uint256 periodMultiple;\\n        if (guardianFeeRatePeriod == GuardianFeeRatePeriods.SECONDS) {\\n            periodMultiple = SECOND;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.MINUTES) {\\n            periodMultiple = MINUTE;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.HOURS) {\\n            periodMultiple = HOUR;\\n        } else if (guardianFeeRatePeriod == GuardianFeeRatePeriods.DAYS) {\\n            periodMultiple = DAY;\\n        }\\n\\n        guardiansClasses[guardian].push(\\n            GuardianClass(\\n                maximumCoverage,\\n                mintingFee,\\n                redemptionFee,\\n                periodMultiple,\\n                guardianFeeRate,\\n                guardianFeeRate,\\n                block.timestamp,\\n                true,\\n                uri\\n            )\\n        );\\n        emit GuardianClassAdded(\\n            guardian,\\n            classID,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal call, copies an ENTIRE guardian class from one guardian to another. Note: same data but DIFFERENT index.\\n     */\\n    function _copyGuardianClass(\\n        address oldGuardian,\\n        address newGuardian,\\n        uint256 oldGuardianClassIndex\\n    ) internal returns (uint256 classID) {\\n        classID = guardiansClasses[newGuardian].length;\\n        guardiansClasses[newGuardian].push(\\n            GuardianClass(\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .maximumCoverage,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex].mintingFee,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .redemptionFee,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .guardianFeeRatePeriod,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .guardianFeeRate,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .guardianFeeRateMinimum,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex]\\n                    .lastGuardianFeeRateIncrease,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex].isActive,\\n                guardiansClasses[oldGuardian][oldGuardianClassIndex].uri\\n            )\\n        );\\n        emit GuardianClassAdded(\\n            newGuardian,\\n            classID,\\n            guardiansClasses[newGuardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal call, sets a new guardian class guardian fee rate, with several checks. Compensates for a different period multiple\\n     */\\n    function _setGuardianClassGuardianFeeRate(\\n        address guardian,\\n        uint256 classID,\\n        uint256 guardianFeeRate,\\n        uint256 newPeriodMultiple\\n    ) internal virtual {\\n        if (guardianFeeRate == 0) {\\n            revert GuardianClassFeeRateTooLow();\\n        }\\n\\n        if (guardiansClasses[guardian][classID].guardianFeeRate == 0) {\\n            revert GuardianFeeNotChangeableOnFreeStorageClass();\\n        }\\n\\n        uint256 currentPeriodMultiple = guardiansClasses[guardian][classID]\\n            .guardianFeeRatePeriod;\\n        if (\\n            (guardianFeeRate / newPeriodMultiple) >\\n            (guardiansClasses[guardian][classID].guardianFeeRate /\\n                currentPeriodMultiple)\\n        ) {\\n            if (\\n                block.timestamp <\\n                guardiansClasses[guardian][classID]\\n                    .lastGuardianFeeRateIncrease +\\n                    guardianFeeSetWindow\\n            ) {\\n                revert GuardianFeeWindowHasntPassed();\\n            }\\n\\n            if (\\n                (guardianFeeRate / newPeriodMultiple) >\\n                (guardiansClasses[guardian][classID].guardianFeeRate *\\n                    maximumGuardianFeeSet) /\\n                    (currentPeriodMultiple * PERCENTAGE_FACTOR)\\n            ) {\\n                revert GuardianFeeRateLimitExceeded();\\n            }\\n\\n            guardiansClasses[guardian][classID]\\n                .lastGuardianFeeRateIncrease = block.timestamp;\\n        }\\n        guardiansClasses[guardian][classID].guardianFeeRate = guardianFeeRate;\\n        if (\\n            (guardianFeeRate / newPeriodMultiple) <\\n            (guardiansClasses[guardian][classID].guardianFeeRateMinimum /\\n                currentPeriodMultiple)\\n        ) {\\n            guardiansClasses[guardian][classID]\\n                .guardianFeeRateMinimum = guardianFeeRate;\\n        }\\n        emit GuardianClassModified(\\n            guardian,\\n            classID,\\n            4,\\n            guardiansClasses[guardian][classID]\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal call that is done on each item token redeem to\\n     * relaculate paid storage time, guardian fees.\\n     */\\n    function _shiftGuardianFeesOnTokenRedeem(\\n        address from,\\n        IERC11554K collection,\\n        uint256 id,\\n        uint256 redeemAmount,\\n        uint256 guardianClassFeeRate,\\n        uint256 guardianFeeRatePeriod\\n    ) internal virtual returns (uint256) {\\n        // Recalculate the remaining time with new params\\n        uint256 bal = IERC11554K(collection).balanceOf(from, id);\\n        // Total fee that remains\\n        uint256 remainingFeeAmount = GuardianTimeMath\\n            .calculateRemainingFeeAmount(\\n                guardianFeePaidUntil[from][collection][id],\\n                guardianClassFeeRate,\\n                guardianFeeRatePeriod,\\n                bal\\n            );\\n\\n        // Portion of fee we're giving back, for refund.\\n        uint256 guardianFeeRefundAmount = GuardianTimeMath\\n            .calculateRemainingFeeAmount(\\n                guardianFeePaidUntil[from][collection][id],\\n                guardianClassFeeRate,\\n                guardianFeeRatePeriod,\\n                redeemAmount\\n            );\\n\\n        if (bal - redeemAmount == 0) {\\n            guardianFeePaidUntil[from][collection][id] = 0; //back to default,0\\n        } else {\\n            uint256 recalculatedTime = GuardianTimeMath\\n                .calculateAddedGuardianTime(\\n                    remainingFeeAmount - guardianFeeRefundAmount,\\n                    guardianClassFeeRate,\\n                    guardianFeeRatePeriod,\\n                    bal - redeemAmount\\n                );\\n            guardianFeePaidUntil[from][collection][id] =\\n                block.timestamp +\\n                recalculatedTime;\\n        }\\n        return guardianFeeRefundAmount;\\n    }\\n\\n    function _moveSingleItem(\\n        IERC11554K collection,\\n        uint256 itemId,\\n        address oldGuardian,\\n        address newGuardian,\\n        uint256 newGuardianClassIndex\\n    ) internal virtual {\\n        uint256 amount = stored[oldGuardian][collection][itemId];\\n        stored[oldGuardian][collection][itemId] = 0;\\n        stored[newGuardian][collection][itemId] += amount;\\n        whereItemStored[collection][itemId] = newGuardian;\\n        itemGuardianClass[collection][itemId] = newGuardianClassIndex;\\n\\n        emit ItemMoved(\\n            oldGuardian,\\n            newGuardian,\\n            newGuardianClassIndex,\\n            itemId,\\n            collection\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC11554K.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IGuardians.sol\\\";\\n\\n/**\\n * @dev {IERC11554K} interface:\\n */\\ninterface IERC11554K {\\n    function controllerMint(\\n        address mintAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function controllerBurn(\\n        address burnAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function setGuardians(IGuardians guardians_) external;\\n\\n    function setURI(string calldata newuri) external;\\n\\n    function setCollectionURI(string calldata collectionURI_) external;\\n\\n    function setVerificationStatus(bool _isVerified) external;\\n\\n    function setGlobalRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    function owner() external view returns (address);\\n\\n    function balanceOf(\\n        address user,\\n        uint256 item\\n    ) external view returns (uint256);\\n\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (address, uint256);\\n\\n    function totalSupply(uint256 _tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC11554KController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC11554K.sol\\\";\\nimport \\\"./IGuardians.sol\\\";\\n\\n/**\\n * @dev {IERC11554KController} interface:\\n */\\ninterface IERC11554KController {\\n    /// @dev Batch minting request data structure.\\n    struct BatchRequestMintData {\\n        /// @dev Collection address.\\n        IERC11554K collection;\\n        /// @dev Item id.\\n        uint256 id;\\n        /// @dev Guardian address.\\n        address guardianAddress;\\n        /// @dev Amount to mint.\\n        uint256 amount;\\n        /// @dev Service fee to guardian.\\n        uint256 serviceFee;\\n        /// @dev Is item supply expandable.\\n        bool isExpandable;\\n        /// @dev Recipient address.\\n        address mintAddress;\\n        /// @dev Guardian class index.\\n        uint256 guardianClassIndex;\\n        /// @dev Guardian fee amount to pay.\\n        uint256 guardianFeeAmount;\\n    }\\n\\n    function requestMint(\\n        IERC11554K collection,\\n        uint256 id,\\n        address guardian,\\n        uint256 amount,\\n        uint256 serviceFee,\\n        bool expandable,\\n        address mintAddress,\\n        uint256 guardianClassIndex,\\n        uint256 guardianFeeAmount\\n    ) external returns (uint256);\\n\\n    function mint(IERC11554K collection, uint256 id) external;\\n\\n    function owner() external returns (address);\\n\\n    function originators(\\n        address collection,\\n        uint256 tokenId\\n    ) external returns (address);\\n\\n    function isActiveCollection(address collection) external returns (bool);\\n\\n    function isLinkedCollection(address collection) external returns (bool);\\n\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    function maxMintPeriod() external returns (uint256);\\n\\n    function remediationBurn(\\n        IERC11554K collection,\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function setMaxMintPeriod(uint256 maxMintPeriod_) external;\\n\\n    function setRemediator(address _remediator) external;\\n\\n    function setCollectionFee(uint256 collectionFee_) external;\\n\\n    function setBeneficiary(address beneficiary_) external;\\n\\n    function setGuardians(IGuardians guardians_) external;\\n\\n    function setPaymentToken(IERC20Upgradeable paymentToken_) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setVersion(bytes32 version_) external;\\n\\n    function guardians() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC11554K.sol\\\";\\nimport \\\"./IGuardians.sol\\\";\\nimport \\\"./IERC11554KController.sol\\\";\\n\\n/**\\n * @dev {IFeesManager} interface:\\n */\\ninterface IFeesManager {\\n    function receiveFees(\\n        IERC11554K erc11554k,\\n        uint256 id,\\n        IERC20Upgradeable asset,\\n        uint256 _salePrice\\n    ) external;\\n\\n    function calculateTotalFee(\\n        IERC11554K erc11554k,\\n        uint256 id,\\n        uint256 _salePrice\\n    ) external returns (uint256);\\n\\n    function payGuardianFee(\\n        uint256 guardianFeeAmount,\\n        uint256 guardianClassFeeRateMultiplied,\\n        address guardian,\\n        uint256 storagePaidUntil,\\n        address payer,\\n        IERC20Upgradeable paymentAsset\\n    ) external;\\n\\n    function refundGuardianFee(\\n        uint256 guardianFeeAmount,\\n        uint256 guardianClassFeeRateMultiplied,\\n        address guardian,\\n        uint256 storagePaidUntil,\\n        address recipient,\\n        IERC20Upgradeable paymentAsset\\n    ) external;\\n\\n    function moveFeesBetweenGuardians(\\n        address guardianFrom,\\n        address guardianTo,\\n        IERC20Upgradeable asset\\n    ) external;\\n\\n    function setGuardians(IGuardians guardians_) external;\\n\\n    function setController(IERC11554KController controller_) external;\\n\\n    function setGlobalTradingFee(uint256 globalTradingFee_) external;\\n\\n    function setTradingFeeSplit(\\n        uint256 protocolSplit,\\n        uint256 guardianSplit\\n    ) external;\\n\\n    function setExchange(address exchange_) external;\\n\\n    function setVersion(bytes32 version_) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGuardians.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC11554K.sol\\\";\\nimport \\\"./IERC11554KController.sol\\\";\\nimport \\\"./IFeesManager.sol\\\";\\n\\n/**\\n * @dev {IGuardians} interface:\\n */\\ninterface IGuardians {\\n    enum GuardianFeeRatePeriods {\\n        SECONDS,\\n        MINUTES,\\n        HOURS,\\n        DAYS\\n    }\\n\\n    function controllerStoreItem(\\n        IERC11554K collection,\\n        address mintAddress,\\n        uint256 id,\\n        address guardian,\\n        uint256 guardianClassIndex,\\n        uint256 guardianFeeAmount,\\n        uint256 numItems,\\n        address feePayer,\\n        IERC20Upgradeable paymentAsset\\n    ) external;\\n\\n    function controllerTakeItemOut(\\n        address guardian,\\n        IERC11554K collection,\\n        uint256 id,\\n        uint256 numItems,\\n        address from\\n    ) external;\\n\\n    function shiftGuardianFeesOnTokenMove(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function setController(IERC11554KController controller_) external;\\n\\n    function setFeesManager(IFeesManager feesManager_) external;\\n\\n    function setMinStorageTime(uint256 minStorageTime_) external;\\n\\n    function setMinimumRequestFee(uint256 minimumRequestFee_) external;\\n\\n    function setMaximumGuardianFeeSet(uint256 maximumGuardianFeeSet_) external;\\n\\n    function setGuardianFeeSetWindow(uint256 guardianFeeSetWindow_) external;\\n\\n    function moveItems(\\n        IERC11554K collection,\\n        uint256[] calldata ids,\\n        address oldGuardian,\\n        address newGuardian,\\n        uint256[] calldata newGuardianClassIndeces\\n    ) external;\\n\\n    function copyGuardianClasses(\\n        address oldGuardian,\\n        address newGuardian\\n    ) external;\\n\\n    function setActivity(address guardian, bool activity) external;\\n\\n    function setPrivacy(address guardian, bool privacy) external;\\n\\n    function setLogo(address guardian, string calldata logo) external;\\n\\n    function setName(address guardian, string calldata name) external;\\n\\n    function setPhysicalAddressHash(\\n        address guardian,\\n        bytes32 physicalAddressHash\\n    ) external;\\n\\n    function setPolicy(address guardian, string calldata policy) external;\\n\\n    function setRedirect(address guardian, string calldata redirect) external;\\n\\n    function changeWhitelistUsersStatus(\\n        address guardian,\\n        address[] calldata users,\\n        bool whitelistStatus\\n    ) external;\\n\\n    function removeGuardian(address guardian) external;\\n\\n    function setGuardianClassMintingFee(\\n        address guardian,\\n        uint256 classID,\\n        uint256 mintingFee\\n    ) external;\\n\\n    function setGuardianClassRedemptionFee(\\n        address guardian,\\n        uint256 classID,\\n        uint256 redemptionFee\\n    ) external;\\n\\n    function setGuardianClassGuardianFeeRate(\\n        address guardian,\\n        uint256 classID,\\n        uint256 guardianFeeRate\\n    ) external;\\n\\n    function setGuardianClassGuardianFeePeriodAndRate(\\n        address guardian,\\n        uint256 classID,\\n        GuardianFeeRatePeriods guardianFeeRatePeriod,\\n        uint256 guardianFeeRate\\n    ) external;\\n\\n    function setGuardianClassURI(\\n        address guardian,\\n        uint256 classID,\\n        string calldata uri\\n    ) external;\\n\\n    function setGuardianClassActiveStatus(\\n        address guardian,\\n        uint256 classID,\\n        bool activeStatus\\n    ) external;\\n\\n    function setGuardianClassMaximumCoverage(\\n        address guardian,\\n        uint256 classID,\\n        uint256 maximumCoverage\\n    ) external;\\n\\n    function addGuardianClass(\\n        address guardian,\\n        uint256 maximumCoverage,\\n        uint256 mintingFee,\\n        uint256 redemptionFee,\\n        uint256 guardianFeeRate,\\n        GuardianFeeRatePeriods guardianFeeRatePeriod,\\n        string calldata uri\\n    ) external;\\n\\n    function registerGuardian(\\n        address guardian,\\n        string calldata name,\\n        string calldata logo,\\n        string calldata policy,\\n        string calldata redirect,\\n        bytes32 physicalAddressHash,\\n        bool privacy\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setVersion(bytes32 version_) external;\\n\\n    function isAvailable(address guardian) external view returns (bool);\\n\\n    function guardianInfo(\\n        address guardian\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            string memory,\\n            string memory,\\n            string memory,\\n            string memory,\\n            bool,\\n            bool\\n        );\\n\\n    function guardianWhitelist(\\n        address guardian,\\n        address user\\n    ) external view returns (bool);\\n\\n    function delegated(address guardian) external view returns (address);\\n\\n    function getRedemptionFee(\\n        address guardian,\\n        uint256 classID\\n    ) external view returns (uint256);\\n\\n    function getMintingFee(\\n        address guardian,\\n        uint256 classID\\n    ) external view returns (uint256);\\n\\n    function isClassActive(\\n        address guardian,\\n        uint256 classID\\n    ) external view returns (bool);\\n\\n    function minStorageTime() external view returns (uint256);\\n\\n    function feesManager() external view returns (address);\\n\\n    function stored(\\n        address guardian,\\n        IERC11554K collection,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function whereItemStored(\\n        IERC11554K collection,\\n        uint256 id\\n    ) external view returns (address);\\n\\n    function itemGuardianClass(\\n        IERC11554K collection,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function guardianFeePaidUntil(\\n        address user,\\n        address collection,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function isFeeAboveMinimum(\\n        uint256 guardianFeeAmount,\\n        uint256 numItems,\\n        address guardian,\\n        uint256 guardianClassIndex\\n    ) external view returns (bool);\\n\\n    function getGuardianFeeRateByCollectionItem(\\n        IERC11554K collection,\\n        uint256 itemId\\n    ) external view returns (uint256);\\n\\n    function getGuardianFeeRate(\\n        address guardian,\\n        uint256 guardianClassIndex\\n    ) external view returns (uint256);\\n\\n    function isWhitelisted(address guardian) external view returns (bool);\\n\\n    function inRepossession(\\n        address user,\\n        IERC11554K collection,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function isDelegated(\\n        address guardian,\\n        address delegatee,\\n        IERC11554K collection\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GuardianTimeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev GuardianTimeMath library. Provides support for converting between guardian fees and purchased storage time\\n */\\nlibrary GuardianTimeMath {\\n    /**\\n     * @dev Calculates the fee amount associated with the items\\n     * scaledByNumItems based on currGuardianFeePaidUntil guardianClassFeeRate\\n     * (scaled by the number being moved, for semi-fungibles).\\n     * @param currGuardianFeePaidUntil a timestamp that describes until when storage has been paid.\\n     * @param guardianClassFeeRate a guardian's guardian fee rate. Amount per second.\\n     * @param scaledByNumItems the number of items that are being stored by a guardian at the time of the query.\\n     * @return the remaining amount of guardian fee that is left within the `currGuardianFeePaidUntil` at the `guardianClassFeeRate` rate for `scaledByNumItems` items\\n     */\\n    function calculateRemainingFeeAmount(\\n        uint256 currGuardianFeePaidUntil,\\n        uint256 guardianClassFeeRate,\\n        uint256 guardianFeeRatePeriod,\\n        uint256 scaledByNumItems\\n    ) internal view returns (uint256) {\\n        if (currGuardianFeePaidUntil <= block.timestamp) {\\n            return 0;\\n        } else {\\n            return ((((currGuardianFeePaidUntil - block.timestamp) *\\n                guardianClassFeeRate) * scaledByNumItems) /\\n                guardianFeeRatePeriod);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates added guardian storage time based on\\n     * guardianFeePaid guardianClassFeeRate and numItems\\n     * (scaled by the number being moved, for semi-fungibles).\\n     * @param guardianFeePaid the amount of guardian fee that is being paid.\\n     * @param guardianClassFeeRate a guardian's guardian fee rate. Amount per time period.\\n     * @param guardianFeeRatePeriod the size of the period used in the guardian fee rate.\\n     * @param numItems the number of items that are being stored by a guardian at the time of the query.\\n     * @return the amount of guardian time that can be purchased from `guardianFeePaid` fee amount at the `guardianClassFeeRate` rate for `numItems` items\\n     */\\n    function calculateAddedGuardianTime(\\n        uint256 guardianFeePaid,\\n        uint256 guardianClassFeeRate,\\n        uint256 guardianFeeRatePeriod,\\n        uint256 numItems\\n    ) internal pure returns (uint256) {\\n        return\\n            (guardianFeePaid * guardianFeeRatePeriod) /\\n            (guardianClassFeeRate * numItems);\\n    }\\n\\n    /**\\n     * @dev Function that allows us to transform an amount from the internal, 18 decimal format, to one that has another decimal precision.\\n     * @param internalAmount the amount in 18 decimal represenation.\\n     * @param toDecimals the amount of decimal precision we want the amount to have\\n     */\\n    function transformDecimalPrecision(\\n        uint256 internalAmount,\\n        uint256 toDecimals\\n    ) internal pure returns (uint256) {\\n        return (internalAmount / (10 ** (18 - toDecimals)));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"BeneficiaryDoesNotOwnItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClassNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionIsNotActiveOrLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DifferentPeriodRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FreeStorageItemsCantBeRepossessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianClassFeeRateTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianDoesNotStoreItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianFeeNotChangeableOnFreeStorageClass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianFeePaidUntilStillInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianFeeRateLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianFeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianFeeWindowHasntPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardianNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemNotYetMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinStorageTimeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingFeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewGuardianUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoItemsToRepossess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCallersGuardianData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGuardianOfItems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OldGuardianAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyReposessionItems\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"addressHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Guardians.GuardianInfo\",\"name\":\"newGuardianInfo\",\"type\":\"tuple\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maximumCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRateMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGuardianFeeRateIncrease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Guardians.GuardianClass\",\"name\":\"newGuardianClass\",\"type\":\"tuple\"}],\"name\":\"GuardianClassAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fieldIndexModified\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maximumCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRateMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGuardianFeeRateIncrease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Guardians.GuardianClass\",\"name\":\"newGuardianClass\",\"type\":\"tuple\"}],\"name\":\"GuardianClassModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fieldIndexModified\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"addressHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Guardians.GuardianInfo\",\"name\":\"newGuardianInfo\",\"type\":\"tuple\"}],\"name\":\"GuardianModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"addressHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Guardians.GuardianInfo\",\"name\":\"newGuardianInfo\",\"type\":\"tuple\"}],\"name\":\"GuardianRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toGuardianClassId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"ItemMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"ItemStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetForRepossession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"StorageTimeAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"enum Guardians.GuardianFeeRatePeriods\",\"name\":\"guardianFeeRatePeriod\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"addGuardianClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeAmount\",\"type\":\"uint256\"}],\"name\":\"addStorageTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"guardianFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"batchAddStorageTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistStatus\",\"type\":\"bool\"}],\"name\":\"changeWhitelistUsersStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IERC11554KController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guardianClassIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numItems\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feePayer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"paymentAsset\",\"type\":\"address\"}],\"name\":\"controllerStoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numItems\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"controllerTakeItemOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"copyGuardianClasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesManager\",\"outputs\":[{\"internalType\":\"contract IFeesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"name\":\"getGuardianFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getGuardianFeeRateByCollectionItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"name\":\"getGuardianFeeRatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getGuardianFeeRatePeriodByCollectionItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"name\":\"getMintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalItemGuardianFeePaidUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"guardianClassesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardianFeePaidUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardianFeeSetWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guardianInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"addressHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guardianWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardiansClasses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumCoverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRateMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGuardianFeeRateIncrease\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inRepossession\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumRequestFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeSetWindow_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumGuardianFeeSet_\",\"type\":\"uint256\"},{\"internalType\":\"contract IFeesManager\",\"name\":\"feesManager_\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554KController\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"version_\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"}],\"name\":\"isClassActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isDelegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"guardianFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numItems\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guardianClassIndex\",\"type\":\"uint256\"}],\"name\":\"isFeeAboveMinimum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemGuardianClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumGuardianFeeSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStorageTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRequestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"newGuardianClassIndeces\",\"type\":\"uint256[]\"}],\"name\":\"moveItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"physicalAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"privacy\",\"type\":\"bool\"}],\"name\":\"registerGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"activity\",\"type\":\"bool\"}],\"name\":\"setActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554KController\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesManager\",\"name\":\"feesManager_\",\"type\":\"address\"}],\"name\":\"setFeesManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activeStatus\",\"type\":\"bool\"}],\"name\":\"setGuardianClassActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"enum Guardians.GuardianFeeRatePeriods\",\"name\":\"guardianFeeRatePeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"}],\"name\":\"setGuardianClassGuardianFeePeriodAndRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFeeRate\",\"type\":\"uint256\"}],\"name\":\"setGuardianClassGuardianFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumCoverage\",\"type\":\"uint256\"}],\"name\":\"setGuardianClassMaximumCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"}],\"name\":\"setGuardianClassMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setGuardianClassRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setGuardianClassURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"guardianFeeSetWindow_\",\"type\":\"uint256\"}],\"name\":\"setGuardianFeeSetWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setItemsToRepossessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"}],\"name\":\"setLogo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumGuardianFeeSet_\",\"type\":\"uint256\"}],\"name\":\"setMaximumGuardianFeeSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStorageTime_\",\"type\":\"uint256\"}],\"name\":\"setMinStorageTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumRequestFee_\",\"type\":\"uint256\"}],\"name\":\"setMinimumRequestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"physicalAddressHash\",\"type\":\"bytes32\"}],\"name\":\"setPhysicalAddressHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"policy\",\"type\":\"string\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privacy\",\"type\":\"bool\"}],\"name\":\"setPrivacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"redirect\",\"type\":\"string\"}],\"name\":\"setRedirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"version_\",\"type\":\"bytes32\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shiftGuardianFeesOnTokenMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"contract IERC11554K\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC11554K\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whereItemStored\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Guardians", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}