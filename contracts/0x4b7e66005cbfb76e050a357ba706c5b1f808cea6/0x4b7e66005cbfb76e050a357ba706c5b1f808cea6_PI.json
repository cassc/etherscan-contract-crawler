{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"PI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n/**\\n * @title Pi (\u03c0)\\n * @dev A simple ERC20 token \\n */\\ncontract PI {\\n    string public name = \\\"Pi\\\";\\n    string public symbol = \\\"PI\\\";\\n    uint256 public constant totalSupply = 3.141592653589793238 * 10 ** 18;\\n    uint8 public constant decimals = 18;\\n    address public taxWallet = 0x21F45093f05Af00deBE824d8b7F981974DD9Fc7E;\\n    uint256 public constant TAX_PERCENT_BASIS = 0;\\n    mapping(address => uint256) private balances;\\n    mapping(address => mapping(address => uint256)) private allowed;\\n    address private _owner;\\n\\n    error TransferToZeroAddress(address _address);\\n    error InsufficientBalance(uint256 _balance, uint256 _value);\\n    error InsufficientAllowance(uint256 _allowance, uint256 _value);\\n\\n    error CallerIsNotTheOwner(address _caller);\\n\\n    /**\\n     * @dev Constructor that sets the initial balance and tax wallet address.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n        balances[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n\\n    /**\\n     * @dev Returns the balance of the given address.\\n     * @param _holder The address to query the balance of.\\n     * @return balance The balance of the specified address.\\n     */\\n    function balanceOf(address _holder) public view returns (uint256 balance) {\\n        return balances[_holder];\\n    }\\n\\n    /**\\n     * @dev Transfers tokens to a specified address after applying the tax, if applicable.\\n     * @param _to The address to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return success A boolean that indicates if the operation was successful.\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        if (_to == address(0)) {\\n            revert TransferToZeroAddress(_to);\\n        }\\n        if (_value > balances[msg.sender]) {\\n            revert InsufficientBalance(balances[msg.sender], _value);\\n        }\\n        (uint256 taxAmount, uint256 taxedAmount) = getTaxedAmount(\\n            _value,\\n            msg.sender == taxWallet\\n        );\\n        balances[msg.sender] -= _value;\\n        balances[taxWallet] += taxAmount; // tax wallet gets the tax amount\\n        balances[_to] += taxedAmount;\\n        emit Transfer(msg.sender, _to, taxedAmount);\\n        emit Transfer(msg.sender, taxWallet, taxAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from one address to another after applying the tax, if applicable.\\n     * @param _from The address which you want to send tokens from.\\n     * @param _to The address which you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return success A boolean that indicates if the operation was successful.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        if (_to == address(0)) {\\n            revert TransferToZeroAddress(_to);\\n        }\\n        if (_value > balances[_from]) {\\n            revert InsufficientBalance(balances[_from], _value);\\n        }\\n        if (_value > allowed[_from][msg.sender]) {\\n            revert InsufficientAllowance(allowed[_from][msg.sender], _value);\\n        }\\n        (uint256 taxAmount, uint256 taxedAmount) = getTaxedAmount(\\n            _value,\\n            _from == taxWallet\\n        );\\n        balances[_from] -= _value;\\n        balances[taxWallet] += taxAmount; // tax wallet gets the tax amount\\n        allowed[_from][msg.sender] -= _value;\\n        balances[_to] += taxedAmount;\\n        emit Transfer(_from, _to, taxedAmount);\\n        emit Transfer(_from, taxWallet, taxAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return success A boolean that indicates if the operation was successful.\\n     */\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens allowed by the owner (_holder) for a spender (_spender) to spend.\\n     * @param _holder The address which owns the tokens.\\n     * @param _spender The address which will spend the tokens.\\n     * @return remaining The amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _holder,\\n        address _spender\\n    ) public view returns (uint256 remaining) {\\n        return allowed[_holder][_spender];\\n    }\\n\\n    /**\\n     * @dev Calculates the tax amount and the taxed amount based on the given value and tax exemption status.\\n     * @param _value The original amount to be taxed.\\n     * @param _isTaxWallet Indicates if the tax wallet is exempt from taxation.\\n     * @return taxAmount The calculated tax amount.\\n     * @return taxedAmount The remaining amount after taxation.\\n     */\\n    function getTaxedAmount(\\n        uint256 _value,\\n        bool _isTaxWallet\\n    ) internal pure returns (uint256 taxAmount, uint256 taxedAmount) {\\n        taxAmount = _isTaxWallet ? 0 : (_value * TAX_PERCENT_BASIS) / 10000;\\n        taxedAmount = _value - taxAmount;\\n    }\\n\\n    /**\\n     * @dev Sets the tax wallet address. Can only be called by the contract owner.\\n     * @param _taxWallet The address to be set as the tax wallet.\\n     */\\n    function setTaxWallet(address _taxWallet) public onlyOwner {\\n        taxWallet = _taxWallet;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert CallerIsNotTheOwner(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert TransferToZeroAddress(newOwner);\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_PERCENT_BASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}