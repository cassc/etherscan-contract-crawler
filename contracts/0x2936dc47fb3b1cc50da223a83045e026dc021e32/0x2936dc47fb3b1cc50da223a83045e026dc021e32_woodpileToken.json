{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-12-19\r\n*/\r\n\r\n// Welcome to WOODPILE. An automated deflationary token that buys AXE CAP token to claim a portion of the AXE CAP revenue share.\r\n// AXE revenue share is then used to buy back and burn WOODPILE.\r\n// WOODPILE has 5% buy and 5% sell taxes with the following.\r\n\r\n// 2% REV SHARE TO WOODPILE HOLDERS IN WETH\r\n// 2% WOODPILE BUY BACK AND BURN + TEAM\r\n// 1% BUY BACK & INVEST (CURRENT REV SHARE INVEST - AXE)\r\n\r\n// Hold WOODPILE token to benefit from 2 x delfationary methods + WETH revenue share.\r\n\r\n// 50% of WOODPILE is already burning.\r\n\r\n// Track all important information at protocol wallet woodpiles.eth\r\n// Find the website at woodpiles.xyz\r\n// Telegram @woodpileToken\r\n// This protocol can rotate to buy other revenue earning bots and projects.\r\n\r\n// Token launch scheduled between 13th and 16th of September 2023. Good luck. Rev share live two weeks after launch.\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= amount,\r\n\t\t\t\"Address: insufficient balance\"\r\n\t\t);\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data)\r\n\tinternal\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn\r\n\t\tfunctionCallWithValue(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\tvalue,\r\n\t\t\t\"Address: low-level call with value failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= value,\r\n\t\t\t\"Address: insufficient balance for call\"\r\n\t\t);\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(\r\n\t\tdata\r\n\t\t);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionStaticCall(address target, bytes memory data)\r\n\tinternal\r\n\tview\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\tfunctionStaticCall(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\t\"Address: low-level static call failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data)\r\n\tinternal\r\n\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\tfunctionDelegateCall(\r\n\t\t\ttarget,\r\n\t\t\tdata,\r\n\t\t\t\"Address: low-level delegate call failed\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) private pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n   function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract woodpileToken is Ownable, ERC20 {\r\n    using Address for address;\r\n\r\n    IRouter public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    string private constant _name = \"Woodpile\";\r\n    string private constant _symbol = \"WOODPILE\";\r\n\r\n    bool public isTradingEnabled;\r\n\r\n    uint256 public initialSupply = 1000000 * (10**18);\r\n\r\n    // max buy and sell tx is 100% of initialSupply\r\n    uint256 public maxTxAmount = initialSupply;\r\n\r\n    // max wallet is 1% of initialSupply\r\n    uint256 public maxWalletAmount = initialSupply * 100 / 10000;\r\n\r\n    bool private _swapping;\r\n    uint256 public minimumTokensBeforeSwap = initialSupply * 1 / 100000;\r\n\r\n    address public revShareWallet;\r\n    address public investWallet;\r\n    address public operationsWallet;\r\n\r\n    struct CustomTaxPeriod {\r\n        bytes23 periodName;\r\n        uint8 revShareWalletFeeOnBuy;\r\n        uint8 revShareWalletFeeOnSell;\r\n        uint8 investWalletFeeOnBuy;\r\n        uint8 investWalletFeeOnSell;\r\n        uint8 operationsFeeOnBuy;\r\n        uint8 operationsFeeOnSell;\r\n    }\r\n\r\n    // Base taxes\r\n    CustomTaxPeriod private _base = CustomTaxPeriod(\"base\", 2, 2, 1, 1, 2, 2);\r\n\r\n    bool private _isLaunched;\r\n    bool public _launchTokensClaimed;\r\n    uint256 private _launchStartTimestamp;\r\n    uint256 private _launchBlockNumber;\r\n    uint256 public launchTokens;\r\n\r\n    mapping (address => bool) private _isBlocked;\r\n    mapping(address => bool) private _isAllowedToTradeWhenDisabled;\r\n    mapping(address => bool) private _feeOnSelectedWalletTransfers;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromMaxTransactionLimit;\r\n    mapping(address => bool) private _isExcludedFromMaxWalletLimit;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint8 private _revShareWalletFee;\r\n    uint8 private _investWalletFee;\r\n    uint8 private _operationsFee;\r\n    uint8 private _totalFee;\r\n\r\n    event AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n    event BlockedAccountChange(address indexed holder, bool indexed status);\r\n    event UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n    event WalletChange(string indexed indentifier,address indexed newWallet,address indexed oldWallet);\r\n    event FeeChange(string indexed identifier,uint8 revShareWalletFee,uint8 investWalletFee,uint8 operationsFee);\r\n    event CustomTaxPeriodChange(uint256 indexed newValue,uint256 indexed oldValue,string indexed taxType,bytes23 period);\r\n    event MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n    event AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n    event MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event FeeOnSelectedWalletTransfersChange(address indexed account, bool newValue);\r\n    event ClaimOverflow(address token, uint256 amount);\r\n    event TradingStatusChange(bool indexed newValue, bool indexed oldValue);\r\n    event FeesApplied(uint8 revShareWalletFee,uint8 investWalletFee,uint8 operationsFee,uint8 totalFee);\r\n\r\n    constructor() ERC20(_name, _symbol) {\r\n        revShareWallet = owner();\r\n        investWallet = owner();\r\n        operationsWallet = owner();\r\n\r\n        IRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n        _isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n        _mint(owner(), initialSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function activateTrading() external onlyOwner {\r\n        isTradingEnabled = true;\r\n        if(_launchBlockNumber == 0) {\r\n            _launchBlockNumber = block.number;\r\n            _launchStartTimestamp = block.timestamp;\r\n            _isLaunched = true;\r\n        }\r\n        emit TradingStatusChange(true, false);\r\n    }\r\n    function deactivateTrading() external onlyOwner {\r\n        isTradingEnabled = false;\r\n        emit TradingStatusChange(false, true);\r\n    }\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value,\"woodpile: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit AutomatedMarketMakerPairChange(pair, value);\r\n    }\r\n    function allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n        _isAllowedToTradeWhenDisabled[account] = allowed;\r\n        emit AllowedWhenTradingDisabledChange(account, allowed);\r\n    }\r\n    function blockAccount(address account) external onlyOwner {\r\n        require(!_isBlocked[account], \"woodpile: Account is already blocked\");\r\n        if (_isLaunched) {\r\n            require((block.timestamp - _launchStartTimestamp) < 172800, \"woodpile: Time to block accounts has expired\");\r\n        }\r\n        _isBlocked[account] = true;\r\n        emit BlockedAccountChange(account, true);\r\n    }\r\n    function unblockAccount(address account) external onlyOwner {\r\n        require(_isBlocked[account], \"woodpile: Account is not blcoked\");\r\n        _isBlocked[account] = false;\r\n        emit BlockedAccountChange(account, false);\r\n    }\r\n    function setFeeOnSelectedWalletTransfers(address account, bool value) external onlyOwner {\r\n        require(_feeOnSelectedWalletTransfers[account] != value,\"woodpile: The selected wallet is already set to the value \");\r\n        _feeOnSelectedWalletTransfers[account] = value;\r\n        emit FeeOnSelectedWalletTransfersChange(account, value);\r\n    }\r\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromFee[account] != excluded,\"woodpile: Account is already the value of 'excluded'\");\r\n        _isExcludedFromFee[account] = excluded;\r\n        emit ExcludeFromFeesChange(account, excluded);\r\n    }\r\n    function excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxTransactionLimit[account] != excluded,\"woodpile: Account is already the value of 'excluded'\");\r\n        _isExcludedFromMaxTransactionLimit[account] = excluded;\r\n        emit ExcludeFromMaxTransferChange(account, excluded);\r\n    }\r\n    function excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxWalletLimit[account] != excluded,\"woodpile: Account is already the value of 'excluded'\");\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n        emit ExcludeFromMaxWalletChange(account, excluded);\r\n    }\r\n    function setWallets(address newrevShareWallet,address newinvestWallet,address newOperationsWallet) external onlyOwner {\r\n        if (revShareWallet != newrevShareWallet) {\r\n            require(newrevShareWallet != address(0), \"woodpile: The revShareWallet cannot be 0\");\r\n            emit WalletChange(\"revShareWallet\", newrevShareWallet, revShareWallet);\r\n            revShareWallet = newrevShareWallet;\r\n        }\r\n        if (investWallet != newinvestWallet) {\r\n            require(newinvestWallet != address(0), \"woodpile: The investWallet cannot be 0\");\r\n            emit WalletChange(\"investWallet\", newinvestWallet, investWallet);\r\n            investWallet = newinvestWallet;\r\n        }\r\n        if (operationsWallet != newOperationsWallet) {\r\n            require(newOperationsWallet != address(0), \"woodpile: The operationsWallet cannot be 0\");\r\n            emit WalletChange(\"operationsWallet\", newOperationsWallet, operationsWallet);\r\n            operationsWallet = newOperationsWallet;\r\n        }\r\n    }\r\n    // Base fees\r\n    function setBaseFeesOnBuy(uint8 _revShareWalletFeeOnBuy,uint8 _investWalletFeeOnBuy,uint8 _operationsFeeOnBuy) external onlyOwner {\r\n        _setCustomBuyTaxPeriod(_base,_revShareWalletFeeOnBuy,_investWalletFeeOnBuy,_operationsFeeOnBuy);\r\n        emit FeeChange(\"baseFees-Buy\",_revShareWalletFeeOnBuy,_investWalletFeeOnBuy,_operationsFeeOnBuy);\r\n    }\r\n    function setBaseFeesOnSell(uint8 _revShareWalletFeeOnSell,uint8 _investWalletFeeOnSell,uint8 _operationsFeeOnSell) external onlyOwner {\r\n        _setCustomSellTaxPeriod(_base,_revShareWalletFeeOnSell,_investWalletFeeOnSell,_operationsFeeOnSell);\r\n        emit FeeChange(\"baseFees-Sell\",_revShareWalletFeeOnSell,_investWalletFeeOnSell,_operationsFeeOnSell);\r\n    }\r\n    function setUniswapRouter(address newAddress) external onlyOwner {\r\n        require(newAddress != address(uniswapV2Router),\"woodpile: The router already has that address\");\r\n        emit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IRouter(newAddress);\r\n    }\r\n    function setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxTxAmount, \"woodpile: Cannot update maxTxAmount to same value\");\r\n        emit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n        maxTxAmount = newValue;\r\n    }\r\n    function setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxWalletAmount,\"woodpile: Cannot update maxWalletAmount to same value\");\r\n        emit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n        maxWalletAmount = newValue;\r\n    }\r\n    function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(newValue != minimumTokensBeforeSwap,\"woodpile: Cannot update minimumTokensBeforeSwap to same value\");\r\n        emit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n    function claimLaunchTokens() external onlyOwner {\r\n\t\trequire(_launchStartTimestamp > 0, \"woodpile: Launch must have occurred\");\r\n\t\trequire(!_launchTokensClaimed, \"woodpile: Launch tokens have already been claimed\");\r\n\t\trequire(block.number - _launchBlockNumber > 7, \"woodpile: Only claim launch tokens after launch\");\r\n\t\tuint256 tokenBalance = balanceOf(address(this));\r\n\t\t_launchTokensClaimed = true;\r\n\t\trequire(launchTokens <= tokenBalance, \"woodpile: A swap and liquify has already occurred\");\r\n\t\tuint256 amount = launchTokens;\r\n\t\tlaunchTokens = 0;\r\n        (bool success) = IERC20(address(this)).transfer(owner(), amount);\r\n        if (success){\r\n            emit ClaimOverflow(address(this), amount);\r\n        }\r\n    }\r\n    function claimETHOverflow(uint256 amount) external onlyOwner {\r\n        require(amount <= address(this).balance, \"woodpile: Cannot send more than contract balance\");\r\n        (bool success, ) = address(owner()).call{ value: amount }(\"\");\r\n        if (success) {\r\n            emit ClaimOverflow(uniswapV2Router.WETH(), amount);\r\n        }\r\n    }\r\n\r\n    // Getters\r\n    function getBaseBuyFees() external view returns (uint8,uint8,uint8) {\r\n        return (_base.revShareWalletFeeOnBuy,_base.investWalletFeeOnBuy,_base.operationsFeeOnBuy);\r\n    }\r\n    function getBaseSellFees() external view returns (uint8,uint8,uint8) {\r\n        return (_base.revShareWalletFeeOnSell,_base.investWalletFeeOnSell,_base.operationsFeeOnSell);\r\n    }\r\n    // Main\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n            require(isTradingEnabled, \"woodpile: Trading is currently disabled.\");\r\n            require(!_isBlocked[to], \"woodpile: Account is blocked\");\r\n            require(!_isBlocked[from], \"woodpile: Account is blocked\");\r\n            if (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n                require(amount <= maxTxAmount, \"woodpile: Buy amount exceeds the maxTxBuyAmount.\");\r\n            }\r\n            if (!_isExcludedFromMaxWalletLimit[to]) {\r\n                require((balanceOf(to) + amount) <= maxWalletAmount, \"woodpile: Expected wallet amount exceeds the maxWalletAmount.\");\r\n            }\r\n        }\r\n\r\n        _adjustTaxes(automatedMarketMakerPairs[from], automatedMarketMakerPairs[to], from, to);\r\n        bool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n        if (\r\n            isTradingEnabled &&\r\n            canSwap &&\r\n            !_swapping &&\r\n            _totalFee > 0 &&\r\n            automatedMarketMakerPairs[to]\r\n        ) {\r\n            _swapping = true;\r\n            _swapAndLiquify();\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping && isTradingEnabled;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        if (takeFee && _totalFee > 0) {\r\n            uint256 fee = (amount * _totalFee) / 100;\r\n            amount = amount - fee;\r\n            if (_launchStartTimestamp > 0 && (block.number - _launchBlockNumber <= 5)) {\r\n                launchTokens += fee;\r\n            }\r\n            super._transfer(from, address(this), fee);\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _adjustTaxes(bool isBuyFromLp,bool isSelltoLp,address from,address to) private {\r\n        _revShareWalletFee = 0;\r\n        _investWalletFee = 0;\r\n        _operationsFee = 0;\r\n\r\n        if (isBuyFromLp) {\r\n            if (_isLaunched && block.timestamp - _launchBlockNumber <= 5) {\r\n                _revShareWalletFee = 100;\r\n            } else {\r\n                _revShareWalletFee = _base.revShareWalletFeeOnBuy;\r\n                _investWalletFee = _base.investWalletFeeOnBuy;\r\n                _operationsFee = _base.operationsFeeOnBuy;\r\n            }\r\n        }\r\n        if (isSelltoLp) {\r\n            _revShareWalletFee = _base.revShareWalletFeeOnSell;\r\n            _investWalletFee = _base.investWalletFeeOnSell;\r\n            _operationsFee = _base.operationsFeeOnSell;\r\n        }\r\n        if (!isSelltoLp && !isBuyFromLp && (_feeOnSelectedWalletTransfers[from] || _feeOnSelectedWalletTransfers[to])) {\r\n            _revShareWalletFee = _base.revShareWalletFeeOnBuy;\r\n            _investWalletFee = _base.investWalletFeeOnBuy;\r\n            _operationsFee = _base.operationsFeeOnBuy;\r\n        }\r\n        _totalFee = _revShareWalletFee + _investWalletFee + _operationsFee;\r\n        emit FeesApplied(_revShareWalletFee, _investWalletFee, _operationsFee, _totalFee);\r\n    }\r\n\r\n    function _setCustomSellTaxPeriod(CustomTaxPeriod storage map,uint8 _revShareWalletFeeOnSell,uint8 _investWalletFeeOnSell,uint8 _operationsFeeOnSell) private {\r\n        if (map.revShareWalletFeeOnSell != _revShareWalletFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_revShareWalletFeeOnSell,map.revShareWalletFeeOnSell,\"revShareWalletFeeOnSell\",map.periodName);\r\n            map.revShareWalletFeeOnSell = _revShareWalletFeeOnSell;\r\n        }\r\n        if (map.investWalletFeeOnSell != _investWalletFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_investWalletFeeOnSell,map.investWalletFeeOnSell,\"investWalletFeeOnSell\",map.periodName);\r\n            map.investWalletFeeOnSell = _investWalletFeeOnSell;\r\n        }\r\n        if (map.operationsFeeOnSell != _operationsFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_operationsFeeOnSell,map.operationsFeeOnSell,\"operationsFeeOnSell\",map.periodName);\r\n            map.operationsFeeOnSell = _operationsFeeOnSell;\r\n        }\r\n    }\r\n    function _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,uint8 _revShareWalletFeeOnBuy,uint8 _investWalletFeeOnBuy,uint8 _operationsFeeOnBuy) private {\r\n        if (map.revShareWalletFeeOnBuy != _revShareWalletFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_revShareWalletFeeOnBuy,map.revShareWalletFeeOnBuy,\"revShareWalletFeeOnBuy\",map.periodName);\r\n            map.revShareWalletFeeOnBuy = _revShareWalletFeeOnBuy;\r\n        }\r\n        if (map.investWalletFeeOnBuy != _investWalletFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_investWalletFeeOnBuy,map.investWalletFeeOnBuy,\"investWalletFeeOnBuy\",map.periodName);\r\n            map.investWalletFeeOnBuy = _investWalletFeeOnBuy;\r\n        }\r\n        if (map.operationsFeeOnBuy != _operationsFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_operationsFeeOnBuy,map.operationsFeeOnBuy,\"operationsFeeOnBuy\",map.periodName);\r\n            map.operationsFeeOnBuy = _operationsFeeOnBuy;\r\n        }\r\n    }\r\n\r\n    function _swapAndLiquify() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        uint256 amountToLiquify = (contractBalance * _revShareWalletFee) / _totalFee / 2;\r\n        uint256 amountToSwap = contractBalance - amountToLiquify;\r\n\r\n        _swapTokensForETH(amountToSwap);\r\n\r\n        uint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n        uint256 totalETHFee = _totalFee - (_revShareWalletFee / 2);\r\n        uint256 amountETHrevShareWallet = (ETHBalanceAfterSwap * _revShareWalletFee) / totalETHFee / 2;\r\n        uint256 amountETHinvestWallet = (ETHBalanceAfterSwap * _investWalletFee) / totalETHFee;\r\n        uint256 amountETHOperations = ETHBalanceAfterSwap - (amountETHrevShareWallet  + amountETHinvestWallet);\r\n\r\n        Address.sendValue(payable(operationsWallet),amountETHOperations);\r\n        Address.sendValue(payable(investWallet),amountETHinvestWallet);\r\n\r\n        if (amountToLiquify > 0) {\r\n            _addLiquidity(amountToLiquify, amountETHrevShareWallet);\r\n            emit SwapAndLiquify(amountToSwap, amountETHrevShareWallet, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            1, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            1, // slippage is unavoidable\r\n            1, // slippage is unavoidable\r\n            revShareWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"revShareWalletFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"investWalletFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operationsFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"FeeOnSelectedWalletTransfersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"revShareWalletFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"investWalletFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operationsFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"TradingStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_launchTokensClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETHOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLaunchTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_revShareWalletFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_investWalletFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_operationsFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_revShareWalletFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_investWalletFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_operationsFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnSelectedWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newrevShareWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newinvestWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOperationsWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "woodpileToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43db2072c6d3b2c7640253e056bca8a88b150a87dc6098bf002f5304bd6c522c"}