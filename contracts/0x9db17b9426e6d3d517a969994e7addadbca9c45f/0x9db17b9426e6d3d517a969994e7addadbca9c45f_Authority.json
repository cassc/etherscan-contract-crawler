{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/consensus/AbstractConsensus.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\n/// @title Abstract Consensus\\n/// @notice An abstract contract that partially implements `IConsensus`.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice Emits an `ApplicationJoined` event with the message sender.\\n    function join() external override {\\n        emit ApplicationJoined(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/consensus/IConsensus.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Consensus interface\\n///\\n/// @notice This contract defines a generic interface for consensuses.\\n/// We use the word \\\"consensus\\\" to designate a contract that provides claims\\n/// in the base layer regarding the state of off-chain machines running in\\n/// the execution layer. How this contract is able to reach consensus, who is\\n/// able to submit claims, and how are claims stored in the base layer are\\n/// some of the implementation details left unspecified by this interface.\\n///\\n/// From the point of view of a DApp, these claims are necessary to validate\\n/// on-chain action allowed by the off-chain machine in the form of vouchers\\n/// and notices. Each claim is composed of three parts: an epoch hash, a first\\n/// index, and a last index. We'll explain each of these parts below.\\n///\\n/// First, let us define the word \\\"epoch\\\". For finality reasons, we need to\\n/// divide the stream of inputs being fed into the off-chain machine into\\n/// batches of inputs, which we call \\\"epoches\\\". At the end of every epoch,\\n/// we summarize the state of the off-chain machine in a single hash, called\\n/// \\\"epoch hash\\\". Please note that this interface does not define how this\\n/// stream of inputs is being chopped up into epoches.\\n///\\n/// The other two parts are simply the indices of the first and last inputs\\n/// accepted during the epoch. Logically, the first index MUST BE less than\\n/// or equal to the last index. As a result, every epoch MUST accept at least\\n/// one input. This assumption stems from the fact that the state of a machine\\n/// can only change after an input is fed into it.\\n///\\n/// Examples of possible implementations of this interface include:\\n///\\n/// * An authority consensus, controlled by a single address who has full\\n///   control over epoch boundaries, claim submission, asset management, etc.\\n///\\n/// * A quorum consensus, controlled by a limited set of validators, that\\n///   vote on the state of the machine at the end of every epoch. Also, epoch\\n///   boundaries are determined by the timestamp in the base layer, and assets\\n///   are split equally amongst the validators.\\n///\\n/// * An NxN consensus, which allows anyone to submit and dispute claims\\n///   in the base layer. Epoch boundaries are determined in the same fashion\\n///   as in the quorum example.\\n///\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set.\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join`.\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Signal the consensus that the message sender wants to join its validation set.\\n    /// @dev MUST fire an `ApplicationJoined` event with the message sender as argument.\\n    function join() external;\\n}\\n\"\r\n    },\r\n    \"contracts/consensus/authority/Authority.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {IHistory} from \\\"../../history/IHistory.sol\\\";\\n\\n/// @title Authority consensus\\n/// @notice A consensus model controlled by a single address, the owner.\\n///         Claims are stored in an auxiliary contract called `History`.\\n/// @dev This contract inherits `AbstractConsensus` and OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract Authority is AbstractConsensus, Ownable {\\n    /// @notice The current history contract.\\n    /// @dev See the `getHistory` and `setHistory` functions.\\n    IHistory internal history;\\n\\n    /// @notice A new history contract is used to store claims.\\n    /// @param history The new history contract\\n    /// @dev MUST be triggered on a successful call to `setHistory`.\\n    event NewHistory(IHistory history);\\n\\n    /// @notice Raised when a transfer of tokens from an authority to a recipient fails.\\n    error AuthorityWithdrawalFailed();\\n\\n    /// @notice Constructs an `Authority` contract.\\n    /// @param _owner The initial contract owner\\n    constructor(address _owner) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (msg.sender != _owner) {\\n            transferOwnership(_owner);\\n        }\\n    }\\n\\n    /// @notice Submits a claim to the current history contract.\\n    ///         The encoding of `_claimData` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function submitClaim(bytes calldata _claimData) external onlyOwner {\\n        history.submitClaim(_claimData);\\n    }\\n\\n    /// @notice Transfer ownership over the current history contract to `_consensus`.\\n    /// @param _consensus The new owner of the current history contract\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function migrateHistoryToConsensus(address _consensus) external onlyOwner {\\n        history.migrateToConsensus(_consensus);\\n    }\\n\\n    /// @notice Make `Authority` point to another history contract.\\n    /// @param _history The new history contract\\n    /// @dev Emits a `NewHistory` event.\\n    ///      Can only be called by the `Authority` owner.\\n    function setHistory(IHistory _history) external onlyOwner {\\n        history = _history;\\n        emit NewHistory(_history);\\n    }\\n\\n    /// @notice Get the current history contract.\\n    /// @return The current history contract\\n    function getHistory() external view returns (IHistory) {\\n        return history;\\n    }\\n\\n    /// @notice Get a claim from the current history.\\n    ///         The encoding of `_proofContext` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @inheritdoc IConsensus\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        return history.getClaim(_dapp, _proofContext);\\n    }\\n\\n    /// @notice Transfer some amount of ERC-20 tokens to a recipient.\\n    /// @param _token The token contract\\n    /// @param _recipient The recipient address\\n    /// @param _amount The amount of tokens to be withdrawn\\n    /// @dev Can only be called by the `Authority` owner.\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        bool success = _token.transfer(_recipient, _amount);\\n\\n        if (!success) {\\n            revert AuthorityWithdrawalFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/history/IHistory.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title History interface\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim.\\n    ///         The encoding of `_claimData` might vary\\n    ///         depending on the history implementation.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Should have access control.\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Transfer ownership to another consensus.\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control.\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the history implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuthorityWithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"ApplicationJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"NewHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateHistoryToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"name\":\"setHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Authority", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e28a8f88c6266df0fe274c15c1d4b27f8b373c0", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}