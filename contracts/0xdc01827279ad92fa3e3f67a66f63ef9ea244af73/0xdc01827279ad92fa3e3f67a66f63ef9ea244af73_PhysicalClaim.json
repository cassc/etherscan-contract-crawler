{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/physicalclaim/PhysicalClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\\\";\\n\\nimport \\\"./PhysicalClaimCore.sol\\\";\\nimport \\\"./PhysicalClaimLib.sol\\\";\\nimport \\\"./IPhysicalClaim.sol\\\";\\n\\n// Let's get Physical \ud83d\udc8b\\ncontract PhysicalClaim is PhysicalClaimCore, IPhysicalClaim {\\n    using Strings for uint256;\\n\\n    constructor(address initialOwner) PhysicalClaimCore(initialOwner) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(PhysicalClaimCore, IERC165) returns (bool) {\\n        return interfaceId == type(IPhysicalClaim).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    \\n    /**\\n     * @dev See {IPhysicalClaim-initializePhysicalClaim}.\\n     */\\n    function initializePhysicalClaim(\\n        uint256 instanceId,\\n        PhysicalClaimParameters calldata physicalClaimParameters\\n    ) external  {\\n        // Max uint56 for instanceId\\n        if (instanceId == 0 || instanceId > MAX_UINT_56) {\\n            revert InvalidInput();\\n        }\\n\\n        _initialize(instanceId, physicalClaimParameters);\\n    }\\n\\n    /**\\n     * @dev See {IPhysicalClaim-updatePhysicalClaim}.\\n     */\\n    function updatePhysicalClaim(\\n        uint256 instanceId,\\n        PhysicalClaimParameters calldata physicalClaimParameters\\n    ) external {\\n        _validateAdmin(instanceId);\\n        _update(instanceId, physicalClaimParameters);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, uint80 data) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, uint80[] calldata data) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @dev get token data\\n     */\\n    function tokenData(uint256 tokenId) external view returns (uint80);\\n\\n}\"\r\n    },\r\n    \"contracts/physicalclaim/PhysicalClaimCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./PhysicalClaimLib.sol\\\";\\nimport \\\"./IPhysicalClaimCore.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\n/**\\n * @title Physical Claim Core\\n * @author manifold.xyz\\n * @notice Core logic for Physical Claim shared extensions.\\n */\\nabstract contract PhysicalClaimCore is ERC165, AdminControl, ReentrancyGuard, IPhysicalClaimCore {\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    uint256 internal constant MAX_UINT_16 = 0xffff;\\n    uint256 internal constant MAX_UINT_56 = 0xffffffffffffff;\\n\\n    bool public deprecated;\\n\\n    // { instanceId => PhysicalClaim }\\n    mapping(uint256 => PhysicalClaim) internal _physicalClaims;\\n\\n    // { instanceId => creator } -> TODO: make it so multiple people can administer a physical claim\\n    mapping(uint256 => address) internal _physicalClaimCreator;\\n\\n    // { instanceId => { redeemer => uint256 } }\\n    mapping(uint256 => mapping(address => uint256)) internal _redemptionCounts;\\n\\n    // { instanceId => nonce => t/f  }\\n    mapping(uint256 => mapping(bytes32 => bool)) internal _usedMessages;\\n\\n    // { instanceId => { contractAddress => { tokenId => t/f }}\\n    // Track used tokens for a given instannceId\\n    mapping(uint256 => mapping(address => mapping(uint256 => bool))) internal _usedTokens;\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AdminControl) returns (bool) {\\n        return interfaceId == type(IPhysicalClaimCore).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Admin function to deprecate the contract\\n     */\\n    function deprecate(bool _deprecated) external adminRequired {\\n        deprecated = _deprecated;\\n    }\\n\\n    /**\\n     * Initialiazes a physical claim with base parameters\\n     */\\n    function _initialize(\\n        uint256 instanceId,\\n        PhysicalClaimParameters calldata physicalClaimParameters\\n    ) internal {\\n        if (deprecated) {\\n            revert ContractDeprecated();\\n        }\\n        if (_physicalClaimCreator[instanceId] != address(0)) {\\n            revert InvalidInstance();\\n        }\\n        _physicalClaimCreator[instanceId] = msg.sender;\\n        PhysicalClaimLib.initialize(instanceId, _physicalClaims[instanceId], physicalClaimParameters);\\n    }\\n\\n    /**\\n     * Updates a physical claim with base parameters\\n     */\\n    function _update(\\n        uint256 instanceId,\\n        PhysicalClaimParameters calldata physicalClaimParameters\\n    ) internal {\\n        PhysicalClaimLib.update(instanceId, _getPhysicalClaim(instanceId), physicalClaimParameters);\\n    }\\n\\n    /**\\n     * Validates that this physical claim is managed by the user\\n     */\\n     function _validateAdmin(\\n        uint256 instanceId\\n     ) internal view {\\n        require(_physicalClaimCreator[instanceId] == msg.sender, \\\"Must be admin\\\");\\n     }\\n\\n    /**\\n     * See {IPhysicalClaimCore-getPhysicalClaim}.\\n     */\\n    function getPhysicalClaim(uint256 instanceId) external override view returns(PhysicalClaimView memory) {\\n        PhysicalClaim storage physicalClaimInstance = _getPhysicalClaim(instanceId);\\n        VariationState[] memory variationStates = new VariationState[](physicalClaimInstance.variationIds.length);\\n        for (uint256 i; i < physicalClaimInstance.variationIds.length;) {\\n            variationStates[i] = physicalClaimInstance.variations[physicalClaimInstance.variationIds[i]];\\n            unchecked { ++i; }\\n        }\\n        return PhysicalClaimView({\\n            paymentReceiver: physicalClaimInstance.paymentReceiver,\\n            redeemedCount: physicalClaimInstance.redeemedCount,\\n            totalSupply: physicalClaimInstance.totalSupply,\\n            startDate: physicalClaimInstance.startDate,\\n            endDate: physicalClaimInstance.endDate,\\n            signer: physicalClaimInstance.signer,\\n            burnSet: physicalClaimInstance.burnSet,\\n            variationStates: variationStates\\n        });\\n    }\\n\\n    /**\\n     * See {IPhysicalClaimCore-getPhysicalClaim}.\\n     */\\n    function getRedemptions(uint256 instanceId, address redeemer) external override view returns(uint256) {\\n        return _redemptionCounts[instanceId][redeemer];\\n    }\\n\\n    /**\\n     * See {IPhysicalClaimCore-getVariationState}.\\n     */\\n    function getVariationState(uint256 instanceId, uint8 variation) external override view returns(VariationState memory) {\\n        return _getPhysicalClaim(instanceId).variations[variation];\\n    }\\n\\n    function getAreTokensUsed(TokensUsedQuery calldata tokensUsedQuery) external override view returns(bool[] memory results) {\\n        results = new bool[](tokensUsedQuery.tokenIds.length);\\n        for (uint i = 0; i < results.length; i++) {\\n            address contractAddress = tokensUsedQuery.contractAddresses[i];\\n            uint256 tokenId = tokensUsedQuery.tokenIds[i];\\n            results[i] = _usedTokens[tokensUsedQuery.instanceId][contractAddress][tokenId];\\n        }\\n    }\\n\\n    /**\\n     * Helper to get physical claim instance\\n     */\\n    function _getPhysicalClaim(uint256 instanceId) internal view returns(PhysicalClaim storage physicalClaimInstance) {\\n        physicalClaimInstance = _physicalClaims[instanceId];\\n        if (physicalClaimInstance.paymentReceiver == address(0)) {\\n            revert InvalidInstance();\\n        }\\n    }\\n\\n    /**\\n     * (Batch overload) see {IPhysicalClaimCore-burnRedeem}.\\n     */\\n    function burnRedeem(PhysicalClaimSubmission[] calldata submissions) external payable override nonReentrant {\\n        if (submissions.length == 0) revert InvalidInput();\\n\\n        uint256 msgValueRemaining = msg.value;\\n        for (uint256 i; i < submissions.length;) {\\n            PhysicalClaimSubmission memory currentSub = submissions[i];\\n            uint256 instanceId = currentSub.instanceId;\\n\\n            // The expectedCount must match the user's current redemption count to enforce idempotency\\n            if (currentSub.currentClaimCount != _redemptionCounts[instanceId][msg.sender]) revert InvalidInput();\\n\\n            uint256 totalCost = currentSub.totalCost;\\n\\n            // Check that we have enough funds for the redemption\\n            if (totalCost > 0) {\\n                if (msgValueRemaining < totalCost) {\\n                    revert InvalidPaymentAmount();\\n                }\\n                msgValueRemaining -= totalCost;\\n            }\\n            _burnRedeem(currentSub);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _burnRedeem(PhysicalClaimSubmission memory submission) private {\\n        uint56 instanceId = submission.instanceId;\\n        PhysicalClaim storage physicalClaimInstance = _getPhysicalClaim(instanceId);\\n\\n        // Get the amount that can be burned\\n        uint16 physicalClaimCount = _getAvailablePhysicalClaimCount(physicalClaimInstance, submission.variation, submission.count);\\n\\n        // Signer being set means that the physical claim is a paid claim\\n        if (physicalClaimInstance.signer != address(0)) {\\n            // Check that the message value is what was signed...\\n            _checkPriceSignature(instanceId, submission.signature, submission.message, submission.nonce, physicalClaimInstance.signer, submission.totalCost);\\n            _forwardValue(physicalClaimInstance.paymentReceiver, submission.totalCost);\\n        }\\n\\n        // Do physical claim\\n        _burnTokens(instanceId, physicalClaimInstance, submission.burnTokens, physicalClaimCount, msg.sender, submission.data);\\n        _redeem(instanceId, physicalClaimInstance, msg.sender, submission.variation, physicalClaimCount, submission.data);\\n    }\\n\\n    function _checkPriceSignature(uint56 instanceId, bytes memory signature, bytes32 message, bytes32 nonce, address signingAddress, uint256 cost) internal {\\n        // Verify valid message based on input variables\\n        bytes32 expectedMessage = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", instanceId, cost));\\n        // Verify nonce usage/re-use\\n        require(!_usedMessages[instanceId][nonce], \\\"Cannot replay transaction\\\");\\n        address signer = message.recover(signature);\\n        if (message != expectedMessage || signer != signingAddress) revert InvalidSignature();\\n        _usedMessages[instanceId][nonce] = true;\\n    }\\n\\n    /**\\n     * @dev See {IPhysicalClaimCore-recover}.\\n     */\\n    function recover(address tokenAddress, uint256 tokenId, address destination) external override adminRequired {\\n        IERC721(tokenAddress).transferFrom(address(this), destination, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onReceived}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        // Check calldata is valid\\n        if (data.length % 32 != 0) {\\n            revert InvalidData();\\n        }\\n\\n        uint56 instanceId;\\n        uint256 burnItemIndex;\\n        bytes32[] memory merkleProof;\\n        uint8 variation;\\n        (instanceId, burnItemIndex, merkleProof, variation) = abi.decode(data, (uint56, uint256, bytes32[], uint8));\\n      \\n        _onERC721Received(from, id, instanceId, burnItemIndex, merkleProof, variation);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @notice  token transfer callback\\n     */\\n    function _onERC721Received(\\n        address from,\\n        uint256 tokenId,\\n        uint56 instanceId,\\n        uint256 burnItemIndex,\\n        bytes32[] memory merkleProof,\\n        uint8 variation\\n    ) private {\\n        PhysicalClaim storage physicalClaimInstance = _getPhysicalClaim(instanceId);\\n        // Note: since safeTransferFrom can't take funds, we are restricted to non-signature mints\\n        if (physicalClaimInstance.signer != address(0)) revert InvalidInput();\\n\\n        // A single  can only be sent in directly for a burn if:\\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\\n        // 2. The burn only requires one NFT (one burnSet element and one count)\\n        _validateReceivedInput(physicalClaimInstance.burnSet.length, physicalClaimInstance.burnSet[0].requiredCount);\\n\\n        // Validate we have remaining amounts available (will revert if not)\\n        _getAvailablePhysicalClaimCount(physicalClaimInstance, variation, 1);\\n\\n        // Check that the burn token is valid\\n        BurnItem memory burnItem = physicalClaimInstance.burnSet[0].items[burnItemIndex];\\n\\n        // Can only take in one burn item\\n        if (burnItem.burnTokenSpec != BurnTokenSpec.ERC721) {\\n            revert InvalidInput();\\n        }\\n        PhysicalClaimLib.validateBurnItem(burnItem, msg.sender, tokenId, merkleProof);\\n\\n        // Do burn and redeem\\n        _burn(instanceId, burnItem, address(this), msg.sender, tokenId, 1, \\\"\\\");\\n        _redeem(instanceId, physicalClaimInstance, from, variation, 1, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        // Check calldata is valid\\n        if (data.length % 32 != 0) {\\n            revert InvalidData();\\n        }\\n\\n        uint56 instanceId;\\n        uint16 burnRedeemCount;\\n        uint256 burnItemIndex;\\n        bytes32[] memory merkleProof;\\n        uint8 variation;\\n        (instanceId, burnRedeemCount, burnItemIndex, merkleProof, variation) = abi.decode(data, (uint56, uint16, uint256, bytes32[], uint8));\\n\\n        // Do burn redeem\\n        _onERC1155Received(from, id, value, instanceId, burnRedeemCount, burnItemIndex, merkleProof, variation);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * Execute onERC1155Received burn/redeem\\n     */\\n    function _onERC1155Received(address from, uint256 tokenId, uint256 value, uint56 instanceId, uint16 burnRedeemCount, uint256 burnItemIndex, bytes32[] memory merkleProof, uint8 variation) private {\\n        PhysicalClaim storage physicalClaimInstance = _getPhysicalClaim(instanceId);\\n        // Note: since safeTransferFrom can't take funds, we are restricted to non-signature mints\\n        if (physicalClaimInstance.signer != address(0)) revert InvalidInput();\\n\\n        // A single 1155 can only be sent in directly for a burn if:\\n        // 1. The burn only requires one NFT (one burn set element and one required count in the set)\\n        // 2. They are an active member (because no fee payment can be sent with a transfer)\\n        _validateReceivedInput(physicalClaimInstance.burnSet.length, physicalClaimInstance.burnSet[0].requiredCount);\\n\\n        uint16 availableBurnRedeemCount = _getAvailablePhysicalClaimCount(physicalClaimInstance, variation, burnRedeemCount);\\n\\n        // Check that the burn token is valid\\n        BurnItem memory burnItem = physicalClaimInstance.burnSet[0].items[burnItemIndex];\\n        if (value != burnItem.amount * burnRedeemCount) {\\n            revert InvalidBurnAmount();\\n        }\\n        PhysicalClaimLib.validateBurnItem(burnItem, msg.sender, tokenId, merkleProof);\\n\\n        // Do burn and redeem\\n        _burn(instanceId, burnItem, address(this), msg.sender, tokenId, availableBurnRedeemCount, \\\"\\\");\\n        _redeem(instanceId, physicalClaimInstance, from, variation, availableBurnRedeemCount, \\\"\\\");\\n\\n        // Return excess amount\\n        if (availableBurnRedeemCount != burnRedeemCount) {\\n            IERC1155(msg.sender).safeTransferFrom(address(this), from, tokenId, (burnRedeemCount - availableBurnRedeemCount) * burnItem.amount, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        // Do not support batch burning right now\\n        revert InvalidInput();\\n    }\\n\\n    function _validateReceivedInput(uint256 length, uint256 requiredCount) private pure {\\n        if (length != 1 || requiredCount != 1) {\\n            revert InvalidInput();\\n        }\\n    }\\n\\n    /**\\n     * Send funds to receiver\\n     */\\n    function _forwardValue(address payable receiver, uint256 amount) private {\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert TransferFailure();\\n        }\\n    }\\n\\n    /**\\n     * Burn all listed tokens and check that the burn set is satisfied\\n     */\\n    function _burnTokens(uint56 instanceId, PhysicalClaim storage burnRedeemInstance, BurnToken[] memory burnTokens, uint256 burnRedeemCount, address owner, bytes memory data) private {\\n        // Check that each group in the burn set is satisfied\\n        uint256[] memory groupCounts = new uint256[](burnRedeemInstance.burnSet.length);\\n\\n        for (uint256 i; i < burnTokens.length;) {\\n            BurnToken memory burnToken = burnTokens[i];\\n            BurnItem memory burnItem = burnRedeemInstance.burnSet[burnToken.groupIndex].items[burnToken.itemIndex];\\n\\n            PhysicalClaimLib.validateBurnItem(burnItem, burnToken.contractAddress, burnToken.id, burnToken.merkleProof);\\n\\n            _burn(instanceId, burnItem, owner, burnToken.contractAddress, burnToken.id, burnRedeemCount, data);\\n            groupCounts[burnToken.groupIndex] += burnRedeemCount;\\n\\n            unchecked { ++i; }\\n        }\\n        for (uint256 i; i < groupCounts.length;) {\\n            if (groupCounts[i] != burnRedeemInstance.burnSet[i].requiredCount * burnRedeemCount) {\\n                revert InvalidBurnAmount();\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Helper to get the number of burn redeems the person can accomplish\\n     */\\n    function _getAvailablePhysicalClaimCount(PhysicalClaim storage instance, uint8 variation, uint16 count) internal view returns(uint16 burnRedeemCount) {\\n        uint16 remainingTotalCount;\\n        if (instance.totalSupply == 0) {\\n            // If totalSupply is 0, it means unlimited redemptions\\n            remainingTotalCount = count;\\n        } else {\\n            // Get the remaining total redemptions\\n            remainingTotalCount = (instance.totalSupply - instance.redeemedCount);\\n        }\\n\\n        // Get the max redemptions for this variation\\n        VariationState memory variationState = instance.variations[variation];\\n        if (!variationState.active) revert InvalidVariation();\\n\\n        uint16 variationRemainingCount;\\n        if (variationState.totalSupply == 0) {\\n            // If totalSupply of variation is 0, it means unlimited available\\n            variationRemainingCount = count;\\n        } else {\\n            // Get the remaining variation redemptions\\n            variationRemainingCount = (variationState.totalSupply - variationState.redeemedCount);\\n        }\\n        \\n        // Use whichever is lesser...\\n        uint16 comparator = remainingTotalCount > variationRemainingCount ? variationRemainingCount : remainingTotalCount;\\n\\n        // Use the lesser of what's available or the desired count\\n        if (comparator > count) {\\n            burnRedeemCount = count;\\n        } else {\\n            burnRedeemCount = comparator;\\n        }\\n\\n        // No more remaining\\n        if (burnRedeemCount == 0) revert InvalidRedeemAmount();\\n    }\\n\\n    /**\\n     * Helper to burn token\\n     */\\n    function _burn(uint56 instanceId, BurnItem memory burnItem, address from, address contractAddress, uint256 tokenId, uint256 burnRedeemCount, bytes memory data) private {\\n        if (burnItem.burnTokenSpec == BurnTokenSpec.ERC1155) {\\n            uint256 amount = burnItem.amount * burnRedeemCount;\\n\\n            if (burnItem.burnFunctionSpec == BurnFunctionSpec.NONE) {\\n                // Send to 0xdEaD to burn if contract doesn't have burn function\\n                IERC1155(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, amount, data);\\n\\n            } else if (burnItem.burnFunctionSpec == BurnFunctionSpec.MANIFOLD) {\\n                // Burn using the creator core's burn function\\n                uint256[] memory tokenIds = new uint256[](1);\\n                tokenIds[0] = tokenId;\\n                uint256[] memory amounts = new uint256[](1);\\n                amounts[0] = amount;\\n                Manifold1155(contractAddress).burn(from, tokenIds, amounts);\\n\\n            } else if (burnItem.burnFunctionSpec == BurnFunctionSpec.OPENZEPPELIN) {\\n                // Burn using OpenZeppelin's burn function\\n                OZBurnable1155(contractAddress).burn(from, tokenId, amount);\\n\\n            } else {\\n                revert InvalidBurnFunctionSpec();\\n            }\\n        } else if (burnItem.burnTokenSpec == BurnTokenSpec.ERC721) {\\n            if (burnRedeemCount != 1) {\\n                revert InvalidBurnAmount();\\n            }\\n            if (burnItem.burnFunctionSpec == BurnFunctionSpec.NONE) {\\n                // Send to 0xdEaD to burn if contract doesn't have burn function\\n                IERC721(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, data);\\n\\n            } else if (burnItem.burnFunctionSpec == BurnFunctionSpec.MANIFOLD || burnItem.burnFunctionSpec == BurnFunctionSpec.OPENZEPPELIN) {\\n                if (from != address(this)) {\\n                    // 721 `burn` functions do not have a `from` parameter, so we must verify the owner\\n                    if (IERC721(contractAddress).ownerOf(tokenId) != from) {\\n                        revert TransferFailure();\\n                    }\\n                }\\n                // Burn using the contract's burn function\\n                Burnable721(contractAddress).burn(tokenId);\\n\\n            } else {\\n                revert InvalidBurnFunctionSpec();\\n            }\\n        } else if (burnItem.burnTokenSpec == BurnTokenSpec.ERC721_NO_BURN) {\\n            if (burnRedeemCount != 1) {\\n                revert InvalidBurnAmount();\\n            }\\n            if (_usedTokens[instanceId][contractAddress][tokenId]) {\\n                revert InvalidBurnAmount();\\n            }\\n            if (IERC721(contractAddress).ownerOf(tokenId) != from) {\\n                revert InvalidBurnAmount();\\n            }\\n            _usedTokens[instanceId][contractAddress][tokenId] = true;\\n            emit PhysicalClaimLib.PhysicalClaimTokenConsumed(instanceId, tokenId, contractAddress);\\n        } else {\\n            revert InvalidBurnTokenSpec();\\n        }\\n    }\\n\\n    /** \\n     * Helper to redeem multiple redeem\\n     */\\n    function _redeem(uint256 instanceId, PhysicalClaim storage physicalClaimInstance, address to, uint8 variation, uint16 count, bytes memory data) internal {\\n        uint256 totalCount = count;\\n        if (totalCount > MAX_UINT_16) {\\n            revert InvalidInput();\\n        }\\n        physicalClaimInstance.redeemedCount += uint16(totalCount);\\n        physicalClaimInstance.variations[variation].redeemedCount += count;\\n        _redemptionCounts[instanceId][to] += count;\\n        emit PhysicalClaimLib.PhysicalClaimRedemption(instanceId, variation, count, data);\\n    }\\n}\"\r\n    },\r\n    \"contracts/physicalclaim/PhysicalClaimLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./IPhysicalClaimCore.sol\\\";\\n\\n/**\\n * @title Physical Claim Lib\\n * @author manifold.xyz\\n * @notice Library for Physical Claim shared extensions.\\n */\\nlibrary PhysicalClaimLib {\\n\\n    event PhysicalClaimInitialized(uint256 indexed instanceId, address initializer);\\n    event PhysicalClaimUpdated(uint256 indexed instanceId);\\n    event PhysicalClaimRedemption(uint256 indexed instanceId, uint8 indexed variation, uint32 count, bytes data);\\n    event PhysicalClaimTokenConsumed(uint256 indexed instanceId, uint256 tokenId, address contractAddress);\\n\\n    error PhysicalClaimAlreadyInitialized();\\n    error InvalidBurnItem();\\n    error InvalidBurnToken();\\n    error InvalidMerkleProof();\\n    error InvalidStorageProtocol();\\n    error InvalidPaymentReceiver();\\n    error InvalidDates();\\n    error InvalidInput();\\n\\n    /**\\n     * Initialiazes a burn redeem with base parameters\\n     */\\n    function initialize(\\n        uint256 instanceId,\\n        IPhysicalClaimCore.PhysicalClaim storage physicalClaimInstance,\\n        IPhysicalClaimCore.PhysicalClaimParameters calldata physicalClaimParameters\\n    ) public {\\n        _validateParameters(physicalClaimParameters);\\n\\n        // Create the physical claim\\n        _setParameters(physicalClaimInstance, physicalClaimParameters);\\n        _setBurnGroups(physicalClaimInstance, physicalClaimParameters.burnSet);\\n\\n        emit PhysicalClaimInitialized(instanceId, msg.sender);\\n    }\\n\\n    /**\\n     * Updates a physical claim with base parameters\\n     */\\n    function update(\\n        uint256 instanceId,\\n        IPhysicalClaimCore.PhysicalClaim storage physicalClaimInstance,\\n        IPhysicalClaimCore.PhysicalClaimParameters calldata physicalClaimParameters\\n    ) public {\\n        _validateParameters(physicalClaimParameters);\\n\\n        // Overwrite the existing burnRedeem\\n        _setParameters(physicalClaimInstance, physicalClaimParameters);\\n        _setBurnGroups(physicalClaimInstance, physicalClaimParameters.burnSet);\\n        syncTotalSupply(physicalClaimInstance);\\n        emit PhysicalClaimUpdated(instanceId);\\n    }\\n\\n    /**\\n     * Helper to update total supply if redeemedCount exceeds totalSupply after airdrop or instance update.\\n     */\\n    function syncTotalSupply(IPhysicalClaimCore.PhysicalClaim storage physicalClaimInstance) public {\\n        if (\\n            physicalClaimInstance.totalSupply != 0 &&\\n            physicalClaimInstance.redeemedCount > physicalClaimInstance.totalSupply\\n        ) {\\n            physicalClaimInstance.totalSupply = physicalClaimInstance.redeemedCount;\\n        }\\n    }\\n\\n    /*\\n     * Helper to validate burn item\\n     */\\n    function validateBurnItem(IPhysicalClaimCore.BurnItem memory burnItem, address contractAddress, uint256 tokenId, bytes32[] memory merkleProof) public pure {\\n        if (burnItem.validationType == IPhysicalClaimCore.ValidationType.ANY) {\\n            return;\\n        }\\n        if (contractAddress != burnItem.contractAddress) {\\n            revert InvalidBurnToken();\\n        }\\n        if (burnItem.validationType == IPhysicalClaimCore.ValidationType.CONTRACT) {\\n            return;\\n        } else if (burnItem.validationType == IPhysicalClaimCore.ValidationType.RANGE) {\\n            if (tokenId < burnItem.minTokenId || tokenId > burnItem.maxTokenId) {\\n                revert IPhysicalClaimCore.InvalidToken(tokenId);\\n            }\\n            return;\\n        } else if (burnItem.validationType == IPhysicalClaimCore.ValidationType.MERKLE_TREE) {\\n            bytes32 leaf = keccak256(abi.encodePacked(tokenId));\\n            if (!MerkleProof.verify(merkleProof, burnItem.merkleRoot, leaf)) {\\n                revert InvalidMerkleProof();\\n            }\\n            return;\\n        }\\n        revert InvalidBurnItem();\\n    }\\n\\n    /**\\n     * Helper to validate the parameters for a physical claim\\n     */\\n    function _validateParameters(IPhysicalClaimCore.PhysicalClaimParameters calldata physicalClaimParameters) internal pure {\\n        if (physicalClaimParameters.paymentReceiver == address(0)) {\\n            revert InvalidPaymentReceiver();\\n        }\\n        if (physicalClaimParameters.endDate != 0 && physicalClaimParameters.startDate >= physicalClaimParameters.endDate) {\\n            revert InvalidDates();\\n        }\\n    }\\n\\n    /**\\n     * Helper to set top level properties for a physical claim\\n     */\\n    function _setParameters(IPhysicalClaimCore.PhysicalClaim storage physicalClaimInstance, IPhysicalClaimCore.PhysicalClaimParameters calldata physicalClaimParameters) private {\\n        physicalClaimInstance.startDate = physicalClaimParameters.startDate;\\n        physicalClaimInstance.endDate = physicalClaimParameters.endDate;\\n        physicalClaimInstance.totalSupply = physicalClaimParameters.totalSupply;\\n        physicalClaimInstance.paymentReceiver = physicalClaimParameters.paymentReceiver;\\n        physicalClaimInstance.signer = physicalClaimParameters.signer;\\n\\n        uint8[] memory currentVariationIds = physicalClaimInstance.variationIds;\\n        for (uint256 i; i < currentVariationIds.length;) {\\n            physicalClaimInstance.variations[currentVariationIds[i]].active = false;\\n            unchecked { ++i; }\\n        }\\n        physicalClaimInstance.variationIds = new uint8[](physicalClaimParameters.variationLimits.length);\\n        for (uint256 i; i < physicalClaimParameters.variationLimits.length;) {\\n            IPhysicalClaimCore.VariationLimit memory variationLimit = physicalClaimParameters.variationLimits[i];\\n            IPhysicalClaimCore.VariationState storage variationState = physicalClaimInstance.variations[variationLimit.id];\\n            variationState.active = true;\\n            physicalClaimInstance.variationIds[i] = variationLimit.id;\\n            // Set the totalSupply. If params specify 0, we use 0, otherwise it's the max of the current redeemCount and the param's totalSupply\\n            variationState.totalSupply = variationLimit.totalSupply == 0 ? 0 : (variationState.redeemedCount > variationLimit.totalSupply ? variationState.redeemedCount : variationLimit.totalSupply);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Helper to set the burn groups for a physical claim\\n     */\\n    function _setBurnGroups(IPhysicalClaimCore.PhysicalClaim storage physicalClaimInstance, IPhysicalClaimCore.BurnGroup[] calldata burnGroups) private {\\n        delete physicalClaimInstance.burnSet;\\n        for (uint256 i; i < burnGroups.length;) {\\n            physicalClaimInstance.burnSet.push();\\n            IPhysicalClaimCore.BurnGroup storage burnGroup = physicalClaimInstance.burnSet[i];\\n            if (burnGroups[i].requiredCount == 0 || burnGroups[i].requiredCount > burnGroups[i].items.length) {\\n                revert InvalidInput();\\n            }\\n            burnGroup.requiredCount = burnGroups[i].requiredCount;\\n            for (uint256 j; j < burnGroups[i].items.length;) {\\n                // IPhysicalClaimCore.BurnItem memory burnItem = burnGroups[i].items[j];\\n                // uint256 amount = burnItem.amount;\\n                burnGroup.items.push(burnGroups[i].items[j]);\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/physicalclaim/IPhysicalClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./IPhysicalClaimCore.sol\\\";\\n\\ninterface IPhysicalClaim is IPhysicalClaimCore {\\n    /**\\n     * @notice initialize a new physical claim, emit initialize event\\n     * @param instanceId                the instanceId of the physicalClaim for the physical claim\\n     * @param physicalClaimParameters      the parameters which will affect the redemption behavior of the physical claim\\n     */\\n    function initializePhysicalClaim(uint256 instanceId, PhysicalClaimParameters calldata physicalClaimParameters) external;\\n\\n    /**\\n     * @notice update an existing physical claim\\n     * @param instanceId                the instanceId of the physicalClaim for the physical claim\\n     * @param physicalClaimParameters      the parameters which will affect the redemption behavior of the physical claim\\n     */\\n    function updatePhysicalClaim(uint256 instanceId, PhysicalClaimParameters calldata physicalClaimParameters) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"node_modules/@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/physicalclaim/IPhysicalClaimCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Burn Redeem Core interface\\n */\\ninterface IPhysicalClaimCore is IERC165, IERC721Receiver, IERC1155Receiver {\\n    error InvalidInstance();\\n    error UnsupportedContractVersion();\\n    error InvalidToken(uint256);\\n    error InvalidInput(); // 0xb4fa3fb3\\n    error InvalidBurnTokenSpec();\\n    error InvalidBurnFunctionSpec();\\n    error InvalidData();\\n    error TransferFailure();\\n    error ContractDeprecated();\\n\\n    error PhysicalClaimDoesNotExist(uint256);\\n    error PhysicalClaimInactive(uint256);\\n\\n    error InvalidBurnAmount(); // 0x2075cc10\\n    error InvalidRedeemAmount(); // 0x918e94c5\\n    error InvalidPaymentAmount(); // 0xfc512fde\\n    error InvalidSignature(); // 0x8baa579f\\n    error InvalidVariation(); // 0xc674e37c\\n\\n    /**\\n     * @notice the validation type used for a `BurnItem`\\n     * CONTRACT                 any token from a specific contract is valid\\n     * RANGE                    token IDs within a range (inclusive) are valid\\n     * MERKLE_TREE              various individual token IDs included in a merkle tree are valid\\n     * ANY                      any token from any contract\\n     */\\n    enum ValidationType { INVALID, CONTRACT, RANGE, MERKLE_TREE, ANY }\\n\\n    enum BurnTokenSpec { ERC721, ERC1155, ERC721_NO_BURN }\\n\\n    enum BurnFunctionSpec { NONE, MANIFOLD, OPENZEPPELIN }\\n\\n    /**\\n     * @notice a `BurnItem` indicates which tokens are eligible to be burned\\n     * @param validationType    which type of validation used to check that the burn item is \\n     *                          satisfied\\n     * @param tokenSpec         the burn item token type\\n     * @param burnSpec          whether the contract for a token has a `burn` function and, if so,\\n     *                          what interface\\n     * @param amount            (only for ERC1155 tokens) the amount (value) required to burn\\n     * @param minTokenId        (only for RANGE validation) the minimum valid token ID\\n     * @param maxTokenId        (only for RANGE validation) the maximum valid token ID\\n     * @param merkleRoot        (only for MERKLE_TREE validation) the root of the merkle tree of\\n     *                          valid token IDs\\n     */\\n    struct BurnItem {\\n        ValidationType validationType;\\n        address contractAddress;\\n        BurnTokenSpec burnTokenSpec;\\n        BurnFunctionSpec burnFunctionSpec;\\n        uint72 amount;\\n        uint256 minTokenId;\\n        uint256 maxTokenId;\\n        bytes32 merkleRoot;\\n    }\\n\\n    /**\\n     * @param totalSupply      the maximum number of times the variation can be redeemed (0 means no limit)\\n     * @param redeemedCount    the number of times the variation has been redeemed\\n     * @param active           whether the variation is active\\n     */\\n    struct VariationState {\\n        uint16 totalSupply;\\n        uint16 redeemedCount;\\n        bool active;\\n    }\\n\\n    /**\\n     * @notice a `BurnGroup` is a group of valid `BurnItem`s\\n     * @param requiredCount     the number of `BurnItem`s (0 < requiredCount <= items.length) that \\n     *                          need to be included in a burn\\n     * @param items             the list of `BurnItem`s\\n     */\\n    struct BurnGroup {\\n        uint256 requiredCount;\\n        BurnItem[] items;\\n    }\\n\\n    /**\\n     * @notice parameters for burn redeem intialization/updates\\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\\n     * @param totalSupply       the maximum number of redemptions to redeem (0 for unlimited)\\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\\n     * @param endDate           the end time for the burn redeem (0 for never)\\n     * @param signer            the address of the signer for the transaction details\\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\\n     * @param variationLimits        a list of `Variation` ids and limits\\n     */\\n    struct PhysicalClaimParameters {\\n        address payable paymentReceiver;\\n        uint16 totalSupply;\\n        uint48 startDate;\\n        uint48 endDate;\\n        address signer;\\n        BurnGroup[] burnSet;\\n        VariationLimit[] variationLimits;\\n    }\\n\\n    /**\\n     * @notice parameters\\n     */\\n    struct VariationLimit {\\n        uint8 id;\\n        uint16 totalSupply;\\n    }\\n\\n    /**\\n     * @notice the state for a physical claim\\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\\n     * @param redeemedCount     the amount currently redeemed\\n     * @param totalSupply       the maximum number of redemptions to redeem (0 for unlimited)\\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\\n     * @param endDate           the end time for the burn redeem (0 for never)\\n     * @param signer            the address of the signer for the transaction details\\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\\n     * @param variationIds      a list of variation IDs for the redemptions\\n     * @param variations        a mapping of `Variation`s for the redemptions\\n     */\\n    struct PhysicalClaim {\\n        address payable paymentReceiver;\\n        uint16 redeemedCount;\\n        uint16 totalSupply;\\n        uint48 startDate;\\n        uint48 endDate;\\n        address signer;\\n        BurnGroup[] burnSet;\\n        uint8[] variationIds;\\n        mapping(uint8 => VariationState) variations;\\n    }\\n\\n    /**\\n     * @notice the state for a physical claim\\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\\n     * @param redeemedCount     the amount currently redeemed\\n     * @param totalSupply       the maximum number of redemptions to redeem (0 for unlimited)\\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\\n     * @param endDate           the end time for the burn redeem (0 for never)\\n     * @param signer            the address of the signer for the transaction details\\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\\n     * @param variationIds      a list of variation IDs for the redemptions\\n     * @param variations        a mapping of `Variation`s for the redemptions\\n     */\\n    struct PhysicalClaimView {\\n        address payable paymentReceiver;\\n        uint16 redeemedCount;\\n        uint16 totalSupply;\\n        uint48 startDate;\\n        uint48 endDate;\\n        address signer;\\n        BurnGroup[] burnSet;\\n        VariationState[] variationStates;\\n    }\\n\\n    /**\\n     * @notice a submission for a physical claim\\n     * @param instanceId            the instanceId of the physical claim\\n     * @param count                 the number of times to perform a claim for this instance\\n     * @param currentClaimCount     the current number of times the physical claim has been redeemed\\n     * @param variation             the variation to redeem\\n     * @param data                  the data for the transaction\\n     * @param signature             the signature for the transaction\\n     * @param message               the message for the transaction\\n     * @param nonce                 the nonce for the transaction\\n     * @param totalCost             the total cost for the transaction\\n     * @param burnTokens            the tokens to burn\\n     */\\n    struct PhysicalClaimSubmission {\\n        uint56 instanceId;\\n        uint16 count;\\n        uint16 currentClaimCount;\\n        uint8 variation;\\n        bytes data;\\n        bytes signature;\\n        bytes32 message;\\n        bytes32 nonce;\\n        uint256 totalCost;\\n        BurnToken[] burnTokens;\\n    }\\n\\n    /**\\n     * @notice a pointer to a `BurnItem` in a `BurnGroup` used in calls to `burnRedeem`\\n     * @param groupIndex        the index of the `BurnGroup` in `PhysicalClaim.burnSet`\\n     * @param itemIndex         the index of the `BurnItem` in `BurnGroup.items`\\n     * @param contractAddress   the address of the contract for the token\\n     * @param id                the token ID\\n     * @param merkleProof       the merkle proof for the token ID (only for MERKLE_TREE validation)\\n     */\\n    struct BurnToken {\\n        uint48 groupIndex;\\n        uint48 itemIndex;\\n        address contractAddress;\\n        uint256 id;\\n        bytes32[] merkleProof;\\n    }\\n\\n    struct TokensUsedQuery {\\n        uint256 instanceId;\\n        address[] contractAddresses;\\n        uint256[] tokenIds;\\n    }\\n\\n    /**\\n     * @notice get a physical claim corresponding to an instanceId\\n     * @param instanceId                the instanceId of the physical claim\\n     * @return PhysicalClaim            the physical claim object\\n     */\\n    function getPhysicalClaim(uint256 instanceId) external view returns(PhysicalClaimView memory);\\n\\n    /**\\n     * @notice gets the number of redemptions for a physical claim for a given redeemer\\n     * @param instanceId           the instanceId of the physical claim\\n     * @return redeemer            the address who redeemed\\n     */\\n    function getRedemptions(uint256 instanceId, address redeemer) external view returns(uint256);\\n\\n    /**\\n     * @notice gets the redemption state for a physical claim for a given variation\\n     * @param instanceId           the instanceId of the physical claim\\n     * @param variation            the variation\\n     * @return VariationState      the max and available for the variation\\n     */\\n    function getVariationState(uint256 instanceId, uint8 variation) external view returns(VariationState memory);\\n\\n    /**\\n     * @notice gets the redemption state for a tokenId/contractAddress on an instance\\n     * @param tokensUsedQuery      the query for instance id and list of tokenIds and contracts\\n     * @return bool[]              true/false for each tokenId/contractAddress pair\\n     */\\n    function getAreTokensUsed(TokensUsedQuery calldata tokensUsedQuery) external view returns(bool[] memory);\\n\\n    /**\\n     * @notice burn tokens and physical claims multiple times in a single transaction\\n     * @param submissions               the submissions for the physical claims\\n     */\\n    function burnRedeem(PhysicalClaimSubmission[] calldata submissions) external payable;\\n    \\n    /**\\n     * @notice recover a token that was sent to the contract without safeTransferFrom\\n     * @param tokenAddress              the address of the token contract\\n     * @param tokenId                   the id of the token\\n     * @param destination               the address to send the token to\\n     */\\n    function recover(address tokenAddress, uint256 tokenId, address destination) external;\\n}\\n\"\r\n    },\r\n    \"contracts/physicalclaim/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface Burnable721 {\\n    function burn(uint256 tokenId) external;\\n}\\n\\ninterface OZBurnable1155 {\\n    function burn(address account, uint256 id, uint256 value) external;\\n}\\n\\ninterface Manifold1155 {\\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@manifoldxyz/=node_modules/@manifoldxyz/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"create2-helpers/=lib/create2-helpers/src/\",\r\n      \"create2-scripts/=lib/create2-helpers/script/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\r\n      \"operator-filter-registry/=node_modules/operator-filter-registry/\",\r\n      \"truffle/=node_modules/truffle/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/murky:ds-test/=lib/murky/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/murky:forge-std/=lib/murky/lib/forge-std/src/\",\r\n      \"lib/murky:openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\r\n      \"lib/operator-filter-registry:ds-test/=lib/operator-filter-registry/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/operator-filter-registry:erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/operator-filter-registry:forge-std/=lib/operator-filter-registry/lib/forge-std/src/\",\r\n      \"lib/operator-filter-registry:openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"lib/operator-filter-registry:openzeppelin-contracts/=lib/operator-filter-registry/lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"contracts/physicalclaim/PhysicalClaimLib.sol\": {\r\n        \"PhysicalClaimLib\": \"0xc5bf0d8fd1e86d05b35a8f76c7ec8dd24c651251\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractDeprecated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnFunctionSpec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnTokenSpec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRedeemAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVariation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PhysicalClaimDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PhysicalClaimInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedContractVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint56\",\"name\":\"instanceId\",\"type\":\"uint56\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentClaimCount\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"groupIndex\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"itemIndex\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnToken[]\",\"name\":\"burnTokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.PhysicalClaimSubmission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"}],\"name\":\"burnRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_deprecated\",\"type\":\"bool\"}],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPhysicalClaimCore.TokensUsedQuery\",\"name\":\"tokensUsedQuery\",\"type\":\"tuple\"}],\"name\":\"getAreTokensUsed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"}],\"name\":\"getPhysicalClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"redeemedCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IPhysicalClaimCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnTokenSpec\",\"name\":\"burnTokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnFunctionSpec\",\"name\":\"burnFunctionSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"redeemedCount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IPhysicalClaimCore.VariationState[]\",\"name\":\"variationStates\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.PhysicalClaimView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"getRedemptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"}],\"name\":\"getVariationState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"redeemedCount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IPhysicalClaimCore.VariationState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IPhysicalClaimCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnTokenSpec\",\"name\":\"burnTokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnFunctionSpec\",\"name\":\"burnFunctionSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"}],\"internalType\":\"struct IPhysicalClaimCore.VariationLimit[]\",\"name\":\"variationLimits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.PhysicalClaimParameters\",\"name\":\"physicalClaimParameters\",\"type\":\"tuple\"}],\"name\":\"initializePhysicalClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IPhysicalClaimCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnTokenSpec\",\"name\":\"burnTokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IPhysicalClaimCore.BurnFunctionSpec\",\"name\":\"burnFunctionSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"}],\"internalType\":\"struct IPhysicalClaimCore.VariationLimit[]\",\"name\":\"variationLimits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPhysicalClaimCore.PhysicalClaimParameters\",\"name\":\"physicalClaimParameters\",\"type\":\"tuple\"}],\"name\":\"updatePhysicalClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhysicalClaim", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000a8863bf1c8933f649e7b03eb72109e5e187505ea", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}