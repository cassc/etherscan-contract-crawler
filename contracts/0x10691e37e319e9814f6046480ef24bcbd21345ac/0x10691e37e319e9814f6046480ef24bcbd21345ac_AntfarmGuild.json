{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/AntfarmGuild.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IAntfarmPosition.sol\\\";\\n\\ninterface Igovernor {\\n    function getVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface IAntfarming {\\n    function currentRewards(uint256 positionId)\\n        external\\n        view\\n        returns (uint256 amount);\\n}\\n\\ncontract AntfarmGuild {\\n    address public immutable antfarmPositions;\\n    address public immutable antfarming;\\n    address public immutable governor;\\n    address public immutable veAGT;\\n\\n    constructor(\\n        address _antfarmPositions,\\n        address _antfarming,\\n        address _governor,\\n        address _veAGT\\n    ) {\\n        require(_antfarmPositions != address(0));\\n        antfarmPositions = _antfarmPositions;\\n        antfarming = _antfarming;\\n        governor = _governor;\\n        veAGT = _veAGT;\\n    }\\n\\n    function checkAntvocateRole(address user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 lastBlock = block.number - 1;\\n        uint256 votingPower = Igovernor(governor).getVotes(user, lastBlock);\\n        uint256 veAGTBalance = IERC20(veAGT).balanceOf(user);\\n\\n        uint256 delegated = votingPower - veAGTBalance;\\n\\n        return (delegated, votingPower);\\n    }\\n\\n    function checkHoneyPotRole(address user) public view returns (uint256) {\\n        IAntfarmPosition ipos = IAntfarmPosition(antfarmPositions);\\n        uint256[] memory positionIds = ipos.getPositionsIds(user);\\n        IAntfarmPosition.PositionDetails[] memory posDetails = ipos\\n            .getPositionsDetails(positionIds);\\n\\n        uint256 cumulatedAtf;\\n        for (uint256 i = 0; i < posDetails.length; i++) {\\n            cumulatedAtf +=\\n                posDetails[i].cumulatedDividend +\\n                posDetails[i].dividend;\\n        }\\n\\n        uint256[] memory farmingPositionIds = ipos.getPositionsIds(antfarming);\\n        IAntfarmPosition.PositionDetails[] memory farmingPosDetails = ipos\\n            .getPositionsDetails(farmingPositionIds);\\n\\n        IAntfarming antfarmingContract = IAntfarming(antfarming);\\n        for (uint256 i = 0; i < farmingPosDetails.length; i++) {\\n            if (\\n                farmingPosDetails[i].delegate == user &&\\n                farmingPosDetails[i].owner == antfarming\\n            ) {\\n                uint256 stakedPosReward = antfarmingContract.currentRewards(\\n                    farmingPosDetails[i].id\\n                );\\n                cumulatedAtf +=\\n                    farmingPosDetails[i].cumulatedDividend +\\n                    farmingPosDetails[i].dividend +\\n                    stakedPosReward;\\n            }\\n        }\\n\\n        return cumulatedAtf;\\n    }\\n\\n    function checkAntfarmingRole(address user) public view returns (uint256) {\\n        IAntfarmPosition ipos = IAntfarmPosition(antfarmPositions);\\n        uint256[] memory farmingPositionIds = ipos.getPositionsIds(antfarming);\\n        IAntfarmPosition.PositionDetails[] memory farmingPosDetails = ipos\\n            .getPositionsDetails(farmingPositionIds);\\n\\n        uint256 userHasFarming;\\n        for (uint256 i = 0; i < farmingPosDetails.length; i++) {\\n            if (\\n                farmingPosDetails[i].delegate == user &&\\n                farmingPosDetails[i].owner == antfarming\\n            ) {\\n                userHasFarming += 1;\\n            }\\n        }\\n\\n        return userHasFarming;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAntfarmPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface IAntfarmPosition {\\n    event Create(\\n        address owner,\\n        uint256 positionId,\\n        address pair,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    event Increase(\\n        address owner,\\n        uint256 positionId,\\n        address pair,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    event Decrease(\\n        address owner,\\n        uint256 positionId,\\n        address pair,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    event Claim(\\n        address owner,\\n        uint256 positionId,\\n        address pair,\\n        uint256 amount\\n    );\\n\\n    event Lock(\\n        address owner,\\n        uint256 positionId,\\n        address pair,\\n        uint256 locktime\\n    );\\n\\n    event Burn(address owner, uint256 positionId);\\n\\n    struct Position {\\n        address pair;\\n        address delegate;\\n        bool enableLock;\\n        uint32 lock;\\n        uint256 claimedAmount;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function antfarmToken() external view returns (address);\\n\\n    struct PositionDetails {\\n        uint256 id;\\n        address owner;\\n        address delegate;\\n        address pair;\\n        address token0;\\n        address token1;\\n        uint256 lp;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 dividend;\\n        uint256 cumulatedDividend;\\n        uint16 fee;\\n        bool enableLock;\\n        uint32 lock;\\n    }\\n\\n    function getPositionDetails(\\n        uint256 positionId\\n    ) external view returns (PositionDetails memory positionDetails);\\n\\n    function getPositionsDetails(\\n        uint256[] calldata positionIds\\n    ) external view returns (PositionDetails[] memory positionsDetails);\\n\\n    function createPosition(\\n        address tokenA,\\n        address tokenB,\\n        uint16 fee,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function createPositionETH(\\n        address token,\\n        uint16 fee,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    struct IncreasePositionParams {\\n        address tokenA;\\n        address tokenB;\\n        uint16 fee;\\n        uint256 amountADesired;\\n        uint256 amountBDesired;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n        uint256 deadline;\\n        uint256 positionId;\\n    }\\n\\n    function increasePosition(\\n        IncreasePositionParams calldata params\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    struct IncreasePositionETHParams {\\n        address token;\\n        uint16 fee;\\n        uint256 amountTokenDesired;\\n        uint256 amountTokenMin;\\n        uint256 amountETHMin;\\n        uint256 deadline;\\n        uint256 positionId;\\n    }\\n\\n    function increasePositionETH(\\n        IncreasePositionETHParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function enableLock(uint256 positionId, uint256 deadline) external;\\n\\n    function disableLock(uint256 positionId, uint256 deadline) external;\\n\\n    function lockPosition(\\n        uint32 locktime,\\n        uint256 positionId,\\n        uint256 deadline\\n    ) external;\\n\\n    function burn(uint256 positionId) external;\\n\\n    function claimDividendGrouped(\\n        uint256[] calldata positionIds\\n    ) external returns (uint256 claimedAmount);\\n\\n    function getDividendPerPosition(\\n        address owner\\n    ) external view returns (uint256[] memory, uint256[] memory);\\n\\n    struct DecreasePositionParams {\\n        address tokenA;\\n        address tokenB;\\n        uint16 fee;\\n        uint256 liquidity;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n        address to;\\n        uint256 deadline;\\n        uint256 positionId;\\n    }\\n\\n    function decreasePosition(\\n        DecreasePositionParams calldata params\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    struct DecreasePositionETHParams {\\n        address token;\\n        uint16 fee;\\n        uint256 liquidity;\\n        uint256 amountTokenMin;\\n        uint256 amountETHMin;\\n        address to;\\n        uint256 deadline;\\n        uint256 positionId;\\n    }\\n\\n    function decreasePositionETH(\\n        DecreasePositionETHParams calldata params\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function claimDividend(\\n        uint256 positionId\\n    ) external returns (uint256 claimedAmount);\\n\\n    function getPositionsIds(\\n        address owner\\n    ) external view returns (uint256[] memory positionIds);\\n\\n    function setDelegate(uint256 positionId, address delegate) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_antfarmPositions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antfarming\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veAGT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"antfarmPositions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antfarming\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkAntfarmingRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkAntvocateRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkHoneyPotRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veAGT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AntfarmGuild", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000009ff19be8fa1f8cf8a017051daa5dfb491ac2ccee0000000000000000000000001272ba8c0bd855ff15c4b29bad660e6f154fca28000000000000000000000000d63123527551f037faac74bf5fda5b71569cf5af000000000000000000000000dcd2b58585df999dd145e529f09e8acafa6cd244", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}