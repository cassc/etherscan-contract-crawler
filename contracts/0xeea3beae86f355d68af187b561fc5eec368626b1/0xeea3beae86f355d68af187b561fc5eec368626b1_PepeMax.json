{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface Initializer {\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function getConfig() external returns (address, address);\r\n    function setLpPair(address pair, bool enabled) external;\r\n}\r\n\r\ncontract PepeMax is IERC20 {\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private _isExcludedFromProtection;\r\n    bool private allowedPresaleExclusion = true;\r\n   \r\n    uint256 constant private startingSupply = 7_000_000_000;\r\n    string constant private _name = \"PepeMax\";\r\n    string constant private _symbol = \"PMAX\";\r\n    uint8 constant private _decimals = 18;\r\n    uint256 constant private _tTotal = startingSupply * 10**_decimals;\r\n\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    Initializer initializer;\r\n\r\n    constructor () payable {\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n        _liquidityHolders[_owner] = true;\r\n        _tOwned[_owner] = _tTotal;\r\n        emit Transfer(address(0), _owner, _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n\r\n    address private _owner;\r\n\r\n    modifier onlyOwner() { require(_owner == msg.sender, \"Caller =/= owner.\"); _; }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        if (balanceOf(_owner) > 0) {\r\n            finalizeTransfer(_owner, newOwner, balanceOf(_owner), true);\r\n        }\r\n        \r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        require(tradingEnabled, \"Cannot renounce until trading has been enabled.\");\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(oldOwner, address(0));\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external pure override returns (uint256) { if (_tTotal == 0) { revert(); } return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { if (_tTotal == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() external onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function setNewRouter(address newRouter) external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot change after liquidity.\");\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        lpPairs[lpPair] = false;\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        lpPairs[lpPair] = true;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (!enabled) {\r\n            lpPairs[pair] = false;\r\n            initializer.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.\");\r\n            }\r\n            require(!lpPairs[pair], \"Pair already added to list.\");\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            initializer.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function setInitializer(address _initializer) public onlyOwner {\r\n        require(!tradingEnabled);\r\n        require(_initializer != address(this), \"Can't be self.\");\r\n        initializer = Initializer(_initializer);\r\n        try initializer.getConfig() returns (address router, address constructorLP) {\r\n            dexRouter = IRouter02(router); lpPair = constructorLP; lpPairs[constructorLP] = true;\r\n            _approve(_owner, address(dexRouter), type(uint256).max);\r\n            _approve(address(this), address(dexRouter), type(uint256).max);\r\n        } catch { revert(); }\r\n    }\r\n\r\n    function isExcludedFromProtection(address account) external view returns (bool) {\r\n        return _isExcludedFromProtection[account];\r\n    }\r\n\r\n    function setExcludedFromProtection(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromProtection[account] = enabled;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n    function excludePresaleAddresses(address router, address presale) external onlyOwner {\r\n        require(allowedPresaleExclusion);\r\n        require(router != address(this) \r\n                && presale != address(this) \r\n                && lpPair != router \r\n                && lpPair != presale, \"Just don't.\");\r\n        if (router == presale) {\r\n            _liquidityHolders[presale] = true;\r\n        } else {\r\n            _liquidityHolders[router] = true;\r\n            _liquidityHolders[presale] = true;\r\n        }\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != _owner\r\n            && to != _owner\r\n            && tx.origin != _owner\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this)\r\n            && from != address(initializer)\r\n            && to != address(initializer);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool buy = false;\r\n        bool sell = false;\r\n        bool other = false;\r\n        if (lpPairs[from]) {\r\n            buy = true;\r\n        } else if (lpPairs[to]) {\r\n            sell = true;\r\n        } else {\r\n            other = true;\r\n        }\r\n        if (_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                if (!other) {\r\n                    revert(\"Trading not yet enabled!\");\r\n                } else if (!_isExcludedFromProtection[from] && !_isExcludedFromProtection[to]) {\r\n                    revert(\"Tokens cannot be moved until trading is live.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return finalizeTransfer(from, to, amount, other);\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            if (address(initializer) == address(0)){\r\n                initializer = Initializer(address(this));\r\n            } else {\r\n                _liquidityHolders[from] = true;\r\n                _hasLiqBeenAdded = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if (address(initializer) == address(0)){\r\n            initializer = Initializer(address(this));\r\n        }\r\n        try initializer.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n        allowedPresaleExclusion = false;\r\n    }\r\n\r\n    function sweepBalance() external onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    function sweepExternalTokens(address token) external onlyOwner {\r\n        IERC20 TOKEN = IERC20(token);\r\n        TOKEN.transfer(_owner, TOKEN.balanceOf(address(this)));\r\n    }\r\n\r\n    function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n        for (uint16 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]*10**_decimals, \"Not enough tokens.\");\r\n            finalizeTransfer(msg.sender, accounts[i], amounts[i]*10**_decimals, true);\r\n        }\r\n    }\r\n\r\n    function finalizeTransfer(address from, address to, uint256 amount, bool other) internal returns (bool) {\r\n        _tOwned[from] -= amount;\r\n        _tOwned[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\r\n                revert(\"Pre-liquidity transfer protection.\");\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializer\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepExternalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PepeMax", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1a988a8f36ee449b388f14d68cefed6bb6b53aa05acfaa127fe0b5c426a7096"}