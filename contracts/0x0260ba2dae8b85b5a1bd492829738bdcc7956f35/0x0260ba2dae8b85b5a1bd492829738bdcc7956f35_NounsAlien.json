{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n* This contract will offer to buy an Alien punk, in exchange for stETH.\r\n* The bought punk will be transferred to the Nouns DAO treasury at\r\n* 0x0BC3807Ec262cB779b38D65b38158acC3bfedE10\r\n*\r\n* To sell your Alien to this contract in exchange for the entire stETH\r\n* balance held by this contract, use the \"offerPunkForSaleToAddress\"\r\n* functionality (\"Offer to Address\"), and make sure to sell to this\r\n* contract's address. The price should be for a small amount of ETH,\r\n* say 1 ETH. After making an \"Offer to Address\", call the procure method of this\r\n* contract with your Alien punk id. You will then receive all of the\r\n* stETH held by this contract in exchange.\r\n*\r\n*/\r\ncontract NounsAlien {\r\n\r\n    mapping (uint16 => bool) public aliens;\r\n    ICryptoPunk immutable public punks;    // CryptoPunks contract\r\n    IERC20 immutable public stETH;         // stETH address 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\n    address constant public nounsDao = 0x0BC3807Ec262cB779b38D65b38158acC3bfedE10;\r\n    uint64 constant public TIMEOUT = uint64(86400 * 69); // 69 days\r\n    uint64 immutable public deployedAt;\r\n    constructor() {\r\n        aliens[635] = true;\r\n        aliens[2890] = true;\r\n        aliens[3100] = true;\r\n        aliens[3443] = true;\r\n        aliens[5822] = true;\r\n        aliens[5905] = true;\r\n        aliens[6089] = true;\r\n        aliens[7523] = true;\r\n        aliens[7804] = true;\r\n        punks = ICryptoPunk(address(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB));\r\n        stETH = IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\r\n        deployedAt = uint64(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev give back entire holding of stETH in this contract to the Nouns DAO\r\n    *    after 69 days since deployment of this contract.\r\n    */\r\n    function returnStETH() external {\r\n        if (block.timestamp - deployedAt > TIMEOUT) {\r\n            require(\r\n                stETH.transfer(nounsDao, stETH.balanceOf(address(this))),\r\n                \"failed to send stETH\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev settle buys the punk token, transfers the entire balance of stETH\r\n    *    to the seller, sends the punk token to the Nouns DAO treasury.\r\n    *    Anyone can call this function. When calling the function, please make\r\n    *    sure to send some ETH with the function. The amount of ETH would need\r\n    *    to equal the value that the alien punk has been offered for.\r\n    */\r\n    function settle(uint16 punkId) external payable  {\r\n        require(aliens[punkId] == true, \"punkId not alien\");\r\n        address punkOwner = punks.punkIndexToAddress(punkId);              // get the punk owner's address\r\n        (bool isForSale,,,uint minValue,address onlySellTo) =\r\n            punks.punksOfferedForSale(punkId);\r\n        require(isForSale == true, \"punk not for sale\");\r\n        require(\r\n            onlySellTo == address(this),\r\n            \"please use offerPunkForSaleToAddress\"\r\n        );\r\n        require(minValue <= msg.value, \"not enough effiriums\");            // we need a small amount, eg 1 wei\r\n        punks.buyPunk{value:minValue}(punkId);                             // buy a punk with minimal ETH\r\n        require(punks.punkIndexToAddress(punkId) == address(this), \"nope\");// did we get it?\r\n        punks.transferPunk(nounsDao, punkId);                              // send the punk to the Nouns treasury\r\n        require(\r\n            stETH.transfer(punkOwner, stETH.balanceOf(address(this))),\r\n            \"failed to send stETH\"\r\n        );                                                                 // pay the stETH payment to the seller\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/* 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB */\r\ninterface ICryptoPunk {\r\n    //function balanceOf(address account) external view returns (uint256);\r\n    function punkIndexToAddress(uint256 punkIndex) view external returns (address);\r\n    function punksOfferedForSale(uint256 punkIndex) view external returns\r\n    (\r\n        bool,    // isForSale\r\n        uint256, // punkIndex\r\n        address, // seller\r\n        uint256, // minValue in ether\r\n        address  // specify to sell only to a specific person\r\n    );\r\n    function buyPunk(uint punkIndex) external payable;\r\n    //function transferPunk(address to, uint punkIndex) external;\r\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) external;\r\n    function offerPunkForSale(uint punkIndex, uint minSalePriceInWei) external;\r\n    function withdraw() external;\r\n    function transferPunk(address to, uint punkIndex) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TIMEOUT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"aliens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punks\",\"outputs\":[{\"internalType\":\"contract ICryptoPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnStETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"punkId\",\"type\":\"uint16\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NounsAlien", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2bc3804a01df9261ed19b22ef16b20ecef1281d1c4a565d99bd02605af589720"}