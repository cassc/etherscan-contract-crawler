{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**  \r\nTG- https://t.me/ApolloEntry\r\n\r\nWEB- https://www.aplo11.com/\r\n*/\r\npragma solidity ^0.8.19;\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract Apollo is Context, IERC20, Ownable {\r\n\r\n    using Address for address payable;\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n    \r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping (address => bool) public _isExcludedFromMaxBalance;\r\n\r\n    uint8 private constant _decimals = 9; \r\n    uint256 private _tTotal = 1_000_000 * (10**_decimals);\r\n    uint256 public swapThreshold = 5_000 * (10**_decimals);\r\n    uint256 public maxWallet =  20_000 * (10**_decimals);\r\n    \r\n    uint8 public buyTax = 25;\r\n    uint8 public sellTax = 25;\r\n\r\n    string private constant _name = \"Apollo 11\"; \r\n    string private constant _symbol = \"$Apollo\";\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketingWallet = 0x80324100Be7aCcB7A6556ef082d9CC1A47E17041;\r\n    address public autoLPWallet = 0x3c976fA0Db5205179BD411935F7eD946F8D81E52;\r\n\r\n    bool private swapping;\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor () {\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n        _approve(owner(), address(router), ~uint256(0));\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[DEAD] = true;\r\n\r\n        _isExcludedFromMaxBalance[owner()] = true;\r\n        _isExcludedFromMaxBalance[address(this)] = true;\r\n        _isExcludedFromMaxBalance[pair] = true;\r\n        _isExcludedFromMaxBalance[marketingWallet] = true;\r\n        _isExcludedFromMaxBalance[DEAD] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _preTransferCheck(address from,address to,uint256 amount) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(to) + amount <= maxWallet || _isExcludedFromMaxBalance[to], \"Transfer amount exceeds the maxWallet.\");\r\n        if (balanceOf(address(this)) >= swapThreshold && !swapping && from != pair && from != owner() && to != owner())\r\n            swapAndLiquify();\r\n    }\r\n\r\n    function _getValues(address from,address to, uint256 amount) private returns(uint256){\r\n        uint256 taxedTokens = amount * buyTax / 100;\r\n        if(to == pair)\r\n            taxedTokens = amount * sellTax / 100;\r\n        if (taxedTokens > 0){\r\n            _tOwned[address(this)] += taxedTokens;\r\n            emit Transfer (from, address(this), taxedTokens);\r\n        }\r\n        return (amount - taxedTokens);\r\n    }\r\n    \r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        _preTransferCheck(from, to, amount);\r\n        _tOwned[from] -= amount;\r\n        uint256 transferAmount = amount;\r\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to])\r\n            transferAmount = _getValues(from, to, amount);\r\n        _tOwned[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function swapAndLiquify() private lockTheSwap{\r\n\r\n        uint256 tokensForMarketing = swapThreshold * 80 / 100;\r\n        uint256 tokensForLiquidity = swapThreshold * 20 / 100;\r\n        \r\n        if(tokensForMarketing > 0){\r\n            uint256 ethSwapped = swapTokensForETH(tokensForMarketing);\r\n            if(ethSwapped > 0)\r\n                payable(marketingWallet).transfer(ethSwapped);\r\n        }\r\n\r\n        if(tokensForLiquidity > 0){\r\n            uint half = tokensForLiquidity / 2;\r\n            uint otherHalf = tokensForLiquidity - half;\r\n            uint balAutoLP = swapTokensForETH(half);\r\n            if (balAutoLP > 0)\r\n                addLiquidity(otherHalf, balAutoLP);\r\n        }\r\n\r\n        if (address(this).balance > 0)\r\n            payable(marketingWallet).sendValue(address(this).balance);\r\n\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private returns (uint256) {\r\n        uint256 initialBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        return (address(this).balance - initialBalance);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        (,uint256 ethFromLiquidity,) = router.addLiquidityETH {value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            autoLPWallet,\r\n            block.timestamp\r\n        );\r\n        \r\n        if (ethAmount - ethFromLiquidity > 0)\r\n            payable(marketingWallet).sendValue (ethAmount - ethFromLiquidity);\r\n    }\r\n    \r\n    function setContractLimits(uint256 maxWalletEXACT_) external onlyOwner{\r\n        uint256 minimumAmount = 5_000 * (10**_decimals);\r\n        require(maxWalletEXACT_ * (10**_decimals) >= minimumAmount, \"Invalid Settings!\");\r\n        maxWallet = maxWalletEXACT_ * (10**_decimals);\r\n    }\r\n\r\n    function setContractSettings(uint8 buyTax_ , uint8 sellTax_) external onlyOwner{\r\n        require(buyTax_ <= 20 && sellTax_ <= 50, \"Invalid Settings!\");\r\n        buyTax = buyTax_; sellTax = sellTax_;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 swapThresholdEXACT_) external onlyOwner{\r\n        swapThreshold = swapThresholdEXACT_ * (10**_decimals);\r\n    }\r\n\r\n    function manualSwap() external lockTheSwap{\r\n        require(msg.sender == marketingWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(tokenBalance > 0){\r\n            uint256 ethSwapped = swapTokensForETH(tokenBalance);\r\n            if(ethSwapped > 0)\r\n                payable(marketingWallet).transfer(ethSwapped);\r\n        }\r\n        if (address(this).balance > 0)\r\n            payable(marketingWallet).sendValue(address(this).balance);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLPWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletEXACT_\",\"type\":\"uint256\"}],\"name\":\"setContractLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax_\",\"type\":\"uint8\"}],\"name\":\"setContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapThresholdEXACT_\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Apollo", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca5b6cfef85cdc8c4abb452e2c73488c63cc82d44498fd83e8c116602d459699"}