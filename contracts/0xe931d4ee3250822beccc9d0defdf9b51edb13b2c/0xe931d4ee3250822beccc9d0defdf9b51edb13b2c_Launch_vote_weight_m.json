{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title Launch vote weight measure\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n@notice\r\n    Defines voting weight at launch, measured as:\r\n      user's st-yETH weight + user's share of bootstrap st-yETH weight\r\n\"\"\"\r\n\r\ninterface Measure:\r\n    def total_vote_weight() -> uint256: view\r\n    def vote_weight(_account: address) -> uint256: view\r\nimplements: Measure\r\n\r\ninterface Staking:\r\n    def totalSupply() -> uint256: view\r\n    def vote_weight(_account: address) -> uint256: view\r\n\r\ninterface Bootstrap:\r\n    def deposited() -> uint256: view\r\n    def deposits(_account: address) -> uint256: view\r\n\r\nstaking: public(immutable(address))\r\nbootstrap: public(immutable(address))\r\n\r\n@external\r\ndef __init__(_staking: address, _bootstrap: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _staking Staking contract\r\n    @param _bootstrap Bootstrap contract\r\n    \"\"\"\r\n    staking = _staking\r\n    bootstrap = _bootstrap\r\n\r\n@external\r\n@view\r\ndef total_vote_weight() -> uint256:\r\n    \"\"\"\r\n    @notice Get total vote weight\r\n    @return Total vote weight\r\n    @dev\r\n        Equal to sum of all vote weights at T=inf.\r\n        Care should be taken to use for quorum purposes, as the sum of actual available \r\n        vote weights will be lower than this due to asymptotical vote weight increase.\r\n    \"\"\"\r\n    return Staking(staking).totalSupply()\r\n\r\n@external\r\n@view\r\ndef vote_weight(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get account vote weight\r\n    @param _account Account to get vote weight for\r\n    @return Account vote weight\r\n    \"\"\"\r\n    weight: uint256 = Bootstrap(bootstrap).deposits(_account)\r\n    if weight > 0:\r\n        deposited: uint256 = Bootstrap(bootstrap).deposited()\r\n        if deposited > 0:\r\n            weight = weight * Staking(staking).vote_weight(bootstrap) / deposited\r\n        else:\r\n            weight = 0\r\n    return weight + Staking(staking).vote_weight(_account)", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_staking\",\"type\":\"address\"},{\"name\":\"_bootstrap\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_vote_weight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_weight\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staking\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bootstrap\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Launch vote weight measure", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000583019ff0f430721ada9cfb4fac8f06ca104d0b40000000000000000000000007cf484d9d16ba26ab3bcdc8ec4a73ac50136d491", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}