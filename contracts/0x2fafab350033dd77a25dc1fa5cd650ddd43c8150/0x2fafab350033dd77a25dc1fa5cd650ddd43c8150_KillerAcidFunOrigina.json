{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/KillerAcidFunOriginalsSales.sol\": {\r\n      \"content\": \"// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMNOdxXMMMMMMMMNOdlloxXMMMXxooxXMMMXxokNMXOxoxXMMMMNOxoodkXW0xkKMMKxdONKxddddddddONMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMMNx,   ...kMMWd    oWMMx. ,KMO:. .kMWKl'   ...dN:  lWWl  '0x.      . ;0MMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMNo. .cOK00WMMK;    ,KMMd  ,KMOc. .kWk.  .lk00OXN:  .;;.  '0N00k'  :00KWMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMO.  cNMMMMMMMx. ..  oWMd  ,KMOl. .x0'  'OMWNXNWN:   ...  '0MMMX;  oMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMk.  cWMMMMMMX;  ',  '0Md  '0Mk:. .kO.  ;XM0:.;ON:  :XXc  '0MMMX;  oMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMK;  .dXWWNWMx.       lWO.  :k;   ,KNl   ,dc. .kN:  cWWl  '0MMMX;  oMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMM0'  dMMMMMMKc.  .,,;OX;  :xkl. .ONo.      .xWMNx,      .kWc  cWWl  '0MMMX;  oMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMXdcl0MMMMMMMW0dc;;;c0Xo:lKMMNxcl0MWOoc:clo0WMMMMNOdc::cxXWOlcOWM0lcdXMMMNxcl0MMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMWklclOWMMMMMMMMMMWKxlcclkNMWKdc:clkNMM0olxXMXxlo0XxoooooooooxXXxooooodx0WMMMNklcl0MMMMMW0dlcclkN0dooooooookNMMM\\n// MMMMMM0'   ,KMMMMMMMMMKc.  ...:XNo.  .   :XWl   ;KO.  oO,...    ..'Ok.  ...  .cXMMO.   ;XMMM0:.  ...cXd...    ..cXMMM\\n// MMMMMWo     oWMMMMMMMK;  'xXXKXWo  .dKo.  oWl    ;d.  oWXKK0:  ,0KKWk. .dX0:  .kMWl    .xMM0'  'kXXKXMNKKk'  lKKXWMMM\\n// MMMMMK, .'. ,KMMMMMMMo  .xMMMMMK,  lWMK,  cNl     .   oMMMMWl  :NMMMk.  ':,.  ;KM0' .'. ;KWl  .kMMMMMMMMMK,  dMMMMMMM\\n// MMMMWo  .,.  oWMMMMMWl  .xMMMMM0'  oMM0'  oWl         oMMMMWl  :NMMMk.  ..   :KMWo  .,.  dNc  .kMMMMMMMMMK,  dMMMMMMM\\n// MMMMK,       '0MMMMMMO.  'kXNXNNc  'xx,  '0Wl  ;o.    oMMMMWl  :NMMMk. .xO'  cNM0'       ,Kk.  ,kXNXNMMMMK,  dMMMMMMM\\n// MMMWd  'xOk;  lWMMMMMWO;.  .'.:KK:      'OWWl  ;XO'   oMMMMWl  :NMMMk. .OWx. .xWo  ,kOk,  oNk,   .'.cXMMMK,  dMMMMMMM\\n// MMMWkccOWMMKolkNMMMMMMMW0dc::cdXMNkl::cxXMMMOllkWM0oll0MMMMWOolOWMMMXdldXMNkllkNkclOMMM0olkWMNOdc::cxXMMMNkloKMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMNkodKMWOllkNKolxXMMMWKxocccdKWOod0MM0olxNMMMMWOlccccccccoKKdlllllodONMMMXxc::co0WMXdloOWMMMMM0olokNMMMMMMMMM\\n// MMMMMMMMMK,  oNX:  ,Kd. '0MWO:.  ....xN:  lNXc  '0MMMMWc    .....,Ox.  ...   cXWk'  ..  .xWO.  .xWMMMO'   ,KMMMMMMMMM\\n// MMMMMMMMMK,  .'.   ,Kd  '0Wd.  ,xKXXKNN:  .'..  '0MMMMWc   'xO0KKXWk. .xX0:  .kO.  cK0,  ,KO.   .xWWO'    ,KMMMMMMMMM\\n// MMMMMMMMMX;  .;,.  ,Kd  '0O.  ,KMWK0KNN:  .,,.  '0MMMMWc    ..cKMMMk.  ';'.  :Ko  '0MMd  .OO.    .ox.     ,KMMMMMMMMM\\n// MMMMMMMMMX;  oWN:  ,Kd  '0O.  ,KMO,.'ON:  cWWc  '0MMMMWc   .::dXMMMk.  ..   cXWo  ,KMNc  ,KO.  ..     ;,  ,KMMMMMMMMM\\n// MMMMMMMMMX;  oMN:  ,Kd  '0No.  .c:  .kN:  lWWc  '0MMMMWc   :NMMMMMMk. .O0'  cNMO.  ckc. .dWO.  ox.   cXo  ,KMMMMMMMMM\\n// MMMMMMMMMN:  oMNc  ,Kd  '0MNk;.     .ONc  lWWl  '0MMMMWc   :NMMMMMMk. .OWx. .dWWx.     .oNMO.  dWO,.oNMo  ,KMMMMMMMMM\\n// MMMMMMMMMWOddKMW0ddONKxdkNMMMWKkdoodONW0dd0MM0ddkNMMMMWOoooOWMMMMMMXxoxXMWOooOWMMKxlcld0WMMXkdxKMMXKWMMKddONMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMM0lcoXWOlclOWNxclOWOc:xWMMMMMXo::lKMMMMMWk::ccccc:xNXdccccccokXMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMd  .xo.  cXMX;  oWl  :NMMMMMO.  .kMMMMMWc   .....lN0'  .'..  ,0MMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMo   .   ,KMMX;  oWl  :NMMMMMO.  .kMMMMMN:  ;kO0XXNW0'  oNKc   dMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMd       .dWMX;  oWc  :NMMMMMk.  .OMMMMMN:   ..:KMMM0'  .'..  ,0MMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMd   ,kd. '0MX;  oWc  cNMMMMMk.  .OMMMMMN:  .ccdXMMM0'  .'   ;KMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMd  .OMNc  cNX;  oN:  ,kOOO0Nk.  .oOOOOXN:  ;OOOOO0N0' .xX:  ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMd  .OMMO. .xX;  oN:       'Ox.        oX:        .x0' .xM0'  lNMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMKxdkNMMW0xx0W0dxKWOdddddddxXXxdddddddd0WOdddddddddKNkdxXMM0ddONMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMWWWWMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo,,;OMMMMMXxc,',,;xNKl:oKXo,,,;:lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx.   ;XMMWx'  .;;,,dWk. .O0'  ...  ;0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:    .dWWx.  cXMMWWWMk. .OO. .ONO;  :NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. .;. ,KN:  '0MMMMMMMk. .OO. '0MMk. '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:  ..   dN:  .kMMMMMMMk. .OO. '0MWd. ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.  ...  ,Kk.  'd00OOXMk. .OO. .oxc. .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc  cKX0;  oW0c.      :Xk. .OO.     .,kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOdxXMMMXkkKWMWXOdoodd0NNOkONNkdddxk0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWMMWWWWMMMWWWMMWWWMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo,,,,,,,,lXk,,,dWMk;'lX0:,;xNWd,,oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;  .,;,,,oXl   cNMd  '0x.  .oX:  ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;  ;kOKWWWNc   cWMx. '0x.   .:,  ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;     cNMMN:   cNMx. '0k.        ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;  ,odOWMMWl   ,KWl  ,Kk. ..     ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO0WX;  oMMMMMMMk.   ,;.  lWk. .xl    ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd.'0X;  dMMMMMMMWx'..   .lXMk. .ONd.  :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXO0WW0kkXMMMMMMMMMNK0kkOXWMMNOkONMWKkkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXKK0KXNWMMMMMMMMMMMMMMMMMMMMMMWKxo:,'''';:lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMW0dc;'.......,:ldOXWMMMMMMMMMMMMMMWk;.             .;oOXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMWO;.                .;lkNMMMMMMMMMMMk.    ':cclc:;'.     .:xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMO.    .;codxxxdoc;'.    'l0WMMMMMMMWl   .xNMN0OO0KNXOd:.    'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMN:   .dKKkollox0NMMN0d:.   .c0WMMMMMN:   lWMXc.  ..;dXWWXd'    ,kNMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMK,  .OWk' ...  .,kNMMMWK:    .oxdoddl.   lWMO. ;xd'  .oXMMXd.    cXMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMM0'  cNK, ;0Nd.    cXMMMMXc               lWMK, :NMx.   ;0MMW0;    ,OWMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMM0'  oMK, :NM0'     ;0MMMM0'              lWMX; ;XMk.    :XMMMX;    .kWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMO.  oWWc .OMNc      ,0MMMX;     .:::'    cWMX; ;XMO.    .kMMMMk.    .kWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMk.  cNMx. oWMd       cNMMN:   .dXWMM0'   cWMX; ,KMO.     lWMMMX;     '0MMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMx.  ,KMX; ,OKo.      ;XMM0'  .xWMMMM0'   oWMWo .;oc.     .OMMMWl      ;XMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMWXl   '0MWk. ...   ...'xWMMx.  :XMMMMMNo  ,0MMMNx:'.        dMMMWl       cNMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMNk:.    cXMMMXkdxkOO00KKNMMMMXd:oKMMMMMMMN0OXMMMMMMMWX0kdc,''cKMMWx.       .dWMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMNl.   .:xXMMMMMMMMMMMMMMMWX00NMMMMMMMMMMMMMMMMMMMMMMMMMWXNWWWWMMMWd.         '0MMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMNl   .xNWMMMMMMMMMMMMMMMMKc.  ,OMMMMMMMMMMMMMMMMMMMMMMWk,..oNMMMMWd.           lNMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMWd.   .lXMMMMMMMWNXKKXXWMX;     lWMMMMMMMWWNK0OOO0KNWMMO.   .OMMMMX;            .oWMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMM0'     .xMMMW0dc,......'::.     oWMMMWKxc;''''''''.';lx:    .xMMMMW0occldxxo;.   .kMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMWo    .;xNMKo,..,ldxkkkdl;.     .xMMWO:.'cdxk0KXXXKOxl,.      dMMMMMMMMMMMMMMWK:   :NMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMX;   :0WMXo. ,dKWMMMMMMMMWXx,   .xMXl.'xXMMMMMMMMMMMMMWO:     dMMMMMMMMMMMMMMMM0'  .OMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMO.   lNMK;  ;dxxxddoolllcccc;.  .kNl .lxxxkkkkkkkkkkOOO0Oc    dMMMMMMMMMMMMMMMMX;   oMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMk.    oXc        .'''.     .'.  .xk. ..       ...     ....    oWMMMMMMMMMMMMMMMX;   :NMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMx.    ;k, :k:    :kkd'    lXNk. '0d 'kO;    .cxxd'   .oOOk:   .oNMMMMMMMMMMMMMMK,   ,KMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMx.   .x0' oMXl.         'xNMWo  lWx.'0MK:.   ....   .xWMMN:     ;0MMMMNkdodxkOkc.   lNMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMx.  'kWNc ,KMW0o:;'';coONMMNd. :KMK, cXMW0oc;'....;oKWMMWd.      ;XMM0;            .kMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMx. ,KMMM0, ,OWMMMWWWWMMMMNk; .oXWX0l. 'lxOKNNNXKKXWMMMWKc.    .,cOWMM0'             ;KMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMO. ;0XNMMKc..:x0XNWWNX0kl'..cddc,..       ..,cd0KKXKOd:.  .;lxKWMMMMMWx.          .. .dNMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMWKl. .,',cONW0;  ..''''.. .:lc;. .;loxkkOOkdl:,.  ....      .,;l0MMMMMMMWO,         .c:  ,kWMMMMMMMMMMMM\\n// MMMMMMMMMMMMXl';dOKKOo..ck0Oc'.....,;loo:. 'lkXMMMMMMMMMMMMWKx:.           .,kMMMMMMMMMK;        .xNk' .oNMMMMMMMMMMM\\n// MMMMMMMMMMM0,.dNNkllkXO.  .'l0XXXXNXkl'..ckNMMMMMMMMMMMMMMMMMMWKl.   .lxxkOKNMMMMMMMMMMM0'   .'';xNMM0' .dMMMMMMMMMMM\\n// MMMMMMMMMMK,.xWK:.,'.lX:     cXXOd:'..:xXMMMMMMMMMMMMMMMMMMMMMMMWKc.  lNMMMMMMMMMMMMMMMMWd. ,0WNWWXkl'  ,OMMMMMMMMMMM\\n// MMMMMMMMMMd ;XWl.lNk.;0:      ....;ok0xokNMMMMMMMMMMMMMMMMMMNOxxKWNl   ':oxOKNMMMMMMMMMMMK, .OMWO;.  'ckNMMMMMMMMMMMM\\n// MMMMMMMMMMo ;XX;.dk;.ox.  .',cok0NWMMO'.cXMMMMMMMMMMMMMMW0xl'.  '0MX;       .'lXMMMMMMMMMWo  dMNc   ,0MMMMMMMMMMMMMMM\\n// MMMMMMMMMMk..OWO:,,;do..cOXNWMM0l:kWMWKOKWMMMMMMMMMMMNOo,. .cl.  dMMx.        '0MWK0OO0KNWO. ;XMXd,  ,0MMMMMMMMMMMMMM\\n// MMMMMMMMMMNl.'xXNKkd;..xWMMMMMMO;,dNMMk,'oXMMMMMWNOdc'  .:d0Wd  .kMMO.      .c0WO;.    ..,;. ,KMMMNo. ,0MMMMMMMMMMMMM\\n// MMMMMMMMMMMNk,..''.  .dMMMMMMMMMWWMMMMO:;xNWX0ko;.   .,'...':.  ;XMMk.    .lKWMN:           ,kWMMMMWd. 'OWMMMMMMMMMMM\\n// MMMMMMMMMMMMMN0kkxl'  .coxk0KXXXXK00Okxdol:,..  ..  .dNNKxl;.  .kMMNc   .c0WMMMWk.         .OMMMMMMWKl. .OMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMNOo:'.   .......           ,k0KOc..lXMMMWO; .xWWx.  ,OWMMMMMMM0;        '0Nklc:;'..  ;0MMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMXl. .;lxd:.  .,cl:,','. ,KMMMWx. cXMMMMX: 'Ox. .oNMMMMMMMMMMX:    ..:OWd    ':lodONMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMWk' ,dXWWO,.'lOXNk,... :x; 'xWMMWk. lNMMMMO. .. .kWMMMMMMMMMMMM0'  lKNWMMKl.  ,xNMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMM0' ,KMMMK, :XMMWd..dKd..cd. .oNMMWl .OMMMMX;   :KMMMMMMMMMMMMMMWl  lWMMMMMMXx;  ;0WMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMx. ,KMMMNl .:llc. .,'.       .OMMMk. dMMMMX; .xNMMMMMMMMMMMMMMMMx. :NMMMMMMMMNx. 'OMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMK,  'dKWMNkl:;;::cloddxkkl.   dMMMO. oWWMM0' lWMMMMMWX0OOOOO00Od, .dWMMMNXKK0ko'  dMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMO'   .;lxOKXNWWMMMWWWWNNXo.  dMMM0' lNWMWd .OMMMMMKc.           .dWMNk:'...   .,dXMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMXo'      ..',,;;;,,'''...  .xMMMO. oWWMK, cNMMMMWl              'kWO.  .codkOKWMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMNk;                      .kMMMx..OMMNl 'OMMMMMM0:.             .ONx,  'xNMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMNd.       ,lxkkxl,     .xMMMKdOWMNo..xWMMMMMMMW0c.          .lXMMNO, .dWMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMWO'     :XMMMMMMNk'    ,0MMMMW0x:..dWMMMMMMMMMMWk'   .;odxOXWMMMWNl  lWMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:    '0MMMMMMMMK;    .cool;. .;OWMMMMMMMMMMMMMk.  .ckkkxdol:;,.  ,0MMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.   :XMMMMMMMMK,        .cx0WMMMMMMMMMMMMMMMNc        ...',;cokXMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx.   ;0WMMMMMMM0;       cNMMMMMMMMMMMMMMMMMMX;  .dkkOO0KXNWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,   .cONMMMMMMNx;...'lXMMMMMMMMMMMMMMMWXOo,   cOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kdc.     'cxKNWWWWNK00KXXKK00Okkxdoolc:;'.        .cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMXo'.            ..',,,,'''......                       ;0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMXo,'....',,;::cccccccccllllllooooooooooooollllllllllodONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXXNWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Sales} from \\\"./Sales.sol\\\";\\n\\ncontract KillerAcidFunOriginalsSales is Sales {\\n    constructor()\\n        Sales(\\n            0x00000000000076A84feF008CDAbe6409d2FE638B,\\n            0xda3Bb6122BDC762Fb83D37AD2b09e7F2Cf6612f5\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"src/Sales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./delegatecash/IDelegationRegistry.sol\\\";\\n\\ninterface IReleases {\\n    function releaseExists(uint256 __id) external view returns (bool);\\n\\n    function mint(address __account, uint256 __id, uint256 __amount) external;\\n\\n    function maxSupply(uint __id) external returns (uint256);\\n}\\n\\ncontract Sales is Ownable, ReentrancyGuard {\\n    error AmountExceedsWalletLimit();\\n    error Forbidden();\\n    error HasEnded();\\n    error HasNotStarted();\\n    error HasStarted();\\n    error IncorrectPrice();\\n    error InvalidAddress();\\n    error InvalidProof();\\n    error InvalidStart();\\n    error InvalidTimeframe();\\n    error LimitGreaterThanSupply();\\n    error MerkleRootNotSet();\\n    error NotDelegatedError();\\n    error ProofIsRequired();\\n    error ReleaseNotFound();\\n    error SaleNotFound();\\n    error WithdrawFailed();\\n\\n    event SaleCreated(uint256 __tokenID, uint256 __saleID);\\n    event SalePriceUpdated(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __price\\n    );\\n    event SaleStartUpdated(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __start\\n    );\\n    event SaleEndUpdated(uint256 __tokenID, uint256 __saleID, uint256 __end);\\n    event SaleWalletLimitUpdated(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __walletLimit\\n    );\\n    event SaleMerkleRootUpdated(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        bytes32 __merkleRoot\\n    );\\n\\n    struct Sale {\\n        uint256 price;\\n        uint256 start;\\n        uint256 end;\\n        uint256 walletLimit;\\n        bytes32 merkleRoot;\\n    }\\n\\n    IDelegationRegistry private _delegateContract;\\n    IReleases private _releasesContract;\\n\\n    // Mapping of sales\\n    mapping(uint256 => Sale[]) private _sales;\\n\\n    // Mapping of wallet sales\\n    mapping(uint256 => mapping(uint256 => mapping(address => uint256)))\\n        private _walletSales;\\n\\n    /**\\n     * @dev Sets releases contract using contract address upon construction.\\n     */\\n    constructor(\\n        address __delegateContractAddress,\\n        address __releasesContractAddress\\n    ) {\\n        if (\\n            __delegateContractAddress == address(0) ||\\n            __releasesContractAddress == address(0) ||\\n            __delegateContractAddress == __releasesContractAddress\\n        ) {\\n            revert InvalidAddress();\\n        }\\n\\n        _delegateContract = IDelegationRegistry(__delegateContractAddress);\\n        _releasesContract = IReleases(__releasesContractAddress);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // MODIFIERS\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Checks if sale exists.\\n     *\\n     * Requirements:\\n     *\\n     * - `__id` must be of existing release.\\n     */\\n    modifier onlyExistingSale(uint256 __tokenID, uint256 __saleID) {\\n        if (__saleID >= _sales[__tokenID].length) {\\n            revert SaleNotFound();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if sender is EOA.\\n     *\\n     * Requirements:\\n     *\\n     * - Sender must be EOA.\\n     */\\n    modifier onlyEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Forbidden();\\n        }\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // INTERNALS\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Used to complete purchase.\\n     *\\n     * Requirements:\\n     *\\n     * - `__tokenID` must be of existing release.\\n     * - `__saleID` must be of existing sale.\\n     * - `__amount` plus current wallet sales cannot exceed wallet limit.\\n     * - `msg.value` must be correct price of sale.\\n     * - `block.timestampe` must be within sale timeframe.\\n     */\\n    function _buy(\\n        address __account,\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __amount\\n    ) internal {\\n        Sale memory sale = _sales[__tokenID][__saleID];\\n\\n        if (sale.walletLimit != 0) {\\n            if (\\n                _walletSales[__tokenID][__saleID][__account] + __amount >\\n                sale.walletLimit\\n            ) revert AmountExceedsWalletLimit();\\n        }\\n\\n        if (sale.price * __amount != msg.value) {\\n            revert IncorrectPrice();\\n        }\\n\\n        if (sale.start > 0 && block.timestamp < sale.start) {\\n            revert HasNotStarted();\\n        }\\n\\n        if (sale.end > 0 && block.timestamp > sale.end) {\\n            revert HasEnded();\\n        }\\n\\n        _walletSales[__tokenID][__saleID][__account] =\\n            _walletSales[__tokenID][__saleID][__account] +\\n            __amount;\\n\\n        _releasesContract.mint(__account, __tokenID, __amount);\\n    }\\n\\n    /**\\n     * @dev Used to verify merkle proof.\\n     *\\n     * Requirements:\\n     *\\n     * - Sale's `merkleRoot` must be set.\\n     */\\n    function _verifyProof(\\n        address __sender,\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        bytes32[] calldata __proof\\n    ) internal view {\\n        if (_sales[__tokenID][__saleID].merkleRoot == 0x0)\\n            revert MerkleRootNotSet();\\n\\n        bool verified = MerkleProof.verify(\\n            __proof,\\n            _sales[__tokenID][__saleID].merkleRoot,\\n            keccak256(abi.encodePacked(__sender))\\n        );\\n\\n        if (!verified) revert InvalidProof();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // OWNER\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Used to create a new sale.\\n     *\\n     * Requirements:\\n     *\\n     * - `__tokenID` must be of existing release.\\n     * - `__start` must be later than current time.\\n     * - `__start` must be earlier than `__end`.\\n     * - `__walletLimit` must be less or equal to max supply of release.\\n     *\\n     * Emits a {SaleCreated} event.\\n     *\\n     */\\n    function createSale(\\n        uint256 __tokenID,\\n        uint256 __price,\\n        uint256 __start,\\n        uint256 __end,\\n        uint256 __walletLimit,\\n        bytes32 __merkleRoot\\n    ) external onlyOwner {\\n        if (!_releasesContract.releaseExists(__tokenID)) {\\n            revert ReleaseNotFound();\\n        }\\n\\n        if (__start > 0 && block.timestamp > __start) revert InvalidStart();\\n\\n        if (__end > 0 && __start > __end) revert InvalidTimeframe();\\n\\n        if (\\n            _releasesContract.maxSupply(__tokenID) > 0 &&\\n            __walletLimit > _releasesContract.maxSupply(__tokenID)\\n        ) revert LimitGreaterThanSupply();\\n\\n        _sales[__tokenID].push(\\n            Sale({\\n                price: __price,\\n                start: __start,\\n                end: __end,\\n                walletLimit: __walletLimit,\\n                merkleRoot: __merkleRoot\\n            })\\n        );\\n\\n        emit SaleCreated(__tokenID, _sales[__tokenID].length - 1);\\n    }\\n\\n    /**\\n     * @dev Used to update the merkle root of a sale.\\n     *\\n     * Emits a {SaleMerkleRootUpdated} event.\\n     *\\n     */\\n    function editMerkleRoot(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        bytes32 __merkleRoot\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        _sales[__tokenID][__saleID].merkleRoot = __merkleRoot;\\n\\n        emit SaleMerkleRootUpdated(__tokenID, __saleID, __merkleRoot);\\n    }\\n\\n    /**\\n     * @dev Used to update the price of a sale.\\n     *\\n     * Emits a {SalePriceUpdated} event.\\n     *\\n     */\\n    function editPrice(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __price\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        _sales[__tokenID][__saleID].price = __price;\\n\\n        emit SalePriceUpdated(__tokenID, __saleID, __price);\\n    }\\n\\n    /**\\n     * @dev Used to update the start/end timeframe of a sale.\\n     *\\n     * Requirements:\\n     *\\n     * - Sale must not have already started.\\n     * - `__start` must be later than current time.\\n     * - `__start` must be earlier than sale end.\\n     *\\n     * Emits a {SaleStartUpdated} event.\\n     *\\n     */\\n    function editStart(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __start\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        if (block.timestamp >= _sales[__tokenID][__saleID].start)\\n            revert HasStarted();\\n\\n        if (__start > 0 && block.timestamp > __start) revert InvalidStart();\\n\\n        if (\\n            _sales[__tokenID][__saleID].end > 0 &&\\n            __start > _sales[__tokenID][__saleID].end\\n        ) revert InvalidTimeframe();\\n\\n        _sales[__tokenID][__saleID].start = __start;\\n\\n        emit SaleStartUpdated(__tokenID, __saleID, __start);\\n    }\\n\\n    /**\\n     * @dev Used to update the start/end timeframe of a sale.\\n     *\\n     * Requirements:\\n     *\\n     * - Sale must not have already ended.\\n     * - `__end` must be later than sale start.\\n     *\\n     * Emits a {SaleEndUpdated} event.\\n     *\\n     */\\n    function editEnd(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __end\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        if (\\n            _sales[__tokenID][__saleID].end > 0 &&\\n            block.timestamp >= _sales[__tokenID][__saleID].end\\n        ) revert HasEnded();\\n\\n        if (__end > 0 && _sales[__tokenID][__saleID].start > __end)\\n            revert InvalidTimeframe();\\n\\n        _sales[__tokenID][__saleID].end = __end;\\n\\n        emit SaleEndUpdated(__tokenID, __saleID, __end);\\n    }\\n\\n    /**\\n     * @dev Used to update the wallet limit of a sale.\\n     *\\n     * Requirements:\\n     *\\n     * - `__walletLimit` must be less or equal to max supply of release.\\n     *\\n     * Emits a {SaleWalletLimitUpdated} event.\\n     *\\n     */\\n    function editWalletLimit(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __walletLimit\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        if (\\n            _releasesContract.maxSupply(__tokenID) > 0 &&\\n            __walletLimit > _releasesContract.maxSupply(__tokenID)\\n        ) revert LimitGreaterThanSupply();\\n\\n        _sales[__tokenID][__saleID].walletLimit = __walletLimit;\\n\\n        emit SaleWalletLimitUpdated(__tokenID, __saleID, __walletLimit);\\n    }\\n\\n    /**\\n     * @dev Used to end a sale immediately.\\n     *\\n     * Requirements:\\n     *\\n     * - Sale must not have already ended.\\n     *\\n     * Emits a {SaleEndUpdated} event.\\n     *\\n     */\\n    function endSale(\\n        uint256 __tokenID,\\n        uint256 __saleID\\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\\n        if (\\n            _sales[__tokenID][__saleID].end > 0 &&\\n            block.timestamp >= _sales[__tokenID][__saleID].end\\n        ) revert HasEnded();\\n\\n        _sales[__tokenID][__saleID].end = block.timestamp;\\n\\n        emit SaleEndUpdated(__tokenID, __saleID, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Used to withdraw funds from the contract.\\n     */\\n    function withdraw(uint256 amount) external onlyOwner {\\n        (bool success, ) = owner().call{value: amount}(\\\"\\\");\\n\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    /**\\n     * @dev Used to withdraw all funds from the contract.\\n     */\\n    function withdrawAll() external onlyOwner {\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // WRITES\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Buys a release.\\n     */\\n    function buy(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __amount\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyEOA\\n        onlyExistingSale(__tokenID, __saleID)\\n    {\\n        if (_sales[__tokenID][__saleID].merkleRoot != 0x0)\\n            revert ProofIsRequired();\\n\\n        _buy(_msgSender(), __tokenID, __saleID, __amount);\\n    }\\n\\n    /**\\n     * @dev Buys a release with a merkle proof.\\n     */\\n    function buyWithProof(\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __amount,\\n        bytes32[] calldata __proof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyEOA\\n        onlyExistingSale(__tokenID, __saleID)\\n    {\\n        _verifyProof(_msgSender(), __tokenID, __saleID, __proof);\\n\\n        _buy(_msgSender(), __tokenID, __saleID, __amount);\\n    }\\n\\n    /**\\n     * @dev Buys a release using a vault via delegate.cash.\\n     */\\n    function delegatedBuy(\\n        address __vault,\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __amount\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyEOA\\n        onlyExistingSale(__tokenID, __saleID)\\n    {\\n        if (_sales[__tokenID][__saleID].merkleRoot != 0x0)\\n            revert ProofIsRequired();\\n\\n        if (\\n            !_delegateContract.checkDelegateForContract(\\n                _msgSender(),\\n                __vault,\\n                address(this)\\n            )\\n        ) {\\n            revert NotDelegatedError();\\n        }\\n\\n        _buy(__vault, __tokenID, __saleID, __amount);\\n    }\\n\\n    /**\\n     * @dev Buys a release with a merkle proof using a vault via delegate.cash.\\n     */\\n    function delegatedBuyWithProof(\\n        address __vault,\\n        uint256 __tokenID,\\n        uint256 __saleID,\\n        uint256 __amount,\\n        bytes32[] calldata __proof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyEOA\\n        onlyExistingSale(__tokenID, __saleID)\\n    {\\n        if (\\n            !_delegateContract.checkDelegateForContract(\\n                _msgSender(),\\n                __vault,\\n                address(this)\\n            )\\n        ) {\\n            revert NotDelegatedError();\\n        }\\n\\n        _verifyProof(__vault, __tokenID, __saleID, __proof);\\n\\n        _buy(__vault, __tokenID, __saleID, __amount);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // READS\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Returns a release sale.\\n     */\\n    function getSale(\\n        uint256 __tokenID,\\n        uint256 __saleID\\n    )\\n        external\\n        view\\n        onlyExistingSale(__tokenID, __saleID)\\n        returns (Sale memory)\\n    {\\n        return _sales[__tokenID][__saleID];\\n    }\\n\\n    /**\\n     * @dev Returns number of wallet sales per release.\\n     */\\n    function getWalletSales(\\n        address __account,\\n        uint256 __tokenID,\\n        uint256 __saleID\\n    ) external view onlyExistingSale(__tokenID, __saleID) returns (uint256) {\\n        return _walletSales[__tokenID][__saleID][__account];\\n    }\\n\\n    /**\\n     * @dev Returns number of sales per release.\\n     */\\n    function totalSales(uint256 __tokenID) external view returns (uint256) {\\n        return _sales[__tokenID].length;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/delegatecash/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n *      from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(address delegate, address contract_, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(address vault)\\n        external\\n        view\\n        returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(address delegate, address vault, address contract_)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountExceedsWalletLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimeframe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitGreaterThanSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleRootNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDelegatedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofIsRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleaseNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__end\",\"type\":\"uint256\"}],\"name\":\"SaleEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"__merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SaleMerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__price\",\"type\":\"uint256\"}],\"name\":\"SalePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__start\",\"type\":\"uint256\"}],\"name\":\"SaleStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"__walletLimit\",\"type\":\"uint256\"}],\"name\":\"SaleWalletLimitUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"__proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyWithProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__walletLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"__merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"delegatedBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"__proof\",\"type\":\"bytes32[]\"}],\"name\":\"delegatedBuyWithProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__end\",\"type\":\"uint256\"}],\"name\":\"editEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"__merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"editMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__price\",\"type\":\"uint256\"}],\"name\":\"editPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__start\",\"type\":\"uint256\"}],\"name\":\"editStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__walletLimit\",\"type\":\"uint256\"}],\"name\":\"editWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"}],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"}],\"name\":\"getSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sales.Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__saleID\",\"type\":\"uint256\"}],\"name\":\"getWalletSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenID\",\"type\":\"uint256\"}],\"name\":\"totalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KillerAcidFunOriginalsSales", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}