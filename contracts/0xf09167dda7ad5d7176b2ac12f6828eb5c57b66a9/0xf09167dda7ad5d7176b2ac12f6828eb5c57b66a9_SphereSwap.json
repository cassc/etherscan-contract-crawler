{"SourceCode": "// File: sphere/implementations/addressesImpl.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ISphereAddresses {\r\n    function getSphereAddress(string memory _label) external view returns(address);\r\n    function owner() external view returns (address);\r\n}\r\n\r\nabstract contract SphereAddressesImpl {\r\n    ISphereAddresses sphereAddresses;\r\n\r\n    constructor(address addresses_) {\r\n        sphereAddresses = ISphereAddresses(addresses_);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return sphereAddresses.owner();\r\n    }\r\n\r\n    function getSphereAddress(string memory _label) public view returns (address) {\r\n        return sphereAddresses.getSphereAddress(_label);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTeam() {\r\n        require(msg.sender == getSphereAddress(\"team\"), \"Ownable: caller is not team\");\r\n        _;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: sphere/sphereSwap.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nlibrary TransferHelper {\r\n    \r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n\r\nabstract contract Signatures {\r\n\r\n    struct SwapParams {\r\n        address fromToken;\r\n        address toToken;\r\n        address fromAddress;\r\n        address toAddress;\r\n        uint256 amount;\r\n        address aggregator;\r\n        bytes callData;\r\n        bytes sig;\r\n        uint256 sigExpiration;\r\n    }\r\n     \r\n   function verifySignature(SwapParams memory params) internal view returns(address) {\r\n        require(block.timestamp < params.sigExpiration, \"Signature has expired\");\r\n        bytes32 message = keccak256(abi.encode(params.fromToken, params.toToken, params.fromAddress, params.toAddress, params.amount, params.aggregator, params.callData, params.sigExpiration));\r\n        return recoverSigner(message, params.sig);\r\n   }\r\n\r\n   function recoverSigner(bytes32 message, bytes memory sig)\r\n       public\r\n       pure\r\n       returns (address)\r\n     {\r\n       uint8 v;\r\n       bytes32 r;\r\n       bytes32 s;\r\n       (v, r, s) = splitSignature(sig);\r\n       return ecrecover(message, v, r, s);\r\n   }\r\n\r\n   function splitSignature(bytes memory sig)\r\n       internal\r\n       pure\r\n       returns (uint8, bytes32, bytes32)\r\n     {\r\n       require(sig.length == 65);\r\n\r\n       bytes32 r;\r\n       bytes32 s;\r\n       uint8 v;\r\n\r\n       assembly {\r\n           r := mload(add(sig, 32))\r\n           s := mload(add(sig, 64))\r\n           v := byte(0, mload(add(sig, 96)))\r\n       }\r\n \r\n       return (v, r, s);\r\n   }\r\n}\r\n\r\ncontract SphereSwap is Signatures, SphereAddressesImpl {\r\n\r\n    constructor(address addresses_) SphereAddressesImpl(addresses_) {}\r\n\r\n    uint256 public protocolFees = 100;\r\n    uint constant maxAllowance = 2**256 - 1;\r\n    bool public isActive = true;\r\n    address public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function swap(SwapParams[] memory params) public payable  {\r\n        require(isActive, \"Contract is not active\");\r\n        _verifyValidity(params);\r\n        _receiveTokens(params);\r\n        _settleFees(params);\r\n        _swapTokens(params);\r\n    }\r\n\r\n    function _verifyValidity(SwapParams[] memory params) internal view {\r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            require(verifySignature(params[i]) == getSphereAddress(\"signer\"), \"Signature not valid\");\r\n        }\r\n    }\r\n\r\n    function _receiveTokens(SwapParams[] memory params) internal {\r\n        _checkReceiveAmounts(params);\r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            if(params[i].fromToken != ethAddress) {\r\n                TransferHelper.safeTransferFrom(params[i].fromToken, params[i].fromAddress, address(this), params[i].amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkReceiveAmounts(SwapParams[] memory params) internal {\r\n        uint256 totalEth = 0;\r\n        \r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            if(params[i].fromToken == ethAddress) {\r\n                totalEth = totalEth + params[i].amount;\r\n            } else {\r\n                require(IERC20(params[i].fromToken).balanceOf(params[i].fromAddress) >= params[i].amount, \"Erc20 caller balance is not correct\");\r\n                require(IERC20(params[i].fromToken).allowance(params[i].fromAddress, address(this)) >= params[i].amount, \"Erc20 amount is not approved\");\r\n            }\r\n        }\r\n        require(msg.value >= totalEth, \"Eth amount sent is not correct\");\r\n    }\r\n\r\n    function _swapTokens(SwapParams[] memory params) internal {\r\n        _checkSwapApprovals(params);\r\n\r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            if(params[i].fromToken == ethAddress) {\r\n                (bool success,) = params[i].aggregator.call{value: _amountWithoutFees(params[i].amount)}(params[i].callData);\r\n                require(success, \"Swap failed to execute on aggregator\");\r\n            } else {\r\n                (bool success,) = params[i].aggregator.call{value: 0}(params[i].callData);\r\n                require(success, \"Swap failed to execute on aggregator\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkSwapApprovals(SwapParams[] memory params) internal {\r\n        uint256 totalEth = 0;\r\n\r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            if(params[i].fromToken == ethAddress) {\r\n                totalEth = totalEth + _amountWithoutFees(params[i].amount);\r\n            } else {\r\n                require(IERC20(params[i].fromToken).balanceOf(address(this)) >= _amountWithoutFees(params[i].amount), \"Erc20 contract balance is not correct\");\r\n                if(IERC20(params[i].fromToken).allowance(address(this), params[i].aggregator) < _amountWithoutFees(params[i].amount)) {\r\n                    _setErc20Allowance(params[i].fromToken, params[i].aggregator);\r\n                }\r\n            }\r\n        }\r\n\r\n        require(address(this).balance >= totalEth, \"Eth contract balance is not correct\");\r\n    }\r\n\r\n    function _setErc20Allowance(address tokenAddress, address contractAddress) internal {\r\n        TransferHelper.safeApprove(tokenAddress, contractAddress, maxAllowance);\r\n    }\r\n\r\n    function _settleFees(SwapParams[] memory params) internal {\r\n        uint256 totalEth = 0;\r\n\r\n        for(uint256 i = 0; i < params.length; i++) {\r\n            if(params[i].fromToken == ethAddress) {\r\n                totalEth = totalEth + _feesAmount(params[i].amount);\r\n            } else {\r\n                TransferHelper.safeTransfer(params[i].fromToken, getSphereAddress(\"feesWallet\"), _feesAmount(params[i].amount));\r\n            }\r\n        }\r\n\r\n        TransferHelper.safeTransferETH(getSphereAddress(\"feesWallet\"), totalEth);\r\n    }\r\n\r\n    function _amountWithoutFees(uint256 amount) internal view returns (uint256) {\r\n        return amount - ((amount * protocolFees) / 10000);\r\n    }\r\n\r\n    function _feesAmount(uint256 amount) internal view returns (uint256) {\r\n        return (amount * protocolFees) / 10000;\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount) public onlyOwner {\r\n        require(amount <= address(this).balance);\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function withdrawErc20(address token, address to, uint256 amount) public onlyOwner {\r\n        require(IERC20(token).balanceOf(address(this)) >= amount, \"Value greater than balance.\");\r\n        TransferHelper.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    function setProtocolFees(uint256 amount) public onlyTeam {\r\n        protocolFees = amount;\r\n    }\r\n\r\n    function switchActive() public onlyTeam {\r\n        isActive = !isActive;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getSphereAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.SwapParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SphereSwap", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ccef851ec9802d1975d1f4abb608b738209041e0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f49a42a75abea7b5039a96c0654cd506fd3c88b6df025d4df370ca8af811b0f3"}