{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.4.22 <0.9.0;\\n\\n// Import the IERC20 interface for ERC-20 token interaction\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INonStandardERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external;\\n\\n    function transfer(address to, uint256 amount) external;\\n}\\n\\ncontract Escrow {\\n    address payable public arbiter =\\n        payable(0x0D930E42Cd8C161F13C3F2Bdc3212D850B18EC89);\\n    address public constant usdtContractAddress =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    uint256 public totalRevenue = 0;\\n    uint256 public numberOfOrders = 0;\\n\\n    enum State {\\n        await_delivery,\\n        complete,\\n        refunded\\n    }\\n\\n    struct EscrowOrder {\\n        address payable buyer;\\n        address payable seller;\\n        State state;\\n        uint256 usdtAmount;\\n    }\\n\\n    mapping(uint256 => EscrowOrder) public escrowOrders;\\n    mapping(uint256 => bool) public doesOrderExist;\\n    INonStandardERC20 private iusdt;\\n    IERC20 private usdt;\\n\\n    constructor() {\\n        iusdt = INonStandardERC20(usdtContractAddress);\\n        usdt = IERC20(usdtContractAddress);\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return usdt.balanceOf(account);\\n    }\\n\\n    function usdtAllowance(address owner) public view returns (uint256) {\\n        return usdt.allowance(owner, address(this));\\n    }\\n\\n    function revenue() public view returns (uint256) {\\n        return totalRevenue / 1e6;\\n    }\\n\\n    modifier instate(uint256 orderId, State expectedState) {\\n        require(\\n            escrowOrders[orderId].state == expectedState,\\n            \\\"Invalid state for this escrow order\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBuyer(uint256 orderId) {\\n        require(\\n            msg.sender == escrowOrders[orderId].buyer || msg.sender == arbiter,\\n            \\\"Only the buyer or arbiter can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySeller(uint256 orderId) {\\n        require(\\n            msg.sender == escrowOrders[orderId].seller || msg.sender == arbiter,\\n            \\\"Only the seller or arbiter can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function createEscrowOrder(\\n        uint256 orderId,\\n        address payable _seller,\\n        uint256 _usdtAmount\\n    ) public {\\n        try iusdt.transferFrom(msg.sender, address(this), _usdtAmount) {\\n            // Handle transfer success\\n            EscrowOrder memory newOrder = EscrowOrder({\\n                buyer: payable(msg.sender),\\n                seller: _seller,\\n                state: State.await_delivery,\\n                usdtAmount: _usdtAmount\\n            });\\n            escrowOrders[orderId] = newOrder;\\n            doesOrderExist[orderId] = true;\\n        } catch {\\n            // Handle transfer failure\\n            revert(\\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    function confirmDelivery(\\n        uint256 orderId\\n    ) public onlyBuyer(orderId) instate(orderId, State.await_delivery) {\\n        uint256 totalAmount = escrowOrders[orderId].usdtAmount;\\n        uint256 sellerPercentage = 90;\\n        uint256 sellerAmount = (totalAmount * sellerPercentage) / 100;\\n        uint256 arbiterAmount = totalAmount - sellerAmount;\\n\\n        iusdt.transfer(escrowOrders[orderId].seller, sellerAmount);\\n        iusdt.transfer(arbiter, arbiterAmount);\\n\\n        escrowOrders[orderId].state = State.complete;\\n        totalRevenue += escrowOrders[orderId].usdtAmount;\\n        numberOfOrders++;\\n    }\\n\\n    function returnPayment(\\n        uint256 orderId\\n    ) public onlySeller(orderId) instate(orderId, State.await_delivery) {\\n        iusdt.transfer(\\n            escrowOrders[orderId].buyer,\\n            escrowOrders[orderId].usdtAmount\\n        );\\n        escrowOrders[orderId].state = State.refunded;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"confirmDelivery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"createEscrowOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doesOrderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowOrders\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum Escrow.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"returnPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"usdtAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Escrow", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}