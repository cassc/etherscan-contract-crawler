{"SourceCode": "// ooooo  oooo oooooooooo  ooooooooo             oooooooo8 ooooooooooo   o      oooo   oooo ooooo oooo   oooo  ooooooo8  \r\n//  888    88   888    888  888    88o          888        88  888  88  888      888  o88    888   8888o  88 o888    88  \r\n//   888  88    888oooo88   888    888 ooooooooo 888oooooo     888     8  88     888888      888   88 888o88 888    oooo \r\n//    88888     888  88o    888    888                  888    888    8oooo88    888  88o    888   88   8888 888o    88  \r\n//     888     o888o  88o8 o888ooo88            o88oooo888    o888o o88o  o888o o888o o888o o888o o88o    88  888ooo888                                                                                                    \r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/VRDStaking.sol\r\npragma solidity ^0.8.20;\r\n\r\n\r\ncontract VRDStaking {\r\n    IERC20 public vrdToken;\r\n\r\n    struct Stake {\r\n        uint256 amountStaked;\r\n        address stakerAddress;\r\n        uint256 unstakeRequestTimestamp; // Timestamp when the unstake request was made\r\n        bool isStaked;\r\n    }\r\n\r\n    mapping(address => Stake) public stakes;\r\n    constructor(address _vrdTokenAddress) {\r\n        vrdToken = IERC20(_vrdTokenAddress);\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(vrdToken.transferFrom(msg.sender, address(this), _amount), \"VRD Transfer failed\");\r\n   \r\n        Stake storage stake = stakes[msg.sender];\r\n\r\n        stake.amountStaked += _amount;\r\n        stake.stakerAddress = msg.sender;\r\n        stake.isStaked = true;\r\n        stake.unstakeRequestTimestamp = 0; // Resetting the unstake request timestamp\r\n    }\r\n\r\n    function requestUnstake() external {\r\n        Stake storage stake = stakes[msg.sender];\r\n        require(stake.amountStaked > 0, \"No tokens to unstake\");\r\n        require(stake.amountStaked > 0, \"Nothing staked\");\r\n        require(stake.unstakeRequestTimestamp == 0, \"Unstake request already made\");\r\n\r\n        stake.isStaked = false;\r\n        stake.unstakeRequestTimestamp = block.timestamp;\r\n    }\r\n\r\n    function unstake() external {\r\n        Stake storage stake = stakes[msg.sender];\r\n        require(stake.amountStaked > 0, \"Nothing staked\");\r\n        require(block.timestamp >= stake.unstakeRequestTimestamp + 14 days, \"Unstake request is still in the notice period\");\r\n        \r\n        require(vrdToken.transfer(msg.sender, stake.amountStaked), \"Transfer failed\");\r\n        \r\n        stake.amountStaked = 0;\r\n        stake.unstakeRequestTimestamp = 0; // Resetting the unstake request timestamp\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrdTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"requestUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeRequestTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VRDStaking", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f25304e75026e6a35fedca3b0889ae5c4d3c55d8", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://908e34e7da2a600e687601d9a722f924d3b3ce05403621ae5bbbe220f9498658"}