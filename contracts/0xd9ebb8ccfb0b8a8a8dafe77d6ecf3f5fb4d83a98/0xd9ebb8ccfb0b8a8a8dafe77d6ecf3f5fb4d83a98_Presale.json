{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ninterface IStake {\r\n    function stakeFromPresale(address buyer, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function getWallet() external view returns (address);\r\n\r\n    function getAddress() external view returns (address);\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    using SafeMath for uint256;\r\n    address payable private _wallet;\r\n    address public _brigdeBuyTokenFromBSC;\r\n    IERC20 private token;\r\n    IERC20 private usdtToken;\r\n    IStake private stake;\r\n\r\n    AggregatorV3Interface internal aggregatorETHInterface;\r\n    AggregatorV3Interface internal aggregatorUSDTInterface;\r\n\r\n    mapping(address => uint256) private buyers;\r\n    mapping(address => uint256) private claimers;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => address) private refOfs;\r\n    mapping(string => bool) private hashBuyBSC;\r\n\r\n    mapping(uint256 => Stage) private stages;\r\n    address[] private buyerAddressList;\r\n    mapping(address => bool) isBuyer; // default `false`\r\n\r\n    bool inSell = true;\r\n    bool inClaim = false;\r\n    bool inStake = false;\r\n    bool inRefReward = true;\r\n    uint256 totalRaise;\r\n    uint256 totalRaiseDolar;\r\n    uint256 raised;\r\n    uint256 raisedDolar;\r\n    uint256 totalClaimed;\r\n    uint256 currentStage;\r\n    uint256 refPercent = 20; // 21 = 2.1\r\n\r\n    event BuyToken(\r\n        address buyer,\r\n        uint256 amountOut,\r\n        uint256 amountIn,\r\n        string buyFrom,\r\n        string chain,\r\n        string hashBSC\r\n    );\r\n    event SetUSDTToken(IERC20 tokenAddress);\r\n    event SetPriceByUSD(uint256 stage, uint256 newPrice);\r\n    event SetInSell(bool _inSell);\r\n    event SetInClaim(bool _inClaimed);\r\n    event SetInStake(bool _inStake);\r\n    event SetCurrentStage(uint256 stage);\r\n    event SetIStake(IStake stake);\r\n    event Claim(address buyer, uint256 amount);\r\n    event Stake(address buyer, uint256 amount);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    struct Stage {\r\n        string stageName;\r\n        uint256 totalRaise;\r\n        uint256 totalRaiseDolar;\r\n        uint256 raised;\r\n        uint256 raisedDolar;\r\n        uint256 priceInUSDStage;\r\n    }\r\n\r\n    constructor(\r\n        address payable wallet,\r\n        IERC20 icotoken,\r\n        IERC20 usdtTokenAddress,\r\n        address _oracleETHperUSD,\r\n        address _oracleUSDTbyUSD\r\n    ) {\r\n        _wallet = wallet;\r\n        token = icotoken;\r\n        usdtToken = usdtTokenAddress;\r\n        aggregatorETHInterface = AggregatorV3Interface(_oracleETHperUSD);\r\n        aggregatorUSDTInterface = AggregatorV3Interface(_oracleUSDTbyUSD);\r\n        raised = 0;\r\n        raisedDolar = 0;\r\n        currentStage = 1;\r\n        stages[1] = Stage(\r\n            \"Stage 1\",\r\n            490935000 * (10**18),\r\n            108006 * (10**18),\r\n            0,\r\n            0,\r\n            0.00022 * (10**18)\r\n        );\r\n        stages[2] = Stage(\r\n            \"Stage 2\",\r\n            1707600000 * (10**18),\r\n            392748 * (10**18),\r\n            0,\r\n            0,\r\n            0.00023 * (10**18)\r\n        );\r\n        stages[3] = Stage(\r\n            \"Stage 3\",\r\n            2774850000 * (10**18),\r\n            693713 * (10**18),\r\n            0,\r\n            0,\r\n            0.00025 * (10**18)\r\n        );\r\n        stages[4] = Stage(\r\n            \"Stage 4\",\r\n            4631865000 * (10**18),\r\n            1250604000 * (10**18),\r\n            0,\r\n            0,\r\n            0.00027 * (10**18)\r\n        );\r\n        stages[5] = Stage(\r\n            \"Stage 5\",\r\n            5336250000 * (10**18),\r\n            1547513000 * (10**18),\r\n            0,\r\n            0,\r\n            0.00029 * (10**18)\r\n        );\r\n        stages[6] = Stage(\r\n            \"Stage 6\",\r\n            6403500000 * (10**18),\r\n            2113155000 * (10**18),\r\n            0,\r\n            0,\r\n            0.00033 * (10**18)\r\n        );\r\n\r\n\r\n    }\r\n\r\n    function getListBuyer() public view returns (address[] memory) {\r\n        return buyerAddressList;\r\n    }\r\n\r\n    function setTotalRaise(uint256 _totalRaise) public onlyOwner {\r\n        totalRaise = _totalRaise;\r\n    }\r\n\r\n    function setToken(IERC20 _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    function setTotalRaiseDolar(uint256 _totalRaiseDolar) public onlyOwner {\r\n        totalRaiseDolar = _totalRaiseDolar;\r\n    }\r\n\r\n    function setCurrentStage(uint256 stage) public onlyOwner {\r\n        currentStage = stage;\r\n        emit SetCurrentStage(stage);\r\n    }\r\n\r\n    function setAggregatorETHInterface(address _aggregatorETHInterface)\r\n        public\r\n        onlyOwner\r\n    {\r\n        aggregatorETHInterface = AggregatorV3Interface(_aggregatorETHInterface);\r\n    }\r\n\r\n    function setAggregatorUSDTInterface(address _aggregatorUSDTInterface)\r\n        public\r\n        onlyOwner\r\n    {\r\n        aggregatorUSDTInterface = AggregatorV3Interface(\r\n            _aggregatorUSDTInterface\r\n        );\r\n    }\r\n\r\n    function setRefPercent(uint256 newPercent) public onlyOwner {\r\n        refPercent = newPercent;\r\n    }\r\n\r\n    function setStageInfo(\r\n        uint256 stageId,\r\n        string memory _stageName,\r\n        uint256 _totalRaise,\r\n        uint256 _totalRaiseDolar,\r\n        uint256 _raised,\r\n        uint256 _raisedDolar,\r\n        uint256 _priceInUSDStage\r\n    ) public onlyOwner {\r\n        stages[stageId] = Stage(\r\n            _stageName,\r\n            _totalRaise,\r\n            _totalRaiseDolar,\r\n            _raised,\r\n            _raisedDolar,\r\n            _priceInUSDStage\r\n        );\r\n    }\r\n\r\n    function setBrigdeBuyTokenFromBSCAddress(address brigdeBuyTokenFromBSC)\r\n        public\r\n    {\r\n        _brigdeBuyTokenFromBSC = brigdeBuyTokenFromBSC;\r\n    }\r\n\r\n    function getBrigdeBuyTokenFromBSCAddress() public view returns (address) {\r\n        return _brigdeBuyTokenFromBSC;\r\n    }\r\n\r\n    function getAggregatorETHInterface()\r\n        public\r\n        view\r\n        returns (AggregatorV3Interface)\r\n    {\r\n        return aggregatorETHInterface;\r\n    }\r\n\r\n    function getAggregatorUSDTInterface()\r\n        public\r\n        view\r\n        returns (AggregatorV3Interface)\r\n    {\r\n        return aggregatorUSDTInterface;\r\n    }\r\n\r\n    function setStakeContract(IStake _stake) public onlyOwner {\r\n        stake = _stake;\r\n        emit SetIStake(_stake);\r\n    }\r\n\r\n    function setInSell(bool _inSell) public onlyOwner {\r\n        inSell = _inSell;\r\n        emit SetInSell(_inSell);\r\n    }\r\n\r\n    function setInClaim(bool _inClaim) public onlyOwner {\r\n        inClaim = _inClaim;\r\n        emit SetInClaim(_inClaim);\r\n    }\r\n\r\n    function setInStake(bool _inStake) public onlyOwner {\r\n        inStake = _inStake;\r\n        emit SetInStake(_inStake);\r\n    }\r\n\r\n    function setInRefReward(bool _inRefReward) public onlyOwner {\r\n        inRefReward = _inRefReward;\r\n    }\r\n\r\n    function setPriceByUSD(uint256 stage, uint256 newPrice) public onlyOwner {\r\n        stages[stage].priceInUSDStage = newPrice;\r\n        emit SetPriceByUSD(stage, newPrice);\r\n    }\r\n\r\n    function setTotalRaise(uint256 stage, uint256 _totalRaise)\r\n        public\r\n        onlyOwner\r\n    {\r\n        stages[stage].totalRaise = _totalRaise;\r\n    }\r\n\r\n    function setTotalRaiseDolar(uint256 stage, uint256 _totalRaiseDolar)\r\n        public\r\n        onlyOwner\r\n    {\r\n        stages[stage].totalRaiseDolar = _totalRaiseDolar;\r\n    }\r\n\r\n    function setUSDTToken(IERC20 token_address) public onlyOwner {\r\n        usdtToken = token_address;\r\n        emit SetUSDTToken(token_address);\r\n    }\r\n\r\n    function stakeContract() public view returns (IStake) {\r\n        return stake;\r\n    }\r\n\r\n    function getNextStagePrice() public view returns (uint256) {\r\n        Stage memory nextStage = stages[currentStage + 1];\r\n        if (nextStage.priceInUSDStage == 0) {\r\n            return stages[currentStage].priceInUSDStage;\r\n        } else {\r\n            return nextStage.priceInUSDStage;\r\n        }\r\n    }\r\n\r\n    function getTotalRaiseStage(uint256 stage) public view returns (uint256) {\r\n        return stages[stage].totalRaise;\r\n    }\r\n\r\n    function getRaisedStage(uint256 stage) public view returns (uint256) {\r\n        return stages[stage].raised;\r\n    }\r\n\r\n    function getRaisedDolarStage(uint256 stage) public view returns (uint256) {\r\n        return stages[stage].raisedDolar;\r\n    }\r\n\r\n    function getTotalRaiseDolarStage(uint256 stage)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stages[stage].totalRaiseDolar;\r\n    }\r\n\r\n    function getRefOf(address _address) public view returns (address) {\r\n        return refOfs[_address];\r\n    }\r\n\r\n    function getPriceInUSD(uint256 stage) public view returns (uint256) {\r\n        return stages[stage].priceInUSDStage;\r\n    }\r\n\r\n    function getPriceInUSD() public view returns (uint256) {\r\n        return stages[currentStage].priceInUSDStage;\r\n    }\r\n\r\n    function getCurrentStage() public view returns (uint256) {\r\n        return currentStage;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return buyers[account];\r\n    }\r\n\r\n    function getClaimed(address buyer) public view returns (uint256) {\r\n        return claimers[buyer];\r\n    }\r\n\r\n    function getInSell() public view returns (bool) {\r\n        return inSell;\r\n    }\r\n\r\n    function getInClaim() public view returns (bool) {\r\n        return inClaim;\r\n    }\r\n\r\n    function getInStake() public view returns (bool) {\r\n        return inStake;\r\n    }\r\n\r\n    function getTotalRaise() public view returns (uint256) {\r\n        return totalRaise;\r\n    }\r\n\r\n    function getTotalRaiseDolar() public view returns (uint256) {\r\n        return totalRaiseDolar;\r\n    }\r\n\r\n    function getRaised() public view returns (uint256) {\r\n        return raised;\r\n    }\r\n\r\n    function getRaisedDolar() public view returns (uint256) {\r\n        return raisedDolar;\r\n    }\r\n\r\n    function getUSDTToken() public view returns (IERC20) {\r\n        return usdtToken;\r\n    }\r\n\r\n    function getAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getTokenAmountETH(uint256 amountEth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 lastEthPriceByUSD = getLatestPriceEthPerUSD();\r\n        return (amountEth * lastEthPriceByUSD) / getPriceInUSD();\r\n    }\r\n\r\n    function getTokenAmountUSDT(uint256 amountUSDT)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 lastUSDTPriceByUSD = getLatestPriceUSDTPerUSD();\r\n        return (amountUSDT * lastUSDTPriceByUSD) / getPriceInUSD();\r\n    }\r\n\r\n    function getLatestPriceEthPerUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorETHInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function getLatestPriceUSDTPerUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorUSDTInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function getRewardForRefOf(uint256 dolar) private view returns (uint256) {\r\n        return (dolar * refPercent) / 1000;\r\n    }\r\n\r\n    function buyToken(\r\n        address buyer,\r\n        address transferTo,\r\n        uint256 amount,\r\n        uint256 amountIn,\r\n        string memory buyFrom,\r\n        string memory chain,\r\n        address refOf,\r\n        string memory hashBSC\r\n    ) private returns (bool) {\r\n        buyers[transferTo] = buyers[transferTo].add(amount);\r\n        raised = raised.add(amount);\r\n        uint256 inDolar = ((amount * getPriceInUSD()) / (10**18));\r\n        raisedDolar = raisedDolar.add(inDolar);\r\n        stages[currentStage].raised = stages[currentStage].raised.add(amount);\r\n        stages[currentStage].raisedDolar = stages[currentStage].raisedDolar.add(\r\n            inDolar\r\n        );\r\n        checkNextStage();\r\n        addBuyerToList();\r\n        if (inRefReward) {\r\n            if (refOfs[buyer] == address(0) && refOf != address(0)) {\r\n                refOfs[buyer] = refOf;\r\n            }\r\n            if (refOfs[buyer] != address(0)) {\r\n                uint256 priceUSDT = getLatestPriceUSDTPerUSD();\r\n                uint256 usd = ((inDolar * (10**18)) * refPercent) /\r\n                    (priceUSDT * 1000);\r\n                require(\r\n                    usdtToken.transfer(refOfs[buyer], usd),\r\n                    \"Error, Please try again\"\r\n                );\r\n            }\r\n        }\r\n\r\n        emit BuyToken(buyer, amount, amountIn, buyFrom, chain, hashBSC);\r\n        return true;\r\n    }\r\n\r\n    function buyTokenByEth(address refOf) external payable {\r\n        uint256 ethAmount = msg.value;\r\n        uint256 amount = getTokenAmountETH(ethAmount);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        require(\r\n            msg.sender.balance >= ethAmount,\r\n            \"Insufficient account balance\"\r\n        );\r\n        (_wallet).transfer(ethAmount);\r\n        buyToken(\r\n            msg.sender,\r\n            msg.sender,\r\n            amount,\r\n            ethAmount,\r\n            \"ETH\",\r\n            \"ETH\",\r\n            refOf,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function buyTokenByEthAndStake(address refOf) external payable {\r\n        uint256 ethAmount = msg.value;\r\n        uint256 amount = getTokenAmountETH(ethAmount);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        require(\r\n            msg.sender.balance >= ethAmount,\r\n            \"Insufficient account balance\"\r\n        );\r\n        (_wallet).transfer(ethAmount);\r\n\r\n        require(\r\n            buyToken(\r\n                msg.sender,\r\n                stake.getWallet(),\r\n                amount,\r\n                ethAmount,\r\n                \"ETH\",\r\n                \"ETH\",\r\n                refOf,\r\n                \"\"\r\n            ),\r\n            \"Buy token error\"\r\n        );\r\n        require(\r\n            stake.stakeFromPresale(msg.sender, amount),\r\n            \"Stake token error\"\r\n        );\r\n\r\n    }\r\n\r\n    function buyTokenByUSDT(uint256 amountUSDT, address refOf) external {\r\n        uint256 amount = getTokenAmountUSDT(amountUSDT);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        uint256 ourAllowance = usdtToken.allowance(_msgSender(), address(this));\r\n        require(\r\n            amountUSDT <= ourAllowance,\r\n            \"Make sure to add enough allowance\"\r\n        );\r\n        require(\r\n            usdtToken.transferFrom(msg.sender, _wallet, amountUSDT),\r\n            \"Transfer USDT fail\"\r\n        );\r\n        buyToken(\r\n            msg.sender,\r\n            msg.sender,\r\n            amount,\r\n            amountUSDT,\r\n            \"USDT\",\r\n            \"ETH\",\r\n            refOf,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function buyTokenByUSDTAndStake(uint256 amountUSDT, address refOf)\r\n        external\r\n    {\r\n        uint256 amount = getTokenAmountUSDT(amountUSDT);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        uint256 ourAllowance = usdtToken.allowance(_msgSender(), address(this));\r\n        require(\r\n            amountUSDT <= ourAllowance,\r\n            \"Make sure to add enough allowance\"\r\n        );\r\n        require(\r\n            usdtToken.transferFrom(msg.sender, _wallet, amountUSDT),\r\n            \"Transfer USDT fail\"\r\n        );\r\n        require(\r\n            buyToken(\r\n                msg.sender,\r\n                stake.getWallet(),\r\n                amount,\r\n                amountUSDT,\r\n                \"USDT\",\r\n                \"ETH\",\r\n                refOf,\r\n                \"\"\r\n            ),\r\n            \"Buy token error\"\r\n        );\r\n        require(\r\n            stake.stakeFromPresale(msg.sender, amount),\r\n            \"Stake token error\"\r\n        );\r\n    }\r\n\r\n    function buyTokenFromBSC(\r\n        address buyer,\r\n        uint256 amount,\r\n        uint256 amountBSC,\r\n        string memory buyFrom,\r\n        address refOf,\r\n        string memory hash\r\n    ) external {\r\n        require(msg.sender == _brigdeBuyTokenFromBSC, \"Only call by brigde\");\r\n        require(!hashBuyBSC[hash], \"This hash was processed\");\r\n        require(\r\n            buyToken(\r\n                buyer,\r\n                buyer,\r\n                amount,\r\n                amountBSC,\r\n                buyFrom,\r\n                \"BSC\",\r\n                refOf,\r\n                hash\r\n            ),\r\n            \"Buy token error\"\r\n        );\r\n        hashBuyBSC[hash] = true;\r\n    }\r\n\r\n    function addBuyerToList() private {\r\n        if (isBuyer[msg.sender] == false) {\r\n            buyerAddressList.push(msg.sender);\r\n            isBuyer[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function checkNextStage() private {\r\n        if (\r\n            stages[currentStage].raisedDolar >=\r\n            stages[currentStage].totalRaiseDolar\r\n        ) {\r\n            setCurrentStage(currentStage + 1);\r\n        }\r\n    }\r\n\r\n    function claim() public returns (bool) {\r\n        require(inClaim, \"Invalid time for claim\");\r\n        uint256 amount = buyers[msg.sender];\r\n        require(amount > 0, \"You not have token to claim\");\r\n        require(\r\n            token.balanceOf(address(this)) > amount,\r\n            \"Not enought token to send to you\"\r\n        );\r\n        bool suscess = token.transfer(msg.sender, amount);\r\n        require(suscess, \"Transfer token error\");\r\n        buyers[msg.sender] = buyers[msg.sender].sub(\r\n            amount,\r\n            \"transfer from buyers to wallet error\"\r\n        );\r\n        claimers[msg.sender] = claimers[msg.sender].add(amount);\r\n        totalClaimed = totalClaimed.add(amount);\r\n        emit Claim(msg.sender, amount);\r\n        return suscess;\r\n    }\r\n\r\n    function stakeFromStakeContract(address _buyer, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == stake.getAddress(),\r\n            \"Only call from stakecontract\"\r\n        );\r\n        buyers[_buyer] = buyers[_buyer].sub(_amount);\r\n        buyers[stake.getWallet()] = buyers[stake.getWallet()].add(_amount);\r\n        emit Stake(_buyer, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(numTokens <= buyers[msg.sender]);\r\n        buyers[msg.sender] = buyers[msg.sender].sub(numTokens);\r\n        buyers[receiver] = buyers[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens)\r\n        external\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(\r\n        address owner,\r\n        address to,\r\n        uint256 numTokens\r\n    ) public returns (bool) {\r\n        require(numTokens <= buyers[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n        require(owner != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        buyers[owner] = buyers[owner].sub(\r\n            numTokens,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(\r\n            numTokens,\r\n            \"ERC20: allowed amount exceeds balance\"\r\n        );\r\n        buyers[to] = buyers[to].add(numTokens);\r\n        emit Transfer(owner, to, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function getWallet() public view returns (address) {\r\n        return _wallet;\r\n    }\r\n\r\n    function setWallet(address payable wallet) public onlyOwner {\r\n        _wallet = wallet;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"icotoken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleETHperUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleUSDTbyUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyFrom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hashBSC\",\"type\":\"string\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"SetCurrentStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStake\",\"name\":\"stake\",\"type\":\"address\"}],\"name\":\"SetIStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_inClaimed\",\"type\":\"bool\"}],\"name\":\"SetInClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_inSell\",\"type\":\"bool\"}],\"name\":\"SetInSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_inStake\",\"type\":\"bool\"}],\"name\":\"SetInStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SetPriceByUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SetUSDTToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_brigdeBuyTokenFromBSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByEthAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByUSDTAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBSC\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"buyFrom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"buyTokenFromBSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorETHInterface\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorUSDTInterface\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrigdeBuyTokenFromBSCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceEthPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceUSDTPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListBuyer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaisedDolar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getRaisedDolarStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getRaisedStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRefOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRaise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRaiseDolar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getTotalRaiseDolarStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getTotalRaiseStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorETHInterface\",\"type\":\"address\"}],\"name\":\"setAggregatorETHInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorUSDTInterface\",\"type\":\"address\"}],\"name\":\"setAggregatorUSDTInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brigdeBuyTokenFromBSC\",\"type\":\"address\"}],\"name\":\"setBrigdeBuyTokenFromBSCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"setCurrentStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inClaim\",\"type\":\"bool\"}],\"name\":\"setInClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inRefReward\",\"type\":\"bool\"}],\"name\":\"setInRefReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inSell\",\"type\":\"bool\"}],\"name\":\"setInSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inStake\",\"type\":\"bool\"}],\"name\":\"setInStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceByUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setRefPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_stageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaiseDolar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raisedDolar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInUSDStage\",\"type\":\"uint256\"}],\"name\":\"setStageInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStake\",\"name\":\"_stake\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaise\",\"type\":\"uint256\"}],\"name\":\"setTotalRaise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRaise\",\"type\":\"uint256\"}],\"name\":\"setTotalRaise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRaiseDolar\",\"type\":\"uint256\"}],\"name\":\"setTotalRaiseDolar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaiseDolar\",\"type\":\"uint256\"}],\"name\":\"setTotalRaiseDolar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"contract IStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFromStakeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad93fcca379b3a868f5852baa57fe2e70cc5842000000000000000000000000094c257b17ffe84d1eb7d5468b0fd2023f3b6f66b000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c60e3bbb4b82fbd6b89ac1f6cb1d8e3bb01a010b8dbf7e3caa814fa54f4a524"}