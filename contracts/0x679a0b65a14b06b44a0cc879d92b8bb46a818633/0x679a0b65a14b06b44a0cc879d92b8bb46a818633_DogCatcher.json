{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DogCatcher.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"./IFridge.sol\\\";\\r\\nimport \\\"./IOven.sol\\\";\\r\\n\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@*   o@#@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@#\u00b0 \u00b0#\u00b0 #@#@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@#. OO## \u00b0#@#@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###. #@#OO \u00b0O#@#@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@\u00b0 #@##Oo .Oo@##@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@o O@##o#@\u00b0.#oo@#@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@### \u00b0@#@OO@#\u00b0 O@Oo@#@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@* ####o@#@\u00b0.#o@OO@#@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@### \u00b0@##OO@#@\u00b0.@Oo#o#@#@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@################@@#@O oO#@o#@#@.\u00b0#OooO*###@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@@#####@@@@@@@@@@@@@@@@@###* ##OOO@#@# oO#@O#Oo@#@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@###@@@@@#OOoo******ooOO##@@@..##@oo#@@* o#@##o@oO@#@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@###@@@#Oo*\u00b0.................\u00b0*O *@@#OOO## \u00b0O@##@#o@o##@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@##@@@#o\u00b0....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0... .*O@O@#O* o###@#@O##o@#@@@@@@\\r\\n//@@@@@@@@@@@@@@@##@@#O\u00b0...\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0........\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0 ...\u00b0*#@# \u00b0O@#@@@##o@o#@#@@@@@\\r\\n//@@@@@@@@@@@@@@#@@#o...\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0.......\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0......\u00b0. \u00b0\u00b0\u00b0\u00b0..*\u00b0.oO@#@@@#@OO#o@#@@@@@\\r\\n//@@@@@@@@@@@@##@#*..\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0...\u00b0\u00b0*oooooooooooooo**\u00b0.  .\u00b0\u00b0\u00b0\u00b0\u00b0. .oO###@@@#@o#O#@#@@@@\\r\\n//@@@@@@@@@@@#@@o..\u00b0\u00b0\u00b0\u00b0\u00b0...\u00b0*oooooooooooooooooooooo\u00b0 . ..\u00b0\u00b0 ...*o###@@#@OO#O@#@@@@\\r\\n//@@@@@@@@@@#@#\u00b0.\u00b0\u00b0\u00b0\u00b0\u00b0..\u00b0*ooooooooooooooooooooooooo\u00b0 **\u00b0..  \u00b0\u00b0\u00b0. *@@#@@@@o#O#@@@@@\\r\\n//@@@@@@@@##@o..\u00b0\u00b0\u00b0\u00b0..\u00b0oooooooooooooooooooooooooooo* *oo*. .\u00b0\u00b0\u00b0\u00b0\u00b0.\u00b0#@#@#Oooo#@#@@@\\r\\n//@@@@@@@#@@* \u00b0\u00b0\u00b0\u00b0..\u00b0oooooooooooooooooooooooooooooo* *oo\u00b0 .\u00b0..\u00b0\u00b0\u00b0\u00b0..O@#o##Ooo@#@@@\\r\\n//@@@@@@#@#\u00b0.\u00b0\u00b0\u00b0\u00b0..*oooooooooo*\u00b0\u00b0\u00b0\u00b0\u00b0*oooooooooooooo* *o* .o**\u00b0..\u00b0\u00b0\u00b0..OOO@#O#*##@@@\\r\\n//@@@@@#@#..\u00b0\u00b0\u00b0. \u00b0ooooooooo\u00b0..       .*oooooooooooo* *o  ooo\u00b0**..\u00b0\u00b0\u00b0\u00b0 *@#@O#O#@#@@\\r\\n//@@@@#@#..\u00b0\u00b0\u00b0..*ooooooooo.            .*ooooooooooo \u00b0. *ooo*\u00b0oo..\u00b0\u00b0\u00b0\u00b0 o@#OO#O@#@@\\r\\n//@@@###\u00b0.\u00b0\u00b0\u00b0..ooooooooo*.               .oooooooooo.  **ooo***oo\u00b0 \u00b0.\u00b0\u00b0 O@#O#O@#@@\\r\\n//@@@#@\u00b0.\u00b0\u00b0\u00b0..oooooooo*.                   *oooooooo  \u00b0o*oo**o**oo\u00b0 .\u00b0\u00b0\u00b0.##O#O@#@@\\r\\n//@@#@o \u00b0\u00b0\u00b0..oooooooo.                     oo*****o* .***oo**o**ooo\u00b0.\u00b0\u00b0\u00b0..#O#O@#@@\\r\\n//@### \u00b0\u00b0\u00b0\u00b0 *oooooooo*.                   .*..... .. *oo**o**oo**oo*..\u00b0\u00b0\u00b0 *O#O#@@@\\r\\n//@#@\u00b0.\u00b0\u00b0\u00b0 *ooooooooooo.                  ....    . .oooo**\u00b0*oo**o*** .\u00b0\u00b0\u00b0.*#O#@@@\\r\\n//#@o \u00b0\u00b0\u00b0.\u00b0ooooooooooooo                ....    .*. \u00b0ooooo*\u00b0*oo**o***\u00b0 \u00b0\u00b0\u00b0..@O#@@@\\r\\n//##..\u00b0\u00b0\u00b0.oooooooooooooo*            ........ .*o* .ooooo*o*\u00b0*****\u00b0***..\u00b0\u00b0\u00b0.OO#@@@\\r\\n//@O \u00b0\u00b0\u00b0.\u00b0ooooooooooooooo.         ......  ..\u00b0ooo. \u00b0o******o*********** \u00b0\u00b0\u00b0.\u00b0O@#@@\\r\\n//@\u00b0.\u00b0\u00b0\u00b0.oooooooooooooooo.      ......\u00b0.   ..\u00b0oo* .oo********\u00b0***\u00b0***\u00b0*..\u00b0\u00b0\u00b0 o@#@@\\r\\n//#.\u00b0\u00b0\u00b0.\u00b0oooooooooooooooo...........\u00b0\u00b0   ....\u00b0\u00b0\u00b0.  ..***********\u00b0\u00b0***\u00b0*\u00b0 \u00b0\u00b0\u00b0.o@#@@\\r\\n//o.\u00b0\u00b0\u00b0 *ooooooooooooooo*........\u00b0\u00b0\u00b0.    \u00b0..        .*********\u00b0*\u00b0****\u00b0**..\u00b0\u00b0.\u00b0@#@@\\r\\n//\u00b0.\u00b0\u00b0..ooooooooooooooo*......\u00b0\u00b0\u00b0\u00b0\u00b0.     \u00b0\u00b0        .**********\u00b0*\u00b0****\u00b0**..\u00b0\u00b0..#@#@\\r\\n//..\u00b0\u00b0..ooooooooooooo*\u00b0....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0.      ..**\u00b0\u00b0.   ..**********\u00b0*\u00b0***\u00b0\u00b0**\u00b0.\u00b0\u00b0\u00b0 O@#@\\r\\n// \u00b0\u00b0\u00b0.\u00b0ooooooooooo*\u00b0..\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0..       ....***\u00b0.  . .o**********\u00b0\u00b0***\u00b0**\u00b0\u00b0 \u00b0\u00b0\u00b0.o@#@\\r\\n// \u00b0\u00b0\u00b0.*oooooooooo\u00b0...\u00b0\u00b0\u00b0...        .....\u00b0****.     *o*********\u00b0\u00b0***\u00b0*\u00b0**.\u00b0\u00b0\u00b0.*@#@\\r\\n//.\u00b0\u00b0\u00b0 *oooooooooo****\u00b0.    .. ......\u00b0.\u00b0\u00b0**\u00b0\u00b0\u00b0       \u00b0o*******\u00b0\u00b0\u00b0**\u00b0\u00b0\u00b0\u00b0**..\u00b0\u00b0.*@#@\\r\\n//.\u00b0\u00b0\u00b0 *ooooooo***ooo*      .\u00b0.....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0***\u00b0.       \u00b0o*******\u00b0\u00b0\u00b0\u00b0*\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0..\u00b0\u00b0.*@#@\\r\\n//.\u00b0\u00b0\u00b0 *o**********o*..      ....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0***\u00b0.       \u00b0ooo**\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0 .\u00b0\u00b0.*@#@\\r\\n//.\u00b0\u00b0\u00b0.\u00b0o*********o*....     ..\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0*\u00b0\u00b0.       *o**\u00b0......\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0.\u00b0\u00b0\u00b0.*@#@\\r\\n// \u00b0\u00b0\u00b0.\u00b0o**********......     .\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0....     .*o\u00b0.   . ....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0.\u00b0\u00b0\u00b0.o@#@\\r\\n//.\u00b0\u00b0\u00b0..o*********........      ..\u00b0\u00b0\u00b0\u00b0\u00b0....     \u00b0o*.   ..  .....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0. \u00b0\u00b0\u00b0 O@#@\\r\\n//\u00b0.\u00b0\u00b0..*********.........         ... ....    \u00b0o.  .. .    ....\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0...\u00b0\u00b0\u00b0.#@#@\\r\\n//o.\u00b0\u00b0\u00b0 *******\u00b0..........           ...       ..  .        .....\u00b0\u00b0\u00b0\u00b0\u00b0....\u00b0\u00b0.\u00b0@#@@\\r\\n//O.\u00b0\u00b0\u00b0.\u00b0******\u00b0\u00b0**.    ...              .       .          ......\u00b0\u00b0\u00b0... \u00b0\u00b0\u00b0.*@#@@\\r\\n//@\u00b0.\u00b0\u00b0..*********\u00b0.      ...           ..                  ......\u00b0\u00b0.....\u00b0\u00b0\u00b0 O@#@@\\r\\n//@o \u00b0\u00b0\u00b0 \u00b0********\u00b0        ..         ...        .     .   .. ......... \u00b0\u00b0\u00b0.\u00b0@#@@@\\r\\n//##.\u00b0\u00b0\u00b0..********.                   ...        .    ...  . ...........\u00b0\u00b0\u00b0 o@#@@@\\r\\n//#@o \u00b0\u00b0\u00b0..******\u00b0                    ..         .           ......... \u00b0\u00b0\u00b0..##@@@@\\r\\n//###..\u00b0\u00b0\u00b0 \u00b0*****.                     .          ....      ......... .\u00b0\u00b0\u00b0 O@#@@@@\\r\\n//@#@O \u00b0\u00b0\u00b0..**\u00b0\u00b0\u00b0.                   ..         . .....     ...... . .\u00b0\u00b0\u00b0.\u00b0@#@@@@@\\r\\n//@@#@*.\u00b0\u00b0\u00b0..\u00b0\u00b0\u00b0.                   ....\u00b0       . .  ....  ......  ..\u00b0\u00b0\u00b0\u00b0.###@@@@@\\r\\n//@@###..\u00b0\u00b0\u00b0..\u00b0\u00b0.                  .....\u00b0.     . ...   ...  .....   .\u00b0\u00b0\u00b0 O@#@@@@@@\\r\\n//@@@#@#..\u00b0\u00b0\u00b0..\u00b0.                  .......         ...... ........  .\u00b0\u00b0 o@#@@@@@@@\\r\\n//@@@@#@O.\u00b0\u00b0\u00b0\u00b0..                   ........         .....  .......  .\u00b0 *@#@@@@@@@@\\r\\n//@@@@@#@O..\u00b0\u00b0\u00b0.                    .......  .   .......      ....  . *@#@@@@@@@@@\\r\\n//@@@@@@#@O..\u00b0\u00b0.                       .....  ...........     ... .  o@#@@@@@@@@@@\\r\\n//@@@@@@@#@#...                   .\u00b0.   ....  . ....... .     .  .  o@#@@@@@@@@@@@\\r\\n//@@@@@@@@#@#\u00b0                   ...... ..... . .  .... .      ....O@#@@@@@@@@@@@@\\r\\n//@@@@@@@@@#@o                  .......       ..   ... ..    .\u00b0..*#@#@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@#@o                .......         .        .  ..\u00b0.\u00b0O@@#@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@#@O               ......          .  . .    .....o@@##@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@#@#.             ...             .  .........\u00b0o#@##@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@#@#\u00b0            .\u00b0. .......     .... .   .\u00b0O#@@#@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@#@@*            \u00b0 .\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0     ..... .\u00b0o#@@@##@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@##@o           . ....\u00b0\u00b0\u00b0.      ... \u00b0O@@@##@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@#@O           .o*\u00b0\u00b0\u00b0\u00b0\u00b0.      .. \u00b0#@###@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@#@O          O@@@@@@@O      . \u00b0#@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@#@#.       .@#######o       \u00b0#@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@#@#.      o@#@@@@#@*      .#@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@#@#\u00b0     #@#@@@@#@#      *@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@#@#\u00b0   .##@@@@@@#@*     O##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@#@#\u00b0  o@#@@@@@@###\u00b0   .##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@#@O \u00b0@#@@@@@@@@#@#*.*#@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@@#@\u00b0 #@#@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@#@O \u00b0@#@@@@@@@@@@@##@##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n//@@@@@@@@@@@@@@@@@@@@@@@#@o o##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\ncontract DogCatcher is Context, IERC20, Ownable {\\r\\n    /*\\r\\n        DogCatcher is the first Catcher-type token, designed to condense\\r\\n        value from disparate liquidity pools. He uses flexible, modular\\r\\n        strategies optimized for his different targets.\\r\\n    */\\r\\n    string private _name = \\\"dog.catcher\\\";\\r\\n    string private _symbol = \\\"DC\\\";\\r\\n    uint256 private _totalSupply = 0;\\r\\n    uint8 private _decimals = 9;\\r\\n    mapping(address => uint256) private balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    bool private _active = false;\\r\\n    IFridge _fridge;\\r\\n    mapping (address => address) _ovens;\\r\\n    struct Vest { \\r\\n        uint128 vestedTime;\\r\\n        uint128 ethAmount;\\r\\n    }\\r\\n    mapping (address => Vest) private userVests;\\r\\n    event PresaleVote(uint dcAmount, uint8 indexed vote);\\r\\n    event UsingFridge(address fridge);\\r\\n    event AddedTarget(address token, address Oven);\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function addTarget(address token, address oven) external onlyOwner() {\\r\\n        // Different ovens are used to \\\"handle\\\" different targets.\\r\\n        emit AddedTarget(token, oven);\\r\\n        _ovens[token] = oven;\\r\\n    }\\r\\n\\r\\n    function setFavoriteFridge (address fridge) external onlyOwner() {\\r\\n        // The favorite fridge is used for determining the value \\r\\n        // of DC tokens for the minting and vesting steps.\\r\\n        emit UsingFridge(fridge);\\r\\n        _fridge = IFridge(fridge);\\r\\n    }\\r\\n\\r\\n    function isActive() external view returns (bool) {\\r\\n        // Inactive during pre-sale period.\\r\\n        return _active;\\r\\n    }\\r\\n\\r\\n    function presaleMint(uint8 vote) public payable returns (uint256) {\\r\\n        // Pre-sale open to public at 1m DC per ETH. This provides the initial\\r\\n        // LP and pays our wonderful artist & front-end dev.\\r\\n        require(!_active, \\\"Presale is over!\\\");\\r\\n        uint256 mintedAmount = msg.value / 1000; \\r\\n        _mint(_msgSender(), mintedAmount);\\r\\n        emit PresaleVote(mintedAmount, vote);\\r\\n        return mintedAmount;\\r\\n    }\\r\\n\\r\\n    function endPresale () public onlyOwner() {\\r\\n        require(!_active, \\\"Already active.\\\");\\r\\n        // Pre-sold tokens represent 50% of the supply. The other 50% are minted \\r\\n        // and sent along with ETH to be added to LP manually.\\r\\n        _mint(_msgSender(), _totalSupply);\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n        _active = true;\\r\\n    }\\r\\n\\r\\n    function otcOffer(address token, uint256 amount) public view returns (uint256 ethValue, uint256 paperValue, uint256 vestedTime) {\\r\\n        // DC consults the proper oven and gives the users some choices\\r\\n        // for how to dispose of their tokens.\\r\\n        require(_ovens[token] != address(0), \\\"Token not targeted.\\\");\\r\\n        (ethValue, paperValue, vestedTime) = IOven(_ovens[token]).otcOffer(token, amount);\\r\\n    }\\r\\n\\r\\n    function instaMint(address token, uint256 incomingTokenAmount) public {\\r\\n        // User can instantly mint at a value comparable to what they would get\\r\\n        // selling on the open market.\\r\\n        require(_ovens[token] != address(0), \\\"Token not targeted.\\\");\\r\\n        IOven oven = IOven(_ovens[token]);\\r\\n        oven.updatePrice(token);\\r\\n        IERC20(token).transferFrom(_msgSender(), address(oven), incomingTokenAmount);\\r\\n        (uint256 ethValueIncoming, ) = oven.getValues(token, incomingTokenAmount);\\r\\n        _fridge.updatePrice();\\r\\n        _mint(_msgSender(), _fridge.valuate(ethValueIncoming));\\r\\n    }\\r\\n\\r\\n    function vestMint(address token, uint256 amount) public {\\r\\n        // User mints a higher value, (not subject to price impact), in\\r\\n        // a vesting position denominated in ETH.\\r\\n        require(_ovens[token] != address(0), \\\"Token not targeted.\\\");\\r\\n        IOven oven = IOven(_ovens[token]);\\r\\n        oven.updatePrice(token);\\r\\n        IERC20(token).transferFrom(_msgSender(), address(oven), amount);\\r\\n        (, uint256 paperValue, uint256 vestedTime) = oven.otcOffer(token, amount);\\r\\n        _vest(_msgSender(), vestedTime, paperValue);\\r\\n    }   \\r\\n\\r\\n    function _vest(address user, uint256 time, uint256 ethAmount) private {\\r\\n        // Handles adding to existing vest: Maximum of timestamps, sum of values.\\r\\n        Vest storage currentVest = userVests[user];\\r\\n        uint128 time128 = uint128(time);\\r\\n        uint128 newEthAmount = currentVest.ethAmount + uint128(ethAmount);\\r\\n        uint128 newTime = time128 > currentVest.vestedTime ? time128 : currentVest.vestedTime;\\r\\n        currentVest.vestedTime = newTime;\\r\\n        currentVest.ethAmount = newEthAmount;\\r\\n    }\\r\\n\\r\\n    function vestOf(address user) public view returns (Vest memory) {\\r\\n        return userVests[user];\\r\\n    }\\r\\n\\r\\n    function completeVest() public {\\r\\n        // Finalizes vests that are past the completion date.\\r\\n        // DC are issued at DC/ETH rate at time of completion.\\r\\n        Vest storage userVest = userVests[_msgSender()];\\r\\n        require(userVest.vestedTime < block.timestamp, \\\"Your dogs are still cookin'.\\\");\\r\\n        _fridge.updatePrice();\\r\\n        _mint(_msgSender(), _fridge.valuate(userVest.ethAmount));\\r\\n        userVests[_msgSender()] = Vest(0, 0);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(_active, \\\"Can't transfer during presale.\\\");\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        balances[sender] = balances[sender].sub(amount);\\r\\n        balances[recipient] = balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    //Fail-safe functions for releasing tokens, not meant to be used.\\r\\n    function release(address token) public {\\r\\n        IERC20(token).transfer(owner(), \\r\\n            IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    //The rest is all boilerplate ERC-20, but go ahead and read if you need a sleeping aid.\\r\\n    function name() public view returns (string memory) {return _name;}\\r\\n    function symbol() public view returns (string memory) {return _symbol;}\\r\\n    function decimals() public view returns (uint8) {return _decimals;}\\r\\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        uint256 accountBalance = balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/IFridge.sol\": {\r\n      \"content\": \"interface IFridge {\\r\\n    function valuate(uint256 ethAmount) external returns (uint256 tokenValue);\\r\\n    function updatePrice() external;\\r\\n}\"\r\n    },\r\n    \"contracts/IOven.sol\": {\r\n      \"content\": \"interface IOven  {\\r\\n    function getValues(address token, uint256 amount) external view returns (uint256 ethValue, uint256 paperValue);\\r\\n    function otcOffer(address token, uint256 amount) external view returns (uint256 ethValue, uint256 paperValue, uint256 vestTime);\\r\\n    function updatePrice(address token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Oven\",\"type\":\"address\"}],\"name\":\"AddedTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"PresaleVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fridge\",\"type\":\"address\"}],\"name\":\"UsingFridge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oven\",\"type\":\"address\"}],\"name\":\"addTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"incomingTokenAmount\",\"type\":\"uint256\"}],\"name\":\"instaMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"otcOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paperValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"presaleMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fridge\",\"type\":\"address\"}],\"name\":\"setFavoriteFridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vestOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"vestedTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ethAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct DogCatcher.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DogCatcher", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}