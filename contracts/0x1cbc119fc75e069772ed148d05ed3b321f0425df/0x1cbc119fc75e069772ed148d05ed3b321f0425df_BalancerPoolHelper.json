{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/math/BConst.sol\": {\r\n      \"content\": \"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n\\ncontract BConst {\\n\\tuint public constant BONE = 10 ** 18;\\n\\n\\tuint public constant MIN_BOUND_TOKENS = 2;\\n\\tuint public constant MAX_BOUND_TOKENS = 8;\\n\\n\\tuint public constant MIN_FEE = BONE / 10 ** 6;\\n\\tuint public constant MAX_FEE = BONE / 10;\\n\\tuint public constant EXIT_FEE = 0;\\n\\n\\tuint public constant MIN_WEIGHT = BONE;\\n\\tuint public constant MAX_WEIGHT = BONE * 50;\\n\\tuint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n\\tuint public constant MIN_BALANCE = BONE / 10 ** 12;\\n\\n\\tuint public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n\\tuint public constant MIN_BPOW_BASE = 1 wei;\\n\\tuint public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n\\tuint public constant BPOW_PRECISION = BONE / 10 ** 10;\\n\\n\\tuint public constant MAX_IN_RATIO = BONE / 2;\\n\\tuint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/math/BNum.sol\": {\r\n      \"content\": \"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n\\tfunction btoi(uint a) internal pure returns (uint) {\\n\\t\\treturn a / BONE;\\n\\t}\\n\\n\\tfunction bfloor(uint a) internal pure returns (uint) {\\n\\t\\treturn btoi(a) * BONE;\\n\\t}\\n\\n\\tfunction badd(uint a, uint b) internal pure returns (uint) {\\n\\t\\tuint c = a + b;\\n\\t\\trequire(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction bsub(uint a, uint b) internal pure returns (uint) {\\n\\t\\t(uint c, bool flag) = bsubSign(a, b);\\n\\t\\trequire(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n\\t\\tif (a >= b) {\\n\\t\\t\\treturn (a - b, false);\\n\\t\\t} else {\\n\\t\\t\\treturn (b - a, true);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction bmul(uint a, uint b) internal pure returns (uint) {\\n\\t\\tuint c0 = a * b;\\n\\t\\trequire(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\t\\tuint c1 = c0 + (BONE / 2);\\n\\t\\trequire(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n\\t\\tuint c2 = c1 / BONE;\\n\\t\\treturn c2;\\n\\t}\\n\\n\\tfunction bdiv(uint a, uint b) internal pure returns (uint) {\\n\\t\\trequire(b != 0, \\\"ERR_DIV_ZERO\\\");\\n\\t\\tuint c0 = a * BONE;\\n\\t\\trequire(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\t\\tuint c1 = c0 + (b / 2);\\n\\t\\trequire(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\t\\tuint c2 = c1 / b;\\n\\t\\treturn c2;\\n\\t}\\n\\n\\t// DSMath.wpow\\n\\tfunction bpowi(uint a, uint n) internal pure returns (uint) {\\n\\t\\tuint z = n % 2 != 0 ? a : BONE;\\n\\n\\t\\tfor (n /= 2; n != 0; n /= 2) {\\n\\t\\t\\ta = bmul(a, a);\\n\\n\\t\\t\\tif (n % 2 != 0) {\\n\\t\\t\\t\\tz = bmul(z, a);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn z;\\n\\t}\\n\\n\\t// Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n\\t// Use `bpowi` for `b^e` and `bpowK` for k iterations\\n\\t// of approximation of b^0.w\\n\\tfunction bpow(uint base, uint exp) internal pure returns (uint) {\\n\\t\\trequire(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n\\t\\trequire(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n\\t\\tuint whole = bfloor(exp);\\n\\t\\tuint remain = bsub(exp, whole);\\n\\n\\t\\tuint wholePow = bpowi(base, btoi(whole));\\n\\n\\t\\tif (remain == 0) {\\n\\t\\t\\treturn wholePow;\\n\\t\\t}\\n\\n\\t\\tuint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n\\t\\treturn bmul(wholePow, partialResult);\\n\\t}\\n\\n\\tfunction bpowApprox(uint base, uint exp, uint precision) internal pure returns (uint) {\\n\\t\\t// term 0:\\n\\t\\tuint a = exp;\\n\\t\\t(uint x, bool xneg) = bsubSign(base, BONE);\\n\\t\\tuint term = BONE;\\n\\t\\tuint sum = term;\\n\\t\\tbool negative = false;\\n\\n\\t\\t// term(k) = numer / denom\\n\\t\\t//         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n\\t\\t// each iteration, multiply previous term by (a-(k-1)) * x / k\\n\\t\\t// continue until term is less than precision\\n\\t\\tfor (uint i = 1; term >= precision; i++) {\\n\\t\\t\\tuint bigK = i * BONE;\\n\\t\\t\\t(uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n\\t\\t\\tterm = bmul(term, bmul(c, x));\\n\\t\\t\\tterm = bdiv(term, bigK);\\n\\t\\t\\tif (term == 0) break;\\n\\n\\t\\t\\tif (xneg) negative = !negative;\\n\\t\\t\\tif (cneg) negative = !negative;\\n\\t\\t\\tif (negative) {\\n\\t\\t\\t\\tsum = bsub(sum, term);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsum = badd(sum, term);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn sum;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolHelper {\\n\\tfunction lpTokenAddr() external view returns (address);\\n\\n\\tfunction zapWETH(uint256 amount) external returns (uint256);\\n\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) external returns (uint256);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction quoteWETH(uint256 lpAmount) external view returns (uint256 wethAmount);\\n\\n\\tfunction getLpPrice(uint256 rdntPriceInEth) external view returns (uint256 priceInEth);\\n\\n\\tfunction getReserves() external view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply);\\n\\n\\tfunction getPrice() external view returns (uint256 priceInEth);\\n\\n\\tfunction quoteSwap(address _inToken, uint256 _wethAmount) external view returns (uint256 tokenAmount);\\n\\n\\tfunction swapToWeth(address _inToken, uint256 _amount, uint256 _minAmountOut) external;\\n}\\n\\ninterface IBalancerPoolHelper is IPoolHelper {\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\\n}\\n\\ninterface IUniswapPoolHelper is IPoolHelper {\\n\\tfunction initializePool() external;\\n}\\n\\ninterface ITestPoolHelper is IPoolHelper {\\n\\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/balancer/IWeightedPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBasePool is IERC20 {\\n\\tfunction getSwapFeePercentage() external view returns (uint256);\\n\\n\\tfunction setSwapFeePercentage(uint256 swapFeePercentage) external;\\n\\n\\tfunction setAssetManagerPoolConfig(IERC20 token, IAssetManager.PoolConfig memory poolConfig) external;\\n\\n\\tfunction setPaused(bool paused) external;\\n\\n\\tfunction getVault() external view returns (IVault);\\n\\n\\tfunction getPoolId() external view returns (bytes32);\\n\\n\\tfunction getOwner() external view returns (address);\\n}\\n\\ninterface IWeightedPoolFactory {\\n\\tfunction create(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tIERC20[] memory tokens,\\n\\t\\tuint256[] memory weights,\\n\\t\\taddress[] memory rateProviders,\\n\\t\\tuint256 swapFeePercentage,\\n\\t\\taddress owner,\\n\\t\\tbytes32 salt\\n\\t) external returns (address);\\n}\\n\\ninterface IWeightedPool is IBasePool {\\n\\tfunction getSwapEnabled() external view returns (bool);\\n\\n\\tfunction getNormalizedWeights() external view returns (uint256[] memory);\\n\\n\\tfunction getGradualWeightUpdateParams()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 startTime, uint256 endTime, uint256[] memory endWeights);\\n\\n\\tfunction setSwapEnabled(bool swapEnabled) external;\\n\\n\\tfunction updateWeightsGradually(uint256 startTime, uint256 endTime, uint256[] memory endWeights) external;\\n\\n\\tfunction withdrawCollectedManagementFees(address recipient) external;\\n\\n\\tenum JoinKind {\\n\\t\\tINIT,\\n\\t\\tEXACT_TOKENS_IN_FOR_BPT_OUT,\\n\\t\\tTOKEN_IN_FOR_EXACT_BPT_OUT\\n\\t}\\n\\tenum ExitKind {\\n\\t\\tEXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n\\t\\tEXACT_BPT_IN_FOR_TOKENS_OUT,\\n\\t\\tBPT_IN_FOR_EXACT_TOKENS_OUT\\n\\t}\\n}\\n\\ninterface IAssetManager {\\n\\tstruct PoolConfig {\\n\\t\\tuint64 targetPercentage;\\n\\t\\tuint64 criticalPercentage;\\n\\t\\tuint64 feePercentage;\\n\\t}\\n\\n\\tfunction setPoolConfig(bytes32 poolId, PoolConfig calldata config) external;\\n}\\n\\ninterface IAsset {}\\n\\ninterface IVault {\\n\\tfunction hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n\\tfunction setRelayerApproval(address sender, address relayer, bool approved) external;\\n\\n\\tevent RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n\\tfunction getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n\\tfunction manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n\\tstruct UserBalanceOp {\\n\\t\\tUserBalanceOpKind kind;\\n\\t\\tIAsset asset;\\n\\t\\tuint256 amount;\\n\\t\\taddress sender;\\n\\t\\taddress payable recipient;\\n\\t}\\n\\n\\tenum UserBalanceOpKind {\\n\\t\\tDEPOSIT_INTERNAL,\\n\\t\\tWITHDRAW_INTERNAL,\\n\\t\\tTRANSFER_INTERNAL,\\n\\t\\tTRANSFER_EXTERNAL\\n\\t}\\n\\tevent InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\tevent ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n\\tenum PoolSpecialization {\\n\\t\\tGENERAL,\\n\\t\\tMINIMAL_SWAP_INFO,\\n\\t\\tTWO_TOKEN\\n\\t}\\n\\n\\tfunction registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n\\tevent PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n\\tfunction getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n\\tfunction registerTokens(bytes32 poolId, IERC20[] memory tokens, address[] memory assetManagers) external;\\n\\n\\tevent TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n\\tfunction deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n\\tevent TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n\\tfunction getPoolTokenInfo(\\n\\t\\tbytes32 poolId,\\n\\t\\tIERC20 token\\n\\t) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\\n\\n\\tfunction getPoolTokens(\\n\\t\\tbytes32 poolId\\n\\t) external view returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n\\tfunction joinPool(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tJoinPoolRequest memory request\\n\\t) external payable;\\n\\n\\tstruct JoinPoolRequest {\\n\\t\\tIAsset[] assets;\\n\\t\\tuint256[] maxAmountsIn;\\n\\t\\tbytes userData;\\n\\t\\tbool fromInternalBalance;\\n\\t}\\n\\n\\tfunction exitPool(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress payable recipient,\\n\\t\\tExitPoolRequest memory request\\n\\t) external;\\n\\n\\tstruct ExitPoolRequest {\\n\\t\\tIAsset[] assets;\\n\\t\\tuint256[] minAmountsOut;\\n\\t\\tbytes userData;\\n\\t\\tbool toInternalBalance;\\n\\t}\\n\\n\\tevent PoolBalanceChanged(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\taddress indexed liquidityProvider,\\n\\t\\tIERC20[] tokens,\\n\\t\\tint256[] deltas,\\n\\t\\tuint256[] protocolFeeAmounts\\n\\t);\\n\\n\\tenum PoolBalanceChangeKind {\\n\\t\\tJOIN,\\n\\t\\tEXIT\\n\\t}\\n\\n\\tenum SwapKind {\\n\\t\\tGIVEN_IN,\\n\\t\\tGIVEN_OUT\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\tSingleSwap memory singleSwap,\\n\\t\\tFundManagement memory funds,\\n\\t\\tuint256 limit,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256);\\n\\n\\tstruct SingleSwap {\\n\\t\\tbytes32 poolId;\\n\\t\\tSwapKind kind;\\n\\t\\tIAsset assetIn;\\n\\t\\tIAsset assetOut;\\n\\t\\tuint256 amount;\\n\\t\\tbytes userData;\\n\\t}\\n\\n\\tfunction batchSwap(\\n\\t\\tSwapKind kind,\\n\\t\\tBatchSwapStep[] memory swaps,\\n\\t\\tIAsset[] memory assets,\\n\\t\\tFundManagement memory funds,\\n\\t\\tint256[] memory limits,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (int256[] memory);\\n\\n\\tstruct BatchSwapStep {\\n\\t\\tbytes32 poolId;\\n\\t\\tuint256 assetInIndex;\\n\\t\\tuint256 assetOutIndex;\\n\\t\\tuint256 amount;\\n\\t\\tbytes userData;\\n\\t}\\n\\n\\tevent Swap(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\tIERC20 indexed tokenIn,\\n\\t\\tIERC20 indexed tokenOut,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut\\n\\t);\\n\\tstruct FundManagement {\\n\\t\\taddress sender;\\n\\t\\tbool fromInternalBalance;\\n\\t\\taddress payable recipient;\\n\\t\\tbool toInternalBalance;\\n\\t}\\n\\n\\tfunction queryBatchSwap(\\n\\t\\tSwapKind kind,\\n\\t\\tBatchSwapStep[] memory swaps,\\n\\t\\tIAsset[] memory assets,\\n\\t\\tFundManagement memory funds\\n\\t) external returns (int256[] memory assetDeltas);\\n\\n\\tfunction managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n\\tstruct PoolBalanceOp {\\n\\t\\tPoolBalanceOpKind kind;\\n\\t\\tbytes32 poolId;\\n\\t\\tIERC20 token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tenum PoolBalanceOpKind {\\n\\t\\tWITHDRAW,\\n\\t\\tDEPOSIT,\\n\\t\\tUPDATE\\n\\t}\\n\\tevent PoolBalanceManaged(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\taddress indexed assetManager,\\n\\t\\tIERC20 indexed token,\\n\\t\\tint256 cashDelta,\\n\\t\\tint256 managedDelta\\n\\t);\\n\\n\\tfunction setPaused(bool paused) external;\\n}\\n\\ninterface IBalancerQueries {\\n\\tfunction querySwap(\\n\\t\\tIVault.SingleSwap memory singleSwap,\\n\\t\\tIVault.FundManagement memory funds\\n\\t) external returns (uint256);\\n\\n\\tfunction queryBatchSwap(\\n\\t\\tIVault.SwapKind kind,\\n\\t\\tIVault.BatchSwapStep[] memory swaps,\\n\\t\\tIAsset[] memory assets,\\n\\t\\tIVault.FundManagement memory funds\\n\\t) external returns (int256[] memory assetDeltas);\\n\\n\\tfunction queryJoin(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tIVault.JoinPoolRequest memory request\\n\\t) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n\\tfunction queryExit(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tIVault.ExitPoolRequest memory request\\n\\t) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/libraries/balancer-reentrancy/VaultReentrancyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n// Modified by Radiant Capital to accommodate different interface files\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport {IVault} from \\\"../../../interfaces/balancer/IWeightedPoolFactory.sol\\\";\\n\\nlibrary VaultReentrancyLib {\\n\\t/**\\n\\t * @dev Ensure we are not in a Vault context when this function is called, by attempting a no-op internal\\n\\t * balance operation. If we are already in a Vault transaction (e.g., a swap, join, or exit), the Vault's\\n\\t * reentrancy protection will cause this function to revert.\\n\\t *\\n\\t * The exact function call doesn't really matter: we're just trying to trigger the Vault reentrancy check\\n\\t * (and not hurt anything in case it works). An empty operation array with no specific operation at all works\\n\\t * for that purpose, and is also the least expensive in terms of gas and bytecode size.\\n\\t *\\n\\t * Call this at the top of any function that can cause a state change in a pool and is either public itself,\\n\\t * or called by a public function *outside* a Vault operation (e.g., join, exit, or swap).\\n\\t *\\n\\t * If this is *not* called in functions that are vulnerable to the read-only reentrancy issue described\\n\\t * here (https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345), those functions are unsafe,\\n\\t * and subject to manipulation that may result in loss of funds.\\n\\t */\\n\\tfunction ensureNotInVaultContext(IVault vault) internal view {\\n\\t\\t// Perform the following operation to trigger the Vault's reentrancy guard:\\n\\t\\t//\\n\\t\\t// IVault.UserBalanceOp[] memory noop = new IVault.UserBalanceOp[](0);\\n\\t\\t// _vault.manageUserBalance(noop);\\n\\t\\t//\\n\\t\\t// However, use a static call so that it can be a view function (even though the function is non-view).\\n\\t\\t// This allows the library to be used more widely, as some functions that need to be protected might be\\n\\t\\t// view.\\n\\t\\t//\\n\\t\\t// This staticcall always reverts, but we need to make sure it doesn't fail due to a re-entrancy attack.\\n\\t\\t// Staticcalls consume all gas forwarded to them on a revert caused by storage modification.\\n\\t\\t// By default, almost the entire available gas is forwarded to the staticcall,\\n\\t\\t// causing the entire call to revert with an 'out of gas' error.\\n\\t\\t//\\n\\t\\t// We set the gas limit to 10k for the staticcall to\\n\\t\\t// avoid wasting gas when it reverts due to storage modification.\\n\\t\\t// `manageUserBalance` is a non-reentrant function in the Vault, so calling it invokes `_enterNonReentrant`\\n\\t\\t// in the `ReentrancyGuard` contract, reproduced here:\\n\\t\\t//\\n\\t\\t//    function _enterNonReentrant() private {\\n\\t\\t//        // If the Vault is actually being reentered, it will revert in the first line, at the `_require` that\\n\\t\\t//        // checks the reentrancy flag, with \\\"BAL#400\\\" (corresponding to Errors.REENTRANCY) in the revertData.\\n\\t\\t//        // The full revertData will be: `abi.encodeWithSignature(\\\"Error(string)\\\", \\\"BAL#400\\\")`.\\n\\t\\t//        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\t\\t//\\n\\t\\t//        // If the Vault is not being reentered, the check above will pass: but it will *still* revert,\\n\\t\\t//        // because the next line attempts to modify storage during a staticcall. However, this type of\\n\\t\\t//        // failure results in empty revertData.\\n\\t\\t//        _status = _ENTERED;\\n\\t\\t//    }\\n\\t\\t//\\n\\t\\t// So based on this analysis, there are only two possible revertData values: empty, or abi.encoded BAL#400.\\n\\t\\t//\\n\\t\\t// It is of course much more bytecode and gas efficient to check for zero-length revertData than to compare it\\n\\t\\t// to the encoded REENTRANCY revertData.\\n\\t\\t//\\n\\t\\t// While it should be impossible for the call to fail in any other way (especially since it reverts before\\n\\t\\t// `manageUserBalance` even gets called), any other error would generate non-zero revertData, so checking for\\n\\t\\t// empty data guards against this case too.\\n\\n\\t\\t(, bytes memory revertData) = address(vault).staticcall{gas: 10_000}(\\n\\t\\t\\tabi.encodeWithSelector(vault.manageUserBalance.selector, 0)\\n\\t\\t);\\n\\n\\t\\t_require(revertData.length == 0, Errors.REENTRANCY);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/zap/helpers/BalancerPoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {DustRefunder} from \\\"./DustRefunder.sol\\\";\\nimport {BNum} from \\\"../../../dependencies/math/BNum.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IBalancerPoolHelper} from \\\"../../../interfaces/IPoolHelper.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\nimport {IWeightedPoolFactory, IWeightedPool, IAsset, IVault, IBalancerQueries} from \\\"../../../interfaces/balancer/IWeightedPoolFactory.sol\\\";\\nimport {VaultReentrancyLib} from \\\"../../libraries/balancer-reentrancy/VaultReentrancyLib.sol\\\";\\n\\n/// @title Balance Pool Helper Contract\\n/// @author Radiant\\ncontract BalancerPoolHelper is IBalancerPoolHelper, Initializable, OwnableUpgradeable, BNum, DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\terror AddressZero();\\n\\terror PoolExists();\\n\\terror InsufficientPermission();\\n\\terror IdenticalAddresses();\\n\\terror ZeroAmount();\\n\\terror QuoteFail();\\n\\n\\taddress public inTokenAddr;\\n\\taddress public outTokenAddr;\\n\\taddress public wethAddr;\\n\\taddress public lpTokenAddr;\\n\\taddress public vaultAddr;\\n\\tbytes32 public poolId;\\n\\taddress public lockZap;\\n\\tIWeightedPoolFactory public poolFactory;\\n\\tuint256 public constant RDNT_WEIGHT = 800000000000000000;\\n\\tuint256 public constant WETH_WEIGHT = 200000000000000000;\\n\\tuint256 public constant INITIAL_SWAP_FEE_PERCENTAGE = 5000000000000000;\\n\\n\\t/// @notice In 80/20 pool, RDNT Weight is 4x of WETH weight\\n\\tuint256 public constant POOL_WEIGHT = 4;\\n\\n\\tbytes32 public constant WBTC_WETH_USDC_POOL_ID = 0x64541216bafffeec8ea535bb71fbc927831d0595000100000000000000000002;\\n\\tbytes32 public constant DAI_USDT_USDC_POOL_ID = 0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016;\\n\\taddress public constant REAL_WETH_ADDR = address(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\n\\n\\taddress public constant BALANCER_QUERIES = 0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5;\\n\\n\\taddress public constant USDT_ADDRESS = address(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);\\n\\taddress public constant DAI_ADDRESS = address(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1);\\n\\taddress public constant USDC_ADDRESS = address(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _inTokenAddr input token of the pool\\n\\t * @param _outTokenAddr output token of the pool\\n\\t * @param _wethAddr WETH address\\n\\t * @param _vault Balancer Vault\\n\\t * @param _poolFactory Balancer pool factory address\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _inTokenAddr,\\n\\t\\taddress _outTokenAddr,\\n\\t\\taddress _wethAddr,\\n\\t\\taddress _vault,\\n\\t\\tIWeightedPoolFactory _poolFactory\\n\\t) external initializer {\\n\\t\\tif (_inTokenAddr == address(0)) revert AddressZero();\\n\\t\\tif (_outTokenAddr == address(0)) revert AddressZero();\\n\\t\\tif (_wethAddr == address(0)) revert AddressZero();\\n\\t\\tif (_vault == address(0)) revert AddressZero();\\n\\t\\tif (address(_poolFactory) == address(0)) revert AddressZero();\\n\\n\\t\\t__Ownable_init();\\n\\t\\tinTokenAddr = _inTokenAddr;\\n\\t\\toutTokenAddr = _outTokenAddr;\\n\\t\\twethAddr = _wethAddr;\\n\\t\\tvaultAddr = _vault;\\n\\t\\tpoolFactory = _poolFactory;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize a new pool.\\n\\t * @param _tokenName Token name of lp token\\n\\t * @param _tokenSymbol Token symbol of lp token\\n\\t */\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) public onlyOwner {\\n\\t\\tif (lpTokenAddr != address(0)) revert PoolExists();\\n\\n\\t\\t(address token0, address token1) = _sortTokens(inTokenAddr, outTokenAddr);\\n\\n\\t\\tIERC20[] memory tokens = new IERC20[](2);\\n\\t\\ttokens[0] = IERC20(token0);\\n\\t\\ttokens[1] = IERC20(token1);\\n\\n\\t\\taddress[] memory rateProviders = new address[](2);\\n\\t\\trateProviders[0] = 0x0000000000000000000000000000000000000000;\\n\\t\\trateProviders[1] = 0x0000000000000000000000000000000000000000;\\n\\n\\t\\tuint256[] memory weights = new uint256[](2);\\n\\n\\t\\tif (token0 == outTokenAddr) {\\n\\t\\t\\tweights[0] = RDNT_WEIGHT;\\n\\t\\t\\tweights[1] = WETH_WEIGHT;\\n\\t\\t} else {\\n\\t\\t\\tweights[0] = WETH_WEIGHT;\\n\\t\\t\\tweights[1] = RDNT_WEIGHT;\\n\\t\\t}\\n\\n\\t\\tlpTokenAddr = poolFactory.create(\\n\\t\\t\\t_tokenName,\\n\\t\\t\\t_tokenSymbol,\\n\\t\\t\\ttokens,\\n\\t\\t\\tweights,\\n\\t\\t\\trateProviders,\\n\\t\\t\\tINITIAL_SWAP_FEE_PERCENTAGE,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"UwU\\\"\\n\\t\\t);\\n\\n\\t\\tpoolId = IWeightedPool(lpTokenAddr).getPoolId();\\n\\n\\t\\tIERC20 outToken = IERC20(outTokenAddr);\\n\\t\\tIERC20 inToken = IERC20(inTokenAddr);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tIERC20 weth = IERC20(wethAddr);\\n\\n\\t\\toutToken.forceApprove(vaultAddr, type(uint256).max);\\n\\t\\tinToken.forceApprove(vaultAddr, type(uint256).max);\\n\\t\\tweth.approve(vaultAddr, type(uint256).max);\\n\\n\\t\\tIAsset[] memory assets = new IAsset[](2);\\n\\t\\tassets[0] = IAsset(token0);\\n\\t\\tassets[1] = IAsset(token1);\\n\\n\\t\\tuint256 inTokenAmt = inToken.balanceOf(address(this));\\n\\t\\tuint256 outTokenAmt = outToken.balanceOf(address(this));\\n\\n\\t\\tuint256[] memory maxAmountsIn = new uint256[](2);\\n\\t\\tif (token0 == inTokenAddr) {\\n\\t\\t\\tmaxAmountsIn[0] = inTokenAmt;\\n\\t\\t\\tmaxAmountsIn[1] = outTokenAmt;\\n\\t\\t} else {\\n\\t\\t\\tmaxAmountsIn[0] = outTokenAmt;\\n\\t\\t\\tmaxAmountsIn[1] = inTokenAmt;\\n\\t\\t}\\n\\n\\t\\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(\\n\\t\\t\\tassets,\\n\\t\\t\\tmaxAmountsIn,\\n\\t\\t\\tabi.encode(0, maxAmountsIn),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t\\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\\n\\t\\tuint256 liquidity = lp.balanceOf(address(this));\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t}\\n\\n\\t/// @dev Return fair reserve amounts given spot reserves, weights, and fair prices.\\n\\t/// @param resA Reserve of the first asset\\n\\t/// @param resB Reserve of the second asset\\n\\t/// @param wA Weight of the first asset\\n\\t/// @param wB Weight of the second asset\\n\\t/// @param pxA Fair price of the first asset\\n\\t/// @param pxB Fair price of the second asset\\n\\tfunction _computeFairReserves(\\n\\t\\tuint256 resA,\\n\\t\\tuint256 resB,\\n\\t\\tuint256 wA,\\n\\t\\tuint256 wB,\\n\\t\\tuint256 pxA,\\n\\t\\tuint256 pxB\\n\\t) internal pure returns (uint256 fairResA, uint256 fairResB) {\\n\\t\\t// NOTE: wA + wB = 1 (normalize weights)\\n\\t\\t// constant product = resA^wA * resB^wB\\n\\t\\t// constraints:\\n\\t\\t// - fairResA^wA * fairResB^wB = constant product\\n\\t\\t// - fairResA * pxA / wA = fairResB * pxB / wB\\n\\t\\t// Solving equations:\\n\\t\\t// --> fairResA^wA * (fairResA * (pxA * wB) / (wA * pxB))^wB = constant product\\n\\t\\t// --> fairResA / r1^wB = constant product\\n\\t\\t// --> fairResA = resA^wA * resB^wB * r1^wB\\n\\t\\t// --> fairResA = resA * (resB/resA)^wB * r1^wB = resA * (r1/r0)^wB\\n\\t\\tuint256 r0 = bdiv(resA, resB);\\n\\t\\tuint256 r1 = bdiv(bmul(wA, pxB), bmul(wB, pxA));\\n\\t\\t// fairResA = resA * (r1 / r0) ^ wB\\n\\t\\t// fairResB = resB * (r0 / r1) ^ wA\\n\\t\\tif (r0 > r1) {\\n\\t\\t\\tuint256 ratio = bdiv(r1, r0);\\n\\t\\t\\tfairResA = bmul(resA, bpow(ratio, wB));\\n\\t\\t\\tfairResB = bdiv(resB, bpow(ratio, wA));\\n\\t\\t} else {\\n\\t\\t\\tuint256 ratio = bdiv(r0, r1);\\n\\t\\t\\tfairResA = bdiv(resA, bpow(ratio, wB));\\n\\t\\t\\tfairResB = bmul(resB, bpow(ratio, wA));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates LP price\\n\\t * @dev Return value decimal is 8\\n\\t * @param rdntPriceInEth RDNT price in ETH\\n\\t * @return priceInEth LP price in ETH\\n\\t */\\n\\tfunction getLpPrice(uint256 rdntPriceInEth) public view returns (uint256 priceInEth) {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\t(address token0, ) = _sortTokens(inTokenAddr, outTokenAddr);\\n\\t\\t(uint256 rdntBalance, uint256 wethBalance, ) = getReserves();\\n\\t\\tuint256[] memory weights = pool.getNormalizedWeights();\\n\\n\\t\\tuint256 rdntWeight;\\n\\t\\tuint256 wethWeight;\\n\\n\\t\\tif (token0 == outTokenAddr) {\\n\\t\\t\\trdntWeight = weights[0];\\n\\t\\t\\twethWeight = weights[1];\\n\\t\\t} else {\\n\\t\\t\\trdntWeight = weights[1];\\n\\t\\t\\twethWeight = weights[0];\\n\\t\\t}\\n\\n\\t\\t// RDNT in eth, 8 decis\\n\\t\\tuint256 pxA = rdntPriceInEth;\\n\\t\\t// ETH in eth, 8 decis\\n\\t\\tuint256 pxB = 100000000;\\n\\n\\t\\t(uint256 fairResA, uint256 fairResB) = _computeFairReserves(\\n\\t\\t\\trdntBalance,\\n\\t\\t\\twethBalance,\\n\\t\\t\\trdntWeight,\\n\\t\\t\\twethWeight,\\n\\t\\t\\tpxA,\\n\\t\\t\\tpxB\\n\\t\\t);\\n\\t\\t// use fairReserveA and fairReserveB to compute LP token price\\n\\t\\t// LP price = (fairResA * pxA + fairResB * pxB) / totalLPSupply\\n\\t\\tpriceInEth = (fairResA * pxA + fairResB * pxB) / pool.totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns RDNT price in WETH\\n\\t * @return RDNT price\\n\\t */\\n\\tfunction getPrice() public view returns (uint256) {\\n\\t\\taddress vaultAddress = vaultAddr;\\n\\t\\tVaultReentrancyLib.ensureNotInVaultContext(IVault(vaultAddress));\\n\\t\\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddress).getPoolTokens(poolId);\\n\\t\\tuint256 rdntBalance = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\\n\\t\\tuint256 wethBalance = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\\n\\n\\t\\treturn (wethBalance * 1e8) / (rdntBalance / POOL_WEIGHT);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns reserve information.\\n\\t * @return rdnt RDNT amount\\n\\t * @return weth WETH amount\\n\\t * @return lpTokenSupply LP token supply\\n\\t */\\n\\tfunction getReserves() public view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\\n\\t\\tIERC20 lpToken = IERC20(lpTokenAddr);\\n\\n\\t\\taddress vaultAddress = vaultAddr;\\n\\t\\tVaultReentrancyLib.ensureNotInVaultContext(IVault(vaultAddress));\\n\\t\\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddress).getPoolTokens(poolId);\\n\\n\\t\\trdnt = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\\n\\t\\tweth = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\\n\\n\\t\\tlpTokenSupply = lpToken.totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity\\n\\t * @param _wethAmt WETH amount\\n\\t * @param _rdntAmt RDNT amount\\n\\t * @return liquidity amount of LP token\\n\\t */\\n\\tfunction _joinPool(uint256 _wethAmt, uint256 _rdntAmt) internal returns (uint256 liquidity) {\\n\\t\\t(address token0, address token1) = _sortTokens(outTokenAddr, inTokenAddr);\\n\\t\\tIAsset[] memory assets = new IAsset[](2);\\n\\t\\tassets[0] = IAsset(token0);\\n\\t\\tassets[1] = IAsset(token1);\\n\\n\\t\\tuint256[] memory maxAmountsIn = new uint256[](2);\\n\\t\\tif (token0 == inTokenAddr) {\\n\\t\\t\\tmaxAmountsIn[0] = _wethAmt;\\n\\t\\t\\tmaxAmountsIn[1] = _rdntAmt;\\n\\t\\t} else {\\n\\t\\t\\tmaxAmountsIn[0] = _rdntAmt;\\n\\t\\t\\tmaxAmountsIn[1] = _wethAmt;\\n\\t\\t}\\n\\n\\t\\tbytes memory userDataEncoded = abi.encode(IWeightedPool.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, maxAmountsIn, 0);\\n\\t\\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(assets, maxAmountsIn, userDataEncoded, false);\\n\\t\\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\\n\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tliquidity = lp.balanceOf(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets needed WETH for adding LP\\n\\t * @param lpAmount LP amount\\n\\t * @return wethAmount WETH amount\\n\\t */\\n\\tfunction quoteWETH(uint256 lpAmount) public view override returns (uint256 wethAmount) {\\n\\t\\t(address token0, address token1) = _sortTokens(outTokenAddr, inTokenAddr);\\n\\t\\tIAsset[] memory assets = new IAsset[](2);\\n\\t\\tassets[0] = IAsset(token0);\\n\\t\\tassets[1] = IAsset(token1);\\n\\n\\t\\tuint256[] memory maxAmountsIn = new uint256[](2);\\n\\t\\tuint256 enterTokenIndex;\\n\\t\\tif (token0 == inTokenAddr) {\\n\\t\\t\\tenterTokenIndex = 0;\\n\\t\\t\\tmaxAmountsIn[0] = type(uint256).max;\\n\\t\\t\\tmaxAmountsIn[1] = 0;\\n\\t\\t} else {\\n\\t\\t\\tenterTokenIndex = 1;\\n\\t\\t\\tmaxAmountsIn[0] = 0;\\n\\t\\t\\tmaxAmountsIn[1] = type(uint256).max;\\n\\t\\t}\\n\\n\\t\\tbytes memory userDataEncoded = abi.encode(\\n\\t\\t\\tIWeightedPool.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\\n\\t\\t\\tlpAmount,\\n\\t\\t\\tenterTokenIndex\\n\\t\\t);\\n\\t\\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(assets, maxAmountsIn, userDataEncoded, false);\\n\\n\\t\\t(bool success, bytes memory data) = BALANCER_QUERIES.staticcall(\\n\\t\\t\\tabi.encodeCall(IBalancerQueries.queryJoin, (poolId, address(this), address(this), inRequest))\\n\\t\\t);\\n\\t\\tif (!success) revert QuoteFail();\\n\\t\\t(, uint256[] memory amountsIn) = abi.decode(data, (uint256, uint256[]));\\n\\t\\treturn amountsIn[enterTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap WETH\\n\\t * @param amount to zap\\n\\t * @return liquidity token amount\\n\\t */\\n\\tfunction zapWETH(uint256 amount) public returns (uint256 liquidity) {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\tIWETH(wethAddr).transferFrom(msg.sender, address(this), amount);\\n\\t\\tliquidity = _joinPool(amount, 0);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t\\t_refundDust(outTokenAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap WETH and RDNT\\n\\t * @param _wethAmt WETH amount\\n\\t * @param _rdntAmt RDNT amount\\n\\t * @return liquidity token amount\\n\\t */\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public returns (uint256 liquidity) {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\tIWETH(wethAddr).transferFrom(msg.sender, address(this), _wethAmt);\\n\\t\\tIERC20(outTokenAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\\n\\n\\t\\tliquidity = _joinPool(_wethAmt, _rdntAmt);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\n\\t\\t_refundDust(outTokenAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sort tokens\\n\\t */\\n\\tfunction _sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n\\t\\tif (tokenA == tokenB) revert IdenticalAddresses();\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\tif (token0 == address(0)) revert AddressZero();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate quote in WETH from token\\n\\t * @param tokenAmount RDNT amount\\n\\t * @return optimalWETHAmount WETH amount\\n\\t */\\n\\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\\n\\t\\tuint256 rdntPriceInEth = getPrice();\\n\\t\\tuint256 p1 = rdntPriceInEth * 1e10;\\n\\t\\tuint256 ethRequiredBeforeWeight = (tokenAmount * p1) / 1e18;\\n\\t\\toptimalWETHAmount = ethRequiredBeforeWeight / POOL_WEIGHT;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set lockzap contract\\n\\t */\\n\\tfunction setLockZap(address _lockZap) external onlyOwner {\\n\\t\\tif (_lockZap == address(0)) revert AddressZero();\\n\\t\\tlockZap = _lockZap;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate tokenAmount from WETH\\n\\t * @param _inToken input token\\n\\t * @param _wethAmount WETH amount\\n\\t * @return tokenAmount token amount\\n\\t */\\n\\tfunction quoteSwap(address _inToken, uint256 _wethAmount) public view override returns (uint256 tokenAmount) {\\n\\t\\tIVault.SingleSwap memory singleSwap;\\n\\t\\tsingleSwap.poolId = poolId;\\n\\t\\tsingleSwap.kind = IVault.SwapKind.GIVEN_OUT;\\n\\t\\tsingleSwap.assetIn = IAsset(_inToken);\\n\\t\\tsingleSwap.assetOut = IAsset(wethAddr);\\n\\t\\tsingleSwap.amount = _wethAmount;\\n\\t\\tsingleSwap.userData = abi.encode(0);\\n\\n\\t\\tIVault.FundManagement memory funds;\\n\\t\\tfunds.sender = address(this);\\n\\t\\tfunds.fromInternalBalance = false;\\n\\t\\tfunds.recipient = payable(address(this));\\n\\t\\tfunds.toInternalBalance = false;\\n\\n\\t\\t(bool success, bytes memory data) = BALANCER_QUERIES.staticcall(\\n\\t\\t\\tabi.encodeCall(IBalancerQueries.querySwap, (singleSwap, funds))\\n\\t\\t);\\n\\t\\tif (!success) revert QuoteFail();\\n\\t\\tuint256 amountIn = abi.decode(data, (uint256));\\n\\t\\treturn amountIn;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps tokens like USDC, DAI, USDT, WBTC to WETH\\n\\t * @param _inToken address of the asset to swap\\n\\t * @param _amount the amount of asset to swap\\n\\t * @param _minAmountOut the minimum WETH amount to accept without reverting\\n\\t */\\n\\tfunction swapToWeth(address _inToken, uint256 _amount, uint256 _minAmountOut) external {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\tif (_inToken == address(0)) revert AddressZero();\\n\\t\\tif (_amount == 0) revert ZeroAmount();\\n\\t\\tbool isSingleSwap = true;\\n\\t\\tif (_inToken == USDT_ADDRESS || _inToken == DAI_ADDRESS) {\\n\\t\\t\\tisSingleSwap = false;\\n\\t\\t}\\n\\n\\t\\tif (!isSingleSwap) {\\n\\t\\t\\tuint256 usdcBalanceBefore = IERC20(USDC_ADDRESS).balanceOf(address(this));\\n\\t\\t\\t_swap(_inToken, USDC_ADDRESS, _amount, 0, DAI_USDT_USDC_POOL_ID, address(this));\\n\\t\\t\\tuint256 usdcBalanceAfter = IERC20(USDC_ADDRESS).balanceOf(address(this));\\n\\t\\t\\t_inToken = USDC_ADDRESS;\\n\\t\\t\\t_amount = usdcBalanceAfter - usdcBalanceBefore;\\n\\t\\t}\\n\\n\\t\\t_swap(_inToken, REAL_WETH_ADDR, _amount, _minAmountOut, WBTC_WETH_USDC_POOL_ID, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swaps tokens using the Balancer swap function\\n\\t * @param _inToken address of the asset to swap\\n\\t * @param _outToken address of the asset to receieve\\n\\t * @param _amount the amount of asset to swap\\n\\t * @param _minAmountOut the minimum WETH amount to accept without reverting\\n\\t * @param _poolId The ID of the pool to use for swapping\\n\\t * @param _recipient the receiver of the outToken\\n\\t */\\n\\tfunction _swap(\\n\\t\\taddress _inToken,\\n\\t\\taddress _outToken,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _minAmountOut,\\n\\t\\tbytes32 _poolId,\\n\\t\\taddress _recipient\\n\\t) internal {\\n\\t\\tIVault.SingleSwap memory singleSwap;\\n\\t\\tsingleSwap.poolId = _poolId;\\n\\t\\tsingleSwap.kind = IVault.SwapKind.GIVEN_IN;\\n\\t\\tsingleSwap.assetIn = IAsset(_inToken);\\n\\t\\tsingleSwap.assetOut = IAsset(_outToken);\\n\\t\\tsingleSwap.amount = _amount;\\n\\t\\tsingleSwap.userData = abi.encode(0);\\n\\n\\t\\tIVault.FundManagement memory funds;\\n\\t\\tfunds.sender = address(this);\\n\\t\\tfunds.fromInternalBalance = false;\\n\\t\\tfunds.recipient = payable(address(_recipient));\\n\\t\\tfunds.toInternalBalance = false;\\n\\n\\t\\tuint256 currentAllowance = IERC20(_inToken).allowance(address(this), vaultAddr);\\n\\t\\tif (_amount > currentAllowance) {\\n\\t\\t\\tIERC20(_inToken).forceApprove(vaultAddr, _amount);\\n\\t\\t}\\n\\t\\tIVault(vaultAddr).swap(singleSwap, funds, _minAmountOut, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get swap fee percentage\\n\\t */\\n\\tfunction getSwapFeePercentage() external view returns (uint256 fee) {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\tfee = pool.getSwapFeePercentage();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set swap fee percentage\\n\\t */\\n\\tfunction setSwapFeePercentage(uint256 _fee) external onlyOwner {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\tpool.setSwapFeePercentage(_fee);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/zap/helpers/DustRefunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\n/// @title Dust Refunder Contract\\n/// @dev Refunds dust tokens remaining from zapping.\\n/// @author Radiant\\ncontract DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @notice Refunds RDNT and WETH.\\n\\t * @param _rdnt RDNT address\\n\\t * @param _weth WETH address\\n\\t * @param _refundAddress Address for refund\\n\\t */\\n\\tfunction _refundDust(address _rdnt, address _weth, address _refundAddress) internal {\\n\\t\\tIERC20 rdnt = IERC20(_rdnt);\\n\\t\\tIWETH weth = IWETH(_weth);\\n\\n\\t\\tuint256 dustWETH = weth.balanceOf(address(this));\\n\\t\\tif (dustWETH > 0) {\\n\\t\\t\\tweth.transfer(_refundAddress, dustWETH);\\n\\t\\t}\\n\\t\\tuint256 dustRdnt = rdnt.balanceOf(address(this));\\n\\t\\tif (dustRdnt > 0) {\\n\\t\\t\\trdnt.safeTransfer(_refundAddress, dustRdnt);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCER_QUERIES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPOW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_USDT_USDC_POOL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_SWAP_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_POOL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_IN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RDNT_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REAL_WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC_WETH_USDC_POOL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rdntPriceInEth\",\"type\":\"uint256\"}],\"name\":\"getLpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rdnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IWeightedPoolFactory\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IWeightedPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalWETHAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"quoteWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"}],\"name\":\"setLockZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rdntAmt\",\"type\":\"uint256\"}],\"name\":\"zapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerPoolHelper", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}