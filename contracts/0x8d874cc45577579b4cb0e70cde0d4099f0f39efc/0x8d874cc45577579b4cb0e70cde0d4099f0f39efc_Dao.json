{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Dao.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/DaoAbstract.sol\\\";\\n\\ncontract Dao is OwnableUpgradeable, DaoStorageV1, DaoEvents {\\n    mapping(uint256 => Judgement) public judgements; // record of all judgements ever created\\n    mapping(uint256 => uint) private _blacklistedDeity; // is deity blacklisted\\n    mapping(uint256 => Proposal) public proposals; // record of all proposals ever proposed\\n    mapping(uint256 => uint) proposalActive; // active proposalId of corresponding diety\\n    mapping(uint256 => uint) waitingTime; // time left to unlock deity, or to create new proposals\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Unauthorised!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrNft() {\\n        require(\\n            msg.sender == admin || msg.sender == address(nft),\\n            \\\"Unauthorised!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyDeity(uint _deityId) {\\n        require(_blacklistedDeity[_deityId] == 0, \\\"Unauthorised:: blacklisted diety\\\");\\n        require(nft.ownerOf(_deityId) == msg.sender, \\\"Unauthorised:: caller not dietyOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidProposalId(uint _proposalId) {\\n        require(\\n            _proposalId > 0 && _proposalId <= proposalCount, \\\"validPID:: Proposal Id doesn't exist!\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize() external initializer {\\n        __Ownable_init_unchained();\\n        minVotingTime = 172800;  // 2 days\\n        maxVotingTime = 1209600; // 14 days\\n        minProposalThreshold = 2 ether;\\n        maxProposalThreshold = 15 ether;\\n        maxRefundTime = 2629743; // 1 month\\n        unlockTime = 604800;      // \\n        maxLengthTitle = 32;\\n        maxLengthLink = 100;\\n        maxLengthDesc = 200;\\n        name = \\\"Scarab Dao\\\";\\n        DOMAIN_TYPEHASH =  keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        VOTE_PROPOSAL_TYPEHASH = keccak256(\\\"VoteProposal(uint256 proposalId,bool voteFor)\\\");\\n        VOTE_JUDGEMENT_TYPEHASH =  keccak256(\\\"VoteJudgement(uint256 judgementId,bool favourJudgment)\\\");\\n    }\\n\\n    function setContractAddresses(\\n        IAddressContract _contractFactory\\n    ) external onlyOwner {\\n        barac = IBARAC(_contractFactory.getBarac());\\n        nft = IERC721Upgradeable(_contractFactory.getScarabNFT());\\n        treasury = _contractFactory.getTreasury();\\n    }\\n\\n    function changeAdmin(address _newAdmin) external onlyOwner {\\n        address currentAdmin = admin;\\n        admin = _newAdmin;\\n        emit AdminChanged(currentAdmin, _newAdmin);\\n    }\\n\\n    function setMaxProposalThreshold(uint256 _eth) external onlyAdmin {\\n        maxProposalThreshold = _eth;\\n    }\\n\\n    function setMinxProposalThreshold(uint256 _eth) external onlyAdmin {\\n        minProposalThreshold = _eth;\\n    }\\n\\n    function setMinVotingTime(uint256 _minTime) external onlyAdmin {\\n        minVotingTime = _minTime;\\n    }\\n\\n    function setMaxVotingTime(uint256 _maxTime) external onlyAdmin {\\n        maxVotingTime = _maxTime;\\n    }\\n\\n    function setMaxRefundTime(uint256 _maxRefundTime) external onlyAdmin {\\n        maxRefundTime = _maxRefundTime;\\n    }\\n\\n    function setDeityUnlockTime(uint _unlockTime) external onlyAdmin {\\n        unlockTime = _unlockTime;\\n    }\\n\\n    function setMaxCharacterLength(uint _titleLength, uint _linkLength, uint _descLength) external onlyAdmin {\\n        maxLengthTitle = _titleLength;\\n        maxLengthLink = _linkLength;\\n        maxLengthDesc = _descLength;\\n    }\\n\\n    function unlockBlacklistDeity(uint _deityId) external onlyAdminOrNft {\\n        _blacklistedDeity[_deityId] = 0;\\n        emit UnlockBlacklistDeity(_deityId, msg.sender);\\n    }\\n\\n\\n    function createProposal(\\n        uint256 deityId,\\n        address payable recipient,\\n        uint256 value,\\n        uint256 refundTime,\\n        uint startTime,\\n        uint endTime,\\n        ProposalDetails calldata _proposalDetials\\n    ) external onlyDeity(deityId) returns (uint256) {\\n        require(proposalActive[deityId] == 0, \\\"createProposal:: already active proposal!\\\");\\n        require(\\n            waitingTime[deityId] < block.timestamp,\\n            \\\"createProposal:: waiting time not ended\\\"\\n        );\\n\\n        require(value >= minProposalThreshold, \\\"createProposal:: proposal value too low\\\");\\n        require(value <= maxProposalThreshold, \\\"createProposal:: proposal value too high\\\");\\n\\n        uint votingTime = endTime - startTime;\\n\\n        require(\\n            minVotingTime <= votingTime && maxVotingTime >= votingTime,\\n            \\\"createProposal:: invalid voting time\\\"\\n        );\\n        require(maxRefundTime >= refundTime, \\\"createProposal:: invalid refund Time\\\");\\n        require(\\n            bytes(_proposalDetials.title).length <= maxLengthTitle &&\\n                bytes(_proposalDetials.description).length <= maxLengthDesc &&\\n                bytes(_proposalDetials.socialLink).length <= maxLengthLink &&\\n                bytes(_proposalDetials.docLink).length <= maxLengthLink,\\n            \\\"createProposal:: title, description, socialLink or docLink len exceed\\\"\\n        );\\n\\n        proposalCount++;\\n        uint proposalId = proposalCount;\\n        Proposal storage _proposal = proposals[proposalId];\\n        _proposal.id = proposalId;\\n        _proposal.deityId = deityId;\\n        _proposal.recipient = recipient;\\n        _proposal.value = value;\\n        _proposal.refundTime = refundTime;\\n        _proposal.startTimestamp = block.timestamp + startTime;\\n        _proposal.endTimestamp = block.timestamp + endTime;\\n        _proposal.proposalDetails = _proposalDetials;\\n\\n        emit NewProposal(proposalId);\\n        proposalActive[deityId] = proposalId;\\n        waitingTime[deityId] = 0;\\n        return proposalId;\\n    }\\n\\n    function castVote(uint256 proposalId, bool voteFor) external {\\n        _vote(msg.sender, proposalId, voteFor);\\n    }\\n\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        bool voteFor,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainIdInternal(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(VOTE_PROPOSAL_TYPEHASH, proposalId, voteFor)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"castVoteBySig:: invalid signature\\\"\\n        );\\n        _vote(signatory, proposalId, voteFor);\\n    }\\n\\n    function cancelProposal(uint256 _proposalId) external onlyValidProposalId(_proposalId) {\\n    \\n        Proposal storage _proposal = proposals[_proposalId];\\n        uint deityId = _proposal.deityId;\\n\\n        require(!_proposal.executed, \\\"cancelProposal:: proposal already executed\\\");\\n        require(!_proposal.cancelled, \\\"cancelProposal:: proposal already cancelled\\\");\\n\\n        require(nft.ownerOf(deityId) == msg.sender, \\\"cancelProposal:: Unauthorized\\\");\\n\\n        _proposal.cancelled = true;\\n\\n        proposalActive[deityId] = 0;\\n        waitingTime[deityId] = 0;\\n        emit ProposalCancelled(_proposalId);\\n    }\\n\\n    function executeProposal(uint256 _proposalId) external onlyValidProposalId(_proposalId) {\\n\\n        Proposal storage _proposal = proposals[_proposalId];\\n\\n        require(block.timestamp >= _proposal.endTimestamp, \\\"executeProposal:: voting is still ongoing\\\");\\n        require(!_proposal.executed, \\\"executeProposal:: proposal already executed\\\");     \\n        require(!_proposal.cancelled, \\\"executeProposal:: proposal already cancelled\\\"); \\n\\n        if (_proposal.votesFor > _proposal.votesAgainst) {\\n            (bool success, ) = address(treasury).call(\\n                abi.encodeWithSignature(\\n                    \\\"fundTransfer(uint256,address,uint256)\\\",\\n                    _proposalId,\\n                    _proposal.recipient,\\n                    _proposal.value\\n                )\\n            );\\n            require(\\n                success,\\n                \\\"executeProposal:: Treasury fund transfer failed\\\"\\n            );\\n            _proposal.expectedsettlementTime = block.timestamp + _proposal.refundTime;\\n        } else {\\n            // proposal executed and closed (settled)\\n            proposalActive[_proposal.deityId] = 0;\\n            RefundDetials storage refunddetails = _proposal.refundDetails;\\n            refunddetails.settled = true;\\n        }\\n\\n        _proposal.executed = true;\\n        emit ProposalExecuted(_proposalId);\\n    }\\n\\n    function refund(uint _proposalId, bool lastPayment) external payable onlyValidProposalId(_proposalId) {\\n\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(proposal.executed, \\\"refund:: proposal not executed yet\\\");\\n\\n        // check whether judgement is raised or not\\n        Judgement storage _judgement = judgements[\\n            _proposalId\\n        ];\\n        if (_judgement.isSuspected) {\\n            revert(\\\"refund:: no refund time\\\");\\n        }\\n\\n        RefundDetials storage refunddetails = proposal.refundDetails;\\n        require(!refunddetails.settled, \\\"refund:: proposal already settled\\\");\\n\\n        refunddetails.amount += msg.value;\\n        refunddetails.lastrefundTime = block.timestamp;\\n\\n        emit Refund(_proposalId, msg.value);\\n\\n        if (lastPayment) {\\n            uint totalrefundValue = refunddetails.amount;\\n            uint deityId = proposal.deityId;\\n            require(\\n                nft.ownerOf(deityId) == msg.sender,\\n                \\\"refund:: settlement: not deity\\\"\\n            );\\n            refunddetails.settled = true;\\n            waitingTime[deityId] = block.timestamp + unlockTime;\\n            proposalActive[deityId] = 0;\\n            (bool success, ) = address(treasury).call{value: totalrefundValue}(\\n                abi.encodeWithSignature(\\n                    \\\"distributeProfit(uint256,uint256,uint256,uint256)\\\",\\n                    _proposalId,\\n                    proposal.deityId,\\n                    proposal.value,\\n                    totalrefundValue\\n                )\\n            );\\n            require(success, \\\"refund:: settlement failed\\\");\\n\\n            emit ProposalSettled(_proposalId, totalrefundValue);\\n        }\\n    }\\n\\n    function raiseJudgment(\\n        uint256 _proposalId,\\n        uint _deityId,\\n        uint256 _value,\\n        uint votingTime,\\n        string calldata allegation,\\n        string calldata allegationDocLink\\n    ) external onlyDeity(_deityId) onlyValidProposalId(_proposalId) {\\n\\n        require(\\n            minVotingTime < votingTime && maxVotingTime > votingTime,\\n            \\\"raiseJudgment:: invalid voting time\\\"\\n        );\\n\\n        Judgement storage _judgement = judgements[\\n            _proposalId\\n        ];\\n        Proposal storage _suspectedProposal = proposals[_proposalId];\\n\\n        // check necessary conditions before open any judgement\\n        require(\\n            _suspectedProposal.executed,\\n            \\\"raiseJudgment:: proposal not executed yet\\\"\\n        );\\n        require(\\n            _suspectedProposal.expectedsettlementTime < block.timestamp,\\n            \\\"raiseJudgment:: wait until expectedsettlementTime\\\"\\n        );\\n\\n        // require(_value > _suspectedProposal.value, \\\"raiseJudgment:: judgement amount must be greater than proposal amount\\\");\\n\\n        uint proposerdeityId = _suspectedProposal.deityId;\\n        uint currentActiveProposalId = proposalActive[proposerdeityId];\\n\\n        if (currentActiveProposalId != 0) {\\n            require(\\n                currentActiveProposalId == _proposalId,\\n                \\\"raiseJudgment:: wrong proposal id\\\"\\n            );\\n            require(\\n                waitingTime[_suspectedProposal.deityId] == 0,\\n                \\\"raiseJudgment:: something wrong\\\"\\n            );\\n        } else {\\n            require(\\n                waitingTime[proposerdeityId] > block.timestamp,\\n                \\\"raiseJudgment:: judgement creation time over\\\"\\n            );\\n        }\\n\\n        require(proposerdeityId != _deityId, \\\"raiseJudgment:: proposee can't raise judgement\\\");\\n        require(\\n            !_judgement.isSuspected,\\n            \\\"raiseJudgment:: judgement alreadycreated\\\"\\n        );\\n\\n        require(bytes(allegation).length <= maxLengthDesc &&\\n                bytes(allegationDocLink).length <= maxLengthLink,\\n            \\\"raiseJudgment:: title, description len exceed\\\"\\n        );\\n\\n        _judgement.author = _deityId;\\n        _judgement.value = _value;\\n        _judgement.proposalId = _proposalId;\\n        _judgement.startTimestamp = block.timestamp;\\n        _judgement.endTimestamp = block.timestamp + votingTime;\\n        _judgement.isSuspected = true;\\n        _judgement.judgementDetails.allegation = allegation;\\n        _judgement.judgementDetails.allegationDocLink = allegationDocLink;\\n\\n        proposalActive[_suspectedProposal.deityId] = _proposalId;\\n\\n        emit JudgmentProposed(\\n            _deityId,\\n            proposerdeityId,\\n            _proposalId\\n        );\\n    }\\n\\n    function explainJudgment(\\n        uint _proposalId,\\n        string calldata _explanation,\\n        string calldata _explanationLink\\n    ) external onlyValidProposalId(_proposalId) {\\n       \\n        Proposal storage proposal = proposals[_proposalId];\\n        Judgement storage _judgement = judgements[\\n            _proposalId\\n        ];\\n\\n        require(_judgement.isSuspected, \\\"explainJudgment:: deity not suspected!\\\");\\n        uint deityId = proposal.deityId;\\n        require(nft.ownerOf(deityId) == msg.sender, \\\"explainJudgment:: caller not proposer\\\");\\n        require(\\n            block.timestamp < _judgement.endTimestamp,\\n            \\\"explainJudgment:: explaination time over\\\"\\n        );\\n\\n        require(bytes(_explanation).length <= maxLengthDesc &&\\n                bytes(_explanationLink).length <= maxLengthLink,\\n            \\\"explainJudgment:: title, description len exceed\\\"\\n        );\\n\\n        _judgement.judgementDetails.explanation = _explanation;\\n        _judgement.judgementDetails.explanationLink = _explanationLink;\\n\\n        emit explainJudgement(_proposalId);\\n    }\\n\\n    function castVoteJudgement(\\n        uint256 _proposalId,\\n        bool favourJudment\\n    ) external {\\n        _voteJudgment(msg.sender, _proposalId, favourJudment);\\n    }\\n\\n    function castVoteJudgementBySig(\\n        uint256 _proposalId,\\n        bool favourJudment,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainIdInternal(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(VOTE_JUDGEMENT_TYPEHASH, _proposalId, favourJudment)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"castVoteJudgementBySig: invalid signature\\\"\\n        );\\n        _voteJudgment(signatory, _proposalId, favourJudment);\\n    }\\n\\n    function processJudgment(uint256 _proposalId) external onlyValidProposalId(_proposalId) {\\n\\n        Judgement storage _judgement = judgements[_proposalId];\\n\\n        require(\\n            _judgement.endTimestamp < block.timestamp,\\n            \\\"processJudgment:: voting live\\\"\\n        );\\n        require(_judgement.isSuspected, \\\"processJudgment:: deityId is not suspected!\\\");\\n        require(\\n            !_judgement.isJudgementProcessed,\\n            \\\"processJudgment:: judgement already processed\\\"\\n        );\\n\\n        Proposal storage _proposal = proposals[_proposalId];\\n\\n        if (\\n            _judgement.votesForJudgement >=\\n            _judgement.votesAgainstJudgement\\n        ) {\\n            _judgement.isDeityPunished = true;\\n            _blacklistedDeity[_proposal.deityId] = _proposalId;\\n        }\\n        \\n        RefundDetials storage _refunddetails = _proposal.refundDetails;\\n        \\n        if (!_refunddetails.settled) {\\n            uint totalrefundValue = _refunddetails.amount;\\n            _refunddetails.settled = true;\\n            (bool success, ) = address(treasury).call{value: totalrefundValue}(\\n                abi.encodeWithSignature(\\n                    \\\"distributeProfit(uint256,uint256,uint256,uint256)\\\",\\n                    _proposalId,\\n                    _proposal.deityId,\\n                    _proposal.value,   \\n                    totalrefundValue \\n                ) \\n            );\\n            require(success, \\\"processJudgment:: settlement failed\\\");\\n            emit ProposalSettled(_proposalId,totalrefundValue);\\n        } \\n\\n        _judgement.isJudgementProcessed = true;\\n\\n        // close proposal\\n        uint deityId = _proposal.deityId;\\n        proposalActive[deityId] = 0;\\n        waitingTime[deityId] = block.timestamp;\\n        emit JudgmentProcessed(_proposalId);\\n    }\\n\\n    function getBlackistedProposal(uint _deityId) external view returns (uint) {\\n        return _blacklistedDeity[_deityId];\\n    }\\n\\n    function getActiveProposal(uint _deityId) external view returns (uint) {\\n        return proposalActive[_deityId];\\n    }\\n\\n    function getDeityWaitingTime(uint _deityId) external view returns (uint) {\\n        return waitingTime[_deityId];\\n    }\\n\\n    function getProposalExecuted(\\n        uint256 proposalId\\n    ) external view returns (bool) {\\n        return proposals[proposalId].executed;\\n    }\\n\\n    function getJudgementProcessed(\\n        uint256 proposalId\\n    ) external view returns (bool) {\\n        return judgements[proposalId].isJudgementProcessed;\\n    }\\n\\n    function getVoteReceipit(\\n        address _voter,\\n        uint256 _proposalId\\n    ) external view returns (Receipt memory) {\\n        Proposal storage _proposal = proposals[_proposalId];\\n        Receipt memory receipt = _proposal.receipts[_voter];\\n        return receipt;\\n    }\\n\\n    function getJudgementVoteReceipit(\\n        address _voter,\\n        uint256 _proposalId\\n    ) external view returns (Receipt memory) {\\n        Judgement storage _judgement = judgements[_proposalId];\\n        Receipt memory receipt = _judgement.receipts[_voter];\\n        return receipt;\\n    }\\n\\n    function getRefundDetails(\\n        uint256 _proposalId\\n    ) external view returns (RefundDetials memory) {\\n    \\n        Proposal storage proposal = proposals[_proposalId];\\n        RefundDetials memory refunddetails = proposal.refundDetails;\\n        return refunddetails;\\n    }\\n\\n    function getProposalDetails(\\n        uint256 _proposalId\\n    ) external view returns (ProposalDetails memory) {\\n        Proposal storage proposal = proposals[_proposalId];\\n        return proposal.proposalDetails;\\n    }\\n\\n    function getJudgementDetails(\\n        uint256 _proposalId\\n    ) external view returns (JudgementDetails memory) {\\n        Judgement storage _judgement = judgements[_proposalId];\\n        return _judgement.judgementDetails;\\n    }\\n\\n    function getProposalAmount(uint proposalId) external view returns (uint) {\\n        return proposals[proposalId].value;\\n    }\\n\\n    function getRefundAmount(uint proposalId) external view returns (uint) {\\n       return proposals[proposalId].refundDetails.amount;\\n    }\\n\\n    function getJudgementAmount(uint proposalId) external view returns (uint) {\\n       return judgements[proposalId].value;\\n    }\\n\\n    function isJudgementRaised(uint proposalId) external view returns (bool) {\\n\\n        Judgement storage _judgement = judgements[\\n            proposalId\\n        ];\\n        return _judgement.isSuspected; \\n    }\\n\\n    function canRaiseJudgement(uint proposalId) external view returns (bool) {\\n\\n        Proposal storage _suspectedProposal = proposals[proposalId];\\n\\n        if (!_suspectedProposal.executed) {\\n            return false;\\n        }\\n\\n        if (_suspectedProposal.expectedsettlementTime > block.timestamp) {\\n            return false;\\n        }\\n\\n        uint proposerdeityId = _suspectedProposal.deityId;\\n        uint currentActiveProposalId = proposalActive[proposerdeityId];\\n        uint waitingTimeDeity = waitingTime[proposerdeityId];\\n\\n        if (currentActiveProposalId != 0) {\\n            if (currentActiveProposalId != proposalId) {\\n                return false;\\n            }\\n            if (waitingTimeDeity != 0) {\\n                return false;\\n            }\\n\\n        } else {\\n            if (waitingTimeDeity < block.timestamp) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getProposalState(\\n        uint proposalId\\n    ) public view returns (ProposalState) {\\n        require(\\n            proposalId > 0 && proposalId <= proposalCount,\\n            \\\"Proposal Id doesn't exist!\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        if (proposal.cancelled) {\\n            return ProposalState.Canceled;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (block.timestamp <= proposal.startTimestamp) {\\n            return ProposalState.Pending;\\n        } else if (block.timestamp <= proposal.endTimestamp) {\\n            return ProposalState.Active;\\n        } \\n        else {\\n            return ProposalState.Expired;\\n        }\\n    }\\n\\n    function _vote(address voter, uint256 _proposalId, bool voteFor) internal onlyValidProposalId(_proposalId) {\\n\\n        require(\\n            getProposalState(_proposalId) == ProposalState.Active,\\n            \\\"_vote:: voting not live\\\"\\n        );\\n        Proposal storage proposal = proposals[_proposalId];\\n        Receipt storage receipt = proposal.receipts[voter];\\n        require(\\n            !receipt.hasVoted,\\n            \\\"_vote:: voter already voted\\\"\\n        );\\n       \\n        uint256 votes = barac.getPastVotes(voter, proposal.startTimestamp);\\n\\n        if (voteFor) {\\n            proposal.votesFor = proposal.votesFor + votes;\\n        } else {\\n            proposal.votesAgainst = proposal.votesAgainst + votes;\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = voteFor;\\n        receipt.votes = votes;\\n\\n        emit Vote(_proposalId, voter, voteFor);\\n    }\\n\\n    function _voteJudgment(\\n        address voter,\\n        uint _proposalId,\\n        bool favourJudment\\n    ) internal onlyValidProposalId(_proposalId) {\\n\\n        Judgement storage _judgement = judgements[\\n            _proposalId\\n        ];\\n\\n        uint256 votes = barac.getPastVotes(\\n            voter,\\n            _judgement.startTimestamp\\n        );\\n\\n        Receipt storage receipt = _judgement.receipts[voter];\\n        require(\\n            !receipt.hasVoted,\\n            \\\"_voteJudgment:: voter already voted\\\"\\n        );\\n\\n        require(_judgement.isSuspected, \\\"_voteJudgment:: deity is not suspected!\\\");\\n        require(\\n            _judgement.startTimestamp < block.timestamp &&\\n                _judgement.endTimestamp > block.timestamp,\\n            \\\"_voteJudgment:: voting not live\\\"\\n        );\\n\\n        if (favourJudment) {\\n            _judgement.votesForJudgement =\\n                _judgement.votesForJudgement +\\n                votes;\\n        } else {\\n            _judgement.votesAgainstJudgement =\\n                _judgement.votesAgainstJudgement +\\n                votes;\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = favourJudment;\\n        receipt.votes = votes;\\n        emit JudgmentVoted(_proposalId, voter, favourJudment, votes);\\n    }\\n\\n    function getChainIdInternal() internal view returns (uint) {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/DaoAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IAddressContract} from \\\"./IAddressContract.sol\\\";\\nimport {IBARAC} from \\\"./IBARAC.sol\\\";\\n\\nabstract contract DaoEvents {\\n    event NewProposal(uint256 indexed proposalId);\\n\\n    event Vote(uint256 indexed proposalId, address indexed voter, bool voteFor);\\n\\n    event ProposalExecuted(uint256 indexed proposalId);\\n    event ProposalCancelled(uint256 indexed proposalId);\\n    event Refund(uint256 indexed proposalId, uint amount);\\n    event ProposalSettled(uint256 indexed proposalId, uint refundAmound);\\n\\n    event JudgmentProposed(\\n        uint256 indexed callerNftId,\\n        uint256 indexed deityNftId,\\n        uint256 indexed proposalId\\n    );\\n    event explainJudgement(uint indexed proposalId);\\n    event JudgmentVoted(\\n        uint256 indexed proposalId,\\n        address indexed voter,\\n        bool favourJudment,\\n        uint votes\\n    );\\n    event JudgmentProcessed(uint indexed proposalId);\\n\\n    event UnlockBlacklistDeity(uint indexed deityId, address indexed caller);\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n}\\n\\nabstract contract DaoStructs {\\n    struct Proposal {\\n        uint256 id;\\n        uint256 deityId;\\n        address payable recipient;\\n        uint256 value;\\n        uint256 refundTime;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 expectedsettlementTime;\\n        bool executed;\\n        bool cancelled;\\n        mapping(address => Receipt) receipts;\\n        ProposalDetails proposalDetails;\\n        RefundDetials refundDetails;\\n    }\\n\\n    struct ProposalDetails {\\n        string title;\\n        string description;\\n        string socialLink;\\n        string docLink;\\n    }\\n\\n    struct RefundDetials {\\n        uint amount;\\n        uint lastrefundTime;\\n        bool settled;\\n    }\\n\\n    struct Receipt {\\n        bool hasVoted;\\n        bool support;\\n        uint256 votes;\\n    }\\n\\n    enum ProposalState {\\n        Canceled,\\n        Pending,\\n        Active,\\n        Executed,\\n        Expired\\n    }\\n\\n    struct Judgement {\\n        uint author; // who proposed this judgement\\n        uint proposalId;\\n        uint256 value; // fraud amount\\n        uint256 votesForJudgement; // counter track which support this judgement\\n        uint256 votesAgainstJudgement; // counter track which are against this judgement\\n        uint256 startTimestamp; // timestamp for when the voting will live on this judgement\\n        uint256 endTimestamp; // timestamp for when the voting will end on this judgement\\n        bool isDeityPunished; // is deity convicted\\n        bool isJudgementProcessed; // whether the judgement is processed or not\\n        bool isSuspected; // whether the deity is suspected of proposal malpractice\\n        // mapping(address => bool) judgementVoters; // keep track of which deity vote on this judgement\\n        mapping(address => Receipt) receipts; // keep track of which deity vote on this judgement\\n        JudgementDetails judgementDetails;\\n    }\\n\\n    struct JudgementDetails {\\n        string allegation;\\n        string allegationDocLink;\\n        string explanation;       \\n        string explanationLink;\\n    }\\n}\\n\\n/**\\n * @title Storage for Dao\\n * @notice For future upgrades, do not change DaoStorageV1. Create a new\\n * contract which implements DaoStorageV1 and following the naming convention\\n * DaoStorageVX.\\n */\\ncontract DaoStorageV1 is DaoStructs {\\n    IBARAC public barac;\\n    IERC721Upgradeable public nft;\\n    address public admin;\\n    address public treasury;\\n    uint256 public proposalCount;\\n    uint256 public minVotingTime;\\n    uint256 public maxVotingTime;\\n    uint256 public minProposalThreshold;\\n    uint256 public maxProposalThreshold;\\n    uint256 public maxRefundTime; \\n    uint256 public unlockTime;\\n    uint public maxLengthTitle;\\n    uint public maxLengthLink;\\n    uint public maxLengthDesc;\\n\\n    string public name;\\n    bytes32 public DOMAIN_TYPEHASH;\\n    bytes32 public VOTE_PROPOSAL_TYPEHASH;\\n    bytes32 public VOTE_JUDGEMENT_TYPEHASH;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAddressContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IAddressContract {\\n\\n    function getDao() external view returns (address);\\n    \\n    function getTreasury() external view returns (address);\\n   \\n    function getScarabNFT() external view returns (address);\\n    \\n    function getScarab() external view returns (address);\\n\\n    function getBarac() external view returns (address);\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBARAC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IBARAC is IERC20 {\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"JudgmentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"callerNftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deityNftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"JudgmentProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"favourJudment\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"JudgmentVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmound\",\"type\":\"uint256\"}],\"name\":\"ProposalSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnlockBlacklistDeity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"explainJudgement\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_JUDGEMENT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_PROPOSAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"barac\",\"outputs\":[{\"internalType\":\"contract IBARAC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"canRaiseJudgement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"favourJudment\",\"type\":\"bool\"}],\"name\":\"castVoteJudgement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"favourJudment\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteJudgementBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deityId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"docLink\",\"type\":\"string\"}],\"internalType\":\"struct DaoStructs.ProposalDetails\",\"name\":\"_proposalDetials\",\"type\":\"tuple\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_explanationLink\",\"type\":\"string\"}],\"name\":\"explainJudgment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deityId\",\"type\":\"uint256\"}],\"name\":\"getActiveProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deityId\",\"type\":\"uint256\"}],\"name\":\"getBlackistedProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deityId\",\"type\":\"uint256\"}],\"name\":\"getDeityWaitingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getJudgementAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getJudgementDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"allegation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"allegationDocLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"explanationLink\",\"type\":\"string\"}],\"internalType\":\"struct DaoStructs.JudgementDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getJudgementProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getJudgementVoteReceipit\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoStructs.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"docLink\",\"type\":\"string\"}],\"internalType\":\"struct DaoStructs.ProposalDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalState\",\"outputs\":[{\"internalType\":\"enum DaoStructs.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getRefundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getRefundDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastrefundTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"internalType\":\"struct DaoStructs.RefundDetials\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getVoteReceipit\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoStructs.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isJudgementRaised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"judgements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"author\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesForJudgement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainstJudgement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeityPunished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isJudgementProcessed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSuspected\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"allegation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"allegationDocLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"explanationLink\",\"type\":\"string\"}],\"internalType\":\"struct DaoStructs.JudgementDetails\",\"name\":\"judgementDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLengthDesc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLengthLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLengthTitle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRefundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVotingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"processJudgment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deityId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedsettlementTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"docLink\",\"type\":\"string\"}],\"internalType\":\"struct DaoStructs.ProposalDetails\",\"name\":\"proposalDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastrefundTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"internalType\":\"struct DaoStructs.RefundDetials\",\"name\":\"refundDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"allegation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"allegationDocLink\",\"type\":\"string\"}],\"name\":\"raiseJudgment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lastPayment\",\"type\":\"bool\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressContract\",\"name\":\"_contractFactory\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"setDeityUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_titleLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_linkLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_descLength\",\"type\":\"uint256\"}],\"name\":\"setMaxCharacterLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"setMaxProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRefundTime\",\"type\":\"uint256\"}],\"name\":\"setMaxRefundTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTime\",\"type\":\"uint256\"}],\"name\":\"setMaxVotingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTime\",\"type\":\"uint256\"}],\"name\":\"setMinVotingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"setMinxProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deityId\",\"type\":\"uint256\"}],\"name\":\"unlockBlacklistDeity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Dao", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}