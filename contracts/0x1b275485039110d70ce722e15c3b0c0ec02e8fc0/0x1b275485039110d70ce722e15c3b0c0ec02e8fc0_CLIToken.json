{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath\r\n{\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    \t{\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\r\n\t\treturn c;\r\n  \t}\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n  \t}\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tassert(b <= a);\r\n\r\n\t\treturn a - b;\r\n  \t}\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\r\n\t\treturn c;\r\n  \t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnerHelper\r\n{\r\n  \taddress public owner;\r\n\r\n  \tevent ChangeOwner(address indexed _from, address indexed _to);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n  \tmodifier onlyOwner\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n  \t}\r\n  \t\r\n  \tconstructor() public\r\n\t{\r\n\t\towner = msg.sender;\r\n  \t}\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */  \t\r\n  \tfunction transferOwnership(address _to) onlyOwner public\r\n  \t{\r\n    \trequire(_to != owner);\r\n    \trequire(_to != address(0x0));\r\n\r\n        address from = owner;\r\n      \towner = _to;\r\n  \t    \r\n      \temit ChangeOwner(from, _to);\r\n  \t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ncontract ERC20Interface\r\n{\r\n    event Transfer( address indexed _from, address indexed _to, uint _value);\r\n    event Approval( address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    function totalSupply() view public returns (uint _supply);\r\n    function balanceOf( address _who ) public view returns (uint _value);\r\n    function transfer( address _to, uint _value) public returns (bool _success);\r\n    function approve( address _spender, uint _value ) public returns (bool _success);\r\n    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\r\n    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\r\n}\r\n\r\n// Top Module\r\ncontract CLIToken is ERC20Interface, OwnerHelper\r\n{\r\n    using SafeMath for uint;\r\n    \r\n    string public name;\r\n    uint public decimals;\r\n    string public symbol;\r\n    \r\n    uint constant private E18 = 1000000000000000000;\r\n    \r\n    // Total                                  2,000,000,000\r\n    uint constant public maxTotalSupply     = 2000000000 * E18;\r\n\r\n    // User Engagement                        1,000,000,000 (50%)\r\n    uint constant public maxUserSupply      = 1000000000 * E18;\r\n\r\n    // ECO System                             400,000,000 (20%)\r\n    uint constant public maxECOSupply       = 400000000 * E18;\r\n\r\n    // Airdrop                                200,000,000 (10%)\r\n    uint constant public maxAirdropSupply   = 200000000 * E18;\r\n\r\n    // Marketing                              200,000,000 (10%)\r\n    uint constant public maxMarketSupply    = 200000000 * E18;\r\n\r\n    // Research & Development                 100,000,000 (5%)\r\n    uint constant public maxRnDSupply       = 100000000 * E18;\r\n\r\n    // Team                                   50,000,000 (2.5%)\r\n    uint constant public maxTeamSupply      = 50000000 * E18;\r\n\r\n    // Reserve                                50,000,000 (2.5%)\r\n    uint constant public maxReserveSupply   = 50000000 * E18;   \r\n        \r\n\r\n    uint public totalTokenSupply;\r\n\r\n    uint public tokenIssuedUser;\r\n    uint public tokenIssuedECO;\r\n    uint public tokenIssuedAirdrop;\r\n    uint public tokenIssuedMarket;\r\n    uint public tokenIssuedRnD;\r\n    uint public tokenIssuedTeam;\r\n    uint public tokenIssuedReserve;    \r\n    \r\n    mapping (address => uint) public balances;\r\n    mapping (address => mapping ( address => uint )) public approvals;\r\n      \r\n    bool public tokenLock = false;\r\n\r\n\r\n    event UserIssue(address indexed _to, uint _tokens);\r\n    event ECOIssue(address indexed _to, uint _tokens);\r\n    event AirdropIssue(address indexed _to, uint _tokens);\r\n    event MarketIssue(address indexed _to, uint _tokens);\r\n    event RnDIssue(address indexed _to, uint _tokens);\r\n    event TeamIssue(address indexed _to, uint _tokens);\r\n    event ReserveIssue(address indexed _to, uint _tokens);\r\n\r\n    // Construction of CLI\r\n    constructor() public {\r\n        name        = \"CatchLive\";\r\n        decimals    = 18;\r\n        symbol      = \"CLI\";\r\n        \r\n        totalTokenSupply = 0;\r\n        balances[owner] = totalTokenSupply;\r\n\r\n        // Token Issue\r\n        tokenIssuedUser     = 0;\r\n        tokenIssuedECO      = 0;\r\n        tokenIssuedAirdrop  = 0;\r\n        tokenIssuedMarket   = 0;\r\n        tokenIssuedRnD      = 0;\r\n        tokenIssuedTeam     = 0;\r\n        tokenIssuedReserve  = 0;\r\n        \r\n        // Check max supply\r\n        require(maxTotalSupply == maxUserSupply + maxECOSupply + maxAirdropSupply + maxMarketSupply + maxRnDSupply + maxTeamSupply + maxReserveSupply);\r\n    }\r\n\r\n    // ERC20 totalSupply\r\n    function totalSupply() view public returns (uint) {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    function balanceOf(address _who) view public returns (uint) {\r\n        return balances[_who];\r\n    }\r\n    \r\n    // ERC20 transfer\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(isTransferable() == true);\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // ERC20 approve\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(isTransferable() == true);\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        approvals[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true; \r\n    }\r\n    \r\n    // ERC20 allowance\r\n    function allowance(address _owner, address _spender) view public returns (uint) {\r\n        return approvals[_owner][_spender];\r\n    }\r\n\r\n    // ERC20 transferFrom\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        require(isTransferable() == true);\r\n        require(balances[_from] >= _value);\r\n        require(approvals[_from][msg.sender] >= _value);\r\n        \r\n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to]  = balances[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // Issue for User engagement\r\n    function userIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedUser == 0);\r\n        \r\n        uint tokens = maxUserSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedUser = tokenIssuedUser.add(tokens);\r\n        \r\n        emit UserIssue(_to, tokens);\r\n    }\r\n\r\n    // Issue for ECO\r\n    function ecoIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedECO == 0);\r\n        \r\n        uint tokens = maxECOSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedECO = tokenIssuedECO.add(tokens);\r\n        \r\n        emit ECOIssue(_to, tokens);\r\n    }\r\n\r\n    // Issue for Airdrop\r\n    function airdropIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedAirdrop == 0);\r\n        \r\n        uint tokens = maxAirdropSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedAirdrop = tokenIssuedAirdrop.add(tokens);\r\n        \r\n        emit AirdropIssue(_to, tokens);\r\n    }\r\n\r\n    // Issue for Marketing\r\n    function marketIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedMarket == 0);\r\n        \r\n        uint tokens = maxMarketSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedMarket = tokenIssuedMarket.add(tokens);\r\n        \r\n        emit MarketIssue(_to, tokens);\r\n    }    \r\n\r\n    // Issue for Research and Development\r\n    function rndIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedRnD == 0);\r\n        \r\n        uint tokens = maxRnDSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedRnD = tokenIssuedRnD.add(tokens);\r\n        \r\n        emit RnDIssue(_to, tokens);\r\n    }\r\n\r\n    function teamIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedTeam == 0);\r\n        \r\n        uint tokens = maxTeamSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedTeam = tokenIssuedTeam.add(tokens);\r\n        \r\n        emit TeamIssue(_to, tokens);\r\n    }\r\n    \r\n    // Issue for Reserved\r\n    function reserveIssue(address _to) onlyOwner public {\r\n        require(tokenIssuedReserve == 0);\r\n        \r\n        uint tokens = maxReserveSupply;\r\n\r\n        balances[_to] = balances[_to].add(tokens);\r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedReserve = tokenIssuedReserve.add(tokens);\r\n        \r\n        emit ReserveIssue(_to, tokens);\r\n    }\r\n    \r\n    // Check Transferfable\r\n    function isTransferable() private view returns (bool) {\r\n        if(tokenLock == false)\r\n        {\r\n            return true;\r\n        }\r\n        else if(msg.sender == owner)\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Unlock Token\r\n    function setTokenUnlock() onlyOwner public {\r\n        require(tokenLock == true);        \r\n        tokenLock = false;\r\n    }\r\n    \r\n    // Lock Token\r\n    function setTokenLock() onlyOwner public {\r\n        require(tokenLock == false);\r\n        tokenLock = true;\r\n    }\r\n    \r\n    // Send Token\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) onlyOwner public returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // If user send coin to smart contract address, we can withdwaw the coins.\r\n    function withdrawTokens(address _contract, uint _value) onlyOwner public {\r\n\r\n        if(_contract == address(0x0))\r\n        {\r\n            uint eth = _value.mul(10 ** decimals);\r\n            msg.sender.transfer(eth);\r\n        }\r\n        else\r\n        {\r\n            uint tokens = _value.mul(10 ** decimals);\r\n            ERC20Interface(_contract).transfer(msg.sender, tokens);\r\n            \r\n            emit Transfer(address(0x0), msg.sender, tokens);\r\n        }\r\n    }\r\n\r\n    // Close contract\r\n    function close() onlyOwner public {\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ecoIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUserSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedRnD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMarketSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxECOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRnDSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"teamIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"airdropIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAirdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reserveIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"marketIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedECO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rndIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"userIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuedReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"UserIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"ECOIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"AirdropIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"MarketIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"RnDIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TeamIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"ReserveIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "CLIToken", "CompilerVersion": "v0.5.9+commit.c68bc34e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b79b172ddffe5ae5c3bd488a2109b0f0c949c88421134e58ea292ca21058a893"}