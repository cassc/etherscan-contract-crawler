{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IAggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICegaState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface ICegaState {\\n    function marketMakerAllowList(address marketMaker) external view returns (bool);\\n\\n    function products(string memory productName) external view returns (address);\\n\\n    function oracleAddresses(string memory oracleName) external view returns (address);\\n\\n    function oracleNames() external view returns (string[] memory);\\n\\n    function productNames() external view returns (string[] memory);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function isDefaultAdmin(address sender) external view returns (bool);\\n\\n    function isTraderAdmin(address sender) external view returns (bool);\\n\\n    function isOperatorAdmin(address sender) external view returns (bool);\\n\\n    function isServiceAdmin(address sender) external view returns (bool);\\n\\n    function getOracleNames() external view returns (string[] memory);\\n\\n    function addOracle(string memory oracleName, address oracleAddress) external;\\n\\n    function removeOracle(string memory oracleName) external;\\n\\n    function getProductNames() external view returns (string[] memory);\\n\\n    function addProduct(string memory productName, address product) external;\\n\\n    function removeProduct(string memory productName) external;\\n\\n    function updateMarketMakerPermission(address marketMaker, bool allow) external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function moveAssetsToProduct(string memory productName, address vaultAddress, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport { IAggregatorV3 } from \\\"./interfaces/IAggregatorV3.sol\\\";\\nimport { ICegaState } from \\\"./interfaces/ICegaState.sol\\\";\\nimport { RoundData } from \\\"./Structs.sol\\\";\\n\\ncontract Oracle is IAggregatorV3 {\\n    event OracleCreated(address indexed cegaState, uint8 decimals, string description);\\n    event RoundDataAdded(int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n    event RoundDataUpdated(uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    uint8 public decimals;\\n    string public description;\\n    uint256 public version = 1;\\n    ICegaState public cegaState;\\n    RoundData[] public oracleData;\\n    uint80 public nextRoundId;\\n\\n    /**\\n     * @notice Creates a new oracle for a given asset / data source pair\\n     * @param _cegaState is the address of the CegaState contract\\n     * @param _decimals is the number of decimals for the asset\\n     * @param _description is the aset\\n     */\\n    constructor(address _cegaState, uint8 _decimals, string memory _description) {\\n        cegaState = ICegaState(_cegaState);\\n        decimals = _decimals;\\n        description = _description;\\n        emit OracleCreated(_cegaState, _decimals, _description);\\n    }\\n\\n    /**\\n     * @notice Asserts whether the sender has the SERVICE_ADMIN_ROLE\\n     */\\n    modifier onlyServiceAdmin() {\\n        require(cegaState.isServiceAdmin(msg.sender), \\\"403:SA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts whether the sender has the DEFAULT_ADMIN_ROLE\\n     */\\n    modifier onlyDefaultAdmin() {\\n        require(cegaState.isDefaultAdmin(msg.sender), \\\"403:DA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Adds the pricing data for the next round\\n     * @param _roundData is the data to be added\\n     */\\n    function addNextRoundData(RoundData calldata _roundData) public onlyServiceAdmin {\\n        if (nextRoundId != 0) {\\n            (, , , uint256 updatedAt, ) = latestRoundData();\\n            require(updatedAt <= _roundData.startedAt, \\\"400:P\\\");\\n        }\\n        require(block.timestamp - 1 days <= _roundData.startedAt, \\\"400:T\\\"); // Within 1 days\\n\\n        oracleData.push(_roundData);\\n        nextRoundId++;\\n        emit RoundDataAdded(_roundData.answer, _roundData.startedAt, _roundData.updatedAt, _roundData.answeredInRound);\\n    }\\n\\n    /**\\n     * @notice Updates the pricing data for a given round\\n     * @param _roundData is the data to be updated\\n     */\\n    function updateRoundData(uint80 roundId, RoundData calldata _roundData) public onlyDefaultAdmin {\\n        oracleData[roundId] = _roundData;\\n        emit RoundDataUpdated(\\n            roundId,\\n            _roundData.answer,\\n            _roundData.startedAt,\\n            _roundData.updatedAt,\\n            _roundData.answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the pricing data for a given round Id\\n     * @param _roundId is the id of the round\\n     */\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        public\\n        view\\n        override\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        return (\\n            _roundId,\\n            oracleData[_roundId].answer,\\n            oracleData[_roundId].startedAt,\\n            oracleData[_roundId].updatedAt,\\n            oracleData[_roundId].answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the pricing data for the latest round\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        override\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        uint80 _roundId = nextRoundId - 1;\\n        return (\\n            _roundId,\\n            oracleData[_roundId].answer,\\n            oracleData[_roundId].startedAt,\\n            oracleData[_roundId].updatedAt,\\n            oracleData[_roundId].answeredInRound\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nenum OptionBarrierType {\\n    None,\\n    KnockIn\\n}\\n\\nstruct Deposit {\\n    uint256 amount;\\n    address receiver;\\n}\\n\\nstruct Withdrawal {\\n    uint256 amountShares;\\n    address receiver;\\n}\\n\\nenum VaultStatus {\\n    DepositsClosed,\\n    DepositsOpen,\\n    NotTraded,\\n    Traded,\\n    TradeExpired,\\n    PayoffCalculated,\\n    FeesCollected,\\n    WithdrawalQueueProcessed,\\n    Zombie\\n}\\n\\nstruct OptionBarrier {\\n    uint256 barrierBps;\\n    uint256 barrierAbsoluteValue;\\n    uint256 strikeBps;\\n    uint256 strikeAbsoluteValue;\\n    string asset;\\n    string oracleName;\\n    OptionBarrierType barrierType;\\n}\\n\\nstruct FCNVaultMetadata {\\n    uint256 vaultStart;\\n    uint256 tradeDate;\\n    uint256 tradeExpiry;\\n    uint256 aprBps;\\n    uint256 tenorInDays;\\n    uint256 underlyingAmount; // This is how many assets were ever deposited into the vault\\n    uint256 currentAssetAmount; // This is how many assets are currently allocated for the vault (not sent for trade)\\n    uint256 totalCouponPayoff;\\n    uint256 vaultFinalPayoff;\\n    uint256 queuedWithdrawalsSharesAmount;\\n    uint256 queuedWithdrawalsCount;\\n    uint256 optionBarriersCount;\\n    uint256 leverage;\\n    address vaultAddress;\\n    VaultStatus vaultStatus;\\n    bool isKnockedIn;\\n    OptionBarrier[] optionBarriers;\\n}\\n\\nstruct RoundData {\\n    int256 answer;\\n    uint256 startedAt;\\n    uint256 updatedAt;\\n    uint80 answeredInRound;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cegaState\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cegaState\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"OracleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"name\":\"RoundDataAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"name\":\"RoundDataUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"internalType\":\"struct RoundData\",\"name\":\"_roundData\",\"type\":\"tuple\"}],\"name\":\"addNextRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cegaState\",\"outputs\":[{\"internalType\":\"contract ICegaState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRoundId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"internalType\":\"struct RoundData\",\"name\":\"_roundData\",\"type\":\"tuple\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005cb8bd04aaf6699a3bb03f17db84c33fcc0db4a200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c4254432f5553442c507974680000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}