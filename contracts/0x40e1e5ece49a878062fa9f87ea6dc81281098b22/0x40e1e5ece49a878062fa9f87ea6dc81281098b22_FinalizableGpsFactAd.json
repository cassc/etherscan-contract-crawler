{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Finalizable.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\nimport \\\"SimpleAdminable.sol\\\";\\n\\n/**\\n  A simple base class for finalizable contracts.\\n*/\\nabstract contract Finalizable is SimpleAdminable {\\n    event Finalized();\\n\\n    bool finalized;\\n\\n    function isFinalized() public view returns (bool) {\\n        return finalized;\\n    }\\n\\n    modifier notFinalized() {\\n        require(!isFinalized(), \\\"FINALIZED\\\");\\n        _;\\n    }\\n\\n    function finalize() external onlyAdmin notFinalized {\\n        finalized = true;\\n        emit Finalized();\\n    }\\n}\\n\"\r\n    },\r\n    \"FinalizableGpsFactAdapter.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\nimport \\\"Finalizable.sol\\\";\\nimport \\\"GpsFactRegistryAdapter.sol\\\";\\nimport \\\"IQueryableFactRegistry.sol\\\";\\n\\n/**\\n  A finalizable version of GpsFactRegistryAdapter.\\n  It allows resetting the gps program hash, until finalized.\\n*/\\ncontract FinalizableGpsFactAdapter is GpsFactRegistryAdapter, Finalizable {\\n    constructor(IQueryableFactRegistry gpsStatementContract, uint256 programHash_)\\n        public\\n        GpsFactRegistryAdapter(gpsStatementContract, programHash_)\\n    {}\\n\\n    function setProgramHash(uint256 newProgramHash) external notFinalized onlyAdmin {\\n        programHash = newProgramHash;\\n    }\\n\\n    function identify() external pure override returns (string memory) {\\n        return \\\"StarkWare_FinalizableGpsFactAdapter_2022_1\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"GpsFactRegistryAdapter.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\nimport \\\"Identity.sol\\\";\\nimport \\\"IQueryableFactRegistry.sol\\\";\\n\\n/*\\n  The GpsFactRegistryAdapter contract is used as an adapter between a Dapp contract and a GPS fact\\n  registry. An isValid(fact) query is answered by querying the GPS contract about\\n  new_fact := keccak256(programHash, fact).\\n\\n  The goal of this contract is to simplify the verifier upgradability logic in the Dapp contract\\n  by making the upgrade flow the same regardless of whether the update is to the program hash or\\n  the gpsContractAddress.\\n*/\\ncontract GpsFactRegistryAdapter is IQueryableFactRegistry, Identity {\\n    IQueryableFactRegistry public gpsContract;\\n    uint256 public programHash;\\n\\n    constructor(IQueryableFactRegistry gpsStatementContract, uint256 programHash_) public {\\n        gpsContract = gpsStatementContract;\\n        programHash = programHash_;\\n    }\\n\\n    function identify() external pure virtual override returns (string memory) {\\n        return \\\"StarkWare_GpsFactRegistryAdapter_2020_1\\\";\\n    }\\n\\n    /*\\n      Checks if a fact has been verified.\\n    */\\n    function isValid(bytes32 fact) external view override returns (bool) {\\n        return gpsContract.isValid(keccak256(abi.encode(programHash, fact)));\\n    }\\n\\n    /*\\n      Indicates whether at least one fact was registered.\\n    */\\n    function hasRegisteredFact() external view override returns (bool) {\\n        return gpsContract.hasRegisteredFact();\\n    }\\n}\\n\"\r\n    },\r\n    \"IFactRegistry.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\n/*\\n  The Fact Registry design pattern is a way to separate cryptographic verification from the\\n  business logic of the contract flow.\\n\\n  A fact registry holds a hash table of verified \\\"facts\\\" which are represented by a hash of claims\\n  that the registry hash check and found valid. This table may be queried by accessing the\\n  isValid() function of the registry with a given hash.\\n\\n  In addition, each fact registry exposes a registry specific function for submitting new claims\\n  together with their proofs. The information submitted varies from one registry to the other\\n  depending of the type of fact requiring verification.\\n\\n  For further reading on the Fact Registry design pattern see this\\n  `StarkWare blog post <https://medium.com/starkware/the-fact-registry-a64aafb598b6>`_.\\n*/\\ninterface IFactRegistry {\\n    /*\\n      Returns true if the given fact was previously registered in the contract.\\n    */\\n    function isValid(bytes32 fact) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IQueryableFactRegistry.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\nimport \\\"IFactRegistry.sol\\\";\\n\\n/*\\n  Extends the IFactRegistry interface with a query method that indicates\\n  whether the fact registry has successfully registered any fact or is still empty of such facts.\\n*/\\ninterface IQueryableFactRegistry is IFactRegistry {\\n    /*\\n      Returns true if at least one fact has been registered.\\n    */\\n    function hasRegisteredFact() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Identity.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\ninterface Identity {\\n    /*\\n      Allows a caller to ensure that the provided address is of the expected type and version.\\n    */\\n    function identify() external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"SimpleAdminable.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019-2022 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.12;\\n\\nabstract contract SimpleAdminable {\\n    address owner;\\n    address ownerCandidate;\\n    mapping(address => bool) admins;\\n\\n    constructor() internal {\\n        owner = msg.sender;\\n        admins[msg.sender] = true;\\n    }\\n\\n    // Admin/Owner Modifiers.\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    function isOwner(address testedAddress) public view returns (bool) {\\n        return owner == testedAddress;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    function isAdmin(address testedAddress) public view returns (bool) {\\n        return admins[testedAddress];\\n    }\\n\\n    function registerAdmin(address newAdmin) external onlyOwner {\\n        if (!isAdmin(newAdmin)) {\\n            admins[newAdmin] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address removedAdmin) external onlyOwner {\\n        require(!isOwner(removedAdmin), \\\"OWNER_CANNOT_BE_REMOVED_AS_ADMIN\\\");\\n        delete admins[removedAdmin];\\n    }\\n\\n    function nominateNewOwner(address newOwner) external onlyOwner {\\n        require(!isOwner(newOwner), \\\"ALREADY_OWNER\\\");\\n        ownerCandidate = newOwner;\\n    }\\n\\n    function acceptOwnership() external {\\n        // Previous owner is still an admin.\\n        require(msg.sender == ownerCandidate, \\\"NOT_A_CANDIDATE\\\");\\n        owner = ownerCandidate;\\n        admins[ownerCandidate] = true;\\n        ownerCandidate = address(0x0);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {},\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IQueryableFactRegistry\",\"name\":\"gpsStatementContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"programHash_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gpsContract\",\"outputs\":[{\"internalType\":\"contract IQueryableFactRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRegisteredFact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identify\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"testedAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"testedAddress\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fact\",\"type\":\"bytes32\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"programHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"registerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProgramHash\",\"type\":\"uint256\"}],\"name\":\"setProgramHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FinalizableGpsFactAdapter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000c8c212f11f6acca77a7afeb7282deba5530eb46c06aef41a7100a913e3883a8d5a7c72f7daf44843f6f418990e2ac092e94706e8", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}