{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BonklerRescue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only+VPL\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n  An error emitted if we are about to interact with an unexpected\\n  implementation of the Bonkler proxy.\\n*/\\nerror UnexpectedImplementation ();\\n\\n/// A ProxyAdmin contract interface.\\ninterface IProxyAdmin {\\n  function getProxyImplementation (\\n    address\\n  ) external view returns (address);\\n}\\n\\n/// A Bonkler NFT contract interface.\\ninterface IBonklerNFT {\\n  function setMinter (\\n    address\\n  ) external;\\n  function transferOwnership (\\n    address\\n  ) external;\\n}\\n\\n/// A Bonkler auction proxy contract interface.\\ninterface IBonklerAuction {\\n  function settleAuction () external;\\n}\\n\\n/**\\n  @custom:benediction DEVS BENEDICAT ET PROTEGAT CONTRACTVS MEAM\\n  @title A contract for safely rescuing the proxy contract's\\n    trapped Bonkler.\\n  @author Tim Clancy <tim-clancy.eth>\\n  @custom:version 1.0\\n\\n  This contract allows an owner to conditionally bundle Bonkler NFT mint\\n  delegation with auction settlement. This contract will only permit a \\n  rescue attempt if the targeted Bonkler auction proxy has the expected\\n  implementation address.\\n\\n  @custom:date October 4th, 2023\\n  @custom:terry \\\"Is this too much voodoo for the next ten centuries?\\\"\\n*/\\ncontract BonklerRescue is Ownable {\\n\\n  /// The address of the original Bonkler auction proxy contract.\\n  address public auction;\\n\\n  /// The address of the Bonkler NFT contract.\\n  address public bonkler;\\n\\n  /**\\n    Construct a migration contract targeting the original Bonkler auction\\n    and NFT contracts.\\n\\n    @param _auction The address of the Bonkler auction contract to migrate from.\\n    @param _bonkler The address of the Bonkler NFT contract.\\n  */\\n  constructor (\\n    address _auction,\\n    address _bonkler\\n  ) {\\n    auction = _auction;\\n    bonkler = _bonkler;\\n  }\\n\\n  /**\\n    Attempt a rescue; the rescue is only performed if there is no chance that\\n    the underlying proxy contract may have been maliciously upgraded.\\n    \\n    @param _intended If the Bonkler auction proxy implementation address\\n      matches this value, proceed with the rescue attempt.\\n  */\\n  function rescue (\\n    address _intended\\n  ) external onlyOwner {\\n    if (\\n      IProxyAdmin(\\n        0x6bCe3918a8E516fd4264a8e3f962ea0a3F2dEC99\\n      ).getProxyImplementation(\\n        0xF421391011Dc77c0C2489d384C26e915Efd9e2C5\\n      ) != _intended\\n    ) {\\n      revert UnexpectedImplementation();\\n    }\\n    IBonklerNFT(bonkler).setMinter(auction);\\n    IBonklerAuction(auction).settleAuction();\\n    IBonklerNFT(bonkler).setMinter(\\n      0x3033FDC27098D0006a72CcACCb850F3e7d700C00\\n    );\\n    IBonklerNFT(bonkler).transferOwnership(\\n      0xB520F068a908A1782a543aAcC3847ADB77A04778\\n    );\\n  }\\n\\n  /**\\n    Allow the rightful owner of the Bonkler NFT to assume control.\\n  */\\n  function clawback () external {\\n    IBonklerNFT(bonkler).transferOwnership(\\n      0xB520F068a908A1782a543aAcC3847ADB77A04778\\n    );\\n  }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonkler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnexpectedImplementation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonkler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intended\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BonklerRescue", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f421391011dc77c0c2489d384c26e915efd9e2c5000000000000000000000000abfae8a54e6817f57f9de7796044e9a60e61ad67", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}