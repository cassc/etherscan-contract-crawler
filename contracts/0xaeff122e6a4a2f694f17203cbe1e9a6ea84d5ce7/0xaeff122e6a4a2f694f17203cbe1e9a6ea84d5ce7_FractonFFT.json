{"SourceCode": "/**\r\n\r\nThe KING is back.\r\n\ud835\udc12\ud835\udc1e\ud835\udc29 \ud835\udfcf\ud835\udfd6, 10 AM, \ud835\udfd0\ud835\udfce\ud835\udfd0\ud835\udfd1 (\ud835\udc14\ud835\udc13\ud835\udc02) \ud835\udc14\ud835\udc27\ud835\udc22\ud835\udc2c\ud835\udc30\ud835\udc1a\ud835\udc29\r\nAs hiX last time, We will cold-launch advanced 2 hours than twitter.\r\nThe twitter time is \ud835\udc12\ud835\udc1e\ud835\udc29 \ud835\udfcf\ud835\udfd6, 12 PM, \ud835\udfd0\ud835\udfce\ud835\udfd0\ud835\udfd1 (\ud835\udc14\ud835\udc13\ud835\udc02).\r\n\r\nhttps://twitter.com/rebaseking\r\nhttps://www.rebaseking.com/\r\n\r\n**/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport '../interface/IFractonFFT.sol';\r\nimport '../interface/IFractonTokenFactory.sol';\r\n\r\ncontract FractonFFT is ERC20, IFractonFFT {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => bool) private _isExcludedFromFee;\r\n\r\n  address public _factory;\r\n\r\n  uint256 public vaultPercent = 20;\r\n  uint256 public pfVaultPercent = 0;\r\n\r\n  modifier onlyOwner() {\r\n    address owner = IFractonTokenFactory(_factory).getowner();\r\n    require(msg.sender == owner, 'Fracton: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  modifier onlyDAO() {\r\n    address dao = IFractonTokenFactory(_factory).getDAOAddress();\r\n    require(msg.sender == dao, 'Fracton: caller is not Fracton DAO');\r\n    _;\r\n  }\r\n\r\n  modifier onlySwap() {\r\n    address dao = IFractonTokenFactory(_factory).getSwapAddress();\r\n    require(msg.sender == dao, 'Fracton: caller is not swap');\r\n    _;\r\n  }\r\n\r\n  constructor(string memory name_, string memory symbol_)\r\n    ERC20(name_, symbol_)\r\n  {\r\n    _factory = msg.sender;\r\n\r\n    _isExcludedFromFee[_factory] = true;\r\n    _isExcludedFromFee[IFractonTokenFactory(_factory).getSwapAddress()] = true;\r\n    _isExcludedFromFee[\r\n      IFractonTokenFactory(_factory).getPoolFundingVaultAddress()\r\n    ] = true;\r\n    _isExcludedFromFee[IFractonTokenFactory(_factory).getVaultAddress()] = true;\r\n    _isExcludedFromFee[address(this)] = true;\r\n  }\r\n\r\n  function swapmint(uint256 amount, address to)\r\n    external\r\n    virtual\r\n    override\r\n    onlySwap\r\n    returns (bool)\r\n  {\r\n    _mint(to, amount);\r\n    return true;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = a.add(m);\r\n    uint256 d = c.sub(1);\r\n    return d.div(m).mul(m);\r\n  }\r\n\r\n  function cut(uint256 value, uint256 percent) public pure returns (uint256) {\r\n    if (percent == 0) {\r\n      return 0;\r\n    } else {\r\n      uint256 roundValue = ceil(value, percent);\r\n      uint256 cutValue = roundValue.mul(percent).div(10000);\r\n      return cutValue;\r\n    }\r\n  }\r\n\r\n  function transfer(address to, uint256 value)\r\n    public\r\n    virtual\r\n    override(ERC20, IFractonFFT)\r\n    returns (bool)\r\n  {\r\n    address from = _msgSender();\r\n    require(value <= balanceOf(from), 'from balance insufficient');\r\n\r\n    if (isExcludedFromFee(from) || isExcludedFromFee(to)) {\r\n      _transfer(from, to, value);\r\n    } else {\r\n      uint256 vaultFee = cut(value, vaultPercent);\r\n      uint256 pfVaultFee = cut(value, pfVaultPercent);\r\n      uint256 tokensToTransfer = value.sub(vaultFee).sub(pfVaultFee);\r\n\r\n      _transfer(\r\n        from,\r\n        IFractonTokenFactory(_factory).getVaultAddress(),\r\n        vaultFee\r\n      );\r\n      _transfer(\r\n        from,\r\n        IFractonTokenFactory(_factory).getPoolFundingVaultAddress(),\r\n        pfVaultFee\r\n      );\r\n      _transfer(from, to, tokensToTransfer);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) public virtual override(ERC20, IFractonFFT) returns (bool) {\r\n    address spender = _msgSender();\r\n    require(value <= balanceOf(from), 'from balance insufficient');\r\n\r\n    if (isExcludedFromFee(from) || isExcludedFromFee(to)) {\r\n      _spendAllowance(from, spender, value);\r\n      _transfer(from, to, value);\r\n    } else {\r\n      uint256 vaultFee = cut(value, vaultPercent);\r\n      uint256 pfVaultFee = cut(value, pfVaultPercent);\r\n      uint256 tokensToTransfer = value.sub(vaultFee).sub(pfVaultFee);\r\n      _spendAllowance(from, spender, value);\r\n\r\n      _transfer(\r\n        from,\r\n        IFractonTokenFactory(_factory).getVaultAddress(),\r\n        vaultFee\r\n      );\r\n      _transfer(\r\n        from,\r\n        IFractonTokenFactory(_factory).getPoolFundingVaultAddress(),\r\n        pfVaultFee\r\n      );\r\n      _transfer(from, to, tokensToTransfer);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address from, uint256 value)\r\n    external\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    address spender = _msgSender();\r\n    if (from != spender) {\r\n      _spendAllowance(from, spender, value);\r\n    }\r\n    _burn(from, value);\r\n    return true;\r\n  }\r\n\r\n  function excludeFromFee(address account) public onlyDAO returns (bool) {\r\n    _isExcludedFromFee[account] = true;\r\n    return true;\r\n  }\r\n\r\n  function batchExcludeFromFee(address[] memory accounts)\r\n    external\r\n    onlyDAO\r\n    returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < accounts.length; i++) {\r\n      _isExcludedFromFee[accounts[i]] = true;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function includeInFee(address account) external onlyDAO returns (bool) {\r\n    _isExcludedFromFee[account] = false;\r\n    return true;\r\n  }\r\n\r\n  function updateFee(uint256 vaultPercent_, uint256 pfVaultPercent_)\r\n    external\r\n    override\r\n    onlyDAO\r\n    returns (bool)\r\n  {\r\n    vaultPercent = vaultPercent_;\r\n    pfVaultPercent = pfVaultPercent_;\r\n\r\n    emit SetPercent(vaultPercent_, pfVaultPercent_);\r\n    return true;\r\n  }\r\n\r\n  function isExcludedFromFee(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _isExcludedFromFee[account];\r\n  }\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface IFractonFFT is IERC20 {\r\n  event SetPercent(uint256 vaultPercent, uint256 pfVaultPercent);\r\n\r\n  function swapmint(uint256 amount, address to) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts)\r\n    external;\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function burnFrom(address from, uint256 value) external returns (bool);\r\n\r\n  function isExcludedFromFee(address account) external view returns (bool);\r\n\r\n  function updateFee(uint256 vaultPercent_, uint256 pfVaultPercent_)\r\n    external\r\n    returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IFractonTokenFactory {\r\n  function getowner() external view returns (address);\r\n\r\n  function getDAOAddress() external view returns (address);\r\n\r\n  function getVaultAddress() external view returns (address);\r\n\r\n  function getSwapAddress() external view returns (address);\r\n\r\n  function getPoolFundingVaultAddress() external view returns (address);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n**/\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract FractonFFT is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    bool private swapping;\r\n    bool public tradingActive = false;\r\n    bool public limitsInEffect = true;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public maxWallet;\r\n\r\n    address private marketingWallet = 0x5e9649096eF44c3539ecB1b5B76663c2a6Be4341;\r\n\r\n    struct Taxes {\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 total;\r\n    }\r\n    Taxes public buyTax;\r\n    Taxes public sellTax;\r\n\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForLiquidity;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquidity(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n\r\n    constructor() ERC20(\"hiK\", \"hiK\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 totalSupply = 1142826000 * 10**decimals();\r\n\r\n        maxWallet = maxTransactionAmount = (totalSupply * 100) / 100;\r\n        swapTokensAtAmount = (totalSupply * 1) / 1000;\r\n\r\n        marketingWallet = _msgSender();\r\n\r\n        buyTax = Taxes(1, 0, 1);\r\n        sellTax = Taxes(1, 0, 1);\r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        _mint(_msgSender(), totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function StartTrading() external onlyOwner {\r\n        require(tradingActive == false, \"The trading has been opened.\");\r\n        tradingActive = true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(limitsInEffect == true, \"The limits has been removed.\");\r\n        limitsInEffect = false;\r\n    }\r\n\r\n    function setFees(uint256 _buyMarketing, uint256 _buyLiquidity, uint256 _sellMarketing, uint256 _sellLiquidity) external onlyOwner {\r\n        buyTax = Taxes(_buyMarketing, _buyLiquidity, _buyMarketing + _buyLiquidity);\r\n        sellTax = Taxes(_sellMarketing, _sellLiquidity, _sellMarketing + _sellLiquidity);\r\n    }\r\n\r\n    function updateMarketingWallet(address _marketingWallet) external onlyOwner {\r\n        marketingWallet = _marketingWallet;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address account, bool excluded) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[account] = excluded;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address.\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address.\");\r\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero.\");\r\n\r\n        if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\r\n            if (tradingActive == false) {\r\n                require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"ERC20: Trading is not active.\");\r\n            }\r\n\r\n            if (limitsInEffect == true) {\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount <= maxTransactionAmount, \"ERC20: Buy transfer amount exceeds the max transaction amount.\");\r\n                    require(amount + balanceOf(to) <= maxWallet, \"ERC20: Max wallet exceeded.\");\r\n                } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount <= maxTransactionAmount, \"ERC20: Sell transfer amount exceeds the max transaction amount.\");\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"ERC20: Max wallet exceeded.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n        if (canSwap && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to] && sellTax.total > 0) {\r\n                fees = amount.mul(sellTax.total).div(100);\r\n                tokensForLiquidity += (fees * sellTax.liquidity) / sellTax.total;\r\n                tokensForMarketing += (fees * sellTax.marketing) / sellTax.total;\r\n            } else if (automatedMarketMakerPairs[from] && buyTax.total > 0) {\r\n                fees = amount.mul(buyTax.total).div(100);\r\n                tokensForLiquidity += (fees * buyTax.liquidity) / buyTax.total;\r\n                tokensForMarketing += (fees * buyTax.marketing) / buyTax.total;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquidity(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(marketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StartTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FractonFFT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87e41c955d73b50df284d7ab08cf7eab108d72a7d495ae0ac4ba610bb2ce9039"}