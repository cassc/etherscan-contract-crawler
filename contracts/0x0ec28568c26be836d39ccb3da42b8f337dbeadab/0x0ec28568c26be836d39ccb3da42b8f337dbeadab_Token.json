{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"/*\\nWebsite: https://www.littlelontrump.com/\\nTelegram: https://t.me/+qmTlv1BqXFNjNjQ0\\nX: https://twitter.com/littlelontrump\\n*/\\n\\n/*\\nDeployed by FLASH BOT\\nTelegram https://t.me/FlashBotToken\\n@@FlashDeveloperBot\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.2\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.2\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.2\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\n\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.2\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.9.2\\n\\n// Original license: SPDX_License_Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\n\\n\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\\n\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n\\n// File contracts/IDividendTracker.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\n\\ninterface IDividendTracker {\\n    function excludeFromDividends(address account) external;\\n\\n    function setBalance(address payable account, uint256 newBalance) external;\\n\\n    function process(uint256 gas) external returns (uint256, uint256, uint256);\\n\\n    function distributeDividends(uint256 amount) external;\\n\\n    function rewardsToken() external view returns (address);\\n}\\n\\n\\n// File contracts/Token.sol\\n\\n// Original license: SPDX_License_Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// File contracts/Token.sol\\ncontract Token is ERC20Burnable, Ownable {\\n    // ADDRESSESS -------------------------------------------------------------------------------------------\\n    address public lpPair; // Liquidity token address\\n    address[] public platformFeeAddresses; // service fee wallet address\\n    address public treasuryAddress; // owner fee wallet address\\n    address public dividendTokenAddress; // dividend token address\\n    address public dividentTokenBridgeAddress; // dividend token bridge address\\n\\n    // VALUES -----------------------------------------------------------------------------------------------\\n    uint256 public swapThreshold; // swap tokens limit\\n    uint256 public constant TAX_DIVISOR = 10000; // divisor | 0.0001 max presition fee\\n    uint256 public maxWalletAmount; // max balance amount (Anti-whale)\\n    uint256 public platformFeeAmount; // accumulated fee amount for w1\\n    uint256 public preMintAmount; // pre-mint amount mint to treasury\\n    uint256 public constant PLATFORM_FEE_PERCENT = 50; // platform fee percent of tx amount : 0.5%\\n    uint256[] public platformFeePercents;\\n    uint256 public autoLiquidityPercent; // amm percent of fee\\n    uint256 public maxTransactionAmount;\\n    uint256 public buyBackThreshold; // swap tokens limit\\n    uint256 public buyBackPercent;\\n    uint256 public maxBuyLimit;\\n    uint256 public initialDelayTime; // to store the block in which the trading was enabled\\n    uint256 public totalDelayTime;\\n    uint256 public maxGasPriceLimit; // for store max gas price value\\n    uint256 public timeDelayBetweenTx; // time wait for txs\\n    uint256 public gasForProcessing;\\n    uint256 public distributionRewardsPercent;\\n\\n    // BOOLEANS ---------------------------------------------------------------------------------------------\\n    bool public inSwap; // used for dont take fee on swaps\\n    bool public gasLimitActive;\\n    bool public transferDelayEnabled; // for enable / disable delay between transactions\\n\\n    // MAPPINGS\\n    mapping(address => bool) public _isExcludedFromFee; // list of users excluded from fee\\n    mapping(address => bool) public _isExcludedFromMaxTx; // list of users excluded from fee\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n    mapping(address => uint256) public _holderLastTransferTimestamp; // to hold last Transfers temporarily  // todo remove\\n\\n    // STRUCTS ----------------------------------------------------------------------------------------------\\n    struct Fees {\\n        uint16 buyFee; // fee when people BUY tokens\\n        uint16 sellFee; // fee when people SELL tokens\\n        uint16 transferFee; // fee when people TRANSFER tokens\\n    }\\n\\n    // OBJECTS ----------------------------------------------------------------------------------------------\\n    IUniswapV2Router02 public router;\\n    IDividendTracker public tokenDividendTracker;\\n    Fees public _feesRates; // fees rates\\n\\n    // MODIFIERS --------------------------------------------------------------------------------------------\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    // EVENTS -----------------------------------------------------------------------------------------------\\n    event ProcessedDividendTracker(\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex,\\n        bool indexed automatic,\\n        uint256 gas,\\n        address indexed processor\\n    );\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\n\\n    // CONSTRUCTOR ------------------------------------------------------------------------------------------\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint256 supply,\\n        uint256 preMint,\\n        address[] memory addresses, // routerAddress, treasuryAddress\\n        uint16[] memory percents // burnPercent, buyFee, sellFee, maxPerWallet, maxPerTx\\n    ) ERC20(tokenName, tokenSymbol) {\\n        require(addresses.length == 2, \\\"Invalid address argument\\\");\\n        require(percents.length == 5, \\\"Invalid percent argument\\\");\\n        require(percents[1] <= 9900 && percents[2] <= 9900, \\\"Too hight tax\\\");\\n\\n        // super.transferOwnership(tokenOwner);\\n        treasuryAddress = addresses[1];\\n\\n        uint256 burnAmount = (supply * percents[0]) / TAX_DIVISOR;\\n        _mint(msg.sender, supply - preMint - burnAmount);\\n        if (preMint > 0) _mint(treasuryAddress, preMint);\\n        if (burnAmount > 0) _mint(address(0xdead), burnAmount);\\n\\n        maxWalletAmount = percents[3] == 0\\n            ? supply\\n            : (supply * percents[3]) / TAX_DIVISOR;\\n        maxTransactionAmount = percents[4] == 0\\n            ? supply\\n            : (supply * percents[4]) / TAX_DIVISOR;\\n\\n        platformFeeAddresses.push(0x7A93936c57587A5A0de1bBc0d99b61139394698C);\\n        platformFeeAddresses.push(0x18bb1D7E5DD7dd0017a828dABF16472d9fD1c6aE);\\n\\n        platformFeePercents.push(8000);\\n        platformFeePercents.push(2000);\\n\\n        // default fees\\n        _feesRates = Fees({\\n            buyFee: percents[1],\\n            sellFee: percents[2],\\n            transferFee: 0\\n        });\\n\\n        router = IUniswapV2Router02(addresses[0]);\\n        dividentTokenBridgeAddress = router.WETH();\\n\\n        // Create a uniswap pair for this new token\\n        lpPair = IUniswapV2Factory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n        automatedMarketMakerPairs[lpPair] = true;\\n\\n        // exclude from fees\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[treasuryAddress] = true;\\n        _isExcludedFromFee[platformFeeAddresses[0]] = true;\\n        _isExcludedFromFee[platformFeeAddresses[1]] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        _isExcludedFromMaxTx[owner()] = true;\\n        _isExcludedFromMaxTx[treasuryAddress] = true;\\n        _isExcludedFromMaxTx[platformFeeAddresses[0]] = true;\\n        _isExcludedFromMaxTx[platformFeeAddresses[1]] = true;\\n        _isExcludedFromMaxTx[address(this)] = true;\\n        _isExcludedFromMaxTx[address(router)] = true;\\n        _isExcludedFromMaxTx[lpPair] = true;\\n\\n        // contract do swap when have 1k tokens balance\\n        swapThreshold = 1000 ether;\\n\\n        autoLiquidityPercent = 0; //0%\\n        buyBackPercent = 0; //0%\\n\\n        buyBackThreshold = 1 ether; // buyback 1 eth\\n\\n        // do approve to router from owner and contract\\n        _approve(owner(), address(router), type(uint256).max);\\n        _approve(address(this), address(router), type(uint256).max);\\n\\n        maxBuyLimit = supply;\\n        gasLimitActive = false;\\n        // used for store max gas price limit value\\n        transferDelayEnabled = false;\\n        initialDelayTime = block.timestamp;\\n        // used enable or disable max gas price limit\\n        maxGasPriceLimit = 15000000000;\\n\\n        // enable / disable transfer to wallets when contract do swap tokens for busd\\n        timeDelayBetweenTx = 5;\\n        totalDelayTime = 3600;\\n\\n        // few values needed for contract works\\n        gasForProcessing = 300000;\\n    }\\n\\n    function updateDividentTokenBridgeAddress(\\n        address newAddress\\n    ) public onlyOwner {\\n        require(\\n            newAddress != dividentTokenBridgeAddress,\\n            \\\"The dividend tracker already has that address\\\"\\n        );\\n        require(newAddress != address(0), \\\"new address is Zero address\\\");\\n        dividentTokenBridgeAddress = newAddress;\\n    }\\n\\n    function updateDividendTracker(address newAddress, uint256 percent) public onlyOwner {\\n        require(newAddress != address(0), \\\"new address is Zero address\\\");\\n        require(percent <= 5000, \\\"invalid percent\\\");\\n\\n        //dividendTokenAddress = newAddress;\\n        tokenDividendTracker = IDividendTracker(newAddress);\\n\\n        // exclude from receiving dividends\\n        tokenDividendTracker.excludeFromDividends(newAddress);\\n        tokenDividendTracker.excludeFromDividends(address(this));\\n        tokenDividendTracker.excludeFromDividends(owner());\\n        tokenDividendTracker.excludeFromDividends(address(router));\\n        tokenDividendTracker.excludeFromDividends(lpPair);\\n\\n        _isExcludedFromFee[newAddress] = true;\\n        _isExcludedFromMaxTx[newAddress] = true;\\n\\n        distributionRewardsPercent = percent;\\n        dividendTokenAddress = tokenDividendTracker.rewardsToken();\\n    }\\n\\n    /**\\n     * @notice This function is used to Update the Max Gas Price Limit for transactions\\n     * @dev This function is used inside the tokenTransfer during the first hour of the contract\\n     * @param newValue uint256 The new Max Gas Price Limit\\n     */\\n    function updateMaxGasPriceLimit(uint256 newValue) public onlyOwner {\\n        require(\\n            newValue >= 10000000000,\\n            \\\"max gas price cant be lower than 10 gWei\\\"\\n        );\\n        maxGasPriceLimit = newValue;\\n    }\\n\\n    /**\\n     * @notice This function is updating the value of the variable transferDelayEnabled\\n     * @param newVal New value of the variable\\n     */\\n    function updateTransferDelayEnabled(bool newVal) external onlyOwner {\\n        transferDelayEnabled = newVal;\\n    }\\n\\n    /**\\n     * @dev Update the max amount of tokens that can be buyed in one transaction\\n     * @param percent New max buy limit in wei\\n     */\\n    function updateMaxBuyLimit(uint256 percent) public onlyOwner {\\n        maxBuyLimit = (totalSupply() * percent) / TAX_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Update the max gas limit that can be used in the transaction\\n     * @param newVal New gas limit amount\\n     */\\n    function updateGasLimitActive(bool newVal) public onlyOwner {\\n        gasLimitActive = newVal;\\n    }\\n\\n    // To receive BNB from dexRouter when swapping\\n    receive() external payable {}\\n\\n    // Set fees\\n    function setTaxes(\\n        uint16 buyFee,\\n        uint16 sellFee,\\n        uint16 transferFee\\n    ) external virtual onlyOwner {\\n        require(buyFee <= 9900 && sellFee <= 9900, \\\"Too hight tax\\\");\\n        _feesRates.buyFee = buyFee;\\n        _feesRates.sellFee = sellFee;\\n        _feesRates.transferFee = transferFee;\\n    }\\n\\n    // function for set buyBackThreshold\\n    function setBuyBackThreshold(uint256 newThreshold) external onlyOwner {\\n        buyBackThreshold = newThreshold;\\n    }\\n\\n    // function for set buyBackPercent\\n    function setBuyBackPercent(uint16 newPercent) external onlyOwner {\\n        require(\\n            newPercent + autoLiquidityPercent + distributionRewardsPercent <=\\n                TAX_DIVISOR,\\n            \\\"Percent cant be higher than 100%\\\"\\n        );\\n        buyBackPercent = newPercent;\\n    }\\n\\n    // function for set autoLiquidityPercent\\n    function setAutoLiquidityPercent(uint16 newPercent) external onlyOwner {\\n        require(\\n            newPercent + buyBackPercent + distributionRewardsPercent <=\\n                TAX_DIVISOR,\\n            \\\"Percent cant be higher than 100%\\\"\\n        );\\n        autoLiquidityPercent = newPercent;\\n    }\\n\\n    function setDistributionRewardsPercent(\\n        uint16 newPercent\\n    ) external onlyOwner {\\n        require(\\n            newPercent + buyBackPercent + autoLiquidityPercent <= TAX_DIVISOR,\\n            \\\"Percent cant be higher than 100%\\\"\\n        );\\n        distributionRewardsPercent = newPercent;\\n    }\\n\\n    // this function will be called every buy, sell or transfer\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        _beforeTransferCheck(from, to, amount);\\n\\n        if (inSwap) {\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n\\n        if (contractMustSwap(from, to)) {\\n            doSwap();\\n        }\\n\\n        _finalizeTransfer(from, to, amount);\\n\\n        if (address(tokenDividendTracker) != address(0)) {\\n            try\\n                tokenDividendTracker.setBalance(payable(from), balanceOf(from))\\n            {} catch {}\\n            try\\n                tokenDividendTracker.setBalance(payable(to), balanceOf(to))\\n            {} catch {}\\n\\n            if (!inSwap) {\\n                processDividendTracker(gasForProcessing);\\n            }\\n        }\\n    }\\n\\n    function processDividendTracker(\\n        uint256 gas\\n    ) internal {\\n        try tokenDividendTracker.process(gas) returns (\\n            uint256 iterations,\\n            uint256 claims,\\n            uint256 lastProcessedIndex\\n        ) {\\n            emit ProcessedDividendTracker(\\n                iterations,\\n                claims,\\n                lastProcessedIndex,\\n                true,\\n                gas,\\n                tx.origin\\n            );\\n        } catch {}\\n    }\\n\\n    function doSwap() internal swapping {\\n        // Get contract tokens balance\\n        uint256 numTokensToSwap = balanceOf(address(this));\\n\\n        // swap to team\\n        if (platformFeeAmount > 0) {\\n            uint256 _amount = platformFeeAmount;\\n            numTokensToSwap -= platformFeeAmount;\\n            platformFeeAmount = 0;\\n            uint256 _remain = _amount;\\n            for (uint256 i = platformFeeAddresses.length; i > 0; i--) {\\n                uint256 _fee = i == 1\\n                    ? _remain\\n                    : (_amount * platformFeePercents[i - 1]) / TAX_DIVISOR;\\n                swapTokensForNative(_fee, platformFeeAddresses[i - 1]);\\n                if (i > 1) _remain -= _fee;\\n            }\\n        }\\n\\n        numTokensToSwap = balanceOf(address(this));\\n        if (numTokensToSwap > 0) {\\n            // swap to contract\\n            if (buyBackPercent > 0) {\\n                swapTokensForNative(\\n                    (numTokensToSwap * buyBackPercent) / TAX_DIVISOR,\\n                    address(this)\\n                );\\n            }\\n\\n            // inject liquidity\\n            if (autoLiquidityPercent > 0) {\\n                autoLiquidity(\\n                    (numTokensToSwap * autoLiquidityPercent) / TAX_DIVISOR\\n                );\\n            }\\n\\n            // treasury fee\\n            uint256 treasuryAmount = numTokensToSwap -\\n                (numTokensToSwap *\\n                    (autoLiquidityPercent +\\n                        buyBackPercent +\\n                        distributionRewardsPercent)) /\\n                TAX_DIVISOR;\\n            if (treasuryAmount > 0) {\\n                swapTokensForNative(treasuryAmount, treasuryAddress);\\n            }\\n\\n            // buy back\\n            if (buyBackThreshold > 0) {\\n                uint256 ethBalance = address(this).balance;\\n\\n                if (ethBalance > buyBackThreshold) {\\n                    swapNativeForTokens(ethBalance, address(0xdead));\\n                }\\n            }\\n\\n            if (distributionRewardsPercent > 0) {\\n                swapAndSendDividends(\\n                    (numTokensToSwap * distributionRewardsPercent) / TAX_DIVISOR\\n                );\\n            }\\n        }\\n    }\\n\\n    function swapNativeForTokens(uint256 nativeAmount, address to) private {\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(this);\\n        uint256 deadline = block.timestamp;\\n        // uint256 amountOutIn = router.getAmountsOut(\\n        //     nativeAmount,\\n        //     path\\n        // )[1];\\n        router.swapExactETHForTokens{value: nativeAmount}(\\n            0,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function swapTokensForTokens(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        uint256 tokenAmount,\\n        address _to\\n    ) private {\\n        address[] memory path = new address[](3);\\n        path[0] = _fromTokenAddress;\\n        path[1] = dividentTokenBridgeAddress;\\n        path[2] = _toTokenAddress;\\n\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // swap and transfer to contract\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            _to,\\n            block.timestamp + 1000\\n        );\\n    }\\n\\n    function swapAndSendDividends(uint256 tokenAmount) private {\\n        swapTokensForTokens(\\n            address(this), // swap token\\n            dividendTokenAddress, // for dividend token\\n            tokenAmount, // amount\\n            address(this) // to this contract\\n        );\\n        uint256 dividends = IERC20(dividendTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        bool success = IERC20(dividendTokenAddress).transfer(\\n            address(tokenDividendTracker),\\n            dividends\\n        );\\n\\n        if (success) {\\n            tokenDividendTracker.distributeDividends(dividends);\\n            emit SendDividends(tokenAmount, dividends);\\n        }\\n    }\\n\\n    function swapTokensForNative(uint256 tokenAmount, address to) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        uint256 deadline = block.timestamp;\\n        _approve(address(this), address(router), tokenAmount);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function _finalizeTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // by default receiver receive 100% of sended amount\\n        uint256 amountReceived = amount;\\n\\n        // If takeFee is false there is 0% fee\\n        bool takeFee = true;\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        // check if we need take fee or not\\n        if (takeFee) {\\n            // if we need take fee\\n            // calc how much we need take\\n            (uint256 feeAmount1, uint256 feeAmount2) = calcBuySellTransferFee(\\n                from,\\n                to,\\n                amount\\n            );\\n\\n            if (feeAmount1 + feeAmount2 > 0) {\\n                // we substract fee amount from recipient amount\\n                amountReceived = amount - feeAmount1 - feeAmount2;\\n                if (feeAmount2 > 0) platformFeeAmount += feeAmount2;\\n\\n                // and transfer fee to contract\\n                super._transfer(from, address(this), feeAmount1 + feeAmount2);\\n            }\\n        }\\n\\n        // finally send remaining tokens to recipient\\n        super._transfer(from, to, amountReceived);\\n    }\\n\\n    function calcBuySellTransferFee(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal view virtual returns (uint256, uint256) {\\n        // by default we take zero fee\\n        uint256 totalFeePercent = 0;\\n        uint256 feeAmount1 = 0;\\n        uint256 feeAmount2 = 0;\\n        bool isTransfer = false;\\n\\n        // BUY -> FROM == LP ADDRESS\\n        if (automatedMarketMakerPairs[from]) {\\n            totalFeePercent += _feesRates.buyFee;\\n        }\\n        // SELL -> TO == LP ADDRESS\\n        else if (automatedMarketMakerPairs[to]) {\\n            totalFeePercent += _feesRates.sellFee;\\n        }\\n        // TRANSFER\\n        else {\\n            totalFeePercent += _feesRates.transferFee;\\n            isTransfer = true;\\n        }\\n\\n        // CALC FEES AMOUT\\n        if (totalFeePercent > 0) {\\n            feeAmount1 = (amount * totalFeePercent) / TAX_DIVISOR;\\n        }\\n\\n        if (!isTransfer) {\\n            feeAmount2 = (amount * PLATFORM_FEE_PERCENT) / TAX_DIVISOR;\\n        }\\n\\n        return (feeAmount1, feeAmount2);\\n    }\\n\\n    function autoLiquidity(uint256 tokenAmount) public {\\n        // split the contract balance into halves\\n        uint256 half = tokenAmount / 2;\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        swapTokensForNative(half, address(this));\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance - initialBalance;\\n\\n        // add liquidity to uniswap\\n        addLiquidity(half, newBalance);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        uint256 deadline = block.timestamp;\\n        _approve(address(this), address(router), type(uint256).max);\\n        router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this), // send lp tokens to owner\\n            deadline\\n        );\\n    }\\n\\n    function _beforeTransferCheck(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(\\n            from != address(0),\\n            \\\"ERC20: transfer from the ZERO_ADDRESS address\\\"\\n        );\\n        require(\\n            to != address(0),\\n            \\\"ERC20: transfer to the ZERO_ADDRESS address\\\"\\n        );\\n        require(\\n            amount > 0,\\n            \\\"Transfer amount must be greater than ZERO_ADDRESS\\\"\\n        );\\n\\n        if (\\n            transferDelayEnabled &&\\n            block.timestamp < (initialDelayTime + totalDelayTime)\\n        ) {\\n            // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\n            if (\\n                from != owner() &&\\n                to != address(router) &&\\n                to != address(lpPair) &&\\n                to != address(this)\\n            ) {\\n                // in the first one hour, a maximum of XX BUSD purchase is adjustable (TAX_DIVISOR BUSD is the default value)\\n                if (maxBuyLimit > 0) {\\n                    require(amount <= maxBuyLimit, \\\"Max Buy Limit.\\\");\\n                }\\n\\n                // only use to prevent sniper buys in the first blocks.\\n                if (gasLimitActive) {\\n                    require(\\n                        tx.gasprice <= maxGasPriceLimit,\\n                        \\\"Gas price exceeds limit.\\\"\\n                    );\\n                }\\n\\n                // delay between tx\\n                require(\\n                    _holderLastTransferTimestamp[msg.sender] <= block.timestamp,\\n                    \\\"_transfer:: Transfer Delay enabled.\\\"\\n                );\\n                _holderLastTransferTimestamp[msg.sender] =\\n                    block.timestamp +\\n                    timeDelayBetweenTx;\\n            }\\n        }\\n\\n        if (\\n            from != owner() &&\\n            to != owner() &&\\n            to != address(0) &&\\n            to != address(0xdead) &&\\n            to != address(this) &&\\n            !inSwap\\n        ) {\\n            // BUY -> FROM == LP ADDRESS\\n            if (automatedMarketMakerPairs[from]) {\\n                if (!_isExcludedFromMaxTx[to]) {\\n                    require(\\n                        amount <= maxTransactionAmount,\\n                        \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\"\\n                    );\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletAmount,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n            }\\n            // SELL -> TO == LP ADDRESS\\n            else if (automatedMarketMakerPairs[to]) {\\n                if (!_isExcludedFromMaxTx[to]) {\\n                    require(\\n                        amount <= maxTransactionAmount,\\n                        \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\"\\n                    );\\n                }\\n            }\\n            // TRANSFER\\n            else {\\n                if (!_isExcludedFromMaxTx[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletAmount,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function contractMustSwap(\\n        address from,\\n        address to\\n    ) internal view virtual returns (bool) {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        return\\n            contractTokenBalance >= swapThreshold &&\\n            !inSwap &&\\n            from != lpPair &&\\n            balanceOf(lpPair) > 0 &&\\n            !_isExcludedFromFee[to] &&\\n            !_isExcludedFromFee[from];\\n    }\\n\\n    function isExcludedFromFee(\\n        address account\\n    ) public view virtual returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function excludeFromFee(\\n        address account,\\n        bool val\\n    ) public virtual onlyOwner {\\n        _isExcludedFromFee[account] = val;\\n    }\\n\\n    function isExcludedFromMaxTx(\\n        address account\\n    ) public view virtual returns (bool) {\\n        return _isExcludedFromMaxTx[account];\\n    }\\n\\n    function excludeFromMaxTx(\\n        address account,\\n        bool val\\n    ) public virtual onlyOwner {\\n        _isExcludedFromMaxTx[account] = val;\\n    }\\n\\n    function setSwapThreshold(uint256 value) public virtual onlyOwner {\\n        swapThreshold = value;\\n    }\\n\\n    function setMaxWalletAmount(uint256 percent) public virtual onlyOwner {\\n        maxWalletAmount = (totalSupply() * percent) / TAX_DIVISOR;\\n    }\\n\\n    function setMaxTransactionAmount(uint256 percent) public virtual onlyOwner {\\n        maxTransactionAmount = (totalSupply() * percent) / TAX_DIVISOR;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {\\n        require(\\n            _feesRates.buyFee < 4500 && _feesRates.sellFee < 4500,\\n            \\\"Too hight tax, can't renounce ownership.\\\"\\n        );\\n        _transferOwnership(address(0));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMint\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"percents\",\"type\":\"uint16[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holderLastTransferTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"autoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionRewardsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividentTokenBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPriceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeeAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeePercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setAutoLiquidityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setBuyBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setBuyBackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setDistributionRewardsPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelayBetweenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDividendTracker\",\"outputs\":[{\"internalType\":\"contract IDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividentTokenBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateGasLimitActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateTransferDelayEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000e4c6974746c656c6f6e7472756d7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c4554000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000004f37e5490dbede9e48e8b70537dfbfbe7906785a00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015e000000000000000000000000000000000000000000000000000000000000015e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}