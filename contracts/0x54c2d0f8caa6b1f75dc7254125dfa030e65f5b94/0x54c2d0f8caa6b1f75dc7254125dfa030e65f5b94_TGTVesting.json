{"SourceCode": "// SPDX-License-Identifier: MPL\r\n\r\npragma solidity ~0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface ITGTERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract TGTVesting {\r\n    ITGTERC20Metadata private _tgtContract;\r\n    address private _owner;\r\n    uint256 private _vestedBalance;\r\n    uint64 public _startTimestamp;\r\n    uint64 public _vestingDuration;\r\n\r\n    mapping(address => VestingParams) private _vesting;\r\n\r\n    struct VestingParams {\r\n        //96bit are enough: max value is 1000000000000000000000000000\r\n        //96bit are:                    79228162514264337593543950336\r\n        uint96 vestingAmount;\r\n        //64bit for timestamp in seconds lasts 584 billion years\r\n        uint64 vestingDuration;\r\n        //how much vested funds were already claimed\r\n        uint96 vestingClaimed;\r\n    }\r\n\r\n    event Vested(address indexed account, uint96 amount, uint64 vestingDuration);\r\n    event TransferOwner(address indexed owner);\r\n    event SetStartTimestamp(uint64 startTimestamp);\r\n    event Claim(address indexed account, uint96 amount);\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == _owner, \"Vesting: not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address tgtContract, uint64 startTimestamp, uint64 vestingDuration) {\r\n        _owner = msg.sender;\r\n        _tgtContract = ITGTERC20Metadata(tgtContract);\r\n        _startTimestamp = startTimestamp;\r\n        _vestingDuration = vestingDuration;\r\n    }\r\n\r\n    function transferOwner(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Vesting: transfer owner the zero address\");\r\n        require(newOwner != address(this), \"Vesting: transfer owner to this contract\");\r\n\r\n        _owner = newOwner;\r\n        emit TransferOwner(newOwner);\r\n    }\r\n\r\n    function setStartTimestamp(uint64 startTimestamp) public virtual onlyOwner {\r\n        require(block.timestamp < _startTimestamp, \"Vesting: existing start timestamp has already been reached\");\r\n        require(block.timestamp < startTimestamp, \"Vesting: can only set a start timestamp in the future\");\r\n\r\n        _startTimestamp = startTimestamp;\r\n        emit SetStartTimestamp(startTimestamp);\r\n    }\r\n\r\n    function vest(address[] calldata accounts, uint96[] calldata amounts) public virtual onlyOwner {\r\n        require(accounts.length == amounts.length, \"Vesting: accounts and amounts length must match\");\r\n\r\n        for(uint256 i=0;i<accounts.length;i++) {\r\n            //only vest those accounts that are not yet vested. We dont want to merge vestings\r\n            if(_vesting[accounts[i]].vestingAmount == 0) {\r\n                _vestedBalance += amounts[i];\r\n                _vesting[accounts[i]] = VestingParams(amounts[i], _vestingDuration, 0);\r\n                emit Vested(accounts[i], amounts[i], _vestingDuration);\r\n            }\r\n        }\r\n        require(_vestedBalance <= _tgtContract.balanceOf(address(this)), \"Vesting: not enough tokens in this contract for vesting\");\r\n    }\r\n\r\n    function canClaim(address vested) public view virtual returns (uint256) {\r\n        if(block.timestamp <= _startTimestamp || _startTimestamp == 0) {\r\n            return 0;\r\n        }\r\n        VestingParams memory v = _vesting[vested];\r\n        return claimableAmount(v);\r\n    }\r\n\r\n    function claimableAmount(VestingParams memory v) internal view virtual returns (uint256) {\r\n        if (block.timestamp < _startTimestamp + v.vestingDuration) {\r\n            return 0;\r\n        }\r\n        // Return the full vested amount minus what's already been claimed\r\n        return v.vestingAmount - v.vestingClaimed;\r\n    }\r\n\r\n    function vestedBalance() public view virtual returns (uint256) {\r\n        return _vestedBalance;\r\n    }\r\n\r\n    function vestedBalanceOf(address vested) public view virtual returns (uint256) {\r\n        VestingParams memory v = _vesting[vested];\r\n        return v.vestingAmount - v.vestingClaimed;\r\n    }\r\n\r\n    function claim(address to, uint96 amount) public virtual {\r\n        require(block.timestamp > _startTimestamp, 'Vesting: timestamp now or in the past?');\r\n        require(_startTimestamp != 0, \"Vesting: contract not live yet\");\r\n        require(to != address(0), \"Vesting: transfer from the zero address\");\r\n        require(to != address(this), \"Vesting: sender is this contract\");\r\n        require(to != address(_tgtContract), \"Vesting: sender is _tgtContract contract\");\r\n\r\n        VestingParams storage v = _vesting[msg.sender];\r\n\r\n        require(amount <= claimableAmount(v), \"TGT: cannot transfer vested funds\");\r\n\r\n        v.vestingClaimed += amount;\r\n        _vestedBalance -= amount;\r\n        _tgtContract.transfer(to, amount);\r\n        emit Claim(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tgtContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"}],\"name\":\"SetStartTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TransferOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"vestingDuration\",\"type\":\"uint64\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_startTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vestingDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vested\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"amounts\",\"type\":\"uint96[]\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vested\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TGTVesting", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000108a850856db3f85d0269a2693d896b394c8032500000000000000000000000000000000000000000000000000000000652b2b800000000000000000000000000000000000000000000000000000000001e13380", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://32d66526c0196da3d0a164216ea468a886ee8c1dc0bb3fcde8eff04c0c4be376"}