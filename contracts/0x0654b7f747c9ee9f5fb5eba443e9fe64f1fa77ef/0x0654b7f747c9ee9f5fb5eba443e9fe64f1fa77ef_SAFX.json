{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    function transferOwnership(address payable _ownerNew) external onlyOwner {\r\n        owner = _ownerNew;\r\n        emit OwnershipTransferred(_ownerNew);\r\n    }\r\n    event OwnershipTransferred(address _ownerNew);\r\n}\r\n\r\ninterface IRouter {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract SAFX is IERC20, Ownable {\r\n    string public constant _name = \"Safx\";\r\n    string public constant _symbol = \"SAFX\";\r\n    uint8 public constant _decimals = 9;\r\n\r\n    uint256 public constant _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) public _balances;\r\n    mapping (address => mapping (address => uint256)) public _allowances;\r\n\r\n    mapping (address => bool) public noTax;\r\n    mapping (address => bool) public noMax;\r\n    mapping (address => bool) public dexPair;\r\n\r\n    uint256 public buyFeeTeam = 150;\r\n    uint256 public buyFeeInsurance = 50;\r\n    uint256 public buyFeeLiqExchange = 150;\r\n    uint256 public buyFeeLiqToken = 0;\r\n    uint256 public buyFee = 350;\r\n    uint256 public sellFeeTeam = 0;\r\n    uint256 public sellFeeInsurance = 100;\r\n    uint256 public sellFeeLiqExchange = 400;\r\n    uint256 public sellFeeLiqToken = 50;\r\n    uint256 public sellFee = 550;\r\n\r\n    uint256 private _tokensTeam = 0;\r\n    uint256 private _tokensInsurance = 0;\r\n    uint256 private _tokensLiqExchange = 0;\r\n    uint256 private _tokensLiqToken = 0;\r\n\r\n    address public walletTeam = 0x27B9Be6B278c291109018D846E99a22F54D793A3;\r\n    address public walletInsurance = 0xfF8C7d5933541388aD26ee45DF5735a746680d7A;\r\n    address public walletLiqExchange = 0x1a9dd076a21ea54A528CdBF1F3e75700a1594B9B;\r\n    address public walletLiqToken = 0xF3A8439dFc2Da25466eD9be6D456Ad0211a5e399;\r\n\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IRouter public router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public pair;\r\n\r\n    uint256 public maxWallet = 20_000_000 * (10 ** _decimals);\r\n    uint256 public swapTrigger = 0;\r\n    uint256 public swapThreshold = 25_000 * (10 ** _decimals);\r\n\r\n    bool public tradingLive = false;\r\n\r\n    bool private _swapping;\r\n\r\n    modifier swapping() {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        pair = IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f).createPair(WETH, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n\r\n        noTax[msg.sender] = true;\r\n        noMax[msg.sender] = true;\r\n\r\n        dexPair[pair] = true;\r\n\r\n        approve(address(router), _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            require(_allowances[sender][msg.sender] >= amount, \"Insufficient allowance\");\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        if (_swapping) return _basicTransfer(sender, recipient, amount);\r\n        require(tradingLive || sender == owner, \"Trading not live\");\r\n\r\n        address routerAddress = address(router);\r\n        bool _sell = dexPair[recipient] || recipient == routerAddress;\r\n\r\n        if (!_sell && !noMax[recipient]) require((_balances[recipient] + amount) < maxWallet, \"Max wallet triggered\");\r\n\r\n        if (_sell && amount >= swapTrigger) {\r\n            if (!dexPair[msg.sender] && !_swapping && _balances[address(this)] >= swapThreshold) _sellTaxedTokens();\r\n        }\r\n\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        uint256 amountReceived = (((dexPair[sender] || sender == address(router)) || (dexPair[recipient]|| recipient == address(router))) ? !noTax[sender] && !noTax[recipient] : false) ? _collectTaxedTokens(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + amountReceived;\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        return true;\r\n    }\r\n\r\n    function _collectTaxedTokens(address sender, address receiver, uint256 amount) private returns (uint256) {\r\n        bool _sell = dexPair[receiver] || receiver == address(router);\r\n        uint256 _fee = _sell ? sellFee : buyFee;\r\n        uint256 _tax = amount * _fee / 10000;\r\n\r\n        if (_fee > 0) {\r\n            if (_sell) {\r\n                if (sellFeeTeam > 0) _tokensTeam += _tax * sellFeeTeam / _fee;\r\n                if (sellFeeInsurance > 0) _tokensInsurance += _tax * sellFeeInsurance / _fee;\r\n                if (sellFeeLiqExchange > 0) _tokensLiqExchange += _tax * sellFeeLiqExchange / _fee;\r\n                if (sellFeeLiqToken > 0) _tokensLiqToken += _tax * sellFeeLiqToken / _fee;\r\n            } else {\r\n                if (buyFeeTeam > 0) _tokensTeam += _tax * buyFeeTeam / _fee;\r\n                if (buyFeeInsurance > 0) _tokensInsurance += _tax * buyFeeInsurance / _fee;\r\n                if (buyFeeLiqExchange > 0) _tokensLiqExchange += _tax * buyFeeLiqExchange / _fee;\r\n                if (buyFeeLiqToken > 0) _tokensLiqToken += _tax * buyFeeLiqToken / _fee;\r\n            }\r\n        }\r\n\r\n        _balances[address(this)] = _balances[address(this)] + _tax;\r\n        emit Transfer(sender, address(this), _tax);\r\n\r\n        return amount - _tax;\r\n    }\r\n\r\n    function _sellTaxedTokens() private swapping {\r\n        uint256 _tokens = _tokensTeam + _tokensInsurance + _tokensLiqExchange + _tokensLiqToken;\r\n\r\n        uint256 _liquidityTokensToSwapHalf = _tokensLiqToken / 2;\r\n        uint256 _swapInput = balanceOf(address(this)) - _liquidityTokensToSwapHalf;\r\n\r\n        uint256 _balanceSnapshot = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(_swapInput, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 _tax = address(this).balance - _balanceSnapshot;\r\n\r\n        uint256 _taxTeam = _tax * _tokensTeam / _tokens / 2;\r\n        uint256 _taxInsurance = _tax * _tokensInsurance / _tokens;\r\n        uint256 _taxLiqExchange = _tax * _tokensLiqExchange / _tokens;\r\n        uint256 _taxLiqToken = _tax * _tokensLiqToken / _tokens;\r\n\r\n        _tokensTeam = 0;\r\n        _tokensInsurance = 0;\r\n        _tokensLiqExchange = 0;\r\n        _tokensLiqToken = 0;\r\n\r\n        if (_taxTeam > 0) payable(walletTeam).call{value: _taxTeam}(\"\");\r\n        if (_taxInsurance > 0) payable(walletInsurance).call{value: _taxInsurance}(\"\");\r\n        if (_taxLiqExchange > 0) payable(walletLiqExchange).call{value: _taxLiqExchange}(\"\");\r\n        if (_taxLiqToken > 0) router.addLiquidityETH{value: _taxLiqToken}(address(this), _liquidityTokensToSwapHalf, 0, 0, walletLiqToken, block.timestamp);\r\n    }\r\n\r\n    function changeDexPair(address _pair, bool _value) external onlyOwner {\r\n        dexPair[_pair] = _value;\r\n    }\r\n\r\n    function fetchDexPair(address _pair) external view returns (bool) {\r\n        return dexPair[_pair];\r\n    }\r\n\r\n    function changeNoTax(address _wallet, bool _value) external onlyOwner {\r\n        noTax[_wallet] = _value;\r\n    }\r\n\r\n    function fetchNoTax(address _wallet) external view returns (bool) {\r\n        return noTax[_wallet];\r\n    }\r\n\r\n    function changeNoMax(address _wallet, bool _value) external onlyOwner {\r\n        noMax[_wallet] = _value;\r\n    }\r\n\r\n    function fetchNoMax(address _wallet) external view onlyOwner returns (bool) {\r\n        return noMax[_wallet];\r\n    }\r\n\r\n    function changeMaxWallet(uint256 _maxWallet) external onlyOwner {\r\n        maxWallet = _maxWallet;\r\n    }\r\n\r\n    function changeFees(uint256 _buyFeeTeam, uint256 _buyFeeInsurance, uint256 _buyFeeLiqExchange, uint256 _buyFeeLiqToken, uint256 _sellFeeTeam, uint256 _sellFeeInsurance, uint256 _sellFeeLiqExchange, uint256 _sellFeeLiqToken) external onlyOwner {\r\n        buyFeeTeam = _buyFeeTeam;\r\n        buyFeeInsurance = _buyFeeInsurance;\r\n        buyFeeLiqExchange = _buyFeeLiqExchange;\r\n        buyFeeLiqToken = _buyFeeLiqToken;\r\n        buyFee = _buyFeeTeam + _buyFeeInsurance + _buyFeeLiqExchange + _buyFeeLiqToken;\r\n        sellFeeTeam = _sellFeeTeam;\r\n        sellFeeInsurance = _sellFeeInsurance;\r\n        sellFeeLiqExchange = _sellFeeLiqExchange;\r\n        sellFeeLiqToken = _sellFeeLiqToken;\r\n        sellFee = _sellFeeTeam + _sellFeeInsurance + _sellFeeLiqExchange + _sellFeeLiqToken;\r\n    }\r\n\r\n    function changeWallets(address _walletTeam, address _walletInsurance, address _walletLiqExchange, address _walletLiqToken) external onlyOwner {\r\n        walletTeam = _walletTeam;\r\n        walletInsurance = _walletInsurance;\r\n        walletLiqExchange = _walletLiqExchange;\r\n        walletLiqToken = _walletLiqToken;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingLive = true;\r\n    }\r\n\r\n    function changeSwapSettings(uint256 _swapTrigger, uint256 _swapThreshold) external onlyOwner {\r\n        swapTrigger = _swapTrigger;\r\n        swapThreshold = _swapThreshold;\r\n    }\r\n\r\n    function getCirculatingSupply() external view returns (uint256) {\r\n        return _totalSupply - balanceOf(0x000000000000000000000000000000000000dEaD) - balanceOf(0x0000000000000000000000000000000000000000);\r\n    }\r\n\r\n    function transferETH() external onlyOwner {\r\n        payable(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function transferERC(address _erc20Address) external onlyOwner {\r\n        require(_erc20Address != address(this), \"Can't withdraw SAFX\");\r\n        IERC20 _erc20 = IERC20(_erc20Address);\r\n        _erc20.transfer(msg.sender, _erc20.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ownerNew\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeLiqExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeLiqToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"changeDexPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFeeTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeInsurance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeLiqExchange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeLiqToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeInsurance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeLiqExchange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeLiqToken\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"changeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"changeNoMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"changeNoTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTrigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"changeSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletInsurance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletLiqExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletLiqToken\",\"type\":\"address\"}],\"name\":\"changeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"fetchDexPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"fetchNoMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"fetchNoTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeLiqExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeLiqToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"transferERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ownerNew\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletInsurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiqExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiqToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SAFX", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://810c0ee2b342bdd3000d8006089ab3536a88c1a486c43181ceb01cd119dfcbe8"}