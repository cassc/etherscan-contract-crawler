{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"BAEX.sol\":{\"content\":\"pragma solidity 0.6.11; // 5ef660b1\\n/**\\n * @title BAEX - Binary Assets EXchange DeFi token v.2.0.1 (\u00a9 2020 - baex.com)\\n *\\n * The source code of the BAEX token, which provides liquidity for the open binary options platform https://baex.com\\n * \\n * THIS SOURCE CODE CONFIRMS THE \\\"NEVER FALL\\\" MATHEMATICAL MODEL USED IN THE BAEX TOKEN.\\n * \\n * 9 facts about the BAEX token:\\n * \\n * 1) Locked on the BAEX smart-contract, stable coins (USDT,DAI) is always collateral of the tokens value and can be transferred\\n *  from it only when the user burns his BAEX tokens.\\n * \\n * 2) The total supply of BAEX increases only when stable coins(USDT,DAI) hold on the BAEX smart-contract\\n * \\tand decreases when the BAEX holder burns his tokens to get USDT.\\n * \\n * 3) Any BAEX tokens holder at any time can burn them and receive a part of the stable coins held\\n * \\ton BAEX smart-contract based on the formula tokens_to_burn * current_burn_price - (5% burning_fee).\\n * \\n * 4) current_burn_price is calculated by the formula (amount_of_holded_usdt_and_dai / total_supply) * 0.9\\n * \\n * 5) Based on the facts above, the value of the BAEX tokens remaining after the burning increases every time\\n * \\tsomeone burns their BAEX tokens and receives USDT for them.\\n * \\n * 6) BAEX tokens issuance price calculated as (amount_of_holded_usdt_and_dai / total_supply) + (amount_of_holded_usdt_and_dai / total_supply) * 14%\\n *  that previously purchased BAEX tokens are always increased in their price.\\n * \\n * 7) BAEX token holders can participate as liquidity providers or traders on the baex.com hence, any withdrawal of\\n *  profit will increase the value of previously purchased BAEX tokens.\\n * \\n * 8) There is a referral program, running on the blockchain, in the BAEX token that allows you to receive up to 80% of the system\\u0027s \\n *  commissions as a reward, you can find out more details and get your referral link at https://baex.com/#referral\\n *\\n * 9) There is an integrated automatic bonus pool distribution system in the BAEX token https://baex.com/#bonus\\n * \\n * Read more about all the possible ways of earning and using the BAEX token on https://baex.com/#token\\n */\\n\\n/* Abstract contracts */\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface with allowance\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 {\\n    uint public _totalSupply;\\n    uint public decimals;\\n    function totalSupply() public view virtual returns (uint);\\n    function balanceOf(address who) public view virtual returns (uint);\\n    function transfer(address to, uint value) virtual public returns (bool);\\n    function allowance(address owner, address spender) public view virtual returns (uint);\\n    function transferFrom(address from, address to, uint value) virtual public returns (bool);\\n    function approve(address spender, uint value) virtual public returns (bool);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title Implementation of the basic standard ERC20 token.\\n * @dev ERC20 with allowance\\n */\\nabstract contract StandardToken is ERC20 {\\n    using SafeMath for uint;\\n    mapping(address =\\u003e uint) public balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) public allowed;\\n    \\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    function totalSupply() public view override virtual returns (uint) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) override virtual public returns (bool) {\\n        require( balances[msg.sender] \\u003e= _value, \\\"Not enough amount on the source address\\\");\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Get the balance of the specified address.\\n    * @param _owner The address to query the balance of.\\n    * @return balance An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) view override public returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) override virtual public returns (bool) {\\n        uint _allowance = allowed[_from][msg.sender];\\n        if (_from != msg.sender \\u0026\\u0026 _allowance != uint(-1)) {\\n            require(_allowance\\u003e=_value,\\\"Not enough allowed amount\\\");\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        require( balances[_from] \\u003e= _value, \\\"Not enough amount on the source address\\\");\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) override public returns(bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return remaining A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) override public view returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n/**\\n * @title OptionsContract\\n * @dev Abstract contract of BAEX options\\n */\\ninterface OptionsContract {\\n    function onTransferTokens(address _from, address _to, uint256 _value) external returns (bool);\\n}\\n\\nabstract contract BAEXonIssue {\\n    function onIssueTokens(address _issuer, address _partner, uint256 _tokens_to_issue, uint256 _issue_price, uint256 _asset_amount) public virtual returns(uint256);\\n}\\n\\nabstract contract BAEXonBurn {\\n    function onBurnTokens(address _issuer, address _partner, uint256 _tokens_to_burn, uint256 _burning_price, uint256 _asset_amount) public virtual returns(uint256);\\n}\\n\\nabstract contract abstractBAEXAssetsBalancer {\\n    function autoBalancing() public virtual returns(bool);\\n}\\n/* END of: Abstract contracts */\\n\\n\\nabstract contract LinkedToStableCoins {\\n    using SafeERC20 for IERC20;\\n    // Fixed point math factor is 10^8\\n    uint256 constant public fmkd = 8;\\n    uint256 constant public fmk = 10**fmkd;\\n    uint256 constant internal _decimals = 8;\\n    address constant internal super_owner = 0x2B2fD898888Fa3A97c7560B5ebEeA959E1Ca161A;\\n    address internal owner;\\n    \\n    address public usdtContract;\\n\\taddress public daiContract;\\n\\t\\n\\tfunction balanceOfOtherERC20( address _token ) internal view returns (uint256) {\\n\\t    if ( _token == address(0x0) ) return 0;\\n\\t\\treturn tokenAmountToFixedAmount( _token, IERC20(_token).balanceOf(address(this)) );\\n\\t}\\n\\t\\n\\tfunction balanceOfOtherERC20AtAddress( address _token, address _address ) internal view returns (uint256) {\\n\\t    if ( _token == address(0x0) ) return 0;\\n\\t\\treturn tokenAmountToFixedAmount( _token, IERC20(_token).balanceOf(_address) );\\n\\t}\\n\\t\\n\\tfunction transferOtherERC20( address _token, address _from, address _to, uint256 _amount ) internal returns (bool) {\\n\\t    if ( _token == address(0x0) ) return false;\\n        if ( _from == address(this) ) {\\n            IERC20(_token).safeTransfer( _to, fixedPointAmountToTokenAmount(_token,_amount) );\\n        } else {\\n            IERC20(_token).safeTransferFrom( _from, _to, fixedPointAmountToTokenAmount(_token,_amount) );\\n        }\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction transferAmountOfAnyAsset( address _from, address _to, uint256 _amount ) internal returns (bool) {\\n\\t    uint256 amount = _amount;\\n\\t    uint256 usdtBal = balanceOfOtherERC20AtAddress(usdtContract,_from);\\n\\t    uint256 daiBal = balanceOfOtherERC20AtAddress(daiContract,_from);\\n\\t    require( ( usdtBal + daiBal ) \\u003e= _amount, \\\"Not enough amount of assets\\\");\\n        if ( _from == address(this) ) {\\n            if ( usdtBal \\u003e= amount ) {\\n                IERC20(usdtContract).safeTransfer( _to, fixedPointAmountToTokenAmount(usdtContract,_amount) );\\n                amount = 0;\\n            } else if ( usdtBal \\u003e 0 ) {\\n                IERC20(usdtContract).safeTransfer( _to, fixedPointAmountToTokenAmount(usdtContract,usdtBal) );\\n                amount = amount - usdtBal;\\n            }\\n            if ( amount \\u003e 0 ) {\\n                IERC20(daiContract).safeTransfer( _to, fixedPointAmountToTokenAmount(daiContract,_amount) );\\n            }\\n        } else {\\n            if ( usdtBal \\u003e= amount ) {\\n                IERC20(usdtContract).safeTransferFrom( _from, _to, fixedPointAmountToTokenAmount(usdtContract,_amount) );\\n                amount = 0;\\n            } else if ( usdtBal \\u003e 0 ) {\\n                IERC20(usdtContract).safeTransferFrom( _from, _to, fixedPointAmountToTokenAmount(usdtContract,usdtBal) );\\n                amount = amount - usdtBal;\\n            }\\n            if ( amount \\u003e 0 ) {\\n                IERC20(daiContract).safeTransferFrom( _from, _to, fixedPointAmountToTokenAmount(daiContract,_amount) );\\n            }\\n        }\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction fixedPointAmountToTokenAmount( address _token, uint256 _amount ) internal view returns (uint256) {\\n\\t    uint dt = IERC20(_token).decimals();\\n\\t\\tuint256 amount = 0;\\n        if ( dt \\u003e _decimals ) {\\n            amount = _amount * 10**(dt-_decimals);\\n        } else {\\n            amount = _amount / 10**(_decimals-dt);\\n        }\\n        return amount;\\n\\t}\\n\\t\\n\\tfunction tokenAmountToFixedAmount( address _token, uint256 _amount ) internal view returns (uint256) {\\n\\t    uint dt = IERC20(_token).decimals();\\n\\t\\tuint256 amount = 0;\\n        if ( dt \\u003e _decimals ) {\\n            amount = _amount / 10**(dt-_decimals);\\n        } else {\\n            amount = _amount * 10**(_decimals-dt);\\n        }\\n        return amount;\\n\\t}\\n\\t\\n\\tfunction collateral() public view returns (uint256) {\\n\\t    if ( usdtContract == daiContract ) {\\n\\t        return balanceOfOtherERC20(usdtContract);\\n\\t    } else {\\n\\t        return balanceOfOtherERC20(usdtContract) + balanceOfOtherERC20(daiContract);\\n\\t    }\\n\\t}\\n\\t\\n\\tfunction setUSDTContract(address _usdtContract) public onlyOwner {\\n\\t\\tusdtContract = _usdtContract;\\n\\t}\\n\\t\\n\\tfunction setDAIContract(address _daiContract) public onlyOwner {\\n\\t\\tdaiContract = _daiContract;\\n\\t}\\n\\t\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\n\\t\\trequire(newOwner != address(0));\\n\\t\\temit OwnershipTransferred(owner, newOwner);\\n\\t\\towner = newOwner;\\n\\t}\\n\\t\\n\\tmodifier onlyOwner() {\\n\\t\\trequire( (msg.sender == owner) || (msg.sender == super_owner), \\\"You don\\u0027t have permissions to call it\\\" );\\n\\t\\t_;\\n\\t}\\n\\t\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\\n/**\\n * @title BAEX\\n * @dev BAEX token contract\\n */\\ncontract BAEX is LinkedToStableCoins, StandardToken {\\n    // Burn price ratio is 0.9\\n    uint256 constant burn_ratio = 9 * fmk / 10;\\n    // Burning fee is 5%\\n    uint256 constant burn_fee = 5 * fmk / 100;\\n    // Issuing price increase ratio vs locked_amount/supply is 14 %\\n    uint256 public issue_increase_ratio = 14 * fmk / 100;\\n    \\n\\tstring public name;\\n\\tstring public symbol;\\n\\t\\n\\tuint256 public issue_price;\\n\\tuint256 public burn_price;\\n\\t\\n\\t// Counters of transactions\\n\\tuint256 public issue_counter;\\n\\tuint256 public burn_counter;\\n\\t\\n\\t// Issued \\u0026 burned volumes\\n\\tuint256 public issued_volume;\\n\\tuint256 public burned_volume;\\n\\t\\n    // Links to other smart-contracts\\n\\tmapping (address =\\u003e bool) optionsContracts;\\n\\taddress referralProgramContract;\\n\\taddress bonusProgramContract;\\n\\taddress uniswapRouter;\\n\\t\\n\\t// Contract for assets balancing\\n    address assetsBalancer;\\t\\n\\t\\n    /**\\n    * @dev constructor, initialization of starting values\\n    */\\n\\tconstructor() public {\\n\\t\\tname = \\\"Binary Assets EXchange\\\";\\n\\t\\tsymbol = \\\"BAEX\\\";\\n\\t\\tdecimals = _decimals;\\n\\t\\t\\n\\t\\towner = msg.sender;\\t\\t\\n\\n\\t\\t// Initial Supply of BAEX is ZERO\\n\\t\\t_totalSupply = 0;\\n\\t\\tbalances[address(this)] = _totalSupply;\\n\\t\\t\\n\\t\\t// Initial issue price of BAEX is 1 USDT or DAI per 1.0 BAEX\\n\\t\\tissue_price = 1 * fmk;\\n\\t\\t\\n\\t\\t// USDT token contract address\\n\\t\\tusdtContract = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\t\\t// DAI token contract address\\n\\t\\tdaiContract = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\t\\t// Uniswap V2 Router\\n\\t\\tuniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\t\\t\\n\\t}\\n\\t\\n\\tfunction issuePrice() public view returns (uint256) {\\n\\t\\treturn issue_price;\\n\\t}\\n\\t\\n\\tfunction burnPrice() public view returns (uint256) {\\n\\t\\treturn burn_price;\\n\\t}\\n\\n\\t/**\\n    * @dev ERC20 transfer with burning of BAEX when it will be sent to the BAEX smart-contract\\n    * @dev and with the placing liquidity to the binary options when tokens will be sent to the BAEXOptions contracts.\\n    */\\n\\tfunction transfer(address _to, uint256 _value) public override returns (bool) {\\n\\t    require(_to != address(0),\\\"Destination address can\\u0027t be empty\\\");\\n\\t    require(_value \\u003e 0,\\\"Value for transfer should be more than zero\\\");\\n\\t    return transferFrom( msg.sender, _to, _value);\\n\\t}\\n\\t\\n    /**\\n    * @dev ERC20 transferFrom with burning of BAEX when it will be sent to the BAEX smart-contract\\n    * @dev and with the placing liquidity to the binary options when tokens will be sent to the BAEXOptions contracts.\\n\\t*/\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\\n\\t    require(_to != address(0),\\\"Destination address can\\u0027t be empty\\\");\\n\\t    require(_value \\u003e 0,\\\"Value for transfer should be more than zero\\\");\\n\\t    bool res = false;\\n\\t    if ( _from == msg.sender ) {\\n\\t        res = super.transfer(_to, _value);\\n\\t    } else {\\n\\t        res = super.transferFrom(_from, _to, _value);\\n\\t    }\\n\\t\\tif ( res ) {\\n\\t\\t    if ( _to == address(this) ) {\\n                burnBAEX( _from, _value );\\n    \\t\\t} else if ( optionsContracts[_to] ) {\\n                OptionsContract(_to).onTransferTokens( _from, _to, _value );\\n    \\t\\t}\\n    \\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t\\n    /**\\n    * @dev This helper function is used by BAEXOptions smart-contracts to operate with the liquidity pool of options.\\n\\t*/\\n\\tfunction transferOptions(address _from, address _to, uint256 _value, bool _burn_to_assets) public onlyOptions returns (bool) {\\n\\t    require(_to != address(0),\\\"Destination address can\\u0027t be empty\\\");\\n\\t\\trequire(_value \\u003c= balances[_from], \\\"Not enough balance to transfer\\\");\\n\\n\\t\\tif (_burn_to_assets) {\\n\\t\\t    balances[_from] = balances[_from].sub(_value);\\n\\t\\t    balances[address(this)] = balances[address(this)].add(_value);\\n\\t\\t    emit Transfer( _from, _to, _value );\\n\\t\\t    emit Transfer( _to, address(this), _value );\\n\\t\\t    return burnBAEX( _to, _value );\\n\\t\\t} else {\\n\\t\\t    balances[_from] = balances[_from].sub(_value);\\n\\t\\t    balances[_to] = balances[_to].add(_value);\\n\\t\\t    emit Transfer( _from, _to, _value );\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\t/**\\n    * @dev Recalc issuing and burning prices\\n\\t*/\\n    function recalcPrices() private {\\n        issue_price = collateral() * fmk / _totalSupply;\\n\\t    burn_price = issue_price * burn_ratio / fmk;\\n\\t    issue_price = issue_price + issue_price * issue_increase_ratio / fmk;\\n    }\\n\\t\\n    /**\\n    * @dev Issue the BAEX tokens, recalc prices and hold ERC20 USDT or DAI on the smart-contract.\\n\\t*/\\n\\tfunction issueBAEXvsKnownAsset( address _token_contract, address _to_address, uint256 _asset_amount, address _partner, bool _need_transfer ) private returns (uint256) {\\n\\t    uint256 tokens_to_issue;\\n\\t    tokens_to_issue = tokenAmountToFixedAmount( _token_contract, _asset_amount ) * fmk / issue_price;\\n\\t    if ( _need_transfer ) {\\n\\t        require( IERC20(_token_contract).allowance(_to_address,address(this)) \\u003e= _asset_amount, \\\"issueBAEXbyERC20: Not enough allowance\\\" );\\n\\t        uint256 asset_balance_before = IERC20(_token_contract).balanceOf(address(this));\\n\\t        IERC20(_token_contract).safeTransferFrom(_to_address,address(this),_asset_amount);\\n\\t        require( IERC20(_token_contract).balanceOf(address(this)) == (asset_balance_before+_asset_amount), \\\"issueBAEXbyERC20: Error in transfering\\\" );\\n\\t    }\\n\\t    if (address(referralProgramContract) != address(0) \\u0026\\u0026 _partner != address(0)) {\\n            BAEXonIssue(referralProgramContract).onIssueTokens( _to_address, _partner, tokens_to_issue, issue_price, tokenAmountToFixedAmount(_token_contract,_asset_amount) );\\n\\t    }\\n        // Increase the total supply\\n\\t    _totalSupply = _totalSupply.add( tokens_to_issue );\\n\\t    balances[_to_address] = balances[_to_address].add( tokens_to_issue );\\n\\t    if ( address(bonusProgramContract) != address(0) ) {\\n\\t        uint256 to_bonus_amount = BAEXonIssue(bonusProgramContract).onIssueTokens( _to_address, _partner, tokens_to_issue, issue_price, tokenAmountToFixedAmount(_token_contract,_asset_amount) );\\n\\t        if (to_bonus_amount \\u003e 0) {\\n\\t            if ( ( _token_contract == usdtContract ) || ( balanceOfOtherERC20(usdtContract) \\u003e= to_bonus_amount ) ) {\\n\\t                transferOtherERC20( usdtContract, address(this), bonusProgramContract, to_bonus_amount );\\n\\t            } else {\\n\\t                transferOtherERC20( daiContract, address(this), bonusProgramContract, to_bonus_amount );\\n\\t            }\\n\\t        }\\n\\t    }\\n\\t    if (  address(assetsBalancer) != address(0) \\u0026\\u0026 ( _asset_amount - (_asset_amount/1000)*1000) == 777 ) {\\n            abstractBAEXAssetsBalancer( assetsBalancer ).autoBalancing();\\n        }\\n\\t    // Recalculate issuing \\u0026 burning prices after tokens issue\\n\\t    recalcPrices();\\n\\t    //---------------------------------\\n\\t    emit Transfer(address(0x0), address(this), tokens_to_issue);\\n\\t    emit Transfer(address(this), _to_address, tokens_to_issue);\\n\\t    issue_counter++;\\n\\t    issued_volume = issued_volume + tokens_to_issue;\\n\\t    log3(bytes20(address(this)),bytes8(\\\"ISSUE\\\"),bytes32(_totalSupply),bytes32( (issue_price\\u003c\\u003c128) | burn_price ));\\n\\t    return tokens_to_issue;\\t    \\n\\t}\\n\\t\\n\\tfunction issueBAEXvsERC20( address _erc20_contract, uint256 _max_slippage, uint256 _deadline, uint256 _erc20_asset_amount, address _partner) public returns (uint256){\\n\\t    require( _deadline == 0 || block.timestamp \\u003c= _deadline, \\\"issueBAEXbyERC20: reverted because time is over\\\" );\\n\\t    // Before issuing from USDT or DAI contracts you need to call approve(BAEX_CONTRACT_ADDRESS, AMOUNT) from your wallet\\n\\t    if ( _erc20_contract == usdtContract || _erc20_contract == daiContract ) {\\n\\t        return issueBAEXvsKnownAsset( _erc20_contract, msg.sender, _erc20_asset_amount, _partner, true );\\n\\t    }\\n\\t    // Default slippage of swap thru Uniswap is 2%\\n\\t    if ( _max_slippage == 0 ) _max_slippage = 20;\\n\\t    IERC20(_erc20_contract).safeTransferFrom(msg.sender,address(this),_erc20_asset_amount);\\n\\t    IERC20(_erc20_contract).safeIncreaseAllowance(uniswapRouter,_erc20_asset_amount);\\n\\t    address[] memory path;\\n\\t    if ( _erc20_contract == IUniswapV2Router02(uniswapRouter).WETH() ) {\\n\\t        // Direct swap WETH -\\u003e DAI if _erc20_contract is WETH contract\\n\\t        path = new address[](2);\\n\\t        path[0] = IUniswapV2Router02(uniswapRouter).WETH();\\n            path[1] = daiContract;\\n\\t    } else {\\n\\t        // Using path ERC20 -\\u003e WETH -\\u003e DAI because most of liquidity in pairs with ETH\\n\\t        // and resulted amount of DAI tokens will be greater than in direct pair\\n\\t        path = new address[](3);\\n\\t        path[0] = _erc20_contract;\\n            path[1] = IUniswapV2Router02(uniswapRouter).WETH();\\n            path[2] = daiContract;\\n\\t    }\\n        uint[] memory amounts = IUniswapV2Router02(uniswapRouter).getAmountsOut(_erc20_asset_amount,path);\\n        uint256 out_min_amount = amounts[path.length-1] * _max_slippage / 1000;\\n        amounts = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(_erc20_asset_amount, out_min_amount, path, address(this), block.timestamp);\\n        return issueBAEXvsKnownAsset( daiContract, msg.sender, amounts[path.length-1], _partner, false );\\n\\t}\\n\\t\\n\\t/**\\n    * @dev Burn the BAEX tokens when someone sends BAEX to the BAEX token smart-contract.\\n\\t*/\\n\\tfunction burnBAEXtoERC20private(address _erc20_contract, address _from_address, uint256 _tokens_to_burn) private returns (bool){\\n\\t    require( _totalSupply \\u003e= _tokens_to_burn, \\\"Not enough supply to burn\\\");\\n\\t    require( _tokens_to_burn \\u003e= 1000, \\\"Minimum amount of BAEX to burn is 0.00001 BAEX\\\" );\\n\\t    uint256 contract_balance = collateral();\\n\\t    uint256 assets_to_send = _tokens_to_burn * burn_price / fmk;\\n\\t    require( ( contract_balance + 10000 ) \\u003e= assets_to_send, \\\"Not enough collateral on the contract to burn tokens\\\" );\\n\\t    if ( assets_to_send \\u003e contract_balance ) {\\n\\t        assets_to_send = contract_balance;\\n\\t    }\\n\\t    uint256 fees_of_burn = assets_to_send * burn_fee / fmk;\\n\\t    // Decrease the total supply\\n\\t    _totalSupply = _totalSupply.sub(_tokens_to_burn);\\n\\t    uint256 usdt_to_send = assets_to_send-fees_of_burn;\\n\\t    uint256 usdtBal = balanceOfOtherERC20( usdtContract );\\n\\t    if ( _erc20_contract == usdtContract || _erc20_contract == daiContract ) {\\n\\t        if ( usdtBal \\u003e= usdt_to_send ) {\\n    \\t        transferOtherERC20( usdtContract, address(this), _from_address, usdt_to_send );\\n    \\t        usdt_to_send = 0;\\n    \\t    } else if ( usdtBal  \\u003e= 0 ) {\\n                transferOtherERC20( usdtContract, address(this), _from_address, usdtBal );\\n    \\t        usdt_to_send = usdt_to_send - usdtBal;\\n    \\t    }\\n    \\t    if ( usdt_to_send \\u003e 0 ) {\\n    \\t        transferOtherERC20( daiContract, address(this), _from_address, usdt_to_send );\\n    \\t    }\\n\\t    } else {\\n\\t        require( usdtBal \\u003e= usdt_to_send, \\\"Not enough USDT on the BAEX contract, need to call balancing of the assets or burn to USDT,DAI\\\");\\n\\t        usdt_to_send = fixedPointAmountToTokenAmount(usdtContract,usdt_to_send);\\n\\t        address[] memory path;\\n\\t        if ( IUniswapV2Router02(uniswapRouter).WETH() == _erc20_contract ) {\\n\\t            path = new address[](2);\\n                path[0] = usdtContract;\\n                path[1] = IUniswapV2Router02(uniswapRouter).WETH();\\n\\t        } else {\\n        \\t    path = new address[](3);\\n                path[0] = usdtContract;\\n                path[1] = IUniswapV2Router02(uniswapRouter).WETH();\\n                path[2] = _erc20_contract;\\n\\t        }\\n\\t        IERC20(usdtContract).safeIncreaseAllowance(uniswapRouter,usdt_to_send);\\n            uint[] memory amounts = IUniswapV2Router02(uniswapRouter).getAmountsOut(usdt_to_send, path);\\n            IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(usdt_to_send, amounts[amounts.length-1] * 98/100, path, _from_address, block.timestamp);\\n\\t    }\\n\\t    transferOtherERC20( daiContract, address(this), owner, fees_of_burn );\\n\\t    contract_balance = contract_balance.sub( assets_to_send );\\n\\t    balances[address(this)] = balances[address(this)].sub( _tokens_to_burn );\\n\\t    if ( _totalSupply == 0 ) {\\n\\t        // When all tokens were burned \ud83d\ude42 it\\u0027s unreal, but we are good coders\\n\\t        burn_price = 0;\\n\\t        if ( balanceOfOtherERC20( usdtContract ) \\u003e 0 ) {\\n\\t            IERC20(usdtContract).safeTransfer( owner, balanceOfOtherERC20( usdtContract ) );\\n\\t        }\\n\\t        if ( balanceOfOtherERC20( daiContract ) \\u003e 0 ) {\\n\\t            IERC20(daiContract).safeTransfer( owner, balanceOfOtherERC20( daiContract ) );\\n\\t        }\\n\\t    } else {\\n\\t        // Recalculate issuing \\u0026 burning prices after the burning\\n\\t        recalcPrices();\\n\\t    }\\n\\t    emit Transfer(address(this), address(0x0), _tokens_to_burn);\\n\\t    burn_counter++;\\n\\t    burned_volume = burned_volume + _tokens_to_burn;\\n\\t    log3(bytes20(address(this)),bytes4(\\\"BURN\\\"),bytes32(_totalSupply),bytes32( (issue_price\\u003c\\u003c128) | burn_price ));\\n\\t    return true;\\n\\t}\\n\\t\\n\\tfunction burnBAEX(address _from_address, uint256 _tokens_to_burn) private returns (bool){\\n\\t    return burnBAEXtoERC20private(usdtContract, _from_address, _tokens_to_burn);\\n\\t}\\n\\t\\n\\tfunction burnBAEXtoERC20(address _erc20_contract, uint256 _tokens_to_burn) public returns (bool){\\n\\t    require(balances[msg.sender] \\u003e= _tokens_to_burn, \\\"Not enough BAEX balance to burn\\\");\\n\\t    balances[msg.sender] = balances[msg.sender].sub(_tokens_to_burn);\\n\\t\\tbalances[address(this)] = balances[address(this)].add(_tokens_to_burn);\\n\\t\\temit Transfer( msg.sender, address(this), _tokens_to_burn );\\n\\t    return burnBAEXtoERC20private(_erc20_contract, msg.sender, _tokens_to_burn);\\n\\t}\\n\\t\\n    receive() external payable  {\\n        msg.sender.transfer(msg.value);\\n\\t}\\n\\t\\n\\tmodifier onlyOptions() {\\n\\t    require( optionsContracts[msg.sender], \\\"Only options contracts can call it\\\" );\\n\\t\\t_;\\n\\t}\\n\\t\\n\\tfunction setOptionsContract(address _optionsContract, bool _enabled) public onlyOwner() {\\n\\t\\toptionsContracts[_optionsContract] = _enabled;\\n\\t}\\n\\t\\n\\tfunction setReferralProgramContract(address _referralProgramContract) public onlyOwner() {\\n\\t\\treferralProgramContract = _referralProgramContract;\\n\\t}\\n\\t\\n\\tfunction setBonusContract(address _bonusProgramContract) public onlyOwner() {\\n\\t\\tbonusProgramContract = _bonusProgramContract;\\n\\t}\\n\\t\\n\\tfunction setAssetsBalancer(address _assetsBalancer) public onlyOwner() {\\n\\t\\tassetsBalancer = _assetsBalancer;\\n\\t\\t// Allow to balancer contract make swap between assets\\n\\t\\tif ( IERC20(usdtContract).allowance(address(this),assetsBalancer) == 0 ) {\\n\\t\\t    IERC20(usdtContract).safeIncreaseAllowance(assetsBalancer,uint(-1));\\n\\t\\t}\\n\\t\\tif ( IERC20(daiContract).allowance(address(this),assetsBalancer) == 0 ) {\\n\\t\\t    IERC20(daiContract).safeIncreaseAllowance(assetsBalancer,uint(-1));\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction setUniswapRouter(address _uniswapRouter) public onlyOwner() {\\n\\t    uniswapRouter = _uniswapRouter;\\n\\t}\\n}\\n// SPDX-License-Identifier: UNLICENSED\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n// Factory 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\\n// Router 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens_to_burn\",\"type\":\"uint256\"}],\"name\":\"burnBAEXtoERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned_volume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fmk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fmkd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_max_slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20_asset_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"issueBAEXvsERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issue_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issue_increase_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issue_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issued_volume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetsBalancer\",\"type\":\"address\"}],\"name\":\"setAssetsBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonusProgramContract\",\"type\":\"address\"}],\"name\":\"setBonusContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiContract\",\"type\":\"address\"}],\"name\":\"setDAIContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOptionsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralProgramContract\",\"type\":\"address\"}],\"name\":\"setReferralProgramContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtContract\",\"type\":\"address\"}],\"name\":\"setUSDTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burn_to_assets\",\"type\":\"bool\"}],\"name\":\"transferOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BAEX", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "1400000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d670d14cacb5dc427db754e8e5ba0e4cd2cece80b86dd8fba15acee44a9c6b87"}