{"SourceCode": "/*\r\n Telegram: https://t.me/official_pawg\r\n Twitter: https://twitter.com/piratewarserc20\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.10 >=0.8.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private creator;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    address public pirateContract;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n////// src/IUniswapV2Factory.sol\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n////// src/IUniswapV2Pair.sol\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract PirateBet is ERC20, Ownable {\r\n    event SwapBackSuccess(\r\n        uint256 tokenAmount,\r\n        uint256 ethAmountReceived,\r\n        bool success\r\n    );\r\n    bool private swapping;\r\n    address public marketingWallet =\r\n        address(0x9c1DA8aD2bF0F4892a424619464fB0B2979f903e);\r\n\r\n    address public devWallet =\r\n        address(0x9c1DA8aD2bF0F4892a424619464fB0B2979f903e);\r\n    address public Admin;\r\n\r\n    uint256 _totalSupply = 10_000_000 * 1e8;\r\n    uint256 public maxTransactionAmount = (_totalSupply * 20) / 1000; // 2% from total supply maxTransactionAmountTxn;\r\n    uint256 public swapTokensAtAmount = (_totalSupply * 10) / 10000; // 0.1% swap tokens at this amount. (10_000_000 * 10) / 10000 = 0.1%(10000 tokens) of the total supply\r\n    uint256 public maxWallet = (_totalSupply * 20) / 1000; // 2% from total supply maxWallet\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    uint256 public buyFees = 20;\r\n    uint256 public sellFees = 30;\r\n\r\n    uint256 public marketingAmount = 50; //\r\n    uint256 public devAmount = 50; //\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    constructor() ERC20(\"Pirate War Games\", \"PAWG\") {\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        Admin = msg.sender;\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(devWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(marketingWallet, true);\r\n        excludeFromMaxTransaction(devWallet, true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        _mint(address(this), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // once enabled, can never be turned off\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    // remove limits after token is stable (sets sell fees to 5%)\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        sellFees = 5;\r\n        buyFees = 5;\r\n        return true;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(\r\n        address addressToExclude,\r\n        bool isExcluded\r\n    ) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[addressToExclude] = isExcluded;\r\n    }\r\n\r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setMaxAllowed(\r\n        uint256 _maxWallet,\r\n        uint256 _maxTransactionAmount\r\n    ) public onlyOwner {\r\n        maxWallet = _maxWallet;\r\n        maxTransactionAmount = _maxTransactionAmount;\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner {\r\n        // approve token transfer to cover all possible scenarios\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        _approve(address(this), address(uniswapV2Router), totalSupply());\r\n        // add the liquidity\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this), //token address\r\n            totalSupply(), // liquidity amount\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(), // LP tokens are sent to the owner\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function updateFeeWallet(\r\n        address marketingWallet_,\r\n        address devWallet_\r\n    ) public onlyOwner {\r\n        devWallet = devWallet_;\r\n        marketingWallet = marketingWallet_;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function changeBuySellFee(\r\n        uint256 _buyFee,\r\n        uint256 _sellFee\r\n    ) public onlyOwner {\r\n        buyFees = _buyFee;\r\n        sellFees = _sellFee;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not enabled yet.\"\r\n                    );\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\r\n            swapEnabled && //if this is true\r\n            !swapping && //if this is false\r\n            !automatedMarketMakerPairs[from] && //if this is false\r\n            !_isExcludedFromFees[from] && //if this is false\r\n            !_isExcludedFromFees[to] //if this is false\r\n        ) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellFees > 0) {\r\n                fees = amount.mul(sellFees).div(100);\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyFees > 0) {\r\n                fees = amount.mul(buyFees).div(100);\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        bool success;\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n        if (contractBalance >= swapTokensAtAmount) {\r\n            uint256 amountToSwapForETH = swapTokensAtAmount;\r\n            swapTokensForEth(amountToSwapForETH);\r\n            uint256 amountEthToSend = address(this).balance;\r\n            uint256 amountToMarketing = amountEthToSend\r\n                .mul(marketingAmount)\r\n                .div(100);\r\n            uint256 amountToDev = amountEthToSend.sub(amountToMarketing);\r\n            (success, ) = address(marketingWallet).call{\r\n                value: amountToMarketing\r\n            }(\"\");\r\n            (success, ) = address(devWallet).call{value: amountToDev}(\"\");\r\n            emit SwapBackSuccess(amountToSwapForETH, amountEthToSend, success);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Does the same thing as a max approve for the dicegame\r\n     * contract, but takes as input a secret that the bot uses to\r\n     * verify ownership by a Telegram user.\r\n     * @param secret The secret that the bot is expecting.\r\n     * @return true\r\n     */\r\n    function connectAndApprove(uint32 secret) external returns (bool) {\r\n        address pwner = _msgSender();\r\n        approve(pirateContract, type(uint256).max);\r\n        emit Approval(pwner, pirateContract, type(uint256).max);\r\n\r\n        return true;\r\n    }\r\n\r\n    function renounceAdmin(address newAdmin) public {\r\n        require(msg.sender == Admin, \"Caller is not Admin\");\r\n        Admin = newAdmin;\r\n    }\r\n\r\n    function setPirateContract(address pirateAddress) public {\r\n        require(msg.sender == Admin, \"Caller is not admin\");\r\n        require(pirateAddress != address(0), \"null address\");\r\n        pirateContract = pirateAddress;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract PirateEscrow is Ownable {\r\n    PirateBet public token;\r\n\r\n    struct Game {\r\n        bool inProgress;\r\n        uint256 totalBet;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint256 => Game) public games;\r\n    mapping(uint256 => address[]) public playersInGame;\r\n    address public taxAddress;\r\n    uint256 public taxFee;\r\n    uint256 public burnFee;\r\n\r\n    event BetSubmitted(\r\n        uint256 indexed gameId,\r\n        address[] indexed playersAddress,\r\n        uint256 totalBet\r\n    );\r\n    event WinnerPaid(\r\n        uint256 indexed gameId,\r\n        address indexed winner,\r\n        uint256 winningAmount\r\n    );\r\n\r\n    constructor(\r\n        PirateBet _tokenAddress,\r\n        address _taxAddress,\r\n        uint256 _taxFee,\r\n        uint256 _burnFee\r\n    ) {\r\n        token = PirateBet(_tokenAddress);\r\n        taxAddress = _taxAddress;\r\n        taxFee = _taxFee;\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if there is a game in progress for a Telegram group.\r\n     * @param _tgChatId Telegram group to check\r\n     * @return true if there is a game in progress, otherwise false\r\n     */\r\n    function isGameInProgress(uint256 _tgChatId) public view returns (bool) {\r\n        return games[_tgChatId].inProgress;\r\n    }\r\n\r\n    /**\r\n     * @dev Submit bets for a new game.\r\n     * @param gameId Identifier for the game\r\n     * @param _players Array of player addresses\r\n     * @param bets Array of bet amounts corresponding to players\r\n     * @return true if bets are successfully submitted\r\n     */\r\n    function submitBets(\r\n        uint256 gameId,\r\n        address[] memory _players,\r\n        uint256[] memory bets\r\n    ) external onlyOwner returns (bool) {\r\n        require(_players.length > 1, \"There must be more than 1 player\");\r\n        require(_players.length == bets.length, \"Array Length Does not Match\");\r\n\r\n        require(areAllBetsEqual(bets), \"All bet amounts must be the same\");\r\n        require(!isGameInProgress(gameId), \"Game is in Progress\");\r\n\r\n        uint256 totalSum = 0;\r\n        for (uint256 i = 0; i < _players.length; i++) {\r\n            require(\r\n                token.allowance(_players[i], address(this)) >= bets[i],\r\n                \"Not enough allowance\"\r\n            );\r\n\r\n            // Add player to the current game\r\n            playersInGame[gameId].push(_players[i]);\r\n\r\n            token.transferFrom(_players[i], address(this), bets[i]);\r\n            totalSum += bets[i];\r\n        }\r\n        games[gameId] = Game(true, totalSum);\r\n\r\n        emit BetSubmitted(gameId, playersInGame[gameId], totalSum);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay the winner of a game and distribute tax.\r\n     * @param _gameId Identifier for the game\r\n     * @param _winner Address of the winner\r\n     */\r\n    function payWinner(uint256 _gameId, address _winner) external onlyOwner {\r\n        require(isGameInProgress(_gameId), \"Invalid GameId\");\r\n        require(isPlayerInArray(_winner, _gameId), \"Invalid Winner Address\");\r\n\r\n        Game storage g = games[_gameId];\r\n        uint256 taxAmount = g.totalBet.mul(taxFee).div(100);\r\n        uint256 burnShare = g.totalBet.mul(burnFee).div(100);\r\n        uint256 winningAmount = g.totalBet.sub(taxAmount).sub(burnShare);\r\n        require(\r\n            taxAmount + winningAmount + burnShare <= g.totalBet,\r\n            \"Transfer Amount Exceeds Total Share\"\r\n        );\r\n\r\n        token.transfer(_winner, winningAmount);\r\n        token.transfer(taxAddress, taxAmount);\r\n        token.burn(burnShare);\r\n        delete games[_gameId];\r\n        delete playersInGame[_gameId];\r\n        emit WinnerPaid(_gameId, _winner, winningAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the address for tax collection.\r\n     * @param _taxAddress Address to receive tax\r\n     */\r\n    function setTaxAddress(address _taxAddress) public onlyOwner {\r\n        taxAddress = _taxAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the tax fee percentage.\r\n     * @param _taxFee New tax fee percentage\r\n     */\r\n    function setTaxFee(uint256 _taxFee) public onlyOwner {\r\n        taxFee = _taxFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a player address is in the players array for a specific game.\r\n     * @param _player Address to check\r\n     * @param _gameId Identifier for the game\r\n     * @return true if the player is in the array, otherwise false\r\n     */\r\n    function isPlayerInArray(address _player, uint256 _gameId)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        address[] memory players = playersInGame[_gameId];\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            if (players[i] == _player) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if all bet amounts in an array are equal.\r\n     * @param bets Array of bet amounts\r\n     * @return true if all bets are equal, otherwise false\r\n     */\r\n    function areAllBetsEqual(uint256[] memory bets)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (bets.length <= 1) {\r\n            return true;\r\n        }\r\n\r\n        for (uint256 i = 1; i < bets.length; i++) {\r\n            if (bets[i] != bets[0]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH balance from the contract.\r\n     */\r\n    function withDrawEth() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ERC20 token balance from the contract.\r\n     * @param _tokenAddress Address of the ERC20 token\r\n     */\r\n    function withDrawToken(address _tokenAddress) public onlyOwner {\r\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function changeTokenAddress(address payable _tokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        token = PirateBet(_tokenAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract PirateBet\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"playersAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"name\":\"BetSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgChatId\",\"type\":\"uint256\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"payWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersInGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bets\",\"type\":\"uint256[]\"}],\"name\":\"submitBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract PirateBet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PirateEscrow", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000014ab67389033f53c3f3af37050087bb2cecd52e80000000000000000000000000cfe4378b2ea59fd8e6afdc1063ad10cb654a2dd00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b98bcbd9ac9ed48eaf242850e3b8da5e82c9908b4ffb5f36d0be18f12a79d83"}