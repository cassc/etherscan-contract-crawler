{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDividendDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external;\\n\\n    function setShare(address shareholder, uint256 amount) external;\\n\\n    function deposit() external payable;\\n\\n    function process(uint256 gas) external;\\n\\n    function setMinPeriod(uint256 _minPeriod) external;\\n\\n    function setMinDistribution(uint256 _minDistribution) external;\\n\\n    function rewardTokenAddress() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFACTORY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IFACTORY {\\n    function proofRevenueAddress() external view returns (address);\\n\\n    function proofRewardPoolAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProofReflectionTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/ProofReflectionFactoryFees.sol\\\";\\n\\ninterface IProofReflectionTokenCutter is IERC20, IERC20Metadata {\\n    struct BaseData {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        uint256 whitelistPeriod;\\n        address owner;\\n        address devWallet;\\n        address routerAddress;\\n        address initialProofAdmin;\\n        address[] whitelists;\\n        address[] nftWhitelist;\\n    }\\n\\n    struct WhitelistAdd_ {\\n        address [] whitelists;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofReflectionFactoryFees.allFees memory fees\\n    ) external;\\n\\n    function addMoreToWhitelist(\\n        WhitelistAdd_ memory _WhitelistAdd\\n    ) external;\\n\\n    function updateWhitelistPeriod(\\n        uint256 _whitelistPeriod\\n    ) external;\\n\\n    function changeIsTxLimitExempt(\\n        address user,\\n        bool value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeamFinanceLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITeamFinanceLocker {\\n    function lockToken(\\n        address _tokenAddress,\\n        address _withdrawalAddress,\\n        uint256 _amount,\\n        uint256 _unlockTime,\\n        bool _mintNFT, \\n        address referrer\\n    ) external payable returns (uint256 _id);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITokenCutter {\\n    function swapTradingStatus() external;\\n\\n    function setLaunchedAt() external;\\n\\n    function cancelToken() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ProofReflectionFactoryFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nlibrary ProofReflectionFactoryFees {\\n    struct allFees {\\n        uint256 reflectionFee;\\n        uint256 reflectionFeeOnSell;\\n        uint256 lpFee;\\n        uint256 lpFeeOnSell;\\n        uint256 devFee;\\n        uint256 devFeeOnSell;\\n    }\\n}\"\r\n    },\r\n    \"contracts/proofReflectionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./libraries/Context.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ProofReflectionFactoryFees.sol\\\";\\nimport \\\"./interfaces/ITeamFinanceLocker.sol\\\";\\nimport \\\"./interfaces/ITokenCutter.sol\\\";\\nimport \\\"./interfaces/IFACTORY.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IProofReflectionTokenCutter.sol\\\";\\nimport \\\"./tokenCutters/ProofReflectionTokenCutter.sol\\\";\\n\\ncontract ProofReflectionFactory is Ownable {\\n    struct ProofToken {\\n        bool status;\\n        address pair;\\n        address owner;\\n        uint256 unlockTime;\\n        uint256 lockId;\\n    }\\n\\n    struct TokenParam {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        uint256 initialReflectionFee;\\n        uint256 initialReflectionFeeOnSell;\\n        uint256 initialLpFee;\\n        uint256 initialLpFeeOnSell;\\n        uint256 initialDevFee;\\n        uint256 initialDevFeeOnSell;\\n        uint256 unlockTime;\\n        address devWallet;\\n        uint256 whitelistPeriod;\\n        address[] whitelists;\\n    }\\n\\n    struct WhitelistAdd_ {\\n        address [] whitelists;\\n    }\\n\\n    mapping(address => ProofToken) public validatedPairs;\\n\\n    address public proofAdmin;\\n    address public routerAddress;\\n    address public lockerAddress;\\n    address[] public baseNFTWhitelist;\\n    address payable public revenueAddress;\\n    address payable public rewardPoolAddress;\\n\\n    event TokenCreated(address _address);\\n\\n    constructor(\\n        address initialRouterAddress,\\n        address initialLockerAddress,\\n        address initialRewardPoolAddress,\\n        address initialRevenueAddress,\\n        address[] memory nftWhitelist\\n    ) {\\n        routerAddress = initialRouterAddress;\\n        lockerAddress = initialLockerAddress;\\n        proofAdmin = msg.sender;\\n        revenueAddress = payable(initialRevenueAddress);\\n        rewardPoolAddress = payable(initialRewardPoolAddress);\\n        baseNFTWhitelist = nftWhitelist;\\n    }\\n\\n    function addmoreWhitelist(address tokenAddress, WhitelistAdd_ memory _WhitelistAdd) external {\\n        _checkTokenStatus(tokenAddress);\\n\\n        IProofReflectionTokenCutter(tokenAddress).addMoreToWhitelist(IProofReflectionTokenCutter.WhitelistAdd_(_WhitelistAdd.whitelists));\\n    \\n    }\\n\\n    function createToken(TokenParam memory tokenParam_) external payable {\\n        require(\\n            tokenParam_.unlockTime >= block.timestamp + 30 days,\\n            \\\"unlock under 30 days\\\"\\n        );\\n        require(msg.value >= 1 ether, \\\"not enough liquidity\\\");\\n\\n        //create token\\n\\n        ProofReflectionFactoryFees.allFees\\n            memory fees = ProofReflectionFactoryFees.allFees(\\n                tokenParam_.initialReflectionFee,\\n                tokenParam_.initialReflectionFeeOnSell,\\n                tokenParam_.initialLpFee,\\n                tokenParam_.initialLpFeeOnSell,\\n                tokenParam_.initialDevFee,\\n                tokenParam_.initialDevFeeOnSell\\n            );\\n\\n        ProofReflectionTokenCutter newToken = new ProofReflectionTokenCutter();\\n        IProofReflectionTokenCutter(address(newToken)).setBasicData(\\n            IProofReflectionTokenCutter.BaseData(\\n                tokenParam_.tokenName,\\n                tokenParam_.tokenSymbol,\\n                tokenParam_.initialSupply,\\n                tokenParam_.percentToLP,\\n                tokenParam_.whitelistPeriod,\\n                msg.sender,\\n                tokenParam_.devWallet,\\n                routerAddress,\\n                proofAdmin,\\n                tokenParam_.whitelists,\\n                baseNFTWhitelist\\n            ),\\n            fees\\n        );\\n        emit TokenCreated(address(newToken));\\n\\n        //add liquidity\\n        newToken.approve(routerAddress, type(uint256).max);\\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n        router.addLiquidityETH{value: msg.value}(\\n            address(newToken),\\n            newToken.balanceOf(address(this)),\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 111\\n        );\\n\\n        // disable trading\\n        newToken.swapTradingStatus();\\n\\n        validatedPairs[address(newToken)] = ProofToken(\\n            false,\\n            newToken.pair(),\\n            msg.sender,\\n            tokenParam_.unlockTime,\\n            0\\n        );\\n    }\\n\\n    function finalizeToken(address tokenAddress) public payable {\\n        _checkTokenStatus(tokenAddress);\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        uint256 _unlockTime = validatedPairs[tokenAddress].unlockTime;\\n        IERC20(_pair).approve(lockerAddress, type(uint256).max);\\n\\n        uint256 lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        uint256 _lockId = ITeamFinanceLocker(lockerAddress).lockToken{\\n            value: msg.value\\n        }(_pair, msg.sender, lpBalance, _unlockTime, false, 0x0000000000000000000000000000000000000000);\\n        validatedPairs[tokenAddress].lockId = _lockId;\\n\\n        //enable trading\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n        ITokenCutter(tokenAddress).setLaunchedAt();\\n\\n        validatedPairs[tokenAddress].status = true;\\n    }\\n\\n    function cancelToken(address tokenAddress) public {\\n        _checkTokenStatus(tokenAddress);\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        address _owner = validatedPairs[tokenAddress].owner;\\n\\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n        IERC20(_pair).approve(routerAddress, type(uint256).max);\\n        uint256 _lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        // enable transfer and allow router to exceed tx limit to remove liquidity\\n        ITokenCutter(tokenAddress).cancelToken();\\n        router.removeLiquidityETH(\\n            address(tokenAddress),\\n            _lpBalance,\\n            0,\\n            0,\\n            _owner,\\n            block.timestamp\\n        );\\n\\n        // disable transfer of token\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n\\n        delete validatedPairs[tokenAddress];\\n    }\\n\\n    function proofRevenueAddress() external view returns (address) {\\n        return revenueAddress;\\n    }\\n\\n    function proofRewardPoolAddress() external view returns (address) {\\n        return rewardPoolAddress;\\n    }\\n\\n    function distributeExcessFunds() external onlyOwner {\\n        (bool sent, ) = revenueAddress.call{value: address(this).balance / 2}(\\\"\\\");\\n        require(sent, \\\"\\\");\\n        (bool sent1, ) = rewardPoolAddress.call{value: address(this).balance}(\\\"\\\");\\n        require(sent1, \\\"\\\");\\n    }\\n\\n    function setLockerAddress(address newlockerAddress) external onlyOwner {\\n        lockerAddress = newlockerAddress;\\n    }\\n\\n    function setRouterAddress(address newRouterAddress) external onlyOwner {\\n        routerAddress = payable(newRouterAddress);\\n    }\\n\\n    function setBaseNFTWhitelist(address[] memory newNFTWhitelist) external onlyOwner {\\n        baseNFTWhitelist = newNFTWhitelist;\\n    }\\n\\n    function setProofAdmin(address newProofAdmin) external onlyOwner {\\n        proofAdmin = newProofAdmin;\\n    }\\n\\n    function setRevenueAddress(address newRevenueAddress) external onlyOwner {\\n        revenueAddress = payable(newRevenueAddress);\\n    }\\n\\n    function setRewardPoolAddress(\\n        address newRewardPoolAddress\\n    ) external onlyOwner {\\n        rewardPoolAddress = payable(newRewardPoolAddress);\\n    }\\n\\n    function _checkTokenStatus(address tokenAddress) internal view {\\n        require(validatedPairs[tokenAddress].owner == msg.sender, \\\"!owner\\\");\\n        require(validatedPairs[tokenAddress].status == false, \\\"validated\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/tokenCutters/ProofReflectionTokenCutter.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\nimport \\\"../libraries/Context.sol\\\";\\r\\nimport \\\"../libraries/ProofReflectionFactoryFees.sol\\\";\\r\\nimport \\\"../interfaces/IFACTORY.sol\\\";\\r\\nimport \\\"../interfaces/IDividendDistributor.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../interfaces/IProofReflectionTokenCutter.sol\\\";\\r\\n\\r\\ncontract ProofReflectionTokenCutter is Context, IProofReflectionTokenCutter {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    //This token was created with PROOF, and audited by Solidity Finance \u2014 https://proofplatform.io/projects\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n\\r\\n    uint256 private _tTotal;\\r\\n    uint256 private _rTotal;\\r\\n    uint256 private _tFeeTotal;\\r\\n    uint256 public swapThreshold;\\r\\n    uint256 public whitelistEndTime;\\r\\n    uint256 public whitelistPeriod;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private constant _decimals = 9;\\r\\n\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n    address public proofAdmin;\\r\\n\\r\\n    mapping(address => bool) public userWhitelist;\\r\\n    address[] public nftWhitelist;\\r\\n    bool public whitelistMode = true;\\r\\n\\r\\n    mapping(address => bool) public isFeeExempt;\\r\\n    mapping (address => bool) private _isExcluded;\\r\\n    mapping(address => bool) public isTxLimitExempt;\\r\\n\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 public launchedAt;\\r\\n\\r\\n    uint256 public reflectionFee;\\r\\n    uint256 public lpFee;\\r\\n    uint256 public devFee;\\r\\n\\r\\n    uint256 public reflectionFeeOnSell;\\r\\n    uint256 public lpFeeOnSell;\\r\\n    uint256 public devFeeOnSell;\\r\\n\\r\\n    uint256 public totalFee;\\r\\n    uint256 public totalFeeIfSelling;\\r\\n\\r\\n    uint256 private txnCurrentTaxFee = 0;\\r\\n    uint256 private txnCurrentReflectionFee = 0;\\r\\n\\r\\n    uint256 public revenueFee = 2;\\r\\n\\r\\n    IUniswapV2Router02 public router;\\r\\n    address public pair;\\r\\n    address public factory;\\r\\n    address public tokenOwner;\\r\\n    address payable public devWallet;\\r\\n\\r\\n    bool public inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n    bool public tradingStatus = true;\\r\\n\\r\\n    uint256 public _maxTxAmount;\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyProofAdmin() {\\r\\n        require(\\r\\n            proofAdmin == _msgSender(),\\r\\n            \\\"Ownable: caller is not the proofAdmin\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(tokenOwner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFactory() {\\r\\n        require(factory == _msgSender(), \\\"Ownable: caller is not the factory\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function setBasicData(\\r\\n        BaseData memory _baseData,\\r\\n        ProofReflectionFactoryFees.allFees memory fees\\r\\n    ) external onlyFactory {\\r\\n        _name = _baseData.tokenName;\\r\\n        _symbol = _baseData.tokenSymbol;\\r\\n        _tTotal += _baseData.initialSupply;\\r\\n        _rTotal = (MAX - (MAX % _tTotal));\\r\\n        swapThreshold = (_baseData.initialSupply * 5) / 4000;\\r\\n\\r\\n        //Initial supply\\r\\n        require(_baseData.percentToLP >= 70, \\\"low lp percent\\\");\\r\\n        uint256 forLP = (_baseData.initialSupply * _baseData.percentToLP) / 100; //95%\\r\\n        uint256 forOwner = _baseData.initialSupply - forLP; //5%\\r\\n\\r\\n        _maxTxAmount = (_baseData.initialSupply * 1) / 100;\\r\\n\\r\\n        router = IUniswapV2Router02(_baseData.routerAddress);\\r\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\r\\n            router.WETH(),\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        _allowances[address(this)][address(router)] = MAX;\\r\\n\\r\\n        isFeeExempt[address(this)] = true;\\r\\n        isFeeExempt[factory] = true;\\r\\n\\r\\n        userWhitelist[address(this)] = true;\\r\\n        userWhitelist[factory] = true;\\r\\n        userWhitelist[pair] = true;\\r\\n        userWhitelist[_baseData.owner] = true;\\r\\n        userWhitelist[_baseData.initialProofAdmin] = true;\\r\\n        userWhitelist[_baseData.routerAddress] = true;\\r\\n        _addWhitelist(_baseData.whitelists);\\r\\n        nftWhitelist = _baseData.nftWhitelist;\\r\\n\\r\\n        isTxLimitExempt[address(this)] = true;\\r\\n        isTxLimitExempt[_baseData.owner] = true;\\r\\n        isTxLimitExempt[pair] = true;\\r\\n        isTxLimitExempt[factory] = true;\\r\\n        isTxLimitExempt[DEAD] = true;\\r\\n        isTxLimitExempt[ZERO] = true;\\r\\n\\r\\n        _isExcluded[pair] = true;\\r\\n        \\r\\n\\r\\n        whitelistPeriod = _baseData.whitelistPeriod;\\r\\n        reflectionFee = fees.reflectionFee;\\r\\n        lpFee = fees.lpFee;\\r\\n        devFee = fees.devFee;\\r\\n\\r\\n        reflectionFeeOnSell = fees.reflectionFeeOnSell;\\r\\n        lpFeeOnSell = fees.lpFeeOnSell;\\r\\n        devFeeOnSell = fees.devFeeOnSell;\\r\\n\\r\\n        totalFee = devFee + lpFee + revenueFee;\\t\\r\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\r\\n\\r\\n        require(totalFee + reflectionFee <= 12, \\\"Too high fee\\\");\\r\\n        require(totalFeeIfSelling + reflectionFeeOnSell <= 17, \\\"Too high fee\\\");\\r\\n\\r\\n        tokenOwner = _baseData.owner;\\r\\n        devWallet = payable(_baseData.devWallet);\\r\\n        proofAdmin = _baseData.initialProofAdmin;\\r\\n\\r\\n        _rOwned[address(0)] += _rTotal;\\r\\n\\r\\n        _transferStandard(address(0), _msgSender(), forLP);\\r\\n        _transferStandard(address(0), _baseData.owner, forOwner);\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), forLP);\\r\\n        emit Transfer(address(0), _baseData.owner, forOwner);\\r\\n    }\\r\\n\\r\\n    //proofAdmin functions\\r\\n    function updateProofAdmin(address newAdmin) public virtual onlyProofAdmin {\\r\\n        proofAdmin = newAdmin;\\r\\n        userWhitelist[newAdmin] = true;\\r\\n    }\\r\\n\\r\\n    function updateWhitelistPeriod(\\r\\n        uint256 _whitelistPeriod\\r\\n    ) external onlyProofAdmin {\\r\\n        whitelistPeriod = _whitelistPeriod;\\r\\n        whitelistEndTime = launchedAt + (60 * _whitelistPeriod);\\r\\n        whitelistMode = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Factory functions\\r\\n    function swapTradingStatus() public onlyFactory {\\r\\n        tradingStatus = !tradingStatus;\\r\\n    }\\r\\n\\r\\n    function setLaunchedAt() external onlyFactory {\\r\\n        require(launchedAt == 0, \\\"already launched\\\");\\r\\n        launchedAt = block.timestamp;\\r\\n        whitelistEndTime = block.timestamp + (60 * whitelistPeriod);\\r\\n        whitelistMode = true;\\r\\n    }\\r\\n\\r\\n    function cancelToken() public onlyFactory {\\r\\n        isFeeExempt[address(router)] = true;\\r\\n        isTxLimitExempt[address(router)] = true;\\r\\n        isTxLimitExempt[tokenOwner] = true;\\r\\n        tradingStatus = true;\\r\\n        swapAndLiquifyEnabled = false;\\r\\n    }\\r\\n\\r\\n    function changeFees(\\r\\n        uint256 initialReflectionFee,\\r\\n        uint256 initialReflectionFeeOnSell,\\r\\n        uint256 initialLpFee,\\r\\n        uint256 initialLpFeeOnSell,\\r\\n        uint256 initialDevFee,\\r\\n        uint256 initialDevFeeOnSell\\r\\n    ) external onlyOwner {\\r\\n        reflectionFee = initialReflectionFee;\\r\\n        lpFee = initialLpFee;\\r\\n        devFee = initialDevFee;\\r\\n\\r\\n        reflectionFeeOnSell = initialReflectionFeeOnSell;\\r\\n        lpFeeOnSell = initialLpFeeOnSell;\\r\\n        devFeeOnSell = initialDevFeeOnSell;\\r\\n\\r\\n        totalFee = devFee + lpFee + revenueFee;\\t\\r\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\r\\n\\r\\n        require(totalFee + reflectionFee <= 12, \\\"Too high fee\\\");\\r\\n        require(totalFeeIfSelling + reflectionFeeOnSell <= 17, \\\"Too high fee\\\");\\r\\n    }\\r\\n\\r\\n    function reduceProofFee() external onlyOwner {\\r\\n        require(revenueFee == 2, \\\"!already reduced\\\");\\r\\n        require(launchedAt != 0, \\\"!launched\\\");\\r\\n        require(block.timestamp >= launchedAt + 72 hours, \\\"too soon\\\");\\r\\n\\r\\n        revenueFee = 1;\\r\\n        totalFee = devFee + lpFee + revenueFee;\\t\\r\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\r\\n    }\\r\\n\\r\\n    function adjustProofFee(uint256 _proofFee) external onlyProofAdmin {\\r\\n        require(launchedAt != 0, \\\"!launched\\\");\\r\\n        if (block.timestamp >= launchedAt + 72 hours) {\\r\\n            require(_proofFee <= 1);\\r\\n            revenueFee = _proofFee;\\r\\n            totalFee = devFee + lpFee + revenueFee;\\r\\n            totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\r\\n        } else {\\r\\n            require(_proofFee <= 2);\\r\\n            revenueFee = _proofFee;\\r\\n            totalFee = devFee + lpFee + revenueFee;\\r\\n            totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\\r\\n        require(launchedAt != 0, \\\"!launched\\\");\\r\\n        require(newLimit >= (_tTotal * 5) / 1000, \\\"Min 0.5% limit\\\");\\t\\r\\n        require(newLimit <= (_tTotal * 3) / 100, \\\"Max 3% limit\\\");\\r\\n        _maxTxAmount = newLimit;\\r\\n    }\\r\\n\\r\\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isFeeExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function changeIsTxLimitExempt(\\r\\n        address holder,\\r\\n        bool exempt\\r\\n    ) external onlyOwner {\\r\\n        isTxLimitExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\\r\\n        devWallet = payable(newDevWallet);\\r\\n    }\\r\\n\\r\\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\\t\\r\\n        tokenOwner = newOwnerWallet;\\t\\r\\n    }\\r\\n\\r\\n    function changeSwapBackSettings(\\r\\n        bool enableSwapBack,\\r\\n        uint256 newSwapBackLimit\\r\\n    ) external onlyOwner {\\r\\n        swapAndLiquifyEnabled = enableSwapBack;\\r\\n        swapThreshold = newSwapBackLimit;\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(\\r\\n        uint256 rAmount\\r\\n    ) private view returns (uint256) {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount / currentRate;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        require(\\r\\n            _allowances[sender][_msgSender()] >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()] - amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(\\r\\n            amount <= _maxTxAmount ||\\r\\n                (isTxLimitExempt[sender] && isTxLimitExempt[recipient]),\\r\\n            \\\"Max TX Amount\\\"\\r\\n        );\\r\\n        \\r\\n        if(whitelistMode) {\\r\\n            if (block.timestamp >= whitelistEndTime ) {\\r\\n                whitelistMode = false;\\r\\n            } else {\\r\\n                if (sender == pair) { //buy\\r\\n                    require(isWhitelisted(recipient) || holdsSupportedNFT(recipient), \\\"Not whitelisted\\\");\\r\\n                } else if (recipient == pair) { //sell\\r\\n                    require(isWhitelisted(sender) || holdsSupportedNFT(sender), \\\"Not whitelisted\\\");\\r\\n                } else { //transfer\\r\\n                    require((isWhitelisted(sender) || holdsSupportedNFT(sender)) && (isWhitelisted(recipient) || holdsSupportedNFT(recipient)), \\\"Not Whitelisted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            sender != tokenOwner &&\\r\\n            recipient != tokenOwner &&\\r\\n            !isTxLimitExempt[recipient]\\r\\n        ) {\\r\\n\\r\\n            if (\\r\\n                sender == pair &&    //buy\\r\\n                recipient != address(router) &&\\r\\n                !isFeeExempt[recipient]\\r\\n            ) {\\r\\n                require(tradingStatus, \\\"!trading\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            sender != pair &&\\r\\n            tradingStatus &&\\r\\n            swapAndLiquifyEnabled &&\\r\\n            balanceOf(address(this)) >= swapThreshold\\r\\n        ) {\\r\\n            swapTokensForEth();\\r\\n        }\\r\\n\\r\\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\\r\\n            txnCurrentTaxFee = 0;\\r\\n            txnCurrentReflectionFee = 0;\\r\\n        } else if (recipient == pair) {\\r\\n            txnCurrentTaxFee = totalFeeIfSelling;\\r\\n            txnCurrentReflectionFee = reflectionFeeOnSell;\\r\\n        } else if (sender == pair) {\\r\\n            txnCurrentTaxFee = totalFee;\\r\\n            txnCurrentReflectionFee = reflectionFee;\\r\\n        } else {\\r\\n            txnCurrentTaxFee = 0;\\r\\n            txnCurrentReflectionFee = 0;\\r\\n        }\\r\\n\\r\\n\\r\\n        _tokenTransfer(sender,recipient,amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\\r\\n\\r\\n        \\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tDev\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\r\\n        _takeDev(tDev);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);           \\r\\n        _takeDev(tDev);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);   \\r\\n        _takeDev(tDev);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);        \\r\\n        _takeDev(tDev);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _takeDev(uint256 tDev) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rDev = tDev * currentRate;\\r\\n        _rOwned[address(this)] = _rOwned[address(this)] + rDev;\\r\\n        if(_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)] + (tDev);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal - rFee;\\r\\n        _tFeeTotal = _tFeeTotal + tFee;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function isWhitelisted(address user) public view returns (bool) {\\r\\n        return userWhitelist[user];\\r\\n    }\\r\\n    function holdsSupportedNFT(address user) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < nftWhitelist.length; i++) {\\r\\n            if (IERC721(nftWhitelist[i]).balanceOf(user) > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\r\\n    {\\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getTValues(\\r\\n            tAmount,\\r\\n            txnCurrentReflectionFee,\\r\\n            txnCurrentTaxFee\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tDev,\\r\\n            currentRate\\r\\n        );\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tDev);\\r\\n    }\\r\\n\\r\\n    function _getTValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 _taxFee,\\r\\n        uint256 _devFee\\r\\n    ) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 tFee = (tAmount * _taxFee) / 100;\\r\\n        uint256 tDev = (tAmount * _devFee) / 100;\\r\\n        uint256 tTransferAmount = tAmount - tFee - tDev;\\r\\n        return (tTransferAmount, tFee, tDev);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply / (tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply - (_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply - (_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tDev,\\r\\n        uint256 currentRate\\r\\n    ) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 rAmount = tAmount * currentRate;\\r\\n        uint256 rFee = tFee * currentRate;\\r\\n        uint256 rDev = tDev * currentRate;\\r\\n        uint256 rTransferAmount = rAmount - rFee - rDev;\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth() private lockTheSwap {\\r\\n        uint256 tokensToLiquify = swapThreshold;\\r\\n\\r\\n        uint256 amountToLiquify = (tokensToLiquify * lpFee) / totalFee / 2;\\r\\n        uint256 amountToSwap = tokensToLiquify - amountToLiquify;\\r\\n        if (amountToSwap == 0) return;\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        _approve(address(this), address(router), tokensToLiquify);\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance;    \\r\\n        uint256 amountEthLiquidity = (amountETH * lpFee) / totalFee / 2;\\r\\n\\r\\n        if (amountToLiquify > 0) {\\r\\n            router.addLiquidityETH{value: amountEthLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                0x000000000000000000000000000000000000dEaD,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amountETHafterLP = address(this).balance;\\r\\n\\r\\n\\r\\n        uint256 revenueBalance = (amountETHafterLP * revenueFee) / totalFee;\\r\\n        uint256 devBalance = amountETHafterLP - revenueBalance;\\r\\n\\r\\n        if (amountETH > 0) {\\r\\n            if (revenueBalance > 0) {\\r\\n                uint256 revenueSplit = revenueBalance / 2;\\r\\n                (bool sent, ) = payable(IFACTORY(factory).proofRevenueAddress()).call{value: revenueSplit}(\\\"\\\");\\r\\n                require(sent);\\r\\n                (bool sent1, ) = payable(IFACTORY(factory).proofRewardPoolAddress()).call{value: revenueSplit}(\\\"\\\");\\r\\n                require(sent1);\\r\\n            }\\r\\n            if (devBalance > 0) {\\r\\n                (bool sent, ) = devWallet.call{value: devBalance}(\\\"\\\");\\r\\n                require(sent, \\\"ETH transfer failed\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addWhitelist(address[] memory _whitelists) internal {\\r\\n        uint256 length = _whitelists.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            userWhitelist[_whitelists[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addMoreToWhitelist(WhitelistAdd_ memory _WhitelistAdd) external onlyFactory {\\r\\n        _addWhitelist(_WhitelistAdd.whitelists);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLockerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRewardPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRevenueAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftWhitelist\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct ProofReflectionFactory.WhitelistAdd_\",\"name\":\"_WhitelistAdd\",\"type\":\"tuple\"}],\"name\":\"addmoreWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseNFTWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whitelistPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct ProofReflectionFactory.TokenParam\",\"name\":\"tokenParam_\",\"type\":\"tuple\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeExcessFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"finalizeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRevenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newNFTWhitelist\",\"type\":\"address[]\"}],\"name\":\"setBaseNFTWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlockerAddress\",\"type\":\"address\"}],\"name\":\"setLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProofAdmin\",\"type\":\"address\"}],\"name\":\"setProofAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRevenueAddress\",\"type\":\"address\"}],\"name\":\"setRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatedPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProofReflectionFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000e2fe530c047f2d85298b07d9333c05737f1435fb000000000000000000000000cf170d0b07a54844b471cbbe74d2af254245ab54000000000000000000000000e9b4d32f829951a3ce145d2caa84cf66af56ca5e00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}