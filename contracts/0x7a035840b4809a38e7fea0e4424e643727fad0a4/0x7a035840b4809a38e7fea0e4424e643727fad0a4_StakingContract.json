{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract StakingContract is Ownable {\r\n    IERC20 public borat;\r\n    uint256 public totalStakedAmount;\r\n    uint256 public totalStakingScore;\r\n    uint256 public stakingFee = 1; // 1%\r\n    uint256 public unstakeCooldown = 1 days;\r\n\r\n    mapping(address => uint256) public stakedAmount;\r\n    mapping(address => uint256) public requestedUnstakeAmount;\r\n    mapping(address => uint256) public lastStakeTime;\r\n    mapping(address => uint256) public lastUnstakeRequestTime;\r\n    address[] public stakers;\r\n\r\n    event Stake(address indexed user, uint256 amount);\r\n    event RequestUnstake(address indexed user, uint256 amount);\r\n    event CompleteUnstake(address indexed user, uint256 amount);\r\n\r\n    constructor(IERC20 _borat) {\r\n        borat = _borat;\r\n    }\r\n\r\n    modifier onlyStaker() {\r\n        require(stakedAmount[msg.sender] > 0, \"Must be staker\");\r\n        _;\r\n    }\r\n\r\n    function updateUnstakeCooldown(uint256 _unstakeCooldown) external onlyOwner {\r\n        unstakeCooldown = _unstakeCooldown;\r\n    }\r\n\r\n    function updateStakingFee(uint256 _stakingFee) external onlyOwner {\r\n        require(_stakingFee <= 100, \"Invalid staking fee\");\r\n        stakingFee = _stakingFee;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(_amount > 0, \"Cannot stake 0 tokens\");\r\n\r\n        uint256 fee = (_amount * stakingFee) / 100;\r\n        uint256 amountAfterFee = _amount - fee;\r\n\r\n        // Transfer BORAT tokens to this contract\r\n        borat.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Burn the staking fee\r\n        borat.transfer(address(0), fee);\r\n\r\n        // Update the staking score and total staked amount\r\n        totalStakingScore -= stakingScore(msg.sender);\r\n        stakedAmount[msg.sender] += amountAfterFee;\r\n        totalStakedAmount += amountAfterFee;\r\n        totalStakingScore += stakingScore(msg.sender);\r\n\r\n        // Update the last stake time\r\n        lastStakeTime[msg.sender] = block.timestamp;\r\n\r\n        // Add the user to the stakers array if they are not already in it\r\n        if (stakedAmount[msg.sender] == amountAfterFee) {\r\n            stakers.push(msg.sender);\r\n        }\r\n\r\n        emit Stake(msg.sender, amountAfterFee);\r\n    }\r\n\r\n    function requestUnstake(uint256 _amount) external onlyStaker {\r\n        require(_amount > 0, \"Cannot request unstake of 0 tokens\");\r\n        require(stakedAmount[msg.sender] >= _amount, \"Not enough tokens staked\");\r\n        require(requestedUnstakeAmount[msg.sender] == 0, \"Cannot request more tokens to unstake while there are tokens in cooldown\");\r\n\r\n        // Update the staking score and total staked amount\r\n        totalStakingScore -= stakingScore(msg.sender);\r\n        stakedAmount[msg.sender] -= _amount;\r\n        totalStakedAmount -= _amount;\r\n        totalStakingScore += stakingScore(msg.sender);\r\n\r\n        requestedUnstakeAmount[msg.sender] += _amount;\r\n        if (requestedUnstakeAmount[msg.sender] == _amount) {\r\n            lastUnstakeRequestTime[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        emit RequestUnstake(msg.sender, _amount);\r\n    }\r\n\r\n    function completeUnstake() external {\r\n        require(requestedUnstakeAmount[msg.sender] > 0, \"No unstake request found\");\r\n        require(block.timestamp >= lastUnstakeRequestTime[msg.sender] + unstakeCooldown, \"Unstake cooldown not yet finished\");\r\n\r\n        uint256 amount = requestedUnstakeAmount[msg.sender];\r\n        requestedUnstakeAmount[msg.sender] = 0;\r\n\r\n        borat.transfer(msg.sender, amount);\r\n\r\n        emit CompleteUnstake(msg.sender, amount);\r\n    }\r\n\r\n    function stakingScore(address _user) public view returns (uint256) {\r\n        return stakedAmount[_user] * (block.timestamp - lastStakeTime[_user]);\r\n    }\r\n\r\n    function airdropPercentage(address _user) public view returns (uint256) {\r\n        if (totalStakingScore == 0) {\r\n            return 0;\r\n        }\r\n        return (stakingScore(_user) * 1000) / totalStakingScore;\r\n    }\r\n\r\n    function tokensInCooldown(address _user) public view returns (uint256) {\r\n        return requestedUnstakeAmount[_user];\r\n    }\r\n\r\n    function timeUntilUnstakeComplete(address _user) public view returns (uint256) {\r\n        uint256 cooldownEnd = lastUnstakeRequestTime[_user] + unstakeCooldown;\r\n        if (block.timestamp >= cooldownEnd) {\r\n            return 0;\r\n        } else {\r\n            return cooldownEnd - block.timestamp;\r\n        }\r\n    }\r\n\r\n    function returnStakedTokensToHolders() external onlyOwner {\r\n        for (uint i = 0; i < stakers.length; i++) {\r\n            address staker = stakers[i];\r\n            uint256 amount = stakedAmount[staker];\r\n            stakedAmount[staker] = 0;\r\n            totalStakedAmount -= amount;\r\n            borat.transfer(staker, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_borat\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompleteUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"airdropPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borat\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUnstakeRequestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestedUnstakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnStakedTokensToHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakingScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"timeUntilUnstakeComplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokensInCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"}],\"name\":\"updateStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeCooldown\",\"type\":\"uint256\"}],\"name\":\"updateUnstakeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007e32d29b3223c308826b985f27f7f4b6e0e31a03", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3cd623f8f27244d2b103d95daf2b1366f30c3db987cfebfd78413a2a9e07a7db"}