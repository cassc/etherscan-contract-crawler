{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KaijuMartEtherPurchaseProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IKaijuMartExtended.sol\\\";\\nimport \\\"./interfaces/IKaijuMartRedeemable.sol\\\";\\n\\nerror KaijuMartEtherPaymentProcessor_InsufficientPermissions();\\nerror KaijuMartEtherPaymentProcessor_InvalidLotState();\\nerror KaijuMartEtherPaymentProcessor_InvalidValue();\\nerror KaijuMartEtherPaymentProcessor_MustBeAKing();\\nerror KaijuMartEtherPaymentProcessor_WithdrawFailed();\\n\\n/**\\n                        .             :++-\\n                       *##-          +####*          -##+\\n                       *####-      :%######%.      -%###*\\n                       *######:   =##########=   .######*\\n                       *#######*-#############*-*#######*\\n                       *################################*\\n                       *################################*\\n                       *################################*\\n                       *################################*\\n                       *################################*\\n                       :*******************************+.\\n\\n                .:.\\n               *###%*=:\\n              .##########+-.\\n              +###############=:\\n              %##################%+\\n             =######################\\n             -######################++++++++++++++++++=-:\\n              =###########################################*:\\n               =#############################################.\\n  +####%#*+=-:. -#############################################:\\n  %############################################################=\\n  %##############################################################\\n  %##############################################################%=----::.\\n  %#######################################################################%:\\n  %##########################################+:    :+%#######################:\\n  *########################################*          *#######################\\n   -%######################################            %######################\\n     -%###################################%            #######################\\n       =###################################-          :#######################\\n     ....+##################################*.      .+########################\\n  +###########################################%*++*%##########################\\n  %#########################################################################*.\\n  %#######################################################################+\\n  ########################################################################-\\n  *#######################################################################-\\n  .######################################################################%.\\n     :+#################################################################-\\n         :=#####################################################:.....\\n             :--:.:##############################################+\\n   ::             +###############################################%-\\n  ####%+-.        %##################################################.\\n  %#######%*-.   :###################################################%\\n  %###########%*=*####################################################=\\n  %####################################################################\\n  %####################################################################+\\n  %#####################################################################.\\n  %#####################################################################%\\n  %######################################################################-\\n  .+*********************************************************************.\\n * @title KaijuMartEtherPurchaseProcessor\\n * @notice Create ether payment processors for KMart lots\\n * @author Augminted Labs, LLC\\n */\\ncontract KaijuMartEtherPurchaseProcessor {\\n    IKaijuMartExtended public immutable KMART;\\n\\n    event Purchase(\\n        uint256 indexed id,\\n        address indexed account,\\n        uint64 amount\\n    );\\n\\n    struct Processor {\\n        uint104 price;\\n        bool enabled;\\n        bool isRedeemable;\\n        bool requiresKing;\\n        bool requiresSignature;\\n    }\\n\\n    IDoorbusterManager public doorbusterManager;\\n    mapping(uint256 => Processor) public lotProcessors;\\n\\n    constructor(IKaijuMartExtended kmart) {\\n        KMART = kmart;\\n        doorbusterManager = KMART.managerContracts().doorbuster;\\n    }\\n\\n    /**\\n     * @notice Requires sender to have a KMart admin role\\n     */\\n    modifier onlyKMartAdmin() {\\n        if (!KMART.hasRole(bytes32(0), msg.sender))\\n            revert KaijuMartEtherPaymentProcessor_InsufficientPermissions();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Refresh the state of the KMart doorbuster manager contract\\n     */\\n    function refreshDoorbusterManager() public payable onlyKMartAdmin {\\n        doorbusterManager = KMART.managerContracts().doorbuster;\\n    }\\n\\n    /**\\n     * @notice Set a lot payment processor\\n     * @param _lotId Lot to set a payment processor for\\n     * @param _processor Payment processor for a specified lot\\n     */\\n    function setLotProcessor(\\n        uint256 _lotId,\\n        Processor calldata _processor\\n    )\\n        public\\n        payable\\n        onlyKMartAdmin\\n    {\\n        IKaijuMartExtended.Lot memory lot = KMART.lots(_lotId);\\n\\n        if (uint8(lot.lotType) == 0) revert KaijuMartEtherPaymentProcessor_InvalidLotState();\\n\\n        lotProcessors[_lotId] = _processor;\\n        lotProcessors[_lotId].isRedeemable = address(lot.redeemer) != address(0);\\n    }\\n\\n    /**\\n     * @notice Purchase from a KMart doorbuster lot with ETH\\n     * @param _lotId Lot to purchase from\\n     * @param _amount Quantity to purchase\\n     */\\n    function purchase(uint256 _lotId, uint32 _amount) public payable {\\n        Processor memory processor = lotProcessors[_lotId];\\n\\n        if (!processor.enabled || processor.requiresSignature) revert KaijuMartEtherPaymentProcessor_InvalidLotState();\\n        if (msg.value != processor.price * _amount) revert KaijuMartEtherPaymentProcessor_InvalidValue();\\n        if (processor.requiresKing && !KMART.isKing(msg.sender)) revert KaijuMartEtherPaymentProcessor_MustBeAKing();\\n\\n        doorbusterManager.purchase(_lotId, _amount);\\n\\n        if (processor.isRedeemable)\\n            KMART.lots(_lotId).redeemer.kmartRedeem(_lotId, _amount, msg.sender);\\n\\n        emit Purchase(_lotId, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Purchase from a KMart doorbuster lot with ETH\\n     * @param _lotId Lot to purchase from\\n     * @param _amount Quantity to purchase\\n     * @param _nonce Single use number encoded into signature\\n     * @param _signature Signature created by the doorbuster contract's `signer` account\\n     */\\n    function purchase(\\n        uint256 _lotId,\\n        uint32 _amount,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    )\\n        public\\n        payable\\n    {\\n        Processor memory processor = lotProcessors[_lotId];\\n\\n        if (!processor.enabled || !processor.requiresSignature) revert KaijuMartEtherPaymentProcessor_InvalidLotState();\\n        if (msg.value != processor.price * _amount) revert KaijuMartEtherPaymentProcessor_InvalidValue();\\n        if (processor.requiresKing && !KMART.isKing(msg.sender)) revert KaijuMartEtherPaymentProcessor_MustBeAKing();\\n\\n        doorbusterManager.purchase(_lotId, _amount, _nonce, _signature);\\n\\n        if (processor.isRedeemable)\\n            KMART.lots(_lotId).redeemer.kmartRedeem(_lotId, _amount, msg.sender);\\n\\n        emit Purchase(_lotId, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Send all ETH in the contract to a specified receiver\\n     * @param _receiver Address to receive all the ETH in the contract\\n     */\\n    function withdraw(address _receiver) public payable onlyKMartAdmin {\\n        (bool success, ) = _receiver.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) revert KaijuMartEtherPaymentProcessor_WithdrawFailed();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKaijuMartExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport \\\"./IKaijuMart.sol\\\";\\n\\ninterface IKaijuMartExtended is IKaijuMart, IAccessControl {\\n    function managerContracts() external view returns (ManagerContracts memory);\\n    function lots(uint256 lotId) external view returns (Lot memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKaijuMartRedeemable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ninterface IKaijuMartRedeemable is IERC165 {\\n    function kmartRedeem(uint256 lotId, uint32 amount, address to) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKaijuMart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IKingzInTheShell.sol\\\";\\nimport \\\"./IMutants.sol\\\";\\nimport \\\"./IScientists.sol\\\";\\nimport \\\"./IScales.sol\\\";\\nimport \\\"./IRWaste.sol\\\";\\nimport \\\"./IKaijuMartRedeemable.sol\\\";\\nimport \\\"./IAuctionManager.sol\\\";\\nimport \\\"./IDoorbusterManager.sol\\\";\\nimport \\\"./IRaffleManager.sol\\\";\\nimport \\\"./IKaijuMart.sol\\\";\\n\\ninterface IKaijuMart {\\n    enum LotType {\\n        NONE,\\n        AUCTION,\\n        RAFFLE,\\n        DOORBUSTER\\n    }\\n\\n    enum PaymentToken {\\n        RWASTE,\\n        SCALES,\\n        EITHER\\n    }\\n\\n    struct Lot {\\n        uint104 rwastePrice;\\n        uint104 scalesPrice;\\n        LotType lotType;\\n        PaymentToken paymentToken;\\n        IKaijuMartRedeemable redeemer;\\n    }\\n\\n    struct CreateLot {\\n        PaymentToken paymentToken;\\n        IKaijuMartRedeemable redeemer;\\n    }\\n\\n    struct KaijuContracts {\\n        IKingzInTheShell kaiju;\\n        IMutants mutants;\\n        IScientists scientists;\\n        IRWaste rwaste;\\n        IScales scales;\\n    }\\n\\n    struct ManagerContracts {\\n        IAuctionManager auction;\\n        IDoorbusterManager doorbuster;\\n        IRaffleManager raffle;\\n    }\\n\\n    event Create(\\n        uint256 indexed id,\\n        LotType indexed lotType,\\n        address indexed managerContract\\n    );\\n\\n    event Bid(\\n        uint256 indexed id,\\n        address indexed account,\\n        uint104 value\\n    );\\n\\n    event Redeem(\\n        uint256 indexed id,\\n        uint32 indexed amount,\\n        address indexed to,\\n        IKaijuMartRedeemable redeemer\\n    );\\n\\n    event Refund(\\n        uint256 indexed id,\\n        address indexed account,\\n        uint104 value\\n    );\\n\\n    event Purchase(\\n        uint256 indexed id,\\n        address indexed account,\\n        uint64 amount\\n    );\\n\\n    event Enter(\\n        uint256 indexed id,\\n        address indexed account,\\n        uint64 amount\\n    );\\n\\n    // \ud83e\udd96\ud83d\udc51\ud83d\udc76\ud83e\uddec\ud83d\udc68\u200d\ud83d\udd2c\ud83d\udc69\u200d\ud83d\udd2c\ud83e\uddea\\n\\n    function isKing(address account) external view returns (bool);\\n\\n    // \ud83d\udcbb\ud83d\udcbb\ud83d\udcbb\ud83d\udcbb\ud83d\udcbb ADMIN FUNCTIONS \ud83d\udcbb\ud83d\udcbb\ud83d\udcbb\ud83d\udcbb\ud83d\udcbb\\n\\n    function setKaijuContracts(KaijuContracts calldata _kaijuContracts) external;\\n\\n    function setManagerContracts(ManagerContracts calldata _managerContracts) external;\\n\\n    // \ud83d\udce3\ud83d\udce3\ud83d\udce3\ud83d\udce3\ud83d\udce3 AUCTION FUNCTIONS \ud83d\udce3\ud83d\udce3\ud83d\udce3\ud83d\udce3\ud83d\udce3\\n\\n    function getAuction(uint256 auctionId) external view returns (IAuctionManager.Auction memory);\\n\\n    function getBid(uint256 auctionId, address account) external view returns (uint104);\\n\\n    function createAuction(\\n        uint256 lotId,\\n        CreateLot calldata lot,\\n        IAuctionManager.CreateAuction calldata auction\\n    ) external;\\n\\n    function close(\\n        uint256 auctionId,\\n        uint104 lowestWinningBid,\\n        address[] calldata tiebrokenWinners\\n    ) external;\\n\\n    function bid(uint256 auctionId, uint104 value) external;\\n\\n    function refund(uint256 auctionId) external;\\n\\n    function redeem(uint256 auctionId) external;\\n\\n    // \ud83c\udf9f\ud83c\udf9f\ud83c\udf9f\ud83c\udf9f\ud83c\udf9f RAFFLE FUNCTIONS \ud83c\udf9f\ud83c\udf9f\ud83c\udf9f\ud83c\udf9f\ud83c\udf9f\\n\\n    function getRaffle(uint256 raffleId) external view returns (IRaffleManager.Raffle memory);\\n\\n    function createRaffle(\\n        uint256 lotId,\\n        CreateLot calldata lot,\\n        uint104 rwastePrice,\\n        uint104 scalesPrice,\\n        IRaffleManager.CreateRaffle calldata raffle\\n    ) external;\\n\\n    function draw(uint256 raffleId, bool vrf) external;\\n\\n    function enter(uint256 raffleId, uint32 amount, PaymentToken token) external;\\n\\n    // \ud83d\uded2\ud83d\uded2\ud83d\uded2\ud83d\uded2\ud83d\uded2 DOORBUSTER FUNCTIONS \ud83d\uded2\ud83d\uded2\ud83d\uded2\ud83d\uded2\ud83d\uded2\\n\\n    function getDoorbuster(uint256 doorbusterId) external view returns (IDoorbusterManager.Doorbuster memory);\\n\\n    function createDoorbuster(\\n        uint256 lotId,\\n        CreateLot calldata lot,\\n        uint104 rwastePrice,\\n        uint104 scalesPrice,\\n        uint32 supply\\n    ) external;\\n\\n    function purchase(\\n        uint256 doorbusterId,\\n        uint32 amount,\\n        PaymentToken token,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKingzInTheShell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IKingzInTheShell is IERC721 {\\n    function isHolder(address) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMutants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IMutants is IERC721 {}\"\r\n    },\r\n    \"contracts/interfaces/IScientists.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IScientists is IERC721 {}\"\r\n    },\r\n    \"contracts/interfaces/IScales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IScales is IERC20 {\\n    function spend(address, uint256) external;\\n    function credit(address, uint256) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRWaste.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRWaste is IERC20 {\\n    function burn(address, uint256) external;\\n    function claimLaboratoryExperimentRewards(address, uint256) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAuctionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuctionManager {\\n    struct CreateAuction {\\n        uint104 reservePrice;\\n        uint16 winners;\\n        uint64 endsAt;\\n    }\\n\\n    struct Auction {\\n        uint104 reservePrice;\\n        uint104 lowestWinningBid;\\n        uint16 winners;\\n        uint64 endsAt;\\n    }\\n\\n    function get(uint256 id) external view returns (Auction memory);\\n    function getBid(uint256 id, address sender) external view returns (uint104);\\n    function isWinner(uint256 id, address sender) external view returns (bool);\\n    function create(uint256 id, CreateAuction calldata auction) external;\\n    function close(uint256 id, uint104 lowestWinningBid, address[] calldata _tiebrokenWinners) external;\\n    function bid(uint256 id, uint104 value, address sender) external returns (uint104);\\n    function settle(uint256 id, address sender) external returns (uint104);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDoorbusterManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDoorbusterManager {\\n    struct Doorbuster {\\n        uint32 supply;\\n    }\\n\\n    function get(uint256 id) external view returns (Doorbuster memory);\\n    function create(uint256 id, uint32 supply) external;\\n    function purchase(uint256 id, uint32 amount) external;\\n    function purchase(\\n        uint256 id,\\n        uint32 amount,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRaffleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRaffleManager {\\n    struct CreateRaffle {\\n        uint64 scriptId;\\n        uint64 winners;\\n        uint64 endsAt;\\n    }\\n\\n    struct Raffle {\\n        uint256 seed;\\n        uint64 scriptId;\\n        uint64 winners;\\n        uint64 endsAt;\\n    }\\n\\n    function get(uint256 id) external view returns (Raffle memory);\\n    function isDrawn(uint256 id) external view returns (bool);\\n    function create(uint256 id, CreateRaffle calldata raffle) external;\\n    function enter(uint256 id, uint32 amount) external;\\n    function draw(uint256 id, bool vrf) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IKaijuMartExtended\",\"name\":\"kmart\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KaijuMartEtherPaymentProcessor_InsufficientPermissions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KaijuMartEtherPaymentProcessor_InvalidLotState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KaijuMartEtherPaymentProcessor_InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KaijuMartEtherPaymentProcessor_MustBeAKing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KaijuMartEtherPaymentProcessor_WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KMART\",\"outputs\":[{\"internalType\":\"contract IKaijuMartExtended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doorbusterManager\",\"outputs\":[{\"internalType\":\"contract IDoorbusterManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotProcessors\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"price\",\"type\":\"uint104\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRedeemable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresKing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresSignature\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshDoorbusterManager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint104\",\"name\":\"price\",\"type\":\"uint104\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRedeemable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresKing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresSignature\",\"type\":\"bool\"}],\"internalType\":\"struct KaijuMartEtherPurchaseProcessor.Processor\",\"name\":\"_processor\",\"type\":\"tuple\"}],\"name\":\"setLotProcessor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "KaijuMartEtherPurchaseProcessor", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000037110a9c2b1b7efed1f02d13e1200cf66c9864be", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}