{"SourceCode": "pragma solidity =0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// GNBU token main contract (2021)\r\n//\r\n// Symbol       : GNBU\r\n// Name         : Nimbus Governance Token\r\n// Total supply : 100.000.000 (burnable)\r\n// Decimals     : 18\r\n// ----------------------------------------------------------------------------\r\n// SPDX-License-Identifier: MIT\r\n// ----------------------------------------------------------------------------\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract GNBU is Ownable, Pausable {\r\n    string public constant name = \"Nimbus Governance Token\";\r\n    string public constant symbol = \"GNBU\";\r\n    uint8 public constant decimals = 18;\r\n    uint96 public totalSupply = 100_000_000e18; // 100 million GNBU\r\n    mapping (address => mapping (address => uint96)) internal allowances;\r\n\r\n    mapping (address => uint96) private _unfrozenBalances;\r\n    mapping (address => uint32) private _vestingNonces;\r\n    mapping (address => mapping (uint32 => uint96)) private _vestingAmounts;\r\n    mapping (address => mapping (uint32 => uint96)) private _unvestedAmounts;\r\n    mapping (address => mapping (uint32 => uint)) private _vestingReleaseStartDates;\r\n    mapping (address => bool) public vesters;\r\n\r\n    uint96 private vestingFirstPeriod = 60 days;\r\n    uint96 private vestingSecondPeriod = 152 days;\r\n\r\n    address[] public supportUnits;\r\n    uint public supportUnitsCnt;\r\n\r\n    mapping (address => address) public delegates;\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    mapping (address => uint) public nonces;\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Unvest(address user, uint amount);\r\n\r\n    constructor() {\r\n        _unfrozenBalances[owner] = uint96(totalSupply);\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n    function freeCirculation() external view returns (uint) {\r\n        uint96 systemAmount = _unfrozenBalances[owner];\r\n        for (uint i; i < supportUnits.length; i++) {\r\n            systemAmount = add96(systemAmount, _unfrozenBalances[supportUnits[i]], \"GNBU::freeCirculation: adding overflow\");\r\n        }\r\n        return sub96(totalSupply, systemAmount, \"GNBU::freeCirculation: amount exceed totalSupply\");\r\n    }\r\n    \r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    function approve(address spender, uint rawAmount) external whenNotPaused returns (bool) {\r\n        uint96 amount;\r\n        if (rawAmount == uint(2 ** 256 - 1)) {\r\n            amount = uint96(2 ** 96 - 1);\r\n        } else {\r\n            amount = safe96(rawAmount, \"GNBU::approve: amount exceeds 96 bits\");\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\r\n        uint96 amount;\r\n        if (rawAmount == uint(2 ** 256 - 1)) {\r\n            amount = uint96(2 ** 96 - 1);\r\n        } else {\r\n            amount = safe96(rawAmount, \"GNBU::permit: amount exceeds 96 bits\");\r\n        }\r\n\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"GNBU::permit: invalid signature\");\r\n        require(signatory == owner, \"GNBU::permit: unauthorized\");\r\n        require(block.timestamp <= deadline, \"GNBU::permit: signature expired\");\r\n\r\n        allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n       \r\n    function balanceOf(address account) public view returns (uint) {\r\n        uint96 amount = _unfrozenBalances[account];\r\n        if (_vestingNonces[account] == 0) return amount;\r\n        for (uint32 i = 1; i <= _vestingNonces[account]; i++) {\r\n            uint96 unvested = sub96(_vestingAmounts[account][i], _unvestedAmounts[account][i], \"GNBU::balanceOf: unvested exceed vested amount\");\r\n            amount = add96(amount, unvested, \"GNBU::balanceOf: overflow\");\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function availableForUnvesting(address user) external view returns (uint unvestAmount) {\r\n        if (_vestingNonces[user] == 0) return 0;\r\n        for (uint32 i = 1; i <= _vestingNonces[user]; i++) {\r\n            if (_vestingAmounts[user][i] == _unvestedAmounts[user][i]) continue;\r\n            if (_vestingReleaseStartDates[user][i] > block.timestamp) break;\r\n            uint toUnvest = mul96((block.timestamp - _vestingReleaseStartDates[user][i]), (_vestingAmounts[user][i])) / vestingSecondPeriod;\r\n            if (toUnvest > _vestingAmounts[user][i]) {\r\n                toUnvest = _vestingAmounts[user][i];\r\n            } \r\n            toUnvest -= _unvestedAmounts[user][i];\r\n            unvestAmount += toUnvest;\r\n        }\r\n    }\r\n\r\n    function availableForTransfer(address account) external view returns (uint) {\r\n        return _unfrozenBalances[account];\r\n    }\r\n\r\n    function vestingInfo(address user, uint32 nonce) external view returns (uint vestingAmount, uint unvestedAmount, uint vestingReleaseStartDate) {\r\n        vestingAmount = _vestingAmounts[user][nonce];\r\n        unvestedAmount = _unvestedAmounts[user][nonce];\r\n        vestingReleaseStartDate = _vestingReleaseStartDates[user][nonce];\r\n    }\r\n\r\n    function vestingNonces(address user) external view returns (uint lastNonce) {\r\n        return _vestingNonces[user];\r\n    }\r\n    \r\n    function transfer(address dst, uint rawAmount) external whenNotPaused returns (bool) {\r\n        uint96 amount = safe96(rawAmount, \"GNBU::transfer: amount exceeds 96 bits\");\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint rawAmount) external whenNotPaused returns (bool) {\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(rawAmount, \"GNBU::approve: amount exceeds 96 bits\");\r\n\r\n        if (spender != src && spenderAllowance != uint96(2 ** 96 - 1)) {\r\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"GNBU::transferFrom: transfer amount exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n    \r\n    function delegate(address delegatee) public whenNotPaused {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n    \r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public whenNotPaused {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"GNBU::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"GNBU::delegateBySig: invalid nonce\");\r\n        require(block.timestamp <= expiry, \"GNBU::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    function unvest() external whenNotPaused returns (uint96 unvested) {\r\n        require (_vestingNonces[msg.sender] > 0, \"GNBU::unvest:No vested amount\");\r\n        for (uint32 i = 1; i <= _vestingNonces[msg.sender]; i++) {\r\n            if (_vestingAmounts[msg.sender][i] == _unvestedAmounts[msg.sender][i]) continue;\r\n            if (_vestingReleaseStartDates[msg.sender][i] > block.timestamp) break;\r\n            uint96 toUnvest = mul96((block.timestamp - _vestingReleaseStartDates[msg.sender][i]), _vestingAmounts[msg.sender][i]) / vestingSecondPeriod;\r\n            if (toUnvest > _vestingAmounts[msg.sender][i]) {\r\n                toUnvest = _vestingAmounts[msg.sender][i];\r\n            } \r\n            uint96 totalUnvestedForNonce = toUnvest;\r\n            toUnvest = sub96(toUnvest, _unvestedAmounts[msg.sender][i], \"GNBU::unvest: already unvested amount exceeds toUnvest\");\r\n            unvested = add96(unvested, toUnvest, \"GNBU::unvest: adding overflow\");\r\n            _unvestedAmounts[msg.sender][i] = totalUnvestedForNonce;\r\n        }\r\n        _unfrozenBalances[msg.sender] = add96(_unfrozenBalances[msg.sender], unvested, \"GNBU::unvest: adding overflow\");\r\n        emit Unvest(msg.sender, unvested);\r\n    }\r\n    \r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n    \r\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\r\n        require(blockNumber < block.number, \"GNBU::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n    \r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint96 delegatorBalance = _unfrozenBalances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint96 amount) internal {\r\n        require(src != address(0), \"GNBU::_transferTokens: cannot transfer from the zero address\");\r\n        require(dst != address(0), \"GNBU::_transferTokens: cannot transfer to the zero address\");\r\n\r\n        _unfrozenBalances[src] = sub96(_unfrozenBalances[src], amount, \"GNBU::_transferTokens: transfer amount exceeds balance\");\r\n        _unfrozenBalances[dst] = add96(_unfrozenBalances[dst], amount, \"GNBU::_transferTokens: transfer amount overflows\");\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n    \r\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"GNBU::_moveVotes: vote amount underflows\");\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint96 dstRepNew = add96(dstRepOld, amount, \"GNBU::_moveVotes: vote amount overflows\");\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\r\n      uint32 blockNumber = safe32(block.number, \"GNBU::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n      } else {\r\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n          numCheckpoints[delegatee] = nCheckpoints + 1;\r\n      }\r\n\r\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function _vest(address user, uint96 amount) private {\r\n        uint32 nonce = ++_vestingNonces[user];\r\n        _vestingAmounts[user][nonce] = amount;\r\n        _vestingReleaseStartDates[user][nonce] = block.timestamp + vestingFirstPeriod;\r\n        _unfrozenBalances[owner] = sub96(_unfrozenBalances[owner], amount, \"GNBU::_vest: exceeds owner balance\");\r\n        emit Transfer(owner, user, amount);\r\n    }\r\n\r\n\r\n    \r\n    function burnTokens(uint rawAmount) public onlyOwner returns (bool success) {\r\n        uint96 amount = safe96(rawAmount, \"GNBU::burnTokens: amount exceeds 96 bits\");\r\n        require(amount <= _unfrozenBalances[owner]);\r\n        _unfrozenBalances[owner] = sub96(_unfrozenBalances[owner], amount, \"GNBU::burnTokens: transfer amount exceeds balance\");\r\n        totalSupply = sub96(totalSupply, amount, \"GNBU::burnTokens: transfer amount exceeds total supply\");\r\n        emit Transfer(owner, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    function vest(address user, uint rawAmount) external {\r\n        require (vesters[msg.sender], \"GNBU::vest: not vester\");\r\n        uint96 amount = safe96(rawAmount, \"GNBU::vest: amount exceeds 96 bits\");\r\n        _vest(user, amount);\r\n    }\r\n    \r\n   \r\n    function multisend(address[] memory to, uint[] memory values) public onlyOwner returns (uint) {\r\n        require(to.length == values.length);\r\n        require(to.length < 100);\r\n        uint sum;\r\n        for (uint j; j < values.length; j++) {\r\n            sum += values[j];\r\n        }\r\n        uint96 _sum = safe96(sum, \"GNBU::transfer: amount exceeds 96 bits\");\r\n        _unfrozenBalances[owner] = sub96(_unfrozenBalances[owner], _sum, \"GNBU::_transferTokens: transfer amount exceeds balance\");\r\n        for (uint i; i < to.length; i++) {\r\n            _unfrozenBalances[to[i]] = add96(_unfrozenBalances[to[i]], uint96(values[i]), \"GNBU::_transferTokens: transfer amount exceeds balance\");\r\n            emit Transfer(owner, to[i], values[i]);\r\n        }\r\n        return(to.length);\r\n    }\r\n\r\n    function multivest(address[] memory to, uint[] memory values) external onlyOwner returns (uint) {\r\n        require(to.length == values.length);\r\n        require(to.length < 100);\r\n        uint sum;\r\n        for (uint j; j < values.length; j++) {\r\n            sum += values[j];\r\n        }\r\n        uint96 _sum = safe96(sum, \"GNBU::multivest: amount exceeds 96 bits\");\r\n        _unfrozenBalances[owner] = sub96(_unfrozenBalances[owner], _sum, \"GNBU::multivest: transfer amount exceeds balance\");\r\n        for (uint i; i < to.length; i++) {\r\n            uint32 nonce = ++_vestingNonces[to[i]];\r\n            _vestingAmounts[to[i]][nonce] = uint96(values[i]);\r\n            _vestingReleaseStartDates[to[i]][nonce] = block.timestamp + vestingFirstPeriod;\r\n            emit Transfer(owner, to[i], values[i]);\r\n        }\r\n        return(to.length);\r\n    }\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return IERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function updateVesters(address vester, bool isActive) external onlyOwner { \r\n        vesters[vester] = isActive;\r\n    }\r\n\r\n    function acceptOwnership() public override {\r\n        require(msg.sender == newOwner);\r\n        uint96 amount = _unfrozenBalances[owner];\r\n        _transferTokens(owner, newOwner, amount);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function updateSupportUnitAdd(address newSupportUnit) external onlyOwner {\r\n        for (uint i; i < supportUnits.length; i++) {\r\n            require (supportUnits[i] != newSupportUnit, \"GNBU::updateSupportUnitAdd: support unit exists\");\r\n        }\r\n        supportUnits.push(newSupportUnit);\r\n        supportUnitsCnt++;\r\n    }\r\n\r\n    function updateSupportUnitRemove(uint supportUnitIndex) external onlyOwner {\r\n        supportUnits[supportUnitIndex] = supportUnits[supportUnits.length - 1];\r\n        supportUnits.pop();\r\n        supportUnitsCnt--;\r\n    }\r\n    \r\n\r\n\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal view returns (uint) {\r\n        return block.chainid;\r\n    }\r\n\r\n        \r\n    function mul96(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint96 c = a * b;\r\n        require(c / a == b, \"GNBU:mul96: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function mul96(uint256 a, uint96 b) internal pure returns (uint96) {\r\n        uint96 _a = safe96(a, \"GNBU:mul96: amount exceeds uint96\");\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint96 c = _a * b;\r\n        require(c / _a == b, \"GNBU:mul96: multiplication overflow\");\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableForTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableForUnvesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multivest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportUnits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportUnitsCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unvest\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"unvested\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupportUnit\",\"type\":\"address\"}],\"name\":\"updateSupportUnitAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supportUnitIndex\",\"type\":\"uint256\"}],\"name\":\"updateSupportUnitRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updateVesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingReleaseStartDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vestingNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNBU", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0411e264d09cf94b2e62a762b827fd9c08eb09587de5a825361b0709c19f3766"}