{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract CSGOMarketplace {\r\n    address public owner;\r\n\r\n    struct Listing {\r\n        address buyer;\r\n        string market_name;\r\n        uint256 price;\r\n        bool isSold;\r\n        bool isCompleted;\r\n    }\r\n\r\n    mapping(uint256 => Listing) public listings;\r\n    uint256 public latestListingId; // New state variable to keep track of the latest listing ID\r\n\r\n    event ListingCreated(uint256 indexed id, address indexed seller);\r\n    event ListingSold(uint256 indexed id, address indexed buyer, uint256 price);\r\n    event FundsReleased(uint256 indexed id, address indexed seller, uint256 price);\r\n    event FundsReturned(uint256 indexed id, address indexed buyer, uint256 price);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        latestListingId = 0; // Initialize the latestListingId to 0 (or any other starting value)\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function purchaseListing(uint256 price, string memory market_name) external payable {\r\n        address _buyer = msg.sender;\r\n        \r\n        // Increment the latestListingId before using it\r\n        latestListingId++;\r\n        uint256 listingId = latestListingId;\r\n\r\n        Listing storage listing = listings[listingId];\r\n        require(!listing.isSold, \"Listing already sold\");\r\n        require(!listing.isCompleted, \"Listing already completed\");\r\n        require(msg.value == price, \"Incorrect payment amount\"); // Ensure the sent value matches the listing price\r\n\r\n        listing.isSold = true;\r\n        listing.price = price;\r\n        listing.buyer = msg.sender;\r\n        listing.market_name = market_name; // Update the market_name field\r\n\r\n        listings[listingId] = listing; // Update the listing in the mapping\r\n\r\n        emit ListingCreated(listingId, _buyer);\r\n        emit ListingSold(listingId, msg.sender, price); // Use the correct listingId here\r\n    }\r\n\r\n\r\n    function releaseFunds(uint256 _listingId, address payable seller) external onlyOwner {\r\n        Listing storage listing = listings[_listingId];\r\n\r\n        require(seller != address(0), \"Invalid seller wallet address\");\r\n        require(listing.isSold, \"Listing not sold\");\r\n        require(!listing.isCompleted, \"Listing already completed\");\r\n        require(listing.price > 0, \"No price available\");\r\n\r\n        uint256 feeAmount = (listing.price * 4) / 100;\r\n        seller.transfer(listing.price - feeAmount);\r\n        payable(0xA7F2FD4367674b1f0A48E6803Be32397e16a5f3F).transfer(feeAmount);\r\n\r\n        listing.isCompleted = true;\r\n\r\n        emit FundsReleased(_listingId, seller, listing.price);\r\n    }\r\n\r\n    function returnToBuyer(uint256 _listingId) external onlyOwner {\r\n        Listing storage listing = listings[_listingId];\r\n\r\n        require(listing.price > 0, \"No price available\");\r\n        require(!listing.isCompleted, \"Listing already completed\");\r\n\r\n        address payable buyer = payable(listing.buyer);\r\n        uint256 priceToReturn = listing.price;\r\n        buyer.transfer(listing.price);\r\n\r\n        listing.isCompleted = true;\r\n        listing.price = 0;\r\n\r\n        emit FundsReturned(_listingId, buyer, priceToReturn); // Emit event to indicate the return of funds\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListingSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"latestListingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"market_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"market_name\",\"type\":\"string\"}],\"name\":\"purchaseListing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"returnToBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CSGOMarketplace", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://840b47ba04c264d28b5bea7bc9a7f7035a5f96516e8e76054d4a07f06b7004bf"}