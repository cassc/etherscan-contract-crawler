{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TSAggregatorUniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { SafeTransferLib } from \\\"../lib/SafeTransferLib.sol\\\";\\nimport { IWETH9 } from \\\"./interfaces/IWETH9.sol\\\";\\nimport { TSAggregator } from \\\"./TSAggregator.sol\\\";\\nimport { IThorchainRouter } from \\\"./interfaces/IThorchainRouter.sol\\\";\\nimport { IUniswapRouterV3 } from \\\"./interfaces/IUniswapRouterV3.sol\\\";\\n\\ncontract TSAggregatorUniswapV3 is TSAggregator {\\n    using SafeTransferLib for address;\\n\\n    IWETH9 public weth;\\n    uint24 public poolFee;\\n    IUniswapRouterV3 public swapRouter;\\n\\n    constructor(\\n        address _ttp, address _weth, address _swapRouter, uint24 _poolFee\\n    ) TSAggregator(_ttp) {\\n        weth = IWETH9(_weth);\\n        poolFee = _poolFee;\\n        swapRouter = IUniswapRouterV3(_swapRouter);\\n    }\\n\\n    function swapIn(\\n        address tcRouter,\\n        address tcVault,\\n        string calldata tcMemo,\\n        address token,\\n        uint amount,\\n        uint amountOutMin,\\n        uint deadline\\n    ) public nonReentrant {\\n        tokenTransferProxy.transferTokens(token, msg.sender, address(this), amount);\\n        token.safeApprove(address(swapRouter), 0); // USDT quirk\\n        token.safeApprove(address(swapRouter), amount);\\n\\n        uint amountOut = swapRouter.exactInputSingle(IUniswapRouterV3.ExactInputSingleParams({\\n            tokenIn: token,\\n            tokenOut: address(weth),\\n            fee: poolFee,\\n            recipient: address(this),\\n            deadline: deadline,\\n            amountIn: amount,\\n            amountOutMinimum: amountOutMin,\\n            sqrtPriceLimitX96: 0\\n        }));\\n        weth.withdraw(amountOut);\\n\\n        amountOut = skimFee(amountOut);\\n        IThorchainRouter(tcRouter).depositWithExpiry{value: amountOut}(\\n            payable(tcVault),\\n            address(0), // ETH\\n            amountOut,\\n            tcMemo,\\n            deadline\\n        );\\n    }\\n\\n    function swapOut(address token, address to, uint256 amountOutMin) public payable nonReentrant {\\n        uint256 amount = skimFee(msg.value);\\n        weth.deposit{value: amount}();\\n        address(weth).safeApprove(address(swapRouter), amount);\\n        swapRouter.exactInputSingle(IUniswapRouterV3.ExactInputSingleParams({\\n            tokenIn: address(weth),\\n            tokenOut: token,\\n            fee: poolFee,\\n            recipient: to,\\n            deadline: type(uint).max,\\n            amountIn: amount,\\n            amountOutMinimum: _parseAmountOutMin(amountOutMin),\\n            sqrtPriceLimitX96: 0\\n        }));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/TSAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { SafeTransferLib } from \\\"../lib/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"../lib/ReentrancyGuard.sol\\\";\\nimport { Owners } from \\\"./Owners.sol\\\";\\nimport { TSAggregatorTokenTransferProxy } from './TSAggregatorTokenTransferProxy.sol';\\n\\nabstract contract TSAggregator is Owners, ReentrancyGuard {\\n    using SafeTransferLib for address;\\n\\n    event FeeSet(uint256 fee, address feeRecipient);\\n\\n    uint256 public fee;\\n    address public feeRecipient;\\n    TSAggregatorTokenTransferProxy public tokenTransferProxy;\\n\\n    constructor(address _tokenTransferProxy) {\\n        _setOwner(msg.sender, true);\\n        tokenTransferProxy = TSAggregatorTokenTransferProxy(_tokenTransferProxy);\\n    }\\n\\n    // Needed for the swap router to be able to send back ETH\\n    receive() external payable {}\\n\\n    function setFee(uint256 _fee, address _feeRecipient) external isOwner {\\n        require(_fee <= 1000, \\\"fee can not be more than 10%\\\");\\n        fee = _fee;\\n        feeRecipient = _feeRecipient;\\n        emit FeeSet(_fee, _feeRecipient);\\n    }\\n\\n    function skimFee(uint256 amount) internal returns (uint256) {\\n        if (fee != 0 && feeRecipient != address(0)) {\\n            uint256 feeAmount = (amount * fee) / 10000;\\n            feeRecipient.safeTransferETH(feeAmount);\\n            amount -= feeAmount;\\n        }\\n        return amount;\\n    }\\n\\n    // Parse amountOutMin treating the last 2 digits as an exponent\\n    // So 15e4 = 150000. This allows for compressed memos on chains\\n    // with limited space like Bitcoin\\n    function _parseAmountOutMin(uint256 amount) internal pure returns (uint256) {\\n      return amount / 100 * (10 ** (amount % 100));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IThorchainRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IThorchainRouter {\\n    function depositWithExpiry(\\n        address payable vault,\\n        address asset,\\n        uint amount,\\n        string memory memo,\\n        uint expiration\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapRouterV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IUniswapRouterV3 {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external returns (uint256 amountOut);\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Owners.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nabstract contract Owners {\\n    event OwnerSet(address indexed owner, bool active);\\n\\n    mapping(address => bool) public owners;\\n\\n    modifier isOwner() {\\n        require(owners[msg.sender], \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    function _setOwner(address owner, bool active) internal virtual {\\n      owners[owner] = active;\\n      emit OwnerSet(owner, active);\\n    }\\n\\n    function setOwner(address owner, bool active) external virtual isOwner {\\n      _setOwner(owner, active);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TSAggregatorTokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { SafeTransferLib } from \\\"../lib/SafeTransferLib.sol\\\";\\nimport { Owners } from \\\"./Owners.sol\\\";\\n\\ncontract TSAggregatorTokenTransferProxy is Owners {\\n    using SafeTransferLib for address;\\n\\n    constructor() {\\n        _setOwner(msg.sender, true);\\n    }\\n\\n    function transferTokens(address token, address from, address to, uint256 amount) external isOwner {\\n        require(from == tx.origin || _isContract(from), \\\"Invalid from address\\\");\\n        token.safeTransferFrom(from, to, amount);\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ttp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tcRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tcVault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tcMemo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouterV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTransferProxy\",\"outputs\":[{\"internalType\":\"contract TSAggregatorTokenTransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TSAggregatorUniswapV3", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f892fef9da200d9e84c9b0647ecff0f34633abe8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}