{"SourceCode": "// Twitter: https://twitter.com/huaxi_coin\r\n// Discord: https://discord.gg/nohandle\r\n// Dev: https://twitter.com/sshb3n\r\n/*                                                                                                    \r\n                                                 .......                                            \r\n                                  .+@%       :*%=@@@@@@@         .+@@:                              \r\n                                :*@@@@      -#%#=@@@@@@@       .+@@@@:                              \r\n                              :*@@+=@@.     #%%@%@@@@@@@     :*@@*-@@:                              \r\n                            .*@%=  :@@      %#-+=@@+=-+@    *@%=   @@.                              \r\n                            -@@*+++#@@++:   #%#@#@@#%%#@   .@@#+***@@#*-                            \r\n                            .******#@@#*:   #@%++*+#+#@@    ++*****@@**-                            \r\n                                   :@@      %@###*%@@#@@           @@.                              \r\n                                   :%#      *%%%%%%%%%%#          .##.                              \r\n                                                                                                    \r\n                                                                                                    \r\n                            :--.:-::----.   -::::: *.    +-:::-.--::::*:                            \r\n                            -=:.-=:-+---.  .-.--:: -     - ::--:--.:-:-.                                                                                                                                                                                                                                    \r\n*/\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n///\r\n/// @dev Note:\r\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\r\n/// - For ERC20s, this implementation won't check that a token has code,\r\n///   responsibility is delegated to the caller.\r\nlibrary SafeTransferLib {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ETH transfer has failed.\r\n    error ETHTransferFailed();\r\n\r\n    /// @dev The ERC20 `transferFrom` has failed.\r\n    error TransferFromFailed();\r\n\r\n    /// @dev The ERC20 `transfer` has failed.\r\n    error TransferFailed();\r\n\r\n    /// @dev The ERC20 `approve` has failed.\r\n    error ApproveFailed();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\r\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\r\n    /// storage reads and writes, but low enough to prevent griefing.\r\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       ETH OPERATIONS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\r\n    //\r\n    // The regular variants:\r\n    // - Forwards all remaining gas to the target.\r\n    // - Reverts if the target reverts.\r\n    // - Reverts if the current contract has insufficient balance.\r\n    //\r\n    // The force variants:\r\n    // - Forwards with an optional gas stipend\r\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\r\n    // - If the target reverts, or if the gas stipend is exhausted,\r\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\r\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\r\n    // - Reverts if the current contract has insufficient balance.\r\n    //\r\n    // The try variants:\r\n    // - Forwards with a mandatory gas stipend.\r\n    // - Instead of reverting, returns whether the transfer succeeded.\r\n\r\n    /// @dev Sends `amount` (in wei) ETH to `to`.\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all the ETH in the current contract to `to`.\r\n    function safeTransferAllETH(address to) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Transfer all the ETH and check if it succeeded or not.\r\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\r\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if lt(selfbalance(), amount) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\r\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\r\n    function forceSafeTransferETH(address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if lt(selfbalance(), amount) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\r\n    function forceSafeTransferAllETH(address to) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // forgefmt: disable-next-item\r\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, to) // Store the address in scratch space.\r\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\r\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\r\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\r\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\r\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                      ERC20 OPERATIONS                      */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\r\n    /// Reverts upon failure.\r\n    ///\r\n    /// The `from` account must have at least `amount` approved for\r\n    /// the current contract to manage.\r\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40) // Cache the free memory pointer.\r\n            mstore(0x60, amount) // Store the `amount` argument.\r\n            mstore(0x40, to) // Store the `to` argument.\r\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\r\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x60, 0) // Restore the zero slot to zero.\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\r\n    /// Reverts upon failure.\r\n    ///\r\n    /// The `from` account must have their entire balance approved for\r\n    /// the current contract to manage.\r\n    function safeTransferAllFrom(address token, address from, address to)\r\n        internal\r\n        returns (uint256 amount)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40) // Cache the free memory pointer.\r\n            mstore(0x40, to) // Store the `to` argument.\r\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\r\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\r\n            // Read the balance, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\r\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x60, 0) // Restore the zero slot to zero.\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\r\n    /// Reverts upon failure.\r\n    function safeTransfer(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\r\n    /// Reverts upon failure.\r\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\r\n            mstore(0x20, address()) // Store the address of the current contract.\r\n            // Read the balance, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\r\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\r\n            // Perform the transfer, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\r\n    /// Reverts upon failure.\r\n    function safeApprove(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n            // Perform the approval, reverting upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\r\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\r\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\r\n    /// Reverts upon failure.\r\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, to) // Store the `to` argument.\r\n            mstore(0x34, amount) // Store the `amount` argument.\r\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n            // Perform the approval, retrying upon failure.\r\n            if iszero(\r\n                and( // The arguments of `and` are evaluated from right to left.\r\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                mstore(0x34, 0) // Store 0 for the `amount`.\r\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\r\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\r\n                mstore(0x34, amount) // Store back the original `amount`.\r\n                // Retry the approval, reverting upon failure.\r\n                if iszero(\r\n                    and(\r\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\r\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\r\n                    )\r\n                ) {\r\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n            }\r\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\r\n    /// Returns zero if the `token` does not exist.\r\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x14, account) // Store the `account` argument.\r\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\r\n            amount :=\r\n                mul(\r\n                    mload(0x20),\r\n                    and( // The arguments of `and` are evaluated from right to left.\r\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\r\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\r\n                    )\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/Vectorized/solady/blob/9deb9ed36a27261a8745db5b7cd7f4cdc3b1cd4e/src/utils/LibString.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Library for converting numbers into strings and other string operations.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\r\n///\r\n/// @dev Note:\r\n/// For performance and bytecode compactness, most of the string operations are restricted to\r\n/// byte strings (7-bit ASCII), except where otherwise specified.\r\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\r\n/// can lead to undefined behavior.\r\nlibrary LibString {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The length of the output is too small to contain all the hex digits.\r\n    error HexLengthInsufficient();\r\n\r\n    /// @dev The length of the string is more than 32 bytes.\r\n    error TooBigForSmallString();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The constant returned when the `search` is not found in the string.\r\n    uint256 internal constant NOT_FOUND = type(uint256).max;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     DECIMAL OPERATIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n            // and 3 words for a maximum of 78 digits.\r\n            str := add(mload(0x40), 0x80)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, add(str, 0x20))\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            let w := not(0) // Tsk.\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 1)`.\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(int256 value) internal pure returns (string memory str) {\r\n        if (value >= 0) {\r\n            return toString(uint256(value));\r\n        }\r\n        unchecked {\r\n            str = toString(~uint256(value) + 1);\r\n        }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // We still have some spare memory space on the left,\r\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\r\n            let length := mload(str) // Load the string length.\r\n            mstore(str, 0x2d) // Store the '-' character.\r\n            str := sub(str, 1) // Move back the string pointer by a byte.\r\n            mstore(str, add(length, 1)) // Update the string length.\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   HEXADECIMAL OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`,\r\n    /// left-padded to an input length of `length` bytes.\r\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\r\n    /// giving a total length of `length * 2 + 2` bytes.\r\n    /// Reverts if `length` is too small for the output to contain all the digits.\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value, length);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`,\r\n    /// left-padded to an input length of `length` bytes.\r\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\r\n    /// giving a total length of `length * 2` bytes.\r\n    /// Reverts if `length` is too small for the output to contain all the digits.\r\n    function toHexStringNoPrefix(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory str)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\r\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\r\n            // We add 0x20 to the total and round down to a multiple of 0x20.\r\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\r\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\r\n            // Allocate the memory.\r\n            mstore(0x40, add(str, 0x20))\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end to calculate the length later.\r\n            let end := str\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let start := sub(str, add(length, length))\r\n            let w := not(1) // Tsk.\r\n            let temp := value\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            for {} 1 {} {\r\n                str := add(str, w) // `sub(str, 2)`.\r\n                mstore8(add(str, 1), mload(and(temp, 15)))\r\n                mstore8(str, mload(and(shr(4, temp), 15)))\r\n                temp := shr(8, temp)\r\n                if iszero(xor(str, start)) { break }\r\n            }\r\n\r\n            if temp {\r\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n\r\n            // Compute the string's length.\r\n            let strLength := sub(end, str)\r\n            // Move the pointer and write the length.\r\n            str := sub(str, 0x20)\r\n            mstore(str, strLength)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\r\n    /// As address are 20 bytes long, the output will left-padded to have\r\n    /// a length of `20 * 2 + 2` bytes.\r\n    function toHexString(uint256 value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\".\r\n    /// The output excludes leading \"0\" from the `toHexString` output.\r\n    /// `0x00: \"0x0\", 0x01: \"0x1\", 0x12: \"0x12\", 0x123: \"0x123\"`.\r\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(add(str, o), 0x3078) // Write the \"0x\" prefix, accounting for leading zero.\r\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\r\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output excludes leading \"0\" from the `toHexStringNoPrefix` output.\r\n    /// `0x00: \"0\", 0x01: \"1\", 0x12: \"12\", 0x123: \"123\"`.\r\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\r\n            let strLength := mload(str) // Get the length.\r\n            str := add(str, o) // Move the pointer, accounting for leading zero.\r\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    /// As address are 20 bytes long, the output will left-padded to have\r\n    /// a length of `20 * 2` bytes.\r\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\r\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\r\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\r\n            str := add(mload(0x40), 0x80)\r\n            // Allocate the memory.\r\n            mstore(0x40, add(str, 0x20))\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end to calculate the length later.\r\n            let end := str\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let w := not(1) // Tsk.\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 2)`.\r\n                mstore8(add(str, 1), mload(and(temp, 15)))\r\n                mstore8(str, mload(and(shr(4, temp), 15)))\r\n                temp := shr(8, temp)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            // Compute the string's length.\r\n            let strLength := sub(end, str)\r\n            // Move the pointer and write the length.\r\n            str := sub(str, 0x20)\r\n            mstore(str, strLength)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\r\n    /// and the alphabets are capitalized conditionally according to\r\n    /// https://eips.ethereum.org/EIPS/eip-55\r\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\r\n        str = toHexString(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\r\n            let o := add(str, 0x22)\r\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\r\n            let t := shl(240, 136) // `0b10001000 << 240`\r\n            for { let i := 0 } 1 {} {\r\n                mstore(add(i, i), mul(t, byte(i, hashed)))\r\n                i := add(i, 1)\r\n                if eq(i, 20) { break }\r\n            }\r\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\r\n            o := add(o, 0x20)\r\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\r\n    function toHexString(address value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            str := mload(0x40)\r\n\r\n            // Allocate the memory.\r\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\r\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\r\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\r\n            mstore(0x40, add(str, 0x80))\r\n\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            str := add(str, 2)\r\n            mstore(str, 40)\r\n\r\n            let o := add(str, 0x20)\r\n            mstore(add(o, 40), 0)\r\n\r\n            value := shl(96, value)\r\n\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let i := 0 } 1 {} {\r\n                let p := add(o, add(i, i))\r\n                let temp := byte(i, value)\r\n                mstore8(add(p, 1), mload(and(temp, 15)))\r\n                mstore8(p, mload(shr(4, temp)))\r\n                i := add(i, 1)\r\n                if eq(i, 20) { break }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hex encoded string from the raw bytes.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(raw);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hex encoded string from the raw bytes.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let length := mload(raw)\r\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\r\n            mstore(str, add(length, length)) // Store the length of the output.\r\n\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let o := add(str, 0x20)\r\n            let end := add(raw, length)\r\n\r\n            for {} iszero(eq(raw, end)) {} {\r\n                raw := add(raw, 1)\r\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\r\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\r\n                o := add(o, 2)\r\n            }\r\n            mstore(o, 0) // Zeroize the slot after the string.\r\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   RUNE STRING OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the number of UTF characters in the string.\r\n    function runeCount(string memory s) internal pure returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if mload(s) {\r\n                mstore(0x00, div(not(0), 255))\r\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\r\n                let o := add(s, 0x20)\r\n                let end := add(o, mload(s))\r\n                for { result := 1 } 1 { result := add(result, 1) } {\r\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\r\n                    if iszero(lt(o, end)) { break }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns if this string is a 7-bit ASCII string.\r\n    /// (i.e. all characters codes are in [0..127])\r\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let mask := shl(7, div(not(0), 255))\r\n            result := 1\r\n            let n := mload(s)\r\n            if n {\r\n                let o := add(s, 0x20)\r\n                let end := add(o, n)\r\n                let last := mload(end)\r\n                mstore(end, 0)\r\n                for {} 1 {} {\r\n                    if and(mask, mload(o)) {\r\n                        result := 0\r\n                        break\r\n                    }\r\n                    o := add(o, 0x20)\r\n                    if iszero(lt(o, end)) { break }\r\n                }\r\n                mstore(end, last)\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   BYTE STRING OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // For performance and bytecode compactness, byte string operations are restricted\r\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\r\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\r\n    // can lead to undefined behavior.\r\n\r\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\r\n    function replace(string memory subject, string memory search, string memory replacement)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            let searchLength := mload(search)\r\n            let replacementLength := mload(replacement)\r\n\r\n            subject := add(subject, 0x20)\r\n            search := add(search, 0x20)\r\n            replacement := add(replacement, 0x20)\r\n            result := add(mload(0x40), 0x20)\r\n\r\n            let subjectEnd := add(subject, subjectLength)\r\n            if iszero(gt(searchLength, subjectLength)) {\r\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\r\n                let h := 0\r\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(search)\r\n                for {} 1 {} {\r\n                    let t := mload(subject)\r\n                    // Whether the first `searchLength % 32` bytes of\r\n                    // `subject` and `search` matches.\r\n                    if iszero(shr(m, xor(t, s))) {\r\n                        if h {\r\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\r\n                                mstore(result, t)\r\n                                result := add(result, 1)\r\n                                subject := add(subject, 1)\r\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                                continue\r\n                            }\r\n                        }\r\n                        // Copy the `replacement` one word at a time.\r\n                        for { let o := 0 } 1 {} {\r\n                            mstore(add(result, o), mload(add(replacement, o)))\r\n                            o := add(o, 0x20)\r\n                            if iszero(lt(o, replacementLength)) { break }\r\n                        }\r\n                        result := add(result, replacementLength)\r\n                        subject := add(subject, searchLength)\r\n                        if searchLength {\r\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                            continue\r\n                        }\r\n                    }\r\n                    mstore(result, t)\r\n                    result := add(result, 1)\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                }\r\n            }\r\n\r\n            let resultRemainder := result\r\n            result := add(mload(0x40), 0x20)\r\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\r\n            // Copy the rest of the string one word at a time.\r\n            for {} lt(subject, subjectEnd) {} {\r\n                mstore(resultRemainder, mload(subject))\r\n                resultRemainder := add(resultRemainder, 0x20)\r\n                subject := add(subject, 0x20)\r\n            }\r\n            result := sub(result, 0x20)\r\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\r\n            mstore(last, 0)\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n            mstore(result, k) // Store the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from left to right, starting from `from`.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function indexOf(string memory subject, string memory search, uint256 from)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for { let subjectLength := mload(subject) } 1 {} {\r\n                if iszero(mload(search)) {\r\n                    if iszero(gt(from, subjectLength)) {\r\n                        result := from\r\n                        break\r\n                    }\r\n                    result := subjectLength\r\n                    break\r\n                }\r\n                let searchLength := mload(search)\r\n                let subjectStart := add(subject, 0x20)\r\n\r\n                result := not(0) // Initialize to `NOT_FOUND`.\r\n\r\n                subject := add(subjectStart, from)\r\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\r\n\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(add(search, 0x20))\r\n\r\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\r\n\r\n                if iszero(lt(searchLength, 0x20)) {\r\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\r\n                        if iszero(shr(m, xor(mload(subject), s))) {\r\n                            if eq(keccak256(subject, searchLength), h) {\r\n                                result := sub(subject, subjectStart)\r\n                                break\r\n                            }\r\n                        }\r\n                        subject := add(subject, 1)\r\n                        if iszero(lt(subject, end)) { break }\r\n                    }\r\n                    break\r\n                }\r\n                for {} 1 {} {\r\n                    if iszero(shr(m, xor(mload(subject), s))) {\r\n                        result := sub(subject, subjectStart)\r\n                        break\r\n                    }\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, end)) { break }\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from left to right.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function indexOf(string memory subject, string memory search)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        result = indexOf(subject, search, 0);\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from right to left, starting from `from`.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {} 1 {} {\r\n                result := not(0) // Initialize to `NOT_FOUND`.\r\n                let searchLength := mload(search)\r\n                if gt(searchLength, mload(subject)) { break }\r\n                let w := result\r\n\r\n                let fromMax := sub(mload(subject), searchLength)\r\n                if iszero(gt(fromMax, from)) { from := fromMax }\r\n\r\n                let end := add(add(subject, 0x20), w)\r\n                subject := add(add(subject, 0x20), from)\r\n                if iszero(gt(subject, end)) { break }\r\n                // As this function is not too often used,\r\n                // we shall simply use keccak256 for smaller bytecode size.\r\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\r\n                    if eq(keccak256(subject, searchLength), h) {\r\n                        result := sub(subject, add(end, 1))\r\n                        break\r\n                    }\r\n                    subject := add(subject, w) // `sub(subject, 1)`.\r\n                    if iszero(gt(subject, end)) { break }\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from right to left.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function lastIndexOf(string memory subject, string memory search)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\r\n    }\r\n\r\n    /// @dev Returns true if `search` is found in `subject`, false otherwise.\r\n    function contains(string memory subject, string memory search) internal pure returns (bool) {\r\n        return indexOf(subject, search) != NOT_FOUND;\r\n    }\r\n\r\n    /// @dev Returns whether `subject` starts with `search`.\r\n    function startsWith(string memory subject, string memory search)\r\n        internal\r\n        pure\r\n        returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let searchLength := mload(search)\r\n            // Just using keccak256 directly is actually cheaper.\r\n            // forgefmt: disable-next-item\r\n            result := and(\r\n                iszero(gt(searchLength, mload(subject))),\r\n                eq(\r\n                    keccak256(add(subject, 0x20), searchLength),\r\n                    keccak256(add(search, 0x20), searchLength)\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `subject` ends with `search`.\r\n    function endsWith(string memory subject, string memory search)\r\n        internal\r\n        pure\r\n        returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let searchLength := mload(search)\r\n            let subjectLength := mload(subject)\r\n            // Whether `search` is not longer than `subject`.\r\n            let withinRange := iszero(gt(searchLength, subjectLength))\r\n            // Just using keccak256 directly is actually cheaper.\r\n            // forgefmt: disable-next-item\r\n            result := and(\r\n                withinRange,\r\n                eq(\r\n                    keccak256(\r\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\r\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\r\n                        searchLength\r\n                    ),\r\n                    keccak256(add(search, 0x20), searchLength)\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `subject` repeated `times`.\r\n    function repeat(string memory subject, uint256 times)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            if iszero(or(iszero(times), iszero(subjectLength))) {\r\n                subject := add(subject, 0x20)\r\n                result := mload(0x40)\r\n                let output := add(result, 0x20)\r\n                for {} 1 {} {\r\n                    // Copy the `subject` one word at a time.\r\n                    for { let o := 0 } 1 {} {\r\n                        mstore(add(output, o), mload(add(subject, o)))\r\n                        o := add(o, 0x20)\r\n                        if iszero(lt(o, subjectLength)) { break }\r\n                    }\r\n                    output := add(output, subjectLength)\r\n                    times := sub(times, 1)\r\n                    if iszero(times) { break }\r\n                }\r\n                mstore(output, 0) // Zeroize the slot after the string.\r\n                let resultLength := sub(output, add(result, 0x20))\r\n                mstore(result, resultLength) // Store the length.\r\n                // Allocate the memory.\r\n                mstore(0x40, add(result, add(resultLength, 0x20)))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\r\n    /// `start` and `end` are byte offsets.\r\n    function slice(string memory subject, uint256 start, uint256 end)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\r\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\r\n            if lt(start, end) {\r\n                result := mload(0x40)\r\n                let resultLength := sub(end, start)\r\n                mstore(result, resultLength)\r\n                subject := add(subject, start)\r\n                let w := not(0x1f)\r\n                // Copy the `subject` one word at a time, backwards.\r\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\r\n                    mstore(add(result, o), mload(add(subject, o)))\r\n                    o := add(o, w) // `sub(o, 0x20)`.\r\n                    if iszero(o) { break }\r\n                }\r\n                // Zeroize the slot after the string.\r\n                mstore(add(add(result, 0x20), resultLength), 0)\r\n                // Allocate memory for the length and the bytes,\r\n                // rounded up to a multiple of 32.\r\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\r\n    /// `start` is a byte offset.\r\n    function slice(string memory subject, uint256 start)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        result = slice(subject, start, uint256(int256(-1)));\r\n    }\r\n\r\n    /// @dev Returns all the indices of `search` in `subject`.\r\n    /// The indices are byte offsets.\r\n    function indicesOf(string memory subject, string memory search)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            let searchLength := mload(search)\r\n\r\n            if iszero(gt(searchLength, subjectLength)) {\r\n                subject := add(subject, 0x20)\r\n                search := add(search, 0x20)\r\n                result := add(mload(0x40), 0x20)\r\n\r\n                let subjectStart := subject\r\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\r\n                let h := 0\r\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(search)\r\n                for {} 1 {} {\r\n                    let t := mload(subject)\r\n                    // Whether the first `searchLength % 32` bytes of\r\n                    // `subject` and `search` matches.\r\n                    if iszero(shr(m, xor(t, s))) {\r\n                        if h {\r\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\r\n                                subject := add(subject, 1)\r\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                                continue\r\n                            }\r\n                        }\r\n                        // Append to `result`.\r\n                        mstore(result, sub(subject, subjectStart))\r\n                        result := add(result, 0x20)\r\n                        // Advance `subject` by `searchLength`.\r\n                        subject := add(subject, searchLength)\r\n                        if searchLength {\r\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                            continue\r\n                        }\r\n                    }\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                }\r\n                let resultEnd := result\r\n                // Assign `result` to the free memory pointer.\r\n                result := mload(0x40)\r\n                // Store the length of `result`.\r\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\r\n                // Allocate memory for result.\r\n                // We allocate one more word, so this array can be recycled for {split}.\r\n                mstore(0x40, add(resultEnd, 0x20))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\r\n    function split(string memory subject, string memory delimiter)\r\n        internal\r\n        pure\r\n        returns (string[] memory result)\r\n    {\r\n        uint256[] memory indices = indicesOf(subject, delimiter);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let w := not(0x1f)\r\n            let indexPtr := add(indices, 0x20)\r\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\r\n            mstore(add(indicesEnd, w), mload(subject))\r\n            mstore(indices, add(mload(indices), 1))\r\n            let prevIndex := 0\r\n            for {} 1 {} {\r\n                let index := mload(indexPtr)\r\n                mstore(indexPtr, 0x60)\r\n                if iszero(eq(index, prevIndex)) {\r\n                    let element := mload(0x40)\r\n                    let elementLength := sub(index, prevIndex)\r\n                    mstore(element, elementLength)\r\n                    // Copy the `subject` one word at a time, backwards.\r\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\r\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\r\n                        o := add(o, w) // `sub(o, 0x20)`.\r\n                        if iszero(o) { break }\r\n                    }\r\n                    // Zeroize the slot after the string.\r\n                    mstore(add(add(element, 0x20), elementLength), 0)\r\n                    // Allocate memory for the length and the bytes,\r\n                    // rounded up to a multiple of 32.\r\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\r\n                    // Store the `element` into the array.\r\n                    mstore(indexPtr, element)\r\n                }\r\n                prevIndex := add(index, mload(delimiter))\r\n                indexPtr := add(indexPtr, 0x20)\r\n                if iszero(lt(indexPtr, indicesEnd)) { break }\r\n            }\r\n            result := indices\r\n            if iszero(mload(delimiter)) {\r\n                result := add(indices, 0x20)\r\n                mstore(result, sub(mload(indices), 2))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a concatenated string of `a` and `b`.\r\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\r\n    function concat(string memory a, string memory b)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let w := not(0x1f)\r\n            result := mload(0x40)\r\n            let aLength := mload(a)\r\n            // Copy `a` one word at a time, backwards.\r\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\r\n                mstore(add(result, o), mload(add(a, o)))\r\n                o := add(o, w) // `sub(o, 0x20)`.\r\n                if iszero(o) { break }\r\n            }\r\n            let bLength := mload(b)\r\n            let output := add(result, aLength)\r\n            // Copy `b` one word at a time, backwards.\r\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\r\n                mstore(add(output, o), mload(add(b, o)))\r\n                o := add(o, w) // `sub(o, 0x20)`.\r\n                if iszero(o) { break }\r\n            }\r\n            let totalLength := add(aLength, bLength)\r\n            let last := add(add(result, 0x20), totalLength)\r\n            // Zeroize the slot after the string.\r\n            mstore(last, 0)\r\n            // Stores the length.\r\n            mstore(result, totalLength)\r\n            // Allocate memory for the length and the bytes,\r\n            // rounded up to a multiple of 32.\r\n            mstore(0x40, and(add(last, 0x1f), w))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function toCase(string memory subject, bool toUpper)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let length := mload(subject)\r\n            if length {\r\n                result := add(mload(0x40), 0x20)\r\n                subject := add(subject, 1)\r\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\r\n                let w := not(0)\r\n                for { let o := length } 1 {} {\r\n                    o := add(o, w)\r\n                    let b := and(0xff, mload(add(subject, o)))\r\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\r\n                    if iszero(o) { break }\r\n                }\r\n                result := mload(0x40)\r\n                mstore(result, length) // Store the length.\r\n                let last := add(add(result, 0x20), length)\r\n                mstore(last, 0) // Zeroize the slot after the string.\r\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a string from a small bytes32 string.\r\n    /// `s` must be null-terminated, or behavior will be undefined.\r\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40)\r\n            let n := 0\r\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\0'.\r\n            mstore(result, n)\r\n            let o := add(result, 0x20)\r\n            mstore(o, s)\r\n            mstore(add(o, n), 0)\r\n            mstore(0x40, add(result, 0x40))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\r\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\0'.\r\n            mstore(0x00, s)\r\n            mstore(result, 0x00)\r\n            result := mload(0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the string as a normalized null-terminated small string.\r\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(s)\r\n            if iszero(lt(result, 33)) {\r\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a lowercased copy of the string.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function lower(string memory subject) internal pure returns (string memory result) {\r\n        result = toCase(subject, false);\r\n    }\r\n\r\n    /// @dev Returns an UPPERCASED copy of the string.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function upper(string memory subject) internal pure returns (string memory result) {\r\n        result = toCase(subject, true);\r\n    }\r\n\r\n    /// @dev Escapes the string to be used within HTML tags.\r\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let end := add(s, mload(s))\r\n            result := add(mload(0x40), 0x20)\r\n            // Store the bytes of the packed offsets and strides into the scratch space.\r\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\r\n            mstore(0x1f, 0x900094)\r\n            mstore(0x08, 0xc0000000a6ab)\r\n            // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\r\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\r\n            for {} iszero(eq(s, end)) {} {\r\n                s := add(s, 1)\r\n                let c := and(mload(s), 0xff)\r\n                // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\r\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\r\n                    mstore8(result, c)\r\n                    result := add(result, 1)\r\n                    continue\r\n                }\r\n                let t := shr(248, mload(c))\r\n                mstore(result, mload(and(t, 0x1f)))\r\n                result := add(result, shr(5, t))\r\n            }\r\n            let last := result\r\n            mstore(last, 0) // Zeroize the slot after the string.\r\n            result := mload(0x40)\r\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\r\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\r\n    function escapeJSON(string memory s, bool addDoubleQuotes)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let end := add(s, mload(s))\r\n            result := add(mload(0x40), 0x20)\r\n            if addDoubleQuotes {\r\n                mstore8(result, 34)\r\n                result := add(1, result)\r\n            }\r\n            // Store \"\\\\u0000\" in scratch space.\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\r\n            // into the scratch space.\r\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\r\n            // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\r\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\r\n            for {} iszero(eq(s, end)) {} {\r\n                s := add(s, 1)\r\n                let c := and(mload(s), 0xff)\r\n                if iszero(lt(c, 0x20)) {\r\n                    if iszero(and(shl(c, 1), e)) {\r\n                        // Not in `[\"\\\"\",\"\\\\\"]`.\r\n                        mstore8(result, c)\r\n                        result := add(result, 1)\r\n                        continue\r\n                    }\r\n                    mstore8(result, 0x5c) // \"\\\\\".\r\n                    mstore8(add(result, 1), c)\r\n                    result := add(result, 2)\r\n                    continue\r\n                }\r\n                if iszero(and(shl(c, 1), 0x3700)) {\r\n                    // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\r\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\r\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\r\n                    mstore(result, mload(0x19)) // \"\\\\u00XX\".\r\n                    result := add(result, 6)\r\n                    continue\r\n                }\r\n                mstore8(result, 0x5c) // \"\\\\\".\r\n                mstore8(add(result, 1), mload(add(c, 8)))\r\n                result := add(result, 2)\r\n            }\r\n            if addDoubleQuotes {\r\n                mstore8(result, 34)\r\n                result := add(1, result)\r\n            }\r\n            let last := result\r\n            mstore(last, 0) // Zeroize the slot after the string.\r\n            result := mload(0x40)\r\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\r\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\r\n        result = escapeJSON(s, false);\r\n    }\r\n\r\n    /// @dev Returns whether `a` equals `b`.\r\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\r\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // These should be evaluated on compile time, as far as possible.\r\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\r\n            let x := not(or(m, or(b, add(m, and(b, m)))))\r\n            let r := shl(7, iszero(iszero(shr(128, x))))\r\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\r\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\r\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\r\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\r\n            // forgefmt: disable-next-item\r\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\r\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Packs a single string with its length into a single word.\r\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\r\n    function packOne(string memory a) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // We don't need to zero right pad the string,\r\n            // since this is our own custom non-standard packing scheme.\r\n            result :=\r\n                mul(\r\n                    // Load the length and the bytes.\r\n                    mload(add(a, 0x1f)),\r\n                    // `length != 0 && length < 32`. Abuses underflow.\r\n                    // Assumes that the length is valid and within the block gas limit.\r\n                    lt(sub(mload(a), 1), 0x1f)\r\n                )\r\n        }\r\n    }\r\n\r\n    /// @dev Unpacks a string packed using {packOne}.\r\n    /// Returns the empty string if `packed` is `bytes32(0)`.\r\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\r\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Grab the free memory pointer.\r\n            result := mload(0x40)\r\n            // Allocate 2 words (1 for the length, 1 for the bytes).\r\n            mstore(0x40, add(result, 0x40))\r\n            // Zeroize the length slot.\r\n            mstore(result, 0)\r\n            // Store the length and bytes.\r\n            mstore(add(result, 0x1f), packed)\r\n            // Right pad with zeroes.\r\n            mstore(add(add(result, 0x20), mload(result)), 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Packs two strings with their lengths into a single word.\r\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\r\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let aLength := mload(a)\r\n            // We don't need to zero right pad the strings,\r\n            // since this is our own custom non-standard packing scheme.\r\n            result :=\r\n                mul(\r\n                    // Load the length and the bytes of `a` and `b`.\r\n                    or(\r\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\r\n                        mload(sub(add(b, 0x1e), aLength))\r\n                    ),\r\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\r\n                    // Assumes that the lengths are valid and within the block gas limit.\r\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\r\n                )\r\n        }\r\n    }\r\n\r\n    /// @dev Unpacks strings packed using {packTwo}.\r\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\r\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\r\n    function unpackTwo(bytes32 packed)\r\n        internal\r\n        pure\r\n        returns (string memory resultA, string memory resultB)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Grab the free memory pointer.\r\n            resultA := mload(0x40)\r\n            resultB := add(resultA, 0x40)\r\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\r\n            mstore(0x40, add(resultB, 0x40))\r\n            // Zeroize the length slots.\r\n            mstore(resultA, 0)\r\n            mstore(resultB, 0)\r\n            // Store the lengths and bytes.\r\n            mstore(add(resultA, 0x1f), packed)\r\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\r\n            // Right pad with zeroes.\r\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\r\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Directly returns `a` without copying.\r\n    function directReturn(string memory a) internal pure {\r\n        assembly {\r\n            // Assumes that the string does not start from the scratch space.\r\n            let retStart := sub(a, 0x20)\r\n            let retSize := add(mload(a), 0x40)\r\n            // Right pad with zeroes. Just in case the string is produced\r\n            // by a method that doesn't zero right pad.\r\n            mstore(add(retStart, retSize), 0)\r\n            // Store the return offset.\r\n            mstore(retStart, 0x20)\r\n            // End the transaction, returning the string.\r\n            return(retStart, retSize)\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/Vectorized/solady/blob/9deb9ed36a27261a8745db5b7cd7f4cdc3b1cd4e/src/auth/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n///\r\n/// @dev Note:\r\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\r\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\r\n///\r\n/// While the ownable portion follows\r\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\r\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\r\nabstract contract Ownable {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /// @dev Cannot double-initialize.\r\n    error AlreadyInitialized();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev An ownership handover to `pendingOwner` has been requested.\r\n    event OwnershipHandoverRequested(address indexed pendingOwner);\r\n\r\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\r\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\r\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\r\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The owner slot is given by:\r\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\r\n    /// It is intentionally chosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    bytes32 internal constant _OWNER_SLOT =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\r\n\r\n    /// The ownership handover slot of `newOwner` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\r\n    ///     let handoverSlot := keccak256(0x00, 0x20)\r\n    /// ```\r\n    /// It stores the expiry timestamp of the two-step ownership handover.\r\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\r\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal virtual {\r\n        if (_guardInitializeOwner()) {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                if sload(ownerSlot) {\r\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Store the new value.\r\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n            }\r\n        } else {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Store the new value.\r\n                sstore(_OWNER_SLOT, newOwner)\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        if (_guardInitializeOwner()) {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n                // Store the new value.\r\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\r\n            }\r\n        } else {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n                // Store the new value.\r\n                sstore(ownerSlot, newOwner)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\r\n    /// Override to return a different value if needed.\r\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\r\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\r\n        return 48 * 3600;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public payable virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /// @dev Request a two-step ownership handover to the caller.\r\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\r\n    function requestOwnershipHandover() public payable virtual {\r\n        unchecked {\r\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Compute and set the handover slot to `expires`.\r\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n                mstore(0x00, caller())\r\n                sstore(keccak256(0x0c, 0x20), expires)\r\n                // Emit the {OwnershipHandoverRequested} event.\r\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\r\n    function cancelOwnershipHandover() public payable virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x20), 0)\r\n            // Emit the {OwnershipHandoverCanceled} event.\r\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\r\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\r\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            let handoverSlot := keccak256(0x0c, 0x20)\r\n            // If the handover does not exist, or has expired.\r\n            if gt(timestamp(), sload(handoverSlot)) {\r\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Set the handover slot to 0.\r\n            sstore(handoverSlot, 0)\r\n        }\r\n        _setOwner(pendingOwner);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_OWNER_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\r\n    function ownershipHandoverExpiresAt(address pendingOwner)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the handover slot.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            // Load the handover slot.\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n// File: https://github.com/Vectorized/dn404/blob/main/src/DN404Mirror.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title DN404Mirror\r\n/// @notice DN404Mirror provides an interface for interacting with the\r\n/// NFT tokens in a DN404 implementation.\r\n///\r\n/// @author vectorized.eth (@optimizoor)\r\n/// @author Quit (@0xQuit)\r\n/// @author Michael Amadi (@AmadiMichaels)\r\n/// @author cygaar (@0xCygaar)\r\n/// @author Thomas (@0xjustadev)\r\n/// @author Harrison (@PopPunkOnChain)\r\n///\r\n/// @dev Note:\r\n/// - The ERC721 data is stored in the base DN404 contract.\r\ncontract DN404Mirror {\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                           EVENTS                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\r\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This is for marketplace signaling purposes. This contract has a `pullOwner()`\r\n    /// function that will sync the owner from the base contract.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\r\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\r\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Thrown when a call for an NFT function did not originate\r\n    /// from the base DN404 contract.\r\n    error SenderNotBase();\r\n\r\n    /// @dev Thrown when a call for an NFT function did not originate from the deployer.\r\n    error SenderNotDeployer();\r\n\r\n    /// @dev Thrown when transferring an NFT to a contract address that\r\n    /// does not implement ERC721Receiver.\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /// @dev Thrown when linking to the DN404 base contract and the\r\n    /// DN404 supportsInterface check fails or the call reverts.\r\n    error CannotLink();\r\n\r\n    /// @dev Thrown when a linkMirrorContract call is received and the\r\n    /// NFT mirror contract has already been linked to a DN404 base contract.\r\n    error AlreadyLinked();\r\n\r\n    /// @dev Thrown when retrieving the base DN404 address when a link has not\r\n    /// been established.\r\n    error NotLinked();\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          STORAGE                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct contain the NFT mirror contract storage.\r\n    struct DN404NFTStorage {\r\n        address baseERC20;\r\n        address deployer;\r\n        address owner;\r\n    }\r\n\r\n    /// @dev Returns a storage pointer for DN404NFTStorage.\r\n    function _getDN404NFTStorage() internal pure virtual returns (DN404NFTStorage storage $) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // `uint72(bytes9(keccak256(\"DN404_MIRROR_STORAGE\")))`.\r\n            $.slot := 0x3602298b8c10b01230 // Truncate to 9 bytes to reduce bytecode size.\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CONSTRUCTOR                         */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    constructor(address deployer) {\r\n        // For non-proxies, we will store the deployer so that only the deployer can\r\n        // link the base contract.\r\n        _getDN404NFTStorage().deployer = deployer;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     ERC721 OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the token collection name from the base DN404 contract.\r\n    function name() public view virtual returns (string memory result) {\r\n        return _readString(0x06fdde03, 0); // `symbol()`.\r\n    }\r\n\r\n    /// @dev Returns the token collection symbol from the base DN404 contract.\r\n    function symbol() public view virtual returns (string memory result) {\r\n        return _readString(0x95d89b41, 0); // `symbol()`.\r\n    }\r\n\r\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id` from\r\n    /// the base DN404 contract.\r\n    function tokenURI(uint256 id) public view virtual returns (string memory result) {\r\n        return _readString(0xc87b56dd, id); // `tokenURI()`.\r\n    }\r\n\r\n    /// @dev Returns the total NFT supply from the base DN404 contract.\r\n    function totalSupply() public view virtual returns (uint256 result) {\r\n        return _readWord(0xe2c79281, 0, 0); // `totalNFTSupply()`.\r\n    }\r\n\r\n    /// @dev Returns the number of NFT tokens owned by `nftOwner` from the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - `nftOwner` must not be the zero address.\r\n    function balanceOf(address nftOwner) public view virtual returns (uint256 result) {\r\n        return _readWord(0xf5b100ea, uint160(nftOwner), 0); // `balanceOfNFT(address)`.\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id` from the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function ownerOf(uint256 id) public view virtual returns (address result) {\r\n        return address(uint160(_readWord(0x6352211e, id, 0))); // `ownerOf(uint256)`.\r\n    }\r\n\r\n\r\n    /// @dev Sets `spender` as the approved account to manage token `id` in\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    /// - The caller must be the owner of the token,\r\n    ///   or an approved operator for the token owner.\r\n    ///\r\n    /// Emits an {Approval} event.\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            spender := shr(96, shl(96, spender))\r\n            let m := mload(0x40)\r\n            mstore(0x00, 0xd10b6e0c) // `approveNFT(address,uint256,address)`.\r\n            mstore(0x20, spender)\r\n            mstore(0x40, id)\r\n            mstore(0x60, caller())\r\n            if iszero(\r\n                and(\r\n                    gt(returndatasize(), 0x1f),\r\n                    call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20)\r\n                )\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n            // Emit the {Approval} event.\r\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, shr(96, mload(0x0c)), spender, id)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the account approved to manage token `id` from\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function getApproved(uint256 id) public view virtual returns (address) {\r\n        return address(uint160(_readWord(0x081812fc, id, 0))); // `getApproved(uint256)`.\r\n    }\r\n\r\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller in\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Emits an {ApprovalForAll} event.\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            operator := shr(96, shl(96, operator))\r\n            let m := mload(0x40)\r\n            mstore(0x00, 0x813500fc) // `setApprovalForAll(address,bool,address)`.\r\n            mstore(0x20, operator)\r\n            mstore(0x40, iszero(iszero(approved)))\r\n            mstore(0x60, caller())\r\n            if iszero(\r\n                and(eq(mload(0x00), 1), call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            // Emit the {ApprovalForAll} event.\r\n            // The `approved` value is already at 0x40.\r\n            log3(0x40, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), operator)\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `operator` is approved to manage the tokens of `nftOwner` from\r\n    /// the base DN404 contract.\r\n    function isApprovedForAll(address nftOwner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool result)\r\n    {\r\n        // `isApprovedForAll(address,address)`.\r\n        return _readWord(0xe985e9c5, uint160(nftOwner), uint160(operator)) != 0;\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 id) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            from := shr(96, shl(96, from))\r\n            to := shr(96, shl(96, to))\r\n            let m := mload(0x40)\r\n            mstore(m, 0xe5eb36c8) // `transferFromNFT(address,address,uint256,address)`.\r\n            mstore(add(m, 0x20), from)\r\n            mstore(add(m, 0x40), to)\r\n            mstore(add(m, 0x60), id)\r\n            mstore(add(m, 0x80), caller())\r\n            if iszero(\r\n                and(eq(mload(m), 1), call(gas(), base, callvalue(), add(m, 0x1c), 0x84, m, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            // Emit the {Transfer} event.\r\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\r\n        }\r\n    }\r\n\r\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \"\")`.\r\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \"\");\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\r\n        public\r\n        virtual\r\n    {\r\n        transferFrom(from, to, id);\r\n\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\r\n    }\r\n\r\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-165\r\n    /// This function call must use less than 30000 gas.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let s := shr(224, interfaceId)\r\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\r\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                  OWNER SYNCING OPERATIONS                  */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the `owner` of the contract, for marketplace signaling purposes.\r\n    function owner() public view virtual returns (address) {\r\n        return _getDN404NFTStorage().owner;\r\n    }\r\n\r\n    /// @dev Permissionless function to pull the owner from the base DN404 contract\r\n    /// if it implements ownable, for marketplace signaling purposes.\r\n    function pullOwner() public virtual {\r\n        address newOwner;\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x8da5cb5b) // `owner()`.\r\n            if and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x20)) {\r\n                newOwner := shr(96, mload(0x0c))\r\n            }\r\n        }\r\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\r\n        address oldOwner = $.owner;\r\n        if (oldOwner != newOwner) {\r\n            $.owner = newOwner;\r\n            emit OwnershipTransferred(oldOwner, newOwner);\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     MIRROR OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the address of the base DN404 contract.\r\n    function baseERC20() public view virtual returns (address base) {\r\n        base = _getDN404NFTStorage().baseERC20;\r\n        if (base == address(0)) revert NotLinked();\r\n    }\r\n\r\n    /// @dev Fallback modifier to execute calls from the base DN404 contract.\r\n    modifier dn404NFTFallback() virtual {\r\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\r\n\r\n        uint256 fnSelector = _calldataload(0x00) >> 224;\r\n\r\n        // `logTransfer(uint256[])`.\r\n        if (fnSelector == 0x263c69d6) {\r\n            if (msg.sender != $.baseERC20) revert SenderNotBase();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // When returndatacopy copies 1 or more out-of-bounds bytes, it reverts.\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), 0x20))\r\n                let o := add(0x24, calldataload(0x04)) // Packed logs offset.\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), o))\r\n                let end := add(o, shl(5, calldataload(sub(o, 0x20))))\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), end))\r\n\r\n                for {} iszero(eq(o, end)) { o := add(0x20, o) } {\r\n                    let d := calldataload(o) // Entry in the packed logs.\r\n                    let a := shr(96, d) // The address.\r\n                    let b := and(1, d) // Whether it is a burn.\r\n                    log4(\r\n                        codesize(),\r\n                        0x00,\r\n                        _TRANSFER_EVENT_SIGNATURE,\r\n                        mul(a, b),\r\n                        mul(a, iszero(b)),\r\n                        shr(168, shl(160, d))\r\n                    )\r\n                }\r\n                mstore(0x00, 0x01)\r\n                return(0x00, 0x20)\r\n            }\r\n        }\r\n        // `linkMirrorContract(address)`.\r\n        if (fnSelector == 0x0f4599e5) {\r\n            if ($.deployer != address(0)) {\r\n                if (address(uint160(_calldataload(0x04))) != $.deployer) {\r\n                    revert SenderNotDeployer();\r\n                }\r\n            }\r\n            if ($.baseERC20 != address(0)) revert AlreadyLinked();\r\n            $.baseERC20 = msg.sender;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(0x00, 0x01)\r\n                return(0x00, 0x20)\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function for calls from base DN404 contract.\r\n    fallback() external payable virtual dn404NFTFallback {}\r\n\r\n    receive() external payable virtual {}\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      PRIVATE HELPERS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Helper to read a string from the base DN404 contract.\r\n    function _readString(uint256 fnSelector, uint256 arg0)\r\n        private\r\n        view\r\n        returns (string memory result)\r\n    {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40)\r\n            mstore(0x00, fnSelector)\r\n            mstore(0x20, arg0)\r\n            if iszero(staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x00)) {\r\n                returndatacopy(result, 0x00, returndatasize())\r\n                revert(result, returndatasize())\r\n            }\r\n            returndatacopy(0x00, 0x00, 0x20) // Copy the offset of the string in returndata.\r\n            returndatacopy(result, mload(0x00), 0x20) // Copy the length of the string.\r\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result)) // Copy the string.\r\n            mstore(0x40, add(add(result, 0x20), mload(result))) // Allocate memory.\r\n        }\r\n    }\r\n\r\n    /// @dev Helper to read a word from the base DN404 contract.\r\n    function _readWord(uint256 fnSelector, uint256 arg0, uint256 arg1)\r\n        private\r\n        view\r\n        returns (uint256 result)\r\n    {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40)\r\n            mstore(0x00, fnSelector)\r\n            mstore(0x20, arg0)\r\n            mstore(0x40, arg1)\r\n            if iszero(\r\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x44, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            result := mload(0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the calldata value at `offset`.\r\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            value := calldataload(offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns if `a` has bytecode of non-zero length.\r\n    function _hasCode(address a) private view returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(a) // Can handle dirty upper bits.\r\n        }\r\n    }\r\n\r\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\r\n    /// Reverts if the target does not support the function correctly.\r\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\r\n        private\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Prepare the calldata.\r\n            let m := mload(0x40)\r\n            let onERC721ReceivedSelector := 0x150b7a02\r\n            mstore(m, onERC721ReceivedSelector)\r\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\r\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\r\n            mstore(add(m, 0x60), id)\r\n            mstore(add(m, 0x80), 0x80)\r\n            let n := mload(data)\r\n            mstore(add(m, 0xa0), n)\r\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\r\n            // Revert if the call reverts.\r\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\r\n                if returndatasize() {\r\n                    // Bubble up the revert if the call reverts.\r\n                    returndatacopy(m, 0x00, returndatasize())\r\n                    revert(m, returndatasize())\r\n                }\r\n            }\r\n            // Load the returndata and compare it.\r\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\r\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/Vectorized/dn404/blob/main/src/DN404.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title DN404\r\n/// @notice DN404 is a hybrid ERC20 and ERC721 implementation that mints\r\n/// and burns NFTs based on an account's ERC20 token balance.\r\n///\r\n/// @author vectorized.eth (@optimizoor)\r\n/// @author Quit (@0xQuit)\r\n/// @author Michael Amadi (@AmadiMichaels)\r\n/// @author cygaar (@0xCygaar)\r\n/// @author Thomas (@0xjustadev)\r\n/// @author Harrison (@PopPunkOnChain)\r\n///\r\n/// @dev Note:\r\n/// - The ERC721 data is stored in this base DN404 contract, however a\r\n///   DN404Mirror contract ***MUST*** be deployed and linked during\r\n///   initialization.\r\nabstract contract DN404 {\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                           EVENTS                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @dev Emitted when `target` sets their skipNFT flag to `status`.\r\n    event SkipNFTSet(address indexed target, bool status);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Thrown when attempting to double-initialize the contract.\r\n    error DNAlreadyInitialized();\r\n\r\n    /// @dev Thrown when attempting to transfer or burn more tokens than sender's balance.\r\n    error InsufficientBalance();\r\n\r\n    /// @dev Thrown when a spender attempts to transfer tokens with an insufficient allowance.\r\n    error InsufficientAllowance();\r\n\r\n    /// @dev Thrown when minting an amount of tokens that would overflow the max tokens.\r\n    error TotalSupplyOverflow();\r\n\r\n    /// @dev Thrown when the caller for a fallback NFT function is not the mirror contract.\r\n    error SenderNotMirror();\r\n\r\n    /// @dev Thrown when attempting to transfer tokens to the zero address.\r\n    error TransferToZeroAddress();\r\n\r\n    /// @dev Thrown when the mirror address provided for initialization is the zero address.\r\n    error MirrorAddressIsZero();\r\n\r\n    /// @dev Thrown when the link call to the mirror contract reverts.\r\n    error LinkMirrorContractFailed();\r\n\r\n    /// @dev Thrown when setting an NFT token approval\r\n    /// and the caller is not the owner or an approved operator.\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /// @dev Thrown when transferring an NFT\r\n    /// and the caller is not the owner or an approved operator.\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /// @dev Thrown when transferring an NFT and the from address is not the current owner.\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /// @dev Thrown when checking the owner or approved address for an non-existent NFT.\r\n    error TokenDoesNotExist();\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         CONSTANTS                          */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Amount of token balance that is equal to one NFT.\r\n    uint256 internal constant _WAD = 10 ** 18;\r\n\r\n    /// @dev The maximum token ID allowed for an NFT.\r\n    uint256 internal constant _MAX_TOKEN_ID = 0xffffffff;\r\n\r\n    /// @dev The maximum possible token supply.\r\n    uint256 internal constant _MAX_SUPPLY = 10 ** 18 * 0xffffffff - 1;\r\n\r\n    /// @dev The flag to denote that the address data is initialized.\r\n    uint8 internal constant _ADDRESS_DATA_INITIALIZED_FLAG = 1 << 0;\r\n\r\n    /// @dev The flag to denote that the address should skip NFTs.\r\n    uint8 internal constant _ADDRESS_DATA_SKIP_NFT_FLAG = 1 << 1;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          STORAGE                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct containing an address's token data and settings.\r\n    struct AddressData {\r\n        // Auxiliary data.\r\n        uint88 aux;\r\n        // Flags for `initialized` and `skipNFT`.\r\n        uint8 flags;\r\n        // The alias for the address. Zero means absence of an alias.\r\n        uint32 addressAlias;\r\n        // The number of NFT tokens.\r\n        uint32 ownedLength;\r\n        // The token balance in wei.\r\n        uint96 balance;\r\n    }\r\n\r\n    /// @dev A uint32 map in storage.\r\n    struct Uint32Map {\r\n        mapping(uint256 => uint256) map;\r\n    }\r\n\r\n    /// @dev A struct to wrap a uint256 in storage.\r\n    struct Uint256Ref {\r\n        uint256 value;\r\n    }\r\n\r\n    /// @dev Struct containing the base token contract storage.\r\n    struct DN404Storage {\r\n        // Current number of address aliases assigned.\r\n        uint32 numAliases;\r\n        // Next token ID to assign for an NFT mint.\r\n        uint32 nextTokenId;\r\n        // Total supply of minted NFTs.\r\n        uint32 totalNFTSupply;\r\n        // Total supply of tokens.\r\n        uint96 totalSupply;\r\n        // Address of the NFT mirror contract.\r\n        address mirrorERC721;\r\n        // Mapping of a user alias number to their address.\r\n        mapping(uint32 => address) aliasToAddress;\r\n        // Mapping of user operator approvals for NFTs.\r\n        mapping(address => mapping(address => bool)) operatorApprovals;\r\n        // Mapping of NFT token approvals to approved operators.\r\n        mapping(uint256 => address) tokenApprovals;\r\n        // Mapping of user allowances for token spenders.\r\n        mapping(address => mapping(address => Uint256Ref)) allowance;\r\n        // Mapping of NFT token IDs owned by an address.\r\n        mapping(address => Uint32Map) owned;\r\n        // Even indices: owner aliases. Odd indices: owned indices.\r\n        Uint32Map oo;\r\n        // Mapping of user account AddressData\r\n        mapping(address => AddressData) addressData;\r\n    }\r\n\r\n    /// @dev Returns a storage pointer for DN404Storage.\r\n    function _getDN404Storage() internal pure virtual returns (DN404Storage storage $) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // `uint72(bytes9(keccak256(\"DN404_STORAGE\")))`.\r\n            $.slot := 0xa20d6e21d0e5255308 // Truncate to 9 bytes to reduce bytecode size.\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         INITIALIZER                        */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Initializes the DN404 contract with an\r\n    /// `initialTokenSupply`, `initialTokenOwner` and `mirror` NFT contract address.\r\n    function _initializeDN404(\r\n        uint256 initialTokenSupply,\r\n        address initialSupplyOwner,\r\n        address mirror\r\n    ) internal virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        if ($.nextTokenId != 0) revert DNAlreadyInitialized();\r\n\r\n        if (mirror == address(0)) revert MirrorAddressIsZero();\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Make the call to link the mirror contract.\r\n            mstore(0x00, 0x0f4599e5) // `linkMirrorContract(address)`.\r\n            mstore(0x20, caller())\r\n            if iszero(and(eq(mload(0x00), 1), call(gas(), mirror, 0, 0x1c, 0x24, 0x00, 0x20))) {\r\n                mstore(0x00, 0xd125259c) // `LinkMirrorContractFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n\r\n        $.nextTokenId = 1;\r\n        $.mirrorERC721 = mirror;\r\n\r\n        if (initialTokenSupply != 0) {\r\n            if (initialSupplyOwner == address(0)) revert TransferToZeroAddress();\r\n            if (initialTokenSupply > _MAX_SUPPLY) revert TotalSupplyOverflow();\r\n\r\n            $.totalSupply = uint96(initialTokenSupply);\r\n            AddressData storage initialOwnerAddressData = _addressData(initialSupplyOwner);\r\n            initialOwnerAddressData.balance = uint96(initialTokenSupply);\r\n\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Emit the {Transfer} event.\r\n                mstore(0x00, initialTokenSupply)\r\n                log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, shl(96, initialSupplyOwner)))\r\n            }\r\n\r\n            _setSkipNFT(initialSupplyOwner, true);\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*               METADATA FUNCTIONS TO OVERRIDE               */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the name of the token.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the symbol of the token.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      ERC20 OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the decimals places of the token. Always 18.\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens in existence.\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return uint256(_getDN404Storage().totalSupply);\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens owned by `owner`.\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        return _getDN404Storage().addressData[owner].balance;\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _getDN404Storage().allowance[owner][spender].value;\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer `amount` tokens from the caller to `to`.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers `amount` tokens from `from` to `to`.\r\n    ///\r\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        Uint256Ref storage a = _getDN404Storage().allowance[from][msg.sender];\r\n        uint256 allowed = a.value;\r\n\r\n        if (allowed != type(uint256).max) {\r\n            if (amount > allowed) revert InsufficientAllowance();\r\n            unchecked {\r\n                a.value = allowed - amount;\r\n            }\r\n        }\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n        unchecked {\r\n            uint256 currentTokenSupply = uint256($.totalSupply) + amount;\r\n            if (_toUint(amount > _MAX_SUPPLY) | _toUint(currentTokenSupply > _MAX_SUPPLY) != 0) {\r\n                revert TotalSupplyOverflow();\r\n            }\r\n            $.totalSupply = uint96(currentTokenSupply);\r\n\r\n            uint256 toBalance = toAddressData.balance + amount;\r\n            toAddressData.balance = uint96(toBalance);\r\n\r\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\r\n                Uint32Map storage toOwned = $.owned[to];\r\n                uint256 toIndex = toAddressData.ownedLength;\r\n                uint256 toEnd = toBalance / _WAD;\r\n                _PackedLogs memory packedLogs = _packedLogsMalloc(_zeroFloorSub(toEnd, toIndex));\r\n                Uint32Map storage oo = $.oo;\r\n\r\n                if (packedLogs.logs.length != 0) {\r\n                    uint256 maxNFTId = currentTokenSupply / _WAD;\r\n                    uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\r\n                    uint256 id = $.nextTokenId;\r\n                    $.totalNFTSupply += uint32(packedLogs.logs.length);\r\n                    toAddressData.ownedLength = uint32(toEnd);\r\n                    // Mint loop.\r\n                    do {\r\n                        while (_get(oo, _ownershipIndex(id)) != 0) {\r\n                            if (++id > maxNFTId) id = 1;\r\n                        }\r\n                        _set(toOwned, toIndex, uint32(id));\r\n                        _setOwnerAliasAndOwnedIndex(oo, id, toAlias, uint32(toIndex++));\r\n                        _packedLogsAppend(packedLogs, to, id, 0);\r\n                        if (++id > maxNFTId) id = 1;\r\n                    } while (toIndex != toEnd);\r\n                    $.nextTokenId = uint32(id);\r\n                    _packedLogsSend(packedLogs, $.mirrorERC721);\r\n                }\r\n            }\r\n        }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, shl(96, to)))\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                  INTERNAL BURN FUNCTIONS                   */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n\r\n        uint256 fromBalance = fromAddressData.balance;\r\n        if (amount > fromBalance) revert InsufficientBalance();\r\n\r\n        uint256 currentTokenSupply = $.totalSupply;\r\n\r\n        unchecked {\r\n            fromBalance -= amount;\r\n            fromAddressData.balance = uint96(fromBalance);\r\n            currentTokenSupply -= amount;\r\n            $.totalSupply = uint96(currentTokenSupply);\r\n\r\n            Uint32Map storage fromOwned = $.owned[from];\r\n            uint256 fromIndex = fromAddressData.ownedLength;\r\n            uint256 nftAmountToBurn = _zeroFloorSub(fromIndex, fromBalance / _WAD);\r\n\r\n            if (nftAmountToBurn != 0) {\r\n                $.totalNFTSupply -= uint32(nftAmountToBurn);\r\n\r\n                _PackedLogs memory packedLogs = _packedLogsMalloc(nftAmountToBurn);\r\n                Uint32Map storage oo = $.oo;\r\n                uint256 fromEnd = fromIndex - nftAmountToBurn;\r\n                // Burn loop.\r\n                do {\r\n                    uint256 id = _get(fromOwned, --fromIndex);\r\n                    _setOwnerAliasAndOwnedIndex(oo, id, 0, 0);\r\n                    delete $.tokenApprovals[id];\r\n                    _packedLogsAppend(packedLogs, from, id, 1);\r\n                } while (fromIndex != fromEnd);\r\n\r\n                fromAddressData.ownedLength = uint32(fromIndex);\r\n                _packedLogsSend(packedLogs, $.mirrorERC721);\r\n            }\r\n        }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, amount)\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Moves `amount` of tokens from `from` to `to`.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n        _TransferTemps memory t;\r\n        t.fromOwnedLength = fromAddressData.ownedLength;\r\n        t.toOwnedLength = toAddressData.ownedLength;\r\n        t.fromBalance = fromAddressData.balance;\r\n\r\n        if (amount > t.fromBalance) revert InsufficientBalance();\r\n\r\n        unchecked {\r\n            t.fromBalance -= amount;\r\n            fromAddressData.balance = uint96(t.fromBalance);\r\n            toAddressData.balance = uint96(t.toBalance = toAddressData.balance + amount);\r\n\r\n            t.nftAmountToBurn = _zeroFloorSub(t.fromOwnedLength, t.fromBalance / _WAD);\r\n\r\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\r\n                if (from == to) t.toOwnedLength = t.fromOwnedLength - t.nftAmountToBurn;\r\n                t.nftAmountToMint = _zeroFloorSub(t.toBalance / _WAD, t.toOwnedLength);\r\n            }\r\n\r\n            _PackedLogs memory packedLogs = _packedLogsMalloc(t.nftAmountToBurn + t.nftAmountToMint);\r\n            Uint32Map storage oo = $.oo;\r\n\r\n            if (t.nftAmountToBurn != 0) {\r\n                Uint32Map storage fromOwned = $.owned[from];\r\n                uint256 fromIndex = t.fromOwnedLength;\r\n                uint256 fromEnd = fromIndex - t.nftAmountToBurn;\r\n                $.totalNFTSupply -= uint32(t.nftAmountToBurn);\r\n                fromAddressData.ownedLength = uint32(fromEnd);\r\n                // Burn loop.\r\n                do {\r\n                    uint256 id = _get(fromOwned, --fromIndex);\r\n                    _setOwnerAliasAndOwnedIndex(oo, id, 0, 0);\r\n                    delete $.tokenApprovals[id];\r\n                    _packedLogsAppend(packedLogs, from, id, 1);\r\n                } while (fromIndex != fromEnd);\r\n            }\r\n\r\n            if (t.nftAmountToMint != 0) {\r\n                Uint32Map storage toOwned = $.owned[to];\r\n                uint256 toIndex = t.toOwnedLength;\r\n                uint256 toEnd = toIndex + t.nftAmountToMint;\r\n                uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\r\n                uint256 maxNFTId = $.totalSupply / _WAD;\r\n                uint256 id = $.nextTokenId;\r\n                $.totalNFTSupply += uint32(t.nftAmountToMint);\r\n                toAddressData.ownedLength = uint32(toEnd);\r\n                // Mint loop.\r\n                do {\r\n                    while (_get(oo, _ownershipIndex(id)) != 0) {\r\n                        if (++id > maxNFTId) id = 1;\r\n                    }\r\n                    _set(toOwned, toIndex, uint32(id));\r\n                    _setOwnerAliasAndOwnedIndex(oo, id, toAlias, uint32(toIndex++));\r\n                    _packedLogsAppend(packedLogs, to, id, 0);\r\n                    if (++id > maxNFTId) id = 1;\r\n                } while (toIndex != toEnd);\r\n                $.nextTokenId = uint32(id);\r\n            }\r\n\r\n            if (packedLogs.logs.length != 0) {\r\n                _packedLogsSend(packedLogs, $.mirrorERC721);\r\n            }\r\n        }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, amount)\r\n            // forgefmt: disable-next-item\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), shr(96, shl(96, to)))\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Call must originate from the mirror contract.\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    ///   `msgSender` must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _transferFromNFT(address from, address to, uint256 id, address msgSender)\r\n        internal\r\n        virtual\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        Uint32Map storage oo = $.oo;\r\n\r\n        if (from != $.aliasToAddress[_get(oo, _ownershipIndex(id))]) {\r\n            revert TransferFromIncorrectOwner();\r\n        }\r\n\r\n        if (msgSender != from) {\r\n            if (!$.operatorApprovals[from][msgSender]) {\r\n                if (msgSender != $.tokenApprovals[id]) {\r\n                    revert TransferCallerNotOwnerNorApproved();\r\n                }\r\n            }\r\n        }\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n        fromAddressData.balance -= uint96(_WAD);\r\n\r\n        unchecked {\r\n            toAddressData.balance += uint96(_WAD);\r\n\r\n            mapping(address => Uint32Map) storage owned = $.owned;\r\n            Uint32Map storage fromOwned = owned[from];\r\n\r\n            _set(oo, _ownershipIndex(id), _registerAndResolveAlias(toAddressData, to));\r\n            delete $.tokenApprovals[id];\r\n\r\n            uint256 updatedId = _get(fromOwned, --fromAddressData.ownedLength);\r\n            _set(fromOwned, _get(oo, _ownedIndex(id)), uint32(updatedId));\r\n\r\n            _set(oo, _ownedIndex(updatedId), _get(oo, _ownedIndex(id)));\r\n            uint256 n = toAddressData.ownedLength++;\r\n            _set(owned[to], n, uint32(id));\r\n            _set(oo, _ownedIndex(id), uint32(n));\r\n        }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the {Transfer} event.\r\n            mstore(0x00, _WAD)\r\n            // forgefmt: disable-next-item\r\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), shr(96, shl(96, to)))\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                 INTERNAL APPROVE FUNCTIONS                 */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        _getDN404Storage().allowance[owner][spender].value = amount;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Emit the {Approval} event.\r\n            mstore(0x00, amount)\r\n            // forgefmt: disable-next-item\r\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, shl(96, owner)), shr(96, shl(96, spender)))\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                 DATA HITCHHIKING FUNCTIONS                 */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the auxiliary data for `owner`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _getAux(address owner) internal view virtual returns (uint88) {\r\n        return _getDN404Storage().addressData[owner].aux;\r\n    }\r\n\r\n    /// @dev Set the auxiliary data for `owner` to `value`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _setAux(address owner, uint88 value) internal virtual {\r\n        _getDN404Storage().addressData[owner].aux = value;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     SKIP NFT FUNCTIONS                     */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns true if account `owner` will skip NFT minting on token mints and transfers.\r\n    /// Returns false if account `owner` will mint NFTs on token mints and transfers.\r\n    function getSkipNFT(address owner) public view virtual returns (bool) {\r\n        AddressData storage d = _getDN404Storage().addressData[owner];\r\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) return _hasCode(owner);\r\n        return d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0;\r\n    }\r\n\r\n    /// @dev Sets the caller's skipNFT flag to `skipNFT`\r\n    ///\r\n    /// Emits a {SkipNFTSet} event.\r\n    function setSkipNFT(bool skipNFT) public virtual {\r\n        _setSkipNFT(msg.sender, skipNFT);\r\n    }\r\n\r\n    /// @dev Internal function to set account `owner` skipNFT flag to `state`\r\n    ///\r\n    /// Initializes account `owner` AddressData if it is not currently initialized.\r\n    ///\r\n    /// Emits a {SkipNFTSet} event.\r\n    function _setSkipNFT(address owner, bool state) internal virtual {\r\n        AddressData storage d = _addressData(owner);\r\n        if ((d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0) != state) {\r\n            d.flags ^= _ADDRESS_DATA_SKIP_NFT_FLAG;\r\n        }\r\n        emit SkipNFTSet(owner, state);\r\n    }\r\n\r\n    /// @dev Returns a storage data pointer for account `owner` AddressData\r\n    ///\r\n    /// Initializes account `owner` AddressData if it is not currently initialized.\r\n    function _addressData(address owner) internal virtual returns (AddressData storage d) {\r\n        d = _getDN404Storage().addressData[owner];\r\n\r\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) {\r\n            uint8 flags = _ADDRESS_DATA_INITIALIZED_FLAG;\r\n            if (_hasCode(owner)) flags |= _ADDRESS_DATA_SKIP_NFT_FLAG;\r\n            d.flags = flags;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the `addressAlias` of account `to`.\r\n    ///\r\n    /// Assigns and registers the next alias if `to` alias was not previously registered.\r\n    function _registerAndResolveAlias(AddressData storage toAddressData, address to)\r\n        internal\r\n        virtual\r\n        returns (uint32 addressAlias)\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n        addressAlias = toAddressData.addressAlias;\r\n        if (addressAlias == 0) {\r\n            addressAlias = ++$.numAliases;\r\n            toAddressData.addressAlias = addressAlias;\r\n            $.aliasToAddress[addressAlias] = to;\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     MIRROR OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the address of the mirror NFT contract.\r\n    function mirrorERC721() public view virtual returns (address) {\r\n        return _getDN404Storage().mirrorERC721;\r\n    }\r\n\r\n    /// @dev Returns the total NFT supply.\r\n    function _totalNFTSupply() internal view virtual returns (uint256) {\r\n        return _getDN404Storage().totalNFTSupply;\r\n    }\r\n\r\n    /// @dev Returns `owner` NFT balance.\r\n    function _balanceOfNFT(address owner) internal view virtual returns (uint256) {\r\n        return _getDN404Storage().addressData[owner].ownedLength;\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    /// Returns the zero address instead of reverting if the token does not exist.\r\n    function _ownerAt(uint256 id) internal view virtual returns (address) {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n        return $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\r\n        if (!_exists(id)) revert TokenDoesNotExist();\r\n        return _ownerAt(id);\r\n    }\r\n\r\n    /// @dev Returns if token `id` exists.\r\n    function _exists(uint256 id) internal view virtual returns (bool) {\r\n        return _ownerAt(id) != address(0);\r\n    }\r\n\r\n    /// @dev Returns the account approved to manage token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function _getApproved(uint256 id) internal view virtual returns (address) {\r\n        if (!_exists(id)) revert TokenDoesNotExist();\r\n        return _getDN404Storage().tokenApprovals[id];\r\n    }\r\n\r\n    /// @dev Sets `spender` as the approved account to manage token `id`, using `msgSender`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `msgSender` must be the owner or an approved operator for the token owner.\r\n    function _approveNFT(address spender, uint256 id, address msgSender)\r\n        internal\r\n        virtual\r\n        returns (address owner)\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\r\n\r\n        if (msgSender != owner) {\r\n            if (!$.operatorApprovals[owner][msgSender]) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n        }\r\n\r\n        $.tokenApprovals[id] = spender;\r\n    }\r\n\r\n    /// @dev Approve or remove the `operator` as an operator for `msgSender`,\r\n    /// without authorization checks.\r\n    function _setApprovalForAll(address operator, bool approved, address msgSender)\r\n        internal\r\n        virtual\r\n    {\r\n        _getDN404Storage().operatorApprovals[msgSender][operator] = approved;\r\n    }\r\n\r\n    /// @dev Fallback modifier to dispatch calls from the mirror NFT contract\r\n    /// to internal functions in this contract.\r\n    modifier dn404Fallback() virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        uint256 fnSelector = _calldataload(0x00) >> 224;\r\n\r\n        // `transferFromNFT(address,address,uint256,address)`.\r\n        if (fnSelector == 0xe5eb36c8) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x84) revert();\r\n\r\n            address from = address(uint160(_calldataload(0x04)));\r\n            address to = address(uint160(_calldataload(0x24)));\r\n            uint256 id = _calldataload(0x44);\r\n            address msgSender = address(uint160(_calldataload(0x64)));\r\n\r\n            _transferFromNFT(from, to, id, msgSender);\r\n            _return(1);\r\n        }\r\n        // `setApprovalForAll(address,bool,address)`.\r\n        if (fnSelector == 0x813500fc) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x64) revert();\r\n\r\n            address spender = address(uint160(_calldataload(0x04)));\r\n            bool status = _calldataload(0x24) != 0;\r\n            address msgSender = address(uint160(_calldataload(0x44)));\r\n\r\n            _setApprovalForAll(spender, status, msgSender);\r\n            _return(1);\r\n        }\r\n        // `isApprovedForAll(address,address)`.\r\n        if (fnSelector == 0xe985e9c5) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x44) revert();\r\n\r\n            address owner = address(uint160(_calldataload(0x04)));\r\n            address operator = address(uint160(_calldataload(0x24)));\r\n\r\n            _return(_toUint($.operatorApprovals[owner][operator]));\r\n        }\r\n        // `ownerOf(uint256)`.\r\n        if (fnSelector == 0x6352211e) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            uint256 id = _calldataload(0x04);\r\n\r\n            _return(uint160(_ownerOf(id)));\r\n        }\r\n        // `approveNFT(address,uint256,address)`.\r\n        if (fnSelector == 0xd10b6e0c) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x64) revert();\r\n\r\n            address spender = address(uint160(_calldataload(0x04)));\r\n            uint256 id = _calldataload(0x24);\r\n            address msgSender = address(uint160(_calldataload(0x44)));\r\n\r\n            _return(uint160(_approveNFT(spender, id, msgSender)));\r\n        }\r\n        // `getApproved(uint256)`.\r\n        if (fnSelector == 0x081812fc) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            uint256 id = _calldataload(0x04);\r\n\r\n            _return(uint160(_getApproved(id)));\r\n        }\r\n        // `balanceOfNFT(address)`.\r\n        if (fnSelector == 0xf5b100ea) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            address owner = address(uint160(_calldataload(0x04)));\r\n\r\n            _return(_balanceOfNFT(owner));\r\n        }\r\n        // `totalNFTSupply()`.\r\n        if (fnSelector == 0xe2c79281) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x04) revert();\r\n\r\n            _return(_totalNFTSupply());\r\n        }\r\n        // `implementsDN404()`.\r\n        if (fnSelector == 0xb7a94eb8) {\r\n            _return(1);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function for calls from mirror NFT contract.\r\n    fallback() external payable virtual dn404Fallback {}\r\n\r\n    receive() external payable virtual {}\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      PRIVATE HELPERS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct containing packed log data for {Transfer} events to be\r\n    /// emitted by the mirror NFT contract.\r\n    struct _PackedLogs {\r\n        uint256 offset;\r\n        uint256[] logs;\r\n    }\r\n\r\n    /// @dev Initiates memory allocation for packed logs with `n` log items.\r\n    function _packedLogsMalloc(uint256 n) private pure returns (_PackedLogs memory p) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Note that `p` implicitly allocates and advances the free memory pointer by\r\n            // 2 words, which we can safely mutate in `_packedLogsSend`.\r\n            let logs := mload(0x40)\r\n            mstore(logs, n) // Store the length.\r\n            let offset := add(0x20, logs)\r\n            mstore(0x40, add(offset, shl(5, n))) // Allocate memory.\r\n            mstore(add(0x20, p), logs) // Set `p.logs`.\r\n            mstore(p, offset) // Set `p.offset`.\r\n        }\r\n    }\r\n\r\n    /// @dev Adds a packed log item to `p` with address `a`, token `id` and burn flag `burnBit`.\r\n    function _packedLogsAppend(_PackedLogs memory p, address a, uint256 id, uint256 burnBit)\r\n        private\r\n        pure\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let offset := mload(p)\r\n            mstore(offset, or(or(shl(96, a), shl(8, id)), burnBit))\r\n            mstore(p, add(offset, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Calls the `mirror` NFT contract to emit {Transfer} events for packed logs `p`.\r\n    function _packedLogsSend(_PackedLogs memory p, address mirror) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let logs := mload(add(p, 0x20))\r\n            let o := sub(logs, 0x40) // Start of calldata to send.\r\n            mstore(o, 0x263c69d6) // `logTransfer(uint256[])`.\r\n            mstore(add(o, 0x20), 0x20) // Offset of `logs` in the calldata to send.\r\n            let n := add(0x44, shl(5, mload(logs))) // Length of calldata to send.\r\n            if iszero(and(eq(mload(o), 1), call(gas(), mirror, 0, add(o, 0x1c), n, o, 0x20))) {\r\n                revert(o, 0x00)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Struct of temporary variables for transfers.\r\n    struct _TransferTemps {\r\n        uint256 nftAmountToBurn;\r\n        uint256 nftAmountToMint;\r\n        uint256 fromBalance;\r\n        uint256 toBalance;\r\n        uint256 fromOwnedLength;\r\n        uint256 toOwnedLength;\r\n    }\r\n\r\n    /// @dev Returns if `a` has bytecode of non-zero length.\r\n    function _hasCode(address a) private view returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(a) // Can handle dirty upper bits.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the calldata value at `offset`.\r\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            value := calldataload(offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Executes a return opcode to return `x` and end the current call frame.\r\n    function _return(uint256 x) private pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, x)\r\n            return(0x00, 0x20)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `max(0, x - y)`.\r\n    function _zeroFloorSub(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            z := mul(gt(x, y), sub(x, y))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `i << 1`.\r\n    function _ownershipIndex(uint256 i) private pure returns (uint256) {\r\n        return i << 1;\r\n    }\r\n\r\n    /// @dev Returns `(i << 1) + 1`.\r\n    function _ownedIndex(uint256 i) private pure returns (uint256) {\r\n        unchecked {\r\n            return (i << 1) + 1;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `b ? 1 : 0`.\r\n    function _toUint(bool b) private pure returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := iszero(iszero(b))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the uint32 value at `index` in `map`.\r\n    function _get(Uint32Map storage map, uint256 index) private view returns (uint32 result) {\r\n        result = uint32(map.map[index >> 3] >> ((index & 7) << 5));\r\n    }\r\n\r\n    /// @dev Updates the uint32 value at `index` in `map`.\r\n    function _set(Uint32Map storage map, uint256 index, uint32 value) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, map.slot)\r\n            mstore(0x00, shr(3, index))\r\n            let s := keccak256(0x00, 0x40) // Storage slot.\r\n            let o := shl(5, and(index, 7)) // Storage slot offset (bits).\r\n            let v := sload(s) // Storage slot value.\r\n            let m := 0xffffffff // Value mask.\r\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner alias and the owned index together.\r\n    function _setOwnerAliasAndOwnedIndex(\r\n        Uint32Map storage map,\r\n        uint256 id,\r\n        uint32 ownership,\r\n        uint32 ownedIndex\r\n    ) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let value := or(shl(32, ownedIndex), and(0xffffffff, ownership))\r\n            mstore(0x20, map.slot)\r\n            mstore(0x00, shr(2, id))\r\n            let s := keccak256(0x00, 0x40) // Storage slot.\r\n            let o := shl(6, and(id, 3)) // Storage slot offset (bits).\r\n            let v := sload(s) // Storage slot value.\r\n            let m := 0xffffffffffffffff // Value mask.\r\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\r\n        }\r\n    }\r\n}\r\n\r\ncontract NoHandle is DN404, Ownable {\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    bool public isOpenTrading;\r\n    address public tokenURIAddress;\r\n\r\n    mapping(address => bool) public isWhitelist;\r\n    mapping(address => bool) public isPool;\r\n\r\n    constructor(\r\n        uint96 initialTokenSupply,\r\n        address initialSupplyOwner\r\n    ) \r\n    {\r\n\r\n        _initializeOwner(msg.sender);\r\n\r\n        _name = 'No Handle 404';\r\n        _symbol = 'No Handle 404';\r\n\r\n        address mirror = address(new DN404Mirror(msg.sender));\r\n        _initializeDN404(initialTokenSupply, initialSupplyOwner, mirror);\r\n        isWhitelist[msg.sender] = true;\r\n    }\r\n\r\n    function setSkipNFTbyOwner(address _address, bool skipNFT) public virtual {\r\n        _setSkipNFT(_address, skipNFT);\r\n    }\r\n\r\n    function setWhitelist(address whitelistAddress, bool _bool) public onlyOwner{\r\n        isWhitelist[whitelistAddress] = _bool;\r\n    }\r\n\r\n    function setOpenTrading(bool _bool) public onlyOwner{\r\n        isOpenTrading = _bool;\r\n    }\r\n\r\n    function setPool (address poolAddress, bool _bool) public onlyOwner{\r\n        isPool[poolAddress] = _bool;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override virtual {\r\n        if(isPool[to]){require(isOpenTrading || isWhitelist[from] || isWhitelist[to]);}\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory result) {\r\n        if (bytes(_baseURI).length != 0) {\r\n            result = string(abi.encodePacked(_baseURI, LibString.toString(tokenId)));\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"initialTokenSupply\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"initialSupplyOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DNAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkMirrorContractFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MirrorAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotMirror\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SkipNFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSkipNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOpenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"skipNFT\",\"type\":\"bool\"}],\"name\":\"setSkipNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skipNFT\",\"type\":\"bool\"}],\"name\":\"setSkipNFTbyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NoHandle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000792e29537e8244a7445afdf5015ea1e04e78bb2c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc0da236b4fdda51a22760c7460093458a02e6bd9a5194a78ba9d17566db147d"}