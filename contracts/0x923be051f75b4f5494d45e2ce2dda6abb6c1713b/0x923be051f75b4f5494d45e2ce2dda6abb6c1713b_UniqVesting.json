{"SourceCode": "// SPDX-License-Identifier: Ulicense\r\npragma solidity 0.8.2;\r\n\r\n\r\n// Presale and good ERC20 contracts interaction interface\r\ninterface IContracts {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\n// Broken ERC20 transfer for rescue ERC20 tokens\r\ninterface IErc20 {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    // some tokens (like USDT) not return bool as standard require\r\n    function transfer(address, uint256) external;\r\n}\r\n\r\n\r\n/// @title Uniqly vesting contract\r\n/// @author rav3n_pl\r\ncontract UniqVesting {\r\n    // user is eligible to receive bonus NFT tokens (default=0)\r\n    mapping(address => uint256) internal _bonus;\r\n\r\n    /// it will be used by future contract\r\n    function bonus(address user) external view returns (uint256) {\r\n        return _bonus[user];\r\n    }\r\n\r\n    // user has counted tokens from presale contract/s (default=false)\r\n    mapping(address => bool) internal _initialized;\r\n\r\n    function initialized(address user) external view returns (bool) {\r\n        return _initialized[user];\r\n    }\r\n\r\n    // total amount of token bought by presale contracts (default=0)\r\n    mapping(address => uint256) internal _tokensTotal;\r\n\r\n    function tokensTotal(address user) external view returns (uint256) {\r\n        return _tokensTotal[user];\r\n    }\r\n\r\n    // percentage already withdrawn by user (default=0)\r\n    mapping(address => uint256) internal _pctWithdrawn;\r\n\r\n    function pctWithdrawn(address user) external view returns (uint256) {\r\n        return _pctWithdrawn[user];\r\n    }\r\n\r\n    /// ERC20 token contract address\r\n    address public immutable token;\r\n\r\n    address[] internal _presales;\r\n\r\n    /// set of addresses of presale contracts\r\n    function presales(uint256 num) external view returns (address) {\r\n        return _presales[num];\r\n    }\r\n\r\n    uint256[] internal _rates;\r\n\r\n    /// rates ETH/token for each contract\r\n    function rates(uint256 num) external view returns (uint256) {\r\n        return _rates[num];\r\n    }\r\n\r\n    /// timestamp that users can start withdrawals\r\n    uint256 public immutable dateStart;\r\n    /// address of contract owner\r\n    address public owner;\r\n\r\n    /**\r\n    @dev contract constructor\r\n    @param _token address of ERC20 token contract\r\n    @param _presale address[] of collection contract addresses\r\n    @param _rate uint256[] ETH/token conversion rate for each contract\r\n    @param _dateStart uint256 timestamp from when users can start withdrawing tokens \r\n    */\r\n    constructor(\r\n        address _token,\r\n        address[] memory _presale,\r\n        uint256[] memory _rate,\r\n        uint256 _dateStart\r\n    ) {\r\n        token = _token;\r\n        _presales = _presale;\r\n        _rates = _rate;\r\n        dateStart = _dateStart;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    @dev user can call to calculate total tokens w/o taking them\r\n    @return total number of tokens eligible to withdraw\r\n    */\r\n    function calc() external returns (uint256) {\r\n        require(!_initialized[msg.sender], \"Account already initialized\");\r\n        _init(msg.sender);\r\n        return _tokensTotal[msg.sender];\r\n    }\r\n\r\n    /**\r\n    @dev Number of tokens eligible to withdraw\r\n    works only if user used calc() or claim() earlier\r\n    @return number of tokens available for user\r\n     */\r\n    function balanceOf(address user) external view returns (uint256) {\r\n        return (_tokensTotal[user] * (100 - _pctWithdrawn[user])) / 100;\r\n    }\r\n\r\n    // internal account init function checking and calculating amounts from contracts\r\n    function _init(address user) internal {\r\n        // for each presale contract\r\n        for (uint256 i = 0; i < _presales.length; i++) {\r\n            // count number of tokens\r\n            _tokensTotal[user] +=\r\n                IContracts(_presales[i]).balanceOf(user) *\r\n                _rates[i];\r\n        }\r\n        // don't do this again\r\n        _initialized[user] = true;\r\n    }\r\n\r\n    /**\r\n    @dev user call this function to withdraw tokens\r\n    @return bool true if any token transfer made\r\n    */\r\n    function claim() external returns (bool) {\r\n        // can't work before timestamp\r\n        require(block.timestamp > dateStart, \"Initial vesting in progress\");\r\n        // check for token amount if need\r\n        if (!_initialized[msg.sender]) {\r\n            _init(msg.sender);\r\n        }\r\n        // initial percent is 20\r\n        uint256 pct = 20;\r\n        uint256 time = dateStart + 1 weeks;\r\n        // every week to date\r\n        while (time < block.timestamp) {\r\n            pct += 4;\r\n            // can't be more than 100\r\n            if (pct == 100) {\r\n                break;\r\n            }\r\n            time += 1 weeks;\r\n        }\r\n        // do we have any % of tokens to withdraw?\r\n        if (pct > _pctWithdrawn[msg.sender]) {\r\n            uint256 thisTime = pct - _pctWithdrawn[msg.sender];\r\n            // is user a patient one?\r\n            // you've got a prize/s in near future!\r\n            if (pct > 59) {\r\n                // 60% for 1st bonus, even when initial 20% claimed\r\n                // but no bonus at all if claimed more than 20%\r\n                if (_pctWithdrawn[msg.sender] < 21) {\r\n                    _bonus[msg.sender] = 1;\r\n                    // second bonus after 100% and max 20% withdrawn\r\n                    if (pct == 100 && thisTime > 79) {\r\n                        _bonus[msg.sender] = 2;\r\n                    }\r\n                }\r\n            }\r\n            // how many tokens it would be...\r\n            uint256 amt = (_tokensTotal[msg.sender] * thisTime) / 100;\r\n            // yes, no reentrance please\r\n            _pctWithdrawn[msg.sender] += thisTime;\r\n            // transfer tokens counted\r\n            return IContracts(token).transfer(msg.sender, amt);\r\n        }\r\n        // did nothing\r\n        return false;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only for Owner\");\r\n        _;\r\n    }\r\n\r\n    // change ownership in two steps to be sure about owner address\r\n    address public newOwner;\r\n\r\n    // only current owner can delegate new one\r\n    function giveOwnership(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    // new owner need to accept ownership\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwner, \"You are not New Owner\");\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    @dev Add investor to vesting contract that not used collection contract\r\n    @param addr - address to add\r\n    @param amount - tokens due\r\n    */\r\n    function addInvestor(address addr, uint256 amount) external onlyOwner {\r\n        require(block.timestamp < dateStart, \"Too late do add investors\");\r\n        _addInvestor(addr, amount);\r\n    }\r\n\r\n    /**\r\n    @dev Add investors in bulk\r\n    @param addr table of addresses\r\n    @param amount table of amounts\r\n    */\r\n    function addInvestors(address[] calldata addr, uint256[] calldata amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(block.timestamp < dateStart, \"Too late do add investors\");\r\n        require(addr.length == amount.length, \"Data length not match\");\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _addInvestor(addr[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    // internal function adding investors\r\n    function _addInvestor(address addr, uint256 amt) internal {\r\n        require(_tokensTotal[addr] == 0, \"Address already on list\");\r\n        _tokensTotal[addr] = amt;\r\n    }\r\n\r\n    /**\r\n    @dev Function to recover accidentally send ERC20 tokens\r\n    @param _token ERC20 token address\r\n    */\r\n    function rescueERC20(address _token) external onlyOwner {\r\n        uint256 amt = IErc20(_token).balanceOf(address(this));\r\n        require(amt > 0, \"Nothing to rescue\");\r\n        IErc20(_token).transfer(owner, amt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_presale\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_dateStart\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"giveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pctWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"presales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokensTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UniqVesting", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003758e00b100876c854636ef8db61988931bb80250000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000607854f000000000000000000000000000000000000000000000000000000000000000040000000000000000000000001b32ba3d9a3f1e71e820f3317f07a877e46c7aa500000000000000000000000059391ec74f45c504cdc1d6d07648207a4c0feb1d000000000000000000000000ee2d3891a8248908957db8de8dbb6e7ab136c063000000000000000000000000232391765aacf9e075e66162ce4e453afcbf14b500000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000002574000000000000000000000000000000000000000000000000000000000000237c0000000000000000000000000000000000000000000000000000000000001ea70000000000000000000000000000000000000000000000000000000000001bc3", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e81a1223ba69eb3f81c424de100b73003a96daad7593ebd72bdf074e52b312c"}