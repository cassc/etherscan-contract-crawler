{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/yudi/git/gov-contracts/contracts/BancorGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Synthetix: YFIRewards.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\npragma solidity 0.6.12;\\n\\nimport \\\"@bancor/contracts-solidity/solidity/contracts/utility/Owned.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IExecutor.sol\\\";\\n\\n/**\\n * @title The Bancor Governance Contract\\n *\\n * Big thanks to synthetix / yearn.finance for the initial version!\\n */\\ncontract BancorGovernance is Owned {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint32 internal constant PPM_RESOLUTION = 1000000;\\n\\n    struct Proposal {\\n        uint256 id;\\n        mapping(address => uint256) votesFor;\\n        mapping(address => uint256) votesAgainst;\\n        uint256 totalVotesFor;\\n        uint256 totalVotesAgainst;\\n        uint256 start; // start timestmp;\\n        uint256 end; // start + voteDuration\\n        uint256 totalAvailableVotes;\\n        uint256 quorum;\\n        uint256 quorumRequired;\\n        bool open;\\n        bool executed;\\n        address proposer;\\n        address executor;\\n        string hash;\\n    }\\n\\n    /**\\n     * @notice triggered when a new proposal is created\\n     *\\n     * @param _id       proposal id\\n     * @param _start    voting start timestamp\\n     * @param _duration voting duration\\n     * @param _proposer proposal creator\\n     * @param _executor contract that will exeecute the proposal once it passes\\n     */\\n    event NewProposal(\\n        uint256 indexed _id,\\n        uint256 _start,\\n        uint256 _duration,\\n        address _proposer,\\n        address _executor\\n    );\\n\\n    /**\\n     * @notice triggered when voting on a proposal has ended\\n     *\\n     * @param _id               proposal id\\n     * @param _for              number of votes for the proposal\\n     * @param _against          number of votes against the proposal\\n     * @param _quorumReached    true if quorum was reached, false otherwise\\n     */\\n    event ProposalFinished(\\n        uint256 indexed _id,\\n        uint256 _for,\\n        uint256 _against,\\n        bool _quorumReached\\n    );\\n\\n    /**\\n     * @notice triggered when a proposal was successfully executed\\n     *\\n     * @param _id       proposal id\\n     * @param _executor contract that will execute the proposal once it passes\\n     */\\n    event ProposalExecuted(uint256 indexed _id, address indexed _executor);\\n\\n    /**\\n     * @notice triggered when a stake has been added to the contract\\n     *\\n     * @param _user     staker address\\n     * @param _amount   staked amount\\n     */\\n    event Staked(address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice triggered when a stake has been removed from the contract\\n     *\\n     * @param _user     staker address\\n     * @param _amount   unstaked amount\\n     */\\n    event Unstaked(address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @notice triggered when a user votes on a proposal\\n     *\\n     * @param _id       proposal id\\n     * @param _voter    voter addrerss\\n     * @param _vote     true if the vote is for the proposal, false otherwise\\n     * @param _weight   number of votes\\n     */\\n    event Vote(uint256 indexed _id, address indexed _voter, bool _vote, uint256 _weight);\\n\\n    /**\\n     * @notice triggered when the quorum is updated\\n     *\\n     * @param _quorum   new quorum\\n     */\\n    event QuorumUpdated(uint256 _quorum);\\n\\n    /**\\n     * @notice triggered when the minimum stake required to create a new proposal is updated\\n     *\\n     * @param _minimum  new minimum\\n     */\\n    event NewProposalMinimumUpdated(uint256 _minimum);\\n\\n    /**\\n     * @notice triggered when the vote duration is updated\\n     *\\n     * @param _voteDuration new vote duration\\n     */\\n    event VoteDurationUpdated(uint256 _voteDuration);\\n\\n    /**\\n     * @notice triggered when the vote lock duration is updated\\n     *\\n     * @param _duration new vote lock duration\\n     */\\n    event VoteLockDurationUpdated(uint256 _duration);\\n\\n    // PROPOSALS\\n\\n    // voting duration in seconds\\n    uint256 public voteDuration = 3 days;\\n    // vote lock in seconds\\n    uint256 public voteLockDuration = 3 days;\\n    // the fraction of vote lock used to lock voter to avoid rapid unstaking\\n    uint256 public constant voteLockFraction = 10;\\n    // minimum stake required to propose\\n    uint256 public newProposalMinimum = 1e18;\\n    // quorum needed for a proposal to pass, default = 20%\\n    uint256 public quorum = 200000;\\n    // sum of current total votes\\n    uint256 public totalVotes;\\n    // number of proposals\\n    uint256 public proposalCount;\\n    // proposals by id\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    // VOTES\\n\\n    // governance token used for votes\\n    IERC20 public immutable govToken;\\n\\n    // lock duration for each voter stake by voter address\\n    mapping(address => uint256) public voteLocks;\\n    // number of votes for each user\\n    mapping(address => uint256) private votes;\\n\\n    /**\\n     * @notice used to initialize a new BancorGovernance contract\\n     *\\n     * @param _govToken token used to represents votes\\n     */\\n    constructor(IERC20 _govToken) public {\\n        require(address(_govToken) != address(0), \\\"ERR_NO_TOKEN\\\");\\n        govToken = _govToken;\\n    }\\n\\n    /**\\n     * @notice allows execution by staker only\\n     */\\n    modifier onlyStaker() {\\n        require(votes[msg.sender] > 0, \\\"ERR_NOT_STAKER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice allows execution only when the proposal exists\\n     *\\n     * @param _id   proposal id\\n     */\\n    modifier proposalExists(uint256 _id) {\\n        Proposal memory proposal = proposals[_id];\\n        require(proposal.start > 0 && proposal.start < block.timestamp, \\\"ERR_INVALID_ID\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice allows execution only when the proposal is still open\\n     *\\n     * @param _id   proposal id\\n     */\\n    modifier proposalOpen(uint256 _id) {\\n        Proposal memory proposal = proposals[_id];\\n        require(proposal.open, \\\"ERR_NOT_OPEN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice allows execution only when the proposal with given id is open\\n     *\\n     * @param _id   proposal id\\n     */\\n    modifier proposalNotEnded(uint256 _id) {\\n        Proposal memory proposal = proposals[_id];\\n        require(proposal.end >= block.timestamp, \\\"ERR_ENDED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice allows execution only when the proposal with given id has ended\\n     *\\n     * @param _id   proposal id\\n     */\\n    modifier proposalEnded(uint256 _id) {\\n        Proposal memory proposal = proposals[_id];\\n        require(proposal.end <= block.timestamp, \\\"ERR_NOT_ENDED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice verifies that a value is greater than zero\\n     *\\n     * @param _value    value to check for zero\\n     */\\n    modifier greaterThanZero(uint256 _value) {\\n        require(_value > 0, \\\"ERR_ZERO_VALUE\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the vote lock on the sender\\n     *\\n     * @param _proposalEnd  proposal end time\\n     */\\n    function updateVoteLock(uint256 _proposalEnd) private onlyStaker {\\n        voteLocks[msg.sender] = Math.max(\\n            voteLocks[msg.sender],\\n            Math.max(_proposalEnd, voteLockDuration.add(block.timestamp))\\n        );\\n    }\\n\\n    /**\\n     * @notice does the common vote finalization\\n     *\\n     * @param _id the id of the proposal to vote\\n     * @param _for is this vote for or against the proposal\\n     */\\n    function vote(uint256 _id, bool _for)\\n        private\\n        onlyStaker\\n        proposalExists(_id)\\n        proposalOpen(_id)\\n        proposalNotEnded(_id)\\n    {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (_for) {\\n            uint256 votesAgainst = proposal.votesAgainst[msg.sender];\\n            // do we have against votes for this sender?\\n            if (votesAgainst > 0) {\\n                // yes, remove the against votes first\\n                proposal.totalVotesAgainst = proposal.totalVotesAgainst.sub(votesAgainst);\\n                proposal.votesAgainst[msg.sender] = 0;\\n            }\\n        } else {\\n            // get against votes for this sender\\n            uint256 votesFor = proposal.votesFor[msg.sender];\\n            // do we have for votes for this sender?\\n            if (votesFor > 0) {\\n                proposal.totalVotesFor = proposal.totalVotesFor.sub(votesFor);\\n                proposal.votesFor[msg.sender] = 0;\\n            }\\n        }\\n\\n        // calculate voting power in case voting against twice\\n        uint256 voteAmount = votesOf(msg.sender).sub(\\n            _for ? proposal.votesFor[msg.sender] : proposal.votesAgainst[msg.sender]\\n        );\\n\\n        if (_for) {\\n            // increase total for votes of the proposal\\n            proposal.totalVotesFor = proposal.totalVotesFor.add(voteAmount);\\n            // set for votes to the votes of the sender\\n            proposal.votesFor[msg.sender] = votesOf(msg.sender);\\n        } else {\\n            // increase total against votes of the proposal\\n            proposal.totalVotesAgainst = proposal.totalVotesAgainst.add(voteAmount);\\n            // set against votes to the votes of the sender\\n            proposal.votesAgainst[msg.sender] = votesOf(msg.sender);\\n        }\\n\\n        // update total votes available on the proposal\\n        proposal.totalAvailableVotes = totalVotes;\\n        // recalculate quorum based on overall votes\\n        proposal.quorum = calculateQuorumRatio(proposal);\\n        // update vote lock\\n        updateVoteLock(proposal.end);\\n\\n        // emit vote event\\n        emit Vote(proposal.id, msg.sender, _for, voteAmount);\\n    }\\n\\n    /**\\n     * @notice returns the quorum ratio of a proposal\\n     *\\n     * @param _proposal   proposal\\n     * @return quorum ratio\\n     */\\n    function calculateQuorumRatio(Proposal memory _proposal) internal view returns (uint256) {\\n        // calculate overall votes\\n        uint256 totalProposalVotes = _proposal.totalVotesFor.add(_proposal.totalVotesAgainst);\\n\\n        return totalProposalVotes.mul(PPM_RESOLUTION).div(totalVotes);\\n    }\\n\\n    /**\\n     * @notice removes the caller's entire stake\\n     */\\n    function exit() external {\\n        unstake(votesOf(msg.sender));\\n    }\\n\\n    /**\\n     * @notice returns the voting stats of a proposal\\n     *\\n     * @param _id   proposal id\\n     * @return votes for ratio\\n     * @return votes against ratio\\n     * @return quorum ratio\\n     */\\n    function proposalStats(uint256 _id)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Proposal memory proposal = proposals[_id];\\n\\n        uint256 forRatio = proposal.totalVotesFor;\\n        uint256 againstRatio = proposal.totalVotesAgainst;\\n\\n        // calculate overall total votes\\n        uint256 totalProposalVotes = forRatio.add(againstRatio);\\n        // calculate for votes ratio\\n        forRatio = forRatio.mul(PPM_RESOLUTION).div(totalProposalVotes);\\n        // calculate against votes ratio\\n        againstRatio = againstRatio.mul(PPM_RESOLUTION).div(totalProposalVotes);\\n        // calculate quorum ratio\\n        uint256 quorumRatio = totalProposalVotes.mul(PPM_RESOLUTION).div(\\n            proposal.totalAvailableVotes\\n        );\\n\\n        return (forRatio, againstRatio, quorumRatio);\\n    }\\n\\n    /**\\n     * @notice returns the voting power of a given address\\n     *\\n     * @param _voter    voter address\\n     * @return votes of given address\\n     */\\n    function votesOf(address _voter) public view returns (uint256) {\\n        return votes[_voter];\\n    }\\n\\n    /**\\n     * @notice returns the voting power of a given address against a given proposal\\n     *\\n     * @param _voter    voter address\\n     * @param _id       proposal id\\n     * @return votes of given address against given proposal\\n     */\\n    function votesAgainstOf(address _voter, uint256 _id) public view returns (uint256) {\\n        return proposals[_id].votesAgainst[_voter];\\n    }\\n\\n    /**\\n     * @notice returns the voting power of a given address for a given proposal\\n     *\\n     * @param _voter    voter address\\n     * @param _id       proposal id\\n     * @return votes of given address for given proposal\\n     */\\n    function votesForOf(address _voter, uint256 _id) public view returns (uint256) {\\n        return proposals[_id].votesFor[_voter];\\n    }\\n\\n    /**\\n     * @notice updates the quorum needed for proposals to pass\\n     *\\n     * @param _quorum required quorum\\n     */\\n    function setQuorum(uint256 _quorum) public ownerOnly greaterThanZero(_quorum) {\\n        // check quorum for not being above 100\\n        require(_quorum <= PPM_RESOLUTION, \\\"ERR_QUORUM_TOO_HIGH\\\");\\n\\n        quorum = _quorum;\\n        emit QuorumUpdated(_quorum);\\n    }\\n\\n    /**\\n     * @notice updates the minimum stake required to create a new proposal\\n     *\\n     * @param _minimum minimum stake\\n     */\\n    function setNewProposalMinimum(uint256 _minimum) public ownerOnly greaterThanZero(_minimum) {\\n        require(_minimum <= govToken.totalSupply(), \\\"ERR_EXCEEDS_TOTAL_SUPPLY\\\");\\n        newProposalMinimum = _minimum;\\n        emit NewProposalMinimumUpdated(_minimum);\\n    }\\n\\n    /**\\n     * @notice updates the proposals voting duration\\n     *\\n     * @param _voteDuration vote duration\\n     */\\n    function setVoteDuration(uint256 _voteDuration)\\n        public\\n        ownerOnly\\n        greaterThanZero(_voteDuration)\\n    {\\n        voteDuration = _voteDuration;\\n        emit VoteDurationUpdated(_voteDuration);\\n    }\\n\\n    /**\\n     * @notice updates the post vote lock duration\\n     *\\n     * @param _duration new vote lock duration\\n     */\\n    function setVoteLockDuration(uint256 _duration) public ownerOnly greaterThanZero(_duration) {\\n        voteLockDuration = _duration;\\n        emit VoteLockDurationUpdated(_duration);\\n    }\\n\\n    /**\\n     * @notice creates a new proposal\\n     *\\n     * @param _executor the address of the contract that will execute the proposal after it passes\\n     * @param _hash ipfs hash of the proposal description\\n     */\\n    function propose(address _executor, string memory _hash) public {\\n        require(votesOf(msg.sender) >= newProposalMinimum, \\\"ERR_INSUFFICIENT_STAKE\\\");\\n\\n        uint256 id = proposalCount;\\n\\n        // increment proposal count so next proposal gets the next higher id\\n        proposalCount = proposalCount.add(1);\\n\\n        // create new proposal\\n        Proposal memory proposal = Proposal({\\n            id: id,\\n            proposer: msg.sender,\\n            totalVotesFor: 0,\\n            totalVotesAgainst: 0,\\n            start: block.timestamp,\\n            end: voteDuration.add(block.timestamp),\\n            executor: _executor,\\n            hash: _hash,\\n            totalAvailableVotes: totalVotes,\\n            quorum: 0,\\n            quorumRequired: quorum,\\n            open: true,\\n            executed: false\\n        });\\n\\n        proposals[id] = proposal;\\n\\n        // lock proposer\\n        updateVoteLock(proposal.end);\\n\\n        // emit proposal event\\n        emit NewProposal(id, proposal.start, voteDuration, proposal.proposer, proposal.executor);\\n    }\\n\\n    /**\\n     * @notice executes a proposal\\n     *\\n     * @param _id id of the proposal to execute\\n     */\\n    function execute(uint256 _id) public proposalExists(_id) proposalEnded(_id) {\\n        // check for executed status\\n        require(!proposals[_id].executed, \\\"ERR_ALREADY_EXECUTED\\\");\\n\\n        // get voting info of proposal\\n        (uint256 forRatio, uint256 againstRatio, uint256 quorumRatio) = proposalStats(_id);\\n        // check proposal state\\n        require(quorumRatio >= proposals[_id].quorumRequired, \\\"ERR_NO_QUORUM\\\");\\n\\n        // if the proposal is still open\\n        if (proposals[_id].open) {\\n            // tally votes\\n            tallyVotes(_id);\\n        }\\n\\n        // set executed\\n        proposals[_id].executed = true;\\n\\n        // do execution on the contract to be executed\\n        // note that this is a safe call as it was part of the proposal that was voted on\\n        IExecutor(proposals[_id].executor).execute(_id, forRatio, againstRatio, quorumRatio);\\n\\n        // emit proposal executed event\\n        emit ProposalExecuted(_id, proposals[_id].executor);\\n    }\\n\\n    /**\\n     * @notice tallies votes of proposal with given id\\n     *\\n     * @param _id id of the proposal to tally votes for\\n     */\\n    function tallyVotes(uint256 _id)\\n        public\\n        proposalExists(_id)\\n        proposalOpen(_id)\\n        proposalEnded(_id)\\n    {\\n        // get voting info of proposal\\n        (uint256 forRatio, uint256 againstRatio, ) = proposalStats(_id);\\n\\n        // do we have a quorum?\\n        bool quorumReached = proposals[_id].quorum >= proposals[_id].quorumRequired;\\n        // close proposal\\n        proposals[_id].open = false;\\n\\n        // emit proposal finished event\\n        emit ProposalFinished(_id, forRatio, againstRatio, quorumReached);\\n    }\\n\\n    /**\\n     * @notice stakes vote tokens\\n     *\\n     * @param _amount amount of vote tokens to stake\\n     */\\n    function stake(uint256 _amount) public greaterThanZero(_amount) {\\n        // increase vote power\\n        votes[msg.sender] = votesOf(msg.sender).add(_amount);\\n        // increase total votes\\n        totalVotes = totalVotes.add(_amount);\\n        // transfer tokens to this contract\\n        govToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // lock staker to avoid flashloans messing around with total votes\\n        voteLocks[msg.sender] = Math.max(\\n            voteLocks[msg.sender],\\n            Math.max(voteLockDuration.div(voteLockFraction), 10 minutes).add(block.timestamp)\\n        );\\n\\n        // emit staked event\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice unstakes vote tokens\\n     *\\n     * @param _amount amount of vote tokens to unstake\\n     */\\n    function unstake(uint256 _amount) public greaterThanZero(_amount) {\\n        require(voteLocks[msg.sender] < block.timestamp, \\\"ERR_LOCKED\\\");\\n\\n        // reduce votes for user\\n        votes[msg.sender] = votesOf(msg.sender).sub(_amount);\\n        // reduce total votes\\n        totalVotes = totalVotes.sub(_amount);\\n        // transfer tokens back\\n        govToken.safeTransfer(msg.sender, _amount);\\n\\n        // emit unstaked event\\n        emit Unstaked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice votes for a proposal\\n     *\\n     * @param _id id of the proposal to vote for\\n     */\\n    function voteFor(uint256 _id) public {\\n        vote(_id, true);\\n    }\\n\\n    /**\\n     * @notice votes against a proposal\\n     *\\n     * @param _id id of the proposal to vote against\\n     */\\n    function voteAgainst(uint256 _id) public {\\n        vote(_id, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@bancor/contracts-solidity/solidity/contracts/utility/interfaces/IOwned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\n/*\\n    Owned contract interface\\n*/\\ninterface IOwned {\\n    // this function isn't since the compiler emits automatically generated getter functions as external\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external;\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@bancor/contracts-solidity/solidity/contracts/utility/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./interfaces/IOwned.sol\\\";\\r\\n\\r\\n/**\\r\\n  * @dev Provides support and utilities for contract ownership\\r\\n*/\\r\\ncontract Owned is IOwned {\\r\\n    address public override owner;\\r\\n    address public newOwner;\\r\\n\\r\\n    /**\\r\\n      * @dev triggered when the owner is updated\\r\\n      *\\r\\n      * @param _prevOwner previous owner\\r\\n      * @param _newOwner  new owner\\r\\n    */\\r\\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\\r\\n\\r\\n    /**\\r\\n      * @dev initializes a new Owned instance\\r\\n    */\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // allows execution by the owner only\\r\\n    modifier ownerOnly {\\r\\n        _ownerOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // error message binary size optimization\\r\\n    function _ownerOnly() internal view {\\r\\n        require(msg.sender == owner, \\\"ERR_ACCESS_DENIED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev allows transferring the contract ownership\\r\\n      * the new owner still needs to accept the transfer\\r\\n      * can only be called by the contract owner\\r\\n      *\\r\\n      * @param _newOwner    new contract owner\\r\\n    */\\r\\n    function transferOwnership(address _newOwner) public override ownerOnly {\\r\\n        require(_newOwner != owner, \\\"ERR_SAME_OWNER\\\");\\r\\n        newOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev used by a new owner to accept an ownership transfer\\r\\n    */\\r\\n    function acceptOwnership() override public {\\r\\n        require(msg.sender == newOwner, \\\"ERR_ACCESS_DENIED\\\");\\r\\n        emit OwnerUpdate(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n        newOwner = address(0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/yudi/git/gov-contracts/contracts/interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IExecutor {\\n    function execute(\\n        uint256 _id,\\n        uint256 _for,\\n        uint256 _against,\\n        uint256 _quorum\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_govToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"NewProposalMinimumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_quorumReached\",\"type\":\"bool\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"QuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteDuration\",\"type\":\"uint256\"}],\"name\":\"VoteDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"VoteLockDurationUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newProposalMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"proposalStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAvailableVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setNewProposalMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteDuration\",\"type\":\"uint256\"}],\"name\":\"setVoteDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setVoteLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLockFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"votesAgainstOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"votesForOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"votesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BancorGovernance", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}