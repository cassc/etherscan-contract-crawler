{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveBrokerage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserveBrokerage {\\n  function burnAndVest(uint amount, uint period) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IReserveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserveOracle {\\n  function activeMultiplier() external view returns (uint);\\n  function getCurrentPrice() external view returns (uint);\\n  function getCurrentMarketCap() external view returns (uint);\\n  function getCirculatingSupply() external view returns (uint);\\n  function getPercentageFromAth() external view returns (uint percentage);\\n  function setCurrentMultiplier() external returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRSRV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRSRV is IERC20 {\\n  function uniswapV2Router() external view returns (address);\\n  function uniswapV2Pair() external view returns (address);\\n  function mint(uint amount) external;\\n}\"\r\n    },\r\n    \"contracts/Reserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRSRV.sol\\\";\\nimport \\\"./interfaces/IReserveBrokerage.sol\\\";\\nimport \\\"./interfaces/IReserveOracle.sol\\\";\\n\\ncontract Reserve is Ownable, ReentrancyGuard {\\n  using SafeMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  struct UserBankInfo {\\n    uint count;\\n    uint pendingRewards;\\n    uint rewardDebt;\\n  }\\n\\n  struct BankInfo {\\n    uint id;\\n    uint cost;\\n    uint bonusMultiplier;\\n    uint reserveAmount;\\n    uint lastRewardTimestamp;\\n    uint accRsrvPerShare;\\n    uint nextUpgradeId;\\n    bool isReset;\\n    uint aprOnReset;\\n  }\\n\\n  IRSRV public immutable rsrv;\\n  address public constant deadAddress = address(0xdead);\\n  IReserveBrokerage public brokerage;\\n  IReserveOracle public oracle;\\n  uint public baseApr = 10000; // 100%\\n  \\n  uint private constant _DENOMINATOR = 10000;\\n  uint private slippage = 50; // 0.50%\\n\\n  BankInfo[] public bankInfo;\\n  mapping (uint => mapping (address => UserBankInfo)) public userBankInfo;\\n  mapping (address => uint) public userReserve;\\n  mapping (address => uint) public withdrawableRewards;\\n  mapping (uint => uint) public totalBankCountPerType;\\n  uint public totalBankCount;\\n  uint public startTimestamp;\\n\\n  mapping (address => bool) private _isWhitelisted;\\n\\n  /** EVENTS **/\\n\\n  event Purchased(\\n    address indexed account,\\n    uint indexed id,\\n    uint count\\n  );\\n\\n  event Upgraded(\\n    address indexed account,\\n    uint indexed id,\\n    uint indexed upgradeId,\\n    uint count\\n  );\\n\\n  event Claimed(\\n    address indexed account,\\n    uint amount\\n  );\\n\\n  constructor (\\n    address _rsrv,\\n    uint _startTimestamp\\n  ) {\\n    rsrv = IRSRV(_rsrv);\\n    startTimestamp = _startTimestamp;\\n\\n    // retail\\n    bankInfo.push(BankInfo({\\n      id: 0,\\n      cost: uint(100).mul(1e18),\\n      bonusMultiplier: 20000, // 200.00%\\n      reserveAmount: 5,\\n      lastRewardTimestamp: _startTimestamp,\\n      accRsrvPerShare: 0,\\n      nextUpgradeId: 1,\\n      isReset: false,\\n      aprOnReset: 800 // 8.00 %\\n    }));\\n\\n    // commercial\\n    bankInfo.push(BankInfo({\\n      id: 1,\\n      cost: uint(500).mul(1e18),\\n      bonusMultiplier: 40000, // 400.00 %\\n      reserveAmount: 50,\\n      lastRewardTimestamp: _startTimestamp,\\n      accRsrvPerShare: 0,\\n      nextUpgradeId: 2,\\n      isReset: false,\\n      aprOnReset: 1200 // 12.00 %\\n    }));\\n\\n    // investment\\n    bankInfo.push(BankInfo({\\n      id: 2,\\n      cost: uint(2000).mul(1e18),\\n      bonusMultiplier: 100000, // 1000.00 %\\n      reserveAmount: 250,\\n      lastRewardTimestamp: _startTimestamp,\\n      accRsrvPerShare: 0,\\n      nextUpgradeId: 0,\\n      isReset: false,\\n      aprOnReset: 2000 // 20.00 %\\n    }));\\n\\n    _isWhitelisted[_msgSender()] = true;\\n  }\\n\\n  /** RESTRICTED FUNCTIONS **/\\n\\n  function updateBaseApr(uint _baseApr) external onlyOwner {\\n    require (_baseApr > 0 && _baseApr <= _DENOMINATOR, \\\"Outside of bounds\\\");\\n    baseApr = _baseApr;\\n  }\\n\\n  function setBrokerage(address _brokerage) external onlyOwner {\\n    require (_brokerage != address(0), \\\"Must be valid address\\\");\\n    brokerage = IReserveBrokerage(_brokerage);\\n  }\\n\\n  function setSlippage(uint _slippage) external onlyOwner {\\n    require (_slippage > 0 && _slippage <= _DENOMINATOR, \\\"Outside of bounds\\\");\\n    slippage = _slippage;\\n  }\\n\\n  function setOracle(address _oracle) external onlyOwner {\\n    require (_oracle != address(0), \\\"Must be valid address\\\");\\n    oracle = IReserveOracle(_oracle);\\n  }\\n\\n  function add(uint _id, uint _cost) external onlyOwner {\\n    require (_id == totalBankTypes(), \\\"Invalid id\\\");\\n    massUpdate(true);\\n\\n    uint lastRewardTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\\n    bankInfo.push(BankInfo({\\n      id: _id,\\n      cost: _cost.mul(1e18),\\n      bonusMultiplier: 10000,\\n      reserveAmount: 0,\\n      lastRewardTimestamp: lastRewardTimestamp,\\n      accRsrvPerShare: 0,\\n      nextUpgradeId: 0,\\n      isReset: false,\\n      aprOnReset: 0\\n    }));\\n  }\\n\\n  function set(uint _id, uint _cost, uint _multiplier, uint _reserveAmount, uint _nextUpgradeId, uint _aprOnReset) external onlyOwner {\\n    require (_id < totalBankTypes(), \\\"Invalid id\\\");\\n    massUpdate(true);\\n\\n    bankInfo[_id].cost = _cost.mul(1e18);\\n    bankInfo[_id].bonusMultiplier = _multiplier;\\n    bankInfo[_id].reserveAmount = _reserveAmount;\\n    bankInfo[_id].nextUpgradeId = _nextUpgradeId;\\n    bankInfo[_id].aprOnReset = _aprOnReset;\\n  }\\n\\n  /** VIEW FUNCTIONS **/\\n\\n  function getRewardRate(address _account) external view returns (uint rewardRate) {\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      rewardRate = rewardRate.add(getRewardRate(_account, id));\\n    }\\n  }\\n\\n  function getRewardRate(address _account, uint _id) public view returns (uint rewardRate) {\\n    BankInfo memory bank = bankInfo[_id];\\n    UserBankInfo memory user = userBankInfo[_id][_account];\\n\\n    uint bankCount = totalBankCountPerType[_id];\\n    if (bankCount != 0) {\\n      uint multiplier = getMultiplier(block.timestamp, block.timestamp.add(1), bank.bonusMultiplier, bank.isReset, bank.aprOnReset);\\n      uint rewardRatePerBank = multiplier.mul(bank.cost).div(1e18);\\n      rewardRate = user.count.mul(rewardRatePerBank);\\n    }\\n  }\\n\\n  function getRewards(address _account) external view returns (uint rewards) {\\n    rewards = withdrawableRewards[_account].add(getPendingRewards(_account));\\n  }\\n\\n  function getPendingRewards(address _account) public view returns (uint rewards) {\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      rewards = rewards.add(getPendingRewards(_account, id));\\n    }\\n  }\\n\\n  function getPendingRewards(address _account, uint _id) public view returns (uint rewards) {\\n    BankInfo memory bank = bankInfo[_id];\\n    UserBankInfo memory user = userBankInfo[_id][_account];\\n\\n    uint accRsrvPerShare = bank.accRsrvPerShare;\\n    uint bankCount = totalBankCountPerType[_id];\\n    if (block.timestamp > bank.lastRewardTimestamp && bankCount != 0) {\\n      uint multiplier = getMultiplier(bank.lastRewardTimestamp, block.timestamp, bank.bonusMultiplier, bank.isReset, bank.aprOnReset);\\n      uint reward = multiplier.mul(bank.cost).mul(bankCount);\\n      accRsrvPerShare = accRsrvPerShare.add(reward.div(bankCount));\\n    }\\n\\n    rewards = user.pendingRewards.add(user.count.mul(accRsrvPerShare).div(1e18).sub(user.rewardDebt));\\n  }\\n\\n  function getBankCount(address _account) external view returns (uint[] memory count) {\\n    count = new uint[](bankInfo.length);\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      count[id] = getBankCountForType(_account, id);\\n    }\\n  }\\n\\n  function getBankCountForType(address _account, uint _id) public view returns (uint count) {\\n    return userBankInfo[_id][_account].count;\\n  }\\n\\n  function isAboveReserve(address _account) public view returns (bool passed, uint amountNedeed) {\\n    uint currentPrice = oracle.getCurrentPrice();\\n    uint amountRequired;\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      amountRequired = amountRequired.add(getRequiredReserveForType(_account, id, currentPrice));\\n    }\\n\\n    uint slippageAmount = amountRequired.mul(slippage).div(_DENOMINATOR);\\n    uint minimumAmountRequired = amountRequired.sub(slippageAmount);\\n\\n    if (userReserve[_account] >= minimumAmountRequired) {\\n      passed = true;\\n      amountNedeed = 0;\\n    } else {\\n      passed = false;\\n      amountNedeed = amountRequired.sub(userReserve[_account]);\\n    }\\n  }\\n\\n  function getCurrentReserveInUsd(address _account) external view returns (uint reserveInUsd) {\\n    return userReserve[_account].mul(oracle.getCurrentPrice()).div(1e18);\\n  }\\n\\n  function getRequiredReserveForType(address _account, uint _id, uint _currentPrice) public view returns (uint amountRequired) {\\n    uint requiredReserveInUsd = getRequiredReserveInUsdForType(_account, _id).mul(1e18);\\n    amountRequired = requiredReserveInUsd.mul(1e18).div(_currentPrice);\\n  }\\n\\n  function getRequiredReserveInUsd(address _account) public view returns (uint reserveAmount) {\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      reserveAmount = reserveAmount.add(getRequiredReserveInUsdForType(_account, id));\\n    }\\n  }\\n\\n  function getRequiredReserveInUsdForType(address _account, uint _id) public view returns (uint reserveAmount) {\\n    uint count = getBankCountForType(_account, _id);\\n    reserveAmount = bankInfo[_id].reserveAmount.mul(count);\\n  }\\n\\n  function totalBankTypes() public view returns (uint) {\\n    return bankInfo.length;\\n  }\\n\\n  function getBankApr(uint _id) external view returns (uint) {\\n    BankInfo memory bank = bankInfo[_id];\\n    return getMultiplier(block.timestamp, block.timestamp.add(1), bank.bonusMultiplier, bank.isReset, bank.aprOnReset).mul(100).mul(365 days);\\n  }\\n\\n  /** INTERNAL FUNCTIONS **/\\n\\n  function getMultiplier(uint _from, uint _to, uint _bonusMultiplier, bool _isReset, uint _aprOnReset) internal view returns (uint) {\\n    if (_to < _from) return 0;\\n\\n    uint base;\\n    if (_isReset) {\\n      base = _aprOnReset.mul(1e18).div(_DENOMINATOR).div(365 days);\\n      return _to.sub(_from).mul(base);\\n    } else {\\n      base = baseApr.mul(1e18).div(_DENOMINATOR).div(365 days);\\n      return _to.sub(_from).mul(base).mul(_bonusMultiplier).div(_DENOMINATOR);\\n    }\\n  }\\n\\n  function massUpdate(bool _updateApr) internal {\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      updateBankType(id, false);\\n    }\\n\\n    if (_updateApr) _setApr();\\n  }\\n\\n  function updateBankType(uint _id, bool _updateApr) internal {\\n    BankInfo storage bank = bankInfo[_id];\\n\\n    if (block.timestamp <= bank.lastRewardTimestamp) {\\n      if (_updateApr) _setApr();\\n      return;\\n    }\\n\\n    uint bankCount = totalBankCountPerType[_id];\\n    if (bankCount == 0) {\\n      bank.lastRewardTimestamp = block.timestamp;\\n      if (_updateApr) _setApr();\\n      return;\\n    }\\n\\n    uint multiplier = getMultiplier(bank.lastRewardTimestamp, block.timestamp, bank.bonusMultiplier, bank.isReset, bank.aprOnReset);\\n    if (multiplier > 0) {\\n      uint reward = multiplier.mul(bank.cost).mul(bankCount);\\n      rsrv.mint(reward.div(1e18));\\n      bank.accRsrvPerShare = bank.accRsrvPerShare.add(reward.div(bankCount));\\n    }\\n\\n    bank.lastRewardTimestamp = block.timestamp;\\n    if (_updateApr) _setApr();\\n  }\\n\\n  function safeRsrvTransfer(address _recipient, uint _amount) internal {\\n    uint balance = rsrv.balanceOf(address(this));\\n    if (_amount > balance) {\\n      _amount = balance;\\n    }\\n\\n    SafeERC20.safeTransfer(rsrv, _recipient, _amount);\\n  }\\n\\n  function _setApr() internal {\\n    uint _baseApr = oracle.setCurrentMultiplier();\\n    if (_baseApr == 1) {\\n      for (uint id = 0; id < totalBankTypes(); id++) {\\n        bankInfo[id].isReset = true;\\n      }\\n\\n      baseApr = _DENOMINATOR;\\n    } else {\\n      baseApr = _baseApr;\\n    }\\n  }\\n\\n  function _purchase(address _account, uint _id, uint _count) internal returns (uint _cost) {\\n    require (_id < totalBankTypes(), \\\"Invalid id\\\");\\n    require (_count > 0, \\\"Count must not be zero\\\");\\n    updateBankType(_id, true);\\n\\n    BankInfo memory bank = bankInfo[_id];\\n    require(!bank.isReset, \\\"Can not purchase disabled bank type\\\");\\n    UserBankInfo storage user = userBankInfo[_id][_account];\\n    _cost = _count.mul(bank.cost);\\n\\n    if (user.count > 0) {\\n      uint pendingRewards = user.count.mul(bank.accRsrvPerShare).div(1e18).sub(user.rewardDebt);\\n      if (pendingRewards > 0) {\\n        user.pendingRewards = user.pendingRewards.add(pendingRewards);\\n      }\\n    }\\n\\n    if (_count > 0) {\\n      uint currentPrice = oracle.getCurrentPrice();\\n      userReserve[_account] = userReserve[_account].add(_count.mul(bank.reserveAmount).mul(1e36).div(currentPrice));\\n      user.count = user.count.add(_count);\\n      totalBankCountPerType[_id] = totalBankCountPerType[_id].add(_count);\\n      totalBankCount = totalBankCount.add(_count);\\n    }\\n\\n    user.rewardDebt = user.count.mul(bank.accRsrvPerShare).div(1e18);\\n    emit Purchased(_account, _id, _count);\\n  }\\n\\n  function _upgrade(address _account, uint _id, uint _count) internal returns (uint _nextUpgradeId) {\\n    require (_id < totalBankTypes(), \\\"Invalid id\\\");\\n    require (_count > 0, \\\"Count must not be zero\\\");\\n    updateBankType(_id, false);\\n\\n    BankInfo memory bank = bankInfo[_id];\\n    require (bank.nextUpgradeId != 0, \\\"Bank does not have an upgrade\\\");\\n\\n    UserBankInfo storage user = userBankInfo[_id][_account];\\n    require (user.count >= _count, \\\"Count is invalid\\\");\\n\\n    if (user.count > 0) {\\n      uint pendingRewards = user.count.mul(bank.accRsrvPerShare).div(1e18).sub(user.rewardDebt);\\n      if (pendingRewards > 0) {\\n        user.pendingRewards = user.pendingRewards.add(pendingRewards);\\n      }\\n    }\\n\\n    _nextUpgradeId = bank.nextUpgradeId;\\n    updateBankType(_nextUpgradeId, true);\\n    \\n    BankInfo memory _upgradeBank = bankInfo[_nextUpgradeId];\\n    UserBankInfo storage _upgradeUser = userBankInfo[_nextUpgradeId][_account];\\n\\n    if (_upgradeUser.count > 0) {\\n      uint pendingRewards = _upgradeUser.count.mul(_upgradeBank.accRsrvPerShare).div(1e18).sub(_upgradeUser.rewardDebt);\\n      if (pendingRewards > 0) {\\n        _upgradeUser.pendingRewards = _upgradeUser.pendingRewards.add(pendingRewards);\\n      }\\n    }\\n\\n    user.count = user.count.sub(_count);\\n    totalBankCountPerType[_id] = totalBankCountPerType[_id].sub(_count);\\n    user.rewardDebt = user.count.mul(bank.accRsrvPerShare).div(1e18);\\n    uint currentPrice = oracle.getCurrentPrice();\\n    uint reserveToRemove = _count.mul(bank.reserveAmount).mul(1e36).div(currentPrice);\\n    if (reserveToRemove > userReserve[_account]) {\\n      userReserve[_account] = 0;\\n    } else {\\n      userReserve[_account] = userReserve[_account].sub(reserveToRemove);\\n    }\\n\\n    userReserve[_account] = userReserve[_account].add(_count.mul(_upgradeBank.reserveAmount).mul(1e36).div(currentPrice));\\n    _upgradeUser.count = _upgradeUser.count.add(_count);\\n    totalBankCountPerType[_nextUpgradeId] = totalBankCountPerType[_nextUpgradeId].add(_count);\\n    _upgradeUser.rewardDebt = _upgradeUser.count.mul(_upgradeBank.accRsrvPerShare).div(1e18);\\n\\n    emit Upgraded(_account, _id, _nextUpgradeId, _count);\\n  }\\n\\n  function _processRewards(address _account, uint _id) internal {\\n    require (_id < totalBankTypes(), \\\"Invalid id\\\");\\n\\n    BankInfo memory bank = bankInfo[_id];\\n    UserBankInfo storage user = userBankInfo[_id][_account];\\n\\n    if (user.count > 0) {\\n      uint pendingRewards = user.count.mul(bank.accRsrvPerShare).div(1e18).sub(user.rewardDebt);\\n      if (pendingRewards > 0) {\\n        user.pendingRewards = user.pendingRewards.add(pendingRewards);\\n      }\\n    }\\n\\n    user.rewardDebt = user.count.mul(bank.accRsrvPerShare).div(1e18);\\n  }\\n\\n  function _claim(address _account) internal {\\n    massUpdate(true);\\n\\n    uint totalRewards;\\n    for (uint id = 0; id < totalBankTypes(); id++) {\\n      _processRewards(_account, id);\\n      totalRewards = totalRewards.add(userBankInfo[id][_account].pendingRewards);\\n      userBankInfo[id][_account].pendingRewards = 0;\\n    }\\n\\n    withdrawableRewards[_account] = withdrawableRewards[_account].add(totalRewards);\\n  }\\n\\n  /** PUBLIC FUNCTIONS **/\\n\\n  function purchaseBank(uint _id, uint _count) external nonReentrant {\\n    uint cost = _purchase(_msgSender(), _id, _count);\\n    SafeERC20.safeTransferFrom(rsrv, _msgSender(), deadAddress, cost);\\n  }\\n\\n  function claimBank(address _account, uint _id, uint _count) external returns (uint cost) {\\n    require (_msgSender() == address(brokerage) || _isWhitelisted[_msgSender()], \\\"Only whitelisted accounts can call this function\\\");\\n    cost = _purchase(_account, _id, _count);\\n  }\\n\\n  function upgradeBank(uint _id, uint _count) external nonReentrant {\\n    uint nextUpgradeId = _upgrade(_msgSender(), _id, _count);\\n    uint cost = _count.mul(bankInfo[nextUpgradeId].cost.sub(bankInfo[_id].cost));\\n    SafeERC20.safeTransferFrom(rsrv, _msgSender(), deadAddress, cost);\\n  }\\n\\n  function claimUpgrade(address _account, uint _id, uint _count) external returns (uint cost) {\\n    require (_msgSender() == address(brokerage) || _isWhitelisted[_msgSender()], \\\"Only whitelisted accounts can call this function\\\");\\n    uint nextUpgradeId = _upgrade(_account, _id, _count);\\n    cost = _count.mul(bankInfo[nextUpgradeId].cost.sub(bankInfo[_id].cost));\\n  }\\n\\n  function coverReserve(bool _fromRewards, bool _claimRest) external {\\n    (bool passed, uint amountNeeded) = isAboveReserve(_msgSender());\\n    _claim(_msgSender());\\n\\n    if (!passed) {\\n      if (_fromRewards) {\\n        require (withdrawableRewards[_msgSender()] > amountNeeded, \\\"Not enough rewards to cover needed reserve\\\");\\n        withdrawableRewards[_msgSender()] = withdrawableRewards[_msgSender()].sub(amountNeeded);\\n        if (_claimRest) {\\n          uint amount = withdrawableRewards[_msgSender()];\\n          safeRsrvTransfer(_msgSender(), amount);\\n          withdrawableRewards[_msgSender()] = 0;\\n          emit Claimed(_msgSender(), amount);\\n        }\\n      } else {\\n        SafeERC20.safeTransferFrom(rsrv, _msgSender(), deadAddress, amountNeeded);\\n        userReserve[_msgSender()] = userReserve[_msgSender()].add(amountNeeded);\\n        if (_claimRest) {\\n          uint amount = withdrawableRewards[_msgSender()];\\n          safeRsrvTransfer(_msgSender(), amount);\\n          withdrawableRewards[_msgSender()] = 0;\\n          emit Claimed(_msgSender(), amount);\\n        }\\n      }\\n    }\\n  }\\n\\n  function claimRewards() external nonReentrant {\\n    (bool passed, ) = isAboveReserve(_msgSender());\\n    require (passed, \\\"User does not have enough reserve to complete claim\\\");\\n    \\n    _claim(_msgSender());\\n    uint amount = withdrawableRewards[_msgSender()];\\n    safeRsrvTransfer(_msgSender(), amount);\\n    withdrawableRewards[_msgSender()] = 0;\\n    emit Claimed(_msgSender(), amount);\\n  }\\n\\n  function compoundRewards(uint _id, uint _count, bool _claimRest) external nonReentrant {\\n    (bool passed, ) = isAboveReserve(_msgSender());\\n    require (passed, \\\"User does not have enough reserve to complete compound\\\");\\n\\n    _claim(_msgSender());\\n    uint cost = _purchase(_msgSender(), _id, _count);\\n    require (withdrawableRewards[_msgSender()] >= cost, \\\"Reward amount is insufficient to cover bank cost\\\");\\n\\n    uint left = withdrawableRewards[_msgSender()].sub(cost);\\n    withdrawableRewards[_msgSender()] = left;\\n    if (left > 0 && _claimRest) {\\n      safeRsrvTransfer(_msgSender(), left);\\n      withdrawableRewards[_msgSender()] = 0;\\n      emit Claimed(_msgSender(), left);\\n    }\\n  }\\n\\n  function burnAndVestRewards(uint _amount, uint _period, bool _claimRest) external nonReentrant {\\n    require (address(brokerage) != address(0), \\\"Brokerage is not set\\\");\\n    (bool passed, ) = isAboveReserve(_msgSender());\\n    require (passed, \\\"User does not have enough reserve to complete burn and vest\\\");\\n\\n    _claim(_msgSender());\\n    require (withdrawableRewards[_msgSender()] >= _amount, \\\"Amount is bigger than total rewards available\\\");\\n    brokerage.burnAndVest(_amount, _period);\\n    SafeERC20.safeTransfer(rsrv, deadAddress, _amount);\\n\\n    uint left = withdrawableRewards[_msgSender()].sub(_amount);\\n    withdrawableRewards[_msgSender()] = left;\\n    if (left > 0 && _claimRest) {\\n      safeRsrvTransfer(_msgSender(), left);\\n      withdrawableRewards[_msgSender()] = 0;\\n      emit Claimed(_msgSender(), left);\\n    }\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rsrv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"upgradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRsrvPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUpgradeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReset\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"aprOnReset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brokerage\",\"outputs\":[{\"internalType\":\"contract IReserveBrokerage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimRest\",\"type\":\"bool\"}],\"name\":\"burnAndVestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"claimBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"claimUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimRest\",\"type\":\"bool\"}],\"name\":\"compoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_fromRewards\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claimRest\",\"type\":\"bool\"}],\"name\":\"coverReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBankApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBankCount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"count\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBankCountForType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCurrentReserveInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"getRequiredReserveForType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRequiredReserveInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequiredReserveInUsdForType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAboveReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountNedeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IReserveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"purchaseBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rsrv\",\"outputs\":[{\"internalType\":\"contract IRSRV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextUpgradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aprOnReset\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brokerage\",\"type\":\"address\"}],\"name\":\"setBrokerage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBankCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBankCountPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBankTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseApr\",\"type\":\"uint256\"}],\"name\":\"updateBaseApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"upgradeBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBankInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Reserve", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc2d17dfa245dc2aa3705fc75d2f7df3fe6440c70000000000000000000000000000000000000000000000000000000065416e54", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}