{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n\\t/**\\n\\t * @dev returns the asset price in ETH\\n\\t * @param asset the address of the asset\\n\\t * @return the ETH price of the asset\\n\\t **/\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n\\tfunction baseVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when new stable debt is minted\\n\\t * @param user The address of the user who triggered the minting\\n\\t * @param onBehalfOf The recipient of stable debt tokens\\n\\t * @param amount The amount minted\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The increase in balance since the last action of the user\\n\\t * @param newRate The rate of the debt after the minting\\n\\t * @param avgStableRate The new average stable rate after the minting\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Mint(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 newRate,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when new stable debt is burned\\n\\t * @param user The address of the user\\n\\t * @param amount The amount being burned\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The the increase in balance since the last action of the user\\n\\t * @param avgStableRate The new average stable rate after the burning\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Burn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the average rate of all the stable rate loans.\\n\\t * @return The average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user debt\\n\\t * @return The stable rate of the user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the user\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the principal, the total supply and the average stable rate\\n\\t **/\\n\\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the total supply\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param onBehalfOf The address of the user on which behalf minting has been performed\\n\\t * @param value The amount to be minted\\n\\t * @param index The last index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when variable debt is burnt\\n\\t * @param user The user which debt has been burned\\n\\t * @param amount The amount of debt being burned\\n\\t * @param index The index of the user\\n\\t **/\\n\\tevent Burn(address indexed user, uint256 amount, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * @param user The user which debt is burnt\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/configuration/UserConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n\\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n\\t/**\\n\\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param borrowing True if the user is borrowing the reserve, false otherwise\\n\\t **/\\n\\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction setUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap storage self,\\n\\t\\tuint256 reserveIndex,\\n\\t\\tbool usingAsCollateral\\n\\t) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n\\t\\t\\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateralOrBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing, false otherwise\\n\\t **/\\n\\tfunction isBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been borrowing from any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data & BORROWING_MASK != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has not been using any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data == 0;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/helpers/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Helpers library\\n * @author Aave\\n */\\nlibrary Helpers {\\n\\t/**\\n\\t * @dev Fetches the user current stable and variable debt balances\\n\\t * @param user The user address\\n\\t * @param reserve The reserve data object\\n\\t * @return The stable and variable debt balance\\n\\t **/\\n\\tfunction getUserCurrentDebt(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData storage reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getUserCurrentDebtMemory(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData memory reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/GenericLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title GenericLogic library\\n * @author Aave\\n * @title Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\n\\n\\tstruct balanceDecreaseAllowedLocalVars {\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 amountToDecreaseInETH;\\n\\t\\tuint256 collateralBalanceAfterDecrease;\\n\\t\\tuint256 liquidationThresholdAfterDecrease;\\n\\t\\tuint256 healthFactorAfterDecrease;\\n\\t\\tbool reserveUsageAsCollateralEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if a specific balance decrease is allowed\\n\\t * (i.e. doesn't bring the user borrow position health factor under HEALTH_FACTOR_LIQUIDATION_THRESHOLD)\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param user The address of the user\\n\\t * @param amount The amount to decrease\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The list of all the active reserves\\n\\t * @param oracle The address of the oracle contract\\n\\t * @return true if the decrease of the balance is allowed\\n\\t **/\\n\\tfunction balanceDecreaseAllowed(\\n\\t\\taddress asset,\\n\\t\\taddress user,\\n\\t\\tuint256 amount,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap calldata userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view returns (bool) {\\n\\t\\tif (!userConfig.isBorrowingAny() || !userConfig.isUsingAsCollateral(reservesData[asset].id)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbalanceDecreaseAllowedLocalVars memory vars;\\n\\n\\t\\t(, vars.liquidationThreshold, , vars.decimals, ) = reservesData[asset].configuration.getParams();\\n\\n\\t\\tif (vars.liquidationThreshold == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t(vars.totalCollateralInETH, vars.totalDebtInETH, , vars.avgLiquidationThreshold, ) = calculateUserAccountData(\\n\\t\\t\\tuser,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\tif (vars.totalDebtInETH == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tvars.amountToDecreaseInETH = IPriceOracleGetter(oracle).getAssetPrice(asset).mul(amount).div(\\n\\t\\t\\t10 ** vars.decimals\\n\\t\\t);\\n\\n\\t\\tvars.collateralBalanceAfterDecrease = vars.totalCollateralInETH.sub(vars.amountToDecreaseInETH);\\n\\n\\t\\t//if there is a borrow, there can't be 0 collateral\\n\\t\\tif (vars.collateralBalanceAfterDecrease == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tvars.liquidationThresholdAfterDecrease = vars\\n\\t\\t\\t.totalCollateralInETH\\n\\t\\t\\t.mul(vars.avgLiquidationThreshold)\\n\\t\\t\\t.sub(vars.amountToDecreaseInETH.mul(vars.liquidationThreshold))\\n\\t\\t\\t.div(vars.collateralBalanceAfterDecrease);\\n\\n\\t\\tuint256 healthFactorAfterDecrease = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.collateralBalanceAfterDecrease,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.liquidationThresholdAfterDecrease\\n\\t\\t);\\n\\n\\t\\treturn healthFactorAfterDecrease >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\\n\\t}\\n\\n\\tstruct CalculateUserAccountDataVars {\\n\\t\\tuint256 reserveUnitPrice;\\n\\t\\tuint256 tokenUnit;\\n\\t\\tuint256 compoundedLiquidityBalance;\\n\\t\\tuint256 compoundedBorrowBalance;\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 ltv;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 i;\\n\\t\\tuint256 healthFactor;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLtv;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 reservesLength;\\n\\t\\tbool healthFactorBelowThreshold;\\n\\t\\taddress currentReserveAddress;\\n\\t\\tbool usageAsCollateralEnabled;\\n\\t\\tbool userUsesReserveAsCollateral;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the user data across the reserves.\\n\\t * this includes the total liquidity/collateral/borrow balances in ETH,\\n\\t * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n\\t * @param user The address of the user\\n\\t * @param reservesData Data of all the reserves\\n\\t * @param userConfig The configuration of the user\\n\\t * @param reserves The list of the available reserves\\n\\t * @param oracle The price oracle address\\n\\t * @return The total collateral and total debt of the user in ETH, the avg ltv, liquidation threshold and the HF\\n\\t **/\\n\\tfunction calculateUserAccountData(\\n\\t\\taddress user,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap memory userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tCalculateUserAccountDataVars memory vars;\\n\\n\\t\\tif (userConfig.isEmpty()) {\\n\\t\\t\\treturn (0, 0, 0, 0, type(uint256).max);\\n\\t\\t}\\n\\t\\tfor (vars.i = 0; vars.i < reservesCount; vars.i++) {\\n\\t\\t\\tif (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvars.currentReserveAddress = reserves[vars.i];\\n\\t\\t\\tDataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n\\t\\t\\t(vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve.configuration.getParams();\\n\\n\\t\\t\\tvars.tokenUnit = 10 ** vars.decimals;\\n\\t\\t\\tvars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\\n\\n\\t\\t\\tif (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\\n\\n\\t\\t\\t\\tuint256 liquidityBalanceETH = vars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(\\n\\t\\t\\t\\t\\tvars.tokenUnit\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\\n\\n\\t\\t\\t\\tvars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\\n\\t\\t\\t\\tvars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\\n\\t\\t\\t\\t\\tliquidityBalanceETH.mul(vars.liquidationThreshold)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (userConfig.isBorrowing(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(user);\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\\n\\t\\t\\t\\t\\tIERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalDebtInETH = vars.totalDebtInETH.add(\\n\\t\\t\\t\\t\\tvars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\\n\\t\\tvars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\\n\\t\\t\\t? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\\n\\t\\t\\t: 0;\\n\\n\\t\\tvars.healthFactor = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLiquidationThreshold\\n\\t\\t);\\n\\t\\treturn (\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLtv,\\n\\t\\t\\tvars.avgLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the health factor from the corresponding balances\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total debt in ETH\\n\\t * @param liquidationThreshold The avg liquidation threshold\\n\\t * @return The health factor calculated from the balances provided\\n\\t **/\\n\\tfunction calculateHealthFactorFromBalances(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 liquidationThreshold\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (totalDebtInETH == 0) return type(uint256).max;\\n\\n\\t\\treturn (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\\n\\t * average Loan To Value\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total borrow balance\\n\\t * @param ltv The average loan to value\\n\\t * @return the amount available to borrow in ETH for the user\\n\\t **/\\n\\n\\tfunction calculateAvailableBorrowsETH(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 ltv\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\\n\\n\\t\\tif (availableBorrowsETH < totalDebtInETH) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tavailableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\\n\\t\\treturn availableBorrowsETH;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/ReserveLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IAToken} from \\\"../../../interfaces/IAToken.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized income for the reserve\\n\\t * A value of 1e27 means there is no income. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n\\t * @param reserve The reserve object\\n\\t * @return the normalized income. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.liquidityIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n\\t\\t\\treserve.liquidityIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized variable debt for the reserve\\n\\t * A value of 1e27 means there is no debt. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n\\t * @param reserve The reserve object\\n\\t * @return The normalized variable debt. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.variableBorrowIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the liquidity cumulative index and the variable borrow index.\\n\\t * @param reserve the reserve object\\n\\t **/\\n\\tfunction updateState(DataTypes.ReserveData storage reserve) internal {\\n\\t\\tuint256 scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\n\\t\\tuint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\n\\t\\tuint256 previousLiquidityIndex = reserve.liquidityIndex;\\n\\t\\tuint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t(uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) = _updateIndexes(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousLiquidityIndex,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\n\\t\\t_mintToTreasury(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tnewLiquidityIndex,\\n\\t\\t\\tnewVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example to accumulate\\n\\t * the flashloan fee to the reserve, and spread it between all the depositors\\n\\t * @param reserve The reserve object\\n\\t * @param totalLiquidity The total liquidity available in the reserve\\n\\t * @param amount The amount to accomulate\\n\\t **/\\n\\tfunction cumulateToLiquidityIndex(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 totalLiquidity,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tuint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\\n\\n\\t\\tuint256 result = amountToLiquidityRatio.add(WadRayMath.ray());\\n\\n\\t\\tresult = result.rayMul(reserve.liquidityIndex);\\n\\t\\trequire(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\treserve.liquidityIndex = uint128(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes a reserve\\n\\t * @param reserve The reserve object\\n\\t * @param aTokenAddress The address of the overlying atoken contract\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction init(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtTokenAddress,\\n\\t\\taddress variableDebtTokenAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external {\\n\\t\\trequire(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\\n\\n\\t\\treserve.liquidityIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.variableBorrowIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.aTokenAddress = aTokenAddress;\\n\\t\\treserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n\\t\\treserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n\\t\\treserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n\\t}\\n\\n\\tstruct UpdateInterestRatesLocalVars {\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 totalStableDebt;\\n\\t\\tuint256 newLiquidityRate;\\n\\t\\tuint256 newStableRate;\\n\\t\\tuint256 newVariableRate;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 totalVariableDebt;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n\\t * @param reserve The address of the reserve to be updated\\n\\t * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\n\\t * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n\\t **/\\n\\tfunction updateInterestRates(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\taddress aTokenAddress,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken\\n\\t) internal {\\n\\t\\tUpdateInterestRatesLocalVars memory vars;\\n\\n\\t\\tvars.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n\\n\\t\\t(vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(vars.stableDebtTokenAddress)\\n\\t\\t\\t.getTotalSupplyAndAvgRate();\\n\\n\\t\\t//calculates the total variable debt locally using the scaled total supply instead\\n\\t\\t//of totalSupply(), as it's noticeably cheaper. Also, the index has been\\n\\t\\t//updated by the previous updateState() call\\n\\t\\tvars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply().rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\t(vars.newLiquidityRate, vars.newStableRate, vars.newVariableRate) = IReserveInterestRateStrategy(\\n\\t\\t\\treserve.interestRateStrategyAddress\\n\\t\\t).calculateInterestRates(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\taTokenAddress,\\n\\t\\t\\t\\tliquidityAdded,\\n\\t\\t\\t\\tliquidityTaken,\\n\\t\\t\\t\\tvars.totalStableDebt,\\n\\t\\t\\t\\tvars.totalVariableDebt,\\n\\t\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\t\\treserve.configuration.getReserveFactor()\\n\\t\\t\\t);\\n\\t\\trequire(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\\n\\t\\trequire(vars.newStableRate <= type(uint128).max, Errors.RL_STABLE_BORROW_RATE_OVERFLOW);\\n\\t\\trequire(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\\n\\n\\t\\treserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\n\\t\\treserve.currentStableBorrowRate = uint128(vars.newStableRate);\\n\\t\\treserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\n\\n\\t\\temit ReserveDataUpdated(\\n\\t\\t\\treserveAddress,\\n\\t\\t\\tvars.newLiquidityRate,\\n\\t\\t\\tvars.newStableRate,\\n\\t\\t\\tvars.newVariableRate,\\n\\t\\t\\treserve.liquidityIndex,\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\t}\\n\\n\\tstruct MintToTreasuryLocalVars {\\n\\t\\tuint256 currentStableDebt;\\n\\t\\tuint256 principalStableDebt;\\n\\t\\tuint256 previousStableDebt;\\n\\t\\tuint256 currentVariableDebt;\\n\\t\\tuint256 previousVariableDebt;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 cumulatedStableInterest;\\n\\t\\tuint256 totalDebtAccrued;\\n\\t\\tuint256 amountToMint;\\n\\t\\tuint256 reserveFactor;\\n\\t\\tuint40 stableSupplyUpdatedTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\n\\t * specific asset.\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The current scaled total variable debt\\n\\t * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\n\\t * @param newLiquidityIndex The new liquidity index\\n\\t * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\n\\t **/\\n\\tfunction _mintToTreasury(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 previousVariableBorrowIndex,\\n\\t\\tuint256 newLiquidityIndex,\\n\\t\\tuint256 newVariableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal {\\n\\t\\tMintToTreasuryLocalVars memory vars;\\n\\n\\t\\tvars.reserveFactor = reserve.configuration.getReserveFactor();\\n\\n\\t\\tif (vars.reserveFactor == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t//fetching the principal, total stable debt and the avg stable rate\\n\\t\\t(\\n\\t\\t\\tvars.principalStableDebt,\\n\\t\\t\\tvars.currentStableDebt,\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp\\n\\t\\t) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\\n\\n\\t\\t//calculate the last principal variable debt\\n\\t\\tvars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\n\\n\\t\\t//calculate the new total supply after accumulation of the index\\n\\t\\tvars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\n\\n\\t\\t//calculate the stable debt until the last timestamp update\\n\\t\\tvars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp,\\n\\t\\t\\ttimestamp\\n\\t\\t);\\n\\n\\t\\tvars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\\n\\n\\t\\t//debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n\\t\\tvars.totalDebtAccrued = vars.currentVariableDebt.add(vars.currentStableDebt).sub(vars.previousVariableDebt).sub(\\n\\t\\t\\tvars.previousStableDebt\\n\\t\\t);\\n\\n\\t\\tvars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\n\\n\\t\\tif (vars.amountToMint != 0) {\\n\\t\\t\\tIAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve indexes and the timestamp of the update\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The scaled variable debt\\n\\t * @param liquidityIndex The last stored liquidity index\\n\\t * @param variableBorrowIndex The last stored variable borrow index\\n\\t **/\\n\\tfunction _updateIndexes(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal returns (uint256, uint256) {\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\n\\t\\tuint256 newLiquidityIndex = liquidityIndex;\\n\\t\\tuint256 newVariableBorrowIndex = variableBorrowIndex;\\n\\n\\t\\t//only cumulating if there is any income being produced\\n\\t\\tif (currentLiquidityRate > 0) {\\n\\t\\t\\tuint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\n\\t\\t\\tnewLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\n\\t\\t\\trequire(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\t\\treserve.liquidityIndex = uint128(newLiquidityIndex);\\n\\n\\t\\t\\t//as the liquidity rate might come only from stable rate loans, we need to ensure\\n\\t\\t\\t//that there is actual variable debt before accumulating\\n\\t\\t\\tif (scaledVariableDebt != 0) {\\n\\t\\t\\t\\tuint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\t\\t\\treserve.currentVariableBorrowRate,\\n\\t\\t\\t\\t\\ttimestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tnewVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\n\\t\\t\\t\\trequire(newVariableBorrowIndex <= type(uint128).max, Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW);\\n\\t\\t\\t\\treserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\treserve.lastUpdateTimestamp = uint40(block.timestamp);\\n\\t\\treturn (newLiquidityIndex, newVariableBorrowIndex);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/ValidationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {Helpers} from \\\"../helpers/Helpers.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\\n\\tuint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\\n\\n\\t/**\\n\\t * @dev Validates a deposit action\\n\\t * @param reserve The reserve object on which the user is depositing\\n\\t * @param amount The amount to be deposited\\n\\t */\\n\\tfunction validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\\n\\t\\t(bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a withdraw action\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param amount The amount to be withdrawn\\n\\t * @param userBalance The balance of the user\\n\\t * @param reservesData The reserves state\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The addresses of the reserves\\n\\t * @param reservesCount The number of reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateWithdraw(\\n\\t\\taddress reserveAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 userBalance,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n\\n\\t\\t(bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(\\n\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\treserves,\\n\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\toracle\\n\\t\\t\\t),\\n\\t\\t\\tErrors.VL_TRANSFER_NOT_ALLOWED\\n\\t\\t);\\n\\t}\\n\\n\\tstruct ValidateBorrowLocalVars {\\n\\t\\tuint256 currentLtv;\\n\\t\\tuint256 currentLiquidationThreshold;\\n\\t\\tuint256 amountOfCollateralNeededETH;\\n\\t\\tuint256 userCollateralBalanceETH;\\n\\t\\tuint256 userBorrowBalanceETH;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 healthFactor;\\n\\t\\tbool isActive;\\n\\t\\tbool isFrozen;\\n\\t\\tbool borrowingEnabled;\\n\\t\\tbool stableRateBorrowingEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a borrow action\\n\\t * @param asset The address of the asset to borrow\\n\\t * @param reserve The reserve state from which the user is borrowing\\n\\t * @param userAddress The address of the user\\n\\t * @param amount The amount to be borrowed\\n\\t * @param amountInETH The amount to be borrowed, in ETH\\n\\t * @param interestRateMode The interest rate mode at which the user is borrowing\\n\\t * @param maxStableLoanPercent The max amount of the liquidity that can be borrowed at stable rate, in percentage\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\n\\tfunction validateBorrow(\\n\\t\\taddress asset,\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountInETH,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint256 maxStableLoanPercent,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tValidateBorrowLocalVars memory vars;\\n\\n\\t\\t(vars.isActive, vars.isFrozen, vars.borrowingEnabled, vars.stableRateBorrowingEnabled) = reserve\\n\\t\\t\\t.configuration\\n\\t\\t\\t.getFlags();\\n\\n\\t\\trequire(vars.isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!vars.isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(vars.borrowingEnabled, Errors.VL_BORROWING_NOT_ENABLED);\\n\\n\\t\\t//validate interest rate mode\\n\\t\\trequire(\\n\\t\\t\\tuint256(DataTypes.InterestRateMode.VARIABLE) == interestRateMode ||\\n\\t\\t\\t\\tuint256(DataTypes.InterestRateMode.STABLE) == interestRateMode,\\n\\t\\t\\tErrors.VL_INVALID_INTEREST_RATE_MODE_SELECTED\\n\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tvars.userCollateralBalanceETH,\\n\\t\\t\\tvars.userBorrowBalanceETH,\\n\\t\\t\\tvars.currentLtv,\\n\\t\\t\\tvars.currentLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(vars.userCollateralBalanceETH > 0, Errors.VL_COLLATERAL_BALANCE_IS_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.healthFactor > GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n\\t\\t\\tErrors.VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n\\t\\t);\\n\\n\\t\\t//add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n\\t\\tvars.amountOfCollateralNeededETH = vars.userBorrowBalanceETH.add(amountInETH).percentDiv(vars.currentLtv); //LTV is calculated in percentage\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\\n\\t\\t\\tErrors.VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Following conditions need to be met if the user is borrowing at a stable rate:\\n\\t\\t * 1. Reserve must be enabled for stable rate borrowing\\n\\t\\t * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n\\t\\t *    they are borrowing, to prevent abuses.\\n\\t\\t * 3. Users will be able to borrow only a portion of the total available liquidity\\n\\t\\t **/\\n\\n\\t\\tif (interestRateMode == uint256(DataTypes.InterestRateMode.STABLE)) {\\n\\t\\t\\t//check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n\\t\\t\\trequire(vars.stableRateBorrowingEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tamount > IERC20(reserve.aTokenAddress).balanceOf(userAddress),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\\n\\n\\t\\t\\t//calculate the max available loan size in stable rate mode as a percentage of the\\n\\t\\t\\t//available liquidity\\n\\t\\t\\tuint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(maxStableLoanPercent);\\n\\n\\t\\t\\trequire(amount <= maxLoanSizeStable, Errors.VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a repay action\\n\\t * @param reserve The reserve state from which the user is repaying\\n\\t * @param amountSent The amount sent for the repayment. Can be an actual value or uint256(-1)\\n\\t * @param onBehalfOf The address of the user msg.sender is repaying for\\n\\t * @param stableDebt The borrow balance of the user\\n\\t * @param variableDebt The borrow balance of the user\\n\\t */\\n\\tfunction validateRepay(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 amountSent,\\n\\t\\tDataTypes.InterestRateMode rateMode,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt\\n\\t) external view {\\n\\t\\tbool isActive = reserve.configuration.getActive();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(amountSent > 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(\\n\\t\\t\\t(stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\\n\\t\\t\\t\\t(variableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\\n\\t\\t\\tErrors.VL_NO_DEBT_OF_SELECTED_TYPE\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tamountSent != type(uint256).max || msg.sender == onBehalfOf,\\n\\t\\t\\tErrors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a swap of borrow rate mode.\\n\\t * @param reserve The reserve state on which the user is swapping the rate\\n\\t * @param userConfig The user reserves configuration\\n\\t * @param stableDebt The stable debt of the user\\n\\t * @param variableDebt The variable debt of the user\\n\\t * @param currentRateMode The rate mode of the borrow\\n\\t */\\n\\tfunction validateSwapRateMode(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt,\\n\\t\\tDataTypes.InterestRateMode currentRateMode\\n\\t) external view {\\n\\t\\t(bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\n\\t\\tif (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\trequire(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t} else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n\\t\\t\\trequire(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t\\t/**\\n\\t\\t\\t * user wants to swap to stable, before swapping we need to ensure that\\n\\t\\t\\t * 1. stable borrow rate is enabled on the reserve\\n\\t\\t\\t * 2. user is not trying to abuse the reserve by depositing\\n\\t\\t\\t * more collateral than he is borrowing, artificially lowering\\n\\t\\t\\t * the interest rate, borrowing at variable, and switching to stable\\n\\t\\t\\t **/\\n\\t\\t\\trequire(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tstableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trevert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a stable borrow rate rebalance action\\n\\t * @param reserve The reserve state on which the user is getting rebalanced\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param stableDebtToken The stable debt token instance\\n\\t * @param variableDebtToken The variable debt token instance\\n\\t * @param aTokenAddress The address of the aToken contract\\n\\t */\\n\\tfunction validateRebalanceStableBorrowRate(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tIERC20 stableDebtToken,\\n\\t\\tIERC20 variableDebtToken,\\n\\t\\taddress aTokenAddress\\n\\t) external view {\\n\\t\\t(bool isActive, , , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\t//if the usage ratio is below 95%, no rebalances are needed\\n\\t\\tuint256 totalDebt = stableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\\n\\t\\tuint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\\n\\t\\tuint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n\\t\\t//if the liquidity rate is below REBALANCE_UP_THRESHOLD of the max variable APR at 95% usage,\\n\\t\\t//then we allow rebalancing of the stable rate positions.\\n\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\t\\tuint256 maxVariableBorrowRate = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\n\\t\\t\\t.getMaxVariableBorrowRate();\\n\\n\\t\\trequire(\\n\\t\\t\\tusageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\\n\\t\\t\\t\\tcurrentLiquidityRate <= maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\\n\\t\\t\\tErrors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the action of setting an asset as collateral\\n\\t * @param reserve The state of the reserve that the user is enabling or disabling as collateral\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateSetUseReserveAsCollateral(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tbool useAsCollateral,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tuint256 underlyingBalance = IERC20(reserve.aTokenAddress).balanceOf(msg.sender);\\n\\n\\t\\trequire(underlyingBalance > 0, Errors.VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tuseAsCollateral ||\\n\\t\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tunderlyingBalance,\\n\\t\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\t\\treserves,\\n\\t\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\t\\toracle\\n\\t\\t\\t\\t),\\n\\t\\t\\tErrors.VL_DEPOSIT_ALREADY_IN_USE\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a flashloan action\\n\\t * @param assets The assets being flashborrowed\\n\\t * @param amounts The amounts for each asset being borrowed\\n\\t **/\\n\\tfunction validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\\n\\t\\trequire(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the liquidation action\\n\\t * @param collateralReserve The reserve data of the collateral\\n\\t * @param principalReserve The reserve data of the principal\\n\\t * @param userConfig The user configuration\\n\\t * @param userHealthFactor The user's health factor\\n\\t * @param userStableDebt Total stable debt balance of the user\\n\\t * @param userVariableDebt Total variable debt balance of the user\\n\\t **/\\n\\tfunction validateLiquidationCall(\\n\\t\\tDataTypes.ReserveData storage collateralReserve,\\n\\t\\tDataTypes.ReserveData storage principalReserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 userHealthFactor,\\n\\t\\tuint256 userStableDebt,\\n\\t\\tuint256 userVariableDebt\\n\\t) internal view returns (uint256, string memory) {\\n\\t\\tif (!collateralReserve.configuration.getActive() || !principalReserve.configuration.getActive()) {\\n\\t\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ACTIVE_RESERVE), Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\t}\\n\\n\\t\\tif (userHealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\\n\\t\\t\\t\\tErrors.LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tbool isCollateralEnabled = collateralReserve.configuration.getLiquidationThreshold() > 0 &&\\n\\t\\t\\tuserConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n\\t\\t//if collateral isn't enabled as collateral by user, it cannot be liquidated\\n\\t\\tif (!isCollateralEnabled) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\\n\\t\\t\\t\\tErrors.LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (userStableDebt == 0 && userVariableDebt == 0) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.CURRRENCY_NOT_BORROWED),\\n\\t\\t\\t\\tErrors.LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates an aToken transfer\\n\\t * @param from The user from which the aTokens are being transferred\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateTransfer(\\n\\t\\taddress from,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view {\\n\\t\\t(, , , , uint256 healthFactor) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tfrom,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(healthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD, Errors.VL_TRANSFER_NOT_ALLOWED);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\n\\t/// @dev Ignoring leap years\\n\\tuint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate linearly accumulated during the timeDelta, in ray\\n\\t **/\\n\\n\\tfunction calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\treturn (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest using a compounded interest rate formula\\n\\t * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n\\t *\\n\\t *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n\\t *\\n\\t * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n\\t * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n\\t *\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate compounded during the timeDelta, in ray\\n\\t **/\\n\\tfunction calculateCompoundedInterest(\\n\\t\\tuint256 rate,\\n\\t\\tuint40 lastUpdateTimestamp,\\n\\t\\tuint256 currentTimestamp\\n\\t) internal pure returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\tif (exp == 0) {\\n\\t\\t\\treturn WadRayMath.ray();\\n\\t\\t}\\n\\n\\t\\tuint256 expMinusOne = exp - 1;\\n\\n\\t\\tuint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n\\t\\tuint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n\\t\\tuint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n\\t\\tuint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n\\t\\tuint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n\\t\\tuint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n\\t\\treturn WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n\\t * @param rate The interest rate (in ray)\\n\\t * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n\\t **/\\n\\tfunction calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\treturn calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n\\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n\\t/**\\n\\t * @dev Executes a percentage multiplication\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The percentage of value\\n\\t **/\\n\\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\tif (value == 0 || percentage == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a percentage division\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The value divided the percentage\\n\\t **/\\n\\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfPercentage = percentage / 2;\\n\\n\\t\\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant halfWAD = WAD / 2;\\n\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant halfRAY = RAY / 2;\\n\\n\\tuint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n\\t/**\\n\\t * @return One ray, 1e27\\n\\t **/\\n\\tfunction ray() internal pure returns (uint256) {\\n\\t\\treturn RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return One wad, 1e18\\n\\t **/\\n\\n\\tfunction wad() internal pure returns (uint256) {\\n\\t\\treturn WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e27/2\\n\\t **/\\n\\tfunction halfRay() internal pure returns (uint256) {\\n\\t\\treturn halfRAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e18/2\\n\\t **/\\n\\tfunction halfWad() internal pure returns (uint256) {\\n\\t\\treturn halfWAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a*b, in wad\\n\\t **/\\n\\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfWAD) / WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a/b, in wad\\n\\t **/\\n\\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * WAD + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a*b, in ray\\n\\t **/\\n\\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfRAY) / RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a/b, in ray\\n\\t **/\\n\\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * RAY + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Casts ray down to wad\\n\\t * @param a Ray\\n\\t * @return a casted to wad, rounded half up to the nearest wad\\n\\t **/\\n\\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\t\\tuint256 result = halfRatio + a;\\n\\t\\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n\\t\\treturn result / WAD_RAY_RATIO;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts wad up to ray\\n\\t * @param a Wad\\n\\t * @return a converted in ray\\n\\t **/\\n\\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 result = a * WAD_RAY_RATIO;\\n\\t\\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\t\\treturn result;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lending/libraries/logic/GenericLogic.sol\": {\r\n        \"GenericLogic\": \"0x1a5795501187ccabe445fd97616bb2ec4240262b\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_UP_USAGE_RATIO_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ValidationLogic", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}