{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XSD/Pools/Arbitrage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './CollateralPool.sol';\\nimport './Interfaces/IXSDWETHpool.sol';\\nimport './Interfaces/IBankXWETHpool.sol';\\nimport '../XSDStablecoin.sol';\\nimport '../../UniswapFork/Interfaces/IRouter.sol';\\nimport \\\"./CollateralPoolLibrary.sol\\\";\\nimport '../../Oracle/Interfaces/IPIDController.sol';\\nimport \\\"../../BankX/BankXToken.sol\\\";\\n\\ncontract Arbitrage is ReentrancyGuard{\\n    address public xsd_address;\\n    address public bankx_address;\\n    address public smartcontract_owner;\\n    address public router_address;\\n    address public pid_address;\\n    address public collateral_pool;\\n    address public xsd_pool;\\n    address public bankx_pool;\\n    address public origin_address;\\n\\n    uint public arbitrage_paused;\\n    uint public last_update;\\n    uint public block_delay;\\n    bool public pause_arbitrage;\\n\\n    XSDStablecoin private XSD;\\n    BankXToken private BankX;\\n    IPIDController private pid_controller;\\n    IRouter private Router;\\n\\nconstructor(\\n        address _xsd_address,\\n        address _bankx_address,\\n        address _collateral_pool,\\n        address _router_address,\\n        address _pid_controller,\\n        address _xsd_pool,\\n        address _bankx_pool,\\n        address _origin_address,\\n        address _smartcontract_owner,\\n        uint _block_delay\\n    ) {\\n        require((_smartcontract_owner != address(0))\\n            && (_origin_address != address(0))\\n            && (_collateral_pool != address(0))\\n            && (_xsd_pool != address(0))\\n            && (_bankx_pool != address(0))\\n            && (_router_address != address(0))\\n            && (_xsd_address != address(0))\\n            && (_bankx_address != address(0))\\n            && (_pid_controller != address(0))\\n            , \\\"Zero address detected\\\");\\n        xsd_address = _xsd_address;\\n        XSD = XSDStablecoin(_xsd_address);\\n        bankx_address = _bankx_address;\\n        BankX = BankXToken(_bankx_address);\\n        collateral_pool = _collateral_pool;\\n        router_address = _router_address;\\n        Router = IRouter(_router_address);\\n        pid_address = _pid_controller;\\n        pid_controller = IPIDController(_pid_controller);\\n        smartcontract_owner = _smartcontract_owner;\\n        origin_address = _origin_address;\\n        bankx_pool = _bankx_pool;\\n        xsd_pool = _xsd_pool;\\n        block_delay = _block_delay;\\n    }\\n\\nfunction burnBankX(uint256 bankx_amount,uint256 eth_min_amount, uint256 bankx_min_amount, uint256 deadline) external nonReentrant {\\n    require(pause_arbitrage, \\\"Arbitrage Paused\\\");\\n    require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks\\\");\\n    uint256 time_elapsed = block.timestamp - last_update;\\n    require(time_elapsed >= arbitrage_paused, \\\"internal cooldown not passed\\\");\\n    uint256 bankx_price = pid_controller.bankx_updated_price();\\n    uint256 xag_usd_price = XSD.xag_usd_price();\\n    uint silver_price = (xag_usd_price*(1e4))/(311035);\\n    require(pid_controller.xsd_updated_price()>(silver_price + (silver_price/1e3)), \\\"BurnBankX:ARBITRAGE ERROR\\\");\\n    (uint256 xsd_amount) = CollateralPoolLibrary.calcMintAlgorithmicXSD(\\n    bankx_price, \\n    xag_usd_price,\\n    bankx_amount\\n    );\\n    BankX.pool_burn_from(msg.sender, bankx_amount);\\n    XSD.pool_mint(msg.sender, xsd_amount);\\n    Router.swapXSDForBankX(xsd_amount,msg.sender, eth_min_amount, bankx_min_amount,deadline);\\n    pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n    last_update = block.timestamp;\\n    pid_controller.systemCalculations();\\n}\\n\\nfunction burnXSD(uint256 XSD_amount,uint256 eth_min_amount, uint256 xsd_min_amount, uint256 deadline) external nonReentrant {\\n    require(pause_arbitrage, \\\"Arbitrage Paused\\\");\\n    require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks\\\");\\n    uint256 time_elapsed = block.timestamp - last_update;\\n    require(time_elapsed >= arbitrage_paused, \\\"internal cooldown not passed\\\");\\n    uint256 xag_usd_price = XSD.xag_usd_price();\\n    uint silver_price = (xag_usd_price*(1e4))/(311035); \\n    require(pid_controller.xsd_updated_price()<(silver_price - (silver_price/1e3)), \\\"BurnXSD:ARBITRAGE ERROR\\\");\\n    uint256 bankx_dollar_value_d18 = (XSD_amount*xag_usd_price)/(31103477); \\n    uint256 bankx_amount = (bankx_dollar_value_d18*(1e6))/pid_controller.bankx_updated_price();\\n    if(XSD.totalSupply()>CollateralPool(payable(collateral_pool)).collat_XSD()){\\n        XSD.pool_burn_from(msg.sender,XSD_amount);    }\\n    else{\\n        TransferHelper.safeTransferFrom(xsd_address, msg.sender,origin_address, XSD_amount);\\n    }\\n    BankX.pool_mint(msg.sender, bankx_amount);\\n    Router.swapBankXForXSD(bankx_amount,msg.sender, eth_min_amount, xsd_min_amount,deadline);\\n    pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n    last_update = block.timestamp;\\n    pid_controller.systemCalculations();\\n}\\nfunction setArbitrageCooldown(uint sec) external {\\n    require(msg.sender == smartcontract_owner, \\\"Only the owner can access this function\\\");\\n    arbitrage_paused = block.timestamp + sec;\\n}\\nfunction pauseArbitrage() external {\\n    require(msg.sender == smartcontract_owner, \\\"Only the owner can access this function\\\");\\n    pause_arbitrage = !pause_arbitrage;\\n}\\nfunction setSmartContractOwner(address _smartcontract_owner) external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        require(_smartcontract_owner != address(0), \\\"Zero address detected\\\");\\n        smartcontract_owner = _smartcontract_owner;\\n    }\\n\\nfunction renounceOwnership() external{\\n    require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n    smartcontract_owner = address(0);\\n}\\n\\nfunction resetAddresses(address _xsd_address,\\n        address _bankx_address,\\n        address _collateral_pool,\\n        address _router_address,\\n        address _pid_controller,\\n        address _xsd_pool,\\n        address _bankx_pool,\\n        address _origin_address,\\n        address _smartcontract_owner, \\n        uint _block_delay) external{\\n    require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n    require((_smartcontract_owner != address(0))\\n            && (_origin_address != address(0))\\n            && (_collateral_pool != address(0))\\n            && (_xsd_pool != address(0))\\n            && (_bankx_pool != address(0))\\n            && (_router_address != address(0))\\n            && (_xsd_address != address(0))\\n            && (_bankx_address != address(0))\\n            && (_pid_controller != address(0))\\n            , \\\"Zero address detected\\\");\\n        xsd_address = _xsd_address;\\n        XSD = XSDStablecoin(_xsd_address);\\n        bankx_address = _bankx_address;\\n        BankX = BankXToken(_bankx_address);\\n        collateral_pool = _collateral_pool;\\n        router_address = _router_address;\\n        Router = IRouter(_router_address);\\n        pid_address = _pid_controller;\\n        pid_controller = IPIDController(_pid_controller);\\n        smartcontract_owner = _smartcontract_owner;\\n        origin_address = _origin_address;\\n        bankx_pool = _bankx_pool;\\n        xsd_pool = _xsd_pool;\\n        block_delay = _block_delay;\\n}\\n}\"\r\n    },\r\n    \"contracts/XSD/Pools/CollateralPool.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n/*\\nBBBBBBBBBBBBBBBBB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kkkkkkkk \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0XXXXXXX\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 XXXXXXX\\nB::::::::::::::::B \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k::::::k \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X\\nB::::::BBBBBB:::::B \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k::::::k \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X\\nBB:::::B \u00a0\u00a0\u00a0\u00a0B:::::B \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k::::::k \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X::::::X \u00a0\u00a0\u00a0\u00a0X::::::X\\n\u00a0 B::::B \u00a0\u00a0\u00a0\u00a0B:::::B \u00a0\u00a0aaaaaaaaaaaaa \u00a0\u00a0nnnn \u00a0nnnnnnnn \u00a0\u00a0\u00a0\u00a0\u00a0k:::::k kkkkkkk XXX:::::X \u00a0\u00a0X:::::XXX\\n\u00a0 B::::B \u00a0\u00a0\u00a0\u00a0B:::::B \u00a0\u00a0a::::::::::::a \u00a0n:::nn::::::::nn \u00a0\u00a0\u00a0k:::::k k:::::k \u00a0\u00a0\u00a0X:::::X X:::::X\\n\u00a0 B::::BBBBBB:::::B \u00a0\u00a0\u00a0aaaaaaaaa:::::a n::::::::::::::nn \u00a0\u00a0k:::::k k:::::k \u00a0\u00a0\u00a0\u00a0X:::::X:::::X\\n\u00a0 B:::::::::::::BB \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a::::a nn:::::::::::::::n \u00a0k:::::k k:::::k \u00a0\u00a0\u00a0\u00a0\u00a0X:::::::::X\\n\u00a0 B::::BBBBBB:::::B \u00a0\u00a0\u00a0\u00a0\u00a0aaaaaaa:::::a \u00a0\u00a0n:::::nnnn:::::n \u00a0k::::::k:::::k \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::::::X\\n\u00a0 B::::B \u00a0\u00a0\u00a0\u00a0B:::::B \u00a0\u00a0aa::::::::::::a \u00a0\u00a0n::::n \u00a0\u00a0\u00a0n::::n \u00a0k:::::::::::k \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X:::::X\\n\u00a0 B::::B \u00a0\u00a0\u00a0\u00a0B:::::B \u00a0a::::aaaa::::::a \u00a0\u00a0n::::n \u00a0\u00a0\u00a0n::::n \u00a0k:::::::::::k \u00a0\u00a0\u00a0\u00a0\u00a0X:::::X X:::::X\\n\u00a0 B::::B \u00a0\u00a0\u00a0\u00a0B:::::B a::::a \u00a0\u00a0\u00a0a:::::a \u00a0\u00a0n::::n \u00a0\u00a0\u00a0n::::n \u00a0k::::::k:::::k \u00a0XXX:::::X \u00a0\u00a0X:::::XXX\\nBB:::::BBBBBB::::::B a::::a \u00a0\u00a0\u00a0a:::::a \u00a0\u00a0n::::n \u00a0\u00a0\u00a0n::::n k::::::k k:::::k X::::::X \u00a0\u00a0\u00a0\u00a0X::::::X\\nB:::::::::::::::::B \u00a0a:::::aaaa::::::a \u00a0\u00a0n::::n \u00a0\u00a0\u00a0n::::n k::::::k k:::::k X:::::X \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X\\nB::::::::::::::::B \u00a0\u00a0\u00a0a::::::::::aa:::a \u00a0n::::n \u00a0\u00a0\u00a0n::::n k::::::k k:::::k X:::::X \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X:::::X\\nBBBBBBBBBBBBBBBBB \u00a0\u00a0\u00a0\u00a0\u00a0aaaaaaaaaa \u00a0aaaa \u00a0nnnnnn \u00a0\u00a0\u00a0nnnnnn kkkkkkkk kkkkkkk XXXXXXX \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0XXXXXXX\\n\\n\\n                                          Currency Creators Manifesto\\n\\nOur world faces an urgent crisis of currency manipulation, theft and inflation.  Under the current system, currency is controlled by and benefits elite families, governments and large banking institutions.  We believe currencies should be minted by and benefit the individual, not the establishment.  It is time to take back the control of and the freedom that money can provide.\\n\\nBankX is rebuilding the legacy banking system from the ground up by providing you with the capability to create currency and be in complete control of wealth creation with a concept we call \u2018Individual Created Digital Currency\u2019 (ICDC). You own the collateral.  You mint currency.  You earn interest.  You leverage without the risk of liquidation.  You stake to earn even more returns.  All of this is done with complete autonomy and decentralization.  BankX has built a stablecoin for Individual Freedom.\\n\\nBankX is the antidote for the malevolent financial system bringing in a new future of freedom where you are in complete control with no middlemen, bank or central bank between you and your finances. This capability to create currency and be in complete control of wealth creation will be in the hands of every individual that uses BankX.\\n\\nBy 2030, we will rid the world of the corrupt, tyrannical and incompetent banking system replacing it with a system where billions of people will be in complete control of their financial future.  Everyone will be given ultimate freedom to use their assets to create currency, earn interest and multiply returns to accomplish their individual goals.  The mission of BankX is to be the first to mint $1 trillion in stablecoin. \\n\\nWe will bring about this transformation by attracting people that believe what we believe.  We will partner with other blockchain protocols and build decentralized applications that drive even more usage.  Finally, we will deploy a private network that is never connected to the Internet to communicate between counterparties, that allows for blockchain-to-blockchain interoperability and stores private keys and cryptocurrency wallets.  Our ecosystem, network and platform has never been seen in the market and provides us with a long term sustainable competitive advantage.\\n\\nWe value individual freedom.\\nWe believe in financial autonomy.\\nWe are anti-establishment.\\nWe envision a future of self-empowerment.\\n\\n*/\\npragma solidity ^0.8.0;\\n\\nimport '@uniswap/lib/contracts/libraries/TransferHelper.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"../../BankX/BankXToken.sol\\\";\\nimport \\\"../XSDStablecoin.sol\\\";\\nimport \\\"./Interfaces/IBankXWETHpool.sol\\\";\\nimport \\\"./Interfaces/IXSDWETHpool.sol\\\";\\nimport '../../Oracle/Interfaces/IPIDController.sol';\\nimport \\\"../../ERC20/IWETH.sol\\\";\\nimport \\\"./CollateralPoolLibrary.sol\\\";\\n\\ncontract CollateralPool is ReentrancyGuard {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public WETH;\\n    address public smartcontract_owner;\\n    address public xsd_contract_address;\\n    address public bankx_contract_address;\\n    address public xsdweth_pool;\\n    address public bankxweth_pool;\\n    address public pid_address;\\n    BankXToken private BankX;\\n    XSDStablecoin private XSD;\\n    IPIDController private pid_controller;\\n    uint256 public collat_XSD;\\n    bool public mint_paused;\\n    bool public redeem_paused;\\n    bool public buyback_paused;\\n    struct MintInfo {\\n        uint256 accum_interest; //accumulated interest from previous mints\\n        uint256 interest_rate; //interest rate at that particular timestamp\\n        uint256 time; //last timestamp\\n        uint256 amount; //XSD amount minted\\n    }\\n    mapping(address=>MintInfo) public mintMapping; \\n    mapping (address => uint256) public redeemBankXBalances;\\n    mapping (address => uint256) public redeemCollateralBalances;\\n    mapping (address => uint256) public vestingtimestamp;\\n    uint256 public unclaimedPoolCollateral;\\n    uint256 public unclaimedPoolBankX;\\n    uint256 public collateral_equivalent_d18;\\n    uint256 public bankx_minted_count;\\n    mapping (address => uint256) public lastRedeemed;\\n    uint256 public block_delay = 2;\\n    /* ========== MODIFIERS ========== */\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'BankXRouter: EXPIRED');\\n        _;\\n    }\\n\\n    modifier onlyByOwner() {\\n        require(msg.sender == smartcontract_owner, \\\"Not owner\\\");\\n        _;\\n    }\\n \\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _xsd_contract_address,\\n        address _bankx_contract_address,\\n        address _bankxweth_pool,\\n        address _xsdweth_pool,\\n        address _WETH,\\n        address _smartcontract_owner\\n    ) {\\n        require(\\n            (_xsd_contract_address != address(0))\\n            && (_bankx_contract_address != address(0))\\n            && (_WETH != address(0))\\n            && (_bankxweth_pool != address(0))\\n            && (_xsdweth_pool != address(0))\\n        , \\\"Zero address detected\\\"); \\n        XSD = XSDStablecoin(_xsd_contract_address);\\n        BankX = BankXToken(_bankx_contract_address);\\n        xsd_contract_address = _xsd_contract_address;\\n        bankx_contract_address = _bankx_contract_address;\\n        xsdweth_pool = _xsdweth_pool;\\n        bankxweth_pool = _bankxweth_pool;\\n        WETH = _WETH;\\n        smartcontract_owner = _smartcontract_owner;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    //only accept ETH via fallback function from the WETH contract\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n    }\\n\\n    // Returns dollar value of collateral held in this XSD pool\\n    function collatDollarBalance() public view returns (uint256) {\\n            return ((IWETH(WETH).balanceOf(address(this))*XSD.eth_usd_price())/(1e6));        \\n    }\\n\\n    // Returns the value of excess collateral held in this XSD pool, compared to what is needed to maintain the global collateral ratio\\n    function availableExcessCollatDV() public view returns (uint256) {\\n        uint256 global_collateral_ratio = XSD.global_collateral_ratio();\\n        uint256 global_collat_value = XSD.globalCollateralValue();\\n\\n        if (global_collateral_ratio > (1e6)) global_collateral_ratio = (1e6); // Handles an overcollateralized contract with CR > 1\\n        uint256 required_collat_dollar_value_d18 = ((collat_XSD)*global_collateral_ratio*(XSD.xag_usd_price()*(1e4))/(311035))/(1e12); // Calculates collateral needed to back each 1 XSD with $1 of collateral at current collat ratio\\n        if ((global_collat_value-unclaimedPoolCollateral)>required_collat_dollar_value_d18) return (global_collat_value-unclaimedPoolCollateral-required_collat_dollar_value_d18);\\n        else return 0;\\n    }\\n    /* ========== INTERNAL FUNCTIONS ======== */\\n    //call the price check function again after check.\\n\\n    function mintInterestCalc(uint xsd_amount,address sender) internal {\\n        (mintMapping[sender].accum_interest, mintMapping[sender].interest_rate, mintMapping[sender].time, mintMapping[sender].amount) = CollateralPoolLibrary.calcMintInterest(xsd_amount,XSD.xag_usd_price(), XSD.interest_rate(), mintMapping[sender].accum_interest, mintMapping[sender].interest_rate, mintMapping[sender].time, mintMapping[sender].amount);\\n    }\\n    function redeemInterestCalc(uint xsd_amount,address sender) internal {\\n        (mintMapping[sender].accum_interest, mintMapping[sender].interest_rate, mintMapping[sender].time, mintMapping[sender].amount)=CollateralPoolLibrary.calcRedemptionInterest(xsd_amount,XSD.xag_usd_price(), mintMapping[sender].accum_interest, mintMapping[sender].interest_rate, mintMapping[sender].time, mintMapping[sender].amount);\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n    \\n    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency \\n    function mint1t1XSD(uint256 XSD_out_min, uint256 deadline) external ensure(deadline) payable nonReentrant {\\n        require(!mint_paused, \\\"Mint Paused\\\");\\n        require(msg.value>0, \\\"Invalid collateral amount\\\");\\n        require(XSD.global_collateral_ratio() >= (1e6), \\\"Collateral ratio must be >= 1\\\");\\n        (uint256 xsd_amount_d18) = CollateralPoolLibrary.calcMint1t1XSD(\\n            XSD.eth_usd_price(),\\n            XSD.xag_usd_price(),\\n            msg.value\\n        ); //1 XSD for each $1 worth of collateral\\n        require(XSD_out_min <= xsd_amount_d18, \\\"Slippage limit reached\\\");\\n        mintInterestCalc(xsd_amount_d18,msg.sender);\\n        IWETH(WETH).deposit{value: msg.value}();\\n        assert(IWETH(WETH).transfer(address(this), msg.value));\\n        collat_XSD = collat_XSD + xsd_amount_d18;\\n        XSD.pool_mint(msg.sender, xsd_amount_d18);\\n    }\\n\\n    // 0% collateral-backed\\n    function mintAlgorithmicXSD(uint256 bankx_amount_d18, uint256 XSD_out_min, uint256 deadline) external ensure(deadline) nonReentrant {\\n        require(!mint_paused, \\\"Mint Paused\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before minting\\\");\\n        uint256 xag_usd_price = XSD.xag_usd_price();\\n        require(XSD.global_collateral_ratio() == 0, \\\"Collateral ratio must be 0\\\");\\n        (uint256 xsd_amount_d18) = CollateralPoolLibrary.calcMintAlgorithmicXSD(\\n            pid_controller.bankx_updated_price(), \\n            xag_usd_price,\\n            bankx_amount_d18\\n        );\\n        require(XSD_out_min <= xsd_amount_d18, \\\"Slippage limit reached\\\");\\n        mintInterestCalc(xsd_amount_d18,msg.sender);\\n        collat_XSD = collat_XSD + xsd_amount_d18;\\n        bankx_minted_count = bankx_minted_count + bankx_amount_d18;\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        BankX.pool_burn_from(msg.sender, bankx_amount_d18);\\n        XSD.pool_mint(msg.sender, xsd_amount_d18);\\n    }\\n\\n    // Will fail if fully collateralized or fully algorithmic\\n    // > 0% and < 100% collateral-backed\\n    function mintFractionalXSD(uint256 bankx_amount, uint256 XSD_out_min, uint256 deadline) external ensure(deadline) payable nonReentrant {\\n        require(!mint_paused, \\\"Mint Paused\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before minting\\\");\\n        uint256 xag_usd_price = XSD.xag_usd_price();\\n        uint256 global_collateral_ratio = XSD.global_collateral_ratio();\\n\\n        require(global_collateral_ratio < (1e6) && global_collateral_ratio > 0, \\\"Collateral ratio needs to be between .000001 and .999999\\\");\\n        CollateralPoolLibrary.MintFF_Params memory input_params = CollateralPoolLibrary.MintFF_Params(\\n            pid_controller.bankx_updated_price(), //XSD.bankx_price\\n            XSD.eth_usd_price(),\\n            bankx_amount,\\n            msg.value,\\n            global_collateral_ratio\\n        );\\n\\n        (uint256 mint_amount, uint256 bankx_needed) = CollateralPoolLibrary.calcMintFractionalXSD(input_params);\\n        mint_amount = (mint_amount*31103477)/((xag_usd_price)); //grams of silver in calculated mint amount\\n        require(XSD_out_min <= mint_amount, \\\"Slippage limit reached\\\");\\n        require(bankx_needed <= bankx_amount, \\\"Not enough BankX inputted\\\");\\n        mintInterestCalc(mint_amount,msg.sender);\\n        bankx_minted_count = bankx_minted_count + bankx_needed;\\n        BankX.pool_burn_from(msg.sender, bankx_needed);\\n        IWETH(WETH).deposit{value: msg.value}();\\n        assert(IWETH(WETH).transfer(address(this), msg.value));\\n        collat_XSD = collat_XSD + mint_amount;\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        XSD.pool_mint(msg.sender, mint_amount);\\n    }\\n\\n    // Redeem collateral. 100% collateral-backed\\n    function redeem1t1XSD(uint256 XSD_amount, uint256 COLLATERAL_out_min, uint256 deadline) external ensure(deadline) nonReentrant {\\n        require(!pid_controller.bucket3(), \\\"Cannot withdraw in times of deficit\\\");\\n        require(!redeem_paused, \\\"Redeem Paused\\\");\\n        require(XSD.global_collateral_ratio() == (1e6), \\\"Collateral ratio must be == 1\\\");\\n        require(XSD_amount<=mintMapping[msg.sender].amount, \\\"OVERREDEMPTION ERROR\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before redeeming\\\");\\n        // convert xsd to $ and then to collateral value\\n        (uint256 XSD_dollar,uint256 collateral_needed) = CollateralPoolLibrary.calcRedeem1t1XSD(\\n            XSD.eth_usd_price(),\\n            XSD.xag_usd_price(),\\n            XSD_amount\\n        );\\n        uint total_xsd_amount = mintMapping[msg.sender].amount;\\n        require(collateral_needed <= (IWETH(WETH).balanceOf(address(this))-unclaimedPoolCollateral), \\\"Not enough collateral in pool\\\");\\n        require(COLLATERAL_out_min <= collateral_needed, \\\"Slippage limit reached\\\");\\n        redeemInterestCalc(XSD_amount, msg.sender);\\n        uint current_accum_interest = (XSD_amount*mintMapping[msg.sender].accum_interest)/total_xsd_amount;\\n        redeemBankXBalances[msg.sender] = (redeemBankXBalances[msg.sender]+current_accum_interest);\\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]+XSD_dollar;\\n        unclaimedPoolCollateral = unclaimedPoolCollateral+XSD_dollar;\\n        lastRedeemed[msg.sender] = block.number;\\n        unclaimedPoolBankX = (unclaimedPoolBankX+current_accum_interest);\\n        uint256 bankx_amount = (current_accum_interest*1e6)/pid_controller.bankx_updated_price();\\n        collat_XSD -= XSD_amount;\\n        mintMapping[msg.sender].accum_interest = (mintMapping[msg.sender].accum_interest - current_accum_interest);\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        XSD.pool_burn_from(msg.sender, XSD_amount);\\n        BankX.pool_mint(address(this), bankx_amount);\\n    }\\n\\n    // Will fail if fully collateralized or algorithmic\\n    // Redeem XSD for collateral and BankX. > 0% and < 100% collateral-backed\\n    function redeemFractionalXSD(uint256 XSD_amount, uint256 BankX_out_min, uint256 COLLATERAL_out_min, uint256 deadline) external ensure(deadline) nonReentrant {\\n        require(!pid_controller.bucket3(), \\\"Cannot withdraw in times of deficit\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before redeeming\\\");\\n        require(!redeem_paused, \\\"Redeem Paused\\\");\\n        require(XSD_amount<=mintMapping[msg.sender].amount, \\\"OVERREDEMPTION ERROR\\\");\\n        uint256 xag_usd_price = XSD.xag_usd_price();\\n        uint256 global_collateral_ratio = XSD.global_collateral_ratio();\\n\\n        require(global_collateral_ratio < (1e6) && global_collateral_ratio > 0, \\\"Collateral ratio needs to be between .000001 and .999999\\\");\\n        \\n\\n        uint256 bankx_dollar_value_d18 = XSD_amount - ((XSD_amount*global_collateral_ratio)/(1e6));\\n        bankx_dollar_value_d18 = (bankx_dollar_value_d18*xag_usd_price)/(31103477);\\n        uint256 bankx_amount = (bankx_dollar_value_d18*1e6)/pid_controller.bankx_updated_price();\\n\\n\\n        uint256 collateral_dollar_value = (XSD_amount*global_collateral_ratio)/(1e6);\\n        collateral_dollar_value = (collateral_dollar_value*xag_usd_price)/31103477;\\n        uint256 collateral_amount = (collateral_dollar_value*1e6)/XSD.eth_usd_price();\\n\\n\\n        require(collateral_amount <= (IWETH(WETH).balanceOf(address(this))-unclaimedPoolCollateral), \\\"Not enough collateral in pool\\\");\\n        require(COLLATERAL_out_min <= collateral_amount, \\\"Slippage limit reached [collateral]\\\");\\n        require(BankX_out_min <= bankx_amount, \\\"Slippage limit reached [BankX]\\\");\\n\\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]+collateral_dollar_value;\\n        unclaimedPoolCollateral = unclaimedPoolCollateral+collateral_dollar_value;\\n        lastRedeemed[msg.sender] = block.number;\\n        uint total_xsd_amount = mintMapping[msg.sender].amount;\\n        redeemInterestCalc(XSD_amount, msg.sender);\\n        uint current_accum_interest = (XSD_amount*mintMapping[msg.sender].accum_interest)/total_xsd_amount;\\n        redeemBankXBalances[msg.sender] = redeemBankXBalances[msg.sender]+current_accum_interest;\\n        bankx_amount = bankx_amount + ((current_accum_interest*1e6)/pid_controller.bankx_updated_price());\\n        mintMapping[msg.sender].accum_interest = mintMapping[msg.sender].accum_interest - current_accum_interest;\\n        redeemBankXBalances[msg.sender] = redeemBankXBalances[msg.sender]+bankx_dollar_value_d18;\\n        unclaimedPoolBankX = unclaimedPoolBankX+bankx_dollar_value_d18+current_accum_interest;\\n        collat_XSD -= XSD_amount;\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n    \\n        XSD.pool_burn_from(msg.sender, XSD_amount);\\n        BankX.pool_mint(address(this), bankx_amount);\\n    }\\n\\n    // Redeem XSD for BankX. 0% collateral-backed\\n    function redeemAlgorithmicXSD(uint256 XSD_amount, uint256 BankX_out_min, uint256 deadline) external ensure(deadline) nonReentrant {\\n        require(!pid_controller.bucket3(), \\\"Cannot withdraw in times of deficit\\\");\\n        require(!redeem_paused, \\\"Redeem Paused\\\");\\n        require(XSD_amount<=mintMapping[msg.sender].amount, \\\"OVERREDEMPTION ERROR\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before redeeming\\\");\\n        require(XSD.global_collateral_ratio() == 0, \\\"Collateral ratio must be 0\\\"); \\n        uint256 bankx_dollar_value_d18 = (XSD_amount*XSD.xag_usd_price())/(31103477);\\n\\n        uint256 bankx_amount = (bankx_dollar_value_d18*1e6)/pid_controller.bankx_updated_price();\\n        \\n        lastRedeemed[msg.sender] = block.number;\\n        uint total_xsd_amount = mintMapping[msg.sender].amount;\\n        require(BankX_out_min <= bankx_amount, \\\"Slippage limit reached\\\");\\n        redeemInterestCalc(XSD_amount, msg.sender);\\n        uint current_accum_interest = XSD_amount*mintMapping[msg.sender].accum_interest/total_xsd_amount; //precision of 6\\n        redeemBankXBalances[msg.sender] = (redeemBankXBalances[msg.sender]+current_accum_interest);\\n        bankx_amount = bankx_amount + ((current_accum_interest*1e6)/pid_controller.bankx_updated_price());\\n        mintMapping[msg.sender].accum_interest = (mintMapping[msg.sender].accum_interest - current_accum_interest);\\n        redeemBankXBalances[msg.sender] = redeemBankXBalances[msg.sender]+bankx_dollar_value_d18;\\n        unclaimedPoolBankX = unclaimedPoolBankX+bankx_dollar_value_d18+current_accum_interest;\\n        collat_XSD -= XSD_amount;\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        XSD.pool_burn_from(msg.sender, XSD_amount);\\n        BankX.pool_mint(address(this), bankx_amount);\\n    }\\n\\n    // After a redemption happens, transfer the newly minted BankX and owed collateral from this pool\\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\\n    // to take out XSD/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\\n    function collectRedemption() external nonReentrant{\\n        require(!pid_controller.bucket3(), \\\"Cannot withdraw in times of deficit\\\");\\n        require(!redeem_paused, \\\"Redeem Paused\\\");\\n        require(((lastRedeemed[msg.sender]+(block_delay)) <= block.number) && ((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before redeeming\\\");\\n        uint BankXDollarAmount;\\n        uint CollateralDollarAmount;\\n        uint BankXAmount;\\n        uint CollateralAmount;\\n\\n        // Use Checks-Effects-Interactions pattern\\n        if(redeemBankXBalances[msg.sender] > 0){\\n            BankXDollarAmount = redeemBankXBalances[msg.sender];\\n            BankXAmount = (BankXDollarAmount*1e6)/pid_controller.bankx_updated_price();\\n            redeemBankXBalances[msg.sender] = 0;\\n            unclaimedPoolBankX = unclaimedPoolBankX-BankXDollarAmount;\\n            TransferHelper.safeTransfer(address(BankX), msg.sender, BankXAmount);\\n        }\\n        \\n        if(redeemCollateralBalances[msg.sender] > 0){\\n            CollateralDollarAmount = redeemCollateralBalances[msg.sender];\\n            CollateralAmount = (CollateralDollarAmount*1e6)/XSD.eth_usd_price();\\n            redeemCollateralBalances[msg.sender] = 0;\\n            unclaimedPoolCollateral = unclaimedPoolCollateral-CollateralDollarAmount;\\n            IWETH(WETH).withdraw(CollateralAmount); //try to unwrap eth in the redeem\\n            TransferHelper.safeTransferETH(msg.sender, CollateralAmount);\\n        }\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n    }\\n\\n    // Function can be called by an BankX holder to have the protocol buy back BankX with excess collateral value from a desired collateral pool\\n    // This can also happen if the collateral ratio > 1\\n    // add XSD as a burn option while uXSD value is positive\\n    // need two seperate functions: one for bankx and one for XSD\\n    function buyBackBankX(uint256 BankX_amount,uint256 COLLATERAL_out_min, uint256 deadline) external ensure(deadline){\\n        require(!buyback_paused, \\\"Buyback Paused\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before buyback\\\");\\n        CollateralPoolLibrary.BuybackBankX_Params memory input_params = CollateralPoolLibrary.BuybackBankX_Params(\\n            availableExcessCollatDV(),\\n            pid_controller.bankx_updated_price(),\\n            XSD.eth_usd_price(),\\n            BankX_amount\\n        );\\n\\n        (collateral_equivalent_d18) = (CollateralPoolLibrary.calcBuyBackBankX(input_params));\\n\\n        require(COLLATERAL_out_min <= collateral_equivalent_d18, \\\"Slippage limit reached\\\");\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        // Give the sender their desired collateral and burn the BankX\\n        BankX.pool_burn_from(msg.sender, BankX_amount);\\n        TransferHelper.safeTransfer(address(WETH), address(this), collateral_equivalent_d18);\\n        IWETH(WETH).withdraw(collateral_equivalent_d18);\\n        TransferHelper.safeTransferETH(msg.sender, collateral_equivalent_d18);\\n    }\\n    //buyback with XSD instead of bankx\\n    function buyBackXSD(uint256 XSD_amount, uint256 collateral_out_min, uint256 deadline) external ensure(deadline){\\n        require(!buyback_paused, \\\"Buyback Paused\\\");\\n        require(((pid_controller.lastPriceCheck(msg.sender).lastpricecheck+(block_delay)) <= block.number) && (pid_controller.lastPriceCheck(msg.sender).pricecheck), \\\"Must wait for block_delay blocks before buyback\\\");\\n        if(XSD_amount != 0) require((XSD.totalSupply()+XSD_amount)>collat_XSD, \\\"uXSD MUST BE POSITIVE\\\");\\n\\n        CollateralPoolLibrary.BuybackXSD_Params memory input_params = CollateralPoolLibrary.BuybackXSD_Params(\\n            availableExcessCollatDV(),\\n            pid_controller.xsd_updated_price(),\\n            XSD.eth_usd_price(),\\n            XSD_amount\\n        );\\n\\n        (collateral_equivalent_d18) = (CollateralPoolLibrary.calcBuyBackXSD(input_params));\\n\\n        require(collateral_out_min <= collateral_equivalent_d18, \\\"Slippage limit reached\\\");\\n        pid_controller.lastPriceCheck(msg.sender).pricecheck = false;\\n        XSD.pool_burn_from(msg.sender, XSD_amount);\\n        TransferHelper.safeTransfer(address(WETH), address(this), collateral_equivalent_d18);\\n        IWETH(WETH).withdraw(collateral_equivalent_d18);\\n        TransferHelper.safeTransferETH(msg.sender, collateral_equivalent_d18);\\n    }\\n\\n    // Combined into one function due to 24KiB contract memory limit\\n    function setPoolParameters(uint256 new_block_delay, bool _mint_paused, bool _redeem_paused, bool _buyback_paused) external onlyByOwner {\\n        block_delay = new_block_delay;\\n        mint_paused = _mint_paused;\\n        redeem_paused = _redeem_paused;\\n        buyback_paused = _buyback_paused;\\n        emit PoolParametersSet(new_block_delay);\\n    }\\n\\n    function setPIDController(address new_pid_address) external onlyByOwner {\\n        pid_controller = IPIDController(new_pid_address);\\n        pid_address = new_pid_address;\\n    }\\n    function setSmartContractOwner(address _smartcontract_owner) external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        require(_smartcontract_owner != address(0), \\\"Zero address detected\\\");\\n        smartcontract_owner = _smartcontract_owner;\\n    }\\n\\n    function renounceOwnership() external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        smartcontract_owner = address(0);\\n    }\\n\\n    function resetAddresses(address _xsd_contract_address,\\n        address _bankx_contract_address,\\n        address _bankxweth_pool,\\n        address _xsdweth_pool,\\n        address _WETH) external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        require(\\n            (_xsd_contract_address != address(0))\\n            && (_bankx_contract_address != address(0))\\n            && (_WETH != address(0))\\n            && (_bankxweth_pool != address(0))\\n            && (_xsdweth_pool != address(0))\\n        , \\\"Zero address detected\\\"); \\n        XSD = XSDStablecoin(_xsd_contract_address);\\n        BankX = BankXToken(_bankx_contract_address);\\n        xsd_contract_address = _xsd_contract_address;\\n        bankx_contract_address = _bankx_contract_address;\\n        xsdweth_pool = _xsdweth_pool;\\n        bankxweth_pool = _bankxweth_pool;\\n        WETH = _WETH;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event PoolParametersSet(uint256 new_block_delay);\\n\\n}\"\r\n    },\r\n    \"contracts/XSD/Pools/Interfaces/IXSDWETHpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IXSDWETHpool {\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function collatDollarBalance() external returns (uint);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\"\r\n    },\r\n    \"contracts/XSD/Pools/Interfaces/IBankXWETHpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBankXWETHpool {\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function collatDollarBalance() external returns(uint);\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\"\r\n    },\r\n    \"contracts/XSD/XSDStablecoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Pools/CollateralPool.sol\\\";\\nimport \\\"./Pools/Interfaces/IBankXWETHpool.sol\\\";\\nimport \\\"./Pools/Interfaces/IXSDWETHpool.sol\\\";\\nimport \\\"../Oracle/ChainlinkETHUSDPriceConsumer.sol\\\";\\nimport \\\"../Oracle/ChainlinkXAGUSDPriceConsumer.sol\\\";\\n\\ncontract XSDStablecoin is ERC20Custom {\\n\\n    /* ========== STATE VARIABLES ========== */\\n    enum PriceChoice { XSD, BankX }\\n    ChainlinkETHUSDPriceConsumer private eth_usd_pricer;\\n    ChainlinkXAGUSDPriceConsumer private xag_usd_pricer;\\n    uint8 private eth_usd_pricer_decimals;\\n    uint8 private xag_usd_pricer_decimals;\\n    string public symbol;\\n    string public name;\\n    uint8 public constant decimals = 18;\\n    address public pid_address;\\n    address public treasury; \\n    address public collateral_pool_address;\\n    address public router;\\n    address public eth_usd_oracle_address;\\n    address public xag_usd_oracle_address;\\n    address public smartcontract_owner;\\n    uint256 public interest_rate;\\n    IBankXWETHpool private bankxEthPool;\\n    IXSDWETHpool private xsdEthPool;\\n    uint256 public cap_rate;\\n    uint256 public genesis_supply; \\n    //test variables\\n    uint256 ethusdprice;\\n    uint256 xagusdprice;\\n\\n    // The addresses in this array are added by the oracle and these contracts are able to mint xsd\\n    address[] public xsd_pools_array;\\n\\n    // Mapping is also used for faster verification\\n    mapping(address => bool) public xsd_pools; \\n\\n    // Constants for various precisions\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    \\n    uint256 public global_collateral_ratio; // 6 decimals of precision, e.g. 924102 = 0.924102\\n    uint256 public xsd_step; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\\n    uint256 public price_target; // The price of XSD at which the collateral ratio will respond to; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at $1\\n    uint256 public price_band; // The bound above and below the price target at which the refreshCollateralRatio() will not change the collateral ratio\\n\\n    bool public collateral_ratio_paused = false;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPools() {\\n       require(xsd_pools[msg.sender] == true, \\\"Only xsd pools can call this function\\\");\\n        _;//check happens before the function is executed \\n    } \\n\\n    modifier onlyByOwner(){\\n        require(msg.sender == smartcontract_owner, \\\"You are not the owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyByOwnerPID() {\\n        require(msg.sender == smartcontract_owner || msg.sender == pid_address, \\\"You are not the owner or the pid controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyByOwnerOrPool() {\\n        require(\\n            msg.sender == smartcontract_owner  \\n            || xsd_pools[msg.sender] == true, \\n            \\\"You are not the owner or a pool\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _pool_amount,\\n        uint256 _genesis_supply,\\n        address _smartcontract_owner,\\n        address _treasury,\\n        uint256 _cap_rate\\n    ) {\\n        require((_smartcontract_owner != address(0))\\n                && (_treasury != address(0)), \\\"Zero address detected\\\"); \\n        name = _name;\\n        symbol = _symbol;\\n        genesis_supply = _genesis_supply + _pool_amount;\\n        treasury = _treasury;\\n        _mint(_smartcontract_owner, _pool_amount);\\n        _mint(treasury, _genesis_supply);\\n        smartcontract_owner = _smartcontract_owner;\\n        xsd_step = 2500; // 6 decimals of precision, equal to 0.25%\\n        global_collateral_ratio = 1000000; // XSD system starts off fully collateralized (6 decimals of precision)\\n        interest_rate = 52800; //interest rate starts off at 5%\\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\\n        price_target = 800000; // Change price target to 1 gram of silver\\n        price_band = 5000; // Collateral ratio will not adjust if 0.005 off target at genesis\\n        cap_rate = _cap_rate;// Maximum mint amount\\n    }\\n    /* ========== VIEWS ========== */\\n\\n    function pool_price(PriceChoice choice) internal view returns (uint256) {\\n        // Get the ETH / USD price first, and cut it down to 1e6 precision\\n        uint256 _eth_usd_price = 1200000000;//(uint256(eth_usd_pricer.getLatestPrice())*PRICE_PRECISION)/(uint256(10) ** eth_usd_pricer_decimals);\\n        uint256 price_vs_eth = 0;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n\\n        if (choice == PriceChoice.XSD) {\\n            (reserve0, reserve1, ) = xsdEthPool.getReserves();\\n            if(reserve0 == 0 || reserve1 == 0){\\n                return 1;\\n            }\\n            price_vs_eth = reserve0/(reserve1); // How much XSD if you put in 1 WETH\\n        }\\n        else if (choice == PriceChoice.BankX) {\\n            (reserve0, reserve1, ) = bankxEthPool.getReserves();\\n            if(reserve0 == 0 || reserve1 == 0){\\n                return 1;\\n            }\\n            price_vs_eth = reserve0/(reserve1);  // How much BankX if you put in 1 WETH\\n        }\\n        else revert(\\\"INVALID PRICE CHOICE. Needs to be either 0 (XSD) or 1 (BankX)\\\");\\n\\n        // Will be in 1e6 format\\n        return _eth_usd_price/price_vs_eth;\\n    }\\n\\n    \\n    //XSD price\\n    function xsd_price() public view returns (uint256) {\\n        return pool_price(PriceChoice.XSD);\\n    }\\n\\n    function bankx_price()  public view returns (uint256) {\\n        return pool_price(PriceChoice.BankX);\\n    }\\n\\n    function eth_usd_price() public view returns (uint256) {\\n        return ethusdprice;//(uint256(eth_usd_pricer.getLatestPrice())*PRICE_PRECISION)/(uint256(10) ** eth_usd_pricer_decimals);\\n    }\\n    //silver price\\n    //hard coded value for testing on goerli\\n    function xag_usd_price() public view returns (uint256) {\\n        return xagusdprice;//(uint256(xag_usd_pricer.getLatestPrice())*PRICE_PRECISION)/(uint256(10) ** xag_usd_pricer_decimals);\\n    }\\n    //test functions\\n    function setETHUSDPRICE(uint _eth_usd_price) public {\\n        ethusdprice = _eth_usd_price;\\n    }\\n    function setXAGUSDPRICE(uint _xag_usd_price) public {\\n        xagusdprice = _xag_usd_price;\\n    }\\n\\n    \\n    // This is needed to avoid costly repeat calls to different getter functions\\n    // It is cheaper gas-wise to just dump everything and only use some of the info\\n    function xsd_info() public view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        return (\\n            pool_price(PriceChoice.XSD), // xsd_price()\\n            pool_price(PriceChoice.BankX), // bankx_price()\\n            totalSupply(), // totalSupply()\\n            global_collateral_ratio, // global_collateral_ratio()\\n            globalCollateralValue(), // globalCollateralValue\\n            (uint256(eth_usd_pricer.getLatestPrice())*PRICE_PRECISION)/(uint256(10) ** eth_usd_pricer_decimals) //eth_usd_price\\n        );\\n    }\\n\\n    // Iterate through all xsd pools and calculate all value of collateral in all pools globally \\n    function globalCollateralValue() public view returns (uint256) {\\n        uint256 collateral_amount = 0;\\n        collateral_amount = CollateralPool(payable(collateral_pool_address)).collatDollarBalance();\\n        return collateral_amount;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n    \\n    // There needs to be a time interval that this can be called. Otherwise it can be called multiple times per expansion.\\n    // To simulate global collateral ratio set xsd price higher than silver price and hit refresh collateral ratio.\\n    uint256 public last_call_time; // Last time the refreshCollateralRatio function was called\\n    function refreshCollateralRatio() public {\\n        require(collateral_ratio_paused == false, \\\"Collateral Ratio has been paused\\\");\\n        uint256 xsd_price_cur = xsd_price();\\n        require(block.timestamp - last_call_time >= refresh_cooldown, \\\"Must wait for the refresh cooldown since last refresh\\\");\\n\\n        // Step increments are 0.25% (upon genesis, changable by setXSDStep()) \\n        \\n        if (xsd_price_cur > (price_target+price_band)) { //decrease collateral ratio\\n            if(global_collateral_ratio <= xsd_step){ //if within a step of 0, go to 0\\n                global_collateral_ratio = 0;\\n            } else {\\n                global_collateral_ratio = global_collateral_ratio-xsd_step;\\n            }\\n        } else if (xsd_price_cur < price_target-price_band) { //increase collateral ratio\\n            if(global_collateral_ratio+xsd_step >= 1000000){\\n                global_collateral_ratio = 1000000; // cap collateral ratio at 1.000000\\n            } else {\\n                global_collateral_ratio = global_collateral_ratio+xsd_step;\\n            }\\n        }\\n        else\\n        last_call_time = block.timestamp; // Set the time of the last expansion\\n        uint256 _interest_rate = (1000000-global_collateral_ratio)/(2);\\n        //update interest rate\\n        if(_interest_rate>52800){\\n            interest_rate = _interest_rate;\\n        }\\n        else{\\n            interest_rate = 52800;\\n        }\\n\\n        emit CollateralRatioRefreshed(global_collateral_ratio);\\n    }\\n\\n    function creatorMint(uint256 amount) public onlyByOwner{\\n        require(genesis_supply+amount<cap_rate,\\\"cap limit reached\\\");\\n        super._mint(treasury,amount);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Used by pools when user redeems\\n    function pool_burn_from(address b_address, uint256 b_amount) public onlyPools {\\n        super._burnFrom(b_address, b_amount);\\n        emit XSDBurned(b_address, msg.sender, b_amount);\\n    }\\n\\n    // This function is what other xsd pools will call to mint new XSD \\n    function pool_mint(address m_address, uint256 m_amount) public onlyPools {\\n        super._mint(m_address, m_amount);\\n        emit XSDMinted(msg.sender, m_address, m_amount);\\n    }\\n    \\n\\n    // Adds collateral addresses supported, such as tether and busd, must be ERC20 \\n    function addPool(address pool_address) public onlyByOwner {\\n        require(pool_address != address(0), \\\"Zero address detected\\\");\\n\\n        require(xsd_pools[pool_address] == false, \\\"Address already exists\\\");\\n        xsd_pools[pool_address] = true; \\n        xsd_pools_array.push(pool_address);\\n\\n        emit PoolAdded(pool_address);\\n    }\\n\\n    // Remove a pool \\n    function removePool(address pool_address) public onlyByOwner {\\n        require(pool_address != address(0), \\\"Zero address detected\\\");\\n\\n        require(xsd_pools[pool_address] == true, \\\"Address nonexistant\\\");\\n        \\n        // Delete from the mapping\\n        delete xsd_pools[pool_address];\\n\\n        // 'Delete' from the array by setting the address to 0x0\\n        for (uint i = 0; i < xsd_pools_array.length; i++){ \\n            if (xsd_pools_array[i] == pool_address) {\\n                xsd_pools_array[i] = address(0); // This will leave a null in the array and keep the indices the same\\n                break;\\n            }\\n        }\\n\\n        emit PoolRemoved(pool_address);\\n    }\\n// create a seperate function for users and the pool\\n    function burnpoolXSD(uint _xsdamount) public {\\n        require(msg.sender == router, \\\"Only the router can access this function\\\");\\n        require(totalSupply()-CollateralPool(payable(collateral_pool_address)).collat_XSD()>_xsdamount, \\\"uXSD has to be positive\\\");\\n        super._burn(address(xsdEthPool),_xsdamount);\\n        xsdEthPool.sync();\\n        emit XSDBurned(msg.sender, address(this), _xsdamount);\\n    }\\n    // add burn function for users\\n    function burnUserXSD(uint _xsdamount) public {\\n        require(totalSupply()-CollateralPool(payable(collateral_pool_address)).collat_XSD()>_xsdamount, \\\"uXSD has to be positive\\\");\\n        super._burn(msg.sender, _xsdamount);\\n        emit XSDBurned(msg.sender, address(this), _xsdamount);\\n    }\\n    function setXSDStep(uint256 _new_step) public onlyByOwnerPID {\\n        xsd_step = _new_step;\\n\\n        emit XSDStepSet(_new_step);\\n    }  \\n\\n    function setPriceTarget (uint256 _new_price_target) public onlyByOwnerPID {\\n        price_target = _new_price_target;\\n\\n        emit PriceTargetSet(_new_price_target);\\n    }\\n\\n    function setRefreshCooldown(uint256 _new_cooldown) public onlyByOwnerPID {\\n    \\trefresh_cooldown = _new_cooldown;\\n\\n        emit RefreshCooldownSet(_new_cooldown);\\n    }\\n\\n    function setTreasury(address _new_treasury) public onlyByOwner {\\n        require(_new_treasury != address(0), \\\"Zero address detected\\\");\\n        treasury = _new_treasury;\\n    }\\n\\n    function setETHUSDOracle(address _eth_usd_oracle_address) public onlyByOwner {\\n        require(_eth_usd_oracle_address != address(0), \\\"Zero address detected\\\");\\n\\n        eth_usd_oracle_address = _eth_usd_oracle_address;\\n        eth_usd_pricer = ChainlinkETHUSDPriceConsumer(eth_usd_oracle_address);\\n        eth_usd_pricer_decimals = eth_usd_pricer.getDecimals();\\n\\n        emit ETHUSDOracleSet(_eth_usd_oracle_address);\\n    }\\n    \\n    function setXAGUSDOracle(address _xag_usd_oracle_address) public onlyByOwner {\\n        require(_xag_usd_oracle_address != address(0), \\\"Zero address detected\\\");\\n\\n        xag_usd_oracle_address = _xag_usd_oracle_address;\\n        xag_usd_pricer = ChainlinkXAGUSDPriceConsumer(xag_usd_oracle_address);\\n        xag_usd_pricer_decimals = xag_usd_pricer.getDecimals();\\n\\n        emit XAGUSDOracleSet(_xag_usd_oracle_address);\\n    }\\n\\n    function setPIDController(address _pid_address) external onlyByOwner {\\n        require(_pid_address != address(0), \\\"Zero address detected\\\");\\n\\n        pid_address = _pid_address;\\n\\n        emit PIDControllerSet(_pid_address);\\n    }\\n\\n    function setRouterAddress(address _router) external onlyByOwner {\\n        require(_router != address(0), \\\"Zero address detected\\\");\\n        router = _router;\\n    }\\n\\n    function setPriceBand(uint256 _price_band) external onlyByOwner {\\n        price_band = _price_band;\\n\\n        emit PriceBandSet(_price_band);\\n    }\\n\\n    // Sets the XSD_ETH Uniswap oracle address \\n    function setXSDEthPool(address _xsd_pool_addr) public onlyByOwner {\\n        require(_xsd_pool_addr != address(0), \\\"Zero address detected\\\");\\n        xsdEthPool = IXSDWETHpool(_xsd_pool_addr); \\n\\n        emit XSDETHPoolSet(_xsd_pool_addr);\\n    }\\n\\n    // Sets the BankX_ETH Uniswap oracle address \\n    function setBankXEthPool(address _bankx_pool_addr) public onlyByOwner {\\n        require(_bankx_pool_addr != address(0), \\\"Zero address detected\\\");\\n        bankxEthPool = IBankXWETHpool(_bankx_pool_addr);\\n\\n        emit BankXEthPoolSet(_bankx_pool_addr);\\n    }\\n\\n    //sets the collateral pool address\\n    function setCollateralEthPool(address _collateral_pool_address) public onlyByOwner {\\n        require(_collateral_pool_address != address(0), \\\"Zero address detected\\\");\\n        collateral_pool_address = payable(_collateral_pool_address);\\n    }\\n\\n    function setSmartContractOwner(address _smartcontract_owner) external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        require(_smartcontract_owner != address(0), \\\"Zero address detected\\\");\\n        smartcontract_owner = _smartcontract_owner;\\n    }\\n\\n    function renounceOwnership() external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        smartcontract_owner = address(0);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    // Track XSD burned\\n    event XSDBurned(address indexed from, address indexed to, uint256 amount);\\n\\n    // Track XSD minted\\n    event XSDMinted(address indexed from, address indexed to, uint256 amount);\\n\\n    event CollateralRatioRefreshed(uint256 global_collateral_ratio);\\n    event PoolAdded(address pool_address);\\n    event PoolRemoved(address pool_address);\\n    event RedemptionFeeSet(uint256 red_fee);\\n    event MintingFeeSet(uint256 min_fee);\\n    event XSDStepSet(uint256 new_step);\\n    event PriceTargetSet(uint256 new_price_target);\\n    event RefreshCooldownSet(uint256 new_cooldown);\\n    event ETHUSDOracleSet(address eth_usd_oracle_address);\\n    event XAGUSDOracleSet(address xag_usd_oracle_address);\\n    event PIDControllerSet(address _pid_controller);\\n    event PriceBandSet(uint256 price_band);\\n    event XSDETHPoolSet(address xsd_pool_addr);\\n    event BankXEthPoolSet(address bankx_pool_addr);\\n    event CollateralRatioToggled(bool collateral_ratio_paused);\\n}\"\r\n    },\r\n    \"contracts/UniswapFork/Interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IRouter{\\n    function creatorAddLiquidityTokens(\\n        address tokenB,\\n        uint amountB,\\n        uint deadline\\n    ) external;\\n\\n    function creatorAddLiquidityETH(\\n        address pool,\\n        uint deadline\\n    ) external payable;\\n\\n    function userAddLiquidityETH(\\n        address pool,\\n        uint deadline\\n    ) external payable;\\n\\n    function userRedeemLiquidity(\\n        address pool,\\n        uint deadline\\n    ) external;\\n\\n    function swapETHForXSD(uint amountOut,uint deadline) external payable;\\n\\n    function swapXSDForETH(uint amountOut, uint amountInMax, uint deadline) external;\\n\\n    function swapETHForBankX(uint amountOut, uint deadline) external payable;\\n    \\n    function swapBankXForETH(uint amountOut, uint amountInMax, uint deadline) external;\\n\\n    function swapBankXForXSD(uint bankx_amount, address sender, uint256 eth_min_amount, uint256 bankx_min_amount, uint256 deadline) external;\\n\\n    function swapXSDForBankX(uint XSD_amount, address sender, uint256 eth_min_amount, uint256 xsd_min_amount, uint256 deadline) external;\\n}\"\r\n    },\r\n    \"contracts/XSD/Pools/CollateralPoolLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CollateralPoolLibrary {\\n    // ================ Structs ================\\n    // Needed to lower stack size\\n    struct MintFF_Params {\\n        uint256 bankx_price_usd; \\n        uint256 col_price_usd;\\n        uint256 bankx_amount;\\n        uint256 collateral_amount;\\n        uint256 col_ratio;\\n    }\\n\\n    struct BuybackBankX_Params {\\n        uint256 excess_collateral_dollar_value_d18;\\n        uint256 bankx_price_usd;\\n        uint256 col_price_usd;\\n        uint256 BankX_amount;\\n    }\\n\\n    struct BuybackXSD_Params {\\n        uint256 excess_collateral_dollar_value_d18;\\n        uint256 xsd_price_usd;\\n        uint256 col_price_usd;\\n        uint256 XSD_amount;\\n    }\\n\\n\\n\\n    // ================ Functions ================\\n// xsd is at the price of one gram of silver.\\n    function calcMint1t1XSD(uint256 col_price, uint256 silver_price, uint256 collateral_amount_d18) public pure returns (uint256) {\\n        uint256 gram_price = (silver_price*(1e4))/(311035);\\n        return (collateral_amount_d18*(col_price))/(gram_price); \\n    }\\n// xsd is at the price of one gram of silver\\n    function calcMintAlgorithmicXSD(uint256 bankx_price_usd, uint256 silver_price, uint256 bankx_amount_d18) public pure returns (uint256) {\\n        uint256 gram_price = (silver_price*(1e4))/(311035);\\n        return (bankx_amount_d18*bankx_price_usd)/(gram_price);\\n    }\\n\\n    function calcMintInterest(uint256 XSD_amount,uint256 silver_price,uint256 rate, uint256 accum_interest, uint256 interest_rate, uint256 time, uint256 amount) internal view returns(uint256, uint256, uint256, uint256) {\\n        uint256 gram_price = (silver_price*(1e4))/(311035);\\n        if(time == 0){\\n        interest_rate = rate;\\n        amount = XSD_amount;\\n        time = block.timestamp;\\n        }\\n        else{\\n        uint delta_t = block.timestamp - time;\\n        delta_t = delta_t/(86400); \\n        accum_interest = accum_interest+((amount*gram_price*interest_rate*delta_t)/(365*(1e12)));\\n    \\n        interest_rate = (amount*interest_rate) + (XSD_amount*rate);\\n        amount = amount+XSD_amount;\\n        interest_rate = interest_rate/amount;\\n        time = block.timestamp;\\n        }\\n        return (\\n            accum_interest,\\n            interest_rate,\\n            time, \\n            amount\\n        );\\n    }\\n\\n    function calcRedemptionInterest(uint256 XSD_amount,uint256 silver_price, uint256 accum_interest, uint256 interest_rate, uint256 time, uint256 amount) internal view returns(uint256, uint256, uint256, uint256){\\n        uint256 gram_price = (silver_price*(1e4))/(311035);\\n        uint delta_t = block.timestamp - time;\\n        delta_t = delta_t/(86400);\\n        accum_interest = accum_interest+((amount*gram_price*interest_rate*delta_t)/(365*(1e12)));\\n        amount = amount - XSD_amount;\\n        time = block.timestamp;\\n        return (\\n            accum_interest,\\n            interest_rate,\\n            time, \\n            amount\\n        );\\n    }\\n    \\n    // Must be internal because of the struct\\n    // xsd must be the dollar value of one price of silver\\n    function calcMintFractionalXSD(MintFF_Params memory params) internal pure returns (uint256, uint256) {\\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\\n        // The contract must check the proper ratio was sent to mint XSD. We do this by seeing the minimum mintable XSD based on each amount \\n        uint256 bankx_dollar_value_d18;\\n        uint256 c_dollar_value_d18;\\n        \\n        // Scoping for stack concerns\\n        {    \\n            // USD amounts of the collateral and the BankX\\n            bankx_dollar_value_d18 = params.bankx_amount*(params.bankx_price_usd)/(1e6);\\n            c_dollar_value_d18 = params.collateral_amount*(params.col_price_usd)/(1e6);\\n\\n        }\\n        uint calculated_bankx_dollar_value_d18 = \\n                    (c_dollar_value_d18*(1e6)/(params.col_ratio))\\n                    -(c_dollar_value_d18);\\n\\n        uint calculated_bankx_needed = calculated_bankx_dollar_value_d18*(1e6)/(params.bankx_price_usd);\\n\\n        return (\\n            (c_dollar_value_d18+calculated_bankx_dollar_value_d18),\\n            calculated_bankx_needed\\n        );\\n    }\\n\\n    function calcRedeem1t1XSD(uint256 col_price_usd,uint256 silver_price, uint256 XSD_amount) public pure returns (uint256,uint256) {\\n        uint256 gram_price = (silver_price*(1e4))/(311035);\\n        return ((XSD_amount*gram_price/1e6),((XSD_amount*gram_price)/col_price_usd));\\n    }\\n\\n    // Must be internal because of the struct\\n    function calcBuyBackBankX(BuybackBankX_Params memory params) internal pure returns (uint256) {\\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible BankX with the desired collateral\\n        require(params.excess_collateral_dollar_value_d18 > 0, \\\"No excess collateral to buy back!\\\");\\n\\n        // Make sure not to take more than is available\\n        uint256 bankx_dollar_value_d18 = (params.BankX_amount*params.bankx_price_usd);\\n        require((bankx_dollar_value_d18/1e6) <= params.excess_collateral_dollar_value_d18, \\\"You are trying to buy back more than the excess!\\\");\\n\\n        // Get the equivalent amount of collateral based on the market value of BankX provided \\n        uint256 collateral_equivalent_d18 = (bankx_dollar_value_d18)/(params.col_price_usd);\\n        //collateral_equivalent_d18 = collateral_equivalent_d18-((collateral_equivalent_d18*(params.buyback_fee))/(1e6));\\n\\n        return (\\n            collateral_equivalent_d18\\n        );\\n\\n    }\\n\\n    function calcBuyBackXSD(BuybackXSD_Params memory params) internal pure returns (uint256) {\\n        require(params.excess_collateral_dollar_value_d18 > 0, \\\"No excess collateral to buy back!\\\");\\n\\n        uint256 xsd_dollar_value_d18 = params.XSD_amount*(params.xsd_price_usd);\\n        require((xsd_dollar_value_d18/1e6) <= params.excess_collateral_dollar_value_d18, \\\"You are trying to buy more than the excess!\\\");\\n\\n        uint256 collateral_equivalent_d18 = (xsd_dollar_value_d18)/(params.col_price_usd);\\n\\n        return (\\n            collateral_equivalent_d18\\n        );\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/Oracle/Interfaces/IPIDController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPIDController{\\n    function bucket1() external view returns (bool);\\n    function bucket2() external view returns (bool);\\n    function bucket3() external view returns (bool);\\n    function diff1() external view returns (uint);\\n    function diff2() external view returns (uint);\\n    function diff3() external view returns (uint);\\n    function amountpaid1() external view returns (uint);\\n    function amountpaid2() external view returns (uint);\\n    function amountpaid3() external view returns (uint);\\n    function bankx_updated_price() external view returns (uint);\\n    function xsd_updated_price() external view returns (uint);\\n    function systemCalculations() external;\\n    struct PriceCheck{\\n        uint256 lastpricecheck;\\n        bool pricecheck;\\n    }\\n    function lastPriceCheck(address user) external view returns (PriceCheck memory info);\\n    function amountPaidBankXWETH(uint ethvalue) external;\\n    function amountPaidXSDWETH(uint ethvalue) external;\\n    function amountPaidCollateralPool(uint ethvalue) external;\\n}\"\r\n    },\r\n    \"contracts/BankX/BankXToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../XSD/XSDStablecoin.sol\\\";\\n\\ncontract BankXToken is ERC20Custom {\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    string public symbol;\\n    string public name;\\n    uint8 public constant decimals = 18;\\n    \\n    \\n    uint256 public genesis_supply; // 2B is printed upon genesis\\n    address public pool_address; //points to BankX pool address\\n    address public treasury; //stores the genesis supply\\n    address public router;\\n    XSDStablecoin private XSD; //XSD stablecoin instance\\n    address public smartcontract_owner;\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPools() {\\n       require(XSD.xsd_pools(msg.sender) == true, \\\"Only xsd pools can mint new BankX\\\");\\n        _;\\n    } \\n    \\n    modifier onlyByOwner() {\\n        require(msg.sender == smartcontract_owner, \\\"You are not an owner\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _pool_amount, \\n        uint256 _genesis_supply,\\n        address _treasury,\\n        address _smartcontract_owner\\n    ) {\\n        require((_treasury != address(0)), \\\"Zero address detected\\\"); \\n        name = _name;\\n        symbol = _symbol;\\n        genesis_supply = _genesis_supply + _pool_amount;\\n        treasury = _treasury;\\n        _mint(_msgSender(), _pool_amount);\\n        _mint(treasury, _genesis_supply);\\n        smartcontract_owner = _smartcontract_owner;\\n\\n    \\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setPool(address new_pool) external onlyByOwner {\\n        require(new_pool != address(0), \\\"Zero address detected\\\");\\n\\n        pool_address = new_pool;\\n    }\\n\\n    function setTreasury(address new_treasury) external onlyByOwner {\\n        require(new_treasury != address(0), \\\"Treasury address cannot be 0\\\");\\n        treasury = new_treasury;\\n    }\\n\\n    function setRouterAddress(address _router) external onlyByOwner {\\n        require(_router != address(0), \\\"Zero address detected\\\");\\n        router = _router;\\n    }\\n    \\n    function setXSDAddress(address xsd_contract_address) external onlyByOwner {\\n        require(xsd_contract_address != address(0), \\\"Zero address detected\\\");\\n\\n        XSD = XSDStablecoin(xsd_contract_address);\\n\\n        emit XSDAddressSet(xsd_contract_address);\\n    }\\n    \\n    function mint(address to, uint256 amount) public onlyPools {\\n        _mint(to, amount);\\n        emit BankXMinted(address(this), to, amount);\\n    }\\n    \\n    function genesisSupply() public view returns(uint256){\\n        return genesis_supply;\\n    }\\n\\n    // This function is what other xsd pools will call to mint new BankX (similar to the XSD mint) \\n    function pool_mint(address m_address, uint256 m_amount) external onlyPools  {        \\n        super._mint(m_address, m_amount);\\n        emit BankXMinted(address(this), m_address, m_amount);\\n    }\\n\\n    // This function is what other xsd pools will call to burn BankX \\n    function pool_burn_from(address b_address, uint256 b_amount) external onlyPools {\\n\\n        super._burnFrom(b_address, b_amount);\\n        emit BankXBurned(b_address, address(this), b_amount);\\n    }\\n    //burn bankx from the pool when bankx is inflationary\\n    function burnpoolBankX(uint _bankx_amount) public {\\n        require(msg.sender == router, \\\"Only Router can access this function\\\");\\n        require(totalSupply()>genesis_supply,\\\"BankX must be deflationary\\\");\\n        super._burn(pool_address, _bankx_amount);\\n        IBankXWETHpool(pool_address).sync();\\n        emit BankXBurned(msg.sender, address(this), _bankx_amount);\\n    }\\n\\n    function setSmartContractOwner(address _smartcontract_owner) external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        require(_smartcontract_owner != address(0), \\\"Zero address detected\\\");\\n        smartcontract_owner = _smartcontract_owner;\\n    }\\n\\n    function renounceOwnership() external{\\n        require(msg.sender == smartcontract_owner, \\\"Only the smart contract owner can access this function\\\");\\n        smartcontract_owner = address(0);\\n    }\\n    /* ========== EVENTS ========== */\\n\\n    // Track BankX burned\\n    event BankXBurned(address indexed from, address indexed to, uint256 amount);\\n\\n    // Track BankX minted\\n    event BankXMinted(address indexed from, address indexed to, uint256 amount);\\n    event XSDAddressSet(address addr);\\n}\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/ERC20/ERC20Custom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Due to compiling issues, _name, _symbol, and _decimals were removed\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Custom is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) internal _balances;\\n\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n    uint256 private _totalSupply;\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Transfers 'tokens' from 'account' to origin address, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n       require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n        \\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle/ChainlinkETHUSDPriceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkETHUSDPriceConsumer {\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor() {\\n        priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            uint80 roundID\\n            , \\n            int price,\\n            ,\\n            ,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n        require(answeredInRound >= roundID);\\n        return price;\\n    }\\n\\n    function getDecimals() public view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n}\"\r\n    },\r\n    \"contracts/Oracle/ChainlinkXAGUSDPriceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkXAGUSDPriceConsumer {\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n\\n    constructor() {\\n        priceFeed = AggregatorV3Interface(0x379589227b15F1a12195D3f2d90bBc9F31f95235);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            uint80 roundID\\n            , \\n            int price,\\n            ,\\n            ,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n        require(answeredInRound >= roundID);\\n        return price;\\n    }\\n\\n    function getDecimals() public view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/XSD/Pools/CollateralPoolLibrary.sol\": {\r\n        \"CollateralPoolLibrary\": \"0x45b07536b320297ebf525a87373a13daf10b17f3\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xsd_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bankx_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pid_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xsd_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bankx_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_origin_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartcontract_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"arbitrage_paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankx_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankx_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"block_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bankx_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bankx_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"burnBankX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"XSD_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsd_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"burnXSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause_arbitrage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xsd_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bankx_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pid_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xsd_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bankx_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_origin_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartcontract_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block_delay\",\"type\":\"uint256\"}],\"name\":\"resetAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"setArbitrageCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartcontract_owner\",\"type\":\"address\"}],\"name\":\"setSmartContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartcontract_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xsd_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xsd_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Arbitrage", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000075cae30025a514b7ae069917e132cc99762a0e1600000000000000000000000013e636cbfd6a7d33a8df7ebbf42f63adc9bb592a000000000000000000000000eea52f6587f788cc12d0b5a28c48e61866c076f000000000000000000000000059ca927ae4c900dc8091515191e39b010bec1118000000000000000000000000abac1c04408cb6509bc9340e6b033c17f161ef9e00000000000000000000000053f51fcdf06946aafe25f14d2f1c9b66e71ca6830000000000000000000000002147f5c02c2869e8c2d8f86471d3d7500355d698000000000000000000000000c3f015a2cbdf48866763311932e40001e18296a40000000000000000000000007f2ac92cdbb196dee32cc19baed93bfc0227e2b80000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}