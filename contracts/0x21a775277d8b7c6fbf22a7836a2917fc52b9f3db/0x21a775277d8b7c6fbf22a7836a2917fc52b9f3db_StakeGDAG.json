{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n// Decentralized LP Distribution Stake for GhostDAG.org\r\n// Please refer to Ghostpaper.GhostDAG.org \r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    }\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n    }\r\n\r\ncontract StakeGDAG is Owned {\r\n    \r\n    using SafeMath for uint;\r\n    address public GDAG;\r\n    address public GDAG_LP;\r\n                         \r\n    uint public feeOnUnstake;                   \r\n    uint public feeOnStake;                     \r\n    uint public minimumStake;\r\n    uint public totalStaked;\r\n    bool public active = true;\r\n    \r\n    mapping(address => uint) public referralCount;\r\n    mapping(address => uint) public referralRewards;\r\n    mapping(address => uint) public stakes;\r\n    mapping(address => uint) public stakeRewards;\r\n    mapping(address => uint) private lastClock;\r\n    \r\n    event OnWithdrawal(address sender, uint amount);\r\n    event OnStake(address sender, uint amount, uint tax);\r\n    event OnUnstake(address sender, uint amount, uint tax);\r\n    \r\n    constructor(\r\n        address _gdag,\r\n        address _gdagLP,\r\n        uint _feeOnStake, \r\n        uint _feeOnUnstake,\r\n        uint _minimumStake) {\r\n            \r\n        GDAG = _gdag;\r\n        GDAG_LP = _gdagLP;\r\n        feeOnStake = _feeOnStake;\r\n        feeOnUnstake = _feeOnUnstake;\r\n        minimumStake = _minimumStake;\r\n    }\r\n    \r\n    modifier whenActive() {\r\n        require(active == true, \"Staking yet to open\");\r\n        _;\r\n    }\r\n    \r\n    function checkEarnings(address _stakeholder) public view returns (uint) {\r\n    uint activeDays = (block.timestamp.sub(lastClock[_stakeholder])).div(86400);\r\n    uint gdagLPBalance = IERC20(GDAG_LP).balanceOf(address(this));\r\n    uint rewards = 0;\r\n    uint stakeAmount = stakes[_stakeholder].div(10**18); \r\n    \r\n    if (stakeAmount >= 287000000) {\r\n        rewards = gdagLPBalance.mul(10).mul(activeDays).mul(30).div(100000000);\r\n    } else if (stakeAmount >= 143500000) {\r\n        rewards = gdagLPBalance.mul(9).mul(activeDays).mul(24).div(100000000);\r\n    } else if (stakeAmount >= 28700000) {\r\n        rewards = gdagLPBalance.mul(8).mul(activeDays).mul(19).div(100000000);\r\n    } else if (stakeAmount >= 2870000) {\r\n        rewards = gdagLPBalance.mul(7).mul(activeDays).mul(14).div(100000000);\r\n    } else if (stakeAmount >= 287000) {\r\n        rewards = gdagLPBalance.mul(6).mul(activeDays).mul(8).div(100000000);\r\n    } else if (stakeAmount >= 28700) {\r\n        rewards = gdagLPBalance.mul(5).mul(activeDays).mul(5).div(100000000);\r\n    }\r\n\r\n    return rewards;\r\n    }\r\n\r\n    function stakeGDAG(uint _amount) external {\r\n        require(_amount >= minimumStake, \"Check minimum stake\");\r\n        require(IERC20(GDAG).balanceOf(msg.sender) >= _amount, \"Insufficient GDAG Balance\");\r\n        require(IERC20(GDAG).transferFrom(msg.sender, address(this), _amount), \"Staking Failed\");\r\n\r\n        uint stakingTax = (feeOnStake.mul(_amount)).div(1000);\r\n        uint afterTax = _amount.sub(stakingTax);\r\n\r\n        totalStaked = totalStaked.add(afterTax);\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(checkEarnings(msg.sender));\r\n\r\n        uint remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400);\r\n        lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n        stakes[msg.sender] = (stakes[msg.sender]).add(afterTax);\r\n        \r\n        emit OnStake(msg.sender, afterTax, stakingTax);\r\n    }\r\n    \r\n    function unstakeGDAG(uint _amount) external {\r\n        require(_amount <= stakes[msg.sender] && _amount > 0, \"Not enough GDAG\");\r\n\r\n        uint unstakingTax = (feeOnUnstake.mul(_amount)).div(1000);\r\n        uint afterTax = _amount.sub(unstakingTax);\r\n\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(checkEarnings(msg.sender));\r\n        stakes[msg.sender] = (stakes[msg.sender]).sub(_amount);\r\n\r\n        uint remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400);\r\n        lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n        totalStaked = totalStaked.sub(_amount);\r\n        IERC20(GDAG).transfer(msg.sender, afterTax);\r\n\r\n        emit OnUnstake(msg.sender, _amount, unstakingTax);\r\n    }\r\n    \r\n    function claimEarnings() external returns (bool success) {\r\n    uint totalReward = (referralRewards[msg.sender]).add(stakeRewards[msg.sender]).add(checkEarnings(msg.sender));\r\n    require((block.timestamp - lastClock[msg.sender]) >= 86400, \"Minimum claim time not reached\");\r\n    require(totalReward > 0, \"No rewards to claim\"); \r\n    require(IERC20(GDAG_LP).balanceOf(address(this)) >= totalReward, \"Not enough Tokens in Pool\");\r\n    \r\n    stakeRewards[msg.sender] = 0;\r\n    referralRewards[msg.sender] = 0;\r\n    referralCount[msg.sender] = 0;\r\n\r\n    uint remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(86400);\r\n    lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n    IERC20(GDAG_LP).transfer(msg.sender, totalReward);\r\n\r\n    emit OnWithdrawal(msg.sender, totalReward);\r\n    return true;\r\n    }\r\n\r\n    function rewardPool() external view returns (uint) {\r\n    return IERC20(GDAG_LP).balanceOf(address(this));\r\n    }\r\n    \r\n    function changePoolStatus() external onlyOwner() {\r\n        if(active) {\r\n            active = false;\r\n        } else {\r\n            active = true;\r\n        }\r\n    }\r\n    \r\n    function setFeeOnStake(uint _feeOnStake) external onlyOwner() {\r\n        feeOnStake = _feeOnStake;\r\n    }\r\n\r\n    function setFeeOnUnstake(uint _feeOnUnstake) external onlyOwner() {\r\n        feeOnUnstake = _feeOnUnstake;\r\n    }\r\n    \r\n    function setMinimumStake(uint _minimumStake) external onlyOwner() {\r\n        minimumStake = _minimumStake;\r\n    }\r\n    \r\n    function rescueGDAG(uint _amount) external onlyOwner returns (bool success) {\r\n        require((IERC20(GDAG).balanceOf(address(this))).sub(totalStaked) >= _amount, \"Not enough GDAG\");\r\n        IERC20(GDAG).transfer(msg.sender, _amount);\r\n        emit OnWithdrawal(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function rescueLP(uint _amount) external onlyOwner returns (bool success) {\r\n    require(IERC20(GDAG_LP).balanceOf(address(this)) >= _amount, \"Not enough LP\");\r\n    IERC20(GDAG_LP).transfer(msg.sender, _amount);\r\n    emit OnWithdrawal(msg.sender, _amount);\r\n    return true;\r\n    }\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gdag\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gdagLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeOnStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeOnUnstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GDAG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GDAG_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changePoolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"checkEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueGDAG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeOnStake\",\"type\":\"uint256\"}],\"name\":\"setFeeOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeOnUnstake\",\"type\":\"uint256\"}],\"name\":\"setFeeOnUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGDAG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeGDAG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakeGDAG", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008bf30e9f44e5d068a9d0c20da22660997a532e330000000000000000000000009c62a8fcc76a77938c82b5a76a68aadd6806d10700000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000613d48294e20ef00000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://731e999ca4e06c212731f29f498b35f9c0f1822ed70c1a51444dcc225633fc14"}