{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract RevShareContract {\r\n    address public owner;\r\n    address public incentivesAddress;\r\n\r\n    uint256 public currentRound = 0; // Keeps track of the current round\r\n\r\n    struct Round {\r\n        uint256 revenueForBB;\r\n        uint256 revenueForBettingVolume;\r\n        uint256 revenueForReferrals;\r\n        uint256 totalBBTokens;\r\n        uint256 totalBettingVolume;\r\n        uint256 totalReferrals;\r\n        uint256 startTime;\r\n        bool isSnapshotUploaded;\r\n        mapping(address => uint256) snapshotBBBalances;\r\n        mapping(address => uint256) snapshotBettingVolume;\r\n        mapping(address => uint256) snapshotReferrals;\r\n    }\r\n\r\n    mapping(uint256 => Round) public rounds;\r\n\r\n    // Separate mapping for each type of claim\r\n    mapping(uint256 => mapping(address => bool)) hasClaimedBB;\r\n    mapping(uint256 => mapping(address => bool)) hasClaimedBettingVolume;\r\n    mapping(uint256 => mapping(address => bool)) hasClaimedReferral;\r\n\r\n    event EthClaim(address indexed claimer, uint256 amount, uint256 round);\r\n    event AdminWithdraw(uint256 amount, uint256 round);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _incentivesAddress) {\r\n        owner = msg.sender;\r\n        incentivesAddress = _incentivesAddress;\r\n    }\r\n\r\n    function depositRevenue(uint256 bbRevenue, uint256 bettingVolumeRevenue, uint256 referralsRevenue, uint256 incentivesRevenue) external payable onlyOwner {\r\n        require(msg.value == bbRevenue + bettingVolumeRevenue + referralsRevenue + incentivesRevenue, \"Mismatch in sent value and declared revenue distribution.\");\r\n        currentRound += 1;\r\n\r\n        rounds[currentRound].startTime = block.timestamp;\r\n        rounds[currentRound].revenueForBB = bbRevenue;\r\n        rounds[currentRound].revenueForBettingVolume = bettingVolumeRevenue;\r\n        rounds[currentRound].revenueForReferrals = referralsRevenue;\r\n\r\n        payable(incentivesAddress).transfer(incentivesRevenue); // send specified amount to the incentives address immediately\r\n    }\r\n\r\n\r\n    function uploadBBBalances(address[] calldata bbHolders, uint256[] calldata bbBalances) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < bbHolders.length; i++) {\r\n        r.snapshotBBBalances[bbHolders[i]] = bbBalances[i];\r\n        r.totalBBTokens += bbBalances[i];\r\n    }\r\n}\r\n\r\nfunction uploadBettingVolumes(address[] calldata betters, uint256[] calldata bettingVolumes) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < betters.length; i++) {\r\n        r.snapshotBettingVolume[betters[i]] = bettingVolumes[i];\r\n        r.totalBettingVolume += bettingVolumes[i];\r\n    }\r\n}\r\n\r\nfunction uploadReferrals(address[] calldata referrers, uint256[] calldata referralAmounts) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < referrers.length; i++) {\r\n        r.snapshotReferrals[referrers[i]] = referralAmounts[i];\r\n        r.totalReferrals += referralAmounts[i];\r\n    }\r\n}\r\n\r\n     function lockSnapshot() external onlyOwner {\r\n        require(currentRound > 0, \"Deposit revenue first\");\r\n        Round storage r = rounds[currentRound];\r\n        require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n        r.isSnapshotUploaded = true;\r\n    }\r\n\r\n    function claimBB(uint256 roundNumber) external {\r\n        // Checks\r\n        require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n        Round storage r = rounds[roundNumber];\r\n        require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n        require(!hasClaimedBB[roundNumber][msg.sender], \"You have already claimed BB for this round\");\r\n        require(r.snapshotBBBalances[msg.sender] > 0, \"No BB balance to claim\");\r\n        \r\n        uint256 claimAmount = (r.revenueForBB * r.snapshotBBBalances[msg.sender]) / r.totalBBTokens;\r\n\r\n        // Effects\r\n        hasClaimedBB[roundNumber][msg.sender] = true;\r\n\r\n        // Interactions\r\n        (bool success,) = msg.sender.call{value: claimAmount}(\"\");\r\n        require(success, \"Claim BB transfer failed\");\r\n        emit EthClaim(msg.sender, claimAmount, roundNumber);\r\n    }\r\n\r\n    function claimBettingVolume(uint256 roundNumber) external {\r\n        // Checks\r\n        require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n        Round storage r = rounds[roundNumber];\r\n        require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n        require(!hasClaimedBettingVolume[roundNumber][msg.sender], \"You have already claimed Betting Volume for this round\");\r\n        require(r.snapshotBettingVolume[msg.sender] > 0, \"No Betting Volume to claim\");\r\n\r\n        uint256 claimAmount = (r.revenueForBettingVolume * r.snapshotBettingVolume[msg.sender]) / r.totalBettingVolume;\r\n\r\n        // Effects\r\n        hasClaimedBettingVolume[roundNumber][msg.sender] = true;\r\n\r\n        // Interactions\r\n        (bool success,) = msg.sender.call{value: claimAmount}(\"\");\r\n        require(success, \"Claim Betting Volume transfer failed\");\r\n        emit EthClaim(msg.sender, claimAmount, roundNumber);\r\n    }\r\n\r\n    function claimReferral(uint256 roundNumber) external {\r\n        // Checks\r\n        require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n        Round storage r = rounds[roundNumber];\r\n        require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n        require(!hasClaimedReferral[roundNumber][msg.sender], \"You have already claimed Referrals for this round\");\r\n        require(r.snapshotReferrals[msg.sender] > 0, \"No Referrals to claim\");\r\n\r\n        uint256 claimAmount = (r.revenueForReferrals * r.snapshotReferrals[msg.sender]) / r.totalReferrals;\r\n\r\n        // Effects\r\n        hasClaimedReferral[roundNumber][msg.sender] = true;\r\n\r\n        // Interactions\r\n        (bool success,) = msg.sender.call{value: claimAmount}(\"\");\r\n        require(success, \"Claim Referral transfer failed\");\r\n        emit EthClaim(msg.sender, claimAmount, roundNumber);\r\n    }\r\n\r\n   function claimableBB(address userAddress, uint256 roundNumber) external view returns (uint256) {\r\n    require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n    Round storage r = rounds[roundNumber];\r\n    require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n\r\n    if (hasClaimedBB[roundNumber][userAddress]) {\r\n        return 0;\r\n    }\r\n\r\n    if (r.snapshotBBBalances[userAddress] > 0) {\r\n        return (r.revenueForBB * r.snapshotBBBalances[userAddress]) / r.totalBBTokens;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction claimableBettingVolume(address userAddress, uint256 roundNumber) external view returns (uint256) {\r\n    require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n    Round storage r = rounds[roundNumber];\r\n    require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n\r\n    if (hasClaimedBettingVolume[roundNumber][userAddress]) {\r\n        return 0;\r\n    }\r\n\r\n    if (r.snapshotBettingVolume[userAddress] > 0) {\r\n        return (r.revenueForBettingVolume * r.snapshotBettingVolume[userAddress]) / r.totalBettingVolume;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction claimableReferral(address userAddress, uint256 roundNumber) external view returns (uint256) {\r\n    require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n    Round storage r = rounds[roundNumber];\r\n    require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n\r\n    if (hasClaimedReferral[roundNumber][userAddress]) {\r\n        return 0;\r\n    }\r\n\r\n    if (r.snapshotReferrals[userAddress] > 0) {\r\n        return (r.revenueForReferrals * r.snapshotReferrals[userAddress]) / r.totalReferrals;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n    function setIncentivesAddress(address _newIncentivesAddress) external onlyOwner {\r\n        incentivesAddress = _newIncentivesAddress;\r\n    }\r\n\r\n    function withdrawUnclaimed() public onlyOwner {\r\n        require(currentRound > 0, \"No rounds available for withdrawal\");\r\n        Round storage r = rounds[currentRound];\r\n        require(block.timestamp >= r.startTime + 90 days, \"Cannot withdraw before 90 days have passed\");\r\n        \r\n        uint256 unclaimedBB = r.revenueForBB;\r\n        uint256 unclaimedBetting = r.revenueForBettingVolume;\r\n        uint256 unclaimedReferrals = r.revenueForReferrals;\r\n        \r\n        r.revenueForBB = 0;\r\n        r.revenueForBettingVolume = 0;\r\n        r.revenueForReferrals = 0;\r\n        \r\n        (bool success,) = msg.sender.call{value: unclaimedBB + unclaimedBetting + unclaimedReferrals}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n\r\n        emit AdminWithdraw(unclaimedBB + unclaimedBetting + unclaimedReferrals, currentRound);\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"Send ETH using depositRevenue function\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incentivesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"EthClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimBB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimBettingVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimableBB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimableBettingVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claimableReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bbRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bettingVolumeRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesRevenue\",\"type\":\"uint256\"}],\"name\":\"depositRevenue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revenueForBB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueForBettingVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueForReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBBTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBettingVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSnapshotUploaded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIncentivesAddress\",\"type\":\"address\"}],\"name\":\"setIncentivesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bbHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bbBalances\",\"type\":\"uint256[]\"}],\"name\":\"uploadBBBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"betters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bettingVolumes\",\"type\":\"uint256[]\"}],\"name\":\"uploadBettingVolumes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"referrers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referralAmounts\",\"type\":\"uint256[]\"}],\"name\":\"uploadReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevShareContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9167c72b5039a7464d8db7f804a2e90aadcc0c6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://874d3034957bdcdee8be0ab2a3accb8f01771bf1fe5a5add27da6061bf2aad9a"}