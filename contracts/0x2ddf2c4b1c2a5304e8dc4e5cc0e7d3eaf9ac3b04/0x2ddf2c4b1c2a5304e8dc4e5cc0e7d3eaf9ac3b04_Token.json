{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ninterface Router {\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address, uint256, uint256, uint256, address, uint256) external payable returns (uint256, uint256, uint256);\r\n\tfunction swapExactETHForTokens(uint256, address[] calldata, address, uint256) external payable returns (uint256[] memory);\r\n}\r\n\r\ninterface Factory {\r\n\tfunction createPair(address, address) external returns (address);\r\n}\r\n\r\ninterface Pair {\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n}\r\n\r\n\r\ncontract Token {\r\n\r\n\tuint256 constant private UINT_MAX = type(uint256).max;\r\n\tuint256 constant private MAX_NAME_LENGTH = 32;\r\n\tuint256 constant private MIN_SUPPLY = 1e16; // 0.01 tokens\r\n\tuint256 constant private MAX_SUPPLY = 1e33; // 1 quadrillion tokens\r\n\tuint256 constant private PERCENT_PRECISION = 1000; // 1 = 0.1%\r\n\tRouter constant private ROUTER = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstring constant public source = \"Created with Bossman's Bakery (bakery.mullet.capital)!\";\r\n\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tbool locked;\r\n\t\taddress pair;\r\n\t\taddress creator;\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 initialMarketCap;\r\n\t\tuint256 transferTax;\r\n\t\tuint256 creatorFee;\r\n\t\tmapping(address => User) users;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\r\n\t\r\n\tfunction lock() external {\r\n\t\trequire(!info.locked);\r\n\t\trequire(totalSupply() == 0);\r\n\t\tinfo.locked = true;\r\n\t}\r\n\t\r\n\tfunction initialize(address _creator, string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _initialMarketCap, uint256 _transferTax, uint256 _creatorFee) external payable {\r\n\t\trequire(!info.locked);\r\n\t\trequire(totalSupply() == 0);\r\n\t\trequire(bytes(_name).length > 0 && bytes(_name).length <= MAX_NAME_LENGTH);\r\n\t\trequire(bytes(_symbol).length > 0 && bytes(_symbol).length <= MAX_NAME_LENGTH);\r\n\t\trequire(_totalSupply >= MIN_SUPPLY && _totalSupply <= MAX_SUPPLY);\r\n\t\trequire(_initialMarketCap > 0);\r\n\t\trequire(_transferTax < PERCENT_PRECISION);\r\n\t\trequire(_creatorFee < PERCENT_PRECISION);\r\n\t\trequire(msg.value >= _initialMarketCap);\r\n\t\tinfo.creator = _creator;\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tinfo.totalSupply = _totalSupply;\r\n\t\tinfo.users[address(this)].balance = _totalSupply;\r\n\t\temit Transfer(address(0x0), address(this), _totalSupply);\r\n\t\tinfo.initialMarketCap = _initialMarketCap;\r\n\t\tinfo.creatorFee = _creatorFee;\r\n\t\t_createLP();\r\n\t\tinfo.transferTax = _transferTax;\r\n\t}\r\n\r\n\tfunction collectTax() external {\r\n\t\taddress _this = address(this);\r\n\t\tuint256 _tokens = balanceOf(_this);\r\n\t\trequire(_tokens > 0);\r\n\t\t_transfer(_this, creator(), _tokens / 2);\r\n\t\t_transfer(_this, 0xe6c791FBd46dB3f4EdA5f7Bb76474F4FA530733E, _tokens / 3);\r\n\t\t_transfer(_this, 0xc28C9da0F8a500DFfC16Ff09a3DD1Cc4c530D346, _tokens / 6);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\treturn _approve(msg.sender, _spender, _tokens);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\tunchecked {\r\n\t\t\tuint256 _allowance = allowance(_from, msg.sender);\r\n\t\t\trequire(_allowance >= _tokens);\r\n\t\t\tif (_allowance != UINT_MAX) {\r\n\t\t\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t\t}\r\n\t\t\treturn _transfer(_from, _to, _tokens);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\r\n\tfunction creator() public view returns (address) {\r\n\t\treturn info.creator;\r\n\t}\r\n\r\n\tfunction pair() public view returns (address) {\r\n\t\treturn info.pair;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction initialMarketCap() external view returns (string memory) {\r\n\t\treturn string(abi.encodePacked(_uint2str(info.initialMarketCap, 18, 5), \" ETH\"));\r\n\t}\r\n\r\n\tfunction transferTax() external view returns (string memory) {\r\n\t\treturn string(abi.encodePacked(_uint2str(info.transferTax * 100, 3, 3), \"%\"));\r\n\t}\r\n\r\n\tfunction creatorFee() external view returns (string memory) {\r\n\t\treturn string(abi.encodePacked(_uint2str(info.creatorFee * 100, 3, 3), \"%\"));\r\n\t}\r\n\r\n\t\r\n\tfunction _createLP() internal {\r\n\t\taddress _this = address(this);\r\n\t\taddress _weth = ROUTER.WETH();\r\n\t\t_approve(_this, address(ROUTER), totalSupply());\r\n\t\tinfo.pair = Factory(ROUTER.factory()).createPair(_weth, _this);\r\n\t\t( , , uint256 _lpTokens) = ROUTER.addLiquidityETH{ value: info.initialMarketCap }(_this, totalSupply(), 0, 0, _this, block.timestamp);\r\n\t\tPair _pair = Pair(pair());\r\n\t\tif (info.creatorFee > 0) {\r\n\t\t\t_pair.transfer(creator(), _lpTokens * info.creatorFee / PERCENT_PRECISION);\r\n\t\t}\r\n\t\t_pair.transfer(address(0x0), _pair.balanceOf(_this));\r\n\t\tif (msg.value > info.initialMarketCap) {\r\n\t\t\taddress[] memory _path = new address[](2);\r\n\t\t\t_path[0] = _weth;\r\n\t\t\t_path[1] = _this;\r\n\t\t\tROUTER.swapExactETHForTokens{ value: msg.value - info.initialMarketCap }(0, _path, creator(), block.timestamp);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _approve(address _owner, address _spender, uint256 _tokens) internal returns (bool) {\r\n\t\tinfo.users[_owner].allowance[_spender] = _tokens;\r\n\t\temit Approval(_owner, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\tunchecked {\r\n\t\t\trequire(_tokens > 0);\r\n\t\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t\taddress _this = address(this);\r\n\t\t\tif (info.transferTax == 0 || _from == _this || _to == _this || _from == creator()) {\r\n\t\t\t\tinfo.users[_from].balance -= _tokens;\r\n\t\t\t\tinfo.users[_to].balance += _tokens;\r\n\t\t\t\temit Transfer(_from, _to, _tokens);\r\n\t\t\t} else {\r\n\t\t\t\tinfo.users[_from].balance -= _tokens;\r\n\t\t\t\tuint256 _tax = _tokens * info.transferTax / PERCENT_PRECISION;\r\n\t\t\t\tinfo.users[_this].balance += _tax;\r\n\t\t\t\temit Transfer(_from, _this, _tax);\r\n\t\t\t\tinfo.users[_to].balance += _tokens - _tax;\r\n\t\t\t\temit Transfer(_from, _to, _tokens - _tax);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _uint2str(uint256 _value, uint256 _scale, uint256 _maxDecimals) internal pure returns (string memory str) {\r\n\t\tuint256 _d = _scale > _maxDecimals ? _maxDecimals : _scale;\r\n\t\tuint256 _n = _value / 10**(_scale > _d ? _scale - _d : 0);\r\n\t\tif (_n == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 _digits = 1;\r\n\t\tuint256 _tmp = _n;\r\n\t\twhile (_tmp > 9) {\r\n\t\t\t_tmp /= 10;\r\n\t\t\t_digits++;\r\n\t\t}\r\n\t\t_tmp = _digits > _d ? _digits : _d + 1;\r\n\t\tuint256 _offset = (_tmp > _d + 1 ? _tmp - _d - 1 > _d ? _d : _tmp - _d - 1 : 0);\r\n\t\tfor (uint256 i = 0; i < _tmp - _offset; i++) {\r\n\t\t\tuint256 _dec = i < _tmp - _digits ? 0 : (_n / (10**(_tmp - i - 1))) % 10;\r\n\t\t\tbytes memory _char = new bytes(1);\r\n\t\t\t_char[0] = bytes1(uint8(_dec) + 48);\r\n\t\t\tstr = string(abi.encodePacked(str, string(_char)));\r\n\t\t\tif (i < _tmp - _d - 1) {\r\n\t\t\t\tif ((i + 1) % 3 == (_tmp - _d) % 3) {\r\n\t\t\t\t\tstr = string(abi.encodePacked(str, \",\"));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ((_n / 10**_offset) % 10**(_tmp - _offset - i - 1) == 0) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (i == _tmp - _d - 1) {\r\n\t\t\t\t\tstr = string(abi.encodePacked(str, \".\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMarketCap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMarketCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creatorFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53055bcab1f59921766b17fc0a8838a48bda24472e9911cd8f4e9226928a687f"}