{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    mapping (uint256 => address) private _tokenOwner;\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n     * @dev Enumerable takes care of this.\r\n    **/\r\n    //mapping (address => Counters.Counter) private _ownedTokensCount;\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n    \r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][to] = approved;\r\n        emit ApprovalForAll(_msgSender(), to, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _totalSupply = _totalSupply.add(1);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _tokenOwner[tokenId] = address(0);\r\n        _totalSupply = _totalSupply.sub(1);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract IERC721Enumerable is IERC721 {\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n}\r\n\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    /**\r\n     * @dev We've removed allTokens functionality.\r\n    **/\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n    \r\n    /**\r\n     * @dev Added for arNFT (removed from ERC721 basic).\r\n    **/\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokens[owner].length;\r\n    }\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n        _ownedTokensIndex[tokenId] = 0;\r\n    }\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n        _ownedTokens[from].length--;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    mapping(uint256 => string) private _tokenURIs;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // Even if there is a base URI, it is only appended to non-empty token-specific URIs\r\n        if (bytes(_tokenURI).length == 0) {\r\n            return \"\";\r\n        } else {\r\n            // abi.encodePacked is being used to concatenate strings\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n    }\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n    function _setBaseURI(string memory baseURI) internal {\r\n        _baseURI = baseURI;\r\n    }\r\n    function baseURI() external view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        _notEntered = true;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        // disabled require for making usages simple\r\n        //require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n        //    \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        //);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IClaims {\r\n    function getClaimbyIndex(uint _claimId) external view returns (\r\n        uint claimId,\r\n        uint status,\r\n        int8 finalVerdict,\r\n        address claimOwner,\r\n        uint coverId\r\n    );\r\n    function submitClaim(uint coverId) external;\r\n}\r\n\r\ninterface IClaimsData {\r\n    function actualClaimLength() external view returns(uint);\r\n}\r\n\r\ninterface IDSValue {\r\n    function peek() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\n\r\ninterface INXMMaster {\r\n    function tokenAddress() external view returns(address);\r\n    function owner() external view returns(address);\r\n    function pauseTime() external view returns(uint);\r\n    function masterInitialized() external view returns(bool);\r\n    function isPause() external view returns(bool check);\r\n    function isMember(address _add) external view returns(bool);\r\n    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\r\n}\r\n\r\ninterface IMemberRoles {\r\n    function switchMembership(address) external;\r\n}\r\n\r\ninterface INXMToken {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IPool1  {\r\n    function changeDependentContractAddress() external;\r\n    function makeCoverBegin(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        external\r\n        payable;\r\n    function makeCoverUsingCA(\r\n        address smartCAdd,\r\n        bytes4 coverCurr,\r\n        uint[] calldata coverDetails,\r\n        uint16 coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        external;\r\n    function getWei(uint amount) external view returns(uint);\r\n    function sellNXMTokens(uint _amount) external  returns (bool);\r\n}\r\n\r\n\r\ninterface IPoolData {\r\n\r\n    struct ApiId {\r\n        bytes4 typeOf;\r\n        bytes4 currency;\r\n        uint id;\r\n        uint64 dateAdd;\r\n        uint64 dateUpd;\r\n    }\r\n\r\n    struct CurrencyAssets {\r\n        address currAddress;\r\n        uint baseMin;\r\n        uint varMin;\r\n    }\r\n\r\n    struct InvestmentAssets {\r\n        address currAddress;\r\n        bool status;\r\n        uint64 minHoldingPercX100;\r\n        uint64 maxHoldingPercX100;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct IARankDetails {\r\n        bytes4 maxIACurr;\r\n        uint64 maxRate;\r\n        bytes4 minIACurr;\r\n        uint64 minRate;\r\n    }\r\n\r\n    struct McrData {\r\n        uint mcrPercx100;\r\n        uint mcrEther;\r\n        uint vFull; //Pool funds\r\n        uint64 date;\r\n    }\r\n\r\n    function setCapReached(uint val) external;\r\n    function getInvestmentAssetDecimals(bytes4 curr) external returns(uint8 decimal);\r\n    function getCurrencyAssetAddress(bytes4 curr) external view returns(address);\r\n    function getInvestmentAssetAddress(bytes4 curr) external view returns(address);\r\n    function getInvestmentAssetStatus(bytes4 curr) external view returns(bool status);\r\n}\r\n\r\ninterface IQuotationData {\r\n\r\n    enum HCIDStatus { NA, kycPending, kycPass, kycFailedOrRefunded, kycPassNoCover }\r\n    enum CoverStatus { Active, ClaimAccepted, ClaimDenied, CoverExpired, ClaimSubmitted, Requested }\r\n\r\n    struct Cover {\r\n        address payable memberAddress;\r\n        bytes4 currencyCode;\r\n        uint sumAssured;\r\n        uint16 coverPeriod;\r\n        uint validUntil;\r\n        address scAddress;\r\n        uint premiumNXM;\r\n    }\r\n\r\n    struct HoldCover {\r\n        uint holdCoverId;\r\n        address payable userAddress;\r\n        address scAddress;\r\n        bytes4 coverCurr;\r\n        uint[] coverDetails;\r\n        uint16 coverPeriod;\r\n    }\r\n\r\n    function getCoverLength() external returns(uint len);\r\n    function getAuthQuoteEngine() external returns(address _add);\r\n    function getAllCoversOfUser(address _add) external returns(uint[] memory allCover);\r\n    function getUserCoverLength(address _add) external returns(uint len);\r\n    function getCoverStatusNo(uint _cid) external returns(uint8);\r\n    function getCoverPeriod(uint _cid) external returns(uint32 cp);\r\n    function getCoverSumAssured(uint _cid) external returns(uint sa);\r\n    function getCurrencyOfCover(uint _cid) external returns(bytes4 curr);\r\n    function getValidityOfCover(uint _cid) external returns(uint date);\r\n    function getscAddressOfCover(uint _cid) external returns(uint, address);\r\n    function getCoverMemberAddress(uint _cid) external returns(address payable _add);\r\n    function getCoverPremiumNXM(uint _cid) external returns(uint _premiumNXM);\r\n    function getCoverDetailsByCoverID1(\r\n        uint _cid\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint cid,\r\n            address _memberAddress,\r\n            address _scAddress,\r\n            bytes4 _currencyCode,\r\n            uint _sumAssured,\r\n            uint premiumNXM\r\n        );\r\n    function getCoverDetailsByCoverID2(\r\n        uint _cid\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint cid,\r\n            uint8 status,\r\n            uint sumAssured,\r\n            uint16 coverPeriod,\r\n            uint validUntil\r\n        );\r\n    function getHoldedCoverDetailsByID1(\r\n        uint _hcid\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint hcid,\r\n            address scAddress,\r\n            bytes4 coverCurr,\r\n            uint16 coverPeriod\r\n        );\r\n    function getUserHoldedCoverLength(address _add) external returns (uint);\r\n    function getUserHoldedCoverByIndex(address _add, uint index) external returns (uint);\r\n    function getHoldedCoverDetailsByID2(\r\n        uint _hcid\r\n    )\r\n        external\r\n        returns (\r\n            uint hcid,\r\n            address payable memberAddress,\r\n            uint[] memory coverDetails\r\n        );\r\n    function getTotalSumAssuredSC(address _add, bytes4 _curr) external returns(uint amount);\r\n\r\n}\r\n\r\ninterface ITokenData {\r\n    function lockTokenTimeAfterCoverExp() external returns (uint);\r\n}\r\n\r\n\r\ninterface IyInsure {\r\n    struct Token {\r\n        uint expirationTimestamp;\r\n        bytes4 coverCurrency;\r\n        uint coverAmount;\r\n        uint coverPrice;\r\n        uint coverPriceNXM;\r\n        uint expireTime;\r\n        uint generationTime;\r\n        uint coverId;\r\n        bool claimInProgress;\r\n        uint claimId;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function submitClaim(uint256 tokenId) external;\r\n    function tokens(uint256 tokenId) external returns (uint, bytes4, uint, uint, uint, uint, uint, uint, bool, uint);\r\n}\r\n\r\n/** \r\n    @title Armor NFT\r\n    @dev Armor NFT allows users to purchase Nexus Mutual cover and convert it into \r\n         a transferable token. It also allows users to swap their Yearn yNFT for Armor arNFT.\r\n    @author ArmorFi -- Robert M.C. Forster, Taek Lee\r\n**/\r\ncontract arNFT is\r\n    ERC721Full(\"ArmorNFT\", \"arNFT\"),\r\n    Ownable,\r\n    ReentrancyGuard {\r\n    \r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    bytes4 internal constant ethCurrency = \"ETH\";\r\n    \r\n    // cover Id => claim Id\r\n    mapping (uint256 => uint256) public claimIds;\r\n    \r\n    // cover Id => cover price\r\n    mapping (uint256 => uint256) public coverPrices;\r\n    \r\n    // cover Id => yNFT token Id.\r\n    // Used to route yNFT submits through their contract.\r\n    // if zero, it is not swapped from yInsure\r\n    mapping (uint256 => uint256) public swapIds;\r\n\r\n    // Mapping (\"NAME\" => smart contract address) of allowed cover currencies.\r\n    mapping (bytes4 => address) public coverCurrencies;\r\n\r\n    // indicates if swap for yInsure is available\r\n    // cannot go back to false\r\n    bool public swapActivated;\r\n\r\n    // Nexus Mutual master contract.\r\n    INXMMaster public nxMaster;\r\n\r\n    // yNFT contract that we're swapping tokens from.\r\n    IyInsure public ynft;\r\n\r\n    // NXM token.\r\n    IERC20 public nxmToken;\r\n    \r\n    enum CoverStatus {\r\n        Active,\r\n        ClaimAccepted,\r\n        ClaimDenied,\r\n        CoverExpired,\r\n        ClaimSubmitted,\r\n        Requested\r\n    }\r\n    \r\n    enum ClaimStatus {\r\n        PendingClaimAssessorVote, // 0\r\n        PendingClaimAssessorVoteDenied, // 1\r\n        PendingClaimAssessorVoteThresholdNotReachedAccept, // 2\r\n        PendingClaimAssessorVoteThresholdNotReachedDeny, // 3\r\n        PendingClaimAssessorConsensusNotReachedAccept, // 4\r\n        PendingClaimAssessorConsensusNotReachedDeny, // 5\r\n        FinalClaimAssessorVoteDenied, // 6\r\n        FinalClaimAssessorVoteAccepted, // 7\r\n        FinalClaimAssessorVoteDeniedMVAccepted, // 8\r\n        FinalClaimAssessorVoteDeniedMVDenied, // 9\r\n        FinalClaimAssessorVotAcceptedMVNoDecision, // 10\r\n        FinalClaimAssessorVoteDeniedMVNoDecision, // 11\r\n        ClaimAcceptedPayoutPending, // 12\r\n        ClaimAcceptedNoPayout, // 13\r\n        ClaimAcceptedPayoutDone // 14\r\n    }\r\n\r\n    event SwappedYInsure (\r\n        uint256 indexed yInsureTokenId,\r\n        uint256 indexed coverId\r\n    );\r\n\r\n    event ClaimSubmitted (\r\n        uint256 indexed coverId,\r\n        uint256 indexed claimId\r\n    );\r\n    \r\n    event ClaimRedeemed (\r\n        address indexed receiver,\r\n        bytes4 indexed currency,\r\n        uint256 value\r\n    );\r\n\r\n    event BuyCover (\r\n        uint indexed coverId,\r\n        address indexed buyer,\r\n        address indexed coveredContract,\r\n        bytes4 currency,\r\n        uint256 coverAmount,\r\n        uint256 coverPrice,\r\n        uint256 startTime,\r\n        uint16 coverPeriod\r\n    );\r\n\r\n    \r\n    /**\r\n     * @dev Make sure only the owner of a token or someone approved to transfer it can call.\r\n     * @param _tokenId Id of the token being checked.\r\n    **/\r\n    modifier onlyTokenApprovedOrOwner(uint256 _tokenId) {\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"Not approved or owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _nxMaster, address _ynft, address _nxmToken) public {\r\n        nxMaster = INXMMaster(_nxMaster);\r\n        ynft = IyInsure(_ynft);\r\n        nxmToken = IERC20(_nxmToken);\r\n    }\r\n    \r\n    function () payable external {}\r\n    \r\n    // Arguments to be passed as coverDetails, from the quote api:\r\n    //    coverDetails[0] = coverAmount;\r\n    //    coverDetails[1] = coverPrice;\r\n    //    coverDetails[2] = coverPriceNXM;\r\n    //    coverDetails[3] = expireTime;\r\n    //    coverDetails[4] = generationTime;\r\n    /**\r\n     * @dev Main function to buy a cover.\r\n     * @param _coveredContractAddress Address of the protocol to buy cover for.\r\n     * @param _coverCurrency bytes4 currency name to buy coverage for.\r\n     * @param _coverPeriod Amount of time to buy cover for.\r\n     * @param _v , _r, _s Signature of the Nexus Mutual API.\r\n    **/\r\n    function buyCover(\r\n        address _coveredContractAddress,\r\n        bytes4 _coverCurrency,\r\n        uint[] calldata _coverDetails,\r\n        uint16 _coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external payable {\r\n        uint256 coverPrice = _coverDetails[1];\r\n\r\n        if (_coverCurrency == \"ETH\") {\r\n            require(msg.value == coverPrice, \"Incorrect value sent\");\r\n        } else {\r\n            IERC20 erc20 = IERC20( coverCurrencies[_coverCurrency] );\r\n            require(erc20 != IERC20( address(0) ), \"Cover currency is not allowed.\");\r\n\r\n            require(msg.value == 0, \"Eth not required when buying with erc20\");\r\n            erc20.safeTransferFrom(msg.sender, address(this), coverPrice);\r\n        }\r\n        \r\n        uint256 coverId = _buyCover(_coveredContractAddress, _coverCurrency, _coverDetails, _coverPeriod, _v, _r, _s);\r\n        _mint(msg.sender, coverId);\r\n        \r\n        emit BuyCover(coverId, msg.sender, _coveredContractAddress, _coverCurrency, _coverDetails[0], _coverDetails[1], \r\n                      block.timestamp, _coverPeriod);\r\n    }\r\n    \r\n    /**\r\n     * @dev Submit a claim for the NFT after a hack has happened on its protocol.\r\n     * @param _tokenId ID of the token a claim is being submitted for.\r\n    **/\r\n    function submitClaim(uint256 _tokenId) external onlyTokenApprovedOrOwner(_tokenId) {\r\n        // If this was a yNFT swap, we must route the submit through them.\r\n        if (swapIds[_tokenId] != 0) {\r\n            _submitYnftClaim(_tokenId);\r\n            return;\r\n        }\r\n        \r\n        (uint256 coverId, /*uint8 coverStatus*/, /*sumAssured*/, /*coverPeriod*/, /*uint256 validUntil*/) = _getCover2(_tokenId);\r\n\r\n        uint256 claimId = _submitClaim(coverId);\r\n        claimIds[_tokenId] = claimId;\r\n        \r\n        emit ClaimSubmitted(coverId, claimId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Redeem a claim that has been accepted and paid out.\r\n     * @param _tokenId Id of the token to redeem claim for.\r\n    **/\r\n    function redeemClaim(uint256 _tokenId) public onlyTokenApprovedOrOwner(_tokenId)  nonReentrant {\r\n        require(claimIds[_tokenId] != 0, \"No claim is in progress.\");\r\n        \r\n        (/*cid*/, /*memberAddress*/, /*scAddress*/, bytes4 currencyCode, /*sumAssured*/, /*premiumNXM*/) = _getCover1(_tokenId);\r\n        ( , /*uint8 coverStatus*/, uint256 sumAssured, , ) = _getCover2(_tokenId);\r\n        \r\n        require(_payoutIsCompleted(claimIds[_tokenId]), \"Claim accepted but payout not completed\");\r\n       \r\n        // this will prevent duplicate redeem \r\n        _burn(_tokenId);\r\n        _sendAssuredSum(currencyCode, sumAssured);\r\n        \r\n        emit ClaimRedeemed(msg.sender, currencyCode, sumAssured);\r\n    }\r\n    \r\n    function activateSwap()\r\n      public\r\n      onlyOwner\r\n    {\r\n        require(!swapActivated, \"Already Activated\");\r\n        swapActivated = true;\r\n    }\r\n\r\n    /**\r\n     * @dev External swap yNFT token for our own. Simple process because we do not need to create cover.\r\n     * @param _ynftTokenId The ID of the token on yNFT's contract.\r\n    **/\r\n    function swapYnft(uint256 _ynftTokenId)\r\n      public\r\n    {\r\n        require(swapActivated, \"Swap is not activated yet\");\r\n        //this does not returns bool\r\n        ynft.transferFrom(msg.sender, address(this), _ynftTokenId);\r\n        \r\n        (uint256 coverPrice, uint256 coverId, uint256 claimId) = _getCoverAndClaim(_ynftTokenId);\r\n\r\n        _mint(msg.sender, coverId);\r\n\r\n        swapIds[coverId] = _ynftTokenId;\r\n        claimIds[coverId] = claimId;\r\n        coverPrices[coverId] = coverPrice;\r\n        \r\n        emit SwappedYInsure(_ynftTokenId, coverId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Swaps a batch of yNFT tokens for our own.\r\n     * @param _tokenIds An array of the IDs of the tokens on yNFT's contract.\r\n    **/\r\n    function batchSwapYnft(uint256[] calldata _tokenIds)\r\n      external\r\n    {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            swapYnft(_tokenIds[i]);\r\n        }\r\n    }\r\n    \r\n   /**\r\n     * @dev Owner can approve the contract for any new ERC20 (so we don't need to in every buy).\r\n     * @param _tokenAddress Address of the ERC20 that we want approved.\r\n    **/\r\n    function approveToken(address _tokenAddress)\r\n      external\r\n    {\r\n        IPool1 pool1 = IPool1(nxMaster.getLatestAddress(\"P1\"));\r\n        address payable pool1Address = address(uint160(address(pool1)));\r\n        IERC20 erc20 = IERC20(_tokenAddress);\r\n        erc20.safeApprove( pool1Address, uint256(-1) );\r\n    }\r\n    \r\n    /**\r\n     * @dev Getter for all token info from Nexus Mutual.\r\n     * @param _tokenId of the token to get cover info for (also NXM cover ID).\r\n     * @return All info from NXM about the cover.\r\n    **/\r\n    function getToken(uint256 _tokenId)\r\n      external\r\n      view\r\n    returns (uint256 cid, \r\n             uint8 status, \r\n             uint256 sumAssured,\r\n             uint16 coverPeriod, \r\n             uint256 validUntil, \r\n             address scAddress, \r\n             bytes4 currencyCode, \r\n             uint256 premiumNXM,\r\n             uint256 coverPrice,\r\n             uint256 claimId)\r\n    {\r\n        (/*cid*/, /*memberAddress*/, scAddress, currencyCode, /*sumAssured*/, premiumNXM) = _getCover1(_tokenId);\r\n        (cid, status, sumAssured, coverPeriod, validUntil) = _getCover2(_tokenId);\r\n        coverPrice = coverPrices[_tokenId];\r\n        claimId = claimIds[_tokenId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get status of a cover claim.\r\n     * @param _tokenId Id of the token we're checking.\r\n     * @return Status of the claim being made on the token.\r\n    **/\r\n    function getCoverStatus(uint256 _tokenId) external view returns (uint8 coverStatus, bool payoutCompleted) {\r\n        (, coverStatus, , , ) = _getCover2(_tokenId);\r\n        payoutCompleted = _payoutIsCompleted(claimIds[_tokenId]);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get address of the NXM Member Roles contract.\r\n     * @return Address of the current Member Roles contract.\r\n    **/\r\n    function getMemberRoles() public view returns (address) {\r\n        return nxMaster.getLatestAddress(\"MR\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Change membership to new address.\r\n     * @param _newMembership Membership address to change to.\r\n    **/\r\n    function switchMembership(address _newMembership) external onlyOwner {\r\n        nxmToken.safeApprove(getMemberRoles(),uint(-1));\r\n        IMemberRoles(getMemberRoles()).switchMembership(_newMembership);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function for buying cover--params are same as eponymous external function.\r\n     * @return coverId ID of the new cover that has been bought.\r\n    **/\r\n    function _buyCover(\r\n        address _coveredContractAddress,\r\n        bytes4 _coverCurrency,\r\n        uint[] memory _coverDetails,\r\n        uint16 _coverPeriod,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal returns (uint256 coverId) {\r\n    \r\n        uint256 coverPrice = _coverDetails[1];\r\n        IPool1 pool1 = IPool1(nxMaster.getLatestAddress(\"P1\"));\r\n\r\n        if (_coverCurrency == \"ETH\") {\r\n            pool1.makeCoverBegin.value(coverPrice)(_coveredContractAddress, _coverCurrency, _coverDetails, _coverPeriod, _v, _r, _s);\r\n        } else {\r\n            pool1.makeCoverUsingCA(_coveredContractAddress, _coverCurrency, _coverDetails, _coverPeriod, _v, _r, _s);\r\n        }\r\n    \r\n        IQuotationData quotationData = IQuotationData(nxMaster.getLatestAddress(\"QD\"));\r\n        // *assumes* the newly created claim is appended at the end of the list covers\r\n        coverId = quotationData.getCoverLength().sub(1);\r\n        \r\n        // Keep track of how much was paid for this cover.\r\n        coverPrices[coverId] = coverPrice;\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal submit claim function.\r\n     * @param _coverId on the NXM contract (same as our token ID).\r\n     * @return claimId of the new claim.\r\n    **/\r\n    function _submitClaim(uint256 _coverId) internal returns (uint256) {\r\n        IClaims claims = IClaims(nxMaster.getLatestAddress(\"CL\"));\r\n        claims.submitClaim(_coverId);\r\n    \r\n        IClaimsData claimsData = IClaimsData(nxMaster.getLatestAddress(\"CD\"));\r\n        uint256 claimId = claimsData.actualClaimLength() - 1;\r\n        return claimId;\r\n    }\r\n    \r\n    /**\r\n     * Submits a claim through yNFT if this was a swapped token.\r\n     * @param _tokenId ID of the token on the arNFT contract.\r\n    **/\r\n    function _submitYnftClaim(uint256 _tokenId)\r\n      internal\r\n    {\r\n        uint256 ynftTokenId = swapIds[_tokenId];\r\n        ynft.submitClaim(ynftTokenId);\r\n        \r\n        (/*coverPrice*/, /*coverId*/, uint256 claimId) = _getCoverAndClaim(ynftTokenId);\r\n        claimIds[_tokenId] = claimId;\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the payout of a claim has occurred.\r\n     * @param _claimId ID of the claim we are checking.\r\n     * @return True if claim has been paid out, false if not.\r\n    **/\r\n    function _payoutIsCompleted(uint256 _claimId) internal view returns (bool) {\r\n        uint256 status;\r\n        IClaims claims = IClaims(nxMaster.getLatestAddress(\"CL\"));\r\n        (, status, , , ) = claims.getClaimbyIndex(_claimId);\r\n        return status == uint256(ClaimStatus.ClaimAcceptedPayoutDone);\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens after a successful redeem claim.\r\n     * @param _coverCurrency bytes4 of the currency being used.\r\n     * @param _sumAssured The amount of the currency to send.\r\n    **/\r\n    function _sendAssuredSum(bytes4 _coverCurrency, uint256 _sumAssured) internal {\r\n        uint256 claimReward;\r\n\r\n        if (_coverCurrency == ethCurrency) {\r\n            claimReward = _sumAssured * (10 ** 18);\r\n            msg.sender.transfer(claimReward);\r\n        } else {\r\n            IERC20 erc20 = IERC20( coverCurrencies[_coverCurrency] );\r\n            require (erc20 != IERC20( address(0) ), \"Cover currency is not allowed.\");\r\n\r\n            uint256 decimals = uint256(erc20.decimals());\r\n            claimReward = _sumAssured * (10 ** decimals);\r\n            erc20.safeTransfer(msg.sender, claimReward);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the cover Id and claim Id of the token from the ynft contract.\r\n     * @param _ynftTokenId The Id of the token on the ynft contract.\r\n    **/\r\n    function _getCoverAndClaim(uint256 _ynftTokenId)\r\n      internal\r\n    returns (uint256 coverPrice, uint256 coverId, uint256 claimId)\r\n    {\r\n       ( , , , coverPrice, , , , coverId, , claimId) = ynft.tokens(_ynftTokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get (some) cover details from the NXM contracts.\r\n     * @param _coverId ID of the cover to get--same as our token ID.\r\n     * @return Details about the token.\r\n    **/\r\n    function _getCover1 (\r\n        uint256 _coverId\r\n    ) internal view returns (\r\n        uint256 cid,\r\n        address memberAddress,\r\n        address scAddress,\r\n        bytes4 currencyCode,\r\n        uint256 sumAssured,\r\n        uint256 premiumNXM\r\n    ) {\r\n        IQuotationData quotationData = IQuotationData(nxMaster.getLatestAddress(\"QD\"));\r\n        return quotationData.getCoverDetailsByCoverID1(_coverId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the rest of the cover details from NXM contracts.\r\n     * @param _coverId ID of the cover to get--same as our token ID.\r\n     * @return 2nd set of details about the token.\r\n    **/\r\n    function _getCover2 (\r\n        uint256 _coverId\r\n    ) internal view returns (\r\n        uint256 cid,\r\n        uint8 status,\r\n        uint256 sumAssured,\r\n        uint16 coverPeriod,\r\n        uint256 validUntil\r\n    ) {\r\n        IQuotationData quotationData = IQuotationData(nxMaster.getLatestAddress(\"QD\"));\r\n        return quotationData.getCoverDetailsByCoverID2(_coverId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve an address to spend NXM tokens from the contract.\r\n     * @param _spender Address to be approved.\r\n     * @param _value The amount of NXM to be approved.\r\n    **/\r\n    function nxmTokenApprove(address _spender, uint256 _value) public onlyOwner {\r\n        nxmToken.safeApprove(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add an allowed cover currency to the arNFT system if one is added to Nexus Mutual.\r\n     * @param _coverCurrency Address of the cover currency to add.\r\n    **/\r\n    function addCurrency(bytes4 _coverCurrency, address _coverCurrencyAddress) public onlyOwner {\r\n        require(coverCurrencies[_coverCurrency] == address(0), \"Cover currency already exists.\");\r\n        coverCurrencies[_coverCurrency] = _coverCurrencyAddress;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nxMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ynft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nxmToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coveredContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"currency\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"}],\"name\":\"BuyCover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"currency\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"ClaimSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yInsureTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"}],\"name\":\"SwappedYInsure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_coverCurrency\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_coverCurrencyAddress\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchSwapYnft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coveredContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_coverCurrency\",\"type\":\"bytes4\"},{\"internalType\":\"uint256[]\",\"name\":\"_coverDetails\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"_coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buyCover\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"coverCurrencies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coverPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCoverStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"coverStatus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"payoutCompleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberRoles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"currencyCode\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"premiumNXM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxMaster\",\"outputs\":[{\"internalType\":\"contract INXMMaster\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"nxmTokenApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"submitClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ynftTokenId\",\"type\":\"uint256\"}],\"name\":\"swapYnft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMembership\",\"type\":\"address\"}],\"name\":\"switchMembership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ynft\",\"outputs\":[{\"internalType\":\"contract IyInsure\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "arNFT", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000001bfd82675dbcc7762c84019ca518e701c0cd07e000000000000000000000000181aea6936b407514ebfc0754a37704eb8d98f91000000000000000000000000d7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://99c8a46cb0f302f3570910af47c029d0efa349edebae8f4da25ffe9a39a40282"}