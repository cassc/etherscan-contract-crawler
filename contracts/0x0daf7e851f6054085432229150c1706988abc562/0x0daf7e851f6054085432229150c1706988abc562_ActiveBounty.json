{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/invoke/ActiveBounty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {IActiveBounty} from \\\"src/interfaces/IActiveBounty.sol\\\";\\n\\ncontract ActiveBounty is IActiveBounty {\\n    address public immutable authority;\\n\\n    bytes32 public activeBounty;\\n\\n    constructor(address _authority) {\\n        if (_authority == address(0)) revert ActiveBountyZeroCheck();\\n        authority = _authority;\\n    }\\n\\n    /// @notice Set the active bounty hash\\n    /// @param bountyHash The hash of the active bounty\\n    /// @dev Only callable by the authority\\n    function setHash(bytes32 bountyHash) external {\\n        if (msg.sender != authority) revert ActiveBountyAuth();\\n        activeBounty = bountyHash;\\n        emit ActiveBountyHashSet(bountyHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IActiveBounty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\ninterface IActiveBounty {\\n    error ActiveBountyAuth();\\n    error ActiveBountyZeroCheck();\\n    event ActiveBountyHashSet(bytes32 bountyHash);\\n\\n    function setHash(bytes32 bountyHash) external;\\n\\n    function authority() external view returns (address);\\n\\n    function activeBounty() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"invoke-modules/=src/invoke/\",\r\n      \"core-libs/=src/lib/\",\r\n      \"core-test/=test/core/\",\r\n      \"mocks/=test/mocks/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"halmost-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"halmos-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActiveBountyAuth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActiveBountyZeroCheck\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bountyHash\",\"type\":\"bytes32\"}],\"name\":\"ActiveBountyHashSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeBounty\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bountyHash\",\"type\":\"bytes32\"}],\"name\":\"setHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ActiveBounty", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000aeb9ef94b6542be7112f3a295646b5aaaa9fca13", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}