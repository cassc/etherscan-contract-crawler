{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/constants/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/core/OperationsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Operation } from \\\"./types/Common.sol\\\";\\nimport { OPERATIONS_REGISTRY } from \\\"./constants/Common.sol\\\";\\n\\nstruct StoredOperation {\\n  bytes32[] actions;\\n  bool[] optional;\\n  string name;\\n}\\n\\n/**\\n * @title Operation Registry\\n * @notice Stores the Actions that constitute a given Operation and information if an Action can be skipped\\n\\n */\\ncontract OperationsRegistry {\\n  mapping(string => StoredOperation) private operations;\\n  address public owner;\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"only-owner\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @notice Stores the Actions that constitute a given Operation\\n   * @param newOwner The address of the new owner of the Operations Registry\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Emitted when a new operation is added or an existing operation is updated\\n   * @param name The Operation name\\n   **/\\n  event OperationAdded(bytes32 indexed name);\\n\\n  /**\\n   * @notice Adds an Operation's Actions keyed to a an operation name\\n   * @param operation Struct with Operation name, actions and their optionality\\n   */\\n  function addOperation(StoredOperation calldata operation) external onlyOwner {\\n    operations[operation.name] = operation;\\n    // By packing the string into bytes32 which means the max char length is capped at 64\\n    emit OperationAdded(bytes32(abi.encodePacked(operation.name)));\\n  }\\n\\n  /**\\n   * @notice Gets an Operation from the Registry\\n   * @param name The name of the Operation\\n   * @return actions Returns an array of Actions and array for optionality of coresponding Actions\\n   */\\n  function getOperation(\\n    string memory name\\n  ) external view returns (bytes32[] memory actions, bool[] memory optional) {\\n    if (keccak256(bytes(operations[name].name)) == keccak256(bytes(\\\"\\\"))) {\\n      revert(\\\"Operation doesn't exist\\\");\\n    }\\n    actions = operations[name].actions;\\n    optional = operations[name].optional;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/types/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"OperationAdded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"actions\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"optional\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct StoredOperation\",\"name\":\"operation\",\"type\":\"tuple\"}],\"name\":\"addOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOperation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"actions\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"optional\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperationsRegistry", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}