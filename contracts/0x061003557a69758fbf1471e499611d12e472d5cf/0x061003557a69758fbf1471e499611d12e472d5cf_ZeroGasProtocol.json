{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ZeroGasProtocol.sol\": {\r\n      \"content\": \"// website  : https://zerogasprotocol.com/\\n// twitter  : https://twitter.com/zerogaserc\\n// telegram : https://t.me/zerogaserc\\n\\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\npragma solidity 0.8.21;\\n\\ninterface IPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function token0() external view returns (address);\\n\\n    function sync() external;\\n}\\n\\ninterface IFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n}\\n\\nabstract contract ERC20 is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(string memory _tokenName, string memory _tokenSymbol) {\\n        _name = _tokenName;\\n        _symbol = _tokenSymbol;\\n        _decimals = 18;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\ncontract ZeroGasProtocol is ERC20, Ownable {\\n    address payable public marketingAddress;\\n    address public immutable deadAddress = address(0xDEAD);\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal = 1_000_000_000 * 10 ** 18;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\n    uint256 public maxAmount = (_tTotal * 2) / 100; // 2%\\n    uint256 public maxWallet = (_tTotal * 2) / 100; // 2%\\n\\n    bool public limitsInEffect = true;\\n    bool public tradingEnable = false;\\n    uint256 public _sellTax = 3;\\n\\n    uint256 private _initTax = 25;\\n    uint256 private _reduceTaxAt = 20;\\n\\n    uint256 private _buyCount = 0;\\n    uint256 private _sellCount = 0;\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    IUniswapRouter public immutable router;\\n    address public immutable pair;\\n\\n    event Distribute(uint256 amount);\\n    event OffLimits();\\n\\n    constructor() ERC20(\\\"Zero Gas Protocol\\\", \\\"WEI\\\") {\\n        marketingAddress = payable(msg.sender);\\n        _rOwned[_msgSender()] = _rTotal;\\n        router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n        pair = IFactory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n\\n        _isExcludedFromFee[_msgSender()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[address(router)] = true;\\n        _isExcludedFromFee[deadAddress] = true;\\n\\n        excludeFromReward(address(this));\\n        excludeFromReward(deadAddress);\\n        excludeFromReward(pair);\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of the token.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    /**\\n     * @dev Returns the balance of a given account.\\n     * @param account The address of the account to check.\\n     * @return The balance of the account.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        // If the account is excluded, return the token balance directly.\\n        if (_isExcluded[account]) {\\n            return _tOwned[account];\\n        }\\n\\n        // Otherwise, calculate the token balance from the reflection balance.\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function startZeroGas() external onlyOwner {\\n        tradingEnable = true;\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * @param recipient The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     *\\n     * @return A boolean indicating whether the transfer was successful or not.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Call the internal _transfer function to perform the actual transfer\\n        _transfer(_msgSender(), recipient, amount);\\n\\n        // Return true to indicate that the transfer was successful\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that `spender` is allowed to spend\\n     * on behalf of `owner`.\\n     *\\n     * @param owner The address that owns the tokens.\\n     * @param spender The address that is allowed to spend the tokens.\\n     * @return The amount of tokens that `spender` is allowed to spend.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Approve the `spender` to spend `amount` of the caller's tokens.\\n     * Emits an {Approval} event.\\n     *\\n     * @param spender The address of the account allowed to spend the tokens.\\n     * @param amount The amount of tokens the `spender` is allowed to spend.\\n     * @return A boolean indicating whether the approval was successful.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param sender The address to transfer tokens from.\\n     * @param recipient The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     * @return A boolean indicating whether the transfer was successful.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        require(\\n            _allowances[sender][_msgSender()] >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the allowance of `spender` by `addedValue` tokens.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        // Increase the allowance\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + (addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of `spender` by `subtractedValue`.\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     * - The caller must have an allowance for `spender` of at least `subtractedValue`.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of allowance to decrease.\\n     * @return A boolean value indicating whether the operation was successful.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        require(\\n            _allowances[_msgSender()][spender] >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if an account is excluded from reward.\\n     * @param account The address of the account to check.\\n     * @return True if the account is excluded from reward, false otherwise.\\n     */\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    /**\\n     * @dev Calculates the reflection amount from a given token amount.\\n     * @param tAmount The token amount.\\n     * @return The reflection amount.\\n     */\\n    function reflectionFromToken(\\n        uint256 tAmount\\n    ) public view returns (uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        (uint256 rAmount, , , ) = _getValues(tAmount, 0);\\n        return rAmount;\\n    }\\n\\n    // Calculates the token amount from the reflection amount\\n    // rAmount: The reflection amount\\n    // Returns: The token amount\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) public view returns (uint256) {\\n        // Ensure that the reflection amount is less than or equal to the total reflections\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n\\n        // Get the current rate\\n        uint256 currentRate = _getRate();\\n\\n        // Calculate and return the token amount\\n        return rAmount / currentRate;\\n    }\\n\\n    function deliver(uint256 tAmount) public {\\n        address sender = _msgSender();\\n        require(\\n            !_isExcluded[sender],\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint256 rAmount, , , ) = _getValues(tAmount, 0);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _rTotal = _rTotal - (rAmount);\\n        _tFeeTotal = _tFeeTotal + (tAmount);\\n    }\\n\\n    /// @dev Disables the limits in effect.\\n    function offLimits() external onlyOwner {\\n        limitsInEffect = false;\\n        emit OffLimits();\\n    }\\n\\n    // Sets the marketing address\\n    // Parameters:\\n    // - _marketingAddress: The new marketing address\\n    // Modifiers:\\n    // - onlyOwner: Restricts the function to be called only by the contract owner\\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\\n        require(\\n            _marketingAddress != address(0),\\n            \\\"Cannot set treasury to zero address\\\"\\n        );\\n        marketingAddress = payable(_marketingAddress);\\n    }\\n\\n    /// @dev Excludes an account from fees\\n    /// @param account The address to exclude\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    /// @dev Includes an account in fees\\n    /// @param account The address to include\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    /**\\n     * @dev Calculates the tax fee for a transaction.\\n     * @param _amount The amount of tokens being transferred.\\n     * @param sender The address of the sender.\\n     * @param recipient The address of the recipient.\\n     * @return The tax fee amount.\\n     */\\n    function calculateTaxFee(\\n        uint256 _amount,\\n        address sender,\\n        address recipient\\n    ) private view returns (uint256) {\\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\n            return 0;\\n        }\\n        if (sender != pair && recipient != pair) {\\n            return 0;\\n        }\\n        if (sender == pair && _buyCount < _reduceTaxAt) {\\n            return (_amount * _initTax) / 100;\\n        }\\n        if (recipient == pair) {\\n            if (_sellCount < _reduceTaxAt) return (_amount * _initTax) / 100;\\n            return (_amount * _sellTax) / 100;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Excludes an account from receiving rewards.\\n     * @param account The address of the account to be excluded.\\n     */\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    /**\\n     * @dev Includes an account in the reward distribution.\\n     * Can only be called by the contract owner.\\n     * @param account The address of the account to include.\\n     */\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to approve the spender to spend a certain amount of tokens from the owner's balance.\\n     * @param owner The address of the token owner.\\n     * @param spender The address of the spender.\\n     * @param amount The amount of tokens to be approved.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer tokens.\\n     * @param from The address to transfer tokens from.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\n            require(tradingEnable, \\\"Trading not live\\\");\\n            if (limitsInEffect) {\\n                if (from == pair || to == pair) {\\n                    require(amount <= maxAmount, \\\"Max Tx Exceeded\\\");\\n                }\\n                if (to != pair) {\\n                    require(\\n                        balanceOf(to) + amount <= maxWallet,\\n                        \\\"Max Wallet Exceeded\\\"\\n                    );\\n                }\\n            }\\n\\n            if (to == pair) {\\n                _sellCount++;\\n            }\\n            if (from == pair) {\\n                _buyCount++;\\n            }\\n        }\\n        _tokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer tokens.\\n     * @param sender The address sending the tokens.\\n     * @param recipient The address receiving the tokens.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from the sender to the recipient.\\n     * @param sender The address of the sender.\\n     * @param recipient The address of the recipient.\\n     * @param tAmount The amount of tokens to transfer.\\n     */\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount\\n        ) = _getValues(tAmount, tFee);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\\n        _takeFee(rFee, tFee, sender);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from a sender to a recipient (for excluded addresses).\\n     * @param sender The address sending the tokens.\\n     * @param recipient The address receiving the tokens.\\n     * @param tAmount The amount of tokens being transferred.\\n     */\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount\\n        ) = _getValues(tAmount, tFee);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\\n        _takeFee(rFee, tFee, sender);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer tokens from an excluded address to another address.\\n     * @param sender The address sending the tokens.\\n     * @param recipient The address receiving the tokens.\\n     * @param tAmount The amount of tokens being transferred.\\n     */\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\\n\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount\\n        ) = _getValues(tAmount, tFee);\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\\n        _takeFee(rFee, tFee, sender);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from sender to recipient, with tax fee calculation.\\n     * @param sender The address sending the tokens.\\n     * @param recipient The address receiving the tokens.\\n     * @param tAmount The amount of tokens being transferred.\\n     */\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        uint256 tFee = calculateTaxFee(tAmount, sender, recipient);\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount\\n        ) = _getValues(tAmount, tFee);\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\\n        _takeFee(rFee, tFee, sender);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    /**\\n     * @dev Takes the fee from a transaction and distributes it accordingly.\\n     * @param rFeeTotal The total fee in the reflection token.\\n     * @param tFeeTotal The total fee in the transfer token.\\n     * @param _from The address from which the fee is taken.\\n     */\\n    function _takeFee(\\n        uint256 rFeeTotal,\\n        uint256 tFeeTotal,\\n        address _from\\n    ) private {\\n        uint256 rFeeReflect = (rFeeTotal * 2) / (_sellTax);\\n        uint256 tFeeReflect = (tFeeTotal * 2) / (_sellTax);\\n\\n        // reflect fees\\n        _rTotal = _rTotal - (rFeeReflect);\\n        _tFeeTotal = _tFeeTotal + (tFeeReflect);\\n\\n        // marketing fees\\n        _rOwned[marketingAddress] =\\n            _rOwned[marketingAddress] +\\n            (rFeeTotal - rFeeReflect);\\n\\n        if (_isExcluded[marketingAddress]) {\\n            _tOwned[marketingAddress] =\\n                _tOwned[marketingAddress] +\\n                (tFeeTotal - tFeeReflect);\\n        }\\n        emit Transfer(_from, marketingAddress, tFeeTotal - tFeeReflect);\\n        emit Distribute(tFeeReflect);\\n    }\\n\\n    /**\\n     * @dev Calculates the values for a given token amount and fee amount.\\n     * @param tAmount The token amount.\\n     * @param tFee The fee amount.\\n     * @return The calculated values: rAmount, rTransferAmount, rFee, tTransferAmount.\\n     */\\n    function _getValues(\\n        uint256 tAmount,\\n        uint256 tFee\\n    ) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 tTransferAmount = _getTValues(tAmount, tFee);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            _getRate()\\n        );\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount);\\n    }\\n\\n    /**\\n     * @dev Calculates the transfer amount in token units.\\n     * @param tAmount The token amount.\\n     * @param tFee The fee amount.\\n     * @return The calculated transfer amount in token units.\\n     */\\n    function _getTValues(\\n        uint256 tAmount,\\n        uint256 tFee\\n    ) private pure returns (uint256) {\\n        uint256 tTransferAmount = tAmount - (tFee);\\n        return tTransferAmount;\\n    }\\n\\n    /**\\n     * @dev Calculates the R values for a given tAmount, tFee, and currentRate.\\n     * @param tAmount The transfer amount.\\n     * @param tFee The transfer fee.\\n     * @param currentRate The current rate.\\n     * @return rAmount The R amount.\\n     * @return rTransferAmount The R transfer amount.\\n     * @return rFee The R fee.\\n     */\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 currentRate\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount * (currentRate);\\n        uint256 rFee = tFee * (currentRate);\\n        uint256 rTransferAmount = rAmount - (rFee);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    /**\\n     * @dev Returns the rate calculated based on the current supply.\\n     * The rate is calculated by dividing the reserve supply (rSupply) by the total supply (tSupply).\\n     * @return The rate as a uint256 value.\\n     */\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / (tSupply);\\n    }\\n\\n    /**\\n     * @dev Returns the current token supply.\\n     * @return rSupply The total reflected supply of tokens.\\n     * @return tSupply The total token supply.\\n     */\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply - (_rOwned[_excluded[i]]);\\n            tSupply = tSupply - (_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    /**\\n     * @dev Checks if an account is excluded from fee calculations.\\n     * @param account The address of the account to check.\\n     * @return True if the account is excluded from fees, false otherwise.\\n     */\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OffLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startZeroGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZeroGasProtocol", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}