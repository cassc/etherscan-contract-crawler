{"SourceCode": "# @version 0.3.7\r\n\r\n\"\"\"\r\n@title Yearn Vault Factory\r\n@license GNU AGPLv3\r\n@author yearn.finance\r\n@notice\r\n    This vault Factory can be used by anyone wishing to deploy their own\r\n    ERC4626 compliant Yearn V3 Vault of the same API version.\r\n\r\n    The factory uses the Blueprint (ERC-5202) standard to handle the\r\n    deployment of any new vaults off of the immutable address stored \r\n    at `VAULT_BLUEPRINT`. This allows the vaults to be deployed and\r\n    initialized fully on-chain with their init byte code, thus not \r\n    requiring any delegatecall patterns or post deployment initialization.\r\n    The deployments are done through create2 with a specific `salt` \r\n    that is derived from a combination of the deployer's address,\r\n    the underlying asset used, as well as the name and symbol specified.\r\n    Meaning a deployer will not be able to deploy the exact same vault\r\n    twice and will need to use different name and or symbols for vaults\r\n    that use the same other parameters such as `asset`.\r\n\r\n    The factory also holds the protocol fee configs for each vault and strategy\r\n    of its specific `API_VERSION` that determine how much of the fees\r\n    charged are designated \"protocol fees\" and sent to the designated\r\n    `fee_recipient`. The protocol fees work through a revenue share system,\r\n    where if the vault or strategy decides to charge X amount of total\r\n    fees during a `report` the protocol fees are a percent of X.\r\n    The protocol fees will be sent to the designated fee_recipient and\r\n    then (X - protocol_fees) will be sent to the vault/strategy specific\r\n    fee recipient.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nevent NewVault:\r\n    vault_address: indexed(address)\r\n    asset: indexed(address)\r\n\r\nevent UpdateProtocolFeeBps:\r\n    old_fee_bps: uint16\r\n    new_fee_bps: uint16\r\n\r\nevent UpdateProtocolFeeRecipient:\r\n    old_fee_recipient: indexed(address)\r\n    new_fee_recipient: indexed(address)\r\n\r\nevent UpdateCustomProtocolFee:\r\n    vault: indexed(address)\r\n    new_custom_protocol_fee: uint16\r\n\r\nevent RemovedCustomProtocolFee:\r\n    vault: indexed(address)\r\n\r\nevent FactoryShutdown:\r\n    pass\r\n\r\nevent UpdateGovernance:\r\n    governance: indexed(address)\r\n\r\nevent NewPendingGovernance:\r\n    pending_governance: indexed(address)\r\n\r\nstruct PFConfig:\r\n    # Percent of protocol's split of fees in Basis Points.\r\n    fee_bps: uint16\r\n    # Address the protocol fees get paid to.\r\n    fee_recipient: address\r\n\r\n# Identifier for this version of the vault.\r\nAPI_VERSION: constant(String[28]) = \"3.0.1\"\r\n\r\n# The max amount the protocol fee can be set to.\r\nMAX_FEE_BPS: constant(uint16) = 5_000 # 50%\r\n\r\n# The address that all newly deployed vaults are based from.\r\nVAULT_BLUEPRINT: immutable(address)\r\n\r\n# State of the Factory. If True no new vaults can be deployed.\r\nshutdown: public(bool)\r\n\r\n# Address that can set or change the fee configs.\r\ngovernance: public(address)\r\n# Pending governance waiting to be accepted.\r\npending_governance: public(address)\r\n\r\n# Name for identification.\r\nname: public(String[64])\r\n\r\n# The default config for assessing protocol fees.\r\ndefault_protocol_fee_config: public(PFConfig)\r\n# Custom fee to charge for a specific vault or strategy.\r\ncustom_protocol_fee: public(HashMap[address, uint16])\r\n# Represents if a custom protocol fee should be used.\r\nuse_custom_protocol_fee: public(HashMap[address, bool])\r\n\r\n@external\r\ndef __init__(name: String[64], vault_blueprint: address, governance: address):\r\n    self.name = name\r\n    VAULT_BLUEPRINT = vault_blueprint\r\n    self.governance = governance\r\n\r\n@external\r\ndef deploy_new_vault(\r\n    asset: ERC20, \r\n    name: String[64], \r\n    symbol: String[32], \r\n    role_manager: address, \r\n    profit_max_unlock_time: uint256\r\n) -> address:\r\n    \"\"\"\r\n    @notice Deploys a new vault base on the bLueprint.\r\n    @param asset The asset to be used for the vault.\r\n    @param name The name of the new vault.\r\n    @param symbol The symbol of the new vault.\r\n    @param role_manager The address of the role manager.\r\n    @param profit_max_unlock_time The time over which the profits will unlock.\r\n    @return The address of the new vault.\r\n    \"\"\"\r\n    # Make sure the factory is not shutdown.\r\n    assert not self.shutdown, \"shutdown\"\r\n\r\n    # Deploy the new vault using the blueprint.\r\n    vault_address: address = create_from_blueprint(\r\n            VAULT_BLUEPRINT, \r\n            asset, \r\n            name, \r\n            symbol, \r\n            role_manager, \r\n            profit_max_unlock_time, \r\n            code_offset=3, \r\n            salt=keccak256(_abi_encode(msg.sender, asset.address, name, symbol))\r\n        )\r\n        \r\n    log NewVault(vault_address, asset.address)\r\n    return vault_address\r\n\r\n@view\r\n@external\r\ndef vault_blueprint()-> address:\r\n    \"\"\"\r\n    @notice Get the address of the vault blueprint\r\n    @return The address of the vault blueprint\r\n    \"\"\"\r\n    return VAULT_BLUEPRINT\r\n\r\n@view\r\n@external\r\ndef apiVersion() -> String[28]:\r\n    \"\"\"\r\n    @notice Get the API version of the factory.\r\n    @return The API version of the factory.\r\n    \"\"\"\r\n    return API_VERSION\r\n\r\n@view\r\n@external\r\ndef protocol_fee_config() -> PFConfig:\r\n    \"\"\"\r\n    @notice Called during vault and strategy reports \r\n    to retrieve the protocol fee to charge and address\r\n    to receive the fees.\r\n    @return The protocol fee config for the msg sender.\r\n    \"\"\"\r\n    # If there is a custom protocol fee set we return it.\r\n    if self.use_custom_protocol_fee[msg.sender]:\r\n        # Always use the default fee recipient even with custom fees.\r\n        return PFConfig({\r\n            fee_bps: self.custom_protocol_fee[msg.sender],\r\n            fee_recipient: self.default_protocol_fee_config.fee_recipient\r\n        })\r\n    else:\r\n        # Otherwise return the default config.\r\n        return self.default_protocol_fee_config\r\n\r\n@external\r\ndef set_protocol_fee_bps(new_protocol_fee_bps: uint16):\r\n    \"\"\"\r\n    @notice Set the protocol fee in basis points\r\n    @dev Must be below the max allowed fee, and a default\r\n    fee_recipient must be set so we don't issue fees to the 0 address.\r\n    @param new_protocol_fee_bps The new protocol fee in basis points\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n    assert new_protocol_fee_bps <= MAX_FEE_BPS, \"fee too high\"\r\n    assert self.default_protocol_fee_config.fee_recipient != empty(address), \"no recipient\"\r\n\r\n    log UpdateProtocolFeeBps(\r\n        self.default_protocol_fee_config.fee_bps, \r\n        new_protocol_fee_bps\r\n    )\r\n\r\n    self.default_protocol_fee_config.fee_bps = new_protocol_fee_bps\r\n\r\n@external\r\ndef set_protocol_fee_recipient(new_protocol_fee_recipient: address):\r\n    \"\"\"\r\n    @notice Set the protocol fee recipient\r\n    @dev Can never be set to 0 to avoid issuing fees to the 0 address.\r\n    @param new_protocol_fee_recipient The new protocol fee recipient\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n    assert new_protocol_fee_recipient != empty(address), \"zero address\"\r\n\r\n    log UpdateProtocolFeeRecipient(\r\n        self.default_protocol_fee_config.fee_recipient,\r\n        new_protocol_fee_recipient\r\n    )\r\n    \r\n    self.default_protocol_fee_config.fee_recipient = new_protocol_fee_recipient\r\n\r\n@external\r\ndef set_custom_protocol_fee_bps(vault: address, new_custom_protocol_fee: uint16):\r\n    \"\"\"\r\n    @notice Allows Governance to set custom protocol fees\r\n    for a specific vault or strategy.\r\n    @dev Must be below the max allowed fee, and a default\r\n    fee_recipient must be set so we don't issue fees to the 0 address.\r\n    @param vault The address of the vault or strategy to customize.\r\n    @param new_custom_protocol_fee The custom protocol fee in BPS.\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n    assert new_custom_protocol_fee <= MAX_FEE_BPS, \"fee too high\"\r\n    assert self.default_protocol_fee_config.fee_recipient != empty(address), \"no recipient\"\r\n\r\n    self.custom_protocol_fee[vault] = new_custom_protocol_fee\r\n\r\n    # If this is the first time a custom fee is set for this vault\r\n    # set the bool indicator so it returns the correct fee.\r\n    if not self.use_custom_protocol_fee[vault]:\r\n        self.use_custom_protocol_fee[vault] = True\r\n\r\n    log UpdateCustomProtocolFee(vault, new_custom_protocol_fee)\r\n\r\n@external \r\ndef remove_custom_protocol_fee(vault: address):\r\n    \"\"\"\r\n    @notice Allows governance to remove a previously set\r\n    custom protocol fee.\r\n    @param vault The address of the vault or strategy to\r\n    remove the custom fee for.\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n\r\n    # Reset the custom fee to 0.\r\n    self.custom_protocol_fee[vault] = 0\r\n\r\n    # Set custom fee bool back to false.\r\n    self.use_custom_protocol_fee[vault] = False\r\n\r\n    log RemovedCustomProtocolFee(vault)\r\n\r\n@external\r\ndef shutdown_factory():\r\n    \"\"\"\r\n    @notice To stop new deployments through this factory.\r\n    @dev A one time switch available for governance to stop\r\n    new vaults from being deployed through the factory.\r\n    NOTE: This will have no effect on any previously deployed\r\n    vaults that deployed from this factory.\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n    assert self.shutdown == False, \"shutdown\"\r\n\r\n    self.shutdown = True\r\n    \r\n    log FactoryShutdown()\r\n\r\n@external\r\ndef set_governance(new_governance: address):\r\n    \"\"\"\r\n    @notice Set the governance address\r\n    @param new_governance The new governance address\r\n    \"\"\"\r\n    assert msg.sender == self.governance, \"not governance\"\r\n    self.pending_governance = new_governance\r\n\r\n    log NewPendingGovernance(new_governance)\r\n\r\n@external\r\ndef accept_governance():\r\n    \"\"\"\r\n    @notice Accept the governance address\r\n    \"\"\"\r\n    assert msg.sender == self.pending_governance, \"not pending governance\"\r\n    self.governance = msg.sender\r\n    self.pending_governance = empty(address)\r\n\r\n    log UpdateGovernance(msg.sender)", "ABI": "[{\"name\":\"NewVault\",\"inputs\":[{\"name\":\"vault_address\",\"type\":\"address\",\"indexed\":true},{\"name\":\"asset\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateProtocolFeeBps\",\"inputs\":[{\"name\":\"old_fee_bps\",\"type\":\"uint16\",\"indexed\":false},{\"name\":\"new_fee_bps\",\"type\":\"uint16\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateProtocolFeeRecipient\",\"inputs\":[{\"name\":\"old_fee_recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_fee_recipient\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCustomProtocolFee\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_custom_protocol_fee\",\"type\":\"uint16\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemovedCustomProtocolFee\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FactoryShutdown\",\"inputs\":[],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateGovernance\",\"inputs\":[{\"name\":\"governance\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewPendingGovernance\",\"inputs\":[{\"name\":\"pending_governance\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"vault_blueprint\",\"type\":\"address\"},{\"name\":\"governance\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_new_vault\",\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"role_manager\",\"type\":\"address\"},{\"name\":\"profit_max_unlock_time\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vault_blueprint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"apiVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"protocol_fee_config\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"fee_bps\",\"type\":\"uint16\"},{\"name\":\"fee_recipient\",\"type\":\"address\"}]}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_protocol_fee_bps\",\"inputs\":[{\"name\":\"new_protocol_fee_bps\",\"type\":\"uint16\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_protocol_fee_recipient\",\"inputs\":[{\"name\":\"new_protocol_fee_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_custom_protocol_fee_bps\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"new_custom_protocol_fee\",\"type\":\"uint16\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_custom_protocol_fee\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"shutdown_factory\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_governance\",\"inputs\":[{\"name\":\"new_governance\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_governance\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"shutdown\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"governance\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_governance\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"default_protocol_fee_config\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"fee_bps\",\"type\":\"uint16\"},{\"name\":\"fee_recipient\",\"type\":\"address\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"custom_protocol_fee\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"use_custom_protocol_fee\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Yearn Vault Factory", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000de992c652b266ae649fec8048afc35954bee614500000000000000000000000033333333d5efb92f19a5f94a43456b3cec2797ae000000000000000000000000000000000000000000000000000000000000001a596561726e2076332e302e31205661756c7420466163746f7279000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}