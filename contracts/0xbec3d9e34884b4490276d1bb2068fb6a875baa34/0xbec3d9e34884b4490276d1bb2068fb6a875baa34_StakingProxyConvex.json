{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/StakingProxyConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/ICurveConvex.sol\\\";\\nimport \\\"./interfaces/IConvexWrapperV2.sol\\\";\\nimport \\\"./StakingProxyBase.sol\\\";\\nimport \\\"./interfaces/IFraxFarmERC20_V2.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n\\n\\ncontract StakingProxyConvex is StakingProxyBase, ReentrancyGuard{\\n    using SafeERC20 for IERC20;\\n\\n    address public constant convexCurveBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n\\n    address public curveLpToken;\\n    address public convexDepositToken;\\n\\n    constructor() {\\n    }\\n\\n    function vaultType() external pure override returns(VaultType){\\n        return VaultType.Convex;\\n    }\\n\\n    function vaultVersion() external pure override returns(uint256){\\n        return 7;\\n    }\\n\\n    //initialize vault\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) public override{\\n        require(owner == address(0),\\\"already init\\\");\\n\\n        //set variables\\n        super.initialize(_owner, _stakingAddress, _stakingToken, _rewardsAddress);\\n\\n        //get tokens from pool info\\n        (address _lptoken, address _token,,, , ) = ICurveConvex(convexCurveBooster).poolInfo(IConvexWrapperV2(_stakingToken).convexPoolId());\\n    \\n        curveLpToken = _lptoken;\\n        convexDepositToken = _token;\\n\\n        //set infinite approvals\\n        IERC20(_stakingToken).approve(_stakingAddress, type(uint256).max);\\n        IERC20(_lptoken).approve(_stakingToken, type(uint256).max);\\n        IERC20(_token).approve(_stakingToken, type(uint256).max);\\n    }\\n\\n\\n    //create a new locked state of _secs timelength with a Curve LP token\\n    function stakeLockedCurveLp(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\n        if(_liquidity > 0){\\n            //pull tokens from user\\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\n\\n            //deposit into wrapper\\n            IConvexWrapperV2(stakingToken).deposit(_liquidity, address(this));\\n\\n            //stake\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //create a new locked state of _secs timelength with a Convex deposit token\\n    function stakeLockedConvexToken(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\n        if(_liquidity > 0){\\n            //pull tokens from user\\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\n\\n            //stake into wrapper\\n            IConvexWrapperV2(stakingToken).stake(_liquidity, address(this));\\n\\n            //stake into frax\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //create a new locked state of _secs timelength\\n    function stakeLocked(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\n        if(_liquidity > 0){\\n            //pull tokens from user\\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\n\\n            //stake\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //add to a current lock\\n    function lockAdditional(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\n        if(_addl_liq > 0){\\n            //pull tokens from user\\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\n\\n            //add stake\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //add to a current lock\\n    function lockAdditionalCurveLp(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\n        if(_addl_liq > 0){\\n            //pull tokens from user\\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\n\\n            //deposit into wrapper\\n            IConvexWrapperV2(stakingToken).deposit(_addl_liq, address(this));\\n\\n            //add stake\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //add to a current lock\\n    function lockAdditionalConvexToken(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\n        if(_addl_liq > 0){\\n            //pull tokens from user\\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\n\\n            //stake into wrapper\\n            IConvexWrapperV2(stakingToken).stake(_addl_liq, address(this));\\n\\n            //add stake\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    // Extends the lock of an existing stake\\n    function lockLonger(bytes32 _kek_id, uint256 new_ending_ts) external onlyOwner nonReentrant{\\n        //update time\\n        IFraxFarmERC20_V2(stakingAddress).lockLonger(_kek_id, new_ending_ts);\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //withdraw a staked position\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\n    function withdrawLocked(bytes32 _kek_id) external onlyOwner nonReentrant{        \\n        //withdraw directly to owner(msg.sender)\\n        IFraxFarmERC20_V2(stakingAddress).withdrawLocked(_kek_id, msg.sender, false);\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //withdraw a staked position\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\n    function withdrawLockedAndUnwrap(bytes32 _kek_id) external onlyOwner nonReentrant{\\n        //withdraw\\n        IFraxFarmERC20_V2(stakingAddress).withdrawLocked(_kek_id, address(this), false);\\n\\n        //unwrap\\n        IConvexWrapperV2(stakingToken).withdrawAndUnwrap(IERC20(stakingToken).balanceOf(address(this)));\\n        IERC20(curveLpToken).transfer(owner,IERC20(curveLpToken).balanceOf(address(this)));\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //helper function to combine earned tokens on staking contract and any tokens that are on this vault\\n    function earned() external override returns (address[] memory token_addresses, uint256[] memory total_earned) {\\n        //get list of reward tokens\\n        address[] memory rewardTokens = IFraxFarmERC20_V2(stakingAddress).getAllRewardTokens();\\n        uint256[] memory stakedearned = IFraxFarmERC20_V2(stakingAddress).earned(address(this));\\n        IConvexWrapperV2.EarnedData[] memory convexrewards = IConvexWrapperV2(stakingToken).earned(address(this));\\n        uint256 convexExtraRewards = convexrewards.length - 2; //ignore crv and cvx which are guaranteed to be slots 0 and 1\\n\\n        uint256 extraRewardsLength = IRewards(rewards).rewardTokenLength();\\n        token_addresses = new address[](rewardTokens.length + extraRewardsLength + convexExtraRewards);\\n        total_earned = new uint256[](rewardTokens.length + extraRewardsLength + convexExtraRewards);\\n\\n        //add any tokens that happen to be already claimed but sitting on the vault\\n        //(ex. withdraw claiming rewards)\\n        for(uint256 i = 0; i < rewardTokens.length; i++){\\n            token_addresses[i] = rewardTokens[i];\\n            total_earned[i] = stakedearned[i] + IERC20(rewardTokens[i]).balanceOf(address(this));\\n        }\\n\\n        IRewards.EarnedData[] memory extraRewards = IRewards(rewards).claimableRewards(address(this));\\n        for(uint256 i = 0; i < extraRewards.length; i++){\\n            token_addresses[i+rewardTokens.length] = extraRewards[i].token;\\n            total_earned[i+rewardTokens.length] = extraRewards[i].amount;\\n        }\\n\\n        //add convex farm earned tokens (new farms get crv/cvx distributed through the farm so start from index 2)\\n        for(uint256 i = 0; i < convexExtraRewards; i++){\\n            token_addresses[i+rewardTokens.length+extraRewardsLength] = convexrewards[i+2].token; //offset to skip crv/cvx\\n            total_earned[i+rewardTokens.length+extraRewardsLength] = convexrewards[i+2].amount; //offset to skip crv/cvx\\n        }\\n    }\\n\\n    /*\\n    claim flow:\\n        claim rewards directly to the vault\\n        calculate fees to send to fee deposit\\n        send fxs to a holder contract for fees\\n        get reward list of tokens that were received\\n        send all remaining tokens to owner\\n\\n    A slightly less gas intensive approach could be to send rewards directly to a holder contract and have it sort everything out.\\n    However that makes the logic a bit more complex as well as runs a few future proofing risks\\n    */\\n    function getReward() external override{\\n        getReward(true);\\n    }\\n\\n    //get reward with claim option.\\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\\n    //can also be used to rescue tokens on the vault\\n    function getReward(bool _claim) public override{\\n\\n        //claim\\n        if(_claim){\\n            //claim frax farm\\n            IFraxFarmERC20_V2(stakingAddress).getReward(address(this));\\n            //claim convex farm and forward to owner\\n            IConvexWrapperV2(stakingToken).getReward(address(this),owner);\\n\\n            //double check there have been no crv/cvx claims directly to this address\\n            uint256 b = IERC20(crv).balanceOf(address(this));\\n            if(b > 0){\\n                IERC20(crv).safeTransfer(owner, b);\\n            }\\n            b = IERC20(cvx).balanceOf(address(this));\\n            if(b > 0){\\n                IERC20(cvx).safeTransfer(owner, b);\\n            }\\n        }\\n\\n        //process fxs fees\\n        _processFxs();\\n\\n        //get list of reward tokens\\n        address[] memory rewardTokens = IFraxFarmERC20_V2(stakingAddress).getAllRewardTokens();\\n\\n        //transfer\\n        _transferTokens(rewardTokens);\\n\\n        //extra rewards\\n        _processExtraRewards();\\n    }\\n\\n    //auxiliary function to supply token list(save a bit of gas + dont have to claim everything)\\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\\n    //can also be used to rescue tokens on the vault\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external override{\\n\\n        //claim\\n        if(_claim){\\n            //claim frax farm\\n            IFraxFarmERC20_V2(stakingAddress).getReward(address(this));\\n            //claim convex farm and forward to owner\\n            IConvexWrapperV2(stakingToken).getReward(address(this),owner);\\n        }\\n\\n        //process fxs fees\\n        _processFxs();\\n\\n        //transfer\\n        _transferTokens(_rewardTokenList);\\n\\n        //extra rewards\\n        _processExtraRewards();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRewards{\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    \\n    function initialize(uint256 _pid, bool _startActive) external;\\n    function addReward(address _rewardsToken, address _distributor) external;\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external;\\n    function deposit(address _owner, uint256 _amount) external;\\n    function withdraw(address _owner, uint256 _amount) external;\\n    function getReward(address _forward) external;\\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\\n    function rewardTokens(uint256 _rid) external view returns (address);\\n    function rewardTokenLength() external view returns(uint256);\\n    function poolId() external view returns(uint256);\\n    function active() external view returns(bool);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IProxyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IProxyVault {\\n\\n    enum VaultType{\\n        Erc20Basic,\\n        UniV3,\\n        Convex,\\n        Erc20Joint\\n    }\\n\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external;\\n    function usingProxy() external returns(address);\\n    function owner() external returns(address);\\n    function stakingAddress() external returns(address);\\n    function rewards() external returns(address);\\n    function getReward() external;\\n    function getReward(bool _claim) external;\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\\n    function earned() external returns (address[] memory token_addresses, uint256[] memory total_earned);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IPoolRegistry {\\n    function poolLength() external view returns(uint256);\\n    function poolInfo(uint256 _pid) external view returns(address, address, address, address, uint8);\\n    function vaultMap(uint256 _pid, address _user) external view returns(address vault);\\n    function addUserVault(uint256 _pid, address _user) external returns(address vault, address stakeAddress, address stakeToken, address rewards);\\n    function deactivatePool(uint256 _pid) external;\\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\\n    function setRewardActiveOnCreation(bool _active) external;\\n    function setRewardImplementation(address _imp) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFraxFarmERC20_V2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFraxFarmERC20_V2 {\\n    \\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 liquidity;\\n        uint256 ending_timestamp;\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\n    }\\n\\n    function owner() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function fraxPerLPToken() external view returns (uint256);\\n    function calcCurCombinedWeight(address account) external view\\n        returns (\\n            uint256 old_combined_weight,\\n            uint256 new_vefxs_multiplier,\\n            uint256 new_combined_weight\\n        );\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\\n    function lockedStakesOfLength(address account) external view returns (uint256);\\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) external;\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\\n    function withdrawLocked(bytes32 kek_id, address destination_address, bool _claim) external returns (uint256);\\n\\n\\n\\n    function periodFinish() external view returns (uint256);\\n    function lastUpdateTime() external view returns (uint256);\\n    function rewardsDuration() external view returns (uint256);\\n    function rewardsPerToken() external view returns (uint256[] memory newRewardsPerTokenStored);\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function earned(address account) external view returns (uint256[] memory new_earned);\\n    function totalLiquidityLocked() external view returns (uint256);\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n    function totalCombinedWeight() external view returns (uint256);\\n    function combinedWeightOf(address account) external view returns (uint256);\\n    function lockMultiplier(uint256 secs) external view returns (uint256);\\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\\n\\n    function userStakedFrax(address account) external view returns (uint256);\\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\\n    function maxLPForMaxBoost(address account) external view returns (uint256);\\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\\n\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\n    function proxyToggleStaker(address staker_address) external;\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n    function vefxs_max_multiplier() external view returns(uint256);\\n    function vefxs_boost_scale_factor() external view returns(uint256);\\n    function vefxs_per_frax_for_max_boost() external view returns(uint256);\\n    function lock_time_for_max_multiplier() external view returns(uint256);\\n    function getProxyFor(address addr) external view returns (address);\\n\\n    function sync() external;\\n    function setRewardVars(address reward_token_address, uint256 _new_rate, address _gauge_controller_address, address _rewards_distributor_address) external;\\n    function changeTokenManager(address reward_token_address, address new_manager_address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFraxFarmBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFraxFarmBase{\\n\\n    function totalLiquidityLocked() external view returns (uint256);\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\n    function proxyToggleStaker(address staker_address) external;\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IFeeRegistry{\\n    function cvxfxsIncentive() external view returns(uint256);\\n    function cvxIncentive() external view returns(uint256);\\n    function platformIncentive() external view returns(uint256);\\n    function totalFees() external view returns(uint256);\\n    function maxFees() external view returns(uint256);\\n    function feeDeposit() external view returns(address);\\n    function getFeeDepositor(address _from) external view returns(address);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ICurveConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICurveConvex {\\n   function earmarkRewards(uint256 _pid) external returns(bool);\\n   function earmarkFees() external returns(bool);\\n   function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\n   function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IConvexWrapperV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IConvexWrapperV2{\\n\\n   struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n   struct RewardType {\\n        address reward_token;\\n        address reward_pool;\\n        uint128 reward_integral;\\n        uint128 reward_remaining;\\n    }\\n\\n  function distroContract() external view returns(address distro);\\n  function collateralVault() external view returns(address vault);\\n  function convexPoolId() external view returns(uint256 _poolId);\\n  function curveToken() external view returns(address);\\n  function convexToken() external view returns(address);\\n  function rewardRedirect(address _account) external view returns(address);\\n  function balanceOf(address _account) external view returns(uint256);\\n  function totalBalanceOf(address _account) external view returns(uint256);\\n  function deposit(uint256 _amount, address _to) external;\\n  function stake(uint256 _amount, address _to) external;\\n  function withdraw(uint256 _amount) external;\\n  function withdrawAndUnwrap(uint256 _amount) external;\\n  function getReward(address _account) external;\\n  function getReward(address _account, address _forwardTo) external;\\n  function rewardLength() external view returns(uint256);\\n  function rewards(uint256 _index) external view returns(RewardType memory rewardInfo);\\n  function earned(address _account) external returns(EarnedData[] memory claimable);\\n  function earnedView(address _account) external view returns(EarnedData[] memory claimable);\\n  function setVault(address _vault) external;\\n  function user_checkpoint(address _account) external returns(bool);\\n  function setDistributor(address _vault, address _distro) external;\\n  function sealDistributor() external;\\n}\"\r\n    },\r\n    \"/contracts/StakingProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IProxyVault.sol\\\";\\nimport \\\"./interfaces/IFeeRegistry.sol\\\";\\nimport \\\"./interfaces/IFraxFarmBase.sol\\\";\\nimport \\\"./interfaces/IRewards.sol\\\";\\nimport \\\"./interfaces/IPoolRegistry.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n\\ncontract StakingProxyBase is IProxyVault{\\n    using SafeERC20 for IERC20;\\n\\n    address public constant fxs = address(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\\n    address public constant vefxsProxy = address(0x59CFCD384746ec3035299D90782Be065e466800B);\\n    address public constant feeRegistry = address(0xC9aCB83ADa68413a6Aa57007BC720EE2E2b3C46D); //fee registry\\n    address public constant poolRegistry = address(0x41a5881c17185383e19Df6FA4EC158a6F4851A69); //pool registry\\n\\n    address public owner; //owner of the vault\\n    address public stakingAddress; //farming contract\\n    address public stakingToken; //farming token\\n    address public rewards; //extra rewards on convex\\n    address public usingProxy; //address of proxy being used\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    mapping(address => bool) internal usedRewards;\\n\\n    constructor() {\\n    }\\n\\n    function vaultType() external virtual pure returns(VaultType){\\n        return VaultType.Erc20Basic;\\n    }\\n\\n    function vaultVersion() external virtual pure returns(uint256){\\n        return 1;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!auth\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(vefxsProxy == msg.sender, \\\"!auth_admin\\\");\\n        _;\\n    }\\n\\n    //initialize vault\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) public virtual{\\n        owner = _owner;\\n        stakingAddress = _stakingAddress;\\n        stakingToken = _stakingToken;\\n        rewards = _rewardsAddress;\\n    }\\n\\n    function changeRewards(address _rewardsAddress) external onlyAdmin{\\n        \\n        //remove from old rewards and claim\\n        if(IRewards(rewards).active()){\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\n            if(bal > 0){\\n                IRewards(rewards).withdraw(owner, bal);\\n            }\\n            IRewards(rewards).getReward(owner);\\n        }\\n\\n        //register old reward contracts\\n        usedRewards[rewards] = true;\\n\\n        //set to new rewards\\n        rewards = _rewardsAddress;\\n\\n        //update balance\\n        _checkpointRewards();\\n    }\\n\\n    //checkpoint weight on farm by calling getReward as its the lowest cost thing to do.\\n    function checkpointRewards() external onlyAdmin{\\n        //checkpoint the frax farm\\n        _checkpointFarm();\\n    }\\n\\n    function _checkpointFarm() internal{\\n        //claim rewards to local vault as a means to checkpoint\\n        IFraxFarmBase(stakingAddress).getReward(address(this));\\n    }\\n\\n    function setVeFXSProxy(address _proxy) external virtual onlyAdmin{\\n        //set the vefxs proxy\\n        _setVeFXSProxy(_proxy);\\n    }\\n\\n    function _setVeFXSProxy(address _proxyAddress) internal{\\n        //set proxy address on staking contract\\n        IFraxFarmBase(stakingAddress).stakerSetVeFXSProxy(_proxyAddress);\\n        usingProxy = _proxyAddress;\\n    }\\n\\n\\n    function getReward() external virtual{}\\n    function getReward(bool _claim) external virtual{}\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external virtual{}\\n    function earned() external virtual returns (address[] memory token_addresses, uint256[] memory total_earned){}\\n\\n\\n    //checkpoint and add/remove weight to convex rewards contract\\n    function _checkpointRewards() internal{\\n        //if rewards are active, checkpoint\\n        if(IRewards(rewards).active()){\\n            //using liquidity shares from staking contract will handle rebasing tokens correctly\\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\\n            //get current balance of reward contract\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\n            if(userLiq >= bal){\\n                //add the difference to reward contract\\n                IRewards(rewards).deposit(owner, userLiq - bal);\\n            }else{\\n                //remove the difference from the reward contract\\n                IRewards(rewards).withdraw(owner, bal - userLiq);\\n            }\\n        }\\n    }\\n\\n    //apply fees to fxs and send remaining to owner\\n    function _processFxs() internal{\\n\\n        //get fee rate from fee registry\\n        uint256 totalFees = IFeeRegistry(feeRegistry).totalFees();\\n\\n        //send fxs fees to fee deposit\\n        uint256 fxsBalance = IERC20(fxs).balanceOf(address(this));\\n        uint256 sendAmount = fxsBalance * totalFees / FEE_DENOMINATOR;\\n        if(sendAmount > 0){\\n            IERC20(fxs).transfer(IFeeRegistry(feeRegistry).getFeeDepositor(usingProxy), sendAmount);\\n        }\\n\\n        //transfer remaining fxs to owner\\n        sendAmount = IERC20(fxs).balanceOf(address(this));\\n        if(sendAmount > 0){\\n            IERC20(fxs).transfer(owner, sendAmount);\\n        }\\n    }\\n\\n    //get extra rewards\\n    function _processExtraRewards() internal{\\n        if(IRewards(rewards).active()){\\n            //check if there is a balance because the reward contract could have be activated later\\n            //dont use _checkpointRewards since difference of 0 will still call deposit() and cost gas\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\\n            if(bal == 0 && userLiq > 0){\\n                //bal == 0 and liq > 0 can only happen if rewards were turned on after staking\\n                IRewards(rewards).deposit(owner,userLiq);\\n            }\\n            IRewards(rewards).getReward(owner);\\n        }\\n    }\\n\\n    //transfer other reward tokens besides fxs(which needs to have fees applied)\\n    function _transferTokens(address[] memory _tokens) internal{\\n        //transfer all tokens\\n        for(uint256 i = 0; i < _tokens.length; i++){\\n            if(_tokens[i] != fxs){\\n                uint256 bal = IERC20(_tokens[i]).balanceOf(address(this));\\n                if(bal > 0){\\n                    IERC20(_tokens[i]).safeTransfer(owner, bal);\\n                }\\n            }\\n        }\\n    }\\n\\n    //allow arbitrary calls. some targets are blocked\\n    function execute(\\n        address _to,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        //fully block fxs, staking token(lp etc), and rewards\\n        require(_to != fxs && _to != stakingToken && _to != rewards && !usedRewards[_to], \\\"!invalid target\\\");\\n\\n        //only calls to staking(gauge) address if pool is shutdown\\n        if(_to == stakingAddress){\\n            require(rewards != address(0),\\\"!pid\\\");\\n            (, , , , uint8 shutdown) = IPoolRegistry(poolRegistry).poolInfo( IRewards(rewards).poolId() );\\n            require(shutdown == 0,\\\"!shutdown\\\");\\n        }\\n\\n        (bool success, bytes memory result) = _to.call{value:0}(_data);\\n        require(success, \\\"!success\\\");\\n        return (success, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"changeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexCurveBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"total_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenList\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditional\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalConvexToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalCurveLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"new_ending_ts\",\"type\":\"uint256\"}],\"name\":\"lockLonger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedConvexToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedCurveLp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"enum IProxyVault.VaultType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxsProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLockedAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProxyConvex", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}