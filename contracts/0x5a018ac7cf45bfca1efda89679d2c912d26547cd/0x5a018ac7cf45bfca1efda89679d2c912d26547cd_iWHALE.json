{"SourceCode": "/*\r\n\r\nThe name \"Killer Whales\" were given to Orcas because ancient sailors saw them preying on large whales,\r\nwhen in fact they are the largest species of dolphin.\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,@&@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@*((#%%&&&&&&&&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@%%%%%%%&&&&&&@@@@@@@&&&&#**(%%%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@&@&*.(@@@@@@@&&&&&&&&&&&&&%%%%&&@@@@@@@@@@@&&&&@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@*(&#,    %@@@@@@@@@@@@@@@@@&&&&&&&&&@@@@@@@@@@@@@@@@@&&%@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@*.    .@&&@@@&&@@@@@@@@@@@@@@@@,      @@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@#&&&&&&&&&,%@@@@@@%        .&@@@@@@@@@@@@@@&&@@@&/@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@#%&&@@&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/*@%*@@@@@@@%%%%#@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@%&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%(@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    }\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract iWHALE is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address private _feeRecipient;\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint256 totalSupply_, address feeRecipient_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_;\r\n         _feeRecipient = feeRecipient_;\r\n        _balances[msg.sender] = totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_); // Optional\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n    if (account == address(0)) {\r\n        return 0;\r\n    }\r\n    return _balances[account];\r\n    }\r\n\r\n    function setFeeRecipient(address feeRecipient) public onlyOwner {\r\n    require(feeRecipient != address(0), \"Fee recipient cannot be the zero address\");\r\n    _feeRecipient = feeRecipient;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    address sender = _msgSender();\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n    uint256 fee = amount / 100; // calculate 1% fee\r\n    uint256 burnAmount = fee / 2; // calculate burn amount (half of fee)\r\n    uint256 transferAmount = amount - fee; // calculate transfer amount (original amount minus fee)\r\n    \r\n    if (_feeRecipient != address(0)) {\r\n        uint256 feeRecipientAmount = fee - burnAmount; // calculate the feeRecipient amount (other half of the fee)\r\n        \r\n        _balances[sender] -= amount; // subtract amount from sender's balance\r\n        _balances[recipient] += transferAmount; // add transfer amount to recipient\r\n        _balances[_feeRecipient] += feeRecipientAmount; // add the feeRecipient amount to feeRecipient's balance\r\n        _balances[address(0)] += burnAmount; // add burn amount to the 0 address\r\n        \r\n        emit Transfer(sender, recipient, transferAmount); // emit transfer event to recipient\r\n        emit Transfer(sender, _feeRecipient, feeRecipientAmount); // emit transfer event for feeRecipient amount\r\n        emit Transfer(sender, address(0), burnAmount); // emit transfer event to burn address\r\n        \r\n        if (burnAmount > 0) {\r\n            _totalSupply -= burnAmount; // update total supply by burning tokens\r\n        }\r\n    } else {\r\n        // if feeRecipient address is not set/invalid, burn the fee instead\r\n        _balances[sender] -= amount; // subtract amount from sender's balance\r\n        _balances[recipient] += transferAmount; // add transfer amount to recipient\r\n        _balances[address(0)] += fee; // add burn amount to the 0 address\r\n        \r\n        emit Transfer(sender, recipient, transferAmount); // emit transfer event to recipient\r\n        emit Transfer(sender, address(0), fee); // emit transfer event to burn address\r\n        \r\n        _totalSupply -= fee; // update total supply by burning tokens\r\n    }\r\n    \r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(amount <= _allowances[sender][_msgSender()], \"ERC20: transfer amount exceeds allowance\");\r\n\r\n    _allowances[sender][_msgSender()] -= amount;\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n    uint256 fee = amount / 100;\r\n    uint256 burnAmount = fee / 2;\r\n    uint256 transferAmount = amount - fee;\r\n\r\n    if (_feeRecipient != address(0)) {\r\n        uint256 feeRecipientAmount = fee - burnAmount;\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += transferAmount;\r\n        _balances[_feeRecipient] += feeRecipientAmount;\r\n        _balances[address(0)] += burnAmount;\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n        emit Transfer(sender, _feeRecipient, feeRecipientAmount);\r\n        emit Transfer(sender, address(0), burnAmount);\r\n\r\n        if (burnAmount > 0) {\r\n            _totalSupply -= burnAmount;\r\n        }\r\n    } else {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += transferAmount;\r\n        _balances[address(0)] += fee;\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n        emit Transfer(sender, address(0), fee);\r\n\r\n        _totalSupply -= fee;\r\n    }\r\n\r\n    return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        \r\n    _beforeTokenTransfer(from, to, amount);\r\n        \r\n    uint256 fromBalance = _balances[from];\r\n    require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n        \r\n    uint256 fee = amount / 100; // calculate 1% fee\r\n    uint256 burnAmount = fee / 2; // calculate burn amount (half of fee)\r\n    uint256 transferAmount = amount - fee; // calculate transfer amount (original amount minus fee)\r\n    \r\n    if (_feeRecipient != address(0)) {\r\n        uint256 feeRecipientAmount = fee - burnAmount; // calculate the feeRecipient amount (other half of the fee)\r\n        _balances[_feeRecipient] += feeRecipientAmount; // add the feeRecipient amount to feeRecipient's balance\r\n        emit Transfer(from, _feeRecipient, feeRecipientAmount); // emit transfer event for feeRecipient amount\r\n        if (burnAmount > 0) {\r\n            _totalSupply -= burnAmount; // update total supply by burning tokens\r\n            _balances[address(0)] += burnAmount; // add burn amount to the 0 address\r\n            emit Transfer(from, address(0), burnAmount); // emit burn event\r\n        }\r\n    } else {\r\n        // if feeRecipient address is not set/invalid, burn the fee instead\r\n        _totalSupply -= fee; // update total supply by burning tokens\r\n        _balances[address(0)] += fee; // add burn amount to the 0 address\r\n        emit Transfer(from, address(0), fee); // emit burn event\r\n    }\r\n        \r\n    _balances[to] += transferAmount; // add transfer amount to recipient\r\n    emit Transfer(from, to, transferAmount); // emit transfer event\r\n        \r\n    _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "iWHALE", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000c04d8fc562cfc870c083d19247ee8f249e8de24e000000000000000000000000000000000000000000000000000000000000000c4b696c6c6572205768616c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f52434100000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b603041c6ec8bb5326476665e686b111d7fe6aad41271c0d468753907408a824"}