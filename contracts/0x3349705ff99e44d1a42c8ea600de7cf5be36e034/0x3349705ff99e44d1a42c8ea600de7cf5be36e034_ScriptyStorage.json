{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/scripty/ScriptyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557 //\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d //\\n// \u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591 //\\n// \u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591 //\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 //\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 //\\n///////////////////////////////////////////////////////////\\n//\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    STORAGE    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591//\\n///////////////////////////////////////////////////////////\\n\\n/**\\n  @title A generic data storage contract.\\n  @author @xtremetom\\n  @author @0xthedude\\n\\n  Special thanks to @cxkoda, @frolic and @dhof\\n*/\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IContentStore} from \\\"./dependencies/ethfs/IContentStore.sol\\\";\\nimport {AddressChunks} from \\\"./utils/AddressChunks.sol\\\";\\n\\nimport {IScriptyStorage} from \\\"./interfaces/IScriptyStorage.sol\\\";\\nimport {IContractScript} from \\\"./interfaces/IContractScript.sol\\\";\\n\\ncontract ScriptyStorage is Ownable, IScriptyStorage, IContractScript {\\n    IContentStore public immutable contentStore;\\n    mapping(string => Script) public scripts;\\n\\n    constructor(address _contentStoreAddress) {\\n        contentStore = IContentStore(_contentStoreAddress);\\n    }\\n\\n    // =============================================================\\n    //                           MODIFIERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Check if the msg.sender is the owner of the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     */\\n    modifier isScriptOwner(string calldata name) {\\n        if (msg.sender != scripts[name].owner) revert NotScriptOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if a script can be created by checking if it already exists\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     */\\n    modifier canCreate(string calldata name) {\\n        if (scripts[name].owner != address(0)) revert ScriptExists();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if a script is frozen\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     */\\n    modifier isFrozen(string calldata name) {\\n        if (scripts[name].isFrozen) revert ScriptIsFrozen(name);\\n        _;\\n    }\\n\\n    // =============================================================\\n    //                      MANAGEMENT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @notice Create a new script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptCreated} event.\\n     */\\n    function createScript(string calldata name, bytes calldata details)\\n        public\\n        canCreate(name)\\n    {\\n        scripts[name] = Script(false, false, msg.sender, 0, details, new address[](0));\\n        emit ScriptCreated(name, details);\\n    }\\n\\n    /**\\n     * @notice Add a code chunk to the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param chunk - Next sequential code chunk\\n     *\\n     * Emits an {ChunkStored} event.\\n     */\\n    function addChunkToScript(string calldata name, bytes calldata chunk)\\n        public\\n        isFrozen(name)\\n        isScriptOwner(name)\\n    {\\n        (, address pointer) = contentStore.addContent(chunk);\\n        scripts[name].chunks.push(pointer);\\n        scripts[name].size += chunk.length;\\n        emit ChunkStored(name, chunk.length);\\n    }\\n\\n    /**\\n     * @notice Edit the script details\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptDetailsUpdated} event.\\n     */\\n    function updateDetails(string calldata name, bytes calldata details)\\n        public\\n        isFrozen(name)\\n        isScriptOwner(name)\\n    {\\n        scripts[name].details = details;\\n        emit ScriptDetailsUpdated(name, details);\\n    }\\n\\n    /**\\n     * @notice Update the verification status of the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param isVerified - The verification status\\n     *\\n     * Emits an {ScriptVerificationUpdated} event.\\n     */\\n    function updateScriptVerification(string calldata name, bool isVerified)\\n        public\\n        isFrozen(name)\\n        isScriptOwner(name)\\n    {\\n        scripts[name].isVerified = isVerified;\\n        emit ScriptVerificationUpdated(name, isVerified);\\n    }\\n\\n    /**\\n     * @notice Update the frozen status of the script\\n     * @dev [WARNING] Once a script it frozen is can no longer be edited\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     *\\n     * Emits an {ScriptFrozen} event.\\n     */\\n    function freezeScript(string calldata name)\\n        public\\n        isFrozen(name)\\n        isScriptOwner(name)\\n    {\\n        scripts[name].isFrozen = true;\\n        emit ScriptFrozen(name);\\n    }\\n\\n    // =============================================================\\n    //                            GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get the full script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param data - Arbitrary data. Not used by this contract.\\n     * @return script - Full script from merged chunks\\n     */\\n    function getScript(string memory name, bytes memory data)\\n        public\\n        view\\n        returns (bytes memory script)\\n    {\\n        return AddressChunks.mergeChunks(scripts[name].chunks);\\n    }\\n\\n    /**\\n     * @notice Get script's chunk pointer list\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @return pointers - List of pointers\\n     */\\n    function getScriptChunkPointers(string memory name)\\n        public\\n        view\\n        returns (address[] memory pointers)\\n    {\\n        return scripts[name].chunks;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/scripty/utils/AddressChunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AddressChunks\\n * @author @xtremetom\\n * @notice Reads chunk pointers and merges their values\\n */\\nlibrary AddressChunks {\\n    function mergeChunks(address[] memory chunks)\\n        internal\\n        view\\n        returns (bytes memory o_code)\\n    {\\n        unchecked {\\n            assembly {\\n                let len := mload(chunks)\\n                let totalSize := 0x20\\n                let size := 0\\n                o_code := mload(0x40)\\n\\n                // loop through all chunk addresses\\n                // - get address\\n                // - get data size\\n                // - get code and add to o_code\\n                // - update total size\\n                let targetChunk := 0\\n                for {\\n                    let i := 0\\n                } lt(i, len) {\\n                    i := add(i, 1)\\n                } {\\n                    targetChunk := mload(add(chunks, add(0x20, mul(i, 0x20))))\\n                    size := sub(extcodesize(targetChunk), 1)\\n                    extcodecopy(targetChunk, add(o_code, totalSize), 1, size)\\n                    totalSize := add(totalSize, size)\\n                }\\n\\n                // update o_code size\\n                mstore(o_code, sub(totalSize, 0x20))\\n                // store o_code\\n                mstore(0x40, add(o_code, and(add(totalSize, 0x1f), not(0x1f))))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/scripty/interfaces/IContractScript.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557 //\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d //\\n// \u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591 //\\n// \u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591 //\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 //\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 //\\n///////////////////////////////////////////////////////////\\n\\ninterface IContractScript {\\n    // =============================================================\\n    //                            GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get the full script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param data - Arbitrary data to be passed to storage\\n     * @return script - Full script from merged chunks\\n     */\\n    function getScript(string calldata name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory script);\\n}\\n\"\r\n    },\r\n    \"contracts/scripty/dependencies/ethfs/IContentStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IContentStore {\\n    event NewChecksum(bytes32 indexed checksum, uint256 contentSize);\\n\\n    error ChecksumExists(bytes32 checksum);\\n    error ChecksumNotFound(bytes32 checksum);\\n\\n    function pointers(bytes32 checksum) external view returns (address pointer);\\n\\n    function checksumExists(bytes32 checksum) external view returns (bool);\\n\\n    function contentLength(bytes32 checksum)\\n        external\\n        view\\n        returns (uint256 size);\\n\\n    function addPointer(address pointer) external returns (bytes32 checksum);\\n\\n    function addContent(bytes memory content)\\n        external\\n        returns (bytes32 checksum, address pointer);\\n\\n    function getPointer(bytes32 checksum)\\n        external\\n        view\\n        returns (address pointer);\\n}\\n\"\r\n    },\r\n    \"contracts/scripty/interfaces/IScriptyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557 //\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d //\\n// \u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591 //\\n// \u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591 //\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591 //\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591 //\\n///////////////////////////////////////////////////////////\\n\\ninterface IScriptyStorage {\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct Script {\\n        bool isVerified;\\n        bool isFrozen;\\n        address owner;\\n        uint256 size;\\n        bytes details;\\n        address[] chunks;\\n    }\\n\\n    // =============================================================\\n    //                            ERRORS\\n    // =============================================================\\n\\n    /**\\n     * @notice Error for, The Script you are trying to create already exists\\n     */\\n    error ScriptExists();\\n\\n    /**\\n     * @notice Error for, You dont have permissions to perform this action\\n     */\\n    error NotScriptOwner();\\n\\n    /**\\n     * @notice Error for, The Script you are trying to edit is frozen\\n     */\\n    error ScriptIsFrozen(string name);\\n\\n    // =============================================================\\n    //                            EVENTS\\n    // =============================================================\\n\\n    /**\\n     * @notice Event for, Successful freezing of a script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     */\\n    event ScriptFrozen(string indexed name);\\n\\n    /**\\n     * @notice Event for, Successful update of script verification status\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param isVerified - Verification status of the script\\n     */\\n    event ScriptVerificationUpdated(string indexed name, bool isVerified);\\n\\n    /**\\n     * @notice Event for, Successful creation of a script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Custom details of the script\\n     */\\n    event ScriptCreated(string indexed name, bytes details);\\n\\n    /**\\n     * @notice Event for, Successful addition of script chunk\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param size - Bytes size of the chunk\\n     */\\n    event ChunkStored(string indexed name, uint256 size);\\n\\n    /**\\n     * @notice Event for, Successful update of custom details\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Custom details of the script\\n     */\\n    event ScriptDetailsUpdated(string indexed name, bytes details);\\n\\n    // =============================================================\\n    //                      MANAGEMENT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @notice Create a new script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptCreated} event.\\n     */\\n    function createScript(string calldata name, bytes calldata details)\\n        external;\\n\\n    /**\\n     * @notice Add a code chunk to the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param chunk - Next sequential code chunk\\n     *\\n     * Emits an {ChunkStored} event.\\n     */\\n    function addChunkToScript(string calldata name, bytes calldata chunk)\\n        external;\\n\\n    /**\\n     * @notice Edit the script details\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptDetailsUpdated} event.\\n     */\\n    function updateDetails(string calldata name, bytes calldata details)\\n        external;\\n\\n    /**\\n     * @notice Update the verification status of the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param isVerified - The verification status\\n     *\\n     * Emits an {ScriptVerificationUpdated} event.\\n     */\\n    function updateScriptVerification(string calldata name, bool isVerified)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contentStoreAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotScriptOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScriptExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ScriptIsFrozen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"ChunkStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"ScriptCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"ScriptDetailsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ScriptFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"ScriptVerificationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"chunk\",\"type\":\"bytes\"}],\"name\":\"addChunkToScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentStore\",\"outputs\":[{\"internalType\":\"contract IContentStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"createScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"freezeScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getScript\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"script\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getScriptChunkPointers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pointers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"scripts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"updateDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"updateScriptVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScriptyStorage", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000c6806fd75745bb5f5b32ada19963898155f9db91", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}