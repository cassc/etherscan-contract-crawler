{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/Game.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IGame.sol\\\";\\r\\n\\r\\ncontract Game is IGame, Ownable, ReentrancyGuard {\\r\\n    uint256 constant _gameStartTime = 24 hours;\\r\\n    uint256 constant _secondsPerTokenMax = 600;\\r\\n    uint256 constant _periodTimer = 72 hours;\\r\\n    uint256 constant _periodsForAccountReward = 0;\\r\\n    uint256 constant _tokenDecimals = 10 ** 9;\\r\\n    uint256 constant _gameClaimTimer = 48 hours;  \\r\\n\\r\\n    IERC20 immutable _token;\\r\\n    uint256 _gameNumberSnap;\\r\\n    uint256 _gameRewardNumberSnap;\\r\\n    uint256 _gameEthForRewardTotalSnap;\\r\\n    uint256 _gameTokensStackedNumberSnap;\\r\\n    uint256 _secondsPerToken = 20;\\r\\n    uint256 _startTime;\\r\\n    uint256 _gameEndTime;\\r\\n    uint256 _gameTokensStakedTotal;\\r\\n    uint256 _totalStackedTokensSnap;\\r\\n    uint256 _ethTotalForPeriod;\\r\\n    uint256 _periodNumberSnap;\\r\\n    mapping(address => AccountData) _accounts;\\r\\n\\r\\n    constructor(address tokenAddress_) Ownable(msg.sender) {\\r\\n        _token = IERC20(tokenAddress_);\\r\\n    }\\r\\n\\r\\n    modifier whenStarted() {\\r\\n        require(this.isStarted(), \\\"not started\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotGameClaimState() {\\r\\n        require(!_isGameEnd(), \\\"the game is in claim state now\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier noContracts() {\\r\\n        require(msg.sender == tx.origin, \\\"no contracts allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _sendEther(address to, uint256 count) internal nonReentrant {\\r\\n        if (count == 0) return;\\r\\n        payable(to).transfer(count);\\r\\n    }\\r\\n\\r\\n    function start() external onlyOwner {\\r\\n        require(!this.isStarted());\\r\\n        _startTime = block.timestamp;\\r\\n        _gameEndTime = block.timestamp + _gameStartTime;\\r\\n        _gameNumberSnap = 1;\\r\\n    }\\r\\n\\r\\n    function startTime() external view returns (uint256) {\\r\\n        return _startTime;\\r\\n    }\\r\\n\\r\\n    function isGameEnd() external view returns (bool) {\\r\\n        return _isGameEnd();\\r\\n    }\\r\\n\\r\\n    function _isGameEnd() private view returns (bool) {\\r\\n        return\\r\\n            _gameEndTime > 0 &&\\r\\n            block.timestamp >= _gameEndTime &&\\r\\n            block.timestamp < _newGameTime();\\r\\n    }\\r\\n\\r\\n    function newGameTime() external view returns (uint256) {\\r\\n        return _newGameTime();\\r\\n    }\\r\\n\\r\\n    function _newGameTime() private view returns (uint256) {\\r\\n        if (_gameEndTime == 0) return 0;\\r\\n        return _gameEndTime + _gameClaimTimer;\\r\\n    }\\r\\n\\r\\n    function gameClaimTimer() external pure returns (uint256) {\\r\\n        return _gameClaimTimer;\\r\\n    }\\r\\n\\r\\n    function isGameDirty() external view returns (bool) {\\r\\n        return _isGameDirty();\\r\\n    }\\r\\n\\r\\n    function _isGameDirty() private view returns (bool) {\\r\\n        return _gameEndTime > 0 && block.timestamp >= _newGameTime();\\r\\n    }\\r\\n\\r\\n    function isGameEthSnapNumberDirty() external view returns (bool) {\\r\\n        return _isGameEthSnapNumberDirty();\\r\\n    }\\r\\n\\r\\n    function _isGameEthSnapNumberDirty() private view returns (bool) {\\r\\n        if (!_isStarted()) return true;\\r\\n        return (_gameEndTime > 0 && (_gameRewardNumberSnap != _gameNumber()));\\r\\n    }\\r\\n\\r\\n    function _isTokensStakedGameTotalDirty() private view returns (bool) {\\r\\n        return _gameNumber() > _gameTokensStackedNumberSnap;\\r\\n    }\\r\\n\\r\\n    function _tryUpdateGameRewardSnap() private {\\r\\n        if (block.timestamp < _gameEndTime) return;\\r\\n        if (!_isGameEthSnapNumberDirty()) return;\\r\\n        _gameRewardNumberSnap = _gameNumber();\\r\\n        _gameEthForRewardTotalSnap = address(this).balance;\\r\\n    }\\r\\n\\r\\n    function _tryUpdateTokensStakedGameTotal() private {\\r\\n        if (!_isTokensStakedGameTotalDirty()) return;\\r\\n        _gameTokensStackedNumberSnap = _gameNumber();\\r\\n        _gameTokensStakedTotal = 0;\\r\\n    }\\r\\n\\r\\n    function gameEthForRewardTotal() external view returns (uint256) {\\r\\n        return _gameEthForRewardTotal();\\r\\n    }\\r\\n\\r\\n    function _gameEthForRewardTotal() private view returns (uint256) {\\r\\n        if (_isGameEthSnapNumberDirty()) return address(this).balance;\\r\\n        return _gameEthForRewardTotalSnap;\\r\\n    }\\r\\n\\r\\n    function tokensStakedGameTotal() external view returns (uint256) {\\r\\n        return _tokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function _tokensStakedGameTotal() private view returns (uint256) {\\r\\n        if (!_isTokensStakedGameTotalDirty()) return _gameTokensStakedTotal;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _tryRestartGame() private {\\r\\n        if (!_isGameDirty()) return;\\r\\n        _startTime = block.timestamp;\\r\\n        _gameEndTime = block.timestamp + _gameStartTime;\\r\\n        ++_gameNumberSnap;\\r\\n    }\\r\\n\\r\\n    function gameNumber() external view returns (uint256) {\\r\\n        return _gameNumber();\\r\\n    }\\r\\n\\r\\n    function _gameNumber() private view returns (uint256) {\\r\\n        if (!_isStarted()) return 0;\\r\\n        if (!_isGameDirty()) return _gameNumberSnap;\\r\\n        return _gameNumberSnap + 1;\\r\\n    }\\r\\n\\r\\n    function periodNumber() external view returns (uint256) {\\r\\n        return _periodNumber();\\r\\n    }\\r\\n\\r\\n    function _periodNumber() private view returns (uint256) {\\r\\n        if (!_isStarted()) return 0;\\r\\n        return (block.timestamp - _startTime) / _periodTimer;\\r\\n    }\\r\\n\\r\\n    function periodTimeLeft() external view returns (uint256) {\\r\\n        if (!_isStarted()) return _periodTimer;\\r\\n        if (_isGameEnd()) return 0;\\r\\n        return _periodTimer - ((block.timestamp - _startTime) % _periodTimer);\\r\\n    }\\r\\n\\r\\n    function gameTimeLeft() external view returns (uint256) {\\r\\n        if (!_isStarted()) return _gameStartTime;\\r\\n        if (_isGameEnd()) return 0;\\r\\n        return _gameEndTime - block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _isPeriodDirty() private view returns (bool) {\\r\\n        if (!_isStarted()) return false;\\r\\n        if (_isGameEnd()) return false;\\r\\n        return _periodNumberSnap != _periodNumber();\\r\\n    }\\r\\n\\r\\n    function periodTimer() external pure returns (uint256) {\\r\\n        return _periodTimer;\\r\\n    }\\r\\n\\r\\n    function isStarted() external view returns (bool) {\\r\\n        return _isStarted();\\r\\n    }\\r\\n\\r\\n    function _isStarted() private view returns (bool) {\\r\\n        return _startTime != 0;\\r\\n    }\\r\\n\\r\\n    function tokenAddress() external view returns (address) {\\r\\n        return address(_token);\\r\\n    }\\r\\n\\r\\n    function secondsPerToken() external view returns (uint256) {\\r\\n        return _secondsPerToken;\\r\\n    }\\r\\n\\r\\n    function setSecondsPerToken(uint256 newSecondsPerToken) external onlyOwner {\\r\\n        require(newSecondsPerToken <= _secondsPerTokenMax);\\r\\n        _secondsPerToken = newSecondsPerToken;\\r\\n    }\\r\\n\\r\\n    function gameEndTime() external view returns (uint256) {\\r\\n        return _gameEndTime;\\r\\n    }\\r\\n\\r\\n    function periodEndTime() external view returns (uint256) {\\r\\n        if (!_isStarted()) return 0;\\r\\n        if (_isGameEnd()) return 0;\\r\\n        return\\r\\n            _startTime +\\r\\n            _periodTimer *\\r\\n            (1 + (block.timestamp - _startTime) / _periodTimer);\\r\\n    }\\r\\n\\r\\n    function tokensStakedOnPeriod() external view returns (uint256) {\\r\\n        return _tokensStakedOnPeriod();\\r\\n    }\\r\\n\\r\\n    function _tokensStakedOnPeriod() private view returns (uint256) {\\r\\n        if (_isPeriodDirty()) return _tokensStakedGameTotal();\\r\\n        return _totalStackedTokensSnap;\\r\\n    }\\r\\n\\r\\n    function tokenStakedAccount(\\r\\n        address account\\r\\n    ) external view returns (uint256) {\\r\\n        return _tokenStakedAccount(_accounts[account]);\\r\\n    }\\r\\n\\r\\n    function _tokenStakedAccount(\\r\\n        AccountData memory data\\r\\n    ) private view returns (uint256) {\\r\\n        if (data.gameNumber != _gameNumber()) return 0;\\r\\n        return data.count;\\r\\n    }\\r\\n\\r\\n    function ethRewardOnPeriod() external view returns (uint256) {\\r\\n        return _ethRewardOnPeriod();\\r\\n    }\\r\\n\\r\\n    function _ethRewardOnPeriod() private view returns (uint256) {\\r\\n        if (!_isPeriodDirty()) return _ethTotalForPeriod;\\r\\n        return _getEthForPeriod();\\r\\n    }\\r\\n\\r\\n    function ethRewardOnPeriodCalculated() external view returns (uint256) {\\r\\n        return _getEthForPeriod();\\r\\n    }\\r\\n\\r\\n    function _getEthForPeriod() private view returns (uint256) {\\r\\n        uint256 balance = address(this).balance;\\r\\n        if (balance < 10e18) return balance / 2;\\r\\n        if (balance < 20e18) return (balance * 40) / 100;\\r\\n        if (balance < 40e18) return (balance * 30) / 100;\\r\\n        if (balance < 80e18) return (balance * 20) / 100;\\r\\n        return balance / 10;\\r\\n    }\\r\\n\\r\\n    function tryUpdateSnap() public {\\r\\n        _tryRestartGame();\\r\\n        _tryUpdateGameRewardSnap();\\r\\n        _tryUpdatePeriodSnap();\\r\\n        _tryUpdateTokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function _tryUpdatePeriodSnap() private {\\r\\n        if (!_isPeriodDirty()) return;\\r\\n        _ethTotalForPeriod = _getEthForPeriod();\\r\\n        _periodNumberSnap = _periodNumber();\\r\\n        _totalStackedTokensSnap = _tokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function pressButton(uint256 count) external {\\r\\n        _addStake(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function _addStake(\\r\\n        address account,\\r\\n        uint256 count\\r\\n    ) private whenStarted whenNotGameClaimState noContracts {\\r\\n        tryUpdateSnap();\\r\\n        AccountData storage data = _accounts[account];\\r\\n        _claim(account, data);\\r\\n        _token.transferFrom(account, address(_token), count);\\r\\n        data.count = _tokenStakedAccount(data) + count;\\r\\n        data.gameNumber = _gameNumber();\\r\\n        data.period = _periodNumber();\\r\\n        _gameEndTime += (_secondsPerToken * count) / _tokenDecimals;\\r\\n        _gameTokensStakedTotal += count;\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        AccountData storage data = _accounts[msg.sender];\\r\\n        require(_canClaim(data), \\\"can not claim\\\");\\r\\n        _claim(msg.sender, _accounts[msg.sender]);\\r\\n    }\\r\\n\\r\\n    function _claim(\\r\\n        address account,\\r\\n        AccountData storage data\\r\\n    ) private noContracts {\\r\\n        tryUpdateSnap();\\r\\n        if (!_canClaim(data)) return;\\r\\n        uint256 count = _ethForClaimForAccount(data);\\r\\n        data.claimedGame = _gameNumber();\\r\\n        _sendEther(account, count);\\r\\n    }\\r\\n\\r\\n    function claimOnPeriod() external {\\r\\n        AccountData storage data = _accounts[msg.sender];\\r\\n        require(_canClaimOnPeriod(data), \\\"can not claim on period\\\");\\r\\n        _claimOnPeriod(msg.sender, data);\\r\\n    }\\r\\n\\r\\n    function _claimOnPeriod(\\r\\n        address account,\\r\\n        AccountData storage data\\r\\n    ) private noContracts {\\r\\n        if (!_canClaimOnPeriod(data)) return;\\r\\n        uint256 count = _ethForClaimForAccountOnPeriod(data);\\r\\n        data.period = _periodNumber();\\r\\n        _sendEther(account, count);\\r\\n    }\\r\\n\\r\\n    function canClaimOnPeriod(address account) external view returns (bool) {\\r\\n        return _canClaimOnPeriod(_accounts[account]);\\r\\n    }\\r\\n\\r\\n    function _canClaimOnPeriod(\\r\\n        AccountData memory data\\r\\n    ) private view returns (bool) {\\r\\n        if (_isGameEnd()) return false;\\r\\n        if (_tokenStakedAccount(data) == 0) return false;\\r\\n        if (data.period + _periodsForAccountReward >= _periodNumber())\\r\\n            return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function canClaim(address account) external view returns (bool) {\\r\\n        return _canClaim(_accounts[account]);\\r\\n    }\\r\\n\\r\\n    function _canClaim(AccountData memory data) private view returns (bool) {\\r\\n        if (!_isGameEnd()) return false;\\r\\n        if (data.claimedGame == _gameNumber()) return false;\\r\\n        if (_tokenStakedAccount(data) == 0) return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function ethForClaimForAccount(\\r\\n        address account\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForAccount(_accounts[account]);\\r\\n    }\\r\\n\\r\\n    function _ethForClaimForAccount(\\r\\n        AccountData memory data\\r\\n    ) private view returns (uint256) {\\r\\n        if (!_canClaim(data)) return 0;\\r\\n        return _ethForClaimForTokens(_tokenStakedAccount(data));\\r\\n    }\\r\\n\\r\\n    function ethForClaimForAccountPredicted(\\r\\n        address account\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForTokens(_tokenStakedAccount(_accounts[account]));\\r\\n    }\\r\\n\\r\\n    function ethForClaimForTokens(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForTokens(count);\\r\\n    }\\r\\n\\r\\n    function _ethForClaimForTokens(\\r\\n        uint256 count\\r\\n    ) private view returns (uint256) {\\r\\n        return (_gameEthForRewardTotal() * count) / _tokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function ethForClaimForAccountOnPeriod(\\r\\n        address account\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForAccountOnPeriod(_accounts[account]);\\r\\n    }\\r\\n\\r\\n    function _ethForClaimForAccountOnPeriod(\\r\\n        AccountData memory data\\r\\n    ) private view returns (uint256) {\\r\\n        if (!_canClaimOnPeriod(data)) return 0;\\r\\n        return _ethForClaimForTokensOnPeriod(_tokenStakedAccount(data));\\r\\n    }\\r\\n\\r\\n    function ethForClaimForTokensOnPeriod(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForTokensOnPeriod(count);\\r\\n    }\\r\\n\\r\\n    function ethForClaimForTokensOnPeriodPrediction(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256) {\\r\\n        return _ethForClaimForTokensOnPeriodPrediction(count);\\r\\n    }\\r\\n\\r\\n    function _ethForClaimForTokensOnPeriodPrediction(\\r\\n        uint256 count\\r\\n    ) private view returns (uint256) {\\r\\n        return (_getEthForPeriod() * count) / _tokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function ethForClaimForAccountOnPeriodPrediction(\\r\\n        address account\\r\\n    ) external view returns (uint256) {\\r\\n        return\\r\\n            _ethForClaimForTokensOnPeriodPrediction(\\r\\n                _tokenStakedAccount(_accounts[account])\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _ethForClaimForTokensOnPeriod(\\r\\n        uint256 count\\r\\n    ) private view returns (uint256) {\\r\\n        return (_ethRewardOnPeriod() * count) / _tokensStakedGameTotal();\\r\\n    }\\r\\n\\r\\n    function getAccountData(\\r\\n        address account\\r\\n    ) external view returns (AccountData memory) {\\r\\n        return _accounts[account];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/IGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nstruct AccountData {\\r\\n    uint256 count;\\r\\n    uint256 period;\\r\\n    uint256 claimedGame;\\r\\n    uint256 gameNumber;\\r\\n}\\r\\n\\r\\ninterface IGame {\\r\\n    function isStarted() external view returns (bool);\\r\\n\\r\\n    function startTime() external view returns (uint256);\\r\\n\\r\\n    function isGameEnd() external view returns (bool);\\r\\n\\r\\n    /// @dev new game time. only if game end\\r\\n    function newGameTime() external view returns (uint256);\\r\\n\\r\\n    function gameClaimTimer() external view returns (uint256);\\r\\n\\r\\n    function gameNumber() external view returns (uint256);\\r\\n\\r\\n    function periodNumber() external view returns (uint256);\\r\\n\\r\\n    function periodTimer() external view returns (uint256);\\r\\n\\r\\n    function tokenAddress() external view returns (address);\\r\\n\\r\\n    function secondsPerToken() external view returns (uint256);\\r\\n\\r\\n    function gameEndTime() external view returns (uint256);\\r\\n\\r\\n    function periodEndTime() external view returns (uint256);\\r\\n\\r\\n    function tokensStakedGameTotal() external view returns (uint256);\\r\\n\\r\\n    function tokensStakedOnPeriod() external view returns (uint256);\\r\\n\\r\\n    function tokenStakedAccount(\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethRewardOnPeriod() external view returns (uint256);\\r\\n\\r\\n    function ethRewardOnPeriodCalculated() external view returns (uint256);\\r\\n\\r\\n    function pressButton(uint256 count) external;\\r\\n\\r\\n    function canClaim(address account) external view returns (bool);\\r\\n\\r\\n    function canClaimOnPeriod(address account) external view returns (bool);\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function claimOnPeriod() external;\\r\\n\\r\\n    function ethForClaimForAccount(\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForAccountPredicted(\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForTokens(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForAccountOnPeriod(\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForTokensOnPeriod(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForTokensOnPeriodPrediction(\\r\\n        uint256 count\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function ethForClaimForAccountOnPeriodPrediction(\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function gameTimeLeft() external view returns (uint256);\\r\\n\\r\\n    function periodTimeLeft() external view returns (uint256);\\r\\n\\r\\n    function getAccountData(\\r\\n        address account\\r\\n    ) external view returns (AccountData memory);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaimOnPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOnPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethForClaimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethForClaimForAccountOnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethForClaimForAccountOnPeriodPrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethForClaimForAccountPredicted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ethForClaimForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ethForClaimForTokensOnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ethForClaimForTokensOnPeriodPrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRewardOnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRewardOnPeriodCalculated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameClaimTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEthForRewardTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct AccountData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameDirty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameEthSnapNumberDirty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGameTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"pressButton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSecondsPerToken\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenStakedAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStakedGameTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStakedOnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryUpdateSnap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Game", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000080dd9b0d9cea9be301bf1959cc4fed7d72dc2d39", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}