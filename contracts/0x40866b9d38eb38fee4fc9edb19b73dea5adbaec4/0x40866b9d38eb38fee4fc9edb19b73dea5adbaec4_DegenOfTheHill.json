{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-09-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n $$$$$$\\   $$$$$$\\        $$$$$$$\\  $$$$$$$$\\  $$$$$$\\  $$$$$$$$\\ $$\\   $$\\        $$$$$$\\  $$$$$$$$\\       $$$$$$$$\\ $$\\   $$\\ $$$$$$$$\\       $$\\   $$\\ $$$$$$\\ $$\\       $$\\       \r\n$$  __$$\\ $$  __$$\\       $$  __$$\\ $$  _____|$$  __$$\\ $$  _____|$$$\\  $$ |      $$  __$$\\ $$  _____|      \\__$$  __|$$ |  $$ |$$  _____|      $$ |  $$ |\\_$$  _|$$ |      $$ |      \r\n$$ /  $$ |$$ /  \\__|      $$ |  $$ |$$ |      $$ /  \\__|$$ |      $$$$\\ $$ |      $$ /  $$ |$$ |               $$ |   $$ |  $$ |$$ |            $$ |  $$ |  $$ |  $$ |      $$ |      \r\n$$ |  $$ |$$ |$$$$\\       $$ |  $$ |$$$$$\\    $$ |$$$$\\ $$$$$\\    $$ $$\\$$ |      $$ |  $$ |$$$$$\\             $$ |   $$$$$$$$ |$$$$$\\          $$$$$$$$ |  $$ |  $$ |      $$ |      \r\n$$ |  $$ |$$ |\\_$$ |      $$ |  $$ |$$  __|   $$ |\\_$$ |$$  __|   $$ \\$$$$ |      $$ |  $$ |$$  __|            $$ |   $$  __$$ |$$  __|         $$  __$$ |  $$ |  $$ |      $$ |      \r\n$$ |  $$ |$$ |  $$ |      $$ |  $$ |$$ |      $$ |  $$ |$$ |      $$ |\\$$$ |      $$ |  $$ |$$ |               $$ |   $$ |  $$ |$$ |            $$ |  $$ |  $$ |  $$ |      $$ |      \r\n $$$$$$  |\\$$$$$$  |      $$$$$$$  |$$$$$$$$\\ \\$$$$$$  |$$$$$$$$\\ $$ | \\$$ |       $$$$$$  |$$ |               $$ |   $$ |  $$ |$$$$$$$$\\       $$ |  $$ |$$$$$$\\ $$$$$$$$\\ $$$$$$$$\\ \r\n \\______/  \\______/       \\_______/ \\________| \\______/ \\________|\\__|  \\__|       \\______/ \\__|               \\__|   \\__|  \\__|\\________|      \\__|  \\__|\\______|\\________|\\________|\r\n                                                                                                                                                                                      */                                                                                                                                                                                   \r\n\r\n/* The Original King of the Hill dApp by DapperLad.\r\nMore Fun dApps and experiences at: https://dapperlad.xyz */\r\n\r\npragma solidity >=0.8.0;\r\n\r\ncontract DegenOfTheHill {\r\n    address payable public kingOfTheHill;\r\n    uint256 public totalBalance;\r\n    uint256 public endTime;\r\n    uint256 public roundNumber;\r\n    uint256 public constant COUNTDOWN_TIME = 10 minutes;\r\n    uint256 public TICKET_PRICE = 0.01 ether;\r\n    address payable public owner;\r\n    bool public isTimerActive;\r\n\r\n    mapping(address => bool) private participants;\r\n    uint256 public participantsCount;\r\n\r\n    event Bought(address indexed buyer, uint256 amount);\r\n    event Distributed(uint256 kingPrize, uint256 ownerPrize);\r\n    event TimerStarted();\r\n    event TimerEnded();\r\n    event Swept(uint256 amount);\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n        roundNumber = 1;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    function startTimer() public onlyOwner {\r\n        require(!isTimerActive, \"Timer is already started.\");\r\n        isTimerActive = true;\r\n        endTime = block.timestamp + COUNTDOWN_TIME;\r\n        emit TimerStarted();\r\n    }\r\n\r\n    function endTimer() public onlyOwner {\r\n        isTimerActive = false;\r\n        emit TimerEnded();\r\n    }\r\n\r\n    function setTicketPrice(uint256 _newPrice) public onlyOwner {\r\n        TICKET_PRICE = _newPrice;\r\n    }\r\n\r\n    function buy() public payable {\r\n        require(isTimerActive, \"The timer has not started.\");\r\n        require(block.timestamp <= endTime, \"Timer has ended.\");\r\n        require(msg.value == TICKET_PRICE, \"Incorrect amount sent.\");\r\n\r\n        if (!participants[msg.sender]) {\r\n            participants[msg.sender] = true;\r\n            participantsCount++;\r\n        }\r\n\r\n        kingOfTheHill = payable(msg.sender);\r\n        totalBalance += msg.value;\r\n        endTime = block.timestamp + COUNTDOWN_TIME;\r\n\r\n        emit Bought(msg.sender, msg.value);\r\n    }\r\n\r\n    function distribute() public onlyOwner {\r\n        require(!isTimerActive || getRemainingTime() == 0, \"Timer has not ended or is still active.\");\r\n\r\n        uint256 kingPrize = (totalBalance * 70) / 100;\r\n        uint256 ownerPrize = totalBalance - kingPrize;\r\n        kingOfTheHill.transfer(kingPrize);\r\n        owner.transfer(ownerPrize);\r\n\r\n        emit Distributed(kingPrize, ownerPrize);\r\n\r\n        reinitialize();\r\n    }\r\n\r\n    function sweep() public onlyOwner { // to use as an emergency if distribute() doesn't work\r\n        uint256 amount = totalBalance;\r\n        owner.transfer(amount);\r\n        emit Swept(amount);\r\n\r\n        reinitialize();\r\n    }\r\n\r\n    function getRemainingTime() public view returns (uint256) {\r\n        if (block.timestamp > endTime || !isTimerActive) {\r\n            return 0;\r\n        } else {\r\n            return endTime - block.timestamp;\r\n        }\r\n    }\r\n\r\n    function reinitialize() internal {\r\n        kingOfTheHill = payable(address(0));\r\n        totalBalance = 0;\r\n        endTime = 0;\r\n        isTimerActive = false;\r\n        roundNumber++;\r\n    }\r\n\r\n    function loadPot() public payable onlyOwner {\r\n        require(msg.value > 0, \"Must send a positive amount.\");\r\n        totalBalance += msg.value;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kingPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerPrize\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TimerEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TimerStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COUNTDOWN_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kingOfTheHill\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loadPot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DegenOfTheHill", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e2b6502b945b33f9a49776b62ba3dd650524d5aa8f654c94b3dfe4bd17aa5e78"}