{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\staking.sol\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.19;\r\n\r\n\r\ncontract stakingManager is Ownable {\r\n\r\n    IERC20 public stakeToken; // Token to be staked and rewarded\r\n\r\n    uint256 public tokensStaked; // Total tokens staked\r\n\r\n    uint256 private lastRewardedBlock; // Last block number the user had their rewards calculated\r\n    uint256 private accumulatedRewardsPerShare; // Accumulated rewards per share times REWARDS_PRECISION\r\n    uint256 public rewardTokensPerBlock; // Number of reward tokens minted per block\r\n    uint256 private constant REWARDS_PRECISION = 1e12; // A big number to perform mul and div operations\r\n    uint256 public feeAmt = 25;\r\n\r\n    uint256 public lockedTime; //To lock the tokens in contract for definite time.\r\n    bool public harvestLock; //To lock the harvest/claim.\r\n    bool public initialized;\r\n    uint public endBlock; //At this block,the rewards generation will be stopped.\r\n\r\n    // Staking user for a pool\r\n    struct PoolStaker {\r\n        uint256 amount; // The tokens quantity the user has staked.\r\n        uint256 stakedTime; //the time at tokens staked\r\n        uint256 lastUpdatedBlock;\r\n        uint256 Harvestedrewards; // The reward tokens quantity the user  harvested\r\n        uint256 rewardDebt; // The amount relative to accumulatedRewardsPerShare the user can't get as reward\r\n    }\r\n\r\n    //  staker address => PoolStaker\r\n    mapping(address => PoolStaker) public poolStakers;\r\n\r\n    mapping(address => uint) public userLockedRewards;\r\n    uint256 public claimStart;\r\n\r\n    address marketing;\r\n\r\n    // Events\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event HarvestRewards(address indexed user, uint256 amount);\r\n    event Compound(address indexed user, uint256 amount);\r\n\r\n    constructor(address _marketing) public Ownable() {\r\n        rewardTokensPerBlock = 45500000000000000000;\r\n        lastRewardedBlock = block.number;\r\n        marketing = _marketing;\r\n        lockedTime = 86400 * 3;\r\n        endBlock = block.number + 439560;\r\n        claimStart = block.number + 20;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit tokens to the pool\r\n     */\r\n    function deposit(uint256 _amount) external isInitialized {\r\n        require(block.number < endBlock, \"staking has been ended\");\r\n        require(_amount > 0, \"Deposit amount can't be zero\");\r\n\r\n        PoolStaker storage staker = poolStakers[msg.sender];\r\n\r\n        // Update pool stakers\r\n        harvestRewards();\r\n\r\n        // Update current staker\r\n        staker.amount += _amount;\r\n        staker.rewardDebt =\r\n            (staker.amount * accumulatedRewardsPerShare) /\r\n            REWARDS_PRECISION;\r\n        staker.stakedTime = block.timestamp;\r\n        staker.lastUpdatedBlock = block.number;\r\n\r\n        // Update pool\r\n        tokensStaked += _amount;\r\n\r\n        // Deposit tokens\r\n        emit Deposit(msg.sender, _amount);\r\n        stakeToken.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function compound() external isInitialized {\r\n        require(block.number < endBlock, \"staking has been ended\");\r\n        PoolStaker storage staker = poolStakers[msg.sender];\r\n        require(\r\n            staker.stakedTime + lockedTime <= block.timestamp &&\r\n                claimStart + lockedTime <= block.timestamp,\r\n            \"you are not allowed to withdraw before locked Time\"\r\n        );\r\n        updatePoolRewards();\r\n\r\n        // Update pool stakers\r\n        uint256 rewardsToHarvest = ((staker.amount * accumulatedRewardsPerShare) / REWARDS_PRECISION) - staker.rewardDebt;\r\n        if (rewardsToHarvest == 0) {\r\n            return;\r\n        }\r\n\r\n\r\n        require(!harvestLock, \"Cannot compound if locked\");\r\n            if (userLockedRewards[msg.sender] > 0) {\r\n                rewardsToHarvest += userLockedRewards[msg.sender];\r\n                userLockedRewards[msg.sender] = 0;\r\n            }\r\n\r\n            staker.amount += rewardsToHarvest;\r\n            tokensStaked += rewardsToHarvest;\r\n            staker.Harvestedrewards += rewardsToHarvest;\r\n            staker.rewardDebt = (staker.amount * accumulatedRewardsPerShare) / REWARDS_PRECISION;\r\n            emit Compound(msg.sender, rewardsToHarvest);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all tokens from existing pool\r\n     */\r\n    function withdraw() external isInitialized {\r\n        PoolStaker memory staker = poolStakers[msg.sender];\r\n        uint256 amount = staker.amount;\r\n        require(\r\n            staker.stakedTime + lockedTime <= block.timestamp &&\r\n                claimStart + lockedTime <= block.timestamp,\r\n            \"you are not allowed to withdraw before locked Time\"\r\n        );\r\n        require(amount > 0, \"Withdraw amount can't be zero\");\r\n\r\n        // Pay rewards\r\n        harvestRewards();\r\n\r\n        //delete staker\r\n        delete poolStakers[msg.sender];\r\n\r\n        // Update pool\r\n        tokensStaked -= amount;\r\n\r\n        uint256 fee = amount * feeAmt / 1000;\r\n\r\n        // Withdraw tokens\r\n        emit Withdraw(msg.sender, amount - fee);\r\n        stakeToken.transfer(marketing, fee);\r\n        stakeToken.transfer(msg.sender, amount - fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Harvest user rewards\r\n     */\r\n    function harvestRewards() public isInitialized {\r\n        _harvestRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Harvest user rewards\r\n     */\r\n    function _harvestRewards(address _user) private {\r\n        updatePoolRewards();\r\n        PoolStaker storage staker = poolStakers[_user];\r\n        uint256 rewardsToHarvest = ((staker.amount *\r\n            accumulatedRewardsPerShare) / REWARDS_PRECISION) -\r\n            staker.rewardDebt;\r\n        if (rewardsToHarvest == 0) {\r\n            return;\r\n        }\r\n\r\n        staker.Harvestedrewards += rewardsToHarvest;\r\n        staker.rewardDebt =\r\n            (staker.amount * accumulatedRewardsPerShare) /\r\n            REWARDS_PRECISION;\r\n        if (!harvestLock) {\r\n            if (userLockedRewards[_user] > 0) {\r\n                rewardsToHarvest += userLockedRewards[_user];\r\n                userLockedRewards[_user] = 0;\r\n            }\r\n            uint256 fee = rewardsToHarvest * feeAmt / 1000;\r\n            emit HarvestRewards(_user, rewardsToHarvest - fee);\r\n            stakeToken.transfer(marketing, fee);\r\n            stakeToken.transfer(_user, rewardsToHarvest - fee);\r\n        } else {\r\n            userLockedRewards[_user] += rewardsToHarvest;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Update pool's accumulatedRewardsPerShare and lastRewardedBlock\r\n     */\r\n    function updatePoolRewards() private {\r\n        if (tokensStaked == 0) {\r\n            lastRewardedBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 blocksSinceLastReward = block.number > endBlock\r\n            ? endBlock - lastRewardedBlock\r\n            : block.number - lastRewardedBlock;\r\n        uint256 rewards = blocksSinceLastReward * rewardTokensPerBlock;\r\n        accumulatedRewardsPerShare =\r\n            accumulatedRewardsPerShare +\r\n            ((rewards * REWARDS_PRECISION) / tokensStaked);\r\n        lastRewardedBlock = block.number > endBlock ? endBlock : block.number;\r\n    }\r\n\r\n    /**\r\n     *@dev To get the number of rewards that user can get\r\n     */\r\n    function getRewards(address _user) public view returns (uint) {\r\n        if (tokensStaked == 0) {\r\n            return 0;\r\n        }\r\n        uint256 blocksSinceLastReward = block.number > endBlock\r\n            ? endBlock - lastRewardedBlock\r\n            : block.number - lastRewardedBlock;\r\n        uint256 rewards = blocksSinceLastReward * rewardTokensPerBlock;\r\n        uint256 accCalc = accumulatedRewardsPerShare +\r\n            ((rewards * REWARDS_PRECISION) / tokensStaked);\r\n        PoolStaker memory staker = poolStakers[_user];\r\n        return\r\n            ((staker.amount * accCalc) / REWARDS_PRECISION) -\r\n            staker.rewardDebt +\r\n            userLockedRewards[_user];\r\n    }\r\n\r\n    function setHarvestLock(bool _harvestlock) external onlyOwner {\r\n        harvestLock = _harvestlock;\r\n    }\r\n\r\n    function setStakeToken(address _stakeToken) external onlyOwner {\r\n        require(!initialized, \"Cannot change stake token\");\r\n        require(IERC20(_stakeToken).balanceOf(address(this)) > 0, \"Insufficient funds\");\r\n        initialized = true;\r\n        stakeToken = IERC20(_stakeToken);\r\n    }\r\n\r\n    function updateRewardsPerBlock(uint256 newRewards) external onlyOwner {\r\n        require(newRewards > 0, \"cannot set rewards to zero\");\r\n        rewardTokensPerBlock = newRewards;\r\n    }\r\n\r\n    function setLockedTime(uint _time) external onlyOwner {\r\n        lockedTime = _time;\r\n    }\r\n\r\n    function setEndBlock(uint _endBlock) external onlyOwner {\r\n        require(_endBlock > block.number, \"cannot end in the past\");\r\n        endBlock = _endBlock;\r\n    }\r\n\r\n    function setClaimStart(uint _claimStart) external onlyOwner {\r\n        claimStart = _claimStart;\r\n    }\r\n\r\n    function changeFee(uint256 newFee) external onlyOwner {\r\n        require(newFee <= 100, \"cannot charge more tax\");\r\n        feeAmt = newFee;\r\n    }\r\n\r\n    modifier isInitialized() {\r\n        require(initialized, \"ERROR\");\r\n        _;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Harvestedrewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStart\",\"type\":\"uint256\"}],\"name\":\"setClaimStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_harvestlock\",\"type\":\"bool\"}],\"name\":\"setHarvestLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLockedTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewards\",\"type\":\"uint256\"}],\"name\":\"updateRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "stakingManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000046c4f863060af73556513ce6fa564d5a9457587f", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ebdd9fc46ff6e26e473d17463740f120385c3052982792bb79263754368de410"}