{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RatiosV2.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: BUSL-1.1\\n\\nimport {IRatios} from \\\"interfaces/IRatios.sol\\\";\\nimport {Errors} from \\\"utils/Errors.sol\\\";\\nimport {Owner} from \\\"utils/Owner.sol\\\";\\n\\n/**\\n * @title Warlord WAR minting ratios contract V2\\n * @author Paladin\\n * @notice Calculate the amounts of WAR to mint or burn\\n */\\ncontract WarRatiosV2 is IRatios, Owner {\\n  /**\\n   * @notice 1e18 scale\\n   */\\n  uint256 private constant UNIT = 1e18;\\n\\n  /**\\n   * @notice Amount of WAR to mint per token for each listed token\\n   */\\n  mapping(address => uint256) public warPerToken;\\n\\n  /**\\n   * @notice Returns the ratio for a given token\\n   * @param token Address of the token\\n   */\\n  function getTokenRatio(address token) external view returns (uint256) {\\n    return warPerToken[token];\\n  }\\n\\n  /**\\n   * @notice Adds a new token and sets the ratio of WAR to mint per token\\n   * @param token Address of the token\\n   * @param warRatio Amount of WAR minted per token\\n   */\\n  function addToken(address token, uint256 warRatio) external onlyOwner {\\n    if (token == address(0)) revert Errors.ZeroAddress();\\n    if (warRatio == 0) revert Errors.ZeroValue();\\n    if (warPerToken[token] != 0) revert Errors.RatioAlreadySet();\\n\\n    warPerToken[token] = warRatio;\\n  }\\n\\n  /**\\n   * @notice Returns the amount of WAR to mint for a given amount of token\\n   * @param token Address of the token\\n   * @param amount Amount of token received\\n   * @return mintAmount (uint256) : Amount to mint\\n   */\\n  function getMintAmount(address token, uint256 amount) external view returns (uint256 mintAmount) {\\n    if (token == address(0)) revert Errors.ZeroAddress();\\n    if (amount == 0) revert Errors.ZeroValue();\\n\\n    mintAmount = amount * warPerToken[token] / UNIT;\\n  }\\n\\n  /**\\n   * @notice Returns the amount of token to redeem for a given amount of WAR burned\\n   * @param token Address of the token\\n   * @param burnAmount Amount of WAR to burn\\n   * @return redeemAmount (uint256) : Redeem amount\\n   */\\n  function getBurnAmount(address token, uint256 burnAmount) external view returns (uint256 redeemAmount) {\\n    if (token == address(0)) revert Errors.ZeroAddress();\\n    if (burnAmount == 0) revert Errors.ZeroValue();\\n\\n    redeemAmount = burnAmount * UNIT / warPerToken[token];\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRatios.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.16;\\n\\ninterface IRatios {\\n  function getTokenRatio(address token) external view returns (uint256);\\n  function addToken(address token, uint256 maxSupply) external;\\n  function getMintAmount(address token, uint256 amount) external view returns (uint256 mintAmount);\\n  function getBurnAmount(address token, uint256 amount) external view returns (uint256 burnAmount);\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.16;\\n//SPDX-License-Identifier: Unlicensed\\n\\nlibrary Errors {\\n  // Argument validation\\n  error ZeroAddress();\\n  error ZeroValue();\\n  error DifferentSizeArrays(uint256 size1, uint256 size2);\\n  error EmptyArray();\\n  error AlreadySet();\\n  error SameAddress();\\n  error InvalidParameter();\\n\\n  // Ownership\\n  error CannotBeOwner();\\n  error CallerNotPendingOwner();\\n  error CallerNotAllowed();\\n\\n  // Token\\n  error AllowanceUnderflow();\\n\\n  // Controller\\n  error ListedLocker();\\n  error ListedFarmer();\\n  error InvalidFeeRatio();\\n  error HarvestNotAllowed();\\n\\n  // Locker\\n  error NoWarLocker(); // _locker[token] == 0x0\\n  error LockerShutdown();\\n  error MismatchingLocker(address expected, address actual);\\n\\n  // Minter\\n  error MintAmountBiggerThanSupply();\\n\\n  // Redeemer\\n  error NotListedLocker();\\n  error InvalidIndex();\\n  error CannotRedeemYet();\\n  error AlreadyRedeemed();\\n  error InvalidWeightSum();\\n\\n  // Staker\\n  error AlreadyListedDepositor();\\n  error NotListedDepositor();\\n  error MismatchingFarmer();\\n\\n  // MintRatio\\n  error ZeroMintAmount();\\n  error SupplyAlreadySet();\\n  error RatioAlreadySet();\\n\\n  // Harvestable\\n  error NotRewardToken();\\n\\n  // IFarmer\\n  error IncorrectToken();\\n  error UnstakingMoreThanBalance();\\n\\n  // Maths\\n  error NumberExceed128Bits();\\n\\n  // AuraBalFarmer\\n  error SlippageTooHigh();\\n\\n  // Admin\\n  error RecoverForbidden();\\n\\n  // AuraLocker\\n  error DelegationRequiresLock();\\n}\\n\"\r\n    },\r\n    \"src/utils/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\n\\n/**\\n * @title Extend OZ Ownable contract\\n */\\n/// @author Paladin\\n\\ncontract Owner is Ownable {\\n  address public pendingOwner;\\n\\n  event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n\\n  error CannotBeOwner();\\n  error CallerNotPendingOwner();\\n  error OwnerAddressZero();\\n\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    if (newOwner == address(0)) revert OwnerAddressZero();\\n    if (newOwner == owner()) revert CannotBeOwner();\\n    address oldPendingOwner = pendingOwner;\\n\\n    pendingOwner = newOwner;\\n\\n    emit NewPendingOwner(oldPendingOwner, newOwner);\\n  }\\n\\n  function acceptOwnership() public virtual {\\n    if (msg.sender != pendingOwner) revert CallerNotPendingOwner();\\n    address newOwner = pendingOwner;\\n    _transferOwnership(pendingOwner);\\n    pendingOwner = address(0);\\n\\n    emit NewPendingOwner(newOwner, address(0));\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"interfaces/=src/interfaces/\",\r\n      \"mocks/=test/mocks/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solgen/=lib/solidity-generators/src/\",\r\n      \"solidity-generators/=lib/solidity-generators/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"utils/=src/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RatioAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"warRatio\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"warPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WarRatiosV2", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}