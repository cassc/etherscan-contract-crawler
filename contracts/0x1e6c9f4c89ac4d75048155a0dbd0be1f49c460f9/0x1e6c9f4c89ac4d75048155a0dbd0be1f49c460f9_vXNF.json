{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function gasCollector() external returns (address);\\n}\\n\"\r\n    },\r\n    \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\"\r\n    },\r\n    \"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n    error InvalidAddressString();\\n\\n    function toAddress(string memory addressString) internal pure returns (address) {\\n        bytes memory stringBytes = bytes(addressString);\\n        uint160 addressNumber = 0;\\n        uint8 stringByte;\\n\\n        if (stringBytes.length != 42 || stringBytes[0] != '0' || stringBytes[1] != 'x') revert InvalidAddressString();\\n\\n        for (uint256 i = 2; i < 42; ++i) {\\n            stringByte = uint8(stringBytes[i]);\\n\\n            if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n            else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n            else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n            else revert InvalidAddressString();\\n\\n            addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n        }\\n        return address(addressNumber);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address addr) internal pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(addr);\\n        uint256 length = addressBytes.length;\\n        bytes memory characters = '0123456789abcdef';\\n        bytes memory stringBytes = new bytes(2 + addressBytes.length * 2);\\n\\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n\\n        for (uint256 i; i < length; ++i) {\\n            stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n            stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n        }\\n        return string(stringBytes);\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurnableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IBurnableToken Interface\\r\\n *\\r\\n * @notice This interface defines a basic burn function for ERC20-like tokens.\\r\\n * Implementing contracts should fire a Transfer event with the burn address (0x0)\\r\\n * as the recipient when a burn occurs, in accordance with the ERC20 standard.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IBurnableToken {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Destroys `amount` tokens from `user`, reducing the total supply.\\r\\n     * @dev This operation is irreversible. Implementations should emit an ERC20 Transfer event\\r\\n     * with to set to the zero address. Implementations should also enforce necessary conditions\\r\\n     * such as allowance and balance checks.\\r\\n     * @param user The account to burn tokens from.\\r\\n     * @param amount The amount of tokens to be burned.\\r\\n     */\\r\\n    function burn(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBurnRedeemable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IBurnRedeemable Interface\\r\\n *\\r\\n * @notice This interface defines the methods related to redeemable tokens that can be burned.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IBurnRedeemable {\\r\\n\\r\\n    /// -------------------------------------- EVENTS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a user redeems tokens.\\r\\n     * @dev This event emits the details about the redemption process.\\r\\n     * @param user The address of the user who performed the redemption.\\r\\n     * @param xenContract The address of the XEN contract involved in the redemption.\\r\\n     * @param tokenContract The address of the token contract involved in the redemption.\\r\\n     * @param xenAmount The amount of XEN redeemed by the user.\\r\\n     * @param tokenAmount The amount of tokens redeemed by the user.\\r\\n     */\\r\\n    event Redeemed(\\r\\n        address indexed user,\\r\\n        address indexed xenContract,\\r\\n        address indexed tokenContract,\\r\\n        uint256 xenAmount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Called when a token is burned by a user.\\r\\n     * @dev Handles any logic related to token burning for redeemable tokens.\\r\\n     * Implementations should be cautious of reentrancy attacks.\\r\\n     * @param user The address of the user who burned the token.\\r\\n     * @param amount The amount of the token burned.\\r\\n     */\\r\\n    function onTokenBurned(\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IvXNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {ILayerZeroReceiver} from \\\"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport {IWormholeReceiver} from  \\\"./IWormholeReceiver.sol\\\";\\r\\nimport {IBurnRedeemable} from  \\\"./IBurnRedeemable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title vXNF Contract\\r\\n *\\r\\n * @notice This interface outlines functions for the vXNF token, an ERC20 token with bridging and burning capabilities.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IvXNF is\\r\\n    IBurnRedeemable,\\r\\n    IWormholeReceiver,\\r\\n    ILayerZeroReceiver\\r\\n{\\r\\n    /// -------------------------------------- ERRORS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when only the team is allowed to call a function.\\r\\n     */\\r\\n    error OnlyTeamAllowed();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when XNF address is already set.\\r\\n     */\\r\\n    error XNFIsAlreadySet();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the fee provided is insufficient.\\r\\n     */\\r\\n    error InsufficientFee();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the caller is not verified.\\r\\n     */\\r\\n    error NotVerifiedCaller();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when only the relayer is allowed to call a function.\\r\\n     */\\r\\n    error OnlyRelayerAllowed();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the address length is invalid or less than the expected length.\\r\\n     */\\r\\n    error InvalidAddressLength();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the source address is invalid.\\r\\n     */\\r\\n    error InvalidSourceAddress();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the hex string length is not even.\\r\\n     */\\r\\n    error HexStringLengthNotEven();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the provided Ether is not enough to cover the estimated gas fee.\\r\\n     */\\r\\n    error InsufficientFeeForWormhole();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the Wormhole source address is invalid.\\r\\n     */\\r\\n    error InvalidWormholeSourceAddress();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the LayerZero source address is invalid.\\r\\n     */\\r\\n    error InvalidLayerZeroSourceAddress();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when a Wormhole message has already been processed.\\r\\n     */\\r\\n    error WormholeMessageAlreadyProcessed();\\r\\n\\r\\n    /// ------------------------------------- ENUMS ----------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Enum to represent the different bridges available.\\r\\n     * @dev LayerZero = 1, Axelar = 2, Wormhole = 3.\\r\\n     */\\r\\n    enum BridgeId {\\r\\n        LayerZero,\\r\\n        Axelar,\\r\\n        Wormhole\\r\\n    }\\r\\n\\r\\n    /// -------------------------------------- EVENTS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when vXNF tokens are bridged to another chain.\\r\\n     * @param from Address on the source chain that initiated the bridge.\\r\\n     * @param burnedAmount Amount of vXNF tokens burned for the bridge.\\r\\n     * @param bridgeId Identifier for the bridge used\\r\\n     * @param outgoingChainId ID of the destination chain.\\r\\n     * @param to Address on the destination chain to receive the tokens.\\r\\n     */\\r\\n    event vXNFBridgeTransfer(\\r\\n        address indexed from,\\r\\n        uint256 burnedAmount,\\r\\n        BridgeId indexed bridgeId,\\r\\n        bytes outgoingChainId,\\r\\n        address indexed to\\r\\n    );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when vXNF tokens are received from a bridge.\\r\\n     * @param to Address that receives the minted vXNF tokens.\\r\\n     * @param mintAmount Amount of vXNF tokens minted.\\r\\n     * @param bridgeId Identifier for the bridge used\\r\\n     * @param incomingChainId ID of the source chain.\\r\\n     * @param from Address on the source chain that initiated the bridge.\\r\\n     */\\r\\n    event vXNFBridgeReceive(\\r\\n        address indexed to,\\r\\n        uint256 mintAmount,\\r\\n        BridgeId indexed bridgeId,\\r\\n        bytes incomingChainId,\\r\\n        address indexed from\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the XNF contract address.\\r\\n     * @dev This function is called by the team to set XNF contract address.\\r\\n     * Function can be called only once.\\r\\n     * @param _XNF The XNF contract address.\\r\\n     * @param _ratio The ratio between vXNF and XNF used for minting and burning.\\r\\n     */\\r\\n    function setXNFAndRatio(address _XNF, uint256 _ratio) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and mints an equivalent amount of vXNF tokens.\\r\\n     * @param _amount Amount of XNF tokens to burn.\\r\\n     */\\r\\n    function burnXNF(uint256 _amount) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the LayerZero network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the LayerZero network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param dstChainId The Chain ID of the destination chain on the LayerZero network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     * @param zroPaymentAddress Address of the ZRO token holder who would pay for the transaction.\\r\\n     * @param adapterParams Parameters for custom functionality, e.g., receiving airdropped native gas from the relayer on the destination.\\r\\n     */\\r\\n    function burnAndBridgeViaLayerZero(\\r\\n        uint256 _amount,\\r\\n        uint16 dstChainId,\\r\\n        address to,\\r\\n        address payable feeRefundAddress,\\r\\n        address zroPaymentAddress,\\r\\n        bytes calldata adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the Axelar network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the Axelar network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param dstChainId The target chain where tokens should be bridged to on the Axelar network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     */\\r\\n    function burnAndBridgeViaAxelar(\\r\\n        uint256 _amount,\\r\\n        string calldata dstChainId,\\r\\n        address to,\\r\\n        address payable feeRefundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the Wormhole network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the Wormhole network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param targetChain The ID of the target chain on the Wormhole network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     * @param gasLimit The gas limit for the transaction on the destination chain.\\r\\n     */\\r\\n    function burnAndBridgeViaWormhole(\\r\\n        uint256 _amount,\\r\\n        uint16 targetChain,\\r\\n        address to,\\r\\n        address payable feeRefundAddress,\\r\\n        uint256 gasLimit\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a specific amount of vXNF tokens from a user's address.\\r\\n     * @dev Allows an external entity to burn tokens from a user's address, provided they have the necessary allowance.\\r\\n     * @param _user The address from which the vXNF tokens will be burned.\\r\\n     * @param _amount The amount of vXNF tokens to burn.\\r\\n     */\\r\\n    function burn(\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via LayerZero.\\r\\n     * @dev Encodes destination and contract addresses, checks Ether sent against estimated gas,\\r\\n     * then triggers the LayerZero endpoint to bridge tokens.\\r\\n     * @param _dstChainId ID of the target chain on LayerZero.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     * @param _zroPaymentAddress Address of the ZRO token holder covering transaction fees.\\r\\n     * @param _adapterParams Additional parameters for custom functionalities.\\r\\n     */\\r\\n    function bridgeViaLayerZero(\\r\\n        uint16 _dstChainId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via Axelar.\\r\\n     * @dev Encodes sender's address and amount, then triggers the Axelar gateway to bridge tokens.\\r\\n     * @param destinationChain ID of the target chain on Axelar.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     */\\r\\n    function bridgeViaAxelar(\\r\\n        string calldata destinationChain,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via Wormhole.\\r\\n     * @dev Estimates gas for the Wormhole bridge, checks Ether sent, then triggers the Wormhole relayer.\\r\\n     * @param targetChain ID of the target chain on Wormhole.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     * @param _gasLimit Gas limit for the transaction on the destination chain.\\r\\n     */\\r\\n    function bridgeViaWormhole(\\r\\n        uint16 targetChain,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress,\\r\\n        uint256 _gasLimit\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Estimates the bridging fee on LayerZero.\\r\\n     * @dev Uses the `estimateFees` method of the endpoint contract.\\r\\n     * @param _dstChainId ID of the destination chain on LayerZero.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param _payInZRO If false, user pays the fee in native token.\\r\\n     * @param _adapterParam Parameters for adapter services.\\r\\n     * @return nativeFee Estimated fee in native tokens.\\r\\n     */\\r\\n    function estimateGasForLayerZero(\\r\\n        uint16 _dstChainId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        bool _payInZRO,\\r\\n        bytes calldata _adapterParam\\r\\n    ) external view returns (uint256 nativeFee);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Estimates the bridging fee on Wormhole.\\r\\n     * @dev Uses the `quoteEVMDeliveryPrice` method of the wormholeRelayer contract.\\r\\n     * @param targetChain ID of the destination chain on Wormhole.\\r\\n     * @param _gasLimit Gas limit for the transaction on the destination chain.\\r\\n     * @return cost Estimated fee for the operation.\\r\\n     */\\r\\n    function estimateGasForWormhole(\\r\\n        uint16 targetChain,\\r\\n        uint256 _gasLimit\\r\\n    ) external view returns (uint256 cost);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWormholeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IWormholeReceiver Interface\\r\\n *\\r\\n * @notice Interface for a contract which can receive Wormhole messages.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IWormholeReceiver {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the WormholeRelayer contract to deliver a Wormhole message to this contract.\\r\\n     *\\r\\n     * @dev This function should be implemented to include access controls to ensure that only\\r\\n     *      the Wormhole Relayer contract can invoke it.\\r\\n     *\\r\\n     *      Implementations should:\\r\\n     *      - Maintain a mapping of received `deliveryHash`s to prevent duplicate message delivery.\\r\\n     *      - Verify the authenticity of `sourceChain` and `sourceAddress` to prevent unauthorized or malicious calls.\\r\\n     *\\r\\n     * @param payload The arbitrary data included in the message by the sender.\\r\\n     * @param additionalVaas Additional VAAs that were requested to be included in this delivery.\\r\\n     *                       Guaranteed to be in the same order as specified by the sender.\\r\\n     * @param sourceAddress The Wormhole-formatted address of the message sender on the originating chain.\\r\\n     * @param sourceChain The Wormhole Chain ID of the originating blockchain.\\r\\n     * @param deliveryHash The VAA hash of the deliveryVAA, used to prevent duplicate delivery.\\r\\n     *\\r\\n     * Warning: The provided VAAs are NOT verified by the Wormhole core contract prior to this call.\\r\\n     *          Always invoke `parseAndVerify()` on the Wormhole core contract to validate the VAAs before trusting them.\\r\\n     */\\r\\n    function receiveWormholeMessages(\\r\\n        bytes memory payload,\\r\\n        bytes[] memory additionalVaas,\\r\\n        bytes32 sourceAddress,\\r\\n        uint16 sourceChain,\\r\\n        bytes32 deliveryHash\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWormholeRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayer Interface\\r\\n *\\r\\n * @notice This project allows developers to build cross-chain applications powered by Wormhole without needing to\\r\\n * write and run their own relaying infrastructure. We implement the IWormholeRelayer interface that allows users to\\r\\n * request a delivery provider to relay a payload (and/or additional VAAs) to a chain and address of their choice.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\n\\r\\n/// ------------------------------------- STRUCTURE ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice VaaKey identifies a wormhole message.\\r\\n * @custom:member chainId Wormhole chain ID of the chain where this VAA was emitted from.\\r\\n * @custom:member emitterAddress Address of the emitter of the VAA, in Wormhole bytes32 format.\\r\\n * @custom:member sequence Sequence number of the VAA.\\r\\n */\\r\\nstruct VaaKey {\\r\\n    uint16 chainId;\\r\\n    bytes32 emitterAddress;\\r\\n    uint64 sequence;\\r\\n}\\r\\n\\r\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| \\\\\\\\\\\\\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayerBase\\r\\n * @notice Interface for basic Wormhole Relayer operations.\\r\\n */\\r\\ninterface IWormholeRelayerBase {\\r\\n\\r\\n    /// -------------------------------------- EVENT ---------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a Send operation is executed.\\r\\n     * @param sequence The sequence of the send event.\\r\\n     * @param deliveryQuote The delivery quote for the send operation.\\r\\n     * @param paymentForExtraReceiverValue The payment value for the additional receiver.\\r\\n     */\\r\\n    event SendEvent(\\r\\n        uint64 indexed sequence,\\r\\n        uint256 deliveryQuote,\\r\\n        uint256 paymentForExtraReceiverValue\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Fetches the registered Wormhole Relayer contract for a given chain ID.\\r\\n     * @param chainId The chain ID to fetch the relayer contract for.\\r\\n     * @return The address of the registered Wormhole Relayer contract for the given chain ID.\\r\\n     */\\r\\n    function getRegisteredWormholeRelayerContract(uint16 chainId)\\r\\n        external\\r\\n        view returns (bytes32);\\r\\n}\\r\\n\\r\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| \\\\\\\\\\\\\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayerSend\\r\\n * @notice The interface to request deliveries.\\r\\n */\\r\\ninterface IWormholeRelayerSend is IWormholeRelayerBase {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface.\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function\\r\\n     * with `refundChain` and `refundAddress` as parameters.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format.\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver).\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`.\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units).\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions.\\r\\n     */\\r\\n    function sendPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider.\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface.\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format.\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver).\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`.\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units).\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider.\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format.\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to.\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions.\\r\\n     */\\r\\n    function sendPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function\\r\\n     * with `refundChain` and `refundAddress` as parameters\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function send(\\r\\n        uint16 targetChain,\\r\\n        bytes32 targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        uint16 refundChain,\\r\\n        bytes32 refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     */\\r\\n    function forwardPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     */\\r\\n    function forwardVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     */\\r\\n    function forwardToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteDeliveryPrice(targetChain_f, receiverValue_f, encodedExecutionParameters_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     */\\r\\n    function forward(\\r\\n        uint16 targetChain,\\r\\n        bytes32 targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        uint16 refundChain,\\r\\n        bytes32 refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a previously published delivery instruction to be redelivered\\r\\n     * (e.g. with a different delivery provider)\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)\\r\\n     *\\r\\n     *  @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     *\\r\\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\\r\\n     *        previously published delivery instructions\\r\\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\\r\\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param newGasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\\r\\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return sequence sequence number of published VAA containing redelivery instructions\\r\\n     *\\r\\n     * @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     */\\r\\n    function resendToEvm(\\r\\n        VaaKey memory deliveryVaaKey,\\r\\n        uint16 targetChain,\\r\\n        uint256 newReceiverValue,\\r\\n        uint256 newGasLimit,\\r\\n        address newDeliveryProviderAddress\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a previously published delivery instruction to be redelivered\\r\\n     *\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)\\r\\n     *\\r\\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\\r\\n     *        previously published delivery instructions\\r\\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\\r\\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param newEncodedExecutionParameters new encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return sequence sequence number of published VAA containing redelivery instructions\\r\\n     *\\r\\n     *  @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - (For EVM_V1) newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     */\\r\\n    function resend(\\r\\n        VaaKey memory deliveryVaaKey,\\r\\n        uint16 targetChain,\\r\\n        uint256 newReceiverValue,\\r\\n        bytes memory newEncodedExecutionParameters,\\r\\n        address newDeliveryProviderAddress\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint64 sequence);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using the default delivery provider\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *         if a refundAddress is specified\\r\\n     */\\r\\n    function quoteEVMDeliveryPrice(\\r\\n        uint16 targetChain,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *         if a refundAddress is specified\\r\\n     */\\r\\n    function quoteEVMDeliveryPrice(\\r\\n        uint16 targetChain,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        address deliveryProviderAddress\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n        uint256 nativePriceQuote,\\r\\n        uint256 targetChainRefundPerGasUnused\\r\\n        );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return encodedExecutionInfo encoded information on how the delivery will be executed\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`\\r\\n     *             (which is the amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *              if a refundAddress is specified)\\r\\n     */\\r\\n    function quoteDeliveryPrice(\\r\\n        uint16 targetChain,\\r\\n        uint256 receiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        address deliveryProviderAddress\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n        uint256 nativePriceQuote,\\r\\n        bytes memory encodedExecutionInfo\\r\\n        );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the (extra) amount of target chain currency that `targetAddress`\\r\\n     * will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param currentChainAmount The value that `paymentForExtraReceiverValue` will be set to\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return targetChainAmount The amount such that if `targetAddress` will be called with `msg.value` equal to\\r\\n     *         receiverValue + targetChainAmount\\r\\n     */\\r\\n    function quoteNativeForChain(\\r\\n        uint16 targetChain,\\r\\n        uint256 currentChainAmount,\\r\\n        address deliveryProviderAddress\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 targetChainAmount);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the current default delivery provider\\r\\n     * @return deliveryProvider The address of (the default delivery provider)'s contract on this source\\r\\n     *   chain. This must be a contract that implements IDeliveryProvider.\\r\\n     */\\r\\n    function getDefaultDeliveryProvider()\\r\\n        external\\r\\n        view\\r\\n        returns (address deliveryProvider);\\r\\n}\\r\\n\\r\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| \\\\\\\\\\\\\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayerDelivery\\r\\n * @notice The interface to execute deliveries. Only relevant for Delivery Providers\\r\\n */\\r\\ninterface IWormholeRelayerDelivery is IWormholeRelayerBase {\\r\\n\\r\\n    /// -------------------------------------- ENUMS ---------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Represents the possible statuses of a delivery.\\r\\n     */\\r\\n    enum DeliveryStatus {\\r\\n        SUCCESS,\\r\\n        RECEIVER_FAILURE,\\r\\n        FORWARD_REQUEST_FAILURE,\\r\\n        FORWARD_REQUEST_SUCCESS\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Represents the possible statuses of a refund after a delivery attempt.\\r\\n     */\\r\\n    enum RefundStatus {\\r\\n        REFUND_SENT,\\r\\n        REFUND_FAIL,\\r\\n        CROSS_CHAIN_REFUND_SENT,\\r\\n        CROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED,\\r\\n        CROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH\\r\\n    }\\r\\n\\r\\n    /// -------------------------------------- EVENT ---------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @custom:member recipientContract - The target contract address\\r\\n     * @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\\r\\n     *     ChainID format)\\r\\n     * @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\\r\\n     *     corresponding to this delivery request\\r\\n     * @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\\r\\n     *     request\\r\\n     * @custom:member gasUsed - The amount of gas that was used to call your target contract\\r\\n     * @custom:member status:\\r\\n     *   - RECEIVER_FAILURE, if the target contract reverts\\r\\n     *   - SUCCESS, if the target contract doesn't revert and no forwards were requested\\r\\n     *   - FORWARD_REQUEST_FAILURE, if the target contract doesn't revert, forwards were requested,\\r\\n     *       but provided/leftover funds were not sufficient to cover them all\\r\\n     *   - FORWARD_REQUEST_SUCCESS, if the target contract doesn't revert and all forwards are covered\\r\\n     * @custom:member additionalStatusInfo:\\r\\n     *   - If status is SUCCESS or FORWARD_REQUEST_SUCCESS, then this is empty.\\r\\n     *   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\\r\\n     *       return data (i.e. potentially truncated revert reason information).\\r\\n     *   - If status is FORWARD_REQUEST_FAILURE, this is also the revert data - the reason the forward failed.\\r\\n     *     This will be either an encoded Cancelled, DeliveryProviderReverted, or DeliveryProviderPaymentFailed error\\r\\n     * @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\\r\\n     *     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\\r\\n     *     where a cross chain refund is necessary\\r\\n     * @custom:member overridesInfo:\\r\\n     *   - If not an override: empty bytes array\\r\\n     *   - Otherwise: An encoded `DeliveryOverride`\\r\\n     */\\r\\n    event Delivery(\\r\\n        address indexed recipientContract,\\r\\n        uint16 indexed sourceChain,\\r\\n        uint64 indexed sequence,\\r\\n        bytes32 deliveryVaaHash,\\r\\n        DeliveryStatus status,\\r\\n        uint256 gasUsed,\\r\\n        RefundStatus refundStatus,\\r\\n        bytes additionalStatusInfo,\\r\\n        bytes overridesInfo\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice The delivery provider calls `deliver` to relay messages as described by one delivery instruction\\r\\n     *\\r\\n     * The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\\r\\n     * as well as the signed wormhole message with the delivery instructions (the delivery VAA)\\r\\n     *\\r\\n     * The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\\r\\n     * - the delivery VAA has a valid signature\\r\\n     * - the delivery VAA's emitter is one of these WormholeRelayer contracts\\r\\n     * - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\\r\\n     * - the instruction's target chain is this chain\\r\\n     * - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\\r\\n     *\\r\\n     * @param encodedVMs - An array of signed wormhole messages (all from the same source chain\\r\\n     *     transaction)\\r\\n     * @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\\r\\n     *     contract with payload being the encoded delivery instruction container\\r\\n     * @param relayerRefundAddress - The address to which any refunds to the delivery provider\\r\\n     *     should be sent\\r\\n     * @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\\r\\n     *     an encoded DeliveryOverride struct\\r\\n     */\\r\\n    function deliver(\\r\\n        bytes[] memory encodedVMs,\\r\\n        bytes memory encodedDeliveryVAA,\\r\\n        address payable relayerRefundAddress,\\r\\n        bytes memory deliveryOverrides\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| \\\\\\\\\\\\\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayer\\r\\n * @notice Interface for the primary Wormhole Relayer which aggregates the functionalities of the Delivery and Send interfaces.\\r\\n */\\r\\ninterface IWormholeRelayer is\\r\\n    IWormholeRelayerDelivery,\\r\\n    IWormholeRelayerSend {}\\r\\n\\r\\n    // Bound chosen by the following formula: `memoryWord * 4 + selectorSize`.\\r\\n    // This means that an error identifier plus four fixed size arguments should be available to developers.\\r\\n    // In the case of a `require` revert with error message, this should provide 2 memory word's worth of data.\\r\\n    uint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to conversion and validation of EVM addresses.\\r\\n     */\\r\\n    error NotAnEvmAddress(bytes32);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to unauthorized access or usage.\\r\\n     */\\r\\n    error RequesterNotWormholeRelayer();\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors for when there are issues with the overrides provided.\\r\\n     */\\r\\n    error InvalidOverrideGasLimit();\\r\\n    error InvalidOverrideReceiverValue();\\r\\n    error InvalidOverrideRefundPerGasUnused();\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to the state and progress of the WormholeRelayer's operations.\\r\\n     */\\r\\n    error NoDeliveryInProgress();\\r\\n    error ReentrantDelivery(address msgSender, address lockedBy);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to funding and refunds.\\r\\n     */\\r\\n    error InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to the VAA (signed wormhole message) validation.\\r\\n     */\\r\\n    error VaaKeysDoNotMatchVaas(uint8 index);\\r\\n    error VaaKeysLengthDoesNotMatchVaasLength(uint256 keys, uint256 vaas);\\r\\n    error InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to payment values and delivery prices.\\r\\n     */\\r\\n    error RequestedGasLimitTooLow();\\r\\n    error DeliveryProviderCannotReceivePayment();\\r\\n    error InvalidMsgValue(uint256 msgValue, uint256 totalFee);\\r\\n    error DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors for when there are issues with forwarding or delivery.\\r\\n     */\\r\\n    error InvalidVaaKeyType(uint8 parsed);\\r\\n    error InvalidDeliveryVaa(string reason);\\r\\n    error InvalidPayloadId(uint8 parsed, uint8 expected);\\r\\n    error InvalidPayloadLength(uint256 received, uint256 expected);\\r\\n    error ForwardRequestFromWrongAddress(address msgSender, address deliveryTarget);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * Errors related to relaying instructions and target chains.\\r\\n     */\\r\\n    error TargetChainIsNotThisChain(uint16 targetChain);\\r\\n    error ForwardNotSufficientlyFunded(uint256 amountOfFunds, uint256 amountOfFundsNeeded);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\"\r\n    },\r\n    \"contracts/vXNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {StringToAddress, AddressToString} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/utils/AddressString.sol\\\";\\r\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\r\\nimport {AxelarExecutable} from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\r\\nimport {ILayerZeroEndpoint} from \\\"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {IWormholeRelayer} from \\\"./interfaces/IWormholeRelayer.sol\\\";\\r\\nimport {IBurnRedeemable} from \\\"./interfaces/IBurnRedeemable.sol\\\";\\r\\nimport {IBurnableToken} from \\\"./interfaces/IBurnableToken.sol\\\";\\r\\nimport {IvXNF} from \\\"./interfaces/IvXNF.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title vXNF Contract\\r\\n *\\r\\n * @notice Represents the vXNF token, an ERC20 token with bridging and burning capabilities.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ncontract vXNF is\\r\\n    IvXNF,\\r\\n    ERC20,\\r\\n    ERC165,\\r\\n    AxelarExecutable\\r\\n{\\r\\n\\r\\n    /// ------------------------------------- LIBRARYS ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Utility library to convert a string representation into an address.\\r\\n     */\\r\\n    using StringToAddress for string;\\r\\n\\r\\n    /**\\r\\n     * @notice Utility library to convert an address into its string representation.\\r\\n     */\\r\\n    using AddressToString for address;\\r\\n\\r\\n    /// ------------------------------------ VARIABLES ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Immutable team address used for setting XNF address.\\r\\n     */\\r\\n    address public team;\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the vXNF token in a string format.\\r\\n     */\\r\\n    string public vXNFAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Ratio used for token conversions.\\r\\n     */\\r\\n    uint256 public RATIO;\\r\\n\\r\\n    /// ------------------------------------ INTERFACES ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Interface to interact with address of the XNF token contract.\\r\\n     */\\r\\n    IBurnableToken public XNF;\\r\\n\\r\\n    /**\\r\\n     * @notice Interface to interact with LayerZero endpoint for bridging operations.\\r\\n     */\\r\\n    ILayerZeroEndpoint public immutable ENDPOINT;\\r\\n\\r\\n    /**\\r\\n     * @notice Interface to interact with Axelar gas service for estimating transaction fees.\\r\\n     */\\r\\n    IAxelarGasService public immutable GAS_SERVICE;\\r\\n\\r\\n    /**\\r\\n     * @notice Interface to interact with Wormhole relayer for bridging operations.\\r\\n     */\\r\\n    IWormholeRelayer public immutable WORMHOLE_RELAYER;\\r\\n\\r\\n    /// ------------------------------------- MAPPING --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping to prevent replay attacks by storing processed delivery hashes.\\r\\n     */\\r\\n    mapping (bytes32 => bool) public seenDeliveryVaaHashes;\\r\\n\\r\\n    /// ------------------------------------- MODIFIER -------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to protect against replay attacks.\\r\\n     * @dev Ensures that a given delivery hash from the Wormhole relayer has not been processed before.\\r\\n     * If it hasn't, the hash is marked as seen to prevent future replay attacks.\\r\\n     * @param deliveryHash The delivery hash received from the Wormhole relayer.\\r\\n     */\\r\\n    modifier replayProtect(bytes32 deliveryHash) {\\r\\n        if (seenDeliveryVaaHashes[deliveryHash]) {\\r\\n            revert WormholeMessageAlreadyProcessed();\\r\\n        }\\r\\n        seenDeliveryVaaHashes[deliveryHash] = true;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------ CONSTRUCTOR ------------------------------------ \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the vXNF token and initialises its dependencies.\\r\\n     * @dev Sets up the vXNF token with references to other contracts like Axelar gateway, gas service,\\r\\n     * LayerZero endpoint, and Wormhole relayer. Also computes the string representation of the vXNF contract address.\\r\\n     * @param _ratio The ratio between vXNF and XNF used for minting and burning.\\r\\n     * @param _XNF The address of the XNF token.\\r\\n     * @param _gateway Address of the Axelar gateway contract.\\r\\n     * @param _gasService Address of the Axelar gas service contract.\\r\\n     * @param _endpoint Address of the LayerZero endpoint contract.\\r\\n     * @param _wormholeRelayer Address of the Wormhole relayer contract.\\r\\n     * @param _teamAddress Address of the teams wallet.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _ratio,\\r\\n        address _XNF,\\r\\n        address _gateway,\\r\\n        address _gasService,\\r\\n        address _endpoint,\\r\\n        address _wormholeRelayer,\\r\\n        address _teamAddress\\r\\n    ) payable ERC20(\\\"vXNF\\\", \\\"vXNF\\\") AxelarExecutable(_gateway) {\\r\\n        XNF = IBurnableToken(_XNF);\\r\\n        GAS_SERVICE = IAxelarGasService(_gasService);\\r\\n        ENDPOINT = ILayerZeroEndpoint(_endpoint);\\r\\n        WORMHOLE_RELAYER = IWormholeRelayer(_wormholeRelayer);\\r\\n        vXNFAddress = address(this).toString();\\r\\n        RATIO = _ratio;\\r\\n        team = _teamAddress;\\r\\n    }\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice A hook triggered post token burning. It currently has no implementation but can be overridden.\\r\\n     * @dev Complies with the IBurnRedeemable interface. Extend this function for additional logic after token burning.\\r\\n     */\\r\\n    function onTokenBurned(\\r\\n        address,\\r\\n        uint256\\r\\n    ) external override {}\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a specified quantity of XNF tokens and then mints an equivalent quantity of vXNF tokens to the burner.\\r\\n     * @dev This function burns XNF tokens and mints vXNF in accordance to the defined RATIO.\\r\\n     * @param _amount The volume of XNF tokens to burn.\\r\\n     */\\r\\n    function burnXNF(uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        XNF.burn(msg.sender, _amount);\\r\\n        uint256 amt;\\r\\n        unchecked {\\r\\n            amt = _amount / RATIO;\\r\\n        }\\r\\n        _mint(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the LayerZero network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the LayerZero network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param dstChainId The Chain ID of the destination chain on the LayerZero network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     * @param zroPaymentAddress Address of the ZRO token holder who would pay for the transaction.\\r\\n     * @param adapterParams Parameters for custom functionality, e.g., receiving airdropped native gas from the relayer on the destination.\\r\\n     */\\r\\n    function burnAndBridgeViaLayerZero(\\r\\n        uint256 _amount,\\r\\n        uint16 dstChainId,\\r\\n        address to,\\r\\n        address payable feeRefundAddress,\\r\\n        address zroPaymentAddress,\\r\\n        bytes calldata adapterParams\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        XNF.burn(msg.sender, _amount);\\r\\n        uint256 amt;\\r\\n        unchecked {\\r\\n            amt = _amount / RATIO;\\r\\n        }\\r\\n        _mint(msg.sender, amt);\\r\\n        bridgeViaLayerZero(dstChainId, msg.sender, to, amt, feeRefundAddress, zroPaymentAddress, adapterParams);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the Axelar network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the Axelar network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param dstChainId The target chain where tokens should be bridged to on the Axelar network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     */\\r\\n    function burnAndBridgeViaAxelar(\\r\\n        uint256 _amount,\\r\\n        string calldata dstChainId,\\r\\n        address to,\\r\\n        address payable feeRefundAddress\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        XNF.burn(msg.sender, _amount);\\r\\n        uint256 amt;\\r\\n        unchecked {\\r\\n            amt = _amount / RATIO;\\r\\n        }\\r\\n        _mint(msg.sender, amt);\\r\\n        bridgeViaAxelar(dstChainId, msg.sender, to, amt, feeRefundAddress);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the specified amount of XNF tokens and bridges them via the Wormhole network.\\r\\n     * @dev Burns the XNF tokens from the sender's address and then initiates a bridge operation using the Wormhole network.\\r\\n     * @param _amount The amount of XNF tokens to burn and bridge.\\r\\n     * @param targetChain The ID of the target chain on the Wormhole network.\\r\\n     * @param to The recipient address on the destination chain.\\r\\n     * @param feeRefundAddress Address to refund any excess fees.\\r\\n     * @param gasLimit The gas limit for the transaction on the destination chain.\\r\\n     */\\r\\n    function burnAndBridgeViaWormhole(\\r\\n        uint256 _amount,\\r\\n        uint16 targetChain,\\r\\n        address to,\\r\\n        address payable feeRefundAddress,\\r\\n        uint256 gasLimit\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        XNF.burn(msg.sender, _amount);\\r\\n        uint256 amt;\\r\\n        unchecked {\\r\\n            amt = _amount / RATIO;\\r\\n        }\\r\\n        _mint(msg.sender, amt);\\r\\n        bridgeViaWormhole(targetChain, msg.sender, to, amt, feeRefundAddress, gasLimit);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a specific amount of vXNF tokens from a user's address.\\r\\n     * @dev Allows an external entity to burn tokens from a user's address, provided they have the necessary allowance.\\r\\n     * @param _user The address from which the vXNF tokens will be burned.\\r\\n     * @param _amount The amount of vXNF tokens to burn.\\r\\n     */\\r\\n    function burn(\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (_user != msg.sender)\\r\\n            _spendAllowance(_user, msg.sender, _amount);\\r\\n        _burn(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Receives vXNF tokens via the LayerZero bridge.\\r\\n     * @dev Handles the receipt of vXNF tokens that have been bridged from another chain using the LayerZero network.\\r\\n     * @param _srcChainId The Chain ID of the source chain on the LayerZero network.\\r\\n     * @param _srcAddress The address on the source chain from which the vXNF tokens were sent.\\r\\n     * @param _payload The encoded data containing details about the bridging operation, including the recipient address and amount.\\r\\n     */\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64,\\r\\n        bytes memory _payload\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (address(ENDPOINT) != msg.sender) {\\r\\n            revert NotVerifiedCaller();\\r\\n        }\\r\\n        if (address(this) != address(uint160(bytes20(_srcAddress)))) {\\r\\n            revert InvalidLayerZeroSourceAddress();\\r\\n        }\\r\\n        (address from, address to, uint256 _amount) = abi.decode(\\r\\n            _payload,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        _mint(to, _amount);\\r\\n        emit vXNFBridgeReceive(to, _amount, BridgeId.LayerZero, abi.encode(_srcChainId), from);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Receives tokens via the Wormhole bridge.\\r\\n     * @dev This function is called by the Wormhole relayer to mint tokens after they've been bridged from another chain.\\r\\n     * Only the Wormhole relayer can call this function. The function decodes the user address and amount from the payload,\\r\\n     * and then mints the respective amount of tokens to the user's address.\\r\\n     * @param payload The encoded data containing user address and amount.\\r\\n     * @param sourceAddress The address of the caller on the source chain in bytes32.\\r\\n     * @param _srcChainId The chain ID of the source chain from which the tokens are being bridged.\\r\\n     * @param deliveryHash The hash which is used to verify relay calls.\\r\\n     */\\r\\n    function receiveWormholeMessages(\\r\\n        bytes memory payload,\\r\\n        bytes[] memory,\\r\\n        bytes32 sourceAddress,\\r\\n        uint16 _srcChainId,\\r\\n        bytes32 deliveryHash\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        replayProtect(deliveryHash)\\r\\n    {\\r\\n        if (msg.sender != address(WORMHOLE_RELAYER)) {\\r\\n            revert OnlyRelayerAllowed();\\r\\n        }\\r\\n        if (address(this) != address(uint160(uint256(sourceAddress)))) {\\r\\n            revert InvalidWormholeSourceAddress();\\r\\n        }\\r\\n        (address from, address to, uint256 _amount) = abi.decode(\\r\\n            payload,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        _mint(to, _amount);\\r\\n        emit vXNFBridgeReceive(to, _amount, BridgeId.Wormhole, abi.encode(_srcChainId), from);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the XNF contract address.\\r\\n     * @dev This function is called by the team to set XNF contract address.\\r\\n     * Function can be called only once.\\r\\n     * @param _XNF The XNF contract address.\\r\\n     * @param _ratio The ratio between vXNF and XNF used for minting and burning.\\r\\n     */\\r\\n    function setXNFAndRatio(address _XNF, uint256 _ratio)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (msg.sender != team) {\\r\\n            revert OnlyTeamAllowed();\\r\\n        }\\r\\n        if (address(XNF) != address(0)) {\\r\\n            revert XNFIsAlreadySet();\\r\\n        }\\r\\n        XNF = IBurnableToken(_XNF);\\r\\n        RATIO = _ratio;\\r\\n    }\\r\\n\\r\\n    /// ---------------------------------- PUBLIC FUNCTIONS --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given interface ID is supported by the contract.\\r\\n     * @dev Implements the IERC165 standard for interface detection.\\r\\n     * @param interfaceId The ID of the interface in question.\\r\\n     * @return bool `true` if the interface is supported, otherwise `false`.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return interfaceId == type(IBurnRedeemable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via LayerZero.\\r\\n     * @dev Encodes destination and contract addresses, checks Ether sent against estimated gas,\\r\\n     * then triggers the LayerZero endpoint to bridge tokens.\\r\\n     * @param _dstChainId ID of the target chain on LayerZero.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     * @param _zroPaymentAddress Address of the ZRO token holder covering transaction fees.\\r\\n     * @param _adapterParams Additional parameters for custom functionalities.\\r\\n     */\\r\\n    function bridgeViaLayerZero(\\r\\n        uint16 _dstChainId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    )\\r\\n        public\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        if (_zroPaymentAddress == address(0)) {\\r\\n            if (msg.value < estimateGasForLayerZero(_dstChainId, from, to, _amount, false, _adapterParams)) {\\r\\n                revert InsufficientFee();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (msg.value < estimateGasForLayerZero(_dstChainId, from, to, _amount, true, _adapterParams)) {\\r\\n                revert InsufficientFee();\\r\\n            }\\r\\n        }\\r\\n        if (msg.sender != from)\\r\\n            _spendAllowance(from, msg.sender, _amount);\\r\\n            _burn(from, _amount);\\r\\n        ENDPOINT.send{value: msg.value} (\\r\\n            _dstChainId,\\r\\n            abi.encodePacked(address(this),address(this)),\\r\\n            abi.encode(from, to, _amount),\\r\\n            feeRefundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams\\r\\n        );\\r\\n        emit vXNFBridgeTransfer(from, _amount, BridgeId.LayerZero, abi.encode(_dstChainId), to);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via Axelar.\\r\\n     * @dev Encodes sender's address and amount, then triggers the Axelar gateway to bridge tokens.\\r\\n     * @param destinationChain ID of the target chain on Axelar.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     */\\r\\n    function bridgeViaAxelar(\\r\\n        string calldata destinationChain,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress\\r\\n    )\\r\\n        public\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        bytes memory payload = abi.encode(from, to, _amount);\\r\\n        string memory _vXNFAddress = vXNFAddress;\\r\\n        if (msg.value != 0) {\\r\\n            GAS_SERVICE.payNativeGasForContractCall{value: msg.value} (\\r\\n                address(this),\\r\\n                destinationChain,\\r\\n                _vXNFAddress,\\r\\n                payload,\\r\\n                feeRefundAddress\\r\\n            );\\r\\n        }\\r\\n        if (from != msg.sender)\\r\\n            _spendAllowance(from, msg.sender, _amount);\\r\\n            _burn(from, _amount);\\r\\n        gateway.callContract(destinationChain, _vXNFAddress, payload);\\r\\n        emit vXNFBridgeTransfer(from, _amount, BridgeId.Axelar, abi.encode(destinationChain), to);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Bridges tokens to another chain via Wormhole.\\r\\n     * @dev Estimates gas for the Wormhole bridge, checks Ether sent, then triggers the Wormhole relayer.\\r\\n     * @param targetChain ID of the target chain on Wormhole.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param feeRefundAddress Address for any excess fee refunds.\\r\\n     * @param _gasLimit Gas limit for the transaction on the destination chain.\\r\\n     */\\r\\n    function bridgeViaWormhole(\\r\\n        uint16 targetChain,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        address payable feeRefundAddress,\\r\\n        uint256 _gasLimit\\r\\n    )\\r\\n        public\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        uint256 cost = estimateGasForWormhole(targetChain, _gasLimit);\\r\\n        if (msg.value < cost) {\\r\\n            revert InsufficientFeeForWormhole();\\r\\n        }\\r\\n        if (msg.sender != from)\\r\\n            _spendAllowance(from, msg.sender, _amount);\\r\\n            _burn(from, _amount);\\r\\n        WORMHOLE_RELAYER.sendPayloadToEvm{value: msg.value} (\\r\\n            targetChain,\\r\\n            address(this),\\r\\n            abi.encode(from, to, _amount),\\r\\n            0,\\r\\n            _gasLimit,\\r\\n            targetChain,\\r\\n            feeRefundAddress\\r\\n        );\\r\\n        emit vXNFBridgeTransfer(from, _amount, BridgeId.Wormhole, abi.encode(targetChain), to);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Estimates the bridging fee on LayerZero.\\r\\n     * @dev Uses the `estimateFees` method of the endpoint contract.\\r\\n     * @param _dstChainId ID of the destination chain on LayerZero.\\r\\n     * @param from Sender's address on the source chain.\\r\\n     * @param to Recipient's address on the destination chain.\\r\\n     * @param _amount Amount of tokens to bridge.\\r\\n     * @param _payInZRO If false, user pays the fee in native token.\\r\\n     * @param _adapterParam Parameters for adapter services.\\r\\n     * @return nativeFee Estimated fee in native tokens.\\r\\n     */\\r\\n    function estimateGasForLayerZero(\\r\\n        uint16 _dstChainId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        bool _payInZRO,\\r\\n        bytes calldata _adapterParam\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 nativeFee)\\r\\n    {\\r\\n        (nativeFee, ) = ENDPOINT.estimateFees(\\r\\n            _dstChainId,\\r\\n            address(this),\\r\\n            abi.encode(from, to, _amount),\\r\\n            _payInZRO,\\r\\n            _adapterParam\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Estimates the bridging fee on Wormhole.\\r\\n     * @dev Uses the `quoteEVMDeliveryPrice` method of the wormholeRelayer contract.\\r\\n     * @param targetChain ID of the destination chain on Wormhole.\\r\\n     * @param _gasLimit Gas limit for the transaction on the destination chain.\\r\\n     * @return cost Estimated fee for the operation.\\r\\n     */\\r\\n    function estimateGasForWormhole(\\r\\n        uint16 targetChain,\\r\\n        uint256 _gasLimit\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 cost)\\r\\n    {\\r\\n        (cost, ) = WORMHOLE_RELAYER.quoteEVMDeliveryPrice(\\r\\n            targetChain,\\r\\n            0,\\r\\n            _gasLimit\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// --------------------------------- INTERNAL FUNCTION --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a mint operation based on data from another chain.\\r\\n     * @dev The function decodes the `payload` to extract the user's address and the amount,\\r\\n     * then proceeds to mint tokens to the user's account. This is an internal function and can't\\r\\n     * be called externally.\\r\\n     * @param sourceChain The name or identifier of the source chain from which the tokens are being bridged.\\r\\n     * @param sourceAddress The originating address from the source chain.\\r\\n     * @param payload The encoded data payload containing user information and the amount to mint.\\r\\n     */\\r\\n    function _execute(\\r\\n        string calldata sourceChain,\\r\\n        string calldata sourceAddress,\\r\\n        bytes calldata payload\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        if (sourceAddress.toAddress() != address(this)) {\\r\\n            revert InvalidSourceAddress();\\r\\n        }\\r\\n        (address from, address to, uint256 _amount) = abi.decode(\\r\\n            payload,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        _mint(to, _amount);\\r\\n        emit vXNFBridgeReceive(to, _amount, BridgeId.Axelar, abi.encode(sourceChain), from);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_XNF\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormholeRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HexStringLengthNotEven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFeeForWormhole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddressLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddressString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLayerZeroSourceAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWormholeSourceAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVerifiedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRelayerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTeamAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WormholeMessageAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"XNFIsAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"xenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IvXNF.BridgeId\",\"name\":\"bridgeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"incomingChainId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"vXNFBridgeReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IvXNF.BridgeId\",\"name\":\"bridgeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"outgoingChainId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"vXNFBridgeTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENDPOINT\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_SERVICE\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORMHOLE_RELAYER\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XNF\",\"outputs\":[{\"internalType\":\"contract IBurnableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"}],\"name\":\"bridgeViaAxelar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"bridgeViaLayerZero\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"bridgeViaWormhole\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dstChainId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"}],\"name\":\"burnAndBridgeViaAxelar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"burnAndBridgeViaLayerZero\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"burnAndBridgeViaWormhole\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnXNF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParam\",\"type\":\"bytes\"}],\"name\":\"estimateGasForLayerZero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"estimateGasForWormhole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTokenBurned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seenDeliveryVaaHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_XNF\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setXNFAndRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vXNFAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "vXNF", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f4495243837681061c4743b74b3eedf548d56a50000000000000000000000002d5d7d31f671f86c782533cc367f14109a08271200000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd67500000000000000000000000027428dd2d3dd32a4d7f7c497eaaa23130d8949110000000000000000000000009e0de4758101a2aa0e50418237aa1236e6ce3716", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}