{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface ISafemoon {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function migrate(address account, uint256 amount) external;\r\n\r\n    function isMigrationStarted() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        address to\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function routerTrade() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\r\n\r\ninterface ISafeSwapTradeRouter {\r\n    struct Trade {\r\n        uint256 amountIn;\r\n        uint256 amountOut;\r\n        address[] path;\r\n        address payable to;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function setRouter(address _router) external;\r\n\r\n    function setFeePercent(uint256 _feePercent) external;\r\n\r\n    function sePercent(uint256 _percent) external;\r\n\r\n    function addFfsWhitelist(address _wl) external;\r\n\r\n    function removeFfsWhitelist(address _wl) external;\r\n\r\n    function setFeeJar(address _feeJar) external;\r\n\r\n    function swapExactTokensForETHAndFeeAmount(Trade calldata trade) external payable;\r\n\r\n    function swapTokensForExactETHAndFeeAmount(Trade calldata trade) external payable;\r\n\r\n    function swapExactETHForTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\r\n\r\n    function swapETHForExactTokensWithFeeAmount(Trade calldata trade, uint256 _feeAmount) external payable;\r\n\r\n    function swapExactTokensForTokensWithFeeAmount(Trade calldata trade) external payable;\r\n\r\n    function swapTokensForExactTokensWithFeeAmount(Trade calldata trade) external payable;\r\n\r\n    function getSwapFee(\r\n        uint256 amountIn,\r\n        uint256 _amountOut,\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (uint256 _fee);\r\n\r\n    function getFees(\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        address _address\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalBNBFee,\r\n            uint256 dexFee,\r\n            uint256 tokenAFee,\r\n            uint256 tokenBFee\r\n        );\r\n\r\n    function getSwapFees(uint256 amountIn, address[] memory path) external view returns (uint256 _fees);\r\n}\r\n\r\ncontract Safemoon is ISafemoon, Initializable, ContextUpgradeable, OwnableUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    struct FeeTier {\r\n        uint256 ecoSystemFee;\r\n        uint256 liquidityFee;\r\n        uint256 taxFee;\r\n        uint256 ownerFee;\r\n        uint256 burnFee;\r\n        address ecoSystem;\r\n        address owner;\r\n    }\r\n\r\n    struct FeeValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tEchoSystem;\r\n        uint256 tLiquidity;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    struct tFeeValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tEchoSystem;\r\n        uint256 tLiquidity;\r\n        uint256 tFee;\r\n        uint256 tOwner;\r\n        uint256 tBurn;\r\n    }\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isBlacklisted;\r\n    mapping(address => uint256) private _accountsTier;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _maxFee;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    FeeTier public _defaultFees;\r\n    FeeTier private _previousFees;\r\n    FeeTier private _emptyFees;\r\n\r\n    FeeTier[] private feeTiers;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public WBNB;\r\n    address private migration;\r\n    address private _initializerAccount;\r\n    address public _burnAddress;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 private numTokensSellToAddToLiquidity;\r\n\r\n    bool private _upgraded;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier lockUpgrade() {\r\n        require(!_upgraded, \"Safemoon: Already upgraded\");\r\n        _;\r\n        _upgraded = true;\r\n    }\r\n\r\n    modifier checkTierIndex(uint256 _index) {\r\n        require(feeTiers.length > _index, \"Safemoon: Invalid tier index\");\r\n        _;\r\n    }\r\n\r\n    modifier preventBlacklisted(address _account, string memory errorMsg) {\r\n        require(!_isBlacklisted[_account], errorMsg);\r\n        _;\r\n    }\r\n\r\n    modifier isRouter(address _sender) {\r\n        {\r\n            uint32 size;\r\n            assembly {\r\n                size := extcodesize(_sender)\r\n            }\r\n            if (size > 0) {\r\n                uint256 senderTier = _accountsTier[_sender];\r\n                if (senderTier == 0) {\r\n                    IUniswapV2Router02 _routerCheck = IUniswapV2Router02(_sender);\r\n                    try _routerCheck.factory() returns (address factory) {\r\n                        _accountsTier[_sender] = 1;\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    uint256 public numTokensToCollectBNB;\r\n    uint256 public numOfBnbToSwapAndEvolve;\r\n\r\n    bool inSwapAndEvolve;\r\n    bool public swapAndEvolveEnabled;\r\n\r\n    /**\r\n     * @dev\r\n     * We create 2 variables _rTotalExcluded and _tTotalExcluded that store total t and r excluded\r\n     * So for any actions such as add, remove exclude wallet or increase, decrease exclude amount, we will update\r\n     * _rTotalExcluded and _tTotalExcluded\r\n     * and in _getCurrentSupply() function, we remove for loop by using _rTotalExcluded and _tTotalExcluded\r\n     * But this contract using proxy pattern, so when we upgrade contract,\r\n     *  we need to call updateTotalExcluded() to init value of _rTotalExcluded and _tTotalExcluded\r\n     */\r\n    uint256 private _rTotalExcluded;\r\n    uint256 private _tTotalExcluded;\r\n\r\n    mapping(address => bool) public listIgnoreCollectBNBAddresses; // list pairs addresses that not call collectBNB function\r\n    address public bridgeBurnAddress;\r\n    mapping(address => bool) public whitelistMint;\r\n    bool public isPaused;\r\n    mapping(address => bool) public whitelistPause;\r\n    mapping(address => bool) public isSFMPair;\r\n\r\n    event SwapAndEvolveEnabledUpdated(bool enabled);\r\n    event SwapAndEvolve(uint256 bnbSwapped, uint256 tokenReceived, uint256 bnbIntoLiquidity);\r\n    event AddIgnoreCollectBNBAddress(address ignoreAddress);\r\n    event RemoveIgnoreCollectBNBAddress(address ignoreAddress);\r\n    event WhitelistPause(address user, bool value);\r\n    event SetSFMPair(address pair, bool value);\r\n    event PauseContract(bool value);\r\n\r\n    modifier onlyWhitelistMint() {\r\n        require(whitelistMint[msg.sender], \"Invalid\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused || whitelistPause[msg.sender], \"Paused\");\r\n        _;\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n        __Safemoon_v2_init_unchained();\r\n    }\r\n\r\n    function __Safemoon_v2_init_unchained() internal initializer {\r\n        _name = \"SafeMoon\";\r\n        _symbol = \"SFM\";\r\n        _decimals = 9;\r\n\r\n        _tTotal = 1000000 * 10**6 * 10**9;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        _maxFee = 1000;\r\n\r\n        // swapAndLiquifyEnabled = true;\r\n\r\n        _maxTxAmount = 5000 * 10**6 * 10**9;\r\n        numTokensSellToAddToLiquidity = 500 * 10**6 * 10**9;\r\n\r\n        _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        _initializerAccount = _msgSender();\r\n        _rOwned[_initializerAccount] = _rTotal;\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        //\r\n        __Safemoon_tiers_init();\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function initRouterAndPair(address _router) external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        WBNB = uniswapV2Router.WETH();\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WBNB, address(this));\r\n    }\r\n\r\n    function __Safemoon_tiers_init() internal initializer {\r\n        _defaultFees = _addTier(0, 500, 500, 0, 0, address(0), address(0));\r\n        _addTier(50, 50, 100, 0, 0, address(0), address(0));\r\n        _addTier(50, 50, 100, 100, 0, address(0), address(0));\r\n        _addTier(100, 125, 125, 150, 0, address(0), address(0));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromTokenInTiers(\r\n        uint256 tAmount,\r\n        uint256 _tierIndex,\r\n        bool deductTransferFee\r\n    ) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\r\n            return _values.rAmount;\r\n        } else {\r\n            FeeValues memory _values = _getValues(tAmount, _tierIndex);\r\n            return _values.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        return reflectionFromTokenInTiers(tAmount, 0, deductTransferFee);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Invalid\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            _tTotalExcluded = _tTotalExcluded.add(_tOwned[account]);\r\n            _rTotalExcluded = _rTotalExcluded.add(_rOwned[account]);\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Invalid\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = _tOwned[account] * _getRate();\r\n                _tTotalExcluded = _tTotalExcluded.sub(_tOwned[account]);\r\n                _rTotalExcluded = _rTotalExcluded.sub(_rOwned[account]);\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function whitelistAddress(address _account, uint256 _tierIndex)\r\n        public\r\n        onlyOwner\r\n        checkTierIndex(_tierIndex)\r\n        preventBlacklisted(_account, \"Safemoon: Selected account is in blacklist\")\r\n    {\r\n        require(_account != address(0), \"Safemoon: Invalid address\");\r\n        _accountsTier[_account] = _tierIndex;\r\n    }\r\n\r\n    function excludeWhitelistedAddress(address _account) public onlyOwner {\r\n        require(_account != address(0), \"Safemoon: Invalid address\");\r\n        require(_accountsTier[_account] > 0, \"Safemoon: Account is not in whitelist\");\r\n        _accountsTier[_account] = 0;\r\n    }\r\n\r\n    function accountTier(address _account) public view returns (FeeTier memory) {\r\n        return feeTiers[_accountsTier[_account]];\r\n    }\r\n\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return _accountsTier[_account] > 0;\r\n    }\r\n\r\n    function checkFees(FeeTier memory _tier) internal view returns (FeeTier memory) {\r\n        uint256 _fees = _tier.ecoSystemFee.add(_tier.liquidityFee).add(_tier.taxFee).add(_tier.ownerFee).add(\r\n            _tier.burnFee\r\n        );\r\n        require(_fees <= _maxFee, \"Safemoon: Fees exceeded max limitation\");\r\n\r\n        return _tier;\r\n    }\r\n\r\n    function checkFeesChanged(\r\n        FeeTier memory _tier,\r\n        uint256 _oldFee,\r\n        uint256 _newFee\r\n    ) internal view {\r\n        uint256 _fees = _tier\r\n            .ecoSystemFee\r\n            .add(_tier.liquidityFee)\r\n            .add(_tier.taxFee)\r\n            .add(_tier.ownerFee)\r\n            .add(_tier.burnFee)\r\n            .sub(_oldFee)\r\n            .add(_newFee);\r\n\r\n        require(_fees <= _maxFee, \"Safemoon: Fees exceeded max limitation\");\r\n    }\r\n\r\n    function setEcoSystemFeePercent(uint256 _tierIndex, uint256 _ecoSystemFee)\r\n        external\r\n        onlyOwner\r\n        checkTierIndex(_tierIndex)\r\n    {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        checkFeesChanged(tier, tier.ecoSystemFee, _ecoSystemFee);\r\n        feeTiers[_tierIndex].ecoSystemFee = _ecoSystemFee;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.ecoSystemFee = _ecoSystemFee;\r\n        }\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 _tierIndex, uint256 _liquidityFee)\r\n        external\r\n        onlyOwner\r\n        checkTierIndex(_tierIndex)\r\n    {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        checkFeesChanged(tier, tier.liquidityFee, _liquidityFee);\r\n        feeTiers[_tierIndex].liquidityFee = _liquidityFee;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.liquidityFee = _liquidityFee;\r\n        }\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 _tierIndex, uint256 _taxFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        checkFeesChanged(tier, tier.taxFee, _taxFee);\r\n        feeTiers[_tierIndex].taxFee = _taxFee;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.taxFee = _taxFee;\r\n        }\r\n    }\r\n\r\n    function setOwnerFeePercent(uint256 _tierIndex, uint256 _ownerFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        checkFeesChanged(tier, tier.ownerFee, _ownerFee);\r\n        feeTiers[_tierIndex].ownerFee = _ownerFee;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.ownerFee = _ownerFee;\r\n        }\r\n    }\r\n\r\n    function setBurnFeePercent(uint256 _tierIndex, uint256 _burnFee) external onlyOwner checkTierIndex(_tierIndex) {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        checkFeesChanged(tier, tier.burnFee, _burnFee);\r\n        feeTiers[_tierIndex].burnFee = _burnFee;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.burnFee = _burnFee;\r\n        }\r\n    }\r\n\r\n    function setEcoSystemFeeAddress(uint256 _tierIndex, address _ecoSystem)\r\n        external\r\n        onlyOwner\r\n        checkTierIndex(_tierIndex)\r\n    {\r\n        require(_ecoSystem != address(0), \"Safemoon: Address Zero is not allowed\");\r\n        excludeFromReward(_ecoSystem);\r\n        feeTiers[_tierIndex].ecoSystem = _ecoSystem;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.ecoSystem = _ecoSystem;\r\n        }\r\n    }\r\n\r\n    function setOwnerFeeAddress(uint256 _tierIndex, address _owner) external onlyOwner checkTierIndex(_tierIndex) {\r\n        require(_owner != address(0), \"Safemoon: Address Zero is not allowed\");\r\n        excludeFromReward(_owner);\r\n        feeTiers[_tierIndex].owner = _owner;\r\n        if (_tierIndex == 0) {\r\n            _defaultFees.owner = _owner;\r\n        }\r\n    }\r\n\r\n    function addTier(\r\n        uint256 _ecoSystemFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _taxFee,\r\n        uint256 _ownerFee,\r\n        uint256 _burnFee,\r\n        address _ecoSystem,\r\n        address _owner\r\n    ) public onlyOwner {\r\n        _addTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner);\r\n    }\r\n\r\n    function _addTier(\r\n        uint256 _ecoSystemFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _taxFee,\r\n        uint256 _ownerFee,\r\n        uint256 _burnFee,\r\n        address _ecoSystem,\r\n        address _owner\r\n    ) internal returns (FeeTier memory) {\r\n        FeeTier memory _newTier = checkFees(\r\n            FeeTier(_ecoSystemFee, _liquidityFee, _taxFee, _ownerFee, _burnFee, _ecoSystem, _owner)\r\n        );\r\n        excludeFromReward(_ecoSystem);\r\n        excludeFromReward(_owner);\r\n        feeTiers.push(_newTier);\r\n\r\n        return _newTier;\r\n    }\r\n\r\n    function feeTier(uint256 _tierIndex) public view checkTierIndex(_tierIndex) returns (FeeTier memory) {\r\n        return feeTiers[_tierIndex];\r\n    }\r\n\r\n    function blacklistAddress(address account) public onlyOwner {\r\n        _isBlacklisted[account] = true;\r\n        _accountsTier[account] = 0;\r\n    }\r\n\r\n    function unBlacklistAddress(address account) public onlyOwner {\r\n        _isBlacklisted[account] = false;\r\n    }\r\n\r\n    function updateRouterAndPair(address _uniswapV2Router, address _uniswapV2Pair) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        WBNB = uniswapV2Router.WETH();\r\n    }\r\n\r\n    function setDefaultSettings() external onlyOwner {\r\n        swapAndLiquifyEnabled = false;\r\n        swapAndEvolveEnabled = true;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**4);\r\n    }\r\n\r\n    function setSwapAndEvolveEnabled(bool _enabled) public onlyOwner {\r\n        swapAndEvolveEnabled = _enabled;\r\n        emit SwapAndEvolveEnabledUpdated(_enabled);\r\n    }\r\n\r\n    //to receive BNB from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 _tierIndex) private view returns (FeeValues memory) {\r\n        tFeeValues memory tValues = _getTValues(tAmount, _tierIndex);\r\n        uint256 tTransferFee = tValues.tLiquidity.add(tValues.tEchoSystem).add(tValues.tOwner).add(tValues.tBurn);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tValues.tFee,\r\n            tTransferFee,\r\n            _getRate()\r\n        );\r\n        return\r\n            FeeValues(\r\n                rAmount,\r\n                rTransferAmount,\r\n                rFee,\r\n                tValues.tTransferAmount,\r\n                tValues.tEchoSystem,\r\n                tValues.tLiquidity,\r\n                tValues.tFee,\r\n                tValues.tOwner,\r\n                tValues.tBurn\r\n            );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 _tierIndex) private view returns (tFeeValues memory) {\r\n        FeeTier memory tier = feeTiers[_tierIndex];\r\n        tFeeValues memory tValues = tFeeValues(\r\n            0,\r\n            calculateFee(tAmount, tier.ecoSystemFee),\r\n            calculateFee(tAmount, tier.liquidityFee),\r\n            calculateFee(tAmount, tier.taxFee),\r\n            calculateFee(tAmount, tier.ownerFee),\r\n            calculateFee(tAmount, tier.burnFee)\r\n        );\r\n\r\n        tValues.tTransferAmount = tAmount\r\n            .sub(tValues.tEchoSystem)\r\n            .sub(tValues.tFee)\r\n            .sub(tValues.tLiquidity)\r\n            .sub(tValues.tOwner)\r\n            .sub(tValues.tBurn);\r\n\r\n        return tValues;\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTransferFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferFee = tTransferFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTransferFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        if (_rTotalExcluded > _rTotal || _tTotalExcluded > _tTotal) {\r\n            return (_rTotal, _tTotal);\r\n        }\r\n        uint256 rSupply = _rTotal.sub(_rTotalExcluded);\r\n        uint256 tSupply = _tTotal.sub(_tTotalExcluded);\r\n\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\r\n        if (_fee == 0) return 0;\r\n        return _amount.mul(_fee).div(10**4);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousFees = feeTiers[0];\r\n        feeTiers[0] = _emptyFees;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        feeTiers[0] = _previousFees;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _isBlacklisted[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        private\r\n        preventBlacklisted(owner, \"Safemoon: Owner address is blacklisted\")\r\n        preventBlacklisted(spender, \"Safemoon: Spender address is blacklisted\")\r\n    {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        private\r\n        preventBlacklisted(_msgSender(), \"Safemoon: Address is blacklisted\")\r\n        preventBlacklisted(from, \"Safemoon: From address is blacklisted\")\r\n        preventBlacklisted(to, \"Safemoon: To address is blacklisted\")\r\n        isRouter(_msgSender())\r\n    {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_canAction(from, to), \"Paused\");\r\n\r\n        if (from != owner() && to != owner())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance >= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensToCollectBNB;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            swapAndEvolveEnabled &&\r\n            !_isInCollectBNBWhitelist(from) &&\r\n            !_isInCollectBNBWhitelist(to)\r\n        ) {\r\n            contractTokenBalance = numTokensToCollectBNB;\r\n            collectBNB(contractTokenBalance);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 tierIndex = 0;\r\n\r\n        if (takeFee) {\r\n            tierIndex = _accountsTier[from];\r\n\r\n            if (_msgSender() != from) {\r\n                tierIndex = _accountsTier[_msgSender()];\r\n            }\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, tierIndex, takeFee);\r\n    }\r\n\r\n    function _canAction(address from, address to) private view returns (bool) {\r\n        if (!isPaused) {\r\n            return true;\r\n        }\r\n        if (whitelistPause[from] && whitelistPause[to]) {\r\n            return true;\r\n        }\r\n        if (whitelistPause[from] && !isSFMPair[from]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function collectBNB(uint256 contractTokenBalance) private lockTheSwap {\r\n        swapTokensForBnb(contractTokenBalance);\r\n    }\r\n\r\n    function swapTokensForBnb(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\r\n        //        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // get feeAmount\r\n        uint256 feeAmount = tradeRouter.getSwapFees(tokenAmount, path);\r\n\r\n        //        (, uint256 feeAmount, uint256 tokenAFee, ) = tradeRouter.getFees(path, tokenAmount, address(this));\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        _approve(address(this), address(tradeRouter), tokenAmount);\r\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\r\n            amountIn: tokenAmount,\r\n            amountOut: 0,\r\n            path: path,\r\n            to: payable(address(this)),\r\n            deadline: block.timestamp\r\n        });\r\n        tradeRouter.swapExactTokensForETHAndFeeAmount{ value: feeAmount }(trade);\r\n    }\r\n\r\n    function swapAndEvolve() public onlyOwner lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 contractBnbBalance = address(this).balance;\r\n        require(contractBnbBalance >= numOfBnbToSwapAndEvolve, \"BNB balance is not reach for S&E Threshold\");\r\n\r\n        contractBnbBalance = numOfBnbToSwapAndEvolve;\r\n\r\n        uint256 half = contractBnbBalance.div(2);\r\n        uint256 otherHalf = contractBnbBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = ISafemoon(address(this)).balanceOf(msg.sender);\r\n        // swap BNB for Tokens\r\n        swapBnbForTokens(half);\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = ISafemoon(address(this)).balanceOf(msg.sender);\r\n        uint256 swapeedToken = newBalance.sub(initialBalance);\r\n\r\n        _approve(msg.sender, address(this), swapeedToken);\r\n        ISafemoon(address(this)).transferFrom(msg.sender, address(this), swapeedToken);\r\n        // add liquidity to uniswap\r\n        addLiquidity(swapeedToken, otherHalf);\r\n        emit SwapAndEvolve(half, swapeedToken, otherHalf);\r\n    }\r\n\r\n    function swapBnbForTokens(uint256 bnbAmount) private {\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        ISafeSwapTradeRouter tradeRouter = ISafeSwapTradeRouter(uniswapV2Router.routerTrade());\r\n        _approve(owner(), address(uniswapV2Router), bnbAmount);\r\n\r\n        // get feeAmount\r\n        uint256 feeAmount = tradeRouter.getSwapFees(bnbAmount, path);\r\n        ISafeSwapTradeRouter.Trade memory trade = ISafeSwapTradeRouter.Trade({\r\n            amountIn: bnbAmount,\r\n            amountOut: 0,\r\n            path: path,\r\n            to: payable(owner()),\r\n            deadline: block.timestamp\r\n        });\r\n        tradeRouter.swapExactETHForTokensWithFeeAmount{ value: bnbAmount + feeAmount }(trade, feeAmount);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{ value: bnbAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 tierIndex,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, tierIndex);\r\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, tierIndex);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, tierIndex);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, tierIndex);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        //        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\r\n        //        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n\r\n        if (_values.tTransferAmount > tAmount) {\r\n            uint256 tmpValue = _values.tTransferAmount - tAmount;\r\n            _tTotalExcluded = _tTotalExcluded.add(tmpValue);\r\n        } else {\r\n            uint256 tmpValue = tAmount - _values.tTransferAmount;\r\n            _tTotalExcluded = _tTotalExcluded.sub(tmpValue);\r\n        }\r\n        if (_values.rTransferAmount > _values.rAmount) {\r\n            uint256 tmpValue = _values.rTransferAmount - _values.rAmount;\r\n            _rTotalExcluded = _rTotalExcluded.add(tmpValue);\r\n        } else {\r\n            uint256 tmpValue = _values.rAmount - _values.rTransferAmount;\r\n            _rTotalExcluded = _rTotalExcluded.sub(tmpValue);\r\n        }\r\n        //        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount).sub(tAmount);\r\n        //        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount).sub(_values.rAmount);\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(_values.tTransferAmount);\r\n        //        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n        _tTotalExcluded = _tTotalExcluded.add(_values.tTransferAmount);\r\n        _rTotalExcluded = _rTotalExcluded.add(_values.rTransferAmount);\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 tierIndex\r\n    ) private {\r\n        FeeValues memory _values = _getValues(tAmount, tierIndex);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        //        _rOwned[sender] = _rOwned[sender].sub(_values.rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(_values.rTransferAmount);\r\n        _tTotalExcluded = _tTotalExcluded.sub(tAmount);\r\n        _rTotalExcluded = _rTotalExcluded.sub(_values.rAmount);\r\n\r\n        _takeFees(sender, _values, tierIndex);\r\n        _reflectFee(_values.rFee, _values.tFee);\r\n        emit Transfer(sender, recipient, _values.tTransferAmount);\r\n    }\r\n\r\n    function _takeFees(\r\n        address sender,\r\n        FeeValues memory values,\r\n        uint256 tierIndex\r\n    ) private {\r\n        _takeFee(sender, values.tLiquidity, address(this));\r\n        _takeFee(sender, values.tEchoSystem, feeTiers[tierIndex].ecoSystem);\r\n        _takeFee(sender, values.tOwner, feeTiers[tierIndex].owner);\r\n        _takeBurn(sender, values.tBurn);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _takeFee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        address recipient\r\n    ) private {\r\n        if (recipient == address(0)) return;\r\n        if (tAmount == 0) return;\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _tTotalExcluded = _tTotalExcluded.add(tAmount);\r\n            _rTotalExcluded = _rTotalExcluded.add(rAmount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    // we update _rTotalExcluded and _tTotalExcluded when add, remove wallet from excluded list\r\n    // or when increase, decrease exclude value\r\n    function _takeBurn(address sender, uint256 _amount) private {\r\n        if (_amount == 0) return;\r\n        _tOwned[_burnAddress] = _tOwned[_burnAddress].add(_amount);\r\n        uint256 _rAmount = _amount * _getRate();\r\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(_rAmount);\r\n        if (_isExcluded[_burnAddress]) {\r\n            _rTotalExcluded = _rTotalExcluded.add(_rAmount);\r\n            _tTotalExcluded = _tTotalExcluded.add(_amount);\r\n        }\r\n\r\n        emit Transfer(sender, _burnAddress, _amount);\r\n    }\r\n\r\n    function setMigrationAddress(address _migration) public onlyOwner {\r\n        migration = _migration;\r\n    }\r\n\r\n    function isMigrationStarted() external view override returns (bool) {\r\n        return migration != address(0);\r\n    }\r\n\r\n    function migrate(address account, uint256 amount)\r\n        external\r\n        override\r\n        preventBlacklisted(account, \"Safemoon: Migrated account is blacklisted\")\r\n    {\r\n        require(migration != address(0), \"Safemoon: Migration is not started\");\r\n        require(_msgSender() == migration, \"Safemoon: Not Allowed\");\r\n        _migrate(account, amount);\r\n    }\r\n\r\n    function _migrate(address account, uint256 amount) private {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _tokenTransfer(_initializerAccount, account, amount, 0, false);\r\n    }\r\n\r\n    function feeTiersLength() public view returns (uint256) {\r\n        return feeTiers.length;\r\n    }\r\n\r\n    function updateBurnAddress(address _newBurnAddress) external onlyOwner {\r\n        _burnAddress = _newBurnAddress;\r\n        excludeFromReward(_newBurnAddress);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\r\n        ISafemoon(_token).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function setNumberOfTokenToCollectBNB(uint256 _numToken) public onlyOwner {\r\n        numTokensToCollectBNB = _numToken;\r\n    }\r\n\r\n    function setNumOfBnbToSwapAndEvolve(uint256 _numBnb) public onlyOwner {\r\n        numOfBnbToSwapAndEvolve = _numBnb;\r\n    }\r\n\r\n    function withdrawBnb(uint256 _amount) public onlyOwner {\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function addListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\r\n        uint256 len = _addresses.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address addr = _addresses[i];\r\n            if (listIgnoreCollectBNBAddresses[addr]) continue;\r\n\r\n            listIgnoreCollectBNBAddresses[addr] = true;\r\n            emit AddIgnoreCollectBNBAddress(addr);\r\n        }\r\n    }\r\n\r\n    function removeListIgnoreCollectBNBOnTransferAddresses(address[] calldata _addresses) external onlyOwner {\r\n        uint256 len = _addresses.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address addr = _addresses[i];\r\n            if (!listIgnoreCollectBNBAddresses[addr]) continue;\r\n\r\n            listIgnoreCollectBNBAddresses[addr] = false;\r\n            emit RemoveIgnoreCollectBNBAddress(addr);\r\n        }\r\n    }\r\n\r\n    function _isInCollectBNBWhitelist(address _addr) private view returns (bool) {\r\n        return listIgnoreCollectBNBAddresses[_addr];\r\n    }\r\n\r\n    function setBridgeBurnAddress(address _burn) public onlyOwner {\r\n        bridgeBurnAddress = _burn;\r\n    }\r\n\r\n    function setWhitelistMintBurn(address _wl, bool value) public onlyOwner {\r\n        whitelistMint[_wl] = value;\r\n    }\r\n\r\n    function mint(address user, uint256 amount) public whenNotPaused onlyWhitelistMint {\r\n        if (msg.sender != owner()) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        _tokenTransfer(bridgeBurnAddress, user, amount, 0, false);\r\n    }\r\n\r\n    function burn(uint256 amount) public whenNotPaused onlyWhitelistMint {\r\n        if (msg.sender != owner()) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        _tokenTransfer(msg.sender, bridgeBurnAddress, amount, 0, false);\r\n    }\r\n\r\n    function setWhitelistPause(address user, bool value) public onlyOwner {\r\n        whitelistPause[user] = value;\r\n        emit WhitelistPause(user, value);\r\n    }\r\n\r\n    function setPause(bool value) public onlyOwner {\r\n        isPaused = value;\r\n    }\r\n\r\n    function setSFMPair(address pair, bool value) public onlyOwner {\r\n        isSFMPair[pair] = value;\r\n        emit SetSFMPair(pair, value);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ignoreAddress\",\"type\":\"address\"}],\"name\":\"AddIgnoreCollectBNBAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PauseContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ignoreAddress\",\"type\":\"address\"}],\"name\":\"RemoveIgnoreCollectBNBAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetSFMPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndEvolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndEvolveEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"WhitelistPause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Safemoon.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addListIgnoreCollectBNBOnTransferAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"feeTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ecoSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ecoSystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Safemoon.FeeTier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSFMPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listIgnoreCollectBNBAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfBnbToSwapAndEvolve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToCollectBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromTokenInTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeListIgnoreCollectBNBOnTransferAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"setBridgeBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"}],\"name\":\"setEcoSystemFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecoSystemFee\",\"type\":\"uint256\"}],\"name\":\"setEcoSystemFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migration\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numBnb\",\"type\":\"uint256\"}],\"name\":\"setNumOfBnbToSwapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setNumberOfTokenToCollectBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSFMPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndEvolveEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wl\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistMintBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndEvolveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBurnAddress\",\"type\":\"address\"}],\"name\":\"updateBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Safemoon", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://729582b9058cb51bd82c681e8482e727a56a45479d0e70351fdddb44b32a0914"}