{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Token is IERC20 {\r\n    address internal owner;\r\n    address internal pendingOwner;\r\n    address internal issuer;\r\n\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 internal maxSupply;\r\n\r\n    mapping (address => uint256) public override balanceOf;\r\n    mapping (address => mapping (address => uint256)) public override allowance;\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    event NewIssuer(address indexed issuer);\r\n    event TransferOwnership(address indexed owner, bool indexed confirmed);\r\n\r\n    modifier only(address role) {\r\n        require(msg.sender == role); // dev: missing role\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets the token fields: name, symbol and decimals\r\n     *\r\n     * @param tokenName Name of the token\r\n     * @param tokenSymbol Token Symbol\r\n     * @param tokenDecimals Decimal places\r\n     * @param tokenOwner Token Owner\r\n     * @param tokenIssuer Token Issuer\r\n     * @param tokenMaxSupply Max total supply\r\n     */\r\n    constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, address tokenOwner, address tokenIssuer, uint256 tokenMaxSupply) {\r\n        require(tokenOwner != address(0)); // dev: invalid owner\r\n        require(tokenIssuer != address(0)); // dev: invalid issuer\r\n        require(tokenMaxSupply > 0); // dev: invalid max supply\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = tokenDecimals;\r\n        owner = tokenOwner;\r\n        issuer = tokenIssuer;\r\n        maxSupply = tokenMaxSupply;\r\n    }\r\n\r\n    /**\r\n     * Sets the owner\r\n     *\r\n     * @param newOwner Address of the new owner (must be confirmed by the new owner)\r\n     */\r\n    function transferOwnership(address newOwner)\r\n    external\r\n    only(owner) {\r\n        pendingOwner = newOwner;\r\n\r\n        emit TransferOwnership(pendingOwner, false);\r\n    }\r\n\r\n    /**\r\n     * Confirms the new owner\r\n     */\r\n    function confirmOwnership()\r\n    external\r\n    only(pendingOwner) {\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n\r\n        emit TransferOwnership(owner, true);\r\n    }\r\n\r\n    /**\r\n     * Sets the issuer\r\n     *\r\n     * @param newIssuer Address of the issuer\r\n     */\r\n    function setIssuer(address newIssuer)\r\n    external\r\n    only(owner) {\r\n        issuer = newIssuer;\r\n\r\n        emit NewIssuer(issuer);\r\n    }\r\n\r\n    /**\r\n     * Mints {value} tokens to the {to} wallet.\r\n     *\r\n     * @param to The address receiving the newly minted tokens\r\n     * @param value The number of tokens to mint\r\n     */\r\n    function mint(address to, uint256 value)\r\n    external\r\n    only(issuer) {\r\n        require(to != address(0)); // dev: requires non-zero address\r\n        require(totalSupply + value <= maxSupply); // dev: exceeds max supply\r\n\r\n        unchecked {\r\n            totalSupply += value;\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    /**\r\n     * Approves the {spender} to transfer {value} tokens of the caller.\r\n     *\r\n     * @param spender The address which will spend the funds\r\n     * @param value The value approved to be spent by the spender\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function approve(address spender, uint256 value)\r\n    external\r\n    override\r\n    returns(bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers {value} tokens from the caller, to {to}\r\n     *\r\n     * @param to The address to transfer tokens to\r\n     * @param value The number of tokens to be transferred\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    override\r\n    returns (bool) {\r\n        updateBalance(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers {value} tokens of {from} to {to}, on behalf of the caller.\r\n     *\r\n     * @param from The address to transfer tokens from\r\n     * @param to The address to transfer tokens to\r\n     * @param value The number of tokens to be transferred\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external\r\n    override\r\n    returns (bool) {\r\n        require(allowance[from][msg.sender] >= value); // dev: exceeds allowance\r\n        updateBalance(from, to, value);\r\n        unchecked {\r\n            allowance[from][msg.sender] -= value;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateBalance(address from, address to, uint256 value)\r\n    internal {\r\n        require(to != address(0)); // dev: requires non-zero address\r\n        require(balanceOf[from] >= value); // dev: exceeds balance\r\n        unchecked {\r\n            balanceOf[from] -= value;\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"NewIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"confirmed\",\"type\":\"bool\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000111a12140c0bb6a1e544d08f0d22e4580368ce50000000000000000000000000111a12140c0bb6a1e544d08f0d22e4580368ce50000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000000548595045520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454f4e0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bab79f4205d3b8d5dd7e14ddb76f49fbb415105430ea94f7e3a0602fe4506e8d"}