{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"degen/opoeraffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface VRFV2WrapperInterface {\\r\\n    function calculateRequestPrice(uint32 _callbackGasLimit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function estimateRequestPrice(\\r\\n        uint32 _callbackGasLimit,\\r\\n        uint256 _requestGasPriceWei\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function lastRequestId() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 remaining);\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    function decimals() external view returns (uint8 decimalPlaces);\\r\\n\\r\\n    function decreaseApproval(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function increaseApproval(address spender, uint256 subtractedValue)\\r\\n        external;\\r\\n\\r\\n    function name() external view returns (string memory tokenName);\\r\\n\\r\\n    function symbol() external view returns (string memory tokenSymbol);\\r\\n\\r\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function transferAndCall(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool success);\\r\\n}\\r\\n\\r\\nabstract contract VRFV2WrapperConsumerBase {\\r\\n    LinkTokenInterface internal immutable LINK;\\r\\n    VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\r\\n\\r\\n    constructor(address _link, address _vrfV2Wrapper) {\\r\\n        LINK = LinkTokenInterface(_link);\\r\\n        VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\r\\n    }\\r\\n\\r\\n    function requestRandomness(\\r\\n        uint32 _callbackGasLimit,\\r\\n        uint16 _requestConfirmations,\\r\\n        uint32 _numWords\\r\\n    ) internal returns (uint256 requestId) {\\r\\n        LINK.transferAndCall(\\r\\n            address(VRF_V2_WRAPPER),\\r\\n            VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\r\\n            abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\r\\n        );\\r\\n        return VRF_V2_WRAPPER.lastRequestId();\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal virtual;\\r\\n\\r\\n    function rawFulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == address(VRF_V2_WRAPPER),\\r\\n            \\\"only VRF V2 wrapper can fulfill\\\"\\r\\n        );\\r\\n        fulfillRandomWords(_requestId, _randomWords);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface OwnableInterface {\\r\\n    function owner() external returns (address);\\r\\n\\r\\n    function transferOwnership(address recipient) external;\\r\\n\\r\\n    function acceptOwnership() external;\\r\\n}\\r\\n\\r\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\r\\n    address private s_owner;\\r\\n    address private s_pendingOwner;\\r\\n\\r\\n    event OwnershipTransferRequested(address indexed from, address indexed to);\\r\\n    event OwnershipTransferred(address indexed from, address indexed to);\\r\\n\\r\\n    constructor(address newOwner, address pendingOwner) {\\r\\n        require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\r\\n\\r\\n        s_owner = newOwner;\\r\\n        if (pendingOwner != address(0)) {\\r\\n            _transferOwnership(pendingOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address to) public override onlyOwner {\\r\\n        _transferOwnership(to);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external override {\\r\\n        require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\r\\n\\r\\n        address oldOwner = s_owner;\\r\\n        s_owner = msg.sender;\\r\\n        s_pendingOwner = address(0);\\r\\n\\r\\n        emit OwnershipTransferred(oldOwner, msg.sender);\\r\\n    }\\r\\n\\r\\n    function owner() public view override returns (address) {\\r\\n        return s_owner;\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address to) private {\\r\\n        require(to != msg.sender, \\\"Cannot transfer to self\\\");\\r\\n\\r\\n        s_pendingOwner = to;\\r\\n\\r\\n        emit OwnershipTransferRequested(s_owner, to);\\r\\n    }\\r\\n\\r\\n    function _validateOwnership() internal view {\\r\\n        require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _validateOwnership();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\r\\n    constructor(address newOwner)\\r\\n        ConfirmedOwnerWithProposal(newOwner, address(0))\\r\\n    {}\\r\\n}\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC721 is IERC165 {\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract ERC721Hodler {\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public pure returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract OnlyPossibleOnEthereumRaffle is\\r\\n    VRFV2WrapperConsumerBase,\\r\\n    ConfirmedOwner,\\r\\n    ERC721Hodler\\r\\n{\\r\\n    event RaffleStarted(\\r\\n        uint256 indexed request_id,\\r\\n        address indexed nft,\\r\\n        address indexed owner,\\r\\n        uint256 id_minimum,\\r\\n        uint256 id_maximum\\r\\n    );\\r\\n    event WinnerSelected(\\r\\n        uint256 indexed request_id,\\r\\n        address indexed nft,\\r\\n        address indexed winner,\\r\\n        uint256 winning_nft_id\\r\\n    );\\r\\n    event RequestFulfilled(\\r\\n        uint256 indexed requestId,\\r\\n        address indexed nft,\\r\\n        uint256 indexed seed\\r\\n    );\\r\\n    event RaffleCancelled(uint256 indexed request_id, address indexed nft);\\r\\n\\r\\n    struct raffle {\\r\\n        uint256 id;\\r\\n        address owner;\\r\\n        address nft;\\r\\n        uint256 umin;\\r\\n        uint256 umax;\\r\\n        uint256 seed;\\r\\n        address reward;\\r\\n        uint256 reward_id;\\r\\n        bool concluded;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => raffle) public raffles;\\r\\n    raffle public lastRaffle;\\r\\n\\r\\n    uint16 confirmations;\\r\\n    uint32 gas_limit;\\r\\n    uint256 fee;\\r\\n\\r\\n    constructor(\\r\\n        address _link,\\r\\n        address _vrfV2Wrapper,\\r\\n        uint32 _gas_limit,\\r\\n        uint16 _confirmations,\\r\\n        uint256 _fee\\r\\n    )\\r\\n        ConfirmedOwner(msg.sender)\\r\\n        VRFV2WrapperConsumerBase(_link, _vrfV2Wrapper)\\r\\n        ERC721Hodler()\\r\\n    {\\r\\n        gas_limit = _gas_limit;\\r\\n        confirmations = _confirmations;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function startRaffle(\\r\\n        address _nft,\\r\\n        uint256 _umin,\\r\\n        uint256 _umax,\\r\\n        address _reward,\\r\\n        uint256 _reward_id\\r\\n    ) external returns (uint256 _request_id) {\\r\\n        uint256 fee_ = calculateFee();\\r\\n        LINK.transferFrom(msg.sender, address(this), fee_);\\r\\n\\r\\n        _request_id = requestRandomness(gas_limit, confirmations, 1);\\r\\n        lastRaffle = raffle(\\r\\n            lastRaffle.id + 1,\\r\\n            msg.sender,\\r\\n            _nft,\\r\\n            _umin,\\r\\n            _umax,\\r\\n            0,\\r\\n            _reward,\\r\\n            _reward_id,\\r\\n            false\\r\\n        );\\r\\n        raffles[_request_id] = lastRaffle;\\r\\n        IERC721(_reward).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _reward_id\\r\\n        );\\r\\n        emit RaffleStarted(_request_id, _nft, msg.sender, _umin, _umax);\\r\\n    }\\r\\n\\r\\n    function cancelRaffle(uint256 _request_id) external {\\r\\n        require(\\r\\n            raffles[_request_id].owner == msg.sender,\\r\\n            \\\"Only the reward owner can cancel the raffle\\\"\\r\\n        );\\r\\n        require(\\r\\n            raffles[_request_id].concluded == false,\\r\\n            \\\"Raffle already concluded\\\"\\r\\n        );\\r\\n        IERC721(raffles[_request_id].reward).transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            raffles[_request_id].reward_id\\r\\n        );\\r\\n        raffles[_request_id].concluded = true;\\r\\n        emit RaffleCancelled(_request_id, raffles[_request_id].nft);\\r\\n    }\\r\\n\\r\\n    function selectWinner(uint256 _request_id)\\r\\n        external\\r\\n        returns (address _winner)\\r\\n    {\\r\\n        require(raffles[_request_id].id > 0, \\\"request not found\\\");\\r\\n        require(raffles[_request_id].seed != 0, \\\"Seed not set\\\");\\r\\n        require(\\r\\n            raffles[_request_id].concluded == false,\\r\\n            \\\"Raffle already concluded\\\"\\r\\n        );\\r\\n        raffles[_request_id].concluded = true;\\r\\n        uint256 range_ = raffles[_request_id].umax - raffles[_request_id].umin;\\r\\n        uint256 winner_id_ = raffles[_request_id].umin +\\r\\n            (raffles[_request_id].seed % range_+1);\\r\\n        _winner = IERC721(raffles[_request_id].nft).ownerOf(winner_id_);\\r\\n        IERC721(raffles[_request_id].reward).transferFrom(\\r\\n            address(this),\\r\\n            _winner,\\r\\n            raffles[_request_id].reward_id\\r\\n        );\\r\\n        emit WinnerSelected(\\r\\n            _request_id,\\r\\n            raffles[_request_id].nft,\\r\\n            _winner,\\r\\n            winner_id_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _request_id,\\r\\n        uint256[] memory _random_words\\r\\n    ) internal override {\\r\\n        require(raffles[_request_id].id > 0, \\\"request not found\\\");\\r\\n        require(raffles[_request_id].seed == 0, \\\"request already fulfilled\\\");\\r\\n        raffles[_request_id].seed = _random_words[0];\\r\\n        emit RequestFulfilled(\\r\\n            _request_id,\\r\\n            raffles[_request_id].nft,\\r\\n            _random_words[0]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateFee() public view returns (uint256 _fee) {\\r\\n        _fee = VRF_V2_WRAPPER.calculateRequestPrice(gas_limit);\\r\\n        return _fee + (_fee / fee);\\r\\n    }\\r\\n\\r\\n    function withdrawLink() public onlyOwner {\\r\\n        LINK.transfer(msg.sender, LINK.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _fee) external onlyOwner {\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function setGasLimit(uint32 _gas_limit) external onlyOwner {\\r\\n        gas_limit = _gas_limit;\\r\\n    }\\r\\n\\r\\n    function setConfirmations(uint16 _confirmations) external onlyOwner {\\r\\n        confirmations = _confirmations;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfV2Wrapper\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_gas_limit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_confirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"RaffleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id_minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id_maximum\",\"type\":\"uint256\"}],\"name\":\"RaffleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winning_nft_id\",\"type\":\"uint256\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_request_id\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"umin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"umax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"concluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"umin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"umax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"concluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_request_id\",\"type\":\"uint256\"}],\"name\":\"selectWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_confirmations\",\"type\":\"uint16\"}],\"name\":\"setConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gas_limit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_umin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_umax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward_id\",\"type\":\"uint256\"}],\"name\":\"startRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_request_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnlyPossibleOnEthereumRaffle", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000005a861794b927983406fce1d062e00b9368d97df6000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}