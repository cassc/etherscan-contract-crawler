{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"},\"StorageWithBurnableTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// ZENF Storage from Zenland Wallet Balance on Ethereum Network. Every transfer of ZENF tokens from this contract goes with 50% burn of the tokens.\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract StorageWithBurnableTransfer {\\r\\n    address public immutable owner;\\r\\n    IERC20 public immutable token;\\r\\n\\r\\n    constructor (IERC20 _token) {\\r\\n        require(address(_token) != address(0), \\\"Token cannot be zero address.\\\");\\r\\n        token = _token;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(address _receiver, uint256 _amount) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can transfer.\\\");\\r\\n        require(_receiver != address(0), \\\"Receiver cannot be zero address.\\\");\\r\\n        uint256 halfValue = _amount / 2;\\r\\n        token.transfer(address(0xdead), halfValue);\\r\\n        token.transfer(_receiver, halfValue);\\r\\n    }\\r\\n\\r\\n    function transferWrongToken(IERC20 _token, address _receiver, uint256 _amount) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can transfer.\\\");\\r\\n        require(address(_token) != address(0), \\\"Token cannot be zero address.\\\");\\r\\n        require(address(_token) != address(token), \\\"Token address must be different from contract token address.\\\");\\r\\n        require(_receiver != address(0), \\\"Receiver cannot be zero address.\\\");\\r\\n        require(_token.balanceOf(address(this)) \\u003e 0, \\\"Not enough tokens.\\\");\\r\\n        uint256 transferAmount = _amount == 0 ? _token.balanceOf(address(this)) : _amount;\\r\\n        _token.transfer(_receiver, transferAmount);\\r\\n    }\\r\\n} \\r\\n\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWrongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StorageWithBurnableTransfer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9b7b5d5e8d2bcc78884f9f9099bfa42a9e5c1a5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0185dd90e96104e43310ee05b88fd2e0afaa34177bc46b1dd97bdcf232fc70ff"}