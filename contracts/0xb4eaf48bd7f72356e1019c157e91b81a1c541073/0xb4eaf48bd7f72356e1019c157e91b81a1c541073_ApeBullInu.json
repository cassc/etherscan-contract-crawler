{"SourceCode": "/*\r\n   ApeBullInu. Newest member of the FTP family. \r\n   Using FTP Antibot Protection and Eth Rewards services.\r\n   Hold $ABI, Earn ETH based on your holding percentage and fluxuation in volume.\r\n * Withdraw at https://app.fairtokenproject.com\r\n    - Recommended wallet is Metamask. Support for additional wallets coming soon!\r\n * Telegram: t.me/apebullinu\r\n * Twitter: @apebullinu\r\n\r\n * Using FTPEthReflect\r\n    - FTPEthReflect is a contract as a service (CaaS). Traders earn rewards in ETH\r\n * Using FTPAntiBot\r\n    - FTPAntiBot is a contract as a service (CaaS). Ward off harmful bots automatically.\r\n    - Learn more at https://antibot.fairtokenproject.com\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n    function transferOwnership(address _address) public virtual onlyOwner {\r\n        emit OwnershipTransferred(m_Owner, _address);\r\n        m_Owner = _address;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                           \r\n}\r\ncontract Taxable is Ownable {\r\n    using SafeMath for uint256; \r\n    FTPExternal External;\r\n    address payable private m_ExternalServiceAddress = payable(0x1Fc90cbA64722D5e70AF16783a2DFAcfD19F3beD);\r\n    address payable private m_DevAddress;\r\n    uint256 private m_DevAlloc = 1000;\r\n    uint256[] m_TaxAlloc;\r\n    address payable[] m_TaxAddresses;\r\n    mapping (address => uint256) private m_TaxIdx;\r\n    uint256 public m_TotalAlloc;\r\n\r\n    function initTax() internal virtual {\r\n        External = FTPExternal(m_ExternalServiceAddress);\r\n        m_DevAddress = payable(address(External));\r\n        m_TaxAlloc = new uint24[](0);\r\n        m_TaxAddresses = new address payable[](0);\r\n        m_TaxAlloc.push(0);\r\n        m_TaxAddresses.push(payable(address(0)));\r\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\r\n    }\r\n    function payTaxes(uint256 _eth, uint256 _d) internal virtual {\r\n        for (uint i = 1; i < m_TaxAlloc.length; i++) {\r\n            uint256 _alloc = m_TaxAlloc[i];\r\n            address payable _address = m_TaxAddresses[i];\r\n            uint256 _amount = _eth.mul(_alloc).div(_d);\r\n            if (_amount > 1){\r\n                _address.transfer(_amount);\r\n                if(_address == m_DevAddress)\r\n                    External.deposit(_amount);\r\n            }\r\n        }\r\n    }\r\n    function setTaxAlloc(address payable _address, uint256 _alloc) internal virtual onlyOwner() {\r\n        uint _idx = m_TaxIdx[_address];\r\n        if (_idx == 0) {\r\n            require(m_TotalAlloc.add(_alloc) <= 10500);\r\n            m_TaxAlloc.push(_alloc);\r\n            m_TaxAddresses.push(_address);\r\n            m_TaxIdx[_address] = m_TaxAlloc.length - 1;\r\n            m_TotalAlloc = m_TotalAlloc.add(_alloc);\r\n        } else { // update alloc for this address\r\n            uint256 _priorAlloc =  m_TaxAlloc[_idx];\r\n            require(m_TotalAlloc.add(_alloc).sub(_priorAlloc) <= 10500);  \r\n            m_TaxAlloc[_idx] = _alloc;\r\n            m_TotalAlloc = m_TotalAlloc.add(_alloc).sub(_priorAlloc);\r\n        }\r\n    }\r\n    function totalTaxAlloc() internal virtual view returns (uint256) {\r\n        return m_TotalAlloc;\r\n    }\r\n    function getTaxAlloc(address payable _address) public virtual onlyOwner() view returns (uint256) {\r\n        uint _idx = m_TaxIdx[_address];\r\n        return m_TaxAlloc[_idx];\r\n    }\r\n    function updateDevWallet(address payable _address, uint256 _alloc) public virtual onlyOwner() {\r\n        setTaxAlloc(m_DevAddress, 0);\r\n        m_DevAddress = _address;\r\n        m_DevAlloc = _alloc;\r\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\r\n    }\r\n}                                                                                    \r\ninterface IUniswapV2Factory {                                                         \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ninterface FTPAntiBot {\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function registerBlock(address _recipient, address _sender, address _origin) external;\r\n}\r\ninterface FTPEthReflect {\r\n    function init(address _contract, uint256 _alloc, address _pair, address _pairCurrency, uint256 _liquidity, uint256 _supply) external;\r\n    function getAlloc() external view returns (uint256);\r\n    function trackSell(address _holder, uint256 _newEth) external;\r\n    function trackPurchase(address _holder) external;\r\n}\r\ninterface FTPExternal {\r\n    function owner() external returns(address);\r\n    function deposit(uint256 _amount) external;\r\n}\r\ncontract ApeBullInu is Context, IERC20, Taxable {\r\n    using SafeMath for uint256;\r\n    // TOKEN\r\n    uint256 private constant TOTAL_SUPPLY = 100000000000000 * 10**9;\r\n    string private m_Name = \"ApeBullInu\";\r\n    string private m_Symbol = \"ABI\";\r\n    uint8 private m_Decimals = 9;\r\n    // EXCHANGES\r\n    address private m_UniswapV2Pair;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n    // TRANSACTIONS\r\n    uint256 private m_TxLimit  = 500000000000 * 10**9;\r\n    uint256 private m_WalletLimit = m_TxLimit.mul(4);\r\n    bool private m_Liquidity = false;\r\n    address payable m_controlAddress = payable(0xc6A2f2DEac4b940889F5988e3681452C4a7df74A);\r\n    event SetTxLimit(uint TxLimit);\r\n    // ETH REFLECT\r\n    FTPEthReflect private EthReflect;\r\n    address payable m_EthReflectSvcAddress = payable(0x574Fc478BC45cE144105Fa44D98B4B2e4BD442CB);\r\n    uint256 m_EthReflectAlloc = 8000;\r\n    uint256 m_EthReflectAmount;\r\n    // ANTIBOT\r\n    FTPAntiBot private AntiBot;\r\n    address private m_AntibotSvcAddress = 0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3;\r\n    uint256 private m_BanCount = 0;\r\n    // MISC\r\n    address private m_WebThree = 0x1011f61Df0E2Ad67e269f4108098c79e71868E00;\r\n    mapping (address => bool) private m_Blacklist;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    uint256 private m_LastEthBal = 0;\r\n    bool private m_Launched = false;\r\n    bool private m_IsSwap = false;\r\n    uint256 private pMax = 100000; // max alloc percentage\r\n\r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require( _msgSender() == External.owner() || _msgSender() == m_WebThree, \"Unauthorized\");\r\n        _;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n        EthReflect = FTPEthReflect(m_EthReflectSvcAddress);\r\n        AntiBot = FTPAntiBot(m_AntibotSvcAddress);\r\n        initTax();\r\n\r\n        m_Balances[address(this)] = TOTAL_SUPPLY;\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _readyToTax(address _sender) private view returns (bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair;\r\n    }\r\n    function _isBuy(address _sender) private view returns (bool) {\r\n        return _sender == m_UniswapV2Pair;\r\n    }\r\n    function _trader(address _sender, address _recipient) private view returns (bool) {\r\n        return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n    }\r\n    function _isExchangeTransfer(address _sender, address _recipient) private view returns (bool) {\r\n        return _sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair;\r\n    }\r\n    function _txRestricted(address _sender, address _recipient) private view returns (bool) {\r\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\r\n    }\r\n    function _walletCapped(address _recipient) private view returns (bool) {\r\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\r\n    }\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!m_Blacklist[_sender] && !m_Blacklist[_recipient] && !m_Blacklist[tx.origin]);\r\n        \r\n        if(_isExchangeTransfer(_sender, _recipient) && m_Launched) {\r\n            require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \"Beep Beep Boop, You're a piece of poop\");                                          \r\n            require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  \"Beep Beep Boop, You're a piece of poop\");\r\n            AntiBot.registerBlock(_sender, _recipient, tx.origin);\r\n        }\r\n         \r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);\r\n            \r\n        uint256 _taxes = 0;\r\n        if (_trader(_sender, _recipient)) {\r\n            require(m_Launched);\r\n            if (_txRestricted(_sender, _recipient)) \r\n                require(_amount <= m_TxLimit);\r\n            \r\n            _taxes = _getTaxes(_sender, _recipient, _amount);\r\n            _tax(_sender);\r\n        }\r\n        \r\n        _updateBalances(_sender, _recipient, _amount, _taxes);\r\n        _trackEthReflection(_sender, _recipient);\r\n\t}\r\n    function _updateBalances(address _sender, address _recipient, uint256 _amount, uint256 _taxes) private {\r\n        uint256 _netAmount = _amount.sub(_taxes);\r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_netAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_taxes);\r\n        emit Transfer(_sender, _recipient, _netAmount);\r\n    }\r\n    function _trackEthReflection(address _sender, address _recipient) private {\r\n        if (_trader(_sender, _recipient)) {\r\n            if (_isBuy(_sender))\r\n                EthReflect.trackPurchase(_recipient);\r\n            else if (m_EthReflectAmount > 0) {\r\n                EthReflect.trackSell(_sender, m_EthReflectAmount);\r\n                m_EthReflectAmount = 0;\r\n            }\r\n        }\r\n    }\r\n\tfunction _getTaxes(address _sender, address _recipient, uint256 _amount) private returns (uint256) {\r\n        uint256 _ret = 0;\r\n        if (m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]) {\r\n            return _ret;\r\n        }\r\n        _ret = _ret.add(_amount.div(pMax).mul(totalTaxAlloc()));\r\n        //m_EthReflectAlloc = EthReflect.getAlloc();\r\n        _ret = _ret.add(_amount.mul(m_EthReflectAlloc).div(pMax));\r\n        return _ret;\r\n    }\r\n    function _tax(address _sender) private {\r\n        if (_readyToTax(_sender)) {\r\n            uint256 _tokenBalance = balanceOf(address(this));\r\n            _swapTokensForETH(_tokenBalance);\r\n            _disperseEth();\r\n        }\r\n    }\r\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = m_UniswapV2Router.WETH();\r\n        _approve(address(this), address(m_UniswapV2Router), _amount);\r\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _getTaxDenominator() private view returns (uint) {\r\n        uint _ret = 0;\r\n        _ret = _ret.add(totalTaxAlloc());\r\n        _ret = _ret.add(m_EthReflectAlloc);\r\n        return _ret;\r\n    }\r\n    function _disperseEth() private {\r\n        uint256 _eth = address(this).balance;\r\n        if (_eth <= m_LastEthBal)\r\n            return;\r\n            \r\n        uint256 _newEth = _eth.sub(m_LastEthBal);\r\n        uint _d = _getTaxDenominator();\r\n        if (_d < 1)\r\n            return;\r\n\r\n        payTaxes(_newEth, _d);\r\n\r\n        m_EthReflectAmount = _newEth.mul(m_EthReflectAlloc).div(_d);\r\n        m_EthReflectSvcAddress.transfer(m_EthReflectAmount);\r\n\r\n        m_LastEthBal = address(this).balance;\r\n    }\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_Liquidity,\"Liquidity already added.\");\r\n        uint256 _ethBalance = address(this).balance;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        m_UniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n        EthReflect.init(address(this), 8000, m_UniswapV2Pair, _uniswapV2Router.WETH(), _ethBalance, TOTAL_SUPPLY);\r\n        m_Liquidity = true;\r\n    }\r\n    function launch() external onlyOwner() {\r\n        m_Launched = true;\r\n    }\r\n    function setTxLimit() external onlyOwner() {                                            \r\n        m_TxLimit = m_WalletLimit;\r\n        emit SetTxLimit(m_TxLimit);\r\n    }\r\n    function checkIfBlacklist(address _address) external view returns (bool) {\r\n        return m_Blacklist[_address];\r\n    }\r\n    function blacklist(address _a) external onlyOwner() {\r\n        m_Blacklist[_a] = true;\r\n    }\r\n    function rmBlacklist(address _a) external onlyOwner() {\r\n        m_Blacklist[_a] = false;\r\n    }\r\n    function updateTaxAlloc(address payable _address, uint _alloc) external onlyOwner() {\r\n        setTaxAlloc(_address, _alloc);\r\n        if (_alloc > 0) {\r\n            m_ExcludedAddresses[_address] = true;\r\n        }\r\n    }\r\n    function setWebThree(address _address) external onlyDev() {\r\n        m_WebThree = _address;\r\n    }\r\n    function theFlippening() external onlyOwner() {\r\n        if(m_EthReflectAlloc == 8000){\r\n            setTaxAlloc(m_controlAddress, 1000);\r\n            m_EthReflectAlloc = 12000;\r\n        }\r\n        else {\r\n            setTaxAlloc(m_controlAddress, 5000);\r\n            m_EthReflectAlloc = 8000;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TxLimit\",\"type\":\"uint256\"}],\"name\":\"SetTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_TotalAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWebThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theFlippening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateTaxAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ApeBullInu", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9a8a0c996c42690afa374367673264029609002deb5fd3916d77319dadb59300"}