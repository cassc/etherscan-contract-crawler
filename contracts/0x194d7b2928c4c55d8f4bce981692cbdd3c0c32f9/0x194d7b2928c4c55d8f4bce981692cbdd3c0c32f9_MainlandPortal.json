{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/mainnet/MainlandPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport {MerklePatriciaProof} from \\\"../../extLib/FxPortal/lib/MerklePatriciaProof.sol\\\";\\r\\nimport {Merkle} from \\\"../../extLib/FxPortal/lib/Merkle.sol\\\";\\r\\nimport \\\"../../extLib/FxPortal/lib/ExitPayloadReader.sol\\\";\\r\\n\\r\\ninterface IFxStateSender {\\r\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\r\\n}\\r\\n\\r\\ninterface ICheckpointManager {\\r\\n    function headerBlocks(uint256 headerBlock) external view returns (bytes32 root,uint256 start,uint256 end,uint256 createdAt,address proposer);\\r\\n}\\r\\n\\r\\n/// @dev This is portal that just execute the bridge from L1 <-> L2\\r\\ncontract MainlandPortal {\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n    using Merkle for bytes32;\\r\\n    using ExitPayloadReader for bytes;\\r\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\r\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\r\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\r\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    PORTAL STATE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address        implementation_;\\r\\n    address public admin;\\r\\n\\r\\n    // keccak256(MessageSent(bytes))\\r\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\r\\n\\r\\n    IFxStateSender     public fxRoot;\\r\\n    ICheckpointManager public checkpointManager;\\r\\n\\r\\n    address public polylandPortal;\\r\\n\\r\\n    mapping(bytes32 => bool) public processedExits;\\r\\n    mapping(address => bool) public auth;\\r\\n\\r\\n    event CallMade(address target, bool success, bytes data);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    ADMIN FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n    function setAdmin(address admin_) external {\\r\\n        require(msg.sender == admin);\\r\\n        admin = admin_;\\r\\n        auth[admin_] = true;\\r\\n    }\\r\\n\\r\\n    function setAuth(address[] calldata adds_, bool status) external {\\r\\n        require(msg.sender == admin, \\\"not admin\\\");\\r\\n        for (uint256 index = 0; index < adds_.length; index++) {\\r\\n            auth[adds_[index]] = status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initialize(address fxRoot_, address checkpointManager_, address polylandPortal_) external {\\r\\n        require(msg.sender == admin);\\r\\n\\r\\n        fxRoot            = IFxStateSender(fxRoot_);\\r\\n        checkpointManager = ICheckpointManager(checkpointManager_);\\r\\n        \\r\\n        polylandPortal = polylandPortal_;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    PORTAL FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n\\r\\n    function sendMessage(bytes calldata message_) external {\\r\\n        require(auth[msg.sender], \\\"not authorized to use portal\\\");\\r\\n\\r\\n        fxRoot.sendMessageToChild(polylandPortal, message_);\\r\\n    }\\r\\n\\r\\n    function replayCall(address target, bytes memory data, bool reqSuccess) external {\\r\\n        require(msg.sender == admin, \\\"not allowed\\\");\\r\\n        (bool succ, ) = target.call(data);\\r\\n        if (reqSuccess) require(succ, \\\"call failed\\\");\\r\\n    }\\r\\n\\r\\n    function forceProcessMessageFromChild(bytes memory data_) external {\\r\\n        require(msg.sender == admin, \\\"not allowed\\\");\\r\\n        _processMessageFromChild(data_);\\r\\n    }\\r\\n\\r\\n    /// @dev executed when we receive a message from Polygon\\r\\n    function _processMessageFromChild(bytes memory data) internal {\\r\\n        (address target, bytes[] memory calls ) = abi.decode(data, (address, bytes[]));\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool succ, ) = target.call(calls[i]);\\r\\n            emit CallMade(target, succ, calls[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    FXPORTAL FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    // taken from https://github.com/fx-portal/contracts\\r\\n\\r\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\r\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\r\\n\\r\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\r\\n        uint256 blockNumber = payload.getBlockNumber();\\r\\n        // checking if exit has already been processed\\r\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\r\\n        bytes32 exitHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                blockNumber,\\r\\n                // first 2 nibbles are dropped while generating nibble array\\r\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\r\\n                // so converting to nibble array and then hashing it\\r\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\r\\n                payload.getReceiptLogIndex()\\r\\n            )\\r\\n        );\\r\\n        require(\\r\\n            processedExits[exitHash] == false,\\r\\n            \\\"MainlandPortal: EXIT_ALREADY_PROCESSED\\\"\\r\\n        );\\r\\n        processedExits[exitHash] = true;\\r\\n\\r\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\r\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\r\\n\\r\\n        // check child tunnel\\r\\n        require(polylandPortal == log.getEmitter(), \\\"MainlandPortal: INVALID_FX_CHILD_TUNNEL\\\");\\r\\n\\r\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\r\\n        // verify receipt inclusion\\r\\n        require(\\r\\n            MerklePatriciaProof.verify(\\r\\n                receipt.toBytes(), \\r\\n                branchMaskBytes, \\r\\n                payload.getReceiptProof(), \\r\\n                receiptRoot\\r\\n            ),\\r\\n            \\\"MainlandPortal: INVALID_RECEIPT_PROOF\\\"\\r\\n        );\\r\\n\\r\\n        // verify checkpoint inclusion\\r\\n        _checkBlockMembershipInCheckpoint(\\r\\n            blockNumber,\\r\\n            payload.getBlockTime(),\\r\\n            payload.getTxRoot(),\\r\\n            receiptRoot,\\r\\n            payload.getHeaderNumber(),\\r\\n            payload.getBlockProof()\\r\\n        );\\r\\n\\r\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\r\\n\\r\\n        require(\\r\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\r\\n            \\\"MainlandPortal: INVALID_SIGNATURE\\\"\\r\\n        );\\r\\n\\r\\n        // received message data\\r\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\r\\n        return message;\\r\\n    }\\r\\n\\r\\n    function _checkBlockMembershipInCheckpoint(\\r\\n        uint256 blockNumber,\\r\\n        uint256 blockTime,\\r\\n        bytes32 txRoot,\\r\\n        bytes32 receiptRoot,\\r\\n        uint256 headerNumber,\\r\\n        bytes memory blockProof\\r\\n    ) private view returns (uint256) {\\r\\n        (\\r\\n            bytes32 headerRoot,\\r\\n            uint256 startBlock,\\r\\n            ,\\r\\n            uint256 createdAt,\\r\\n\\r\\n        ) = checkpointManager.headerBlocks(headerNumber);\\r\\n\\r\\n        require(\\r\\n            keccak256(\\r\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\r\\n            )\\r\\n                .checkMembership(\\r\\n                blockNumber-startBlock,\\r\\n                headerRoot,\\r\\n                blockProof\\r\\n            ),\\r\\n            \\\"MainlandPortal: INVALID_HEADER\\\"\\r\\n        );\\r\\n        return createdAt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice receive message from  L2 to L1, validated by proof\\r\\n     * @dev This function verifies if the transaction actually happened on child chain\\r\\n     *\\r\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\r\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\r\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\r\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\r\\n     *  3 - blockTime - Reference tx block time\\r\\n     *  4 - txRoot - Transactions root of block\\r\\n     *  5 - receiptRoot - Receipts root of block\\r\\n     *  6 - receipt - Receipt of the reference transaction\\r\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\r\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\r\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\r\\n     */\\r\\n    function receiveMessage(bytes calldata inputData) public virtual {\\r\\n        bytes memory message = _validateAndExtractMessage(inputData);\\r\\n        _processMessageFromChild(message);\\r\\n    }\\r\\n    \\r\\n}\"\r\n    },\r\n    \"extLib/FxPortal/lib/MerklePatriciaProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\r\\n\\r\\nlibrary MerklePatriciaProof {\\r\\n    /*\\r\\n     * @dev Verifies a merkle patricia proof.\\r\\n     * @param value The terminating value in the trie.\\r\\n     * @param encodedPath The path in the trie leading to value.\\r\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\r\\n     * @param root The root hash of the trie.\\r\\n     * @return The boolean validity of the proof.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes memory value,\\r\\n        bytes memory encodedPath,\\r\\n        bytes memory rlpParentNodes,\\r\\n        bytes32 root\\r\\n    ) internal pure returns (bool) {\\r\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\r\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\r\\n\\r\\n        bytes memory currentNode;\\r\\n        RLPReader.RLPItem[] memory currentNodeList;\\r\\n\\r\\n        bytes32 nodeKey = root;\\r\\n        uint256 pathPtr = 0;\\r\\n\\r\\n        bytes memory path = _getNibbleArray(encodedPath);\\r\\n        if (path.length == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\r\\n            if (pathPtr > path.length) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\r\\n            if (nodeKey != keccak256(currentNode)) {\\r\\n                return false;\\r\\n            }\\r\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\r\\n\\r\\n            if (currentNodeList.length == 17) {\\r\\n                if (pathPtr == path.length) {\\r\\n                    if (\\r\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\r\\n                        keccak256(value)\\r\\n                    ) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\r\\n                if (nextPathNibble > 16) {\\r\\n                    return false;\\r\\n                }\\r\\n                nodeKey = bytes32(\\r\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\r\\n                );\\r\\n                pathPtr += 1;\\r\\n            } else if (currentNodeList.length == 2) {\\r\\n                uint256 traversed = _nibblesToTraverse(\\r\\n                    RLPReader.toBytes(currentNodeList[0]),\\r\\n                    path,\\r\\n                    pathPtr\\r\\n                );\\r\\n                if (pathPtr + traversed == path.length) {\\r\\n                    //leaf node\\r\\n                    if (\\r\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\r\\n                        keccak256(value)\\r\\n                    ) {\\r\\n                        return true;\\r\\n                    } else {\\r\\n                        return false;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //extension node\\r\\n                if (traversed == 0) {\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                pathPtr += traversed;\\r\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\r\\n            } else {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _nibblesToTraverse(\\r\\n        bytes memory encodedPartialPath,\\r\\n        bytes memory path,\\r\\n        uint256 pathPtr\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 len = 0;\\r\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\r\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\r\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\r\\n        bytes memory slicedPath = new bytes(partialPath.length);\\r\\n\\r\\n        // pathPtr counts nibbles in path\\r\\n        // partialPath.length is a number of nibbles\\r\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\r\\n            bytes1 pathNibble = path[i];\\r\\n            slicedPath[i - pathPtr] = pathNibble;\\r\\n        }\\r\\n\\r\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\r\\n            len = partialPath.length;\\r\\n        } else {\\r\\n            len = 0;\\r\\n        }\\r\\n        return len;\\r\\n    }\\r\\n\\r\\n    // bytes b must be hp encoded\\r\\n    function _getNibbleArray(bytes memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory nibbles = \\\"\\\";\\r\\n        if (b.length > 0) {\\r\\n            uint8 offset;\\r\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\r\\n            if (hpNibble == 1 || hpNibble == 3) {\\r\\n                nibbles = new bytes(b.length * 2 - 1);\\r\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\r\\n                nibbles[0] = oddNibble;\\r\\n                offset = 1;\\r\\n            } else {\\r\\n                nibbles = new bytes(b.length * 2 - 2);\\r\\n                offset = 0;\\r\\n            }\\r\\n\\r\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\r\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\r\\n            }\\r\\n        }\\r\\n        return nibbles;\\r\\n    }\\r\\n\\r\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\r\\n        private\\r\\n        pure\\r\\n        returns (bytes1)\\r\\n    {\\r\\n        return\\r\\n            bytes1(\\r\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\r\\n            );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"extLib/FxPortal/lib/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Merkle {\\r\\n    function checkMembership(\\r\\n        bytes32 leaf,\\r\\n        uint256 index,\\r\\n        bytes32 rootHash,\\r\\n        bytes memory proof\\r\\n    ) internal pure returns (bool) {\\r\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\r\\n        uint256 proofHeight = proof.length / 32;\\r\\n        // Proof of size n means, height of the tree is n+1.\\r\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\r\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\r\\n\\r\\n        bytes32 proofElement;\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\r\\n            assembly {\\r\\n                proofElement := mload(add(proof, i))\\r\\n            }\\r\\n\\r\\n            if (index % 2 == 0) {\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(computedHash, proofElement)\\r\\n                );\\r\\n            } else {\\r\\n                computedHash = keccak256(\\r\\n                    abi.encodePacked(proofElement, computedHash)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            index = index / 2;\\r\\n        }\\r\\n        return computedHash == rootHash;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"extLib/FxPortal/lib/ExitPayloadReader.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\r\\n\\r\\nlibrary ExitPayloadReader {\\r\\n  using RLPReader for bytes;\\r\\n  using RLPReader for RLPReader.RLPItem;\\r\\n\\r\\n  uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n  struct ExitPayload {\\r\\n    RLPReader.RLPItem[] data;\\r\\n  }\\r\\n\\r\\n  struct Receipt {\\r\\n    RLPReader.RLPItem[] data;\\r\\n    bytes raw;\\r\\n    uint256 logIndex;\\r\\n  }\\r\\n\\r\\n  struct Log {\\r\\n    RLPReader.RLPItem data;\\r\\n    RLPReader.RLPItem[] list;\\r\\n  }\\r\\n\\r\\n  struct LogTopics {\\r\\n    RLPReader.RLPItem[] data;\\r\\n  }\\r\\n\\r\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\r\\n  function copy(uint src, uint dest, uint len) private pure {\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // copy as many word sizes as possible\\r\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n\\r\\n            src += WORD_SIZE;\\r\\n            dest += WORD_SIZE;\\r\\n        }\\r\\n\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\r\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\r\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n  function toExitPayload(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (ExitPayload memory)\\r\\n    {\\r\\n        RLPReader.RLPItem[] memory payloadData = data\\r\\n            .toRlpItem()\\r\\n            .toList();\\r\\n\\r\\n        return ExitPayload(payloadData);\\r\\n    }\\r\\n\\r\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\r\\n      return payload.data[0].toUint();\\r\\n    }\\r\\n\\r\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\r\\n      return payload.data[1].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\r\\n      return payload.data[2].toUint();\\r\\n    }\\r\\n\\r\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\r\\n      return payload.data[3].toUint();\\r\\n    }\\r\\n\\r\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\r\\n      return bytes32(payload.data[4].toUint());\\r\\n    }\\r\\n\\r\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\r\\n      return bytes32(payload.data[5].toUint());\\r\\n    }\\r\\n\\r\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\r\\n      receipt.raw = payload.data[6].toBytes();\\r\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\r\\n\\r\\n      if (receiptItem.isList()) {\\r\\n          // legacy tx\\r\\n          receipt.data = receiptItem.toList();\\r\\n      } else {\\r\\n          // pop first byte before parsting receipt\\r\\n          bytes memory typedBytes = receipt.raw;\\r\\n          bytes memory result = new bytes(typedBytes.length - 1);\\r\\n          uint256 srcPtr;\\r\\n          uint256 destPtr;\\r\\n          assembly {\\r\\n              srcPtr := add(33, typedBytes)\\r\\n              destPtr := add(0x20, result)\\r\\n          }\\r\\n\\r\\n          copy(srcPtr, destPtr, result.length);\\r\\n          receipt.data = result.toRlpItem().toList();\\r\\n      }\\r\\n\\r\\n      receipt.logIndex = getReceiptLogIndex(payload);\\r\\n      return receipt;\\r\\n    }\\r\\n\\r\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\r\\n      return payload.data[7].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\r\\n      return payload.data[8].toBytes();\\r\\n    }\\r\\n\\r\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\r\\n      return payload.data[8].toUint();\\r\\n    }\\r\\n\\r\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\r\\n      return payload.data[9].toUint();\\r\\n    }\\r\\n    \\r\\n    // Receipt methods\\r\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\r\\n        return receipt.raw;\\r\\n    }\\r\\n\\r\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\r\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\r\\n        return Log(logData, logData.toList());\\r\\n    }\\r\\n\\r\\n    // Log methods\\r\\n    function getEmitter(Log memory log) internal pure returns(address) {\\r\\n      return RLPReader.toAddress(log.list[0]);\\r\\n    }\\r\\n\\r\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\r\\n        return LogTopics(log.list[1].toList());\\r\\n    }\\r\\n\\r\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\r\\n        return log.list[2].toBytes();\\r\\n    }\\r\\n\\r\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\r\\n      return log.data.toRlpBytes();\\r\\n    }\\r\\n\\r\\n    // LogTopics methods\\r\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\r\\n      return topics.data[index];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"extLib/FxPortal/lib/RLPReader.sol\": {\r\n      \"content\": \"/*\\r\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\r\\n* Please reach out with any questions or concerns\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary RLPReader {\\r\\n    uint8 constant STRING_SHORT_START = 0x80;\\r\\n    uint8 constant STRING_LONG_START  = 0xb8;\\r\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\r\\n    uint8 constant LIST_LONG_START    = 0xf8;\\r\\n    uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n    struct RLPItem {\\r\\n        uint len;\\r\\n        uint memPtr;\\r\\n    }\\r\\n\\r\\n    struct Iterator {\\r\\n        RLPItem item;   // Item that's being iterated over.\\r\\n        uint nextPtr;   // Position of the next item in the list.\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\r\\n    * @param self The iterator.\\r\\n    * @return The next element in the iteration.\\r\\n    */\\r\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\r\\n        require(hasNext(self));\\r\\n\\r\\n        uint ptr = self.nextPtr;\\r\\n        uint itemLength = _itemLength(ptr);\\r\\n        self.nextPtr = ptr + itemLength;\\r\\n\\r\\n        return RLPItem(itemLength, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev Returns true if the iteration has more elements.\\r\\n    * @param self The iterator.\\r\\n    * @return true if the iteration has more elements.\\r\\n    */\\r\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\r\\n        RLPItem memory item = self.item;\\r\\n        return self.nextPtr < item.memPtr + item.len;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @param item RLP encoded bytes\\r\\n    */\\r\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\r\\n        uint memPtr;\\r\\n        assembly {\\r\\n            memPtr := add(item, 0x20)\\r\\n        }\\r\\n\\r\\n        return RLPItem(item.length, memPtr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev Create an iterator. Reverts if item is not a list.\\r\\n    * @param self The RLP item.\\r\\n    * @return An 'Iterator' over the item.\\r\\n    */\\r\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\r\\n        require(isList(self));\\r\\n\\r\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\r\\n        return Iterator(self, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @param item RLP encoded bytes\\r\\n    */\\r\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\r\\n        return item.len;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @param item RLP encoded bytes\\r\\n    */\\r\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\r\\n        return item.len - _payloadOffset(item.memPtr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @param item RLP encoded list in bytes\\r\\n    */\\r\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\r\\n        require(isList(item));\\r\\n\\r\\n        uint items = numItems(item);\\r\\n        RLPItem[] memory result = new RLPItem[](items);\\r\\n\\r\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint dataLen;\\r\\n        for (uint i = 0; i < items; i++) {\\r\\n            dataLen = _itemLength(memPtr);\\r\\n            result[i] = RLPItem(dataLen, memPtr); \\r\\n            memPtr = memPtr + dataLen;\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\r\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\r\\n        if (item.len == 0) return false;\\r\\n\\r\\n        uint8 byte0;\\r\\n        uint memPtr = item.memPtr;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < LIST_SHORT_START)\\r\\n            return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\r\\n     * @return keccak256 hash of RLP encoded bytes.\\r\\n     */\\r\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\r\\n        uint256 ptr = item.memPtr;\\r\\n        uint256 len = item.len;\\r\\n        bytes32 result;\\r\\n        assembly {\\r\\n            result := keccak256(ptr, len)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\r\\n        uint offset = _payloadOffset(item.memPtr);\\r\\n        uint memPtr = item.memPtr + offset;\\r\\n        uint len = item.len - offset; // data length\\r\\n        return (memPtr, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\r\\n     * @return keccak256 hash of the item payload.\\r\\n     */\\r\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\r\\n        (uint memPtr, uint len) = payloadLocation(item);\\r\\n        bytes32 result;\\r\\n        assembly {\\r\\n            result := keccak256(memPtr, len)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /** RLPItem conversions into data types **/\\r\\n\\r\\n    // @returns raw rlp encoding in bytes\\r\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\r\\n        bytes memory result = new bytes(item.len);\\r\\n        if (result.length == 0) return result;\\r\\n        \\r\\n        uint ptr;\\r\\n        assembly {\\r\\n            ptr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr, ptr, item.len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // any non-zero byte is considered true\\r\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\r\\n        require(item.len == 1);\\r\\n        uint result;\\r\\n        uint memPtr = item.memPtr;\\r\\n        assembly {\\r\\n            result := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        return result == 0 ? false : true;\\r\\n    }\\r\\n\\r\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\r\\n        // 1 byte for the length prefix\\r\\n        require(item.len == 21);\\r\\n\\r\\n        return address(uint160(toUint(item)));\\r\\n    }\\r\\n\\r\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\r\\n        require(item.len > 0 && item.len <= 33);\\r\\n\\r\\n        uint offset = _payloadOffset(item.memPtr);\\r\\n        uint len = item.len - offset;\\r\\n\\r\\n        uint result;\\r\\n        uint memPtr = item.memPtr + offset;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n\\r\\n            // shfit to the correct location if neccesary\\r\\n            if lt(len, 32) {\\r\\n                result := div(result, exp(256, sub(32, len)))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // enforces 32 byte length\\r\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\r\\n        // one byte prefix\\r\\n        require(item.len == 33);\\r\\n\\r\\n        uint result;\\r\\n        uint memPtr = item.memPtr + 1;\\r\\n        assembly {\\r\\n            result := mload(memPtr)\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\r\\n        require(item.len > 0);\\r\\n\\r\\n        uint offset = _payloadOffset(item.memPtr);\\r\\n        uint len = item.len - offset; // data length\\r\\n        bytes memory result = new bytes(len);\\r\\n\\r\\n        uint destPtr;\\r\\n        assembly {\\r\\n            destPtr := add(0x20, result)\\r\\n        }\\r\\n\\r\\n        copy(item.memPtr + offset, destPtr, len);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Private Helpers\\r\\n    */\\r\\n\\r\\n    // @return number of payload items inside an encoded list.\\r\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\r\\n        if (item.len == 0) return 0;\\r\\n\\r\\n        uint count = 0;\\r\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\r\\n        uint endPtr = item.memPtr + item.len;\\r\\n        while (currPtr < endPtr) {\\r\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\r\\n           count++;\\r\\n        }\\r\\n\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    // @return entire rlp item byte length\\r\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\r\\n        uint itemLen;\\r\\n        uint byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START)\\r\\n            itemLen = 1;\\r\\n        \\r\\n        else if (byte0 < STRING_LONG_START)\\r\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\r\\n\\r\\n        else if (byte0 < LIST_SHORT_START) {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\r\\n                memPtr := add(memPtr, 1) // skip over the first byte\\r\\n                /* 32 byte word size */\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        else if (byte0 < LIST_LONG_START) {\\r\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\r\\n        } \\r\\n\\r\\n        else {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xf7)\\r\\n                memPtr := add(memPtr, 1)\\r\\n\\r\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return itemLen;\\r\\n    }\\r\\n\\r\\n    // @return number of bytes until the data\\r\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\r\\n        uint byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, mload(memPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) \\r\\n            return 0;\\r\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\r\\n            return 1;\\r\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\r\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\r\\n        else\\r\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @param src Pointer to source\\r\\n    * @param dest Pointer to destination\\r\\n    * @param len Amount of memory to copy from the source\\r\\n    */\\r\\n    function copy(uint src, uint dest, uint len) private pure {\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // copy as many word sizes as possible\\r\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n\\r\\n            src += WORD_SIZE;\\r\\n            dest += WORD_SIZE;\\r\\n        }\\r\\n\\r\\n        if (len == 0) return;\\r\\n\\r\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\r\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\r\\n\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\r\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"forceProcessMessageFromChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fxRoot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"checkpointManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"polylandPortal_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polylandPortal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"reqSuccess\",\"type\":\"bool\"}],\"name\":\"replayCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MainlandPortal", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}