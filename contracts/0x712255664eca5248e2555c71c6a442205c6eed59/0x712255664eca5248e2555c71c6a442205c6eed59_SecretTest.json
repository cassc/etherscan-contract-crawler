{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract SecretTest {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    string public name = \"SpookySeason - TEST 2\";\r\n    string public symbol = \"SPOOKY -- TEST 2\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 420e6 * 10**18;  // 420 Million tokens with 18 decimals\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address public owner = msg.sender;\r\n    address constant DEV_WALLET_ADDRESS = 0x796386096362924F626aedF797152FF3fE111570;\r\n    address public devWallet = DEV_WALLET_ADDRESS;\r\n    uint256 public buyTax = 30;\r\n    uint256 public sellTax = 30;\r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply.sub(4.2e6 * 10**18);\r\n        balanceOf[0x26e272159783a0B4DD3b266455264e2E1f2920Ab] = 4.2e6 * 10**18;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function setBlacklisted(address _address, bool _blacklisted) external onlyOwner {\r\n        _isBlacklisted[_address] = _blacklisted;\r\n    }\r\n\r\n    function trickOrTreat(uint256 wagerAmount) external {\r\n        require(balanceOf[msg.sender] >= wagerAmount, \"Insufficient balance to wager\");\r\n        uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 10;\r\n        if (random < 5) {\r\n            transfer(devWallet, wagerAmount);  // User loses wagered amount\r\n        } else {\r\n            balanceOf[devWallet] = balanceOf[devWallet].sub(wagerAmount);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(wagerAmount);\r\n            emit Transfer(devWallet, msg.sender, wagerAmount);  // User gains wagered amount\r\n        }\r\n    }\r\n\r\n   function buyTokensWithETH() external payable {\r\n    uint256 ethAmount = msg.value;\r\n    uint256 ethTax = ethAmount.mul(buyTax).div(100);\r\n    payable(devWallet).transfer(ethTax);\r\n\r\n    uint256 ethForSwap = ethAmount.sub(ethTax);\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = WETH;\r\n    path[1] = address(this);\r\n\r\n    // Estimate token output\r\n    uint256 estimatedTokenOutput = getEstimatedTokenForETH(ethForSwap)[1];\r\n    uint256 amountOutMin = estimatedTokenOutput.mul(95).div(100); // Setting slippage to 5%\r\n\r\n    // Swap ETH for SPOOKY\r\n    uniswapRouter.swapExactETHForTokens{ value: ethForSwap }(\r\n        amountOutMin,\r\n        path,\r\n        msg.sender,\r\n        block.timestamp.add(20 minutes)\r\n    );\r\n}\r\n\r\n// Add this helper function to get estimated SPOOKY tokens for a given ETH amount\r\nfunction getEstimatedTokenForETH(uint256 ethAmount) public view returns (uint[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = WETH;\r\n    path[1] = address(this);\r\n    \r\n    return uniswapRouter.getAmountsOut(ethAmount, path);\r\n}\r\n\r\n\r\nfunction sellTokensForETH(uint256 tokenAmount) external {\r\n    require(balanceOf[msg.sender] >= tokenAmount, \"Insufficient token balance to sell\");\r\n\r\n    uint256 ethBeforeSwap = address(this).balance;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this); // SPOOKY token address\r\n    path[1] = WETH; // WETH address\r\n\r\n    // Transfer the tokens to the contract\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(tokenAmount);\r\n    balanceOf[address(this)] = balanceOf[address(this)].add(tokenAmount);\r\n    emit Transfer(msg.sender, address(this), tokenAmount);\r\n\r\n    // Approve the router to spend the tokens\r\n    allowance[address(this)][address(uniswapRouter)] = tokenAmount;\r\n\r\n    // Estimate ETH output\r\n    uint256 estimatedETHOutput = getEstimatedETHForToken(tokenAmount)[1];\r\n    uint256 amountOutMin = estimatedETHOutput.mul(95).div(100); // Setting slippage to 5%\r\n\r\n    // Swap the tokens for ETH\r\n    uniswapRouter.swapExactTokensForETH(\r\n        tokenAmount,\r\n        amountOutMin,\r\n        path,\r\n        address(this),\r\n        block.timestamp.add(20 minutes)\r\n    );\r\n\r\n    uint256 ethAfterSwap = address(this).balance;\r\n    uint256 ethFromSwap = ethAfterSwap.sub(ethBeforeSwap);\r\n    uint256 ethTax = ethFromSwap.mul(sellTax).div(100);\r\n    \r\n    payable(devWallet).transfer(ethTax);\r\n\r\n    uint256 ethForUser = ethFromSwap.sub(ethTax);\r\n    payable(msg.sender).transfer(ethForUser);\r\n}\r\n\r\n// Add this helper function to get estimated ETH for a given token amount\r\nfunction getEstimatedETHForToken(uint256 tokenAmount) public view returns (uint[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = WETH;\r\n    \r\n    return uniswapRouter.getAmountsOut(tokenAmount, path);\r\n}\r\n   \r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_isBlacklisted[sender], \"Address is blacklisted\");\r\n\r\n        balanceOf[sender] = balanceOf[sender].sub(amount);\r\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(amount <= allowance[sender][msg.sender], \"Transfer amount exceeds allowance\");\r\n        allowance[sender][msg.sender] = allowance[sender][msg.sender].sub(amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) external onlyOwner {\r\n    payable(owner).transfer(amount);\r\n}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Division by zero\");\r\n        return a / b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedETHForToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedTokenForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wagerAmount\",\"type\":\"uint256\"}],\"name\":\"trickOrTreat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SecretTest", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1bc1018ad362b6009dfd98ee1f09500901c94ed72c2477f8cf7a42ac83b79211"}