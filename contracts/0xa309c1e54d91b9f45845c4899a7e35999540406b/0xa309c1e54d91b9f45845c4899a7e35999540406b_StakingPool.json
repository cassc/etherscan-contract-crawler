{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./libs/math/BoringMath.sol\\\";\\r\\nimport './libs/access/Ownable.sol';\\r\\nimport './libs/token/ERC20/IERC20.sol';\\r\\nimport './libs/token/ERC20/SafeERC20.sol';\\r\\nimport \\\"./libs/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./libs/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"./libs/interfaces/IRewarder.sol\\\";\\r\\n\\r\\ncontract StakingPool is Ownable, ReentrancyGuard {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringMath128 for uint128;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    /// @notice Info of each StakingPool user.\\r\\n    /// `amount` LP token amount the user has deposited.\\r\\n    /// `rewardDebt` The amount of reward debt - See below:\\r\\n    /// At any point in time, the amount of AMDX entitled to a user but is pending to be distributed is:\\r\\n    /// pending reward = (user.amount * pool.accAmdxPerShare) - user.rewardDebt\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        int256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each StakingPool pool.\\r\\n    /// `totalLp` The amount of token deposited in the pool.\\r\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\r\\n    struct PoolInfo {\\r\\n        uint256 totalLp;\\r\\n        uint128 accAmdxPerShare;\\r\\n        uint64 lastRewardBlock;\\r\\n        uint64 allocPoint;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of AMDX contract.\\r\\n    IERC20 public immutable AMDX;\\r\\n\\r\\n    /// @notice Info of each StakingPool pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    /// @notice Address of the LP token for each StakingPool pool.\\r\\n    IERC20[] public lpToken;\\r\\n\\r\\n    /// @notice Address of each `IRewarder` contract in StakingPool.\\r\\n    IRewarder[] public rewarder;\\r\\n\\r\\n    /// @notice Info of each user that deposited LP tokens.\\r\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\r\\n\\r\\n    /// @notice Mappings of blacklisted wallets\\r\\n    mapping(address => bool) public isBlackListed;\\r\\n\\r\\n    /// @dev Time when users can start staking and farming.\\r\\n    uint256 public startTime;\\r\\n\\r\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint;\\r\\n\\r\\n    /// @notice Total amount of AMDX deposited in pools\\r\\n    uint256 public totalAmdxInPools;\\r\\n\\r\\n    uint256 private AMDX_PER_BLOCK;\\r\\n    uint256 private constant ACC_AMDX_PRECISION = 1e12;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event SetAmdxPerBlock(uint256 oldAmdxPerBlock, uint256 newAmdxPerBlock);\\r\\n    event SetBlackListed(address indexed user, bool indexed status);\\r\\n    event WithdrawAmdxReward(uint256 indexed amount);\\r\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\\r\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\\r\\n    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accAmdxPerShare);\\r\\n    \\r\\n    /// @param _amdx The AMDX contract address.\\r\\n    /// @param _startTime The StakingPool start time.\\r\\n    /// @param _amdxPerBlock The AMDX reward amount allocated per block.\\r\\n    constructor(IERC20 _amdx, uint256 _startTime, uint256 _amdxPerBlock) public {\\r\\n        AMDX = _amdx;\\r\\n        startTime = _startTime;\\r\\n        AMDX_PER_BLOCK = _amdxPerBlock;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the remaining AMDX rewards in StakingPool\\r\\n    function remainingRewards() external view returns (uint256 amdxRewardsLeft) {\\r\\n        amdxRewardsLeft = AMDX.balanceOf(address(this)).sub(totalAmdxInPools);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of StakingPool pools.\\r\\n    function poolLength() public view returns (uint256 pools) {\\r\\n        pools = poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Pool existence: used to avoid adding duplicate LP token pool\\r\\n    mapping(IERC20 => bool) public poolExistence;\\r\\n    modifier nonDuplicated(IERC20 _lpToken) {\\r\\n        require(!poolExistence[_lpToken], \\\"nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Validate pool by pid: used to ensure that only existing pools are accessed\\r\\n    modifier validatePoolByPid(uint256 _pid) {\\r\\n        require(poolInfo.length > _pid, \\\"validatePoolByPid: pool does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\r\\n    /// @param _allocPoint AP of the new pool.\\r\\n    /// @param _lpToken Address of the LP ERC20 token.\\r\\n    /// @param _rewarder Address of the rewarder delegate.\\r\\n    function add(uint256 _allocPoint, IERC20 _lpToken, IRewarder _rewarder) external onlyOwner nonDuplicated(_lpToken){\\r\\n        uint256 lastRewardBlock = block.number;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        lpToken.push(_lpToken);\\r\\n        rewarder.push(_rewarder);\\r\\n        poolExistence[_lpToken] = true;\\r\\n\\r\\n        poolInfo.push(PoolInfo({\\r\\n            allocPoint: _allocPoint.to64(),\\r\\n            lastRewardBlock: lastRewardBlock.to64(),\\r\\n            accAmdxPerShare: 0,\\r\\n            totalLp: 0\\r\\n        }));\\r\\n\\r\\n        emit LogPoolAddition(lpToken.length.sub(1), _allocPoint, _lpToken, _rewarder);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the given pool's AMDX allocation point and `IRewarder` contract. Can only be called by the owner.\\r\\n    /// @param _pid The index of the pool.\\r\\n    /// @param _allocPoint New AP of the pool.\\r\\n    /// @param _rewarder Address of the rewarder delegate.\\r\\n    /// @param _overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\r\\n    function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool _overwrite) external validatePoolByPid(_pid) onlyOwner {\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint.to64();\\r\\n        if (_overwrite) { rewarder[_pid] = _rewarder; }\\r\\n        emit LogSetPool(_pid, _allocPoint, _overwrite ? _rewarder : rewarder[_pid], _overwrite);\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pending AMDX on frontend.\\r\\n    /// @param _pid The index of the pool. See `poolInfo`.\\r\\n    /// @param _user Address of user.\\r\\n    /// @return pending AMDX reward for a given user.\\r\\n    function pendingAmdx(uint256 _pid, address _user) external view returns (uint256 pending) {\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accAmdxPerShare = pool.accAmdxPerShare;\\r\\n        if (block.number > pool.lastRewardBlock && pool.totalLp != 0) {\\r\\n            uint256 blocks = block.number.sub(pool.lastRewardBlock);\\r\\n            uint256 amdxReward = blocks.mul(AMDX_PER_BLOCK).mul(pool.allocPoint) / totalAllocPoint;\\r\\n            accAmdxPerShare = accAmdxPerShare.add(amdxReward.mul(ACC_AMDX_PRECISION) / pool.totalLp);\\r\\n        }\\r\\n        pending = int256(user.amount.mul(accAmdxPerShare) / ACC_AMDX_PRECISION).sub(user.rewardDebt).toUInt256();\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\r\\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\r\\n    function massUpdatePools(uint256[] calldata pids) external {\\r\\n        uint256 len = pids.length;\\r\\n        for (uint256 i = 0; i < len; ++i) {\\r\\n            updatePool(pids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables of the given pool.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool(uint256 pid) public validatePoolByPid(pid) returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo[pid];\\r\\n        if (block.number > pool.lastRewardBlock) {\\r\\n            if (pool.totalLp > 0) {\\r\\n                uint256 blocks = block.number.sub(pool.lastRewardBlock);\\r\\n                uint256 amdxReward = blocks.mul(AMDX_PER_BLOCK).mul(pool.allocPoint) / totalAllocPoint;\\r\\n                pool.accAmdxPerShare = pool.accAmdxPerShare.add((amdxReward.mul(ACC_AMDX_PRECISION) / pool.totalLp).to128());\\r\\n            }\\r\\n            pool.lastRewardBlock = block.number.to64();\\r\\n            poolInfo[pid] = pool;\\r\\n            emit LogUpdatePool(pid, pool.lastRewardBlock, pool.totalLp, pool.accAmdxPerShare);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit LP tokens to StakingPool for AMDX allocation.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @param amount LP token amount to deposit.\\r\\n    /// @param to The receiver of `amount` deposit benefit.\\r\\n    function deposit(uint256 pid, uint256 amount, address to) external validatePoolByPid(pid) nonReentrant {\\r\\n        require(block.timestamp >= startTime, \\\"deposit: staking has not started\\\");\\r\\n        require(amount > 0, \\\"deposit: amount is 0\\\");\\r\\n        require(to != address(0), \\\"deposit: receiver is the zero address\\\");\\r\\n\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][to];\\r\\n\\r\\n        user.amount = user.amount.add(amount);\\r\\n        user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accAmdxPerShare) / ACC_AMDX_PRECISION));\\r\\n        \\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onAmdxReward(pid, to, to, 0, user.amount);\\r\\n        }\\r\\n\\r\\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\r\\n        pool.totalLp = pool.totalLp.add(amount);\\r\\n        poolInfo[pid] = pool;\\r\\n\\r\\n        if(address(lpToken[pid]) == address(AMDX)){\\r\\n            totalAmdxInPools = totalAmdxInPools.add(amount);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw single staked LP tokens from StakingPool.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function withdraw(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {\\r\\n        require(to != address(0), \\\"withdraw: receiver is the zero address\\\");\\r\\n\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n\\r\\n        uint256 amount = user.amount;\\r\\n        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accAmdxPerShare) / ACC_AMDX_PRECISION));\\r\\n        user.amount = 0;\\r\\n\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onAmdxReward(pid, msg.sender, to, 0, user.amount);\\r\\n        }\\r\\n        \\r\\n        lpToken[pid].safeTransfer(to, amount);\\r\\n        pool.totalLp = pool.totalLp.sub(amount);\\r\\n        poolInfo[pid] = pool;\\r\\n\\r\\n        if(address(lpToken[pid]) == address(AMDX)){\\r\\n            totalAmdxInPools = totalAmdxInPools.sub(amount);\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @param to Receiver of AMDX rewards.\\r\\n    function harvest(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {\\r\\n        require(to != address(0), \\\"harvest: receiver is the zero address\\\");\\r\\n        require(!isBlackListed[to], \\\"harvest: receiver is blacklisted\\\");\\r\\n\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        int256 accumulatedAmdx = int256(user.amount.mul(pool.accAmdxPerShare) / ACC_AMDX_PRECISION);\\r\\n        uint256 _pendingAmdx = accumulatedAmdx.sub(user.rewardDebt).toUInt256();\\r\\n\\r\\n        user.rewardDebt = accumulatedAmdx;\\r\\n\\r\\n        if (_pendingAmdx != 0) {\\r\\n            _safeAmdxRewardTransfer(to, _pendingAmdx);\\r\\n        }\\r\\n        \\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onAmdxReward( pid, msg.sender, to, _pendingAmdx, user.amount);\\r\\n        }\\r\\n\\r\\n        emit Harvest(msg.sender, pid, _pendingAmdx);\\r\\n    }\\r\\n\\r\\n    /// @notice Auto-deposit rewards back into StakingPool.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @param to Receiver of auto-deposit benefit.\\r\\n    function autoCompound(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {\\r\\n        require(address(lpToken[pid]) == address(AMDX), \\\"autoCompound: not allowed in this pool\\\");\\r\\n        require(to != address(0), \\\"autoCompound: receiver is the zero address\\\");\\r\\n        require(!isBlackListed[to], \\\"autoCompound: receiver is blacklisted\\\");\\r\\n\\r\\n        PoolInfo memory pool = updatePool(pid);\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        int256 accumulatedAmdx = int256(user.amount.mul(pool.accAmdxPerShare) / ACC_AMDX_PRECISION);\\r\\n        uint256 _pendingAmdx = accumulatedAmdx.sub(user.rewardDebt).toUInt256();\\r\\n\\r\\n        user.rewardDebt = accumulatedAmdx;\\r\\n\\r\\n        if (_pendingAmdx != 0 && AMDX.balanceOf(address(this)) > totalAmdxInPools) {\\r\\n            uint256 _remainingRewards = AMDX.balanceOf(address(this)).sub(totalAmdxInPools);\\r\\n            uint256 amount = 0;\\r\\n            if (_pendingAmdx > _remainingRewards) {            \\r\\n                amount = _remainingRewards;\\r\\n            } else {            \\r\\n                amount = _pendingAmdx;\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.add(amount);\\r\\n            user.rewardDebt = \\r\\n                user.rewardDebt.add(int256(amount.mul(pool.accAmdxPerShare) / ACC_AMDX_PRECISION));\\r\\n            \\r\\n            IRewarder _rewarder = rewarder[pid];\\r\\n            if (address(_rewarder) != address(0)) {\\r\\n                _rewarder.onAmdxReward(pid, to, to, amount, user.amount);\\r\\n            }\\r\\n\\r\\n            pool.totalLp = pool.totalLp.add(amount);\\r\\n            poolInfo[pid] = pool;\\r\\n\\r\\n            if(address(lpToken[pid]) == address(AMDX)){\\r\\n                totalAmdxInPools = totalAmdxInPools.add(amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    /// @param pid The index of the pool.\\r\\n    /// @param to Receiver of the LP tokens.\\r\\n    function emergencyWithdraw(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {\\r\\n        require(to != address(0), \\\"emergencyWithdraw: receiver is the zero address\\\");\\r\\n\\r\\n        PoolInfo memory pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n\\r\\n        IRewarder _rewarder = rewarder[pid];\\r\\n        if (address(_rewarder) != address(0)) {\\r\\n            _rewarder.onAmdxReward(pid, msg.sender, to, 0, 0);\\r\\n        }\\r\\n\\r\\n        lpToken[pid].safeTransfer(to, amount);\\r\\n        pool.totalLp = pool.totalLp.sub(amount);\\r\\n        poolInfo[pid] = pool;\\r\\n\\r\\n        if(address(lpToken[pid]) == address(AMDX)){\\r\\n            totalAmdxInPools = totalAmdxInPools.sub(amount);\\r\\n        }\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\\r\\n    }\\r\\n\\r\\n    /// @notice Safely transfer AMDX reward - Makes sure that rewards are not taken from the actual AMDX deposited in pool.\\r\\n    /// @param to Receiver of the AMDX rewards\\r\\n    /// @param amount AMDX reward amount to transfer\\r\\n    function _safeAmdxRewardTransfer(address to, uint256 amount) internal {\\r\\n        if (AMDX.balanceOf(address(this)) > totalAmdxInPools) {\\r\\n            uint256 _remainingRewards = AMDX.balanceOf(address(this)).sub(totalAmdxInPools);\\r\\n            bool transferSuccess = false;\\r\\n            if (amount > _remainingRewards) {            \\r\\n                transferSuccess = AMDX.transfer(to, _remainingRewards);\\r\\n            } else {            \\r\\n                transferSuccess = AMDX.transfer(to, amount);\\r\\n            }\\r\\n            require(transferSuccess, \\\"safeAmdxRewardTransfer: transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Blacklist or unblacklist an address.\\r\\n    /// @param _user Address of user\\r\\n    /// @param _status Status (true or false)\\r\\n    function setBlackListed(address _user, bool _status) external onlyOwner {\\r\\n        isBlackListed[_user] = _status;\\r\\n        emit SetBlackListed(_user, _status);\\r\\n    }\\r\\n\\r\\n    /// @notice Set value for AMDX reward per block.\\r\\n    /// @param amdxPerBlock New value for AMDX_PER_BLOCK\\r\\n    function setAmdxPerBlock(uint256 amdxPerBlock) external onlyOwner {\\r\\n        emit SetAmdxPerBlock(AMDX_PER_BLOCK, amdxPerBlock);\\r\\n        AMDX_PER_BLOCK = amdxPerBlock;\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw AMDX reward from StakingPool - Can only be called by the owner.\\r\\n    /// @param amount AMDX amount to withdraw\\r\\n    function withdrawAmdxReward(uint256 amount) external onlyOwner  {        \\r\\n        require(AMDX.balanceOf(address(this)) >= totalAmdxInPools + amount, \\\"withdrawAmdxReward: withdraw failed\\\");\\r\\n        AMDX.transfer(msg.sender, amount);\\r\\n        emit WithdrawAmdxReward(amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/libs/math/BoringMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/staking/libs/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.12;\\n\\nimport '../GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/staking/libs/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function toUInt256(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"Integer < 0\\\");\\n        return uint256(a);\\n    }\\n}\"\r\n    },\r\n    \"contracts/staking/libs/interfaces/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\nimport '../token/ERC20/SafeERC20.sol';\\n\\ninterface IRewarder {\\n    using SafeERC20 for IERC20;\\n    function onAmdxReward(uint256 pid, address user, address recipient, uint256 amdxAmount, uint256 newLpAmount) external;\\n    function pendingTokens(uint256 pid, address user, uint256 amdxAmount) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.12;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport './IERC20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeERC20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeERC20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    \\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/libs/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_amdx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amdxPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accAmdxPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmdxPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmdxPerBlock\",\"type\":\"uint256\"}],\"name\":\"SetAmdxPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetBlackListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmdxReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMDX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"autoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAmdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"accAmdxPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amdxRewardsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amdxPerBlock\",\"type\":\"uint256\"}],\"name\":\"setAmdxPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmdxInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"accAmdxPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"}],\"internalType\":\"struct StakingPool.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmdxReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000002fcdedf1ab72be849c272143d1dd3e7ec6cf8a80000000000000000000000000000000000000000000000000000000064e000e500000000000000000000000000000000000000000000002086ac351052600000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}