{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.18;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool success);\r\n\r\n    function transfer(address _to, uint _tokens) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external returns (uint256);\r\n}\r\n\r\ncontract AncoraPublic is Ownable {\r\n    bool public cancelPublicSaleBool = false;\r\n    bool public PublicSaleActive = false;\r\n    \r\n\r\n    uint public tokenPrice = 0.00000368645 ether; //0.1 / ethprice\r\n    uint public hardcap = 50 ether; // 50000 / eth price\r\n\r\n\r\n    struct ListToVesting {\r\n        address investor;\r\n        uint256 percent;\r\n    }\r\n\r\n\tListToVesting[] public listInvetorVesting; \r\n\r\n    address public tokenAddress;\r\n    \r\n    uint64 constant private SCALING = 10 ** 18;\r\n    uint128 public minDeposit = 0.1 ether;\r\n    // uint128 public maxDeposit = 0.5 ether;\r\n    // uint128 public maxDeposit;\r\n    uint256 public tokensForClaiming;\r\n    \r\n    uint256 public totalEthDeposited;\r\n    // uint256 public softcap = 60 ether; //100.000$ softcap\r\n    \r\n    IERC20 erc20Contract;\r\n\r\n    mapping(address => uint256) public deposits;\r\n    mapping(address => bool) public whitelist;\r\n     mapping(address => bool) public whitelistF;\r\n\r\n    event AddressAdded(address indexed account);\r\n    event AddressRemoved(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender], \"Sender is not whitelisted.\");\r\n        _;\r\n    }\r\n    constructor() {\r\n        address _tokenAddress =address(0x47e6d0DFA00637F35528ff28d371D6263f73B334);\r\n        require(_tokenAddress != address(0), \"Error: INVALID_TOKEN_ADDRESS\");\r\n        // minDeposit = 0.3 ether;\r\n        // maxDeposit = 1000000000000000000;\r\n        tokenAddress = _tokenAddress;\r\n        erc20Contract = IERC20(tokenAddress);\r\n\r\n    }\r\n\r\n    event DepositTokens(\r\n        address indexed _address,\r\n        uint256 _tokensForClaiming\r\n    );\r\n\r\n\r\n    event CancelPublicSale(address indexed _address, uint256 _amount);\r\n\r\n    event DepositETH(address indexed _address, uint256 _amount);\r\n\r\n    event ClaimTokens(address indexed _address, uint256 _amount);\r\n\r\n    event WithdrawETH(address indexed _address, uint256 _amount);\r\n\r\n    /*\r\n    * Used by the PublicSale to deposit the tokens for the PublicSale\r\n    */\r\n    function depositTokens(\r\n        uint256 _tokensForClaiming\r\n    ) public onlyOwner {\r\n        // require(tokensForClaiming == 0, \"Error: TOKENS_ALREADY_DEPOSITED\"); \r\n        erc20Contract.transferFrom(_msgSender(), address(this), _tokensForClaiming);\r\n        tokensForClaiming += _tokensForClaiming;\r\n\r\n        emit DepositTokens(_msgSender(), tokensForClaiming);\r\n    }\r\n\r\n    /*\r\n    * Used by the PublicSale creator to cancel the PublicSale\r\n    */\r\n    function cancelPublicSale() external onlyOwner {\r\n        require(!cancelPublicSaleBool, \"Error: FAILED_LAUNCH_CANCELLED\");\r\n        cancelPublicSaleBool = true;\r\n\r\n        // owner withdrawing previously deposited tokens\r\n        erc20Contract.transfer(owner(), erc20Contract.balanceOf(address(this)));\r\n\r\n        emit CancelPublicSale(_msgSender(), tokensForClaiming );\r\n    }\r\n\r\n    function startPublicSale() external onlyOwner {\r\n        PublicSaleActive = true;\r\n    }\r\n\r\n    function stopPublicSale() public onlyOwner {\r\n        PublicSaleActive = false;\r\n    }\r\n\r\n    /*\r\n    * Method where users participate in the PublicSale\r\n    */\r\n    function depositETH() external payable {\r\n        // require(areDepositsActive(), \"Error: DEPOSITS_NOT_ACTIVE\");\r\n        require(msg.value >= minDeposit, \"Error: MIN_DEPOSIT_AMOUNT\");\r\n        // if(!whitelistF[msg.sender]){\r\n        //     require(msg.value <= maxDeposit, \"Error: MAX_DEPOSIT_AMOUNT\");\r\n        // }\r\n        \r\n        require(PublicSaleActive, \"Error: Not Started Yet\");\r\n        // require(whitelist[msg.sender], \"Error: Not in Whitelist\");\r\n        // require(!cancelPublicSaleBool, \"Error: PublicSale_IS_CANCELLED\");\r\n\r\n        deposits[_msgSender()] += msg.value;\r\n        totalEthDeposited += msg.value;\r\n\r\n        (bool transferSuccess, ) = owner().call{value: msg.value}(\"\");\r\n        require(transferSuccess, \"Failed to Invest\");\r\n\r\n        // get list user info dep\r\n        ListToVesting memory investor1;\r\n\t\tinvestor1.investor = msg.sender;\r\n\t\tinvestor1.percent = msg.value;\r\n        listInvetorVesting.push(investor1);\r\n\r\n        emit DepositETH(_msgSender(), msg.value);\r\n    }\r\n\r\n    /*\r\n    * After liquidity is added to Uniswap with this method users are able to claim their token share\r\n    */\r\n    function claimTokens() external returns (uint256) {\r\n        // require(hasDepositsFinished(), \"Error: CLAIMING_NOT_ACTIVE\");\r\n        // require(getCurrentTokenShare() > 0, \"Error: INVALID_TOKEN_SHARE\");\r\n        require(!cancelPublicSaleBool, \"Error: PublicSale_IS_CANCELLED\");\r\n        \r\n        // if(totalEthDeposited >= softcap){\r\n        //     uint256 userTokens = getCurrentTokenShare();\r\n        //     deposits[_msgSender()] = 0;\r\n        //     erc20Contract.transfer(_msgSender(), userTokens*4/10); // tge 40%\r\n\r\n        //     emit ClaimTokens(_msgSender(), userTokens);\r\n\r\n        //     return userTokens;\r\n        // }\r\n        // else{\r\n        uint256 userTokens = ((deposits[_msgSender()] * SCALING )/ tokenPrice );\r\n        deposits[_msgSender()] = 0;\r\n        erc20Contract.transfer(_msgSender(), userTokens*4/10); //tge 40%\r\n\r\n        emit ClaimTokens(_msgSender(), userTokens);\r\n\r\n        return userTokens;\r\n        // }\r\n        \r\n    }\r\n\r\n    /*\r\n    * If the PublicSale is cancelled users are able to withdraw their previously deposited ETH\r\n    */\r\n    function getFund() public onlyOwner payable {\r\n        \r\n        uint256 contractBalance = address(this).balance;\r\n        \r\n        (bool transferSuccess, ) = owner().call{value: contractBalance}(\"\");\r\n        require(transferSuccess, \"Failed to Invest\");\r\n\r\n        emit WithdrawETH(owner(), contractBalance);\r\n\r\n    }\r\n     function changeMin(uint128 minprice) public onlyOwner {\r\n        \r\n        require(minprice <= 0.25 ether, \"min >= 0.25 ether is wrong \");\r\n\r\n        minDeposit = minprice;\r\n    }\r\n\r\n    /*\r\n    * Returning the current token share for the current user\r\n    */\r\n    // function getCurrentTokenShare() public view returns (uint256) {\r\n    //     if (deposits[_msgSender()] > 0) {\r\n    //         return (((deposits[_msgSender()] * SCALING) / totalEthDeposited) * tokensForClaiming) / SCALING;\r\n    //     } else {\r\n    //         return 0;\r\n    //     }\r\n    // }\r\n    function getRateToken() public view returns (uint256) {\r\n        return (totalEthDeposited * SCALING) / tokensForClaiming /SCALING;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return totalEthDeposited;\r\n    }\r\n\r\n    function areDepositsActive() public view returns (bool) {\r\n        return PublicSaleActive && tokensForClaiming != 0 ;\r\n        \r\n    }\r\n    \r\n\r\n    function hasDepositsFinished() public view returns (bool) {\r\n        return !PublicSaleActive;\r\n    }\r\n\r\n\tfunction getInvestorlist()public  view returns( ListToVesting[] memory ) {\r\n\t\treturn listInvetorVesting;\r\n\t}\r\n    \r\n    function addInvestors(address[] memory investors, uint256[] memory amounts) public onlyOwner {\r\n    require(investors.length == amounts.length, \"Array length mismatch\");\r\n    \r\n    for (uint256 i = 0; i < investors.length; i++) {\r\n        ListToVesting memory item = ListToVesting({\r\n            investor: investors[i],\r\n            percent: amounts[i]\r\n        });\r\n        \r\n        listInvetorVesting.push(item);\r\n    }\r\n }\r\n     function addAddress(address account) public onlyOwner{\r\n        whitelist[account] = true;\r\n        emit AddressAdded(account);\r\n    }\r\n    function addAddressF(address account) public onlyOwner{\r\n        whitelistF[account] = true;\r\n        emit AddressAdded(account);\r\n    }\r\n\r\n    function removeAddress(address account) public onlyOwner{\r\n        whitelist[account] = false;\r\n        emit AddressRemoved(account);\r\n    }\r\n\r\n    function userClaim() public view returns (uint256) {\r\n        return ((deposits[_msgSender()] * SCALING )/ tokenPrice );\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return whitelist[account];\r\n    }\r\n\r\n    function addAddresses(address[] memory accounts) public onlyOwner{\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            whitelist[accounts[i]] = true;\r\n            emit AddressAdded(accounts[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensForClaiming\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAddressF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areDepositsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPublicSaleBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"minprice\",\"type\":\"uint128\"}],\"name\":\"changeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensForClaiming\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorlist\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct AncoraPublic.ListToVesting[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRateToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDepositsFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listInvetorVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForClaiming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AncoraPublic", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10464799e32dbcefc3939052a488f7d5faac0158d5ffb2cd8d3eee92f3f2089b"}