{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTstaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\ninterface IERC721 {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract NFTStaking is Ownable, IERC721Receiver {\\r\\n    uint256 private _totalStaked;\\r\\n    uint256 public endTimestamp;\\r\\n    uint256 public ratePerDay;\\r\\n    uint256 public tokenDecimals;\\r\\n\\r\\n    uint8[10000] public ids;\\r\\n\\r\\n    uint8 private rarityMask = 3;\\r\\n\\r\\n    mapping(address => uint) kinBonusActiveSince;\\r\\n\\r\\n    mapping(uint => bool) legendary;\\r\\n\\r\\n    uint public legendaryMultiplier = 50;\\r\\n\\r\\n    uint public kinCount = 7;\\r\\n\\r\\n    mapping(address => uint256) private timeStaked;\\r\\n    mapping(address => uint256) private lastChecked;\\r\\n    mapping(address => uint256) private remainingClaims;\\r\\n    mapping(address => uint256[]) private stakedIds;\\r\\n\\r\\n    mapping(uint256 => uint256) private experiences;\\r\\n\\r\\n    mapping(address => uint256) claimedSoFar;\\r\\n\\r\\n    mapping(uint256 => uint8) private rarityTiers;\\r\\n\\r\\n    mapping(uint256 => Lock) private locks;\\r\\n\\r\\n    uint256 public maxLevel = 100;\\r\\n    uint256 public lockCount;\\r\\n    uint256 public expRate = 100;\\r\\n    uint256 public expDecimals = 5;\\r\\n\\r\\n    mapping(address => bool) private hasStaked;\\r\\n\\r\\n    uint256 public claimedAmount;\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 lockTime;\\r\\n        uint256 rewardMultiplier;\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        uint256 tokenId;\\r\\n        uint256 timestamp;\\r\\n        address owner;\\r\\n        uint256 lockEndTimestamp;\\r\\n        uint256 rewardMultiplier;\\r\\n    }\\r\\n\\r\\n    event NFTStaked(address owner, uint256 tokenId, uint256 value);\\r\\n    event NFTUnstaked(address owner, uint256 tokenId, uint256 value);\\r\\n    event Claimed(address owner, uint256 amount);\\r\\n\\r\\n    IERC721 public nft;\\r\\n    IERC20 public token;\\r\\n\\r\\n    mapping(uint256 => Stake) private vault;\\r\\n\\r\\n    constructor(\\r\\n        IERC721 _nft,\\r\\n        IERC20 _token,\\r\\n        uint256 duration,\\r\\n        uint256 rate_,\\r\\n        uint256 tokenDecimals_\\r\\n    ) {\\r\\n        nft = _nft;\\r\\n        token = _token;\\r\\n        endTimestamp = block.timestamp + duration;\\r\\n        ratePerDay = rate_ * 10 ** tokenDecimals_;\\r\\n        tokenDecimals = tokenDecimals_;\\r\\n        addLock(30 days, 0);\\r\\n        addLock(60 days, 15);\\r\\n        addLock(90 days, 30);\\r\\n        addLock(120 days, 50);\\r\\n        rarityTiers[0] = 0;\\r\\n        rarityTiers[1] = 15;\\r\\n        rarityTiers[2] = 30;\\r\\n        rarityTiers[3] = 50;\\r\\n    }\\r\\n\\r\\n    function getKin(uint8 value) public pure returns(uint8){\\r\\n        return value >> 2;\\r\\n    }\\r\\n\\r\\n    function getRarityBonus(uint8 value) public view returns(uint8){\\r\\n        return rarityTiers[value & rarityMask];\\r\\n    }\\r\\n\\r\\n    function setToken(address t) external onlyOwner {\\r\\n        token = IERC20(t);\\r\\n    }\\r\\n\\r\\n    function isLegendary(uint tokenId) public view returns(bool) {\\r\\n        return legendary[tokenId];\\r\\n    }\\r\\n\\r\\n    function addLegendary(uint tokenId) external onlyOwner {\\r\\n        legendary[tokenId] = true;\\r\\n    }\\r\\n\\r\\n    function removeLegendary(uint tokenId) external onlyOwner {\\r\\n        legendary[tokenId] = false;\\r\\n    }\\r\\n\\r\\n    function setLegendaryMultiplier(uint newVal) external onlyOwner {\\r\\n        legendaryMultiplier = newVal;\\r\\n    }\\r\\n\\r\\n    // for example a multiplier of 115 = +15% rewards\\r\\n    function editRarityTierMultiplier(uint256 t, uint8 multiplier)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        rarityTiers[t] = multiplier;\\r\\n    }\\r\\n\\r\\n    function addLock(\\r\\n        uint256 lockTime_,\\r\\n        uint256 rewardMultiplier_\\r\\n    ) public onlyOwner {\\r\\n        locks[lockCount] = Lock({\\r\\n            lockTime: lockTime_,\\r\\n            rewardMultiplier: rewardMultiplier_\\r\\n        });\\r\\n        lockCount++;\\r\\n    }\\r\\n\\r\\n    function setMaxLevel(uint256 n) external onlyOwner {\\r\\n        maxLevel = n;\\r\\n    }\\r\\n\\r\\n    function editLock(\\r\\n        uint256 lockNumber,\\r\\n        uint256 lockTime_,\\r\\n        uint256 rewardMultiplier_\\r\\n    ) external onlyOwner {\\r\\n        locks[lockNumber] = Lock({\\r\\n            lockTime: lockTime_,\\r\\n            rewardMultiplier: rewardMultiplier_\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function stake(uint256[] calldata tokenIds, uint256 lockType_) external {\\r\\n        hasStaked[msg.sender] = true;\\r\\n        uint256 tokenId;\\r\\n        _totalStaked += tokenIds.length;\\r\\n        Lock memory l = getLockInfo(lockType_);\\r\\n        bool bonusActive = isKinBonus(msg.sender);\\r\\n        bool hasStake = stakedIds[msg.sender].length > 0;\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            tokenId = tokenIds[i];\\r\\n            require(nft.ownerOf(tokenId) == msg.sender, \\\"not your nft\\\");\\r\\n            require(vault[tokenId].tokenId == 0, \\\"already staked\\\");\\r\\n\\r\\n            nft.transferFrom(msg.sender, address(this), tokenId);\\r\\n            emit NFTStaked(msg.sender, tokenId, block.timestamp);\\r\\n            uint256 rarityMultiplier = getRarityBonus(ids[tokenId]);\\r\\n            uint legendaryMult = legendary[tokenId] ? legendaryMultiplier : 0;\\r\\n            vault[tokenId] = Stake({\\r\\n                owner: msg.sender,\\r\\n                tokenId: uint256(tokenId),\\r\\n                timestamp: getTimestamp(),\\r\\n                lockEndTimestamp: block.timestamp + l.lockTime,\\r\\n                rewardMultiplier: ratePerDay * (100 + l.rewardMultiplier + rarityMultiplier + legendaryMult) / 100\\r\\n            });\\r\\n            stakedIds[msg.sender].push(tokenId);\\r\\n        }\\r\\n        \\r\\n        if (!hasStake) {\\r\\n            lastChecked[msg.sender] = block.timestamp;\\r\\n        }\\r\\n        if(!bonusActive && isKinBonus(msg.sender)) kinBonusActiveSince[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _unstakeMany(address account, uint256[] calldata tokenIds)\\r\\n        internal\\r\\n    {\\r\\n        uint256 tokenId;\\r\\n        _totalStaked -= tokenIds.length;\\r\\n        uint idx;\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            tokenId = tokenIds[i];\\r\\n            Stake memory staked = vault[tokenId];\\r\\n            require(staked.owner == msg.sender, \\\"not an owner\\\");\\r\\n            require(\\r\\n                staked.lockEndTimestamp <= block.timestamp,\\r\\n                \\\"Nft is still locked\\\"\\r\\n            );\\r\\n            delete vault[tokenId];\\r\\n            for (uint256 ii = 0; ii < stakedIds[account].length; ii++) {\\r\\n                if (stakedIds[account][ii] == tokenId) idx = ii;\\r\\n            }\\r\\n            require(idx < stakedIds[account].length);\\r\\n            stakedIds[account][idx] = stakedIds[account][stakedIds[account].length-1];\\r\\n            stakedIds[account].pop();\\r\\n\\r\\n            emit NFTUnstaked(account, tokenId, block.timestamp);\\r\\n            nft.transferFrom(address(this), account, tokenId);\\r\\n        }\\r\\n        if (stakedIds[account].length == 0) {\\r\\n            timeStaked[msg.sender] += block.timestamp - lastChecked[account];\\r\\n            lastChecked[account] = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function timeSpentStaking(address account) external view  returns(uint t){\\r\\n        t += timeStaked[account];\\r\\n        if (stakedIds[account].length > 0 && lastChecked[account] > 0) t += block.timestamp - lastChecked[account];\\r\\n    }\\r\\n\\r\\n    function emergencyUnstake(address account, uint256[] calldata tokenIds) external onlyOwner {\\r\\n        uint256 tokenId;\\r\\n        _totalStaked -= tokenIds.length;\\r\\n        uint idx;\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            tokenId = tokenIds[i];\\r\\n            delete vault[tokenId];\\r\\n            for (uint256 ii = 0; ii < stakedIds[account].length - 1; ii++) {\\r\\n                if (stakedIds[account][ii] == tokenId) idx = ii;\\r\\n            }\\r\\n            require(idx < stakedIds[account].length);\\r\\n            stakedIds[account][idx] = stakedIds[account][stakedIds[account].length-1];\\r\\n            stakedIds[account].pop();\\r\\n\\r\\n            emit NFTUnstaked(account, tokenId, block.timestamp);\\r\\n            nft.transferFrom(address(this), account, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(uint256[] calldata tokenIds) external {\\r\\n        _claim(msg.sender, tokenIds, false);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256[] calldata tokenIds) external {\\r\\n        _claim(msg.sender, tokenIds, true);\\r\\n    }\\r\\n\\r\\n    function setEndTimestamp(uint256 newTimestamp) external onlyOwner {\\r\\n        endTimestamp = newTimestamp;\\r\\n    }\\r\\n\\r\\n    function update(\\r\\n        uint8[] calldata data_,\\r\\n        uint16 from\\r\\n    ) external onlyOwner {\\r\\n        for (uint16 i;i<data_.length;i++){\\r\\n            ids[i+from] = data_[i];\\r\\n        }\\r\\n    }\\r\\n \\r\\n    function isKinBonus(address account) public view returns(bool) {\\r\\n        bool[] memory _kins = new bool[](kinCount);\\r\\n\\r\\n        for (uint i;i<stakedIds[account].length;i++){\\r\\n            _kins[getKin(ids[stakedIds[account][i]])] = true;\\r\\n        }\\r\\n        uint cnt;\\r\\n        for (uint i;i<_kins.length;i++){\\r\\n            if (_kins[i]) cnt++;\\r\\n        }\\r\\n        return cnt == kinCount;\\r\\n    }\\r\\n\\r\\n    function _claim(\\r\\n        address account,\\r\\n        uint256[] calldata tokenIds,\\r\\n        bool _unstake\\r\\n    ) internal {\\r\\n        uint256 tokenId;\\r\\n        uint256 earned = remainingClaims[account];\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            tokenId = tokenIds[i];\\r\\n            Stake memory staked = vault[tokenId];\\r\\n            if (staked.owner != account) continue;\\r\\n            earned += staked.rewardMultiplier * (block.timestamp - staked.timestamp) / 86400;\\r\\n            if (isKinBonus(account)) earned += staked.rewardMultiplier * (block.timestamp - kinBonusActiveSince[account]) / 86400;\\r\\n            kinBonusActiveSince[account] = block.timestamp;\\r\\n            experiences[tokenId] += expRate * 10 ** expDecimals * (block.timestamp - staked.timestamp) / 86400;\\r\\n            vault[tokenId].timestamp = getTimestamp();\\r\\n        }\\r\\n        if (earned > 0) {\\r\\n            if (token.balanceOf(address(this)) < earned) {\\r\\n                remainingClaims[account] = earned;\\r\\n            } else {\\r\\n                token.transfer(account, earned);\\r\\n                claimedSoFar[account] += earned;\\r\\n                claimedAmount += earned;\\r\\n                remainingClaims[account] = 0;\\r\\n            }\\r\\n        }\\r\\n        if (_unstake) {\\r\\n            _unstakeMany(account, tokenIds);\\r\\n        }\\r\\n        emit Claimed(account, earned);\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        require(from == address(0x0), \\\"Cannot send nfts to Vault directly\\\");\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(address token_, uint256 amount) external onlyOwner {\\r\\n        if (amount > IERC20(token_).balanceOf(address(this)))\\r\\n            amount = IERC20(token_).balanceOf(address(this));\\r\\n        SafeERC20.safeTransfer(IERC20(token_), owner(), amount);\\r\\n    }\\r\\n    // Views\\r\\n\\r\\n    function getAllLocks() external view returns (Lock[] memory) {\\r\\n        Lock[] memory _locks = new Lock[](lockCount);\\r\\n        for (uint256 i = 0; i < lockCount; i++) {\\r\\n            _locks[i] = locks[i];\\r\\n        }\\r\\n        return _locks;\\r\\n    }\\r\\n\\r\\n    function stakedOrNot(address account) external view returns(bool) {\\r\\n        return hasStaked[account];\\r\\n    }\\r\\n\\r\\n    function getStakedIds(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        return stakedIds[account];\\r\\n    }\\r\\n\\r\\n    function getMetadata() external view returns (address, address) {\\r\\n        return (address(nft), address(token));\\r\\n    }\\r\\n\\r\\n    function stakeInfo(uint256 tokenId) public view returns (Stake memory) {\\r\\n        return vault[tokenId];\\r\\n    }\\r\\n    function getUserStakeInfo(address account) external view returns (Stake[] memory) {\\r\\n        uint256[] memory _stakedIds = getStakedIds(account); \\r\\n        Stake[] memory s = new Stake[](_stakedIds.length);\\r\\n        for (uint256 i; i < _stakedIds.length; i++) {\\r\\n            s[i] = stakeInfo(_stakedIds[i]);\\r\\n        }\\r\\n        return s;\\r\\n    }\\r\\n    function getRemainingLeft() external view returns (uint256) {\\r\\n        return remainingClaims[msg.sender];\\r\\n    }\\r\\n\\r\\n    function earningInfo(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 earned)\\r\\n    {\\r\\n        uint256 tokenId;\\r\\n        uint256[] memory tokenIds = getStakedIds(account);\\r\\n        earned = remainingClaims[account];\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            tokenId = tokenIds[i];\\r\\n            Stake memory staked = vault[tokenId];\\r\\n            if (staked.owner != account) continue;\\r\\n            earned += staked.rewardMultiplier * (block.timestamp - staked.timestamp) / 86400;\\r\\n            if (isKinBonus(account)) earned += staked.rewardMultiplier * (block.timestamp - kinBonusActiveSince[account]) / 86400;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getXpEarned(uint256 tokenId_)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 experience)\\r\\n    {\\r\\n        experience += experiences[tokenId_];\\r\\n        Stake memory staked = vault[tokenId_];\\r\\n        if (staked.timestamp != 0)\\r\\n        experience += expRate * 10 ** expDecimals * (block.timestamp - staked.timestamp) / 86400;\\r\\n    }\\r\\n\\r\\n    function getTimestamp() private view returns (uint256) {\\r\\n        return\\r\\n            block.timestamp > endTimestamp\\r\\n                ? endTimestamp\\r\\n                : block.timestamp;\\r\\n    }\\r\\n\\r\\n    function totalStaked() external view returns (uint256) {\\r\\n        return _totalStaked;\\r\\n    }\\r\\n\\r\\n    function getLockInfo(uint256 lockType_) public view returns (Lock memory l) {\\r\\n        require(lockType_ < lockCount, \\\"Nonexistent locktype\\\");\\r\\n        l = locks[lockType_];\\r\\n    }\\r\\n\\r\\n    function getRarityTierMultiplier(uint256 t) external view returns (uint256) {\\r\\n        return rarityTiers[t];\\r\\n    }\\r\\n\\r\\n    function getLevel(uint256 tokenId) public view returns (uint256 level) {\\r\\n        uint256 _level = uint256(getXpEarned(tokenId) / 10**expDecimals / 100) + 1;\\r\\n        return _level > maxLevel ? maxLevel : _level;\\r\\n    }\\r\\n\\r\\n    function getProgress(uint256[] calldata tokenIds) external view returns(uint256[] memory) {\\r\\n        uint256[] memory xps = new uint256[](tokenIds.length);\\r\\n        for (uint i;i<tokenIds.length;i++){\\r\\n            xps[i] = getXpEarned(tokenIds[i]);\\r\\n        }\\r\\n        return xps;\\r\\n    }\\r\\n\\r\\n    function getLevels(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory tokenIds = getStakedIds(account);\\r\\n        uint256[] memory levels = new uint256[](tokenIds.length);\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            levels[i] = getLevel(tokenIds[i]);\\r\\n        }\\r\\n        return levels;\\r\\n    }\\r\\n\\r\\n    function getMaxLevel(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 max;\\r\\n        uint256 maxId;\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            if (getLevel(tokenIds[i]) > max) {\\r\\n                max = getLevel(tokenIds[i]);\\r\\n                maxId = tokenIds[i];\\r\\n            }\\r\\n        }\\r\\n        return (maxId, max);\\r\\n    }\\r\\n\\r\\n    function getLevels2(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory levels = new uint256[](tokenIds.length);\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            levels[i] = getLevel(tokenIds[i]);\\r\\n        }\\r\\n        return levels;\\r\\n    }\\r\\n\\r\\n    function farmed(address account) external view returns (uint256 amount) {\\r\\n        return claimedSoFar[account];\\r\\n    }\\r\\n\\r\\n    function grantLevels(uint256[] calldata tokenIds, uint256 level)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        for (uint256 i; i < tokenIds.length; i++) {\\r\\n            experiences[tokenIds[i]] += 100 * 10**expDecimals * level;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addLegendary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier_\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earningInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier_\",\"type\":\"uint256\"}],\"name\":\"editLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"}],\"name\":\"editRarityTierMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"farmed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"getKin\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevels\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getLevels2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockType_\",\"type\":\"uint256\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.Lock\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getProgress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"getRarityBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"getRarityTierMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getXpEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"experience\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"grantLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKinBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLegendary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kinCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legendaryMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeLegendary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"setEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setLegendaryMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lockType_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedOrNot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"timeSpentStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"data_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint16\",\"name\":\"from\",\"type\":\"uint16\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000098b82d9efc577b1c3aa6578342121231db2b47b9000000000000000000000000373a7c3ad2d432474670616fc7958a5d2688cb9c000000000000000000000000000000000000000000000000000000000083d60000000000000000000000000000000000000000000000000000000000000078500000000000000000000000000000000000000000000000000000000000000012", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}