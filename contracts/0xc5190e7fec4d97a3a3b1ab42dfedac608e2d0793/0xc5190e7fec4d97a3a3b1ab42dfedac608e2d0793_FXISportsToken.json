{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FXISportsToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: None\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IFXISportsToken.sol\\\";\\n\\n/// @title FXI Sports Token\\n/// @title https://fx1.io/\\n/// @title https://t.me/fx1_sports_portal\\n/// @author https://PROOFplatform.io\\n/// @author https://5thWeb.io\\n\\ncontract FXISportsToken is Ownable, IFXISportsToken {\\n    /// @notice Maps an address to its token balance\\n    mapping(address => uint256) private _balances;\\n    /// @notice Maps addresses to allowances granted by token holders\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    /// @notice Maps addresses to indicate whether they are excluded from transaction fees\\n    mapping(address => bool) public excludedFromFees;\\n    /// @notice Maps addresses to indicate whether they are excluded from maximum wallet balance limits\\n    mapping(address => bool) public excludedFromMaxWallet;\\n    /// @notice Maps addresses to indicate whether they are whitelisted\\n    mapping(address => bool) public whitelists;\\n\\n    /// @notice Total supply of the FX1 Sports Token\\n    uint256 private _totalSupply = 300_000_000 * 10 ** _decimals;\\n    /// @notice Timestamp of the token contract launch\\n    uint256 public launchTime;\\n    /// @notice Period during which addresses can be added to the whitelist\\n    uint256 public whitelistPeriod;\\n    /// @notice Minimum amount of tokens required to trigger an automatic swap for liquidity\\n    uint256 public swapThreshold;\\n    /// @notice Maximum amount of tokens that a wallet can hold\\n    uint256 public maxWalletAmount;\\n    /// @notice Accumulated amount of tokens reserved for liquidity\\n    uint256 private accLiquidityAmount;\\n    /// @notice Accumulated amount of tokens reserved for marketing purposes\\n    uint256 private accMarketingAmount;\\n\\n    /// @notice The cumulative fee rate applied to buy transactions\\n    uint256 public totalBuyFeeRate;\\n    /// @notice The cumulative fee rate applied to sale transactions\\n    uint256 public totalSellFeeRate;\\n\\n    /// @notice Address for receiving marketing-related tax payments\\n    address public marketingTaxRecv;\\n    /// @notice Address of the generated token pair\\n    address public pair;\\n    /// @notice Address representing a dead wallet\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @notice Variable indicates whether a liquidity swap is in progress\\n    bool private inSwapLiquidity;\\n\\n    /// @notice Name of the FX1 Sports Token\\n    string private _name = \\\"FXI Sports\\\";\\n    /// @notice Symbol of the FX1 Sports Token\\n    string private _symbol = \\\"FXI\\\";\\n\\n    /// @notice Fixed-point multiplier used for calculations\\n    uint256 public immutable FIXED_POINT = 1000;\\n    /// @notice The maximum allowable fee rate\\n    uint16 public constant MAX_FEE = 100;\\n    /// @notice Number of decimal places for token values\\n    uint8 private constant _decimals = 18;\\n\\n    /// @notice Router for interacting with the Uniswap decentralized exchange\\n    IUniswapV2Router02 public dexRouter;\\n    /// @notice Fee rates for buying transactions\\n    FeeRate public buyfeeRate;\\n    /// @notice Fee rates for selling transactions\\n    FeeRate public sellfeeRate;\\n\\n    /// @notice Constructs the FX1SportsToken contract\\n    /// @param _param A struct containing various parameters required for the token's configuration\\n    constructor(\\n        FeeRate memory _buyfeeRate,\\n        FeeRate memory _sellfeeRate,\\n        Param memory _param\\n    ) checkFeeRates(_buyfeeRate) checkFeeRates(_sellfeeRate) {\\n        require(\\n            _param.marketingTaxRecv != address(0),\\n            \\\"Invalid MarketingTaxRecv address\\\"\\n        );\\n        require(_param.dexRouter != address(0), \\\"Invalid dexRouter adddress\\\");\\n        require(_param.whitelistPeriod > 0, \\\"Invalid whitelistPeriod\\\");\\n        address sender = msg.sender;\\n        marketingTaxRecv = _param.marketingTaxRecv;\\n        dexRouter = IUniswapV2Router02(_param.dexRouter);\\n        whitelistPeriod = _param.whitelistPeriod;\\n        buyfeeRate.liquidityFeeRate = _buyfeeRate.liquidityFeeRate;\\n        buyfeeRate.marketingFeeRate = _buyfeeRate.marketingFeeRate;\\n        totalBuyFeeRate =\\n            _buyfeeRate.liquidityFeeRate +\\n            _buyfeeRate.marketingFeeRate;\\n\\n        sellfeeRate.liquidityFeeRate = _sellfeeRate.liquidityFeeRate;\\n        sellfeeRate.marketingFeeRate = _sellfeeRate.marketingFeeRate;\\n        totalSellFeeRate =\\n            _sellfeeRate.liquidityFeeRate +\\n            _sellfeeRate.marketingFeeRate;\\n\\n        excludedFromFees[sender] = true;\\n        excludedFromMaxWallet[sender] = true;\\n        excludedFromMaxWallet[address(this)] = true;\\n        excludedFromMaxWallet[marketingTaxRecv] = true;\\n        whitelists[sender] = true;\\n        whitelists[address(this)] = true;\\n\\n        _balances[sender] += _totalSupply;\\n        emit Transfer(address(0), sender, _totalSupply);\\n        swapThreshold = _totalSupply / 10000; // 0.01%\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice A modifier to check and enforce the maximum fee rates for marketing and liquidity\\n     * @param _fees The structure containing marketing and liquidity fee rates\\n     */\\n    modifier checkFeeRates(FeeRate memory _fees) {\\n        require(\\n            _fees.marketingFeeRate + _fees.liquidityFeeRate <= MAX_FEE,\\n            \\\"Max Rate exceeded, please lower value\\\"\\n        );\\n        _;\\n    }\\n\\n    /// ================================ Functions for ERC20 token ================================ ///\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    ) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view override returns (uint256) {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    function approve(\\n        address _spender,\\n        uint256 _amount\\n    ) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[_sender][msg.sender];\\n        require(currentAllowance >= _amount, \\\"Transfer > allowance\\\");\\n        _approve(_sender, msg.sender, currentAllowance - _amount);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /// ================================ External functions ================================ ///\\n\\n    /**\\n     * @notice Updates the address of the Uniswap router\\n     * @param _newRouter The new address of the Uniswap router\\n     */\\n    function updateDexRouter(address _newRouter) external onlyOwner {\\n        require(Address.isContract(_newRouter), \\\"Address is not a contract\\\");\\n        dexRouter = IUniswapV2Router02(_newRouter);\\n    }\\n\\n    /**\\n     * @notice External function update the Uniswap pair address and adjust exemption settings\\n     * @param _pair The new Uniswap pair address\\n     */\\n    function updatePair(address _pair) external onlyOwner {\\n        require(_pair != address(0), \\\"Invalid pair address\\\");\\n        if (pair != address(0)) {\\n            excludedFromMaxWallet[pair] = false;\\n            whitelists[pair] = false;\\n        }\\n        pair = _pair;\\n        excludedFromMaxWallet[_pair] = true;\\n        whitelists[_pair] = true;\\n    }\\n\\n    /**\\n     * @notice External function update the whitelist period\\n     * @param _newWhiteListPeriod The new duration of the whitelist period in seconds\\n     */\\n    function setWhiteListPeriod(\\n        uint256 _newWhiteListPeriod\\n    ) external onlyOwner {\\n        require(_newWhiteListPeriod > 0, \\\"Invalid whitelistPeriod\\\");\\n        whitelistPeriod = _newWhiteListPeriod;\\n    }\\n\\n    /**\\n     * @notice External function for allows the contract owner to send FX1SportsToken amounts of tokens to multiple recipients\\n     * @param _recipients An array of recipient addresses to send tokens to\\n     * @param _amounts An array of corresponding token amounts to be sent to each recipient\\n     */\\n    function multiSender(\\n        address[] memory _recipients,\\n        uint256[] memory _amounts\\n    ) external onlyOwner {\\n        require(_recipients.length == _amounts.length, \\\"Invalid arrays length\\\");\\n\\n        uint256 totalAmountToSend = 0;\\n        for (uint256 i = 0; i < _recipients.length; ) {\\n            require(_recipients[i] != address(0), \\\"Invalid recipient address\\\");\\n            totalAmountToSend += _amounts[i];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        require(\\n            _balances[msg.sender] >= totalAmountToSend,\\n            \\\"Not enough balance to send\\\"\\n        );\\n        for (uint256 i = 0; i < _recipients.length; ) {\\n            _transfer(msg.sender, _recipients[i], _amounts[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to set the launch time of the token\\n     */\\n    function setLaunchBegin() external override onlyOwner {\\n        require(launchTime == 0, \\\"Already launched\\\");\\n        launchTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to add or remove multiple addresses from the whitelists\\n     * @param _accounts An array of addresses to be added or removed from the whitelists\\n     * @param _add A boolean indicating whether to add or remove the addresses from the whitelists\\n     */\\n    function updateWhitelists(\\n        address[] memory _accounts,\\n        bool _add\\n    ) external override onlyOwner {\\n        uint256 length = _accounts.length;\\n        require(length > 0, \\\"Invalid accounts length\\\");\\n\\n        for (uint256 i = 0; i < length; ) {\\n            whitelists[_accounts[i]] = _add;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to exclude or include multiple addresses from the list of addresses exempted from maximum wallet balance limits\\n     * @param _accounts An array of addresses to be excluded or included in the list\\n     * @param _add A boolean indicating whether to exclude or include the addresses in the list\\n     */\\n    function excludeWalletsFromMaxWallets(\\n        address[] memory _accounts,\\n        bool _add\\n    ) external override onlyOwner {\\n        uint256 length = _accounts.length;\\n        require(length > 0, \\\"Invalid length array\\\");\\n        for (uint256 i = 0; i < length; ) {\\n            excludedFromMaxWallet[_accounts[i]] = _add;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to exclude or include multiple addresses from the list of addresses exempted from transaction fees\\n     * @param _accounts An array of addresses to be excluded or included in the list\\n     * @param _add A boolean indicating whether to exclude or include the addresses in the list\\n     */\\n    function excludeWalletsFromFees(\\n        address[] memory _accounts,\\n        bool _add\\n    ) external override onlyOwner {\\n        uint256 length = _accounts.length;\\n        require(length > 0, \\\"Invalid length array\\\");\\n        for (uint256 i = 0; i < length; ) {\\n            excludedFromFees[_accounts[i]] = _add;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to set a new maximum wallet balance limit\\n     * @param newLimit The new maximum transfer amount limit to be set\\n     */\\n    function setMaxWalletAmount(uint256 newLimit) external override onlyOwner {\\n        require(newLimit >= (_totalSupply * 10) / 1000, \\\"Min 1% limit\\\");\\n        maxWalletAmount = newLimit;\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to set a new address for the marketing tax wallet\\n     * @param _marketingTaxWallet The new address to be set as the marketing tax wallet\\n     */\\n    function setMarketingTaxWallet(\\n        address _marketingTaxWallet\\n    ) external override onlyOwner {\\n        require(\\n            _marketingTaxWallet != address(0),\\n            \\\"Invalid marketingTaxWallet address\\\"\\n        );\\n        marketingTaxRecv = _marketingTaxWallet;\\n    }\\n\\n    /**\\n     * @notice This function allows the contract owner to update the fee rates for buy operations\\n     * @param _marketingBuyFeeRate New marketing fee rate for buy operations\\n     * @param _liquidityBuyFeeRate New liquidity fee rate for buy operations\\n     */\\n    function updateBuyFeeRate(\\n        uint16 _marketingBuyFeeRate,\\n        uint16 _liquidityBuyFeeRate\\n    ) external override onlyOwner {\\n        require(\\n            _marketingBuyFeeRate + _liquidityBuyFeeRate <= MAX_FEE,\\n            \\\"Max Rate exceeded, please lower value\\\"\\n        );\\n        buyfeeRate.marketingFeeRate = _marketingBuyFeeRate;\\n        buyfeeRate.liquidityFeeRate = _liquidityBuyFeeRate;\\n        totalBuyFeeRate = _marketingBuyFeeRate + _liquidityBuyFeeRate;\\n    }\\n\\n    /**\\n     * @notice This function allows the contract owner to update the fee rates for sell operations\\n     * @param _marketingSellFeeRate New marketing fee rate for sell operations\\n     * @param _liquiditySellFeeRate New liquidity fee rate for sell operations\\n     */\\n    function updateSellFeeRate(\\n        uint16 _marketingSellFeeRate,\\n        uint16 _liquiditySellFeeRate\\n    ) external override onlyOwner {\\n        require(\\n            _marketingSellFeeRate + _liquiditySellFeeRate <= MAX_FEE,\\n            \\\"Max Rate exceeded, please lower value\\\"\\n        );\\n        sellfeeRate.marketingFeeRate = _marketingSellFeeRate;\\n        sellfeeRate.liquidityFeeRate = _liquiditySellFeeRate;\\n        totalSellFeeRate = _marketingSellFeeRate + _liquiditySellFeeRate;\\n    }\\n\\n    /**\\n     * @notice External function allows the contract owner to set a new swap threshold value\\n     * @param _swapThreshold The new swap threshold value to be set\\n     */\\n    function setSwapThreshold(\\n        uint256 _swapThreshold\\n    ) external override onlyOwner {\\n        require(_swapThreshold > 0, \\\"Invalid swapThreshold\\\");\\n        swapThreshold = _swapThreshold;\\n    }\\n\\n    /// ================================ Internal functions ================================ ///\\n\\n    /**\\n     * @notice Internal function to perform token transfer between two addresses, subject to various checks and conditions\\n     * @param _sender The address from which tokens are being transferred\\n     * @param _recipient The address to which tokens are being transferred\\n     * @param _amount The amount of tokens being transferred\\n     */\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        require(_sender != address(0), \\\"Transfer from zero address\\\");\\n        require(_recipient != address(0), \\\"Transfer to zero address\\\");\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(_balances[_sender] >= _amount, \\\"Not enough amount to transfer\\\");\\n        require(_sender == owner() || launchTime != 0, \\\"Not launched yet\\\");\\n        if (block.timestamp < launchTime + whitelistPeriod) {\\n            require(whitelists[_recipient], \\\"only whitelist\\\");\\n        }\\n        if (maxWalletAmount > 0) {\\n            require(\\n                excludedFromMaxWallet[_recipient] ||\\n                    _balances[_recipient] + _amount <= maxWalletAmount,\\n                \\\"Exceeds to maxWalletAmount\\\"\\n            );\\n        }\\n        if (\\n            inSwapLiquidity ||\\n            excludedFromFees[_recipient] ||\\n            excludedFromFees[_sender]\\n        ) {\\n            _basicTransfer(_sender, _recipient, _amount);\\n            emit Transfer(_sender, _recipient, _amount);\\n            return;\\n        }\\n        if (pair != address(0)) {\\n            if (_sender == pair) {\\n                // buy\\n                _taxonBuyTransfer(_sender, _recipient, _amount);\\n            } else {\\n                _swapBack();\\n\\n                if (_recipient == pair) {\\n                    // sell\\n                    _taxonSellTransfer(_sender, _recipient, _amount);\\n                } else {\\n                    _basicTransfer(_sender, _recipient, _amount);\\n                }\\n            }\\n        }\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Internal function to swap excess tokens in the contract back to ETH and manage liquidity and fees\\n     */\\n    function _swapBack() internal {\\n        uint256 accTotalAmount = accLiquidityAmount + accMarketingAmount;\\n        if (accTotalAmount <= swapThreshold) {\\n            return;\\n        }\\n        inSwapLiquidity = true;\\n        uint256 swapAmountForLiquidity = accLiquidityAmount / 2;\\n        uint256 swapAmount = accTotalAmount - swapAmountForLiquidity;\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = dexRouter.WETH();\\n        _approve(address(this), address(dexRouter), swapAmount);\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            swapAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp + 30 minutes\\n        );\\n        uint256 swappedETHAmount = address(this).balance;\\n        require(swappedETHAmount > 0, \\\"Too small token for swapBack\\\");\\n        uint256 ethForLiquidity = (swappedETHAmount * swapAmountForLiquidity) /\\n            swapAmount;\\n\\n        if (ethForLiquidity > 0) {\\n            uint256 amountForLiquidity = accLiquidityAmount -\\n                swapAmountForLiquidity;\\n            _approve(address(this), address(dexRouter), amountForLiquidity);\\n            dexRouter.addLiquidityETH{value: ethForLiquidity}(\\n                address(this),\\n                amountForLiquidity,\\n                0,\\n                0,\\n                0x000000000000000000000000000000000000dEaD,\\n                block.timestamp + 30 minutes\\n            );\\n            swappedETHAmount -= ethForLiquidity;\\n        }\\n\\n        _transferETH(marketingTaxRecv, swappedETHAmount);\\n\\n        accLiquidityAmount = 0;\\n        accMarketingAmount = 0;\\n        inSwapLiquidity = false;\\n    }\\n\\n    /**\\n     * @notice Internal function to handle transfers when tokens are being sold\\n     * @param _sender The address of the sender (seller)\\n     * @param _recipient The address of the recipient (buyer)\\n     * @param _amount The amount of tokens being transferred\\n     */\\n    function _taxonSellTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        (\\n            uint256 marketingFeeRate,\\n            uint256 liquidityFeeRate\\n        ) = _getSellFeeRate();\\n\\n        uint256 marketingFeeAmount = (_amount * marketingFeeRate) / FIXED_POINT;\\n        uint256 liquidityFeeAmount = (_amount * liquidityFeeRate) / FIXED_POINT;\\n        uint256 recvAmount = _amount -\\n            (marketingFeeAmount + liquidityFeeAmount);\\n\\n        _balances[_sender] -= _amount;\\n        _balances[_recipient] += recvAmount;\\n        _balances[address(this)] += (marketingFeeAmount + liquidityFeeAmount);\\n        accLiquidityAmount += liquidityFeeAmount;\\n        accMarketingAmount += marketingFeeAmount;\\n    }\\n\\n    /**\\n     * @notice Internal function to handle transfers when tokens are being bought\\n     * @param _sender The address of the sender (buyer)\\n     * @param _recipient The address of the recipient (seller)\\n     * @param _amount The amount of tokens being transferred\\n     */\\n    function _taxonBuyTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        (uint256 marketingFeeRate, uint256 liquidityFeeRate) = _getBuyFeeRate();\\n\\n        uint256 marketingFeeAmount = (_amount * marketingFeeRate) / FIXED_POINT;\\n        uint256 liquidityFeeAmount = (_amount * liquidityFeeRate) / FIXED_POINT;\\n        uint256 recvAmount = _amount -\\n            (marketingFeeAmount + liquidityFeeAmount);\\n\\n        _balances[_sender] -= _amount;\\n        _balances[_recipient] += recvAmount;\\n        _balances[address(this)] += (marketingFeeAmount + liquidityFeeAmount);\\n        accLiquidityAmount += liquidityFeeAmount;\\n        accMarketingAmount += marketingFeeAmount;\\n    }\\n\\n    /**\\n     * @notice Internal function to perform a basic transfer of tokens between two addresses\\n     * @param _sender The address of the sender\\n     * @param _recipient The address of the recipient\\n     * @param _amount The amount of tokens to transfer\\n     */\\n    function _basicTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        _balances[_sender] -= _amount;\\n        _balances[_recipient] += _amount;\\n    }\\n\\n    /**\\n     * @notice Internal function to get the fee rates for selling tokens based on the current time period after launch\\n     */\\n    function _getSellFeeRate()\\n        internal\\n        view\\n        returns (uint256 _marketingFeeRate, uint256 _liquidityFeeRate)\\n    {\\n        return (sellfeeRate.marketingFeeRate, sellfeeRate.liquidityFeeRate);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the fee rates for buying tokens based on the current time period after launch\\n     */\\n    function _getBuyFeeRate()\\n        internal\\n        view\\n        returns (uint256 _marketingFeeRate, uint256 _liquidityFeeRate)\\n    {\\n        return (buyfeeRate.marketingFeeRate, buyfeeRate.liquidityFeeRate);\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer ETH to a specified recipient\\n     * @param _recipient The address of the recipient to which ETH should be transferred\\n     * @param _amount The amount of ETH to transfer\\n     */\\n    function _transferETH(address _recipient, uint256 _amount) internal {\\n        if (_amount == 0) return;\\n        (bool sent, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Sending ETH failed\\\");\\n    }\\n\\n    /// ================================ Private functions ================================ ///\\n\\n    /**\\n     * @notice Private function to set the allowance amount that `_spender` can spend on behalf of `_owner`\\n     * @param _owner The address that approves spending\\n     * @param _spender The address that is allowed to spend\\n     * @param _amount The amount of tokens that `_spender` is allowed to spend\\n     */\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) private {\\n        require(_owner != address(0), \\\"Approve from zero\\\");\\n        require(_spender != address(0), \\\"Approve to zero\\\");\\n        _allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFXISportsToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: None\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title FXI Sports Token\\n/// @title https://fx1.io/\\n/// @title https://t.me/fx1_sports_portal\\n/// @author https://PROOFplatform.io\\n/// @author https://5thWeb.io\\n\\ninterface IFXISportsToken is IERC20 {\\n    struct Param {\\n        address marketingTaxRecv;\\n        address dexRouter;\\n        uint256 whitelistPeriod;\\n    }\\n\\n    struct FeeRate {\\n        uint256 marketingFeeRate;\\n        uint256 liquidityFeeRate;\\n    }\\n\\n    /// @notice Locks trading until called. Cannont be called twice.\\n    /// @dev Only owner can call this function.\\n    function setLaunchBegin() external;\\n\\n    /// @notice Add/Remove whitelists.\\n    /// @dev Only owner can call this function.\\n    /// @param _accounts The address of whitelists.\\n    /// @param _add True/False = Add/Remove\\n    function updateWhitelists(address[] memory _accounts, bool _add) external;\\n\\n    /// @notice Add/Remove wallets to excludedMaxWallet.\\n    /// @dev Only owner can call this function.\\n    /// @param _accounts The address of accounts.\\n    /// @param _add True/False = Add/Remove\\n    function excludeWalletsFromMaxWallets(\\n        address[] memory _accounts,\\n        bool _add\\n    ) external;\\n\\n    /// @notice Add/Remove wallets to excludedFromFees.\\n    /// @dev Only owner can call this function.\\n    /// @param _accounts The address of accounts.\\n    /// @param _add True/False = Add/Remove\\n    function excludeWalletsFromFees(\\n        address[] memory _accounts,\\n        bool _add\\n    ) external;\\n\\n    /// @notice Set maxWalletAmount.\\n    /// @dev Only owner can call this function.\\n    /// @param _maxWalletAmount New maxWalletAmount.\\n    function setMaxWalletAmount(uint256 _maxWalletAmount) external;\\n\\n    /// @notice Set marketingTaxRecipient wallet address.\\n    /// @dev Only owner can call this function.\\n    /// @param _marketingTaxWallet The address of marketingTaxRecipient wallet.\\n    function setMarketingTaxWallet(address _marketingTaxWallet) external;\\n\\n    /// @notice UpdateBuyFeeRate.\\n    /// @dev Only owner can call this function.\\n    /// @dev Max Rate of 100(10%) 10 = 1%\\n    /// @param _marketingBuyFeeRate New MarketingBuyFeeRate.\\n    /// @param _liquidityBuyFeeRate New LiquidityBuyFeeRate.\\n    function updateBuyFeeRate(\\n        uint16 _marketingBuyFeeRate,\\n        uint16 _liquidityBuyFeeRate\\n    ) external;\\n\\n    /// @notice UpdateSellFeeRate.\\n    /// @dev Only owner can call this function.\\n    /// @dev Max Rate of 100(10%) 10 = 1%\\n    /// @param _marketingSellFeeRate New MarketingSellFeeRate.\\n    /// @param _liquiditySellFeeRate New LiquiditySellFeeRate.\\n    function updateSellFeeRate(\\n        uint16 _marketingSellFeeRate,\\n        uint16 _liquiditySellFeeRate\\n    ) external;\\n\\n    /// @notice Set swapThreshold.\\n    /// @dev Only owner can call this function.\\n    /// @param _swapThreshold New swapThreshold amount.\\n    function setSwapThreshold(uint256 _swapThreshold) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFeeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IFXISportsToken.FeeRate\",\"name\":\"_buyfeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFeeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IFXISportsToken.FeeRate\",\"name\":\"_sellfeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketingTaxRecv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whitelistPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IFXISportsToken.Param\",\"name\":\"_param\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIXED_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"excludeWalletsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"excludeWalletsFromMaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTaxRecv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLaunchBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingTaxWallet\",\"type\":\"address\"}],\"name\":\"setMarketingTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWhiteListPeriod\",\"type\":\"uint256\"}],\"name\":\"setWhiteListPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_marketingBuyFeeRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_liquidityBuyFeeRate\",\"type\":\"uint16\"}],\"name\":\"updateBuyFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_marketingSellFeeRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_liquiditySellFeeRate\",\"type\":\"uint16\"}],\"name\":\"updateSellFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"updateWhitelists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FXISportsToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000afc94420451fca019dc97100d14abcb8704d6e650000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000003c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}