{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AMO2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/ICurvePool.sol\\\";\\nimport {IXETH} from \\\"./interfaces/IXETH.sol\\\";\\nimport {CVXStaker} from \\\"./CVXStaker.sol\\\";\\n\\ncontract xETH_AMO is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Thrown when the xETH-stETH LP balance of the AMO is too low for the rebalancing operation.\\n    error LpBalanceTooLow();\\n\\n    /// @notice Thrown when either the stETH or xETH balance in the pool is zero, which would prevent rebalancing.\\n    error ZeroBalancePool();\\n\\n    /// @notice Thrown when a zero address is provided as an input, which is not allowed.\\n    error ZeroAddressProvided();\\n\\n    /// @notice Thrown when a function is called with a zero value, which is not allowed.\\n    error ZeroValueProvided();\\n\\n    /// @notice Thrown when the setSlippage values are invalid\\n    error InvalidSetSlippage();\\n\\n    /// @notice Thrown when a rebalance attempt is made before the cooldown period has finished.\\n    error CooldownNotFinished();\\n\\n    /// @notice Thrown when a rebalance attempt is made, but the current pool ratios do not require rebalancing.\\n    error RebalanceNotRequired();\\n\\n    /// @notice Thrown when a rebalanceUp operation is not allowed based on the current pool ratios.\\n    error RebalanceUpNotAllowed();\\n\\n    /// @notice Thrown when a rebalanceDown operation is not allowed based on the current pool ratios.\\n    error RebalanceDownNotAllowed();\\n\\n    /// @notice Thrown when the requested rebalanceUp operation exceeds the allowed rebalanceUpCap.\\n    error RebalanceUpCapExceeded();\\n\\n    /// @notice Thrown when the requested rebalanceDown operation exceeds the allowed rebalanceDownCap.\\n    error RebalanceDownCapExceeded();\\n\\n    /// @notice Emitted when a rebalanceUp operation is performed.\\n    /// @param quote The chosen quote for rebalancing.\\n    /// @param xETHamountReceived The actual amount of xETH received after burning LP tokens.\\n    event RebalanceUpFinished(\\n        RebalanceUpQuote quote,\\n        uint256 xETHamountReceived\\n    );\\n\\n    /// @notice Emitted when a rebalanceDown operation is performed.\\n    /// @param quote The chosen quote for rebalancing.\\n    /// @param lpAmountReceived The actual amount of xETH-stETH LP tokens received after minting xETH.\\n    event RebalanceDownFinished(\\n        RebalanceDownQuote quote,\\n        uint256 lpAmountReceived\\n    );\\n\\n    /// @notice Emitted when the defender address is updated.\\n    /// @param oldDefender The previous defender address.\\n    /// @param newDefender The new defender address.\\n    event DefenderUpdated(address oldDefender, address newDefender);\\n\\n    /// @notice Emitted when the upSlippage and downSlippage parameters are updated\\n    /// @param oldUpSlippage The old slippage value for rebalanceUp.\\n    /// @param newUpSlippage The new slippage value for rebalanceUp.\\n    /// @param oldDownSlippage The old slippage value for rebalanceDown.\\n    /// @param newDownSlippage The new slippage value for rebalanceDown.\\n    event SlippageUpdated(\\n      uint256 oldUpSlippage,\\n      uint256 newUpSlippage,\\n      uint256 oldDownSlippage,\\n      uint256 newDownSlippage\\n    );\\n\\n    /// @notice Emitted when the rebalanceUpCap is updated.\\n    /// @param oldRebalanceUpCap The previous rebalanceUpCap value.\\n    /// @param newRebalanceUpCap The new rebalanceUpCap value.\\n    event RebalanceUpCapUpdated(\\n        uint256 oldRebalanceUpCap,\\n        uint256 newRebalanceUpCap\\n    );\\n\\n    /// @notice Emitted when the rebalanceDownCap is updated.\\n    /// @param oldRebalanceDownCap The previous rebalanceDownCap value.\\n    /// @param newRebalanceDownCap The new rebalanceDownCap value.\\n    event RebalanceDownCapUpdated(\\n        uint256 oldRebalanceDownCap,\\n        uint256 newRebalanceDownCap\\n    );\\n\\n    /// @notice Emitted when the cooldownBlocks is updated.\\n    /// @param oldCooldownBlocks The previous cooldownBlocks value.\\n    /// @param newCooldownBlocks The new cooldownBlocks value.\\n    event CooldownBlocksUpdated(\\n        uint256 oldCooldownBlocks,\\n        uint256 newCooldownBlocks\\n    );\\n\\n    /// @notice Emitted when the CVXStaker address is updated.\\n    /// @param oldCVXStaker The previous CVXStaker address.\\n    /// @param newCVXStaker The new CVXStaker address.\\n    event CVXStakerUpdated(address oldCVXStaker, address newCVXStaker);\\n\\n    /// @notice Emitted when the rebalance up threshold is set.\\n    /// @param oldThreshold The old rebalance up threshold.\\n    /// @param newThreshold The new rebalance up threshold.\\n    event SetRebalanceUpThreshold(uint256 oldThreshold, uint256 newThreshold);\\n\\n    /// @notice Emitted when the rebalance down threshold is set.\\n    /// @param oldThreshold The old rebalance down threshold.\\n    /// @param newThreshold The new rebalance down threshold.\\n    event SetRebalanceDownThreshold(uint256 oldThreshold, uint256 newThreshold);\\n\\n    event RecoveredToken(address token, address to, uint256 amount);\\n\\n    /// @dev REBALANCE_DEFENDER_ROLE is the role that allows the defender to call rebalance()\\n    bytes32 public constant REBALANCE_DEFENDER_ROLE =\\n        keccak256(\\\"REBALANCE_DEFENDER_ROLE\\\");\\n\\n    /// @dev BASE_UNIT is the base unit used for calculations (1E18)\\n    uint256 public constant BASE_UNIT = 1E18;\\n\\n    /// @dev xETHIndex is the index of xETH in the Curve pool\\n    uint256 public immutable xETHIndex;\\n\\n    /// @dev stETHIndex is the index of stETH in the Curve pool\\n    uint256 public immutable stETHIndex;\\n\\n    /// @dev xETH is the xETH token contract\\n    IXETH public immutable xETH;\\n\\n    /// @dev stETH is the stETH token contract\\n    IERC20 public immutable stETH;\\n\\n    /// @dev curvePool is the Curve pool contract\\n    ICurvePool public immutable curvePool;\\n\\n    /// @dev upSlippage is the maximum slippage allowed when rebalancing up\\n    /// @notice 1E14 = 1 BPS\\n    uint256 public upSlippage;\\n    \\n    /// @dev downSlippage is the maximum slippage allowed when rebalancing down \\n    /// @notice 1E14 = 1 BPS\\n    uint256 public downSlippage = 100 * 1E14;\\n\\n    /// @dev rebalanceUpCap is the maximum amount of xETH-stETH LP that can be burnt in a single rebalance\\n    uint256 public rebalanceUpCap;\\n\\n    /// @dev rebalanceDownCap is the maximum amount of xETH that can be minted in a single rebalance\\n    uint256 public rebalanceDownCap;\\n\\n    /// @dev lastRebalanceBlock is the block number of the last rebalance\\n    uint256 public lastRebalanceBlock;\\n\\n    /// @dev cooldownBlocks is the number of blocks that must pass between rebalances\\n    uint256 public cooldownBlocks = 1800; /// (6 * 60 * 60) / 12\\n\\n    /// @dev REBALANCE_UP_THRESHOLD is the upper threshold for the xETH-stETH LP ratio\\n    /// @notice if the ratio is above this value, rebalanceUp() will be called\\n    uint256 public REBALANCE_UP_THRESHOLD = 0.75E18;\\n\\n    /// @dev REBALANCE_DOWN_THRESHOLD is the lower threshold for the xETH-stETH LP ratio\\n    /// @notice if the ratio is below this value, rebalanceDown() will be called\\n    uint256 public REBALANCE_DOWN_THRESHOLD = 0.68E18;\\n\\n    /// @dev defender is the whitelisted bot that can call rebalance()\\n    address public defender;\\n\\n    /// @dev cvxStaker is the CVX staking contract\\n    CVXStaker public cvxStaker;\\n\\n    /// @dev afterCooldownPeriod is a modifier that checks if the cooldown period has passed\\n    modifier afterCooldownPeriod() {\\n        if (lastRebalanceBlock + cooldownBlocks >= block.number)\\n            revert CooldownNotFinished();\\n        _;\\n        lastRebalanceBlock = block.number;\\n    }\\n\\n    constructor(\\n        address _xETH,\\n        address _stETH,\\n        address _curvePool,\\n        address _cvxStaker,\\n        uint256 _xETHIndex\\n    ) {\\n        if (\\n            _xETH == address(0) ||\\n            _stETH == address(0) ||\\n            _curvePool == address(0) ||\\n            _cvxStaker == address(0)\\n        ) {\\n            revert ZeroAddressProvided();\\n        }\\n\\n        xETH = IXETH(_xETH);\\n        stETH = IERC20(_stETH);\\n        curvePool = ICurvePool(_curvePool);\\n        cvxStaker = CVXStaker(_cvxStaker);\\n\\n        xETHIndex = _xETHIndex;\\n        stETHIndex = 1 - xETHIndex;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev preRebalanceCheck checks if a rebalance is even allowed based on pool ratios\\n    function preRebalanceCheck() internal view returns (bool isRebalanceUp) {\\n        uint256 stETHBal = curvePool.balances(stETHIndex);\\n        uint256 xETHBal = curvePool.balances(xETHIndex);\\n\\n        /// @notice if either token balance is 0, the pool shall not be rebalanced\\n        if (stETHBal == 0 || xETHBal == 0) revert ZeroBalancePool();\\n\\n        uint256 xEthPct = (xETHBal * BASE_UNIT) / (stETHBal + xETHBal);\\n\\n        /// @notice if the ratio is above the upper threshold, rebalanceUp() will be called\\n        if (xEthPct > REBALANCE_UP_THRESHOLD) {\\n            isRebalanceUp = true;\\n        }\\n        /// @notice if the ratio is below the lower threshold, rebalanceDown() will be called\\n        /// @notice possible gas optimization here.\\n        else if (xEthPct < REBALANCE_DOWN_THRESHOLD) {\\n            isRebalanceUp = false;\\n        }\\n        /// @notice if the ratio is within the thresholds, the pool shall not be rebalanced\\n        else {\\n            revert RebalanceNotRequired();\\n        }\\n    }\\n\\n    struct RebalanceUpQuote {\\n        uint256 lpBurn;\\n        uint256 min_xETHReceived;\\n    }\\n\\n    /**\\n     * @dev Executes a rebalance up operation, which burns xETH-stETH LP to receive xETH.\\n     * @param quote The quote for the rebalance operation provided by the rebalance defender.\\n     * @return xETHReceived The amount of xETH received from the rebalance operation.\\n     * @notice Only the rebalance defender can call this function.\\n     * @notice The rebalance operation can only be performed after the cooldown period has elapsed.\\n     */\\n    function rebalanceUp(\\n        RebalanceUpQuote calldata quote\\n    )\\n        external\\n        onlyRole(REBALANCE_DEFENDER_ROLE)\\n        afterCooldownPeriod\\n        returns (uint256 xETHReceived)\\n    {\\n        if (quote.lpBurn == 0) revert ZeroValueProvided();\\n\\n        bool isRebalanceUp = preRebalanceCheck();\\n        if (!isRebalanceUp) revert RebalanceUpNotAllowed();\\n\\n        if (quote.lpBurn > rebalanceUpCap) revert RebalanceUpCapExceeded();\\n\\n        uint256 min_xETHReceived = bestRebalanceUpQuote(quote);\\n\\n        CVXStaker cachedCvxStaker = cvxStaker;\\n\\n        uint256 amoLpBal = cachedCvxStaker.getTotalBalance();\\n\\n        // if (amoLpBal == 0 || quote.lpBurn > amoLpBal) revert LpBalanceTooLow();\\n        if (quote.lpBurn > amoLpBal) revert LpBalanceTooLow();\\n\\n        cachedCvxStaker.withdrawAndUnwrap(quote.lpBurn, false, address(this));\\n\\n        xETHReceived = curvePool.remove_liquidity_one_coin(\\n            quote.lpBurn,\\n            int128(int(xETHIndex)),\\n            min_xETHReceived\\n        );\\n\\n        xETH.burnShares(xETHReceived);\\n\\n        emit RebalanceUpFinished(quote, xETHReceived);\\n    }\\n\\n    struct RebalanceDownQuote {\\n        uint256 xETHAmount;\\n        uint256 minLpReceived;\\n    }\\n\\n    /**\\n     * @dev Executes a rebalance down operation, which mints xETH and deposits into the Curve pool.\\n     * @param quote The quote for the rebalance operation provided by the rebalance defender.\\n     * @return lpAmountOut The amount of LP tokens received from the rebalance operation.\\n     * @notice Only the rebalance defender can call this function.\\n     * @notice The rebalance operation can only be performed after the cooldown period has elapsed.\\n     */\\n    function rebalanceDown(\\n        RebalanceDownQuote calldata quote\\n    )\\n        external\\n        onlyRole(REBALANCE_DEFENDER_ROLE)\\n        afterCooldownPeriod\\n        returns (uint256 lpAmountOut)\\n    {\\n        if (quote.xETHAmount == 0) revert ZeroValueProvided();\\n\\n        bool isRebalanceUp = preRebalanceCheck();\\n        if (isRebalanceUp) revert RebalanceDownNotAllowed();\\n\\n        if (quote.xETHAmount > rebalanceDownCap)\\n            revert RebalanceDownCapExceeded();\\n\\n        uint256 minLpReceived = bestRebalanceDownQuote(quote);\\n\\n        xETH.mintShares(quote.xETHAmount);\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[xETHIndex] = quote.xETHAmount;\\n\\n        IERC20(address(xETH)).safeApprove(address(curvePool), quote.xETHAmount);\\n\\n        lpAmountOut = curvePool.add_liquidity(amounts, minLpReceived);\\n\\n        CVXStaker cachedCvxStaker = cvxStaker;\\n\\n        IERC20(address(curvePool)).safeTransfer(\\n            address(cachedCvxStaker),\\n            lpAmountOut\\n        );\\n        cachedCvxStaker.depositAndStake(lpAmountOut);\\n\\n        emit RebalanceDownFinished(quote, lpAmountOut);\\n    }\\n\\n    /// @dev applySlippage applies the amount of slippage given \\n    function applySlippage(uint256 amount, uint256 slippage) pure internal returns (uint256) {\\n        return slippage == 0 ? amount : (amount * (BASE_UNIT - slippage)) / BASE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Finds the best quote for rebalancing upwards.\\n     * @param defenderQuote The quote provided by the rebalance defender.\\n     * @return The best quote for rebalancing upwards.\\n     * @notice This function is internal and cannot be called outside of the contract.\\n     * @notice the defenderQuote should ideally be better than the contractQuote\\n     * @notice if its not, the contractQuote gets executed as a safeguard, reducing the risk of a large sandwich\\n     */\\n    function bestRebalanceUpQuote(\\n        RebalanceUpQuote calldata defenderQuote\\n    ) internal view returns (uint256) {\\n        // RebalanceUpQuote memory bestQuote;\\n        uint256 vp = curvePool.get_virtual_price();\\n\\n        /// @dev first lets fill the bestQuote with the contractQuote\\n        // bestQuote.lpBurn = defenderQuote.lpBurn;\\n        uint256 min_xETHReceived = applySlippage(\\n            (vp * defenderQuote.lpBurn) / BASE_UNIT,\\n            upSlippage\\n        );\\n\\n        if (defenderQuote.min_xETHReceived > min_xETHReceived)\\n            // bestQuote.min_xETHReceived = defenderQuote.min_xETHReceived \\n            return defenderQuote.min_xETHReceived;\\n\\n        return min_xETHReceived;\\n    }\\n\\n    /**\\n     * @dev Finds the best quote for rebalancing downwards.\\n     * @param defenderQuote The quote provided by the rebalance defender.\\n     * @return The best quote for rebalancing downwards.\\n     * @notice the defenderQuote should ideally be better than the contractQuote\\n     * @notice if its not, the contractQuote gets executed as a safeguard, reducing the risk of a large sandwich\\n     */\\n    function bestRebalanceDownQuote(\\n        RebalanceDownQuote calldata defenderQuote\\n    ) internal view returns (uint256) {\\n        // RebalanceDownQuote memory bestQuote;\\n        uint256 vp = curvePool.get_virtual_price();\\n\\n        /// @dev first lets fill the bestQuote with the contractQuote\\n        // bestQuote.xETHAmount = defenderQuote.xETHAmount;\\n        uint256 minLpReceived = applySlippage(\\n            (BASE_UNIT * defenderQuote.xETHAmount) / vp,\\n            downSlippage\\n        );\\n\\n        if (defenderQuote.minLpReceived > minLpReceived)\\n            // bestQuote.minLpReceived = defenderQuote.minLpReceived;\\n            return defenderQuote.minLpReceived;\\n\\n        return minLpReceived;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the rebalance defender.\\n     * @param newDefender The new rebalance defender address to be set.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice The new rebalance defender address cannot be set to the zero address.\\n     * @notice If a previous defender was set, their `REBALANCE_DEFENDER_ROLE` is revoked and transferred to the new defender.\\n     * @notice Emits a `DefenderUpdated` event.\\n     */\\n    function setRebalanceDefender(\\n        address newDefender\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newDefender == address(0)) revert ZeroAddressProvided();\\n\\n        address cachedDefender = defender;\\n\\n        if (cachedDefender != address(0)) {\\n            _revokeRole(REBALANCE_DEFENDER_ROLE, cachedDefender);\\n        }\\n\\n        emit DefenderUpdated(cachedDefender, newDefender);\\n\\n        defender = newDefender;\\n        _grantRole(REBALANCE_DEFENDER_ROLE, newDefender);\\n    }\\n\\n    /**\\n     * @dev Sets the slippage in basis points for trading.\\n     * @param newUpSlippage The new maximum slippage in basis points for upward price movement to be set.\\n     * @param newDownSlippage The new maximum slippage in basis points for downward price movement to be set.\\n     * @notice 1 BPS = 1E14\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice The new maximum slippage must be between 0.06% and 15% (in basis points).\\n     * @notice Emits a `SlippageUpdated` event.\\n     */\\n    function setSlippage(\\n      uint256 newUpSlippage,\\n      uint256 newDownSlippage\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newUpSlippage >= BASE_UNIT || newDownSlippage >= BASE_UNIT)\\n          revert InvalidSetSlippage();\\n\\n\\n        emit SlippageUpdated(upSlippage, newUpSlippage, downSlippage, newDownSlippage);\\n\\n        upSlippage = newUpSlippage;\\n        downSlippage = newDownSlippage;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum burning cap (rebalanceUp) in a single transaction.\\n     * @param newRebalanceUpCap The new rebalance up cap to be set.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice The new rebalance up cap cannot be set to zero.\\n     * @notice Emits a `RebalanceUpCapUpdated` event.\\n     */\\n    function setRebalanceUpCap(\\n        uint256 newRebalanceUpCap\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newRebalanceUpCap == 0) revert ZeroValueProvided();\\n\\n        emit RebalanceUpCapUpdated(rebalanceUpCap, newRebalanceUpCap);\\n\\n        rebalanceUpCap = newRebalanceUpCap;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum minting cap (rebalanceDown) in a single transaction.\\n     * @param newRebalanceDownCap The new rebalance down cap to be set.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice The new rebalance down cap cannot be set to zero.\\n     * @notice Emits a `RebalanceDownCapUpdated` event.\\n     */\\n    function setRebalanceDownCap(\\n        uint256 newRebalanceDownCap\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newRebalanceDownCap == 0) revert ZeroValueProvided();\\n\\n        emit RebalanceDownCapUpdated(rebalanceDownCap, newRebalanceDownCap);\\n\\n        rebalanceDownCap = newRebalanceDownCap;\\n    }\\n\\n    /**\\n     * @dev Sets the number of blocks for the unstake cooldown period\\n     * @param newCooldownBlocks The new number of blocks for the unstake cooldown period\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice Emits a CooldownBlocksUpdated event with the old and new cooldown block values\\n     */\\n    function setCooldownBlocks(\\n        uint256 newCooldownBlocks\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newCooldownBlocks == 0) revert ZeroValueProvided();\\n\\n        emit CooldownBlocksUpdated(cooldownBlocks, newCooldownBlocks);\\n\\n        cooldownBlocks = newCooldownBlocks;\\n    }\\n\\n    /**\\n     * @dev Sets the CVX staking contract address\\n     * @param _cvxStaker The address of the CVX staking contract\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @notice The new CVX staker contract address cannot be set to the zero address.\\n     * @notice Emits a `CVXStakerUpdated` event.\\n     */\\n    function setCvxStaker(\\n        address _cvxStaker\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_cvxStaker == address(0)) revert ZeroAddressProvided();\\n\\n        emit CVXStakerUpdated(address(cvxStaker), _cvxStaker);\\n\\n        cvxStaker = CVXStaker(_cvxStaker);\\n    }\\n\\n    /**\\n     * @dev Sets the threshold for triggering a `rebalanceUp` operation.\\n     * @param newRebalanceUpThreshold The new threshold to be set.\\n     * @notice Emits a `SetRebalanceUpThreshold` event with the old and new thresholds.\\n     * @notice Requires the caller to have the `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function setRebalanceUpThreshold(\\n        uint256 newRebalanceUpThreshold\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        emit SetRebalanceUpThreshold(\\n            REBALANCE_UP_THRESHOLD,\\n            newRebalanceUpThreshold\\n        );\\n\\n        REBALANCE_UP_THRESHOLD = newRebalanceUpThreshold;\\n    }\\n\\n    /**\\n     * @dev Sets the threshold for triggering a `rebalanceDown` operation.\\n     * @param newRebalanceDownThreshold The new threshold to be set.\\n     * @notice Emits a `SetRebalanceDownThreshold` event with the old and new thresholds.\\n     * @notice Requires the caller to have the `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function setRebalanceDownThreshold(\\n        uint256 newRebalanceDownThreshold\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        emit SetRebalanceDownThreshold(\\n            REBALANCE_DOWN_THRESHOLD,\\n            newRebalanceDownThreshold\\n        );\\n\\n        REBALANCE_DOWN_THRESHOLD = newRebalanceDownThreshold;\\n    }\\n\\n    /**\\n     * @dev Adds liquidity to the Curve pool using both xETH and stETH and stakes the resulting LP tokens in the CVX staking contract\\n     * @param stETHAmount The amount of stETH to be deposited\\n     * @param xETHAmount The amount of xETH to be deposited\\n     * @param minLpOut The minimum amount of LP tokens to receive from the Curve pool\\n     * @notice Transfers stETH and xETH from the caller to this contract, adds liquidity to the Curve pool, and stakes the resulting LP tokens in the CVX staking contract.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @return lpOut The amount of LP tokens received from the Curve pool\\n     */\\n    function addLiquidity(\\n        uint256 stETHAmount,\\n        uint256 xETHAmount,\\n        uint256 minLpOut\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256 lpOut) {\\n        stETH.safeTransferFrom(msg.sender, address(this), stETHAmount);\\n        xETH.mintShares(xETHAmount);\\n\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        amounts[xETHIndex] = xETHAmount;\\n        amounts[stETHIndex] = stETHAmount;\\n\\n        IERC20(address(xETH)).safeApprove(address(curvePool), xETHAmount);\\n        stETH.safeApprove(address(curvePool), stETHAmount);\\n\\n        lpOut = curvePool.add_liquidity(amounts, minLpOut);\\n\\n        /// @notice no need for safeApprove, direct transfer + deposit\\n        IERC20(address(curvePool)).safeTransfer(address(cvxStaker), lpOut);\\n        cvxStaker.depositAndStake(lpOut);\\n    }\\n\\n    /**\\n     * @notice Adds liquidity only with stETH and stakes the resulting LP tokens in the cvxCRV staking contract.\\n     * @param stETHAmount The amount of stETH to add as liquidity.\\n     * @param minLpOut The minimum expected amount of LP tokens to receive.\\n     * @return lpOut The actual amount of LP tokens received.\\n     */\\n    function addLiquidityOnlyStETH(\\n        uint256 stETHAmount,\\n        uint256 minLpOut\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256 lpOut) {\\n        stETH.safeTransferFrom(msg.sender, address(this), stETHAmount);\\n\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        amounts[stETHIndex] = stETHAmount;\\n\\n        stETH.safeApprove(address(curvePool), stETHAmount);\\n\\n        lpOut = curvePool.add_liquidity(amounts, minLpOut);\\n\\n        /// @notice no need for safeApprove, direct transfer + deposit\\n        IERC20(address(curvePool)).safeTransfer(address(cvxStaker), lpOut);\\n        cvxStaker.depositAndStake(lpOut);\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from the Curve pool using both xETH and stETH and transfers the resulting tokens to the caller\\n     * @param lpAmount The amount of LP tokens to be burned\\n     * @param minStETHOut The minimum amount of stETH to receive from the Curve pool\\n     * @param minXETHOut The minimum amount of xETH to receive from the Curve pool\\n     * @notice Checks if the AMO owns enough LP tokens, withdraws and unwraps them, and removes liquidity from the Curve pool.\\n     *      The resulting xETH and stETH are then transferred to the caller.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     * @return outputs An array containing the resulting amounts of xETH and stETH received from the Curve pool\\n     */\\n    function removeLiquidity(\\n        uint256 lpAmount,\\n        uint256 minStETHOut,\\n        uint256 minXETHOut\\n    )\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (uint256[] memory outputs)\\n    {\\n        /// @dev check if AMO owns enough LP\\n        uint256 amoBalance = cvxStaker.getTotalBalance();\\n\\n        if (lpAmount > amoBalance) {\\n            revert LpBalanceTooLow();\\n        }\\n\\n        cvxStaker.withdrawAndUnwrap(lpAmount, false, address(this));\\n\\n        uint256[] memory minAmounts = new uint256[](2);\\n\\n        minAmounts[xETHIndex] = minXETHOut;\\n        minAmounts[stETHIndex] = minStETHOut;\\n\\n        outputs = curvePool.remove_liquidity(lpAmount, minAmounts);\\n\\n        xETH.burnShares(outputs[xETHIndex]);\\n        stETH.safeTransfer(msg.sender, outputs[stETHIndex]);\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from the Curve pool using only stETH and transfers the resulting stETH to the caller\\n     * @param lpAmount The amount of LP tokens to be burned\\n     * @param minStETHOut The minimum amount of stETH to receive from the Curve pool\\n     * @notice Checks if the AMO owns enough LP tokens, withdraws and unwraps them, and removes liquidity from the Curve pool.\\n     *      The resulting stETH is then transferred to the caller.\\n     * @notice Only callable by a user with the DEFAULT_ADMIN_ROLE\\n     */\\n    function removeLiquidityOnlyStETH(\\n        uint256 lpAmount,\\n        uint256 minStETHOut\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        /// @dev check if AMO owns enough LP\\n        uint256 amoBalance = cvxStaker.getTotalBalance();\\n\\n        if (lpAmount > amoBalance) {\\n            revert LpBalanceTooLow();\\n        }\\n\\n        cvxStaker.withdrawAndUnwrap(lpAmount, false, address(this));\\n\\n        uint256 output = curvePool.remove_liquidity_one_coin(\\n            lpAmount,\\n            int128(int(stETHIndex)),\\n            minStETHOut\\n        );\\n\\n        stETH.safeTransfer(msg.sender, output);\\n    }\\n\\n    /**\\n     * @notice Recover any token from AMO\\n     * @param token Token to recover\\n     * @param to Recipient address\\n     * @param amount Amount to recover\\n     */\\n    function recoverToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        IERC20(token).safeTransfer(to, amount);\\n\\n        emit RecoveredToken(token, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICurvePool {\\n    // function get_balances() external view returns (uint256[] memory);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity(uint256 _burn_amount, uint256[] memory _min_amounts)\\n        external\\n        returns (uint256[] memory);\\n\\n    function add_liquidity(uint256[] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IXETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IXETH is IERC20 {\\n    function burnShares(uint256 amount) external;\\n\\n    function mintShares(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/CVXStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICurvePool.sol\\\";\\nimport \\\"./interfaces/ICVXBooster.sol\\\";\\nimport \\\"./interfaces/IBaseRewardPool.sol\\\";\\n\\ncontract CVXStaker is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public operator;\\n    // @notice CLP tokens for curve pool\\n    IERC20 public immutable clpToken;\\n    CvxPoolInfo public cvxPoolInfo;\\n    // @notice Cvx booster\\n    ICVXBooster public immutable booster;\\n\\n    address public rewardsRecipient;\\n    address[] public rewardTokens;\\n\\n    struct CvxPoolInfo {\\n        address token;\\n        address rewards;\\n        uint32 pId;\\n    }\\n\\n    struct Position {\\n        uint256 staked;\\n        uint256 earned;\\n    }\\n\\n    error NotOperator();\\n    error NotOperatorOrOwner();\\n\\n    event SetCvxPoolInfo(uint32 indexed pId, address token, address rewards);\\n    event SetOperator(address operator);\\n    event RecoveredToken(address token, address to, uint256 amount);\\n    event SetRewardsRecipient(address recipient);\\n    event SetRewardTokens(address[] newTokens);\\n\\n    constructor(\\n        address _operator,\\n        IERC20 _clpToken,\\n        ICVXBooster _booster,\\n        address[] memory _rewardTokens\\n    ) {\\n        operator = _operator;\\n        clpToken = _clpToken;\\n        booster = _booster;\\n        rewardTokens = _rewardTokens;\\n    }\\n\\n    /**\\n     * @dev Sets the CVX pool information.\\n     * @param _pId The pool ID of the CVX pool.\\n     * @param _token The address of the CLP token.\\n     * @param _rewards The address of the CVX reward pool.\\n     * Only the contract owner can call this function.\\n     */\\n    function setCvxPoolInfo(\\n        uint32 _pId,\\n        address _token,\\n        address _rewards\\n    ) external onlyOwner {\\n        cvxPoolInfo.pId = _pId;\\n        cvxPoolInfo.token = _token;\\n        cvxPoolInfo.rewards = _rewards;\\n\\n        emit SetCvxPoolInfo(_pId, _token, _rewards);\\n    }\\n\\n    /**\\n     * @notice Set operator\\n     * @param _operator New operator\\n     */\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the rewards recipient.\\n     * @param _recipeint The address of the rewards recipient.\\n     * Only the contract owner can call this function.\\n     */\\n    function setRewardsRecipient(address _recipeint) external onlyOwner {\\n        rewardsRecipient = _recipeint;\\n\\n        emit SetRewardsRecipient(_recipeint);\\n    }\\n\\n    function setRewardTokens(address[] calldata newTokens) external onlyOwner {\\n      rewardTokens = newTokens;\\n\\n      emit SetRewardTokens(newTokens);\\n    }\\n\\n    /**\\n     * @notice Recover any token from cvxStaker \\n     * @param token Token to recover\\n     * @param to Recipient address\\n     * @param amount Amount to recover\\n     */\\n    function recoverToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n\\n        emit RecoveredToken(token, to, amount);\\n    }\\n\\n    /**\\n     * @dev Checks whether the CVX pool is currently shutdown.\\n     * @return A boolean indicating whether the CVX pool is currently shutdown.\\n     */\\n    function isCvxShutdown() public view returns (bool) {\\n        // It's not necessary to check that the booster itself is shutdown, as that can only\\n        // be shutdown once all the pools are shutdown - see Cvx BoosterOwner.shutdownSystem()\\n        return booster.poolInfo(cvxPoolInfo.pId).shutdown;\\n    }\\n\\n    /**\\n     * @dev Deposits a specified amount of CLP tokens into the booster and stakes them in the reward pool.\\n     * @param amount The amount of CLP tokens to deposit and stake.\\n     * Only the operator can call this function.\\n     */\\n    function depositAndStake(uint256 amount) external onlyOperator {\\n        // Only deposit if the aura pool is open. Otherwise leave the CLP Token in this contract.\\n        if (!isCvxShutdown()) {\\n            clpToken.safeIncreaseAllowance(address(booster), amount);\\n            booster.deposit(cvxPoolInfo.pId, amount, true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws a specified amount of staked tokens from the reward pool and unwraps them to the original tokens.\\n     * @param amount The amount of tokens to withdraw and unwrap.\\n     * @param claim A boolean indicating whether to claim rewards before withdrawing.\\n     * @param to The address to receive the unwrapped tokens.\\n     * If set to 0x0, the tokens will remain in the contract.\\n     * Only the contract owner or operator can call this function.\\n     */\\n    function withdrawAndUnwrap(\\n        uint256 amount,\\n        bool claim,\\n        address to\\n    ) external onlyOperatorOrOwner {\\n        // Optimistically use CLP balance in this contract, and then try and unstake any remaining\\n        uint256 clpBalance = clpToken.balanceOf(address(this));\\n        uint256 toUnstake = (amount < clpBalance) ? 0 : amount - clpBalance;\\n        if (toUnstake > 0) {\\n            IBaseRewardPool(cvxPoolInfo.rewards).withdrawAndUnwrap(\\n                toUnstake,\\n                claim\\n            );\\n        }\\n\\n        if (to != address(0)) {\\n            // unwrapped amount is 1 to 1\\n            clpToken.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws all staked tokens from the reward pool and unwraps them to the original tokens.\\n     * @param claim A boolean indicating whether to claim rewards before withdrawing.\\n     * @param sendToOwner A boolean indicating whether to send the unwrapped tokens to the owner.\\n     * If false, the tokens will remain in the contract.\\n     * Only the contract owner can call this function.\\n     */\\n    function withdrawAllAndUnwrap(\\n        bool claim,\\n        bool sendToOwner\\n    ) external onlyOwner {\\n        IBaseRewardPool(cvxPoolInfo.rewards).withdrawAllAndUnwrap(claim);\\n        if (sendToOwner) {\\n            uint256 totalBalance = clpToken.balanceOf(address(this));\\n            /// @dev msg.sender is the owner, due to onlyOwner modifier\\n            clpToken.safeTransfer(msg.sender, totalBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claims the rewards and transfers them to the rewards recipient, if specified.\\n     * @param claimExtras A boolean indicating whether to claim extra rewards.\\n     */\\n    function getReward(bool claimExtras) external {\\n        IBaseRewardPool(cvxPoolInfo.rewards).getReward(\\n            address(this),\\n            claimExtras\\n        );\\n    }\\n\\n    error OutOfBounds(uint8 check);\\n\\n    function transferReward(uint256 initialIndex, uint256 lastIndex) external {\\n      if (initialIndex >= lastIndex) {\\n        revert OutOfBounds(0);\\n      }\\n      if (lastIndex > rewardTokens.length) {\\n        revert OutOfBounds(1);\\n      }\\n\\n\\n      if (rewardsRecipient != address(0)) {\\n        for (uint i = initialIndex; i < lastIndex; ) {\\n            uint256 balance = IERC20(rewardTokens[i]).balanceOf(\\n                address(this)\\n            );\\n            if (balance != 0) {\\n              IERC20(rewardTokens[i]).safeTransfer(rewardsRecipient, balance);\\n            }\\n            unchecked {++i;}\\n        }\\n      }\\n    }\\n\\n\\n    /**\\n     * @dev Returns the current staked balance of the contract.\\n     * @return balance The current staked balance.\\n     */\\n    function stakedBalance() public view returns (uint256 balance) {\\n        balance = IBaseRewardPool(cvxPoolInfo.rewards).balanceOf(address(this));\\n    }\\n\\n    function getTotalBalance() public view returns(uint256 balance) {\\n      unchecked {\\n        balance = stakedBalance() + clpToken.balanceOf(address(this));\\n      }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of earned rewards by the contract.\\n     * @return earnedRewards The amount of earned rewards.\\n     */\\n    function earned() public view returns (uint256 earnedRewards) {\\n        earnedRewards = IBaseRewardPool(cvxPoolInfo.rewards).earned(\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice show staked position and earned rewards\\n     */\\n    function showPositions() external view returns (Position memory position) {\\n        position.staked = stakedBalance();\\n        position.earned = earned();\\n    }\\n\\n    /// @dev Modifier to restrict function execution to only the contract operator.\\n    /// @notice Throws a custom exception `NotOperator` if the caller is not the operator.\\n    modifier onlyOperator() {\\n        if (msg.sender != operator) {\\n            revert NotOperator();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to restrict function execution to only the contract operator or owner.\\n    /// @notice Throws a custom exception `NotOperatorOrOwner` if the caller is neither the operator nor the owner.\\n    modifier onlyOperatorOrOwner() {\\n        if (msg.sender != operator && msg.sender != owner()) {\\n            revert NotOperatorOrOwner();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICVXBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICVXBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IBaseRewardPool {\\n    function withdrawAndUnwrap(\\n        uint256 amount,\\n        bool claim\\n    ) external returns (bool);\\n\\n    function withdrawAll(bool claim) external;\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function stakeFor(address _for, uint256 _amount) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward(\\n        address _account,\\n        bool _claimExtras\\n    ) external returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"weird-erc20/=lib/solmate/lib/weird-erc20/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curvePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxStaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_xETHIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CooldownNotFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSetSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LpBalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceDownCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceDownNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceNotRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceUpCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceUpNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalancePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueProvided\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCVXStaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCVXStaker\",\"type\":\"address\"}],\"name\":\"CVXStakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCooldownBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCooldownBlocks\",\"type\":\"uint256\"}],\"name\":\"CooldownBlocksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDefender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDefender\",\"type\":\"address\"}],\"name\":\"DefenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRebalanceDownCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRebalanceDownCap\",\"type\":\"uint256\"}],\"name\":\"RebalanceDownCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"xETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpReceived\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct xETH_AMO.RebalanceDownQuote\",\"name\":\"quote\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmountReceived\",\"type\":\"uint256\"}],\"name\":\"RebalanceDownFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRebalanceUpCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRebalanceUpCap\",\"type\":\"uint256\"}],\"name\":\"RebalanceUpCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_xETHReceived\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct xETH_AMO.RebalanceUpQuote\",\"name\":\"quote\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xETHamountReceived\",\"type\":\"uint256\"}],\"name\":\"RebalanceUpFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceDownThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceUpThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUpSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUpSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDownSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDownSlippage\",\"type\":\"uint256\"}],\"name\":\"SlippageUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_DEFENDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_DOWN_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_UP_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpOut\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpOut\",\"type\":\"uint256\"}],\"name\":\"addLiquidityOnlyStETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxStaker\",\"outputs\":[{\"internalType\":\"contract CVXStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"downSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"xETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpReceived\",\"type\":\"uint256\"}],\"internalType\":\"struct xETH_AMO.RebalanceDownQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"rebalanceDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceDownCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_xETHReceived\",\"type\":\"uint256\"}],\"internalType\":\"struct xETH_AMO.RebalanceUpQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"rebalanceUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xETHReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceUpCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStETHOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minXETHOut\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"outputs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStETHOut\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOnlyStETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCooldownBlocks\",\"type\":\"uint256\"}],\"name\":\"setCooldownBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cvxStaker\",\"type\":\"address\"}],\"name\":\"setCvxStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDefender\",\"type\":\"address\"}],\"name\":\"setRebalanceDefender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRebalanceDownCap\",\"type\":\"uint256\"}],\"name\":\"setRebalanceDownCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRebalanceDownThreshold\",\"type\":\"uint256\"}],\"name\":\"setRebalanceDownThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRebalanceUpCap\",\"type\":\"uint256\"}],\"name\":\"setRebalanceUpCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRebalanceUpThreshold\",\"type\":\"uint256\"}],\"name\":\"setRebalanceUpThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUpSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDownSlippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETHIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xETH\",\"outputs\":[{\"internalType\":\"contract IXETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xETHIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "xETH_AMO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "0000000000000000000000002b01d4fdb87eb7f2399e5d68631d8a939a32378600000000000000000000000004c154b66cb340f3ae24111cc767e0184ed00cc60000000000000000000000003c91eaeac42dfaead5f356167c52837e443b9f94000000000000000000000000c7a761ac7a7e54dc3a3875e83c4bdfd4246e5ab60000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}