{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BribeMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IBribeVault} from \\\"./interfaces/IBribeVault.sol\\\";\\nimport {Common} from \\\"./libraries/Common.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\ncontract BribeMarket is AccessControl, ReentrancyGuard {\\n    bytes32 public constant TEAM_ROLE = keccak256(\\\"TEAM_ROLE\\\");\\n\\n    uint256 public constant MAX_PERIODS = 10;\\n    uint256 public constant MAX_PERIOD_DURATION = 30 days;\\n\\n    // Name (identifier) of the market, also used for rewardIdentifiers\\n    // Immutable after initialization\\n    string public PROTOCOL;\\n\\n    // Address of the bribeVault\\n    // Immutable after initialization\\n    address public BRIBE_VAULT;\\n\\n    // Maximum number of periods\\n    uint256 public maxPeriods;\\n\\n    // Period duration\\n    uint256 public periodDuration;\\n\\n    // Whitelisted bribe tokens\\n    address[] private _allWhitelistedTokens;\\n\\n    // Blacklisted voters\\n    address[] private _allBlacklistedVoters;\\n\\n    // Arbitrary bytes mapped to deadlines\\n    mapping(bytes32 => uint256) public proposalDeadlines;\\n\\n    // Tracks whitelisted tokens\\n    mapping(address => uint256) public indexOfWhitelistedToken;\\n\\n    // Tracks blacklisted voters\\n    mapping(address => uint256) public indexOfBlacklistedVoter;\\n\\n    bool private _initialized;\\n\\n    event Initialize(\\n        address bribeVault,\\n        address admin,\\n        string protocol,\\n        uint256 maxPeriods,\\n        uint256 periodDuration\\n    );\\n    event GrantTeamRole(address teamMember);\\n    event RevokeTeamRole(address teamMember);\\n    event SetProposals(bytes32[] proposals, uint256 indexed deadline);\\n    event SetProposalsById(\\n        uint256 indexed proposalIndex,\\n        bytes32[] proposals,\\n        uint256 indexed deadline\\n    );\\n    event SetProposalsByAddress(bytes32[] proposals, uint256 indexed deadline);\\n    event AddWhitelistedTokens(address[] tokens);\\n    event RemoveWhitelistedTokens(address[] tokens);\\n    event SetMaxPeriods(uint256 maxPeriods);\\n    event SetPeriodDuration(uint256 periodDuration);\\n    event AddBlacklistedVoters(address[] voters);\\n    event RemoveBlacklistedVoters(address[] voters);\\n\\n    modifier onlyAuthorized() {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) &&\\n            !hasRole(TEAM_ROLE, msg.sender)\\n        ) revert Errors.NotAuthorized();\\n        _;\\n    }\\n\\n    modifier onlyInitializer() {\\n        if (_initialized) revert Errors.AlreadyInitialized();\\n        _;\\n        _initialized = true;\\n    }\\n\\n    /**\\n        @notice Initialize the contract\\n        @param  _bribeVault  Bribe vault address\\n        @param  _admin       Admin address\\n        @param  _protocol    Protocol name\\n        @param  _maxPeriods  Maximum number of periods\\n        @param  _periodDuration  Period duration\\n     */\\n    function initialize(\\n        address _bribeVault,\\n        address _admin,\\n        string calldata _protocol,\\n        uint256 _maxPeriods,\\n        uint256 _periodDuration\\n    ) external onlyInitializer {\\n        if (_bribeVault == address(0)) revert Errors.InvalidAddress();\\n        if (bytes(_protocol).length == 0) revert Errors.InvalidProtocol();\\n        if (_maxPeriods == 0 || _maxPeriods > MAX_PERIODS)\\n            revert Errors.InvalidMaxPeriod();\\n        if (_periodDuration == 0 || _periodDuration > MAX_PERIOD_DURATION)\\n            revert Errors.InvalidPeriodDuration();\\n\\n        BRIBE_VAULT = _bribeVault;\\n        PROTOCOL = _protocol;\\n        maxPeriods = _maxPeriods;\\n        periodDuration = _periodDuration;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n\\n        emit Initialize(\\n            _bribeVault,\\n            _admin,\\n            _protocol,\\n            _maxPeriods,\\n            _periodDuration\\n        );\\n    }\\n\\n    /**\\n        @notice Set multiple proposals with arbitrary bytes data as identifiers under the same deadline\\n        @param  _identifiers  bytes[]  identifiers\\n        @param  _deadline     uint256  Proposal deadline\\n     */\\n    function setProposals(\\n        bytes[] calldata _identifiers,\\n        uint256 _deadline\\n    ) external onlyAuthorized {\\n        uint256 identifiersLen = _identifiers.length;\\n        if (identifiersLen == 0) revert Errors.InvalidAddress();\\n        if (_deadline < block.timestamp) revert Errors.InvalidDeadline();\\n\\n        bytes32[] memory proposalIds = new bytes32[](identifiersLen);\\n\\n        uint256 i;\\n        do {\\n            if (_identifiers[i].length == 0) revert Errors.InvalidIdentifier();\\n\\n            proposalIds[i] = keccak256(abi.encodePacked(_identifiers[i]));\\n\\n            _setProposal(proposalIds[i], _deadline);\\n\\n            ++i;\\n        } while (i < identifiersLen);\\n\\n        emit SetProposals(proposalIds, _deadline);\\n    }\\n\\n    /**\\n        @notice Set proposals based on the index of the proposal and the number of choices\\n        @param  _proposalIndex  uint256  Proposal index\\n        @param  _choiceCount    uint256  Number of choices to be voted for\\n        @param  _deadline       uint256  Proposal deadline\\n     */\\n    function setProposalsById(\\n        uint256 _proposalIndex,\\n        uint256 _choiceCount,\\n        uint256 _deadline\\n    ) external onlyAuthorized {\\n        if (_choiceCount == 0) revert Errors.InvalidChoiceCount();\\n        if (_deadline < block.timestamp) revert Errors.InvalidDeadline();\\n\\n        bytes32[] memory proposalIds = new bytes32[](_choiceCount);\\n\\n        uint256 i;\\n        do {\\n            proposalIds[i] = keccak256(abi.encodePacked(_proposalIndex, i));\\n\\n            _setProposal(proposalIds[i], _deadline);\\n\\n            ++i;\\n        } while (i < _choiceCount);\\n\\n        emit SetProposalsById(_proposalIndex, proposalIds, _deadline);\\n    }\\n\\n    /**\\n        @notice Set multiple proposals for many addresses under the same deadline\\n        @param  _addresses  address[]  addresses (eg. gauge addresses)\\n        @param  _deadline   uint256    Proposal deadline\\n     */\\n    function setProposalsByAddress(\\n        address[] calldata _addresses,\\n        uint256 _deadline\\n    ) external onlyAuthorized {\\n        uint256 addressesLen = _addresses.length;\\n        if (addressesLen == 0) revert Errors.InvalidAddress();\\n        if (_deadline < block.timestamp) revert Errors.InvalidDeadline();\\n\\n        bytes32[] memory proposalIds = new bytes32[](addressesLen);\\n\\n        uint256 i;\\n        do {\\n            if (_addresses[i] == address(0)) revert Errors.InvalidAddress();\\n\\n            proposalIds[i] = keccak256(abi.encodePacked(_addresses[i]));\\n\\n            _setProposal(proposalIds[i], _deadline);\\n\\n            ++i;\\n        } while (i < addressesLen);\\n\\n        emit SetProposalsByAddress(proposalIds, _deadline);\\n    }\\n\\n    /**\\n        @notice Grant the team role to an address\\n        @param  _teamMember  address  Address to grant the teamMember role\\n     */\\n    function grantTeamRole(\\n        address _teamMember\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_teamMember == address(0)) revert Errors.InvalidAddress();\\n        _grantRole(TEAM_ROLE, _teamMember);\\n\\n        emit GrantTeamRole(_teamMember);\\n    }\\n\\n    /**\\n        @notice Revoke the team role from an address\\n        @param  _teamMember  address  Address to revoke the teamMember role\\n     */\\n    function revokeTeamRole(\\n        address _teamMember\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(TEAM_ROLE, _teamMember)) revert Errors.NotTeamMember();\\n        _revokeRole(TEAM_ROLE, _teamMember);\\n\\n        emit RevokeTeamRole(_teamMember);\\n    }\\n\\n    /**\\n        @notice Set maximum periods for submitting bribes ahead of time\\n        @param  _periods  uint256  Maximum periods\\n     */\\n    function setMaxPeriods(\\n        uint256 _periods\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_periods == 0 || _periods > MAX_PERIODS)\\n            revert Errors.InvalidMaxPeriod();\\n\\n        maxPeriods = _periods;\\n\\n        emit SetMaxPeriods(_periods);\\n    }\\n\\n    /**\\n        @notice Set period duration per voting round\\n        @param  _periodDuration  uint256  Period duration\\n     */\\n    function setPeriodDuration(\\n        uint256 _periodDuration\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_periodDuration == 0 || _periodDuration > MAX_PERIOD_DURATION)\\n            revert Errors.InvalidPeriodDuration();\\n\\n        periodDuration = _periodDuration;\\n\\n        emit SetPeriodDuration(_periodDuration);\\n    }\\n\\n    /**\\n        @notice Add whitelisted tokens\\n        @param  _tokens  address[]  Tokens to add to whitelist\\n     */\\n    function addWhitelistedTokens(\\n        address[] calldata _tokens\\n    ) external onlyAuthorized {\\n        uint256 tLen = _tokens.length;\\n        for (uint256 i; i < tLen; ) {\\n            if (_tokens[i] == address(0)) revert Errors.InvalidAddress();\\n            if (_tokens[i] == BRIBE_VAULT)\\n                revert Errors.NoWhitelistBribeVault();\\n            if (isWhitelistedToken(_tokens[i]))\\n                revert Errors.TokenWhitelisted();\\n\\n            // Perform creation op for the unordered key set\\n            _allWhitelistedTokens.push(_tokens[i]);\\n            indexOfWhitelistedToken[_tokens[i]] =\\n                _allWhitelistedTokens.length -\\n                1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit AddWhitelistedTokens(_tokens);\\n    }\\n\\n    /**\\n        @notice Remove whitelisted tokens\\n        @param  _tokens  address[]  Tokens to remove from whitelist\\n     */\\n    function removeWhitelistedTokens(\\n        address[] calldata _tokens\\n    ) external onlyAuthorized {\\n        uint256 tLen = _tokens.length;\\n        for (uint256 i; i < tLen; ) {\\n            if (!isWhitelistedToken(_tokens[i]))\\n                revert Errors.TokenNotWhitelisted();\\n\\n            // Perform deletion op for the unordered key set\\n            // by swapping the affected row to the end/tail of the list\\n            uint256 index = indexOfWhitelistedToken[_tokens[i]];\\n            address tail = _allWhitelistedTokens[\\n                _allWhitelistedTokens.length - 1\\n            ];\\n\\n            _allWhitelistedTokens[index] = tail;\\n            indexOfWhitelistedToken[tail] = index;\\n\\n            delete indexOfWhitelistedToken[_tokens[i]];\\n            _allWhitelistedTokens.pop();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit RemoveWhitelistedTokens(_tokens);\\n    }\\n\\n    /**\\n        @notice Add blacklisted voters\\n        @param  _voters  address[]  Voters to add to blacklist\\n     */\\n    function addBlacklistedVoters(\\n        address[] calldata _voters\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 vLen = _voters.length;\\n        for (uint256 i; i < vLen; ) {\\n            if (_voters[i] == address(0)) revert Errors.InvalidAddress();\\n            if (isBlacklistedVoter(_voters[i]))\\n                revert Errors.VoterBlacklisted();\\n\\n            _allBlacklistedVoters.push(_voters[i]);\\n            indexOfBlacklistedVoter[_voters[i]] =\\n                _allBlacklistedVoters.length -\\n                1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit AddBlacklistedVoters(_voters);\\n    }\\n\\n    /**\\n        @notice Remove blacklisted voters\\n        @param  _voters  address[]  Voters to remove from blacklist\\n     */\\n    function removeBlacklistedVoters(\\n        address[] calldata _voters\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 vLen = _voters.length;\\n        for (uint256 i; i < vLen; ) {\\n            if (!isBlacklistedVoter(_voters[i]))\\n                revert Errors.VoterNotBlacklisted();\\n\\n            // Perform deletion op for the unordered key set\\n            // by swapping the affected row to the end/tail of the list\\n            uint256 index = indexOfBlacklistedVoter[_voters[i]];\\n            address tail = _allBlacklistedVoters[\\n                _allBlacklistedVoters.length - 1\\n            ];\\n\\n            _allBlacklistedVoters[index] = tail;\\n            indexOfBlacklistedVoter[tail] = index;\\n\\n            delete indexOfBlacklistedVoter[_voters[i]];\\n            _allBlacklistedVoters.pop();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit RemoveBlacklistedVoters(_voters);\\n    }\\n\\n    /**\\n        @notice Deposit bribe for a proposal (ERC20 tokens only)\\n        @param  _proposal          bytes32  Proposal\\n        @param  _token             address  Token\\n        @param  _amount            uint256  Token amount\\n        @param  _maxTokensPerVote  uint256  Max amount of token per vote\\n        @param  _periods           uint256  Number of periods the bribe will be valid\\n     */\\n    function depositBribe(\\n        bytes32 _proposal,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _maxTokensPerVote,\\n        uint256 _periods\\n    ) external nonReentrant {\\n        _depositBribe(\\n            _proposal,\\n            _token,\\n            _amount,\\n            _maxTokensPerVote,\\n            _periods,\\n            0,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n        @notice Deposit bribe for a proposal (ERC20 tokens only) using permit\\n        @param  _proposal          bytes32  Proposal\\n        @param  _token             address  Token\\n        @param  _amount            uint256  Token amount\\n        @param  _maxTokensPerVote  uint256  Max amount of token per vote\\n        @param  _periods           uint256  Number of periods the bribe will be valid\\n        @param  _permitDeadline    uint256  Deadline for permit signature\\n        @param  _signature         bytes    Permit signature\\n     */\\n    function depositBribeWithPermit(\\n        bytes32 _proposal,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _maxTokensPerVote,\\n        uint256 _periods,\\n        uint256 _permitDeadline,\\n        bytes memory _signature\\n    ) external nonReentrant {\\n        _depositBribe(\\n            _proposal,\\n            _token,\\n            _amount,\\n            _maxTokensPerVote,\\n            _periods,\\n            _permitDeadline,\\n            _signature\\n        );\\n    }\\n\\n    /**\\n        @notice Return the list of currently whitelisted token addresses\\n     */\\n    function getWhitelistedTokens() external view returns (address[] memory) {\\n        return _allWhitelistedTokens;\\n    }\\n\\n    /**\\n        @notice Return the list of currently blacklisted voter addresses\\n     */\\n    function getBlacklistedVoters() external view returns (address[] memory) {\\n        return _allBlacklistedVoters;\\n    }\\n\\n    /**\\n        @notice Get bribe from BribeVault\\n        @param  _proposal          bytes32  Proposal\\n        @param  _proposalDeadline  uint256  Proposal deadline\\n        @param  _token             address  Token\\n        @return bribeToken         address  Token address\\n        @return bribeAmount        address  Token amount\\n     */\\n    function getBribe(\\n        bytes32 _proposal,\\n        uint256 _proposalDeadline,\\n        address _token\\n    ) external view returns (address bribeToken, uint256 bribeAmount) {\\n        (bribeToken, bribeAmount) = IBribeVault(BRIBE_VAULT).getBribe(\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    _proposal,\\n                    _proposalDeadline,\\n                    _token\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n        @notice Return whether the specified token is whitelisted\\n        @param  _token  address Token address to be checked\\n     */\\n    function isWhitelistedToken(address _token) public view returns (bool) {\\n        if (_allWhitelistedTokens.length == 0) {\\n            return false;\\n        }\\n\\n        return\\n            indexOfWhitelistedToken[_token] != 0 ||\\n            _allWhitelistedTokens[0] == _token;\\n    }\\n\\n    /**\\n        @notice Return whether the specified address is blacklisted\\n        @param  _voter  address Voter address to be checked\\n     */\\n    function isBlacklistedVoter(address _voter) public view returns (bool) {\\n        if (_allBlacklistedVoters.length == 0) {\\n            return false;\\n        }\\n\\n        return\\n            indexOfBlacklistedVoter[_voter] != 0 ||\\n            _allBlacklistedVoters[0] == _voter;\\n    }\\n\\n    /**\\n        @notice Deposit bribe for a proposal (ERC20 tokens only) with optional permit parameters\\n        @param  _proposal          bytes32  Proposal\\n        @param  _token             address  Token\\n        @param  _amount            uint256  Token amount\\n        @param  _maxTokensPerVote  uint256  Max amount of token per vote\\n        @param  _periods           uint256  Number of periods the bribe will be valid\\n        @param  _permitDeadline    uint256  Deadline for permit signature\\n        @param  _signature         bytes    Permit signature\\n     */\\n    function _depositBribe(\\n        bytes32 _proposal,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _maxTokensPerVote,\\n        uint256 _periods,\\n        uint256 _permitDeadline,\\n        bytes memory _signature\\n    ) internal {\\n        uint256 proposalDeadline = proposalDeadlines[_proposal];\\n        if (proposalDeadline < block.timestamp) revert Errors.DeadlinePassed();\\n        if (_periods == 0 || _periods > maxPeriods)\\n            revert Errors.InvalidPeriod();\\n        if (_token == address(0)) revert Errors.InvalidAddress();\\n        if (!isWhitelistedToken(_token)) revert Errors.TokenNotWhitelisted();\\n        if (_amount == 0) revert Errors.InvalidAmount();\\n\\n        IBribeVault(BRIBE_VAULT).depositBribe(\\n            Common.DepositBribeParams({\\n                proposal: _proposal,\\n                token: _token,\\n                briber: msg.sender,\\n                amount: _amount,\\n                maxTokensPerVote: _maxTokensPerVote,\\n                periods: _periods,\\n                periodDuration: periodDuration,\\n                proposalDeadline: proposalDeadline,\\n                permitDeadline: _permitDeadline,\\n                signature: _signature\\n            })\\n        );\\n    }\\n\\n    /**\\n        @notice Set a single proposal\\n        @param  _proposal  bytes32  Proposal\\n        @param  _deadline  uint256  Proposal deadline\\n     */\\n    function _setProposal(bytes32 _proposal, uint256 _deadline) internal {\\n        proposalDeadlines[_proposal] = _deadline;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBribeVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"../libraries/Common.sol\\\";\\n\\ninterface IBribeVault {\\n    /**\\n        @notice Deposit bribe (ERC20 only)\\n        @param  _depositParams  DepositBribeParams  Deposit data\\n     */\\n    function depositBribe(\\n        Common.DepositBribeParams calldata _depositParams\\n    ) external;\\n\\n    /**\\n        @notice Get bribe information based on the specified identifier\\n        @param  _bribeIdentifier  bytes32  The specified bribe identifier\\n     */\\n    function getBribe(\\n        bytes32 _bribeIdentifier\\n    ) external view returns (address token, uint256 amount);\\n\\n    /**\\n        @notice Transfer fees to fee recipient and bribes to distributor and update rewards metadata\\n        @param  _rewardIdentifiers  bytes32[]  List of rewardIdentifiers\\n     */\\n    function transferBribes(bytes32[] calldata _rewardIdentifiers) external;\\n\\n    /**\\n        @notice Grant the depositor role to an address\\n        @param  _depositor  address  Address to grant the depositor role\\n     */\\n    function grantDepositorRole(address _depositor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nlibrary Common {\\n    /**\\n     * @param identifier  bytes32  Identifier of the distribution\\n     * @param token       address  Address of the token to distribute\\n     * @param merkleRoot  bytes32  Merkle root of the distribution\\n     * @param proof       bytes32  Proof of the distribution\\n     */\\n    struct Distribution {\\n        bytes32 identifier;\\n        address token;\\n        bytes32 merkleRoot;\\n        bytes32 proof;\\n    }\\n\\n    /**\\n     * @param proposal          bytes32  Proposal to bribe\\n     * @param token             address  Token to bribe with\\n     * @param briber            address  Address of the briber\\n     * @param amount            uint256  Amount of tokens to bribe with\\n     * @param maxTokensPerVote  uint256  Maximum amount of tokens to use per vote\\n     * @param periods           uint256  Number of periods to bribe for\\n     * @param periodDuration    uint256  Duration of each period\\n     * @param proposalDeadline  uint256  Deadline for the proposal\\n     * @param permitDeadline    uint256  Deadline for the permit2 signature\\n     * @param signature         bytes    Permit2 signature\\n     */\\n    struct DepositBribeParams {\\n        bytes32 proposal;\\n        address token;\\n        address briber;\\n        uint256 amount;\\n        uint256 maxTokensPerVote;\\n        uint256 periods;\\n        uint256 periodDuration;\\n        uint256 proposalDeadline;\\n        uint256 permitDeadline;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @param rwIdentifier      bytes32    Identifier for claiming reward\\n     * @param fromToken         address    Address of token to swap from\\n     * @param toToken           address    Address of token to swap to\\n     * @param fromAmount        uint256    Amount of fromToken to swap\\n     * @param toAmount          uint256    Amount of toToken to receive\\n     * @param deadline          uint256    Timestamp until which swap may be fulfilled\\n     * @param callees           address[]  Array of addresses to call (DEX addresses)\\n     * @param callLengths       uint256[]  Index of the beginning of each call in exchangeData\\n     * @param values            uint256[]  Array of encoded values for each call in exchangeData\\n     * @param exchangeData      bytes      Calldata to execute on callees\\n     * @param rwMerkleProof     bytes32[]  Merkle proof for the reward claim\\n     */\\n    struct ClaimAndSwapData {\\n        bytes32 rwIdentifier;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 deadline;\\n        address[] callees;\\n        uint256[] callLengths;\\n        uint256[] values;\\n        bytes exchangeData;\\n        bytes32[] rwMerkleProof;\\n    }\\n\\n    /**\\n     * @param identifier   bytes32    Identifier for claiming reward\\n     * @param account      address    Address of the account to claim for\\n     * @param amount       uint256    Amount of tokens to claim\\n     * @param merkleProof  bytes32[]  Merkle proof for the reward claim\\n     */\\n    struct Claim {\\n        bytes32 identifier;\\n        address account;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nlibrary Errors {\\n    /**\\n     * @notice max period 0 or greater than MAX_PERIODS\\n     */\\n    error InvalidMaxPeriod();\\n\\n    /**\\n     * @notice period duration 0 or greater than MAX_PERIOD_DURATION\\n     */\\n    error InvalidPeriodDuration();\\n\\n    /**\\n     * @notice address provided is not a contract\\n     */\\n    error NotAContract();\\n\\n    /**\\n     * @notice not authorized\\n     */\\n    error NotAuthorized();\\n\\n    /**\\n     * @notice contract already initialized\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @notice address(0)\\n     */\\n    error InvalidAddress();\\n\\n    /**\\n     * @notice empty bytes identifier\\n     */\\n    error InvalidIdentifier();\\n\\n    /**\\n     * @notice invalid protocol name\\n     */\\n    error InvalidProtocol();\\n\\n    /**\\n     * @notice invalid number of choices\\n     */\\n    error InvalidChoiceCount();\\n\\n    /**\\n     * @notice invalid input amount\\n     */\\n    error InvalidAmount();\\n\\n    /**\\n     * @notice not team member\\n     */\\n    error NotTeamMember();\\n\\n    /**\\n     * @notice cannot whitelist BRIBE_VAULT\\n     */\\n    error NoWhitelistBribeVault();\\n\\n    /**\\n     * @notice token already whitelisted\\n     */\\n    error TokenWhitelisted();\\n\\n    /**\\n     * @notice token not whitelisted\\n     */\\n    error TokenNotWhitelisted();\\n\\n    /**\\n     * @notice voter already blacklisted\\n     */\\n    error VoterBlacklisted();\\n\\n    /**\\n     * @notice voter not blacklisted\\n     */\\n    error VoterNotBlacklisted();\\n\\n    /**\\n     * @notice deadline has passed\\n     */\\n    error DeadlinePassed();\\n\\n    /**\\n     * @notice invalid period\\n     */\\n    error InvalidPeriod();\\n\\n    /**\\n     * @notice invalid deadline\\n     */\\n    error InvalidDeadline();\\n\\n    /**\\n     * @notice invalid max fee\\n     */\\n    error InvalidMaxFee();\\n\\n    /**\\n     * @notice invalid fee\\n     */\\n    error InvalidFee();\\n\\n    /**\\n     * @notice invalid fee recipient\\n     */\\n    error InvalidFeeRecipient();\\n\\n    /**\\n     * @notice invalid distributor\\n     */\\n    error InvalidDistributor();\\n\\n    /**\\n     * @notice invalid briber\\n     */\\n    error InvalidBriber();\\n\\n    /**\\n     * @notice address does not have DEPOSITOR_ROLE\\n     */\\n    error NotDepositor();\\n\\n    /**\\n     * @notice no array given\\n     */\\n    error InvalidArray();\\n\\n    /**\\n     * @notice invalid reward identifier\\n     */\\n    error InvalidRewardIdentifier();\\n\\n    /**\\n     * @notice bribe has already been transferred\\n     */\\n    error BribeAlreadyTransferred();\\n\\n    /**\\n     * @notice distribution does not exist\\n     */\\n    error InvalidDistribution();\\n\\n    /**\\n     * @notice invalid merkle root\\n     */\\n    error InvalidMerkleRoot();\\n\\n    /**\\n     * @notice token is address(0)\\n     */\\n    error InvalidToken();\\n\\n    /**\\n     * @notice claim does not exist\\n     */\\n    error InvalidClaim();\\n\\n    /**\\n     * @notice reward is not yet active for claiming\\n     */\\n    error RewardInactive();\\n\\n    /**\\n     * @notice timer duration is invalid\\n     */\\n    error InvalidTimerDuration();\\n\\n    /**\\n     * @notice merkle proof is invalid\\n     */\\n    error InvalidProof();\\n\\n    /**\\n     * @notice ETH transfer failed\\n     */\\n    error ETHTransferFailed();\\n\\n    /**\\n     * @notice Invalid operator address\\n     */\\n    error InvalidOperator();\\n\\n    /**\\n     * @notice call to TokenTransferProxy contract\\n     */\\n    error TokenTransferProxyCall();\\n\\n    /**\\n     * @notice calling TransferFrom\\n     */\\n    error TransferFromCall();\\n\\n    /**\\n     * @notice external call failed\\n     */\\n    error ExternalCallFailure();\\n\\n    /**\\n     * @notice returned tokens too few\\n     */\\n    error InsufficientReturn();\\n\\n    /**\\n     * @notice swapDeadline expired\\n     */\\n    error DeadlineBreach();\\n\\n    /**\\n     * @notice expected tokens returned are 0\\n     */\\n    error ZeroExpectedReturns();\\n\\n    /**\\n     * @notice arrays in SwapData.exchangeData have wrong lengths\\n     */\\n    error ExchangeDataArrayMismatch();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlinePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChoiceCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIdentifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPeriodDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProtocol\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWhitelistBribeVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTeamMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterNotBlacklisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"name\":\"AddBlacklistedVoters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"AddWhitelistedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"GrantTeamRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribeVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"name\":\"RemoveBlacklistedVoters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"RemoveWhitelistedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"RevokeTeamRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPeriods\",\"type\":\"uint256\"}],\"name\":\"SetMaxPeriods\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"}],\"name\":\"SetPeriodDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proposals\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SetProposals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proposals\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SetProposalsByAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proposals\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SetProposalsById\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIBE_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERIODS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"addBlacklistedVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addWhitelistedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"depositBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"depositBribeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlacklistedVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_proposalDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bribeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bribeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamMember\",\"type\":\"address\"}],\"name\":\"grantTeamRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOfBlacklistedVoter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOfWhitelistedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bribeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_protocol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"isBlacklistedVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposalDeadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"removeBlacklistedVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamMember\",\"type\":\"address\"}],\"name\":\"revokeTeamRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"setMaxPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"setPeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_identifiers\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setProposalsByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choiceCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setProposalsById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BribeMarket", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}