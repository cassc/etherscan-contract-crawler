{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract CoinCentral is Context, IERC20, Ownable {\r\n    using Address for address;\r\n\r\n    string private _name = \"CoinCentral\";\r\n    string private _symbol = \"CNC\";\r\n    uint8 private _decimals = 9;\r\n    uint256 private initialsupply = 1_000_000_000;\r\n    uint256 private _tTotal = initialsupply * 10**_decimals;\r\n\r\n    address payable public marketingWallet;\r\n    address public liquidityWallet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => uint256) private buycooldown;\r\n    mapping(address => uint256) private sellcooldown;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isBlacklisted;\r\n\r\n    struct Icooldown {\r\n        bool buycooldownEnabled;\r\n        bool sellcooldownEnabled;\r\n        uint256 cooldown;\r\n        uint256 cooldownLimit;\r\n    }\r\n    Icooldown public cooldownInfo =\r\n        Icooldown({\r\n            buycooldownEnabled: true,\r\n            sellcooldownEnabled: true,\r\n            cooldown: 30 seconds,\r\n            cooldownLimit: 60 seconds\r\n        });\r\n    struct ILaunch {\r\n        uint256 launchedAt;\r\n        bool launched;\r\n        bool launchProtection;\r\n    }\r\n    ILaunch public wenLaunch =\r\n        ILaunch({\r\n            launchedAt: 0, \r\n            launched: false, \r\n            launchProtection: true\r\n        });\r\n\r\n    struct ItxSettings {\r\n        uint256 maxTxAmount;\r\n        uint256 maxWalletAmount;\r\n        uint256 numTokensToSwap;\r\n        bool limited;\r\n    }\r\n\r\n    ItxSettings public txSettings;\r\n\r\n    uint256 public _transferLiquidityFee;\r\n    uint256 public _transferMarketingFee;\r\n    uint256 public _transferBurnFee;\r\n\r\n    uint256 public _buyLiquidityFee;\r\n    uint256 public _buyMarketingFee;\r\n    uint256 public _buyBurnFee;\r\n\r\n    uint256 public _sellLiquidityFee;\r\n    uint256 public _sellMarketingFee;\r\n    uint256 public _sellBurnFee;\r\n\r\n    uint256 public lpFeeAccumulated;\r\n\r\n    uint256 public antiBlocks = 2;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    bool public tradeEnabled;\r\n    mapping(address => bool) public tradeAllowedList;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event SniperStatus(address account, bool blacklisted);\r\n    event ToMarketing(uint256 marketingBalance);\r\n    event SwapAndLiquify(uint256 liquidityTokens, uint256 liquidityFees);\r\n    event Launch();\r\n\r\n    constructor(address _marketingWallet) {        \r\n        marketingWallet = payable(_marketingWallet);\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // bsc pancake router \r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); //bsc test net router kiem\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //eth unisawp router\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _approve(_msgSender(), address(_uniswapV2Router), type(uint256).max);\r\n        _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        setSellFee(15,35, 0);\r\n        setBuyFee(15,35, 0);\r\n        setTransferFee(10,30, 0);\r\n\r\n        setTxSettings(1,100,2,100,1,1000,true);\r\n\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n        tradeEnabled = false;\r\n        tradeAllowedList[owner()] = true;\r\n        tradeAllowedList[address(this)] = true;\r\n\r\n        liquidityWallet = _msgSender();\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setSellFee(uint256 liquidityFee, uint256 marketingFee, uint256 burnFee) public onlyOwner {\r\n        require(liquidityFee + marketingFee + burnFee <= 250);\r\n        _sellLiquidityFee = liquidityFee;\r\n        _sellMarketingFee = marketingFee;\r\n        _sellBurnFee = burnFee;\r\n    }\r\n\r\n    function setBuyFee(uint256 liquidityFee, uint256 marketingFee, uint256 burnFee) public onlyOwner {\r\n        require(liquidityFee + marketingFee + burnFee <= 250);\r\n        _buyMarketingFee = marketingFee;\r\n        _buyLiquidityFee = liquidityFee;\r\n        _buyBurnFee = burnFee;\r\n    }\r\n\r\n    function setTransferFee(uint256 liquidityFee, uint256 marketingFee, uint256 burnFee) public onlyOwner {\r\n        require(liquidityFee + marketingFee + burnFee <= 250);\r\n        _transferLiquidityFee = liquidityFee;\r\n        _transferMarketingFee = marketingFee;\r\n        _transferBurnFee = burnFee;\r\n    }\r\n\r\n    function setLiquidityFees(uint256 newTransfer, uint256 newBuy, uint256 newSell) public onlyOwner {\r\n        _transferLiquidityFee = newTransfer;\r\n        _buyLiquidityFee = newBuy;\r\n        _sellLiquidityFee = newSell;\r\n    }\r\n\r\n    function setMarketingFees(uint256 newTransfer, uint256 newBuy, uint256 newSell) public onlyOwner {\r\n        _transferMarketingFee = newTransfer;\r\n        _buyMarketingFee = newBuy;\r\n        _sellMarketingFee = newSell;\r\n    }\r\n\r\n    function setBurnFees(uint256 newTransfer, uint256 newBuy, uint256 newSell) public onlyOwner {\r\n        _transferBurnFee = newTransfer;\r\n        _buyBurnFee = newBuy;\r\n        _sellBurnFee = newSell;\r\n    }\r\n\r\n    function setCooldown(uint256 amount) external onlyOwner {\r\n        require(amount <= cooldownInfo.cooldownLimit);\r\n        cooldownInfo.cooldown = amount;\r\n    }\r\n\r\n    function setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n        marketingWallet = payable(newMarketingWallet);\r\n    }\r\n\r\n    function setLiquidityWallet(address newLpWallet) external onlyOwner {\r\n        liquidityWallet = newLpWallet;\r\n    }\r\n\r\n    function setTxSettings(uint256 txp, uint256 txd, uint256 mwp, uint256 mwd, uint256 sp, uint256 sd, bool limiter) public onlyOwner {\r\n        require((_tTotal * txp) / txd >= (_tTotal / 1000), \"Max Transaction must be above 0.1% of total supply.\");\r\n        require((_tTotal * mwp) / mwd >= (_tTotal / 1000), \"Max Wallet must be above 0.1% of total supply.\");\r\n        uint256 newTx = (_tTotal * txp) / (txd);\r\n        uint256 newMw = (_tTotal * mwp) / mwd;\r\n        uint256 swapAmount = (_tTotal * sp) / (sd);\r\n        txSettings = ItxSettings ({\r\n            numTokensToSwap: swapAmount,\r\n            maxTxAmount: newTx,\r\n            maxWalletAmount: newMw,\r\n            limited: limiter\r\n        });\r\n    }\r\n\r\n    function setTradeEnabled(bool onoff) external onlyOwner {\r\n        if (!wenLaunch.launched) {\r\n            wenLaunch.launchedAt = block.number;\r\n            wenLaunch.launched = true;\r\n            swapAndLiquifyEnabled = true;\r\n        }\r\n\r\n        tradeEnabled = onoff;\r\n\r\n        if (!wenLaunch.launched) {\r\n            emit Launch();\r\n        }\r\n    }\r\n\r\n    function setAntiBlocks(uint256 _block) external onlyOwner {\r\n        antiBlocks = _block;\r\n    }\r\n\r\n    function setTradeAllowedAddress(address who, bool status) external onlyOwner {\r\n        tradeAllowedList[who] = status;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + (addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - (subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setBlacklistStatus(address account, bool blacklisted) external onlyOwner {\r\n        if(account == uniswapV2Pair || account == address(this) || account == address(uniswapV2Router)) {revert();}\r\n        \r\n        isBlacklisted[account] = blacklisted;\r\n    }\r\n\r\n    function Sniper(address [] calldata accounts, bool blacklisted) external onlyOwner {\r\n        for (uint256 i; i < accounts.length; i++) {\r\n            address account = accounts[i];\r\n            if(account != uniswapV2Pair && account != address(this) && account != address(uniswapV2Router)) {\r\n                isBlacklisted[account] = blacklisted;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setSniperStatus(address account, bool blacklisted) private{\r\n        if(account == uniswapV2Pair || account == address(this) || account == address(uniswapV2Router)) {revert();}\r\n        \r\n        if (blacklisted == true) {\r\n            isBlacklisted[account] = true;\r\n            emit SniperStatus(account, blacklisted);\r\n        } \r\n    }\r\n\r\n    function limits(bool onoff) public onlyOwner {\r\n        txSettings.limited = onoff;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n    //to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner,address spender,uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokenBalance) private lockTheSwap {\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 tokensToSwap = tokenBalance / 2;\r\n        uint256 liquidityTokens = tokenBalance - tokensToSwap;\r\n\r\n        if (tokensToSwap > 0) {\r\n            swapTokensForEth(tokensToSwap);\r\n        }\r\n\r\n        uint256 newBalance = address(this).balance;\r\n        uint256 liquidityBalance = uint256(newBalance - initialBalance);\r\n\r\n        if (liquidityTokens > 0 && liquidityBalance > 0) {\r\n            addLiquidity(liquidityTokens, liquidityBalance);\r\n            emit SwapAndLiquify(liquidityTokens, liquidityBalance);\r\n        }\r\n\r\n        lpFeeAccumulated -= tokenBalance;\r\n    }\r\n\r\n    function swapAndMarketing(uint256 tokenBalance) private lockTheSwap {\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n\r\n        uint256 marketingBalance = address(this).balance;\r\n        if (marketingBalance > 0) {\r\n            marketingWallet.transfer(marketingBalance);\r\n            emit ToMarketing(marketingBalance);\r\n        }\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        require(amountPercentage <= 100);\r\n        uint256 amountETH = address(this).balance;\r\n        payable(marketingWallet).transfer(\r\n            (amountETH * (amountPercentage)) / (100)\r\n        );\r\n    }\r\n\r\n    function clearStuckToken(address to) external onlyOwner {\r\n        uint256 _balance = balanceOf(address(this));\r\n        lpFeeAccumulated = 0;\r\n        _transfer(address(this), to, _balance);        \r\n    }\r\n\r\n    function clearStuckTokens(address _token, address _to) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0));\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        if(_allowances[address(this)][address(uniswapV2Router)] < tokenAmount) {\r\n            _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        }\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        if(_allowances[address(this)][address(uniswapV2Router)] < tokenAmount) {\r\n            _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        }\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - (\r\n                amount\r\n            )\r\n        );\r\n        return true;\r\n    }    \r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(isBlacklisted[from] == false, \"Hehe\");\r\n        require(isBlacklisted[to] == false, \"Hehe\");\r\n\r\n        if (!tradeEnabled) {\r\n            require(tradeAllowedList[from] || tradeAllowedList[to], \"Transfer: not allowed\");\r\n            require(balanceOf(uniswapV2Pair) == 0 || to != uniswapV2Pair, \"Transfer: no body can sell now\");\r\n        }\r\n\r\n        if (txSettings.limited) {\r\n            if(from != owner() && to != owner() || to != address(0xdead) && to != address(0)) \r\n            {\r\n                if (from == uniswapV2Pair || to == uniswapV2Pair\r\n                ) {\r\n                    if(!isExcludedFromFee[to] && !isExcludedFromFee[from]) {\r\n                        require(amount <= txSettings.maxTxAmount);\r\n                    }\r\n                }\r\n                if(to != address(uniswapV2Router) && to != uniswapV2Pair) {\r\n                    if(!isExcludedFromFee[to]) {\r\n                        require(balanceOf(to) + amount <= txSettings.maxWalletAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && !isExcludedFromFee[to]\r\n            ) {\r\n                if (cooldownInfo.buycooldownEnabled) {\r\n                    require(buycooldown[to] < block.timestamp);\r\n                    buycooldown[to] = block.timestamp + (cooldownInfo.cooldown);\r\n                }\r\n            } else if (from != uniswapV2Pair && !isExcludedFromFee[from]){\r\n                if (cooldownInfo.sellcooldownEnabled) {\r\n                    require(sellcooldown[from] <= block.timestamp);\r\n                    sellcooldown[from] = block.timestamp + (cooldownInfo.cooldown);\r\n                }\r\n            }\r\n\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (contractTokenBalance > txSettings.numTokensToSwap) {\r\n                if (lpFeeAccumulated > txSettings.numTokensToSwap) {\r\n                    swapAndLiquify(txSettings.numTokensToSwap);\r\n                } else if ((_transferMarketingFee + _buyMarketingFee + _sellMarketingFee) > 0) {\r\n                    swapAndMarketing(txSettings.numTokensToSwap);\r\n                }\r\n            }\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to isExcludedFromFee account then remove the fee\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, marketing, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender,address recipient,uint256 amount,bool takeFee) private {\r\n        uint256 liquidityFee;\r\n        uint256 marketingFee;\r\n        uint256 burnFee;\r\n\r\n        uint256 liquidityFeeAmount = 0;\r\n        uint256 marketingFeeAmount = 0;\r\n        uint256 burnFeeAmount = 0;\r\n        uint256 feeAmount = 0;\r\n\r\n        bool highFee = false;\r\n\r\n        if (wenLaunch.launchProtection) {\r\n            if (wenLaunch.launched && wenLaunch.launchedAt > 0 && block.number > (wenLaunch.launchedAt + antiBlocks)) {\r\n                wenLaunch.launchProtection = false;\r\n            } else {\r\n                if (\r\n                    sender == uniswapV2Pair &&\r\n                    recipient != address(uniswapV2Router) &&\r\n                    !isExcludedFromFee[recipient]\r\n                ) {\r\n                    setSniperStatus(recipient, true); \r\n                    highFee = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (takeFee) {\r\n            if (sender == uniswapV2Pair) {\r\n                liquidityFee = _buyLiquidityFee;\r\n                marketingFee = _buyMarketingFee;\r\n                burnFee = _buyBurnFee;                \r\n            } else if (recipient == uniswapV2Pair) {\r\n                liquidityFee = _sellLiquidityFee;\r\n                marketingFee = _sellMarketingFee;\r\n                burnFee = _sellBurnFee;\r\n            } else {\r\n                liquidityFee = _transferLiquidityFee;\r\n                marketingFee = _transferMarketingFee;\r\n                burnFee = _transferBurnFee;\r\n            }\r\n\r\n            if (highFee) {\r\n                liquidityFee = 950;\r\n                marketingFee = 0;\r\n                burnFee = 0;\r\n            }\r\n\r\n            feeAmount = (amount * (liquidityFee + marketingFee + burnFee)) / (1000);\r\n\r\n            if ((liquidityFee + marketingFee + burnFee) > 0) {                \r\n                liquidityFeeAmount = feeAmount * liquidityFee / (liquidityFee + marketingFee + burnFee);\r\n                marketingFeeAmount = feeAmount * marketingFee / (liquidityFee + marketingFee + burnFee);\r\n                burnFeeAmount = feeAmount * burnFee / (liquidityFee + marketingFee + burnFee);\r\n            }\r\n\r\n            lpFeeAccumulated += liquidityFeeAmount;\r\n        }\r\n        \r\n        uint256 tAmount = amount - (liquidityFeeAmount + marketingFeeAmount + burnFeeAmount);\r\n        _tOwned[sender] -= amount;\r\n        _tOwned[address(this)] += (liquidityFeeAmount + marketingFeeAmount);\r\n        emit Transfer(sender, address(this), (liquidityFeeAmount + marketingFeeAmount));\r\n        _tOwned[recipient] += tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n        if (burnFeeAmount > 0) {\r\n            _tOwned[address(0xdead)] += burnFeeAmount;\r\n            emit Transfer(sender, address(0xdead), burnFeeAmount);\r\n        }        \r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff, bool offon) external onlyOwner {\r\n        cooldownInfo.buycooldownEnabled = onoff;\r\n        cooldownInfo.sellcooldownEnabled = offon;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"SniperStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFees\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingBalance\",\"type\":\"uint256\"}],\"name\":\"ToMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"Sniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buycooldownEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellcooldownEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setAntiBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"}],\"name\":\"setBurnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"offon\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"}],\"name\":\"setMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTradeAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setTradeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mwp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mwd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limiter\",\"type\":\"bool\"}],\"name\":\"setTxSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeAllowedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokensToSwap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limited\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wenLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"launched\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"launchProtection\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinCentral", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ad1ee9cd400ecca0017131b827b4a7a76b68835", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b14a1f64af35099ec15151505b46ea6f5e6004184779c1783b2c917249e5288"}