{"SourceCode": "pragma solidity ^0.8.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20{\r\n\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function _burn(address account, uint256 amount) external;\r\n    \r\n}\r\n\r\ninterface swapInterface{\r\n\r\n    function swap(address addr) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n    \r\n    function massSwap(address[] memory users) external;\r\n    \r\n    function balanceOf() external view returns (uint256);\r\n    \r\n    event Swap(address indexed user, uint256 amount);\r\n    \r\n    event MassSwap();\r\n    \r\n    function giveAllowence(address user) external ;\r\n    \r\n    function removeAllowence(address user) external ;\r\n    \r\n    function allowance(address user) external view returns(bool) ;\r\n    \r\n}\r\n\r\ncontract swapContract is swapInterface, ReentrancyGuard {\r\n\r\n    IERC20 oldToken;\r\n    IERC20 newToken;\r\n    address _owner;\r\n    mapping (address => bool) private _allowence;\r\n    \r\n    constructor(address oldOne, address newOne) ReentrancyGuard() {\r\n        oldToken = IERC20(oldOne);\r\n        newToken = IERC20(newOne);\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function allowance(address user) external view override returns(bool){\r\n        require(_allowence[msg.sender]);\r\n        return _allowence[user];\r\n    }   \r\n    \r\n    function giveAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = true;\r\n    }\r\n    \r\n    function removeAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = false;\r\n    }  \r\n    \r\n    function swap(address addr) external override nonReentrant {\r\n        require(_allowence[msg.sender]);\r\n        uint256 balanceOfUser = oldToken.balanceOf(addr);\r\n        uint256 balanceOfSwap = newToken.balanceOf(address(this));\r\n        require(balanceOfUser > 0, \"SWAP: balance Of User exceeds balance\");\r\n        require(balanceOfSwap >= balanceOfUser, \"SWAP: balance of swap exceeds balance\");\r\n        oldToken._burn(addr, balanceOfUser);\r\n        newToken.transfer(addr, balanceOfUser);\r\n        emit Swap(addr, balanceOfUser);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external override {\r\n        require(msg.sender == _owner);\r\n        newToken.transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function massSwap(address[] memory users) external override nonReentrant {\r\n        require(msg.sender == _owner);\r\n        for (uint i = 0; i < users.length; i++) {\r\n            address addr = users[i];\r\n            uint256 balanceOfUser = oldToken.balanceOf(addr);\r\n            uint256 balanceOfSwap = newToken.balanceOf(address(this));\r\n            if(balanceOfUser == 0) continue;\r\n            if(balanceOfUser > balanceOfSwap) continue;\r\n            oldToken._burn(addr, balanceOfUser);\r\n            newToken.transfer(addr, balanceOfUser);\r\n        }\r\n        emit MassSwap();\r\n    }\r\n    \r\n    function balanceOf() external override view returns (uint256) {\r\n        uint256 balanceOfSwap = newToken.balanceOf(address(this));\r\n        return balanceOfSwap;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOne\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MassSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"massSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "swapContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010d88ae63188987799772813778e3b697a5ae64a000000000000000000000000e33ae4e795114279721047484e5ad5cc7df24fcb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5a521eba2fe1a022ae83d625e55532a826e1b4fa1cd8cf94566efb441265cf5e"}