{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderImplementation.sol\": {\r\n      \"content\": \"// contracts/Implementation.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\nimport \\\"./DeliveryProvider.sol\\\";\\n\\ncontract DeliveryProviderImplementation is DeliveryProvider {\\n    error ImplementationAlreadyInitialized();\\n\\n    function initialize() public virtual initializer {\\n        // this function needs to be exposed for an upgrade to pass\\n    }\\n\\n    modifier initializer() {\\n        address impl = ERC1967Upgrade._getImplementation();\\n\\n        if (isInitialized(impl)) {\\n            revert ImplementationAlreadyInitialized();\\n        }\\n\\n        setInitialized(impl);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DeliveryProviderGovernance.sol\\\";\\nimport \\\"./DeliveryProviderStructs.sol\\\";\\nimport {getSupportedMessageKeyTypes} from \\\"./DeliveryProviderState.sol\\\";\\nimport \\\"../../interfaces/relayer/IDeliveryProviderTyped.sol\\\";\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\nimport \\\"../../relayer/libraries/ExecutionParameters.sol\\\";\\nimport {IWormhole} from \\\"../../interfaces/IWormhole.sol\\\";\\n\\ncontract DeliveryProvider is DeliveryProviderGovernance, IDeliveryProvider {\\n    using WeiLib for Wei;\\n    using GasLib for Gas;\\n    using GasPriceLib for GasPrice;\\n    using WeiPriceLib for WeiPrice;\\n    using TargetNativeLib for TargetNative;\\n    using LocalNativeLib for LocalNative;\\n\\n    error CallerNotApproved(address msgSender);\\n    error PriceIsZero(uint16 chain);\\n    error Overflow(uint256 value, uint256 max);\\n    error MaxRefundGreaterThanGasLimitCost(uint256 maxRefund, uint256 gasLimitCost);\\n    error MaxRefundGreaterThanGasLimitCostOnSourceChain(uint256 maxRefund, uint256 gasLimitCost);\\n    error ExceedsMaximumBudget(uint16 targetChain, uint256 exceedingValue, uint256 maximumBudget);\\n\\n    function quoteEvmDeliveryPrice(\\n        uint16 targetChain,\\n        Gas gasLimit,\\n        TargetNative receiverValue\\n    )\\n        public\\n        view\\n        returns (LocalNative nativePriceQuote, GasPrice targetChainRefundPerUnitGasUnused)\\n    {\\n        // Calculates the amount to refund user on the target chain, for each unit of target chain gas unused\\n        // by multiplying the price of that amount of gas (in target chain currency)\\n        // by a target-chain-specific constant 'denominator'/('denominator' + 'buffer'), which will be close to 1\\n\\n        (uint16 buffer, uint16 denominator) = assetConversionBuffer(targetChain);\\n        targetChainRefundPerUnitGasUnused = GasPrice.wrap(gasPrice(targetChain).unwrap() * (denominator) / (uint256(denominator) + buffer));\\n\\n        // Calculates the cost of performing a delivery with 'gasLimit' units of gas and 'receiverValue' wei delivered to the target contract\\n\\n        LocalNative gasLimitCostInSourceCurrency = quoteGasCost(targetChain, gasLimit);\\n        LocalNative receiverValueCostInSourceCurrency = quoteAssetCost(targetChain, receiverValue);\\n        nativePriceQuote = quoteDeliveryOverhead(targetChain) + gasLimitCostInSourceCurrency + receiverValueCostInSourceCurrency;\\n  \\n        // Checks that the amount of wei that needs to be sent into the target chain is <= the 'maximum budget' for the target chain\\n        \\n        TargetNative gasLimitCost = gasLimit.toWei(gasPrice(targetChain)).asTargetNative();\\n        if(receiverValue.asNative() + gasLimitCost.asNative() > maximumBudget(targetChain).asNative()) {\\n            revert ExceedsMaximumBudget(targetChain, receiverValue.unwrap() + gasLimitCost.unwrap(), maximumBudget(targetChain).unwrap());\\n        }\\n    }\\n\\n    function quoteDeliveryPrice(\\n        uint16 targetChain,\\n        TargetNative receiverValue,\\n        bytes memory encodedExecutionParams\\n    ) external view returns (LocalNative nativePriceQuote, bytes memory encodedExecutionInfo) {\\n        ExecutionParamsVersion version = decodeExecutionParamsVersion(encodedExecutionParams);\\n        if (version == ExecutionParamsVersion.EVM_V1) {\\n            EvmExecutionParamsV1 memory parsed = decodeEvmExecutionParamsV1(encodedExecutionParams);\\n            GasPrice targetChainRefundPerUnitGasUnused;\\n            (nativePriceQuote, targetChainRefundPerUnitGasUnused) =\\n                quoteEvmDeliveryPrice(targetChain, parsed.gasLimit, receiverValue);\\n            return (\\n                nativePriceQuote,\\n                encodeEvmExecutionInfoV1(\\n                    EvmExecutionInfoV1(parsed.gasLimit, targetChainRefundPerUnitGasUnused)\\n                    )\\n            );\\n        } else {\\n            revert UnsupportedExecutionParamsVersion(uint8(version));\\n        }\\n    }\\n\\n    function quoteAssetConversion(\\n        uint16 targetChain,\\n        LocalNative currentChainAmount\\n    ) public view returns (TargetNative targetChainAmount) {\\n        return quoteAssetConversion(chainId(), targetChain, currentChainAmount);\\n    }\\n\\n    function quoteAssetConversion(\\n        uint16 sourceChain,\\n        uint16 targetChain,\\n        LocalNative sourceChainAmount\\n    ) internal view returns (TargetNative targetChainAmount) {\\n        (uint16 buffer, uint16 bufferDenominator) = assetConversionBuffer(targetChain);\\n        return sourceChainAmount.asNative().convertAsset(\\n            nativeCurrencyPrice(sourceChain),\\n            nativeCurrencyPrice(targetChain),\\n            (bufferDenominator),\\n            (uint32(buffer) + bufferDenominator),\\n            false  // round down\\n        ).asTargetNative();\\n    }\\n\\n    //Returns the address on this chain that rewards should be sent to\\n    function getRewardAddress() public view returns (address payable) {\\n        return rewardAddress();\\n    }\\n\\n    function isChainSupported(uint16 targetChain) public view returns (bool supported) {\\n        return _state.supportedChains[targetChain];\\n    }\\n\\n    function getSupportedKeys() public view returns (uint256 bitmap) {\\n        return getSupportedMessageKeyTypes().bitmap;\\n    }\\n\\n    function isMessageKeyTypeSupported(uint8 keyType) public view returns (bool supported) {\\n        return getSupportedMessageKeyTypes().bitmap & (1 << keyType) > 0;\\n    }\\n\\n    function getTargetChainAddress(uint16 targetChain)\\n        public\\n        view\\n        override\\n        returns (bytes32 deliveryProviderAddress)\\n    {\\n        return targetChainAddress(targetChain);\\n    }\\n\\n    /**\\n     *\\n     * HELPER METHODS\\n     *\\n     */\\n\\n    //Returns the delivery overhead fee required to deliver a message to the target chain, denominated in this chain's wei.\\n    function quoteDeliveryOverhead(uint16 targetChain) public view returns (LocalNative nativePriceQuote) {\\n        nativePriceQuote = quoteGasCost(targetChain, deliverGasOverhead(targetChain));\\n        if(nativePriceQuote.unwrap() > type(uint128).max) {\\n            revert Overflow(nativePriceQuote.unwrap(), type(uint128).max);\\n        }\\n    }\\n\\n    //Returns the price of purchasing gasAmount units of gas on the target chain, denominated in this chain's wei.\\n    function quoteGasCost(uint16 targetChain, Gas gasAmount) public view returns (LocalNative totalCost) {\\n        Wei gasCostInSourceChainCurrency =\\n            assetConversion(targetChain, gasAmount.toWei(gasPrice(targetChain)), chainId());\\n        totalCost = LocalNative.wrap(gasCostInSourceChainCurrency.unwrap());\\n    }\\n\\n    function quoteGasPrice(uint16 targetChain) public view returns (GasPrice price) {\\n        price = GasPrice.wrap(quoteGasCost(targetChain, Gas.wrap(1)).unwrap());\\n        if(price.unwrap() > type(uint88).max) {\\n            revert Overflow(price.unwrap(), type(uint88).max);\\n        }\\n    }\\n\\n    // relevant for chains that have dynamic execution pricing (e.g. Ethereum)\\n    function assetConversion(\\n        uint16 fromChain,\\n        Wei fromAmount,\\n        uint16 toChain\\n    ) internal view returns (Wei targetAmount) {\\n        if(nativeCurrencyPrice(fromChain).unwrap() == 0) {\\n            revert PriceIsZero(fromChain);\\n        } \\n        if(nativeCurrencyPrice(toChain).unwrap() == 0) {\\n            revert PriceIsZero(toChain);\\n        }\\n        return fromAmount.convertAsset(\\n            nativeCurrencyPrice(fromChain),\\n            nativeCurrencyPrice(toChain),\\n            1,\\n            1,\\n            // round up\\n            true\\n        );\\n    }\\n\\n    function quoteAssetCost(\\n        uint16 targetChain,\\n        TargetNative targetChainAmount\\n    ) internal view returns (LocalNative currentChainAmount) {\\n        (uint16 buffer, uint16 bufferDenominator) = assetConversionBuffer(targetChain);\\n        if(nativeCurrencyPrice(chainId()).unwrap() == 0) {\\n            revert PriceIsZero(chainId());\\n        } \\n        if(nativeCurrencyPrice(targetChain).unwrap() == 0) {\\n            revert PriceIsZero(targetChain);\\n        }\\n        return targetChainAmount.asNative().convertAsset(\\n            nativeCurrencyPrice(targetChain),\\n            nativeCurrencyPrice(chainId()),\\n            (uint32(buffer) + bufferDenominator),\\n            (bufferDenominator),\\n            // round up\\n            true\\n        ).asLocalNative();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderGovernance.sol\": {\r\n      \"content\": \"// contracts/Relayer.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\nimport \\\"../../libraries/external/BytesLib.sol\\\";\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\n\\nimport \\\"./DeliveryProviderGetters.sol\\\";\\nimport \\\"./DeliveryProviderSetters.sol\\\";\\nimport \\\"./DeliveryProviderStructs.sol\\\";\\nimport {getSupportedMessageKeyTypes} from \\\"./DeliveryProviderState.sol\\\";\\n\\nabstract contract DeliveryProviderGovernance is\\n    DeliveryProviderGetters,\\n    DeliveryProviderSetters,\\n    ERC1967Upgrade\\n{\\n    using WeiLib for Wei;\\n    using GasLib for Gas;\\n    using DollarLib for Dollar;\\n    using WeiPriceLib for WeiPrice;\\n    using GasPriceLib for GasPrice;\\n\\n    error ChainIdIsZero();\\n    error GasPriceIsZero();\\n    error NativeCurrencyPriceIsZero();\\n    error FailedToInitializeImplementation(string reason);\\n    error WrongChainId();\\n    error AddressIsZero();\\n    error CallerMustBePendingOwner();\\n    error CallerMustBeOwner();\\n    error CallerMustBeOwnerOrPricingWallet();\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n    event ChainSupportUpdated(uint16 targetChain, bool isSupported);\\n    event OwnershipTransfered(address indexed oldOwner, address indexed newOwner);\\n    event RewardAddressUpdated(address indexed newAddress);\\n    event TargetChainAddressUpdated(uint16 indexed targetChain, bytes32 indexed newAddress);\\n    event DeliverGasOverheadUpdated(Gas indexed oldGasOverhead, Gas indexed newGasOverhead);\\n    event WormholeRelayerUpdated(address coreRelayer);\\n    event AssetConversionBufferUpdated(uint16 targetChain, uint16 buffer, uint16 bufferDenominator);\\n\\n    function updateWormholeRelayer(address payable newAddress) external onlyOwner {\\n        updateWormholeRelayerImpl(newAddress);\\n    }\\n\\n    function updateWormholeRelayerImpl(address payable newAddress) internal {\\n        setWormholeRelayer(newAddress);\\n        emit WormholeRelayerUpdated(newAddress);\\n    }\\n\\n    function updateSupportedChain(uint16 targetChain, bool isSupported) public onlyOwner {\\n        setChainSupported(targetChain, isSupported);\\n        emit ChainSupportUpdated(targetChain, isSupported);\\n    }\\n\\n    function updateSupportedChains(DeliveryProviderStructs.SupportedChainUpdate[] memory updates)\\n        public\\n        onlyOwner\\n    {\\n        uint256 updatesLength = updates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.SupportedChainUpdate memory update = updates[i];\\n            updateSupportedChainImpl(update.chainId, update.isSupported);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updateSupportedMessageKeyTypes(uint8 keyType, bool supported)\\n        public\\n        onlyOwner\\n    {\\n        if (supported) {\\n            getSupportedMessageKeyTypes().bitmap |= (1 << keyType);\\n        } else {\\n            getSupportedMessageKeyTypes().bitmap &= ~(1 << keyType);\\n        }\\n    }\\n\\n    function updatePricingWallet(address newPricingWallet) external onlyOwner {\\n        setPricingWallet(newPricingWallet);\\n    }\\n\\n    function updateSupportedChainImpl(uint16 targetChain, bool isSupported) internal {\\n        setChainSupported(targetChain, isSupported);\\n        emit ChainSupportUpdated(targetChain, isSupported);\\n    }\\n\\n    function updateRewardAddress(address payable newAddress) external onlyOwner {\\n        updateRewardAddressImpl(newAddress);\\n    }\\n\\n    function updateRewardAddressImpl(address payable newAddress) internal {\\n        setRewardAddress(newAddress);\\n        emit RewardAddressUpdated(newAddress);\\n    }\\n\\n    function updateTargetChainAddress(uint16 targetChain, bytes32 newAddress) public onlyOwner {\\n        updateTargetChainAddressImpl(targetChain, newAddress);\\n    }\\n\\n    function updateTargetChainAddresses(DeliveryProviderStructs.TargetChainUpdate[] memory updates)\\n        external\\n        onlyOwner\\n    {\\n        uint256 updatesLength = updates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.TargetChainUpdate memory update = updates[i];\\n            updateTargetChainAddressImpl(update.chainId, update.targetChainAddress);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updateTargetChainAddressImpl(uint16 targetChain, bytes32 newAddress) internal {\\n        setTargetChainAddress(targetChain, newAddress);\\n        emit TargetChainAddressUpdated(targetChain, newAddress);\\n    }\\n\\n    function updateDeliverGasOverhead(uint16 chainId, Gas newGasOverhead) external onlyOwnerOrPricingWallet {\\n        updateDeliverGasOverheadImpl(chainId, newGasOverhead);\\n    }\\n\\n    function updateDeliverGasOverheads(\\n        DeliveryProviderStructs.DeliverGasOverheadUpdate[] memory overheadUpdates\\n    ) external onlyOwnerOrPricingWallet {\\n        uint256 updatesLength = overheadUpdates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.DeliverGasOverheadUpdate memory update = overheadUpdates[i];\\n            updateDeliverGasOverheadImpl(update.chainId, update.newGasOverhead);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updateDeliverGasOverheadImpl(uint16 chainId, Gas newGasOverhead) internal {\\n        Gas currentGasOverhead = deliverGasOverhead(chainId);\\n        setDeliverGasOverhead(chainId, newGasOverhead);\\n        emit DeliverGasOverheadUpdated(currentGasOverhead, newGasOverhead);\\n    }\\n\\n    function updatePrice(\\n        uint16 updateChainId,\\n        GasPrice updateGasPrice,\\n        WeiPrice updateNativeCurrencyPrice\\n    ) external onlyOwnerOrPricingWallet {\\n        updatePriceImpl(updateChainId, updateGasPrice, updateNativeCurrencyPrice);\\n    }\\n\\n    function updatePrices(DeliveryProviderStructs.UpdatePrice[] memory updates)\\n        external\\n        onlyOwnerOrPricingWallet\\n    {\\n        uint256 pricesLength = updates.length;\\n        for (uint256 i = 0; i < pricesLength;) {\\n            DeliveryProviderStructs.UpdatePrice memory update = updates[i];\\n            updatePriceImpl(update.chainId, update.gasPrice, update.nativeCurrencyPrice);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updatePriceImpl(\\n        uint16 updateChainId,\\n        GasPrice updateGasPrice,\\n        WeiPrice updateNativeCurrencyPrice\\n    ) internal {\\n        if (updateChainId == 0) {\\n            revert ChainIdIsZero();\\n        }\\n        if (updateGasPrice.unwrap() == 0) {\\n            revert GasPriceIsZero();\\n        }\\n        if (updateNativeCurrencyPrice.unwrap() == 0) {\\n            revert NativeCurrencyPriceIsZero();\\n        }\\n\\n        setPriceInfo(updateChainId, updateGasPrice, updateNativeCurrencyPrice);\\n    }\\n\\n    function updateMaximumBudget(uint16 targetChain, Wei maximumTotalBudget) external onlyOwnerOrPricingWallet {\\n        setMaximumBudget(targetChain, maximumTotalBudget);\\n    }\\n\\n    function updateMaximumBudgets(DeliveryProviderStructs.MaximumBudgetUpdate[] memory updates)\\n        external\\n        onlyOwnerOrPricingWallet\\n    {\\n        uint256 updatesLength = updates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.MaximumBudgetUpdate memory update = updates[i];\\n            setMaximumBudget(update.chainId, update.maximumTotalBudget);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updateAssetConversionBuffer(\\n        uint16 targetChain,\\n        uint16 buffer,\\n        uint16 bufferDenominator\\n    ) external onlyOwnerOrPricingWallet {\\n        updateAssetConversionBufferImpl(targetChain, buffer, bufferDenominator);\\n    }\\n\\n    function updateAssetConversionBuffers(\\n        DeliveryProviderStructs.AssetConversionBufferUpdate[] memory updates\\n    ) external onlyOwnerOrPricingWallet {\\n        uint256 updatesLength = updates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.AssetConversionBufferUpdate memory update = updates[i];\\n            updateAssetConversionBufferImpl(update.chainId, update.buffer, update.bufferDenominator);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function updateAssetConversionBufferImpl(\\n        uint16 targetChain,\\n        uint16 buffer,\\n        uint16 bufferDenominator\\n    ) internal {\\n        setAssetConversionBuffer(targetChain, buffer, bufferDenominator);\\n        emit AssetConversionBufferUpdated(targetChain, buffer, bufferDenominator);\\n    }\\n\\n    function updateConfig(\\n        DeliveryProviderStructs.Update[] memory updates,\\n        DeliveryProviderStructs.CoreConfig memory coreConfig\\n    ) external onlyOwner {\\n        uint256 updatesLength = updates.length;\\n        for (uint256 i = 0; i < updatesLength;) {\\n            DeliveryProviderStructs.Update memory update = updates[i];\\n            if (update.updatePrice) {\\n                updatePriceImpl(update.chainId, update.gasPrice, update.nativeCurrencyPrice);\\n            }\\n            if (update.updateTargetChainAddress) {\\n                updateTargetChainAddressImpl(update.chainId, update.targetChainAddress);\\n            }\\n            if (update.updateDeliverGasOverhead) {\\n                updateDeliverGasOverheadImpl(update.chainId, update.newGasOverhead);\\n            }\\n            if (update.updateMaximumBudget) {\\n                setMaximumBudget(update.chainId, update.maximumTotalBudget);\\n            }\\n            if (update.updateAssetConversionBuffer) {\\n                updateAssetConversionBufferImpl(\\n                    update.chainId, update.buffer, update.bufferDenominator\\n                );\\n            }\\n            if (update.updateSupportedChain) {\\n                updateSupportedChainImpl(update.chainId, update.isSupported);\\n            }\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        if (coreConfig.updateWormholeRelayer) {\\n            updateWormholeRelayerImpl(coreConfig.coreRelayer);\\n        }\\n\\n        if (coreConfig.updateRewardAddress) {\\n            updateRewardAddressImpl(coreConfig.rewardAddress);\\n        }\\n        if(coreConfig.updateSupportedKeyTypes) {\\n            getSupportedMessageKeyTypes().bitmap = coreConfig.supportedKeyTypesBitmap;\\n        }\\n    }\\n\\n    /// @dev upgrade serves to upgrade contract implementations\\n    function upgrade(uint16 deliveryProviderChainId, address newImplementation) public onlyOwner {\\n        if (deliveryProviderChainId != chainId()) {\\n            revert WrongChainId();\\n        }\\n\\n        address currentImplementation = _getImplementation();\\n\\n        _upgradeTo(newImplementation);\\n\\n        // call initialize function of the new implementation\\n        (bool success, bytes memory reason) =\\n            newImplementation.delegatecall(abi.encodeWithSignature(\\\"initialize()\\\"));\\n\\n        if (!success) {\\n            revert FailedToInitializeImplementation(string(reason));\\n        }\\n\\n        emit ContractUpgraded(currentImplementation, newImplementation);\\n    }\\n\\n    /**\\n     * @dev submitOwnershipTransferRequest serves to begin the ownership transfer process of the contracts\\n     * - it saves an address for the new owner in the pending state\\n     */\\n    function submitOwnershipTransferRequest(\\n        uint16 thisRelayerChainId,\\n        address newOwner\\n    ) external onlyOwner {\\n        if (thisRelayerChainId != chainId()) {\\n            revert WrongChainId();\\n        }\\n        if (newOwner == address(0)) {\\n            revert AddressIsZero();\\n        }\\n\\n        setPendingOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev confirmOwnershipTransferRequest serves to finalize an ownership transfer\\n     * - it checks that the caller is the pendingOwner to validate the wallet address\\n     * - it updates the owner state variable with the pendingOwner state variable\\n     */\\n    function confirmOwnershipTransferRequest() external {\\n        // cache the new owner address\\n        address newOwner = pendingOwner();\\n\\n        if (msg.sender != newOwner) {\\n            revert CallerMustBePendingOwner();\\n        }\\n\\n        // cache currentOwner for Event\\n        address currentOwner = owner();\\n\\n        // update the owner in the contract state and reset the pending owner\\n        setOwner(newOwner);\\n        setPendingOwner(address(0));\\n\\n        emit OwnershipTransfered(currentOwner, newOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (owner() != _msgSender()) {\\n            revert CallerMustBeOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrPricingWallet() {\\n        if ((pricingWallet() != _msgSender()) && (owner() != _msgSender())) {\\n            revert CallerMustBeOwnerOrPricingWallet();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\n\\nabstract contract DeliveryProviderStructs {\\n    struct UpdatePrice {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        /**\\n         * Gas price in \u00b4chainId\u00b4 chain.\\n         */\\n        GasPrice gasPrice;\\n        /**\\n         * Price of the native currency in \u00b4chainId\u00b4 chain.\\n         * Native currency is typically used to pay for gas.\\n         */\\n        WeiPrice nativeCurrencyPrice;\\n    }\\n\\n    struct TargetChainUpdate {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        /**\\n         * Wormhole address of the relay provider in the \u00b4chainId\u00b4 chain.\\n         */\\n        bytes32 targetChainAddress;\\n    }\\n\\n    struct MaximumBudgetUpdate {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        /**\\n         * Maximum total budget for a delivery in \u00b4chainId\u00b4 chain.\\n         */\\n        Wei maximumTotalBudget;\\n    }\\n\\n    struct DeliverGasOverheadUpdate {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        /**\\n         * The gas overhead for a delivery in \u00b4chainId\u00b4 chain.\\n         */\\n        Gas newGasOverhead;\\n    }\\n\\n    struct SupportedChainUpdate {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        /**\\n         * True if the chain is supported.\\n         */\\n        bool isSupported;\\n    }\\n\\n    struct AssetConversionBufferUpdate {\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        // See DeliveryProviderState.AssetConversion\\n        uint16 buffer;\\n        uint16 bufferDenominator;\\n    }\\n\\n    struct Update {\\n        // Update flags\\n        bool updateAssetConversionBuffer;\\n        bool updateDeliverGasOverhead;\\n        bool updatePrice;\\n        bool updateTargetChainAddress;\\n        bool updateMaximumBudget;\\n        bool updateSupportedChain;\\n        // SupportedChainUpdate\\n        bool isSupported;\\n        /**\\n         * Wormhole chain id\\n         */\\n        uint16 chainId;\\n        // AssetConversionBufferUpdate\\n        // See DeliveryProviderState.AssetConversion\\n        uint16 buffer;\\n        uint16 bufferDenominator;\\n        // DeliverGasOverheadUpdate\\n        /**\\n         * The gas overhead for a delivery in \u00b4chainId\u00b4 chain.\\n         */\\n        Gas newGasOverhead;\\n        // UpdatePrice\\n        /**\\n         * Gas price in \u00b4chainId\u00b4 chain.\\n         */\\n        GasPrice gasPrice;\\n        /**\\n         * Price of the native currency in \u00b4chainId\u00b4 chain.\\n         * Native currency is typically used to pay for gas.\\n         */\\n        WeiPrice nativeCurrencyPrice;\\n        // TargetChainUpdate\\n        /**\\n         * Wormhole address of the relay provider in the \u00b4chainId\u00b4 chain.\\n         */\\n        bytes32 targetChainAddress;\\n        // MaximumBudgetUpdate\\n        /**\\n         * Maximum total budget for a delivery in \u00b4chainId\u00b4 chain.\\n         */\\n        Wei maximumTotalBudget;\\n    }\\n\\n    struct CoreConfig {\\n        bool updateWormholeRelayer;\\n        bool updateRewardAddress;\\n        bool updateSupportedKeyTypes;\\n        /**\\n         * Address of the WormholeRelayer contract\\n         */\\n        address payable coreRelayer;\\n        /**\\n         * Address where rewards are sent for successful relays and sends\\n         */\\n        address payable rewardAddress;\\n        /**\\n         * Bitmap encoding all uint8 keyTypes supported \\n         */\\n        uint256 supportedKeyTypesBitmap;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderState.sol\": {\r\n      \"content\": \"// contracts/State.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\n\\ncontract DeliveryProviderStorage {\\n    struct PriceData {\\n        // The price of purchasing 1 unit of gas on the target chain, denominated in target chain's wei.\\n        GasPrice gasPrice;\\n        // The price of the native currency denominated in USD * 10^6\\n        WeiPrice nativeCurrencyPrice;\\n    }\\n\\n    struct AssetConversion {\\n        // The following two fields are a percentage buffer that is used to upcharge the user for the value attached to the message sent.\\n        // The cost of getting \u2018targetAmount\u2019 on the target chain for the receiverValue is\\n        // (denominator + buffer) / (denominator) * (the converted amount in source chain currency using the \u2018quoteAssetPrice\u2019 values)\\n        uint16 buffer;\\n        uint16 denominator;\\n    }\\n\\n    struct State {\\n        // Wormhole chain id of this blockchain.\\n        uint16 chainId;\\n        // Current owner.\\n        address owner;\\n        // Pending target of ownership transfer.\\n        address pendingOwner;\\n        // Address that is allowed to modify pricing\\n        address pricingWallet;\\n        // Address of the core relayer contract.\\n        address coreRelayer;\\n        // Dictionary of implementation contract -> initialized flag\\n        mapping(address => bool) initializedImplementations;\\n        // Supported chains to deliver to\\n        mapping(uint16 => bool) supportedChains;\\n        // Contracts of this relay provider on other chains\\n        mapping(uint16 => bytes32) targetChainAddresses;\\n        // Dictionary of wormhole chain id -> price data\\n        mapping(uint16 => PriceData) data;\\n        // The delivery overhead gas required to deliver a message to targetChain, denominated in targetChain's gas.\\n        mapping(uint16 => Gas) deliverGasOverhead;\\n        // The maximum budget that is allowed for a delivery on target chain, denominated in the targetChain's wei.\\n        mapping(uint16 => TargetNative) maximumBudget;\\n        // Dictionary of wormhole chain id -> assetConversion\\n        mapping(uint16 => AssetConversion) assetConversion;\\n        // Reward address for the relayer. The WormholeRelayer contract transfers the reward for relaying messages here.\\n        address payable rewardAddress;\\n    }\\n}\\n\\ncontract DeliveryProviderState {\\n    DeliveryProviderStorage.State _state;\\n}\\n\\nstruct SupportedMessageKeyTypes {\\n    uint256 bitmap;\\n}\\n\\n//keccak256(\\\"DefaultDeliveryProviderState\\\") - 1\\nbytes32 constant SUPPORTED_MESSAGE_KEY_TYPES_SLOT =\\n    0x5e6997bab73a9a9b8f33ae518f391b0426896f5c5f2d9fdce4ddbda5f4773406;\\n\\nfunction getSupportedMessageKeyTypes()\\n    pure\\n    returns (SupportedMessageKeyTypes storage state)\\n{\\n    assembly (\\\"memory-safe\\\") {\\n        state.slot := SUPPORTED_MESSAGE_KEY_TYPES_SLOT\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/relayer/IDeliveryProviderTyped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedUnits.sol\\\";\\n\\ninterface IDeliveryProvider {\\n    \\n    /**\\n     * @notice This function returns \\n     *\\n     * 1) nativePriceQuote: the price of a delivery (by this delivery provider) to chain\\n     * 'targetChain', giving the user's contract 'receiverValue' target chain wei and performing the \\n     * relay with the execution parameters (e.g. the gas limit) specified in 'encodedExecutionParameters'\\n     * \\n     * 2) encodedExecutionInfo: information relating to how this delivery provider\\n     * will perform such a delivery (e.g. the gas limit, and the amount it will refund per gas unused)\\n     *\\n     * encodedExecutionParameters and encodedExecutionInfo both are encodings of versioned structs - \\n     * version EVM_V1 of ExecutionParameters specifies the gas limit,\\n     * and version EVM_V1 of ExecutionInfo specifies the gas limit and the amount that this delivery provider \\n     * will refund per unit of gas unused\\n     */\\n    function quoteDeliveryPrice(\\n        uint16 targetChain,\\n        TargetNative receiverValue,\\n        bytes memory encodedExecutionParams\\n    ) external view returns (LocalNative nativePriceQuote, bytes memory encodedExecutionInfo);\\n\\n    /**\\n     * @notice This function returns the amount of extra 'receiverValue' (msg.value on the target chain) \\n     * that will be sent to your contract, if you specify 'currentChainAmount' in the \\n     * 'paymentForExtraReceiverValue' field on 'send'\\n     */\\n    function quoteAssetConversion(\\n        uint16 targetChain,\\n        LocalNative currentChainAmount\\n    ) external view returns (TargetNative targetChainAmount);\\n\\n    /**\\n     * @notice This function should return a payable address on this (source) chain where all awards\\n     *     should be sent for the relay provider.\\n     */\\n    function getRewardAddress() external view returns (address payable rewardAddress);\\n\\n    /**\\n     * @notice This function determines whether a relay provider supports deliveries to a given chain\\n     *     or not.\\n     *\\n     * @param targetChain - The chain which is being delivered to.\\n     */\\n    function isChainSupported(uint16 targetChain) external view returns (bool supported);\\n\\n    /**\\n     * @notice This function determines whether a relay provider supports the given keyType.\\n     *      \\n     * Note: 0-127 are reserved for standardized keyTypes and 128-255 are allowed to be custom per DeliveryProvider\\n     *       Practically this means that 0-127 must mean the same thing for all DeliveryProviders,\\n     *       while x within 128-255 may have different meanings between DeliveryProviders \\n     *       (e.g. 130 for provider A means pyth price quotes while 130 for provider B means tweets, \\n     *       but 8 must mean the same for both)\\n     *\\n     * @param keyType - The keyType within MessageKey that specifies what the encodedKey within a MessageKey means\\n     */\\n    function isMessageKeyTypeSupported(uint8 keyType) external view returns (bool supported);\\n\\n    /**\\n     * @notice This function returns a bitmap encoding all the keyTypes this provider supports\\n     *      \\n     * Note: 0-127 are reserved for standardized keyTypes and 128-255 are allowed to be custom per DeliveryProvider\\n     *       Practically this means that 0-127 must mean the same thing for all DeliveryProviders,\\n     *       while x within 128-255 may have different meanings between DeliveryProviders \\n     *       (e.g. 130 for provider A means pyth price quotes while 130 for provider B means tweets, \\n     *       but 8 must mean the same for both)\\n     */\\n    function getSupportedKeys() external view returns (uint256 bitmap);\\n\\n    /**\\n     * @notice If a DeliveryProvider supports a given chain, this function should provide the contract\\n     *      address (in wormhole format) of the relay provider on that chain.\\n     *\\n     * @param targetChain - The chain which is being delivered to.\\n     */\\n    function getTargetChainAddress(uint16 targetChain)\\n        external\\n        view\\n        returns (bytes32 deliveryProviderAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/relayer/TypedUnits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\ntype WeiPrice is uint256;\\n\\ntype GasPrice is uint256;\\n\\ntype Gas is uint256;\\n\\ntype Dollar is uint256;\\n\\ntype Wei is uint256;\\n\\ntype LocalNative is uint256;\\n\\ntype TargetNative is uint256;\\n\\nusing {\\n    addWei as +,\\n    subWei as -,\\n    lteWei as <=,\\n    ltWei as <,\\n    gtWei as >,\\n    eqWei as ==,\\n    neqWei as !=\\n} for Wei global;\\nusing {addTargetNative as +, subTargetNative as -} for TargetNative global;\\nusing {\\n    leLocalNative as <,\\n    leqLocalNative as <=,\\n    neqLocalNative as !=,\\n    addLocalNative as +,\\n    subLocalNative as -\\n} for LocalNative global;\\nusing {\\n    ltGas as <,\\n    lteGas as <=,\\n    subGas as -\\n} for Gas global;\\n\\nusing WeiLib for Wei;\\nusing GasLib for Gas;\\nusing DollarLib for Dollar;\\nusing WeiPriceLib for WeiPrice;\\nusing GasPriceLib for GasPrice;\\n\\nfunction ltWei(Wei a, Wei b) pure returns (bool) {\\n    return Wei.unwrap(a) < Wei.unwrap(b);\\n}\\n\\nfunction eqWei(Wei a, Wei b) pure returns (bool) {\\n    return Wei.unwrap(a) == Wei.unwrap(b);\\n}\\n\\nfunction gtWei(Wei a, Wei b) pure returns (bool) {\\n    return Wei.unwrap(a) > Wei.unwrap(b);\\n}\\n\\nfunction lteWei(Wei a, Wei b) pure returns (bool) {\\n    return Wei.unwrap(a) <= Wei.unwrap(b);\\n}\\n\\nfunction subWei(Wei a, Wei b) pure returns (Wei) {\\n    return Wei.wrap(Wei.unwrap(a) - Wei.unwrap(b));\\n}\\n\\nfunction addWei(Wei a, Wei b) pure returns (Wei) {\\n    return Wei.wrap(Wei.unwrap(a) + Wei.unwrap(b));\\n}\\n\\nfunction neqWei(Wei a, Wei b) pure returns (bool) {\\n    return Wei.unwrap(a) != Wei.unwrap(b);\\n}\\n\\nfunction ltGas(Gas a, Gas b) pure returns (bool) {\\n    return Gas.unwrap(a) < Gas.unwrap(b);\\n}\\n\\nfunction lteGas(Gas a, Gas b) pure returns (bool) {\\n    return Gas.unwrap(a) <= Gas.unwrap(b);\\n}\\n\\nfunction subGas(Gas a, Gas b) pure returns (Gas) {\\n    return Gas.wrap(Gas.unwrap(a) - Gas.unwrap(b));\\n}\\n\\nfunction addTargetNative(TargetNative a, TargetNative b) pure returns (TargetNative) {\\n    return TargetNative.wrap(TargetNative.unwrap(a) + TargetNative.unwrap(b));\\n}\\n\\nfunction subTargetNative(TargetNative a, TargetNative b) pure returns (TargetNative) {\\n    return TargetNative.wrap(TargetNative.unwrap(a) - TargetNative.unwrap(b));\\n}\\n\\nfunction addLocalNative(LocalNative a, LocalNative b) pure returns (LocalNative) {\\n    return LocalNative.wrap(LocalNative.unwrap(a) + LocalNative.unwrap(b));\\n}\\n\\nfunction subLocalNative(LocalNative a, LocalNative b) pure returns (LocalNative) {\\n    return LocalNative.wrap(LocalNative.unwrap(a) - LocalNative.unwrap(b));\\n}\\n\\nfunction neqLocalNative(LocalNative a, LocalNative b) pure returns (bool) {\\n    return LocalNative.unwrap(a) != LocalNative.unwrap(b);\\n}\\n\\nfunction leLocalNative(LocalNative a, LocalNative b) pure returns (bool) {\\n    return LocalNative.unwrap(a) < LocalNative.unwrap(b);\\n}\\n\\nfunction leqLocalNative(LocalNative a, LocalNative b) pure returns (bool) {\\n    return LocalNative.unwrap(a) <= LocalNative.unwrap(b);\\n}\\n\\nlibrary WeiLib {\\n    using {\\n        toDollars,\\n        toGas,\\n        convertAsset,\\n        min,\\n        max,\\n        scale,\\n        unwrap,\\n        asGasPrice,\\n        asTargetNative,\\n        asLocalNative\\n    } for Wei;\\n\\n    function min(Wei x, Wei maxVal) internal pure returns (Wei) {\\n        return x > maxVal ? maxVal : x;\\n    }\\n\\n    function max(Wei x, Wei maxVal) internal pure returns (Wei) {\\n        return x < maxVal ? maxVal : x;\\n    }\\n\\n    function asTargetNative(Wei w) internal pure returns (TargetNative) {\\n        return TargetNative.wrap(Wei.unwrap(w));\\n    }\\n\\n    function asLocalNative(Wei w) internal pure returns (LocalNative) {\\n        return LocalNative.wrap(Wei.unwrap(w));\\n    }\\n\\n    function toDollars(Wei w, WeiPrice price) internal pure returns (Dollar) {\\n        return Dollar.wrap(Wei.unwrap(w) * WeiPrice.unwrap(price));\\n    }\\n\\n    function toGas(Wei w, GasPrice price) internal pure returns (Gas) {\\n        return Gas.wrap(Wei.unwrap(w) / GasPrice.unwrap(price));\\n    }\\n\\n    function scale(Wei w, Gas num, Gas denom) internal pure returns (Wei) {\\n        return Wei.wrap(Wei.unwrap(w) * Gas.unwrap(num) / Gas.unwrap(denom));\\n    }\\n\\n    function unwrap(Wei w) internal pure returns (uint256) {\\n        return Wei.unwrap(w);\\n    }\\n\\n    function asGasPrice(Wei w) internal pure returns (GasPrice) {\\n        return GasPrice.wrap(Wei.unwrap(w));\\n    }\\n\\n    function convertAsset(\\n        Wei w,\\n        WeiPrice fromPrice,\\n        WeiPrice toPrice,\\n        uint32 multiplierNum,\\n        uint32 multiplierDenom,\\n        bool roundUp\\n    ) internal pure returns (Wei) {\\n        Dollar numerator = w.toDollars(fromPrice).mul(multiplierNum);\\n        WeiPrice denom = toPrice.mul(multiplierDenom);\\n        Wei res = numerator.toWei(denom, roundUp);\\n        return res;\\n    }\\n}\\n\\nlibrary GasLib {\\n    using {toWei, unwrap} for Gas;\\n\\n    function min(Gas x, Gas maxVal) internal pure returns (Gas) {\\n        return x < maxVal ? x : maxVal;\\n    }\\n\\n    function toWei(Gas w, GasPrice price) internal pure returns (Wei) {\\n        return Wei.wrap(w.unwrap() * price.unwrap());\\n    }\\n\\n    function unwrap(Gas w) internal pure returns (uint256) {\\n        return Gas.unwrap(w);\\n    }\\n}\\n\\nlibrary DollarLib {\\n    using {toWei, mul, unwrap} for Dollar;\\n\\n    function mul(Dollar a, uint256 b) internal pure returns (Dollar) {\\n        return Dollar.wrap(a.unwrap() * b);\\n    }\\n\\n    function toWei(Dollar w, WeiPrice price, bool roundUp) internal pure returns (Wei) {\\n        return Wei.wrap((w.unwrap() + (roundUp ? price.unwrap() - 1 : 0)) / price.unwrap());\\n    }\\n\\n    function toGas(Dollar w, GasPrice price, WeiPrice weiPrice) internal pure returns (Gas) {\\n        return w.toWei(weiPrice, false).toGas(price);\\n    }\\n\\n    function unwrap(Dollar w) internal pure returns (uint256) {\\n        return Dollar.unwrap(w);\\n    }\\n}\\n\\nlibrary WeiPriceLib {\\n    using {mul, unwrap} for WeiPrice;\\n\\n    function mul(WeiPrice a, uint256 b) internal pure returns (WeiPrice) {\\n        return WeiPrice.wrap(a.unwrap() * b);\\n    }\\n\\n    function unwrap(WeiPrice w) internal pure returns (uint256) {\\n        return WeiPrice.unwrap(w);\\n    }\\n}\\n\\nlibrary GasPriceLib {\\n    using {unwrap, priceAsWei} for GasPrice;\\n\\n    function priceAsWei(GasPrice w) internal pure returns (Wei) {\\n        return Wei.wrap(w.unwrap());\\n    }\\n\\n    function unwrap(GasPrice w) internal pure returns (uint256) {\\n        return GasPrice.unwrap(w);\\n    }\\n}\\n\\nlibrary TargetNativeLib {\\n    using {unwrap, asNative} for TargetNative;\\n\\n    function unwrap(TargetNative w) internal pure returns (uint256) {\\n        return TargetNative.unwrap(w);\\n    }\\n\\n    function asNative(TargetNative w) internal pure returns (Wei) {\\n        return Wei.wrap(TargetNative.unwrap(w));\\n    }\\n}\\n\\nlibrary LocalNativeLib {\\n    using {unwrap, asNative} for LocalNative;\\n\\n    function unwrap(LocalNative w) internal pure returns (uint256) {\\n        return LocalNative.unwrap(w);\\n    }\\n\\n    function asNative(LocalNative w) internal pure returns (Wei) {\\n        return Wei.wrap(LocalNative.unwrap(w));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/libraries/ExecutionParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\nimport {BytesParsing} from \\\"../../relayer/libraries/BytesParsing.sol\\\";\\n\\nerror UnexpectedExecutionParamsVersion(uint8 version, uint8 expectedVersion);\\nerror UnsupportedExecutionParamsVersion(uint8 version);\\nerror TargetChainAndExecutionParamsVersionMismatch(uint16 targetChain, uint8 version);\\nerror UnexpectedExecutionInfoVersion(uint8 version, uint8 expectedVersion);\\nerror UnsupportedExecutionInfoVersion(uint8 version);\\nerror TargetChainAndExecutionInfoVersionMismatch(uint16 targetChain, uint8 version);\\nerror VersionMismatchOverride(uint8 instructionVersion, uint8 overrideVersion);\\n\\nusing BytesParsing for bytes;\\n\\nenum ExecutionParamsVersion {EVM_V1}\\n\\nstruct EvmExecutionParamsV1 {\\n    Gas gasLimit;\\n}\\n\\nenum ExecutionInfoVersion {EVM_V1}\\n\\nstruct EvmExecutionInfoV1 {\\n    Gas gasLimit;\\n    GasPrice targetChainRefundPerGasUnused;\\n}\\n\\nfunction decodeExecutionParamsVersion(bytes memory data)\\n    pure\\n    returns (ExecutionParamsVersion version)\\n{\\n    (version) = abi.decode(data, (ExecutionParamsVersion));\\n}\\n\\nfunction decodeExecutionInfoVersion(bytes memory data)\\n    pure\\n    returns (ExecutionInfoVersion version)\\n{\\n    (version) = abi.decode(data, (ExecutionInfoVersion));\\n}\\n\\nfunction encodeEvmExecutionParamsV1(EvmExecutionParamsV1 memory executionParams)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encode(uint8(ExecutionParamsVersion.EVM_V1), executionParams.gasLimit);\\n}\\n\\nfunction decodeEvmExecutionParamsV1(bytes memory data)\\n    pure\\n    returns (EvmExecutionParamsV1 memory executionParams)\\n{\\n    uint8 version;\\n    (version, executionParams.gasLimit) = abi.decode(data, (uint8, Gas));\\n\\n    if (version != uint8(ExecutionParamsVersion.EVM_V1)) {\\n        revert UnexpectedExecutionParamsVersion(version, uint8(ExecutionParamsVersion.EVM_V1));\\n    }\\n}\\n\\nfunction encodeEvmExecutionInfoV1(EvmExecutionInfoV1 memory executionInfo)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encode(\\n        uint8(ExecutionInfoVersion.EVM_V1),\\n        executionInfo.gasLimit,\\n        executionInfo.targetChainRefundPerGasUnused\\n    );\\n}\\n\\nfunction decodeEvmExecutionInfoV1(bytes memory data)\\n    pure\\n    returns (EvmExecutionInfoV1 memory executionInfo)\\n{\\n    uint8 version;\\n    (version, executionInfo.gasLimit, executionInfo.targetChainRefundPerGasUnused) =\\n        abi.decode(data, (uint8, Gas, GasPrice));\\n\\n    if (version != uint8(ExecutionInfoVersion.EVM_V1)) {\\n        revert UnexpectedExecutionInfoVersion(version, uint8(ExecutionInfoVersion.EVM_V1));\\n    }\\n}\\n\\nfunction getEmptyEvmExecutionParamsV1()\\n    pure\\n    returns (EvmExecutionParamsV1 memory executionParams)\\n{\\n    executionParams.gasLimit = Gas.wrap(uint256(0));\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IWormhole.sol\": {\r\n      \"content\": \"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWormhole {\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n\\n        bytes32 hash;\\n    }\\n\\n    struct ContractUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        address newContract;\\n    }\\n\\n    struct GuardianSetUpgrade {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        GuardianSet newGuardianSet;\\n        uint32 newGuardianSetIndex;\\n    }\\n\\n    struct SetMessageFee {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 messageFee;\\n    }\\n\\n    struct TransferFees {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chain;\\n\\n        uint256 amount;\\n        bytes32 recipient;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n    event GuardianSetAdded(uint32 indexed index);\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function initialize() external;\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\\n\\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\n\\n    function quorum(uint numGuardians) external pure returns (uint numSignaturesRequiredForQuorum);\\n\\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function nextSequence(address emitter) external view returns (uint64);\\n\\n    function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\\n\\n    function parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\\n\\n    function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\\n\\n    function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n\\n    function submitContractUpgrade(bytes memory _vm) external;\\n\\n    function submitSetMessageFee(bytes memory _vm) external;\\n\\n    function submitNewGuardianSet(bytes memory _vm) external;\\n\\n    function submitTransferFees(bytes memory _vm) external;\\n\\n    function submitRecoverChainId(bytes memory _vm) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/external/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderGetters.sol\": {\r\n      \"content\": \"// contracts/Getters.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../interfaces/IWormhole.sol\\\";\\nimport \\\"../../interfaces/relayer/TypedUnits.sol\\\";\\n\\nimport \\\"./DeliveryProviderState.sol\\\";\\n\\ncontract DeliveryProviderGetters is DeliveryProviderState {\\n    function owner() public view returns (address) {\\n        return _state.owner;\\n    }\\n\\n    function pendingOwner() public view returns (address) {\\n        return _state.pendingOwner;\\n    }\\n\\n    function pricingWallet() public view returns (address) {\\n        return _state.pricingWallet;\\n    }\\n\\n    function isInitialized(address impl) public view returns (bool) {\\n        return _state.initializedImplementations[impl];\\n    }\\n\\n    function chainId() public view returns (uint16) {\\n        return _state.chainId;\\n    }\\n\\n    function coreRelayer() public view returns (address) {\\n        return _state.coreRelayer;\\n    }\\n\\n    function gasPrice(uint16 targetChain) public view returns (GasPrice) {\\n        return _state.data[targetChain].gasPrice;\\n    }\\n\\n    function nativeCurrencyPrice(uint16 targetChain) public view returns (WeiPrice) {\\n        return _state.data[targetChain].nativeCurrencyPrice;\\n    }\\n\\n    function deliverGasOverhead(uint16 targetChain) public view returns (Gas) {\\n        return _state.deliverGasOverhead[targetChain];\\n    }\\n\\n    function maximumBudget(uint16 targetChain) public view returns (TargetNative) {\\n        return _state.maximumBudget[targetChain];\\n    }\\n\\n    function targetChainAddress(uint16 targetChain) public view returns (bytes32) {\\n        return _state.targetChainAddresses[targetChain];\\n    }\\n\\n    function rewardAddress() public view returns (address payable) {\\n        return _state.rewardAddress;\\n    }\\n\\n    function assetConversionBuffer(uint16 targetChain)\\n        public\\n        view\\n        returns (uint16 buffer, uint16 bufferDenominator)\\n    {\\n        DeliveryProviderStorage.AssetConversion storage assetConversion =\\n            _state.assetConversion[targetChain];\\n        return (assetConversion.buffer, assetConversion.denominator);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/deliveryProvider/DeliveryProviderSetters.sol\": {\r\n      \"content\": \"// contracts/Setters.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./DeliveryProviderState.sol\\\";\\nimport \\\"../../interfaces/relayer/IDeliveryProviderTyped.sol\\\";\\n\\ncontract DeliveryProviderSetters is Context, DeliveryProviderState {\\n    using GasPriceLib for GasPrice;\\n    using WeiLib for Wei;\\n\\n    function setOwner(address owner_) internal {\\n        _state.owner = owner_;\\n    }\\n\\n    function setPendingOwner(address newOwner) internal {\\n        _state.pendingOwner = newOwner;\\n    }\\n\\n    function setInitialized(address implementation) internal {\\n        _state.initializedImplementations[implementation] = true;\\n    }\\n\\n    function setChainId(uint16 thisChain) internal {\\n        _state.chainId = thisChain;\\n    }\\n\\n    function setPricingWallet(address newPricingWallet) internal {\\n        _state.pricingWallet = newPricingWallet;\\n    }\\n\\n    function setWormholeRelayer(address payable coreRelayer) internal {\\n        _state.coreRelayer = coreRelayer;\\n    }\\n\\n    function setChainSupported(uint16 targetChain, bool isSupported) internal {\\n        _state.supportedChains[targetChain] = isSupported;\\n    }\\n\\n    function setDeliverGasOverhead(uint16 chainId, Gas deliverGasOverhead) internal {\\n        require(Gas.unwrap(deliverGasOverhead) <= type(uint32).max, \\\"deliverGasOverhead too large\\\");\\n        _state.deliverGasOverhead[chainId] = deliverGasOverhead;\\n    }\\n\\n    function setRewardAddress(address payable rewardAddress) internal {\\n        _state.rewardAddress = rewardAddress;\\n    }\\n\\n    function setTargetChainAddress(uint16 targetChain, bytes32 newAddress) internal {\\n        _state.targetChainAddresses[targetChain] = newAddress;\\n    }\\n\\n    function setMaximumBudget(uint16 targetChain, Wei amount) internal {\\n        require(amount.unwrap() <= type(uint192).max, \\\"amount too large\\\");\\n        _state.maximumBudget[targetChain] = amount.asTargetNative();\\n    }\\n\\n    function setPriceInfo(\\n        uint16 updateChainId,\\n        GasPrice updateGasPrice,\\n        WeiPrice updateNativeCurrencyPrice\\n    ) internal {\\n        require(updateGasPrice.unwrap() <= type(uint64).max, \\\"gas price must be < 2^64\\\");\\n        _state.data[updateChainId].gasPrice = updateGasPrice;\\n        _state.data[updateChainId].nativeCurrencyPrice = updateNativeCurrencyPrice;\\n    }\\n\\n    function setAssetConversionBuffer(\\n        uint16 targetChain,\\n        uint16 tolerance,\\n        uint16 toleranceDenominator\\n    ) internal {\\n        DeliveryProviderStorage.AssetConversion storage assetConversion =\\n            _state.assetConversion[targetChain];\\n        assetConversion.buffer = tolerance;\\n        assetConversion.denominator = toleranceDenominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/libraries/BytesParsing.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.19;\\n\\nlibrary BytesParsing {\\n  uint256 private constant freeMemoryPtr = 0x40;\\n  uint256 private constant wordSize = 32;\\n\\n  error OutOfBounds(uint256 offset, uint256 length);\\n\\n  function checkBound(uint offset, uint length) internal pure {\\n    if (offset > length)\\n      revert OutOfBounds(offset, length);\\n  }\\n\\n  function sliceUnchecked(\\n    bytes memory encoded,\\n    uint offset,\\n    uint length\\n  ) internal pure returns (bytes memory ret, uint nextOffset) {\\n    //bail early for degenerate case\\n    if (length == 0)\\n      return (new bytes(0), offset);\\n\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, length)\\n      ret := mload(freeMemoryPtr)\\n\\n      //Explanation on how we copy data here:\\n      //  The bytes type has the following layout in memory:\\n      //    [length: 32 bytes, data: length bytes]\\n      //  So if we allocate `bytes memory foo = new bytes(1);` then `foo` will be a pointer to 33\\n      //    bytes where the first 32 bytes contain the length and the last byte is the actual data.\\n      //  Since mload always loads 32 bytes of memory at once, we use our shift variable to align\\n      //    our reads so that our last read lines up exactly with the last 32 bytes of `encoded`.\\n      //  However this also means that if the length of `encoded` is not a multiple of 32 bytes, our\\n      //    first read will necessarily partly contain bytes from `encoded`'s 32 length bytes that\\n      //    will be written into the length part of our `ret` slice.\\n      //  We remedy this issue by writing the length of our `ret` slice at the end, thus\\n      //    overwritting those garbage bytes.\\n      let shift := and(length, 31) //equivalent to `mod(length, 32)` but 2 gas cheaper\\n      if iszero(shift) {\\n        shift := wordSize\\n      }\\n\\n      let dest := add(ret, shift)\\n      let end := add(dest, length)\\n      for {\\n        let src := add(add(encoded, shift), offset)\\n      } lt(dest, end) {\\n        src := add(src, wordSize)\\n        dest := add(dest, wordSize)\\n      } {\\n        mstore(dest, mload(src))\\n      }\\n\\n      mstore(ret, length)\\n      //When compiling with --via-ir then normally allocated memory (i.e. via new) will have 32 byte\\n      //  memory alignment and so we enforce the same memory alignment here.\\n      mstore(freeMemoryPtr, and(add(dest, 31), not(31)))\\n    }\\n  }\\n\\n  function slice(\\n    bytes memory encoded,\\n    uint offset,\\n    uint length\\n  ) internal pure returns (bytes memory ret, uint nextOffset) {\\n    (ret, nextOffset) = sliceUnchecked(encoded, offset, length);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asAddressUnchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (address, uint) {\\n    (uint160 ret, uint nextOffset) = asUint160(encoded, offset);\\n    return (address(ret), nextOffset);\\n  }\\n\\n  function asAddress(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (address ret, uint nextOffset) {\\n    (ret, nextOffset) = asAddressUnchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBoolUnckecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bool, uint) {\\n    (uint8 ret, uint nextOffset) = asUint8(encoded, offset);\\n    return (ret != 0, nextOffset);\\n  }\\n\\n  function asBool(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bool ret, uint nextOffset) {\\n    (ret, nextOffset) = asBoolUnckecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n/* -------------------------------------------------------------------------------------------------\\nRemaining library code below was auto-generated by via the following js/node code:\\n\\nfor (let bytes = 1; bytes <= 32; ++bytes) {\\n  const bits = bytes*8;\\n  console.log(\\n`function asUint${bits}Unchecked(\\n  bytes memory encoded,\\n  uint offset\\n) internal pure returns (uint${bits} ret, uint nextOffset) {\\n  assembly (\\\"memory-safe\\\") {\\n    nextOffset := add(offset, ${bytes})\\n    ret := mload(add(encoded, nextOffset))\\n  }\\n  return (ret, nextOffset);\\n}\\n\\nfunction asUint${bits}(\\n  bytes memory encoded,\\n  uint offset\\n) internal pure returns (uint${bits} ret, uint nextOffset) {\\n  (ret, nextOffset) = asUint${bits}Unchecked(encoded, offset);\\n  checkBound(nextOffset, encoded.length);\\n}\\n\\nfunction asBytes${bytes}Unchecked(\\n  bytes memory encoded,\\n  uint offset\\n) internal pure returns (bytes${bytes}, uint) {\\n  (uint${bits} ret, uint nextOffset) = asUint${bits}Unchecked(encoded, offset);\\n  return (bytes${bytes}(ret), nextOffset);\\n}\\n\\nfunction asBytes${bytes}(\\n  bytes memory encoded,\\n  uint offset\\n) internal pure returns (bytes${bytes}, uint) {\\n  (uint${bits} ret, uint nextOffset) = asUint${bits}(encoded, offset);\\n  return (bytes${bytes}(ret), nextOffset);\\n}\\n`\\n  );\\n}\\n------------------------------------------------------------------------------------------------- */\\n\\n  function asUint8Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint8 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 1)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint8(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint8 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint8Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes1Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes1, uint) {\\n    (uint8 ret, uint nextOffset) = asUint8Unchecked(encoded, offset);\\n    return (bytes1(ret), nextOffset);\\n  }\\n\\n  function asBytes1(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes1, uint) {\\n    (uint8 ret, uint nextOffset) = asUint8(encoded, offset);\\n    return (bytes1(ret), nextOffset);\\n  }\\n\\n  function asUint16Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint16 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 2)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint16(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint16 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint16Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes2Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes2, uint) {\\n    (uint16 ret, uint nextOffset) = asUint16Unchecked(encoded, offset);\\n    return (bytes2(ret), nextOffset);\\n  }\\n\\n  function asBytes2(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes2, uint) {\\n    (uint16 ret, uint nextOffset) = asUint16(encoded, offset);\\n    return (bytes2(ret), nextOffset);\\n  }\\n\\n  function asUint24Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint24 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 3)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint24(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint24 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint24Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes3Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes3, uint) {\\n    (uint24 ret, uint nextOffset) = asUint24Unchecked(encoded, offset);\\n    return (bytes3(ret), nextOffset);\\n  }\\n\\n  function asBytes3(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes3, uint) {\\n    (uint24 ret, uint nextOffset) = asUint24(encoded, offset);\\n    return (bytes3(ret), nextOffset);\\n  }\\n\\n  function asUint32Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint32 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 4)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint32(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint32 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint32Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes4Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes4, uint) {\\n    (uint32 ret, uint nextOffset) = asUint32Unchecked(encoded, offset);\\n    return (bytes4(ret), nextOffset);\\n  }\\n\\n  function asBytes4(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes4, uint) {\\n    (uint32 ret, uint nextOffset) = asUint32(encoded, offset);\\n    return (bytes4(ret), nextOffset);\\n  }\\n\\n  function asUint40Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint40 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 5)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint40(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint40 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint40Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes5Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes5, uint) {\\n    (uint40 ret, uint nextOffset) = asUint40Unchecked(encoded, offset);\\n    return (bytes5(ret), nextOffset);\\n  }\\n\\n  function asBytes5(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes5, uint) {\\n    (uint40 ret, uint nextOffset) = asUint40(encoded, offset);\\n    return (bytes5(ret), nextOffset);\\n  }\\n\\n  function asUint48Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint48 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 6)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint48(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint48 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint48Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes6Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes6, uint) {\\n    (uint48 ret, uint nextOffset) = asUint48Unchecked(encoded, offset);\\n    return (bytes6(ret), nextOffset);\\n  }\\n\\n  function asBytes6(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes6, uint) {\\n    (uint48 ret, uint nextOffset) = asUint48(encoded, offset);\\n    return (bytes6(ret), nextOffset);\\n  }\\n\\n  function asUint56Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint56 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 7)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint56(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint56 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint56Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes7Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes7, uint) {\\n    (uint56 ret, uint nextOffset) = asUint56Unchecked(encoded, offset);\\n    return (bytes7(ret), nextOffset);\\n  }\\n\\n  function asBytes7(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes7, uint) {\\n    (uint56 ret, uint nextOffset) = asUint56(encoded, offset);\\n    return (bytes7(ret), nextOffset);\\n  }\\n\\n  function asUint64Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint64 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 8)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint64(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint64 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint64Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes8Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes8, uint) {\\n    (uint64 ret, uint nextOffset) = asUint64Unchecked(encoded, offset);\\n    return (bytes8(ret), nextOffset);\\n  }\\n\\n  function asBytes8(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes8, uint) {\\n    (uint64 ret, uint nextOffset) = asUint64(encoded, offset);\\n    return (bytes8(ret), nextOffset);\\n  }\\n\\n  function asUint72Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint72 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 9)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint72(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint72 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint72Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes9Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes9, uint) {\\n    (uint72 ret, uint nextOffset) = asUint72Unchecked(encoded, offset);\\n    return (bytes9(ret), nextOffset);\\n  }\\n\\n  function asBytes9(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes9, uint) {\\n    (uint72 ret, uint nextOffset) = asUint72(encoded, offset);\\n    return (bytes9(ret), nextOffset);\\n  }\\n\\n  function asUint80Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint80 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 10)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint80(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint80 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint80Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes10Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes10, uint) {\\n    (uint80 ret, uint nextOffset) = asUint80Unchecked(encoded, offset);\\n    return (bytes10(ret), nextOffset);\\n  }\\n\\n  function asBytes10(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes10, uint) {\\n    (uint80 ret, uint nextOffset) = asUint80(encoded, offset);\\n    return (bytes10(ret), nextOffset);\\n  }\\n\\n  function asUint88Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint88 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 11)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint88(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint88 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint88Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes11Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes11, uint) {\\n    (uint88 ret, uint nextOffset) = asUint88Unchecked(encoded, offset);\\n    return (bytes11(ret), nextOffset);\\n  }\\n\\n  function asBytes11(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes11, uint) {\\n    (uint88 ret, uint nextOffset) = asUint88(encoded, offset);\\n    return (bytes11(ret), nextOffset);\\n  }\\n\\n  function asUint96Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint96 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 12)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint96(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint96 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint96Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes12Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes12, uint) {\\n    (uint96 ret, uint nextOffset) = asUint96Unchecked(encoded, offset);\\n    return (bytes12(ret), nextOffset);\\n  }\\n\\n  function asBytes12(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes12, uint) {\\n    (uint96 ret, uint nextOffset) = asUint96(encoded, offset);\\n    return (bytes12(ret), nextOffset);\\n  }\\n\\n  function asUint104Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint104 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 13)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint104(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint104 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint104Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes13Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes13, uint) {\\n    (uint104 ret, uint nextOffset) = asUint104Unchecked(encoded, offset);\\n    return (bytes13(ret), nextOffset);\\n  }\\n\\n  function asBytes13(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes13, uint) {\\n    (uint104 ret, uint nextOffset) = asUint104(encoded, offset);\\n    return (bytes13(ret), nextOffset);\\n  }\\n\\n  function asUint112Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint112 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 14)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint112(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint112 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint112Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes14Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes14, uint) {\\n    (uint112 ret, uint nextOffset) = asUint112Unchecked(encoded, offset);\\n    return (bytes14(ret), nextOffset);\\n  }\\n\\n  function asBytes14(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes14, uint) {\\n    (uint112 ret, uint nextOffset) = asUint112(encoded, offset);\\n    return (bytes14(ret), nextOffset);\\n  }\\n\\n  function asUint120Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint120 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 15)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint120(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint120 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint120Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes15Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes15, uint) {\\n    (uint120 ret, uint nextOffset) = asUint120Unchecked(encoded, offset);\\n    return (bytes15(ret), nextOffset);\\n  }\\n\\n  function asBytes15(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes15, uint) {\\n    (uint120 ret, uint nextOffset) = asUint120(encoded, offset);\\n    return (bytes15(ret), nextOffset);\\n  }\\n\\n  function asUint128Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint128 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 16)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint128(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint128 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint128Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes16Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes16, uint) {\\n    (uint128 ret, uint nextOffset) = asUint128Unchecked(encoded, offset);\\n    return (bytes16(ret), nextOffset);\\n  }\\n\\n  function asBytes16(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes16, uint) {\\n    (uint128 ret, uint nextOffset) = asUint128(encoded, offset);\\n    return (bytes16(ret), nextOffset);\\n  }\\n\\n  function asUint136Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint136 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 17)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint136(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint136 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint136Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes17Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes17, uint) {\\n    (uint136 ret, uint nextOffset) = asUint136Unchecked(encoded, offset);\\n    return (bytes17(ret), nextOffset);\\n  }\\n\\n  function asBytes17(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes17, uint) {\\n    (uint136 ret, uint nextOffset) = asUint136(encoded, offset);\\n    return (bytes17(ret), nextOffset);\\n  }\\n\\n  function asUint144Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint144 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 18)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint144(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint144 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint144Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes18Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes18, uint) {\\n    (uint144 ret, uint nextOffset) = asUint144Unchecked(encoded, offset);\\n    return (bytes18(ret), nextOffset);\\n  }\\n\\n  function asBytes18(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes18, uint) {\\n    (uint144 ret, uint nextOffset) = asUint144(encoded, offset);\\n    return (bytes18(ret), nextOffset);\\n  }\\n\\n  function asUint152Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint152 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 19)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint152(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint152 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint152Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes19Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes19, uint) {\\n    (uint152 ret, uint nextOffset) = asUint152Unchecked(encoded, offset);\\n    return (bytes19(ret), nextOffset);\\n  }\\n\\n  function asBytes19(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes19, uint) {\\n    (uint152 ret, uint nextOffset) = asUint152(encoded, offset);\\n    return (bytes19(ret), nextOffset);\\n  }\\n\\n  function asUint160Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint160 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 20)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint160(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint160 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint160Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes20Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes20, uint) {\\n    (uint160 ret, uint nextOffset) = asUint160Unchecked(encoded, offset);\\n    return (bytes20(ret), nextOffset);\\n  }\\n\\n  function asBytes20(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes20, uint) {\\n    (uint160 ret, uint nextOffset) = asUint160(encoded, offset);\\n    return (bytes20(ret), nextOffset);\\n  }\\n\\n  function asUint168Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint168 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 21)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint168(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint168 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint168Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes21Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes21, uint) {\\n    (uint168 ret, uint nextOffset) = asUint168Unchecked(encoded, offset);\\n    return (bytes21(ret), nextOffset);\\n  }\\n\\n  function asBytes21(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes21, uint) {\\n    (uint168 ret, uint nextOffset) = asUint168(encoded, offset);\\n    return (bytes21(ret), nextOffset);\\n  }\\n\\n  function asUint176Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint176 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 22)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint176(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint176 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint176Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes22Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes22, uint) {\\n    (uint176 ret, uint nextOffset) = asUint176Unchecked(encoded, offset);\\n    return (bytes22(ret), nextOffset);\\n  }\\n\\n  function asBytes22(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes22, uint) {\\n    (uint176 ret, uint nextOffset) = asUint176(encoded, offset);\\n    return (bytes22(ret), nextOffset);\\n  }\\n\\n  function asUint184Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint184 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 23)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint184(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint184 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint184Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes23Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes23, uint) {\\n    (uint184 ret, uint nextOffset) = asUint184Unchecked(encoded, offset);\\n    return (bytes23(ret), nextOffset);\\n  }\\n\\n  function asBytes23(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes23, uint) {\\n    (uint184 ret, uint nextOffset) = asUint184(encoded, offset);\\n    return (bytes23(ret), nextOffset);\\n  }\\n\\n  function asUint192Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint192 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 24)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint192(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint192 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint192Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes24Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes24, uint) {\\n    (uint192 ret, uint nextOffset) = asUint192Unchecked(encoded, offset);\\n    return (bytes24(ret), nextOffset);\\n  }\\n\\n  function asBytes24(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes24, uint) {\\n    (uint192 ret, uint nextOffset) = asUint192(encoded, offset);\\n    return (bytes24(ret), nextOffset);\\n  }\\n\\n  function asUint200Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint200 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 25)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint200(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint200 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint200Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes25Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes25, uint) {\\n    (uint200 ret, uint nextOffset) = asUint200Unchecked(encoded, offset);\\n    return (bytes25(ret), nextOffset);\\n  }\\n\\n  function asBytes25(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes25, uint) {\\n    (uint200 ret, uint nextOffset) = asUint200(encoded, offset);\\n    return (bytes25(ret), nextOffset);\\n  }\\n\\n  function asUint208Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint208 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 26)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint208(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint208 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint208Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes26Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes26, uint) {\\n    (uint208 ret, uint nextOffset) = asUint208Unchecked(encoded, offset);\\n    return (bytes26(ret), nextOffset);\\n  }\\n\\n  function asBytes26(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes26, uint) {\\n    (uint208 ret, uint nextOffset) = asUint208(encoded, offset);\\n    return (bytes26(ret), nextOffset);\\n  }\\n\\n  function asUint216Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint216 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 27)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint216(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint216 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint216Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes27Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes27, uint) {\\n    (uint216 ret, uint nextOffset) = asUint216Unchecked(encoded, offset);\\n    return (bytes27(ret), nextOffset);\\n  }\\n\\n  function asBytes27(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes27, uint) {\\n    (uint216 ret, uint nextOffset) = asUint216(encoded, offset);\\n    return (bytes27(ret), nextOffset);\\n  }\\n\\n  function asUint224Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint224 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 28)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint224(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint224 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint224Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes28Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes28, uint) {\\n    (uint224 ret, uint nextOffset) = asUint224Unchecked(encoded, offset);\\n    return (bytes28(ret), nextOffset);\\n  }\\n\\n  function asBytes28(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes28, uint) {\\n    (uint224 ret, uint nextOffset) = asUint224(encoded, offset);\\n    return (bytes28(ret), nextOffset);\\n  }\\n\\n  function asUint232Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint232 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 29)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint232(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint232 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint232Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes29Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes29, uint) {\\n    (uint232 ret, uint nextOffset) = asUint232Unchecked(encoded, offset);\\n    return (bytes29(ret), nextOffset);\\n  }\\n\\n  function asBytes29(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes29, uint) {\\n    (uint232 ret, uint nextOffset) = asUint232(encoded, offset);\\n    return (bytes29(ret), nextOffset);\\n  }\\n\\n  function asUint240Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint240 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 30)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint240(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint240 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint240Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes30Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes30, uint) {\\n    (uint240 ret, uint nextOffset) = asUint240Unchecked(encoded, offset);\\n    return (bytes30(ret), nextOffset);\\n  }\\n\\n  function asBytes30(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes30, uint) {\\n    (uint240 ret, uint nextOffset) = asUint240(encoded, offset);\\n    return (bytes30(ret), nextOffset);\\n  }\\n\\n  function asUint248Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint248 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 31)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint248(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint248 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint248Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes31Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes31, uint) {\\n    (uint248 ret, uint nextOffset) = asUint248Unchecked(encoded, offset);\\n    return (bytes31(ret), nextOffset);\\n  }\\n\\n  function asBytes31(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes31, uint) {\\n    (uint248 ret, uint nextOffset) = asUint248(encoded, offset);\\n    return (bytes31(ret), nextOffset);\\n  }\\n\\n  function asUint256Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint256 ret, uint nextOffset) {\\n    assembly (\\\"memory-safe\\\") {\\n      nextOffset := add(offset, 32)\\n      ret := mload(add(encoded, nextOffset))\\n    }\\n    return (ret, nextOffset);\\n  }\\n\\n  function asUint256(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (uint256 ret, uint nextOffset) {\\n    (ret, nextOffset) = asUint256Unchecked(encoded, offset);\\n    checkBound(nextOffset, encoded.length);\\n  }\\n\\n  function asBytes32Unchecked(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes32, uint) {\\n    (uint256 ret, uint nextOffset) = asUint256Unchecked(encoded, offset);\\n    return (bytes32(ret), nextOffset);\\n  }\\n\\n  function asBytes32(\\n    bytes memory encoded,\\n    uint offset\\n  ) internal pure returns (bytes32, uint) {\\n    (uint256 ret, uint nextOffset) = asUint256(encoded, offset);\\n    return (bytes32(ret), nextOffset);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidity-parser/=node_modules/@solidity-parser/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"truffle/=node_modules/truffle/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBeOwnerOrPricingWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBePendingOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"CallerNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIdIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"exceedingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumBudget\",\"type\":\"uint256\"}],\"name\":\"ExceedsMaximumBudget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedToInitializeImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasPriceIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImplementationAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimitCost\",\"type\":\"uint256\"}],\"name\":\"MaxRefundGreaterThanGasLimitCost\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimitCost\",\"type\":\"uint256\"}],\"name\":\"MaxRefundGreaterThanGasLimitCostOnSourceChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeCurrencyPriceIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"}],\"name\":\"PriceIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"expectedVersion\",\"type\":\"uint8\"}],\"name\":\"UnexpectedExecutionParamsVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"UnsupportedExecutionParamsVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongChainId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buffer\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bufferDenominator\",\"type\":\"uint16\"}],\"name\":\"AssetConversionBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"ChainSupportUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Gas\",\"name\":\"oldGasOverhead\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"Gas\",\"name\":\"newGasOverhead\",\"type\":\"uint256\"}],\"name\":\"DeliverGasOverheadUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RewardAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAddress\",\"type\":\"bytes32\"}],\"name\":\"TargetChainAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coreRelayer\",\"type\":\"address\"}],\"name\":\"WormholeRelayerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"assetConversionBuffer\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buffer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bufferDenominator\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipTransferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"deliverGasOverhead\",\"outputs\":[{\"internalType\":\"Gas\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"gasPrice\",\"outputs\":[{\"internalType\":\"GasPrice\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"getTargetChainAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryProviderAddress\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"}],\"name\":\"isMessageKeyTypeSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"maximumBudget\",\"outputs\":[{\"internalType\":\"TargetNative\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"nativeCurrencyPrice\",\"outputs\":[{\"internalType\":\"WeiPrice\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"LocalNative\",\"name\":\"currentChainAmount\",\"type\":\"uint256\"}],\"name\":\"quoteAssetConversion\",\"outputs\":[{\"internalType\":\"TargetNative\",\"name\":\"targetChainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"quoteDeliveryOverhead\",\"outputs\":[{\"internalType\":\"LocalNative\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"TargetNative\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParams\",\"type\":\"bytes\"}],\"name\":\"quoteDeliveryPrice\",\"outputs\":[{\"internalType\":\"LocalNative\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionInfo\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"Gas\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"TargetNative\",\"name\":\"receiverValue\",\"type\":\"uint256\"}],\"name\":\"quoteEvmDeliveryPrice\",\"outputs\":[{\"internalType\":\"LocalNative\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"GasPrice\",\"name\":\"targetChainRefundPerUnitGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"Gas\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"quoteGasCost\",\"outputs\":[{\"internalType\":\"LocalNative\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"quoteGasPrice\",\"outputs\":[{\"internalType\":\"GasPrice\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"thisRelayerChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"submitOwnershipTransferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"targetChainAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buffer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bufferDenominator\",\"type\":\"uint16\"}],\"name\":\"updateAssetConversionBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buffer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bufferDenominator\",\"type\":\"uint16\"}],\"internalType\":\"struct DeliveryProviderStructs.AssetConversionBufferUpdate[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"updateAssetConversionBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"updateAssetConversionBuffer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateDeliverGasOverhead\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updatePrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateTargetChainAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateMaximumBudget\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateSupportedChain\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buffer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bufferDenominator\",\"type\":\"uint16\"},{\"internalType\":\"Gas\",\"name\":\"newGasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"GasPrice\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"WeiPrice\",\"name\":\"nativeCurrencyPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"targetChainAddress\",\"type\":\"bytes32\"},{\"internalType\":\"Wei\",\"name\":\"maximumTotalBudget\",\"type\":\"uint256\"}],\"internalType\":\"struct DeliveryProviderStructs.Update[]\",\"name\":\"updates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"updateWormholeRelayer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateRewardAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateSupportedKeyTypes\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"coreRelayer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supportedKeyTypesBitmap\",\"type\":\"uint256\"}],\"internalType\":\"struct DeliveryProviderStructs.CoreConfig\",\"name\":\"coreConfig\",\"type\":\"tuple\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"Gas\",\"name\":\"newGasOverhead\",\"type\":\"uint256\"}],\"name\":\"updateDeliverGasOverhead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"Gas\",\"name\":\"newGasOverhead\",\"type\":\"uint256\"}],\"internalType\":\"struct DeliveryProviderStructs.DeliverGasOverheadUpdate[]\",\"name\":\"overheadUpdates\",\"type\":\"tuple[]\"}],\"name\":\"updateDeliverGasOverheads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"Wei\",\"name\":\"maximumTotalBudget\",\"type\":\"uint256\"}],\"name\":\"updateMaximumBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"Wei\",\"name\":\"maximumTotalBudget\",\"type\":\"uint256\"}],\"internalType\":\"struct DeliveryProviderStructs.MaximumBudgetUpdate[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"updateMaximumBudgets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"updateChainId\",\"type\":\"uint16\"},{\"internalType\":\"GasPrice\",\"name\":\"updateGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"WeiPrice\",\"name\":\"updateNativeCurrencyPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"GasPrice\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"WeiPrice\",\"name\":\"nativeCurrencyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct DeliveryProviderStructs.UpdatePrice[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"updatePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricingWallet\",\"type\":\"address\"}],\"name\":\"updatePricingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"updateSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"internalType\":\"struct DeliveryProviderStructs.SupportedChainUpdate[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"updateSupportedChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"updateSupportedMessageKeyTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"newAddress\",\"type\":\"bytes32\"}],\"name\":\"updateTargetChainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetChainAddress\",\"type\":\"bytes32\"}],\"internalType\":\"struct DeliveryProviderStructs.TargetChainUpdate[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"updateTargetChainAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateWormholeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"deliveryProviderChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeliveryProviderImplementation", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}