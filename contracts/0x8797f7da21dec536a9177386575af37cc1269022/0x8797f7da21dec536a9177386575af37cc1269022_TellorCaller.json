{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dependencies/TellorCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Interfaces/ITellorCaller.sol\\\";\\r\\nimport \\\"usingtellor/contracts/interface/ITellor.sol\\\";\\r\\n/*\\r\\n* This contract has a single external function that calls Tellor: getTellorCurrentValue().\\r\\n*\\r\\n* The function is called by the thUSD contract PriceFeed.sol. If any of its inner calls to Tellor revert,\\r\\n* this function will revert, and PriceFeed will catch the failure and handle it accordingly.\\r\\n*\\r\\n* The function comes from Tellor's own wrapper contract, 'UsingTellor.sol' and \\r\\n* an example of how to integrate the Tellor oracle into a Liquity-like system `TellorCaller.col`:\\r\\n* https://github.com/tellor-io/usingtellor/blob/master/contracts/UsingTellor.sol\\r\\n* https://github.com/tellor-io/tellor-caller-liquity/blob/main/contracts/TellorCaller.sol\\r\\n*\\r\\n*/\\r\\ncontract TellorCaller is ITellorCaller {\\r\\n\\r\\n    uint256 constant public DISPUTE_DELAY = 15 minutes; // 15 minutes delay\\r\\n\\r\\n    ITellor public immutable tellor;\\r\\n    bytes32 public immutable queryId;\\r\\n\\r\\n    uint256 public lastStoredTimestamp;\\r\\n    uint256 public lastStoredPrice;\\r\\n\\r\\n    /**\\r\\n     * @param _tellorMasterAddress Address of Tellor contract\\r\\n     * @param _queryId Pre-calculated hash of query. See https://queryidbuilder.herokuapp.com/spotprice\\r\\n     */\\r\\n    constructor (address _tellorMasterAddress, bytes32 _queryId) {\\r\\n        tellor = ITellor(_tellorMasterAddress);\\r\\n        queryId = _queryId;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev Allows the user to get the latest value for the requestId specified\\r\\n    * @return ifRetrieve bool true if it is able to retrieve a value, the value, and the value's timestamp\\r\\n    * @return value the value retrieved\\r\\n    * @return _timestampRetrieved the value's timestamp\\r\\n    */\\r\\n    function getTellorCurrentValue()\\r\\n        external\\r\\n        override\\r\\n        returns (\\r\\n            bool ifRetrieve,\\r\\n            uint256 value,\\r\\n            uint256 _timestampRetrieved\\r\\n        )\\r\\n    {\\r\\n        // retrieve most recent value from those older than DISPUTE_DELAY for a specific queryId. \\r\\n        // The time buffer allows time for a bad value to be disputed\\r\\n        (, bytes memory data, uint256 timestamp) = \\r\\n            tellor.getDataBefore(queryId, block.timestamp - DISPUTE_DELAY);\\r\\n        uint256 _value = abi.decode(data, (uint256));\\r\\n        if (timestamp == 0 || _value == 0) return (false, _value, timestamp);\\r\\n        if (timestamp > lastStoredTimestamp) {\\r\\n            lastStoredTimestamp = timestamp;\\r\\n            lastStoredPrice = _value;\\r\\n            return (true, _value, timestamp);\\r\\n        } else {\\r\\n            return (true, lastStoredPrice, lastStoredTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITellorCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ITellorCaller {\\r\\n    function getTellorCurrentValue() external returns (bool, uint256, uint256);\\r\\n}\"\r\n    },\r\n    \"usingtellor/contracts/interface/ITellor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITellor {\\n    //Controller\\n    function addresses(bytes32) external view returns (address);\\n\\n    function uints(bytes32) external view returns (uint256);\\n\\n    function burn(uint256 _amount) external;\\n\\n    function changeDeity(address _newDeity) external;\\n\\n    function changeOwner(address _newOwner) external;\\n    function changeUint(bytes32 _target, uint256 _amount) external;\\n\\n    function migrate() external;\\n\\n    function mint(address _reciever, uint256 _amount) external;\\n\\n    function init() external;\\n\\n    function getAllDisputeVars(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bool,\\n            bool,\\n            bool,\\n            address,\\n            address,\\n            address,\\n            uint256[9] memory,\\n            int256\\n        );\\n\\n    function getDisputeIdByDisputeHash(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLastNewValueById(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function isMigrated(address _addy) external view returns (bool);\\n\\n    function allowance(address _user, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowedToTrade(address _user, uint256 _amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function approveAndTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function balanceOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address _to, uint256 _amount)\\n        external\\n        returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool success);\\n\\n    function depositStake() external;\\n\\n    function requestStakingWithdraw() external;\\n\\n    function withdrawStake() external;\\n\\n    function changeStakingStatus(address _reporter, uint256 _status) external;\\n\\n    function slashReporter(address _reporter, address _disputer) external;\\n\\n    function getStakerInfo(address _staker)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNewCurrentVariables()\\n        external\\n        view\\n        returns (\\n            bytes32 _c,\\n            uint256[5] memory _r,\\n            uint256 _d,\\n            uint256 _t\\n        );\\n\\n    function getNewValueCountbyQueryId(bytes32 _queryId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    //Governance\\n    enum VoteResult {\\n        FAILED,\\n        PASSED,\\n        INVALID\\n    }\\n\\n    function setApprovedFunction(bytes4 _func, bool _val) external;\\n\\n    function beginDispute(bytes32 _queryId, uint256 _timestamp) external;\\n\\n    function delegate(address _delegate) external;\\n\\n    function delegateOfAt(address _user, uint256 _blockNumber)\\n        external\\n        view\\n        returns (address);\\n\\n    function executeVote(uint256 _disputeId) external;\\n\\n    function proposeVote(\\n        address _contract,\\n        bytes4 _function,\\n        bytes calldata _data,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function tallyVotes(uint256 _disputeId) external;\\n\\n    function governance() external view returns (address);\\n\\n    function updateMinDisputeFee() external;\\n\\n    function verify() external pure returns (uint256);\\n\\n    function vote(\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function voteFor(\\n        address[] calldata _addys,\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function getDelegateInfo(address _holder)\\n        external\\n        view\\n        returns (address, uint256);\\n\\n    function isFunctionApproved(bytes4 _func) external view returns (bool);\\n\\n    function isApprovedGovernanceContract(address _contract)\\n        external\\n        returns (bool);\\n\\n    function getVoteRounds(bytes32 _hash)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getVoteCount() external view returns (uint256);\\n\\n    function getVoteInfo(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256[9] memory,\\n            bool[2] memory,\\n            VoteResult,\\n            bytes memory,\\n            bytes4,\\n            address[2] memory\\n        );\\n\\n    function getDisputeInfo(uint256 _disputeId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory,\\n            address\\n        );\\n\\n    function getOpenDisputesOnId(bytes32 _queryId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function didVote(uint256 _disputeId, address _voter)\\n        external\\n        view\\n        returns (bool);\\n\\n    //Oracle\\n    function getReportTimestampByIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReportingLock() external view returns (uint256);\\n\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (address);\\n\\n    function reportingLock() external view returns (uint256);\\n\\n    function removeValue(bytes32 _queryId, uint256 _timestamp) external;\\n    function getTipsByUser(address _user) external view returns(uint256);\\n    function tipQuery(bytes32 _queryId, uint256 _tip, bytes memory _queryData) external;\\n    function submitValue(bytes32 _queryId, bytes calldata _value, uint256 _nonce, bytes memory _queryData) external;\\n    function burnTips() external;\\n\\n    function changeReportingLock(uint256 _newReportingLock) external;\\n    function getReportsSubmittedByAddress(address _reporter) external view returns(uint256);\\n    function changeTimeBasedReward(uint256 _newTimeBasedReward) external;\\n    function getReporterLastTimestamp(address _reporter) external view returns(uint256);\\n    function getTipsById(bytes32 _queryId) external view returns(uint256);\\n    function getTimeBasedReward() external view returns(uint256);\\n    function getTimestampCountById(bytes32 _queryId) external view returns(uint256);\\n    function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns(uint256);\\n    function getCurrentReward(bytes32 _queryId) external view returns(uint256, uint256);\\n    function getCurrentValue(bytes32 _queryId) external view returns(bytes memory);\\n    function getDataBefore(bytes32 _queryId, uint256 _timestamp) external view returns(bool _ifRetrieve, bytes memory _value, uint256 _timestampRetrieved);\\n    function getTimeOfLastNewValue() external view returns(uint256);\\n    function depositStake(uint256 _amount) external;\\n    function requestStakingWithdraw(uint256 _amount) external;\\n\\n    //Test functions\\n    function changeAddressVar(bytes32 _id, address _addy) external;\\n\\n    //parachute functions\\n    function killContract() external;\\n\\n    function migrateFor(address _destination, uint256 _amount) external;\\n\\n    function rescue51PercentAttack(address _tokenHolder) external;\\n\\n    function rescueBrokenDataReporting() external;\\n\\n    function rescueFailedUpdate() external;\\n\\n    //Tellor 360\\n    function addStakingRewards(uint256 _amount) external;\\n\\n    function _sliceUint(bytes memory _b)\\n        external\\n        pure\\n        returns (uint256 _number);\\n\\n    function claimOneTimeTip(bytes32 _queryId, uint256[] memory _timestamps)\\n        external;\\n\\n    function claimTip(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256[] memory _timestamps\\n    ) external;\\n\\n    function fee() external view returns (uint256);\\n\\n    function feedsWithFunding(uint256) external view returns (bytes32);\\n\\n    function fundFeed(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256 _amount\\n    ) external;\\n\\n    function getCurrentFeeds(bytes32 _queryId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getCurrentTip(bytes32 _queryId) external view returns (uint256);\\n\\n    function getDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved);\\n\\n    function getDataFeed(bytes32 _feedId)\\n        external\\n        view\\n        returns (Autopay.FeedDetails memory);\\n\\n    function getFundedFeeds() external view returns (bytes32[] memory);\\n\\n    function getFundedQueryIds() external view returns (bytes32[] memory);\\n\\n    function getIndexForDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool _found, uint256 _index);\\n\\n    function getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool _found, uint256 _index);\\n\\n    function getMultipleValuesBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp,\\n        uint256 _maxAge,\\n        uint256 _maxCount\\n    )\\n        external\\n        view\\n        returns (uint256[] memory _values, uint256[] memory _timestamps);\\n\\n    function getPastTipByIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (Autopay.Tip memory);\\n\\n    function getPastTipCount(bytes32 _queryId) external view returns (uint256);\\n\\n    function getPastTips(bytes32 _queryId)\\n        external\\n        view\\n        returns (Autopay.Tip[] memory);\\n\\n    function getQueryIdFromFeedId(bytes32 _feedId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getRewardAmount(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256[] memory _timestamps\\n    ) external view returns (uint256 _cumulativeReward);\\n\\n    function getRewardClaimedStatus(\\n        bytes32 _feedId,\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (bool);\\n\\n    function getTipsByAddress(address _user) external view returns (uint256);\\n\\n    function isInDispute(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bool);\\n\\n    function queryIdFromDataFeedId(bytes32) external view returns (bytes32);\\n\\n    function queryIdsWithFunding(uint256) external view returns (bytes32);\\n\\n    function queryIdsWithFundingIndex(bytes32) external view returns (uint256);\\n\\n    function setupDataFeed(\\n        bytes32 _queryId,\\n        uint256 _reward,\\n        uint256 _startTime,\\n        uint256 _interval,\\n        uint256 _window,\\n        uint256 _priceThreshold,\\n        uint256 _rewardIncreasePerSecond,\\n        bytes memory _queryData,\\n        uint256 _amount\\n    ) external;\\n\\n    function tellor() external view returns (address);\\n\\n    function tip(\\n        bytes32 _queryId,\\n        uint256 _amount,\\n        bytes memory _queryData\\n    ) external;\\n\\n    function tips(bytes32, uint256)\\n        external\\n        view\\n        returns (uint256 amount, uint256 timestamp);\\n\\n    function token() external view returns (address);\\n\\n    function userTipsTotal(address) external view returns (uint256);\\n\\n    function valueFor(bytes32 _id)\\n        external\\n        view\\n        returns (\\n            int256 _value,\\n            uint256 _timestamp,\\n            uint256 _statusCode\\n        );\\n}\\n\\ninterface Autopay {\\n    struct FeedDetails {\\n        uint256 reward;\\n        uint256 balance;\\n        uint256 startTime;\\n        uint256 interval;\\n        uint256 window;\\n        uint256 priceThreshold;\\n        uint256 rewardIncreasePerSecond;\\n        uint256 feedsWithFundingIndex;\\n    }\\n\\n    struct Tip {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n    function getStakeAmount() external view returns(uint256);\\n    function stakeAmount() external view returns(uint256);\\n    function token() external view returns(address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorMasterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DISPUTE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTellorCurrentValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ifRetrieve\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStoredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStoredTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TellorCaller", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000d9157453e2668b2fc45b7a803d3fef3642430cc083a7f3d48786ac2667503a61e8c415438ed2922eb86a2906e4ee66d9a2ce4992", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}