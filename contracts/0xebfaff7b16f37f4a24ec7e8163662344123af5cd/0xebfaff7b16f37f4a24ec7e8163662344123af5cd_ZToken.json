{"SourceCode": "/**\r\n *Submitted for verification at PolygonScan.com on 2023-06-28\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: deflationary/contracts/Vault.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract Vault {\r\n    address public _owner;\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function deposit() public payable {}\r\n    \r\n    // function withdraw(uint256 amount) public {\r\n    //     require(msg.sender == owner, \"Only the owner can withdraw\");\r\n    //     require(address(this).balance >= amount, \"Insufficient balance\");\r\n        \r\n    //     payable(msg.sender).transfer(amount);\r\n    // }\r\n}\r\n// File: deflationary/contracts/interfaces/ISaltzYard.sol\r\n\r\npragma solidity ^0.8.9;\r\ninterface ISaltzYard {\r\n    \r\n    function lastTimeRewardApplicable() external view returns (uint);\r\n\r\n    function rewardPerToken() external view returns (uint);\r\n\r\n    function stake(uint _amount) external ;\r\n    \r\n    function withdraw(uint _amount) external ;\r\n\r\n    function earned(address _account) external view returns (uint) ;\r\n\r\n    function getReward() external  ;\r\n    \r\n    function setRewardsDuration(uint _duration) external ;\r\n\r\n    function notifyRewardAmount( uint _amount ) external ;\r\n\r\n}\r\n// File: deflationary/contracts/SaltsToken.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n// import \"./RewardsWallet.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n// interface iSaltYard {\r\n//     function addRewards() external payable;\r\n//     function getAddress() external view returns (address);\r\n// }\r\n\r\n//TODO: Remove this interface and use reward wallet.\r\ncontract ZToken is Context, IERC20, Ownable, Vault {\r\n\r\n    string public name = \"Z Token\";\r\n    string public symbol = \"Z\";\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public currentSupply;\r\n    uint256 public transactionCount;\r\n    uint256 public totalBurnt;\r\n    uint256 public totalRewardsTillDate;\r\n\r\n    //RewardsWallet rewardsWallet;\r\n\r\n    address public vault;\r\n    address public masterchef;\r\n    ISaltzYard IsaltzYard;\r\n    address saltzYard;\r\n    address public devWallet;\r\n    address public rewardWzxallet;\r\n\r\n    address[] public users;\r\n\r\n    struct ValuesOfAmount {\r\n        uint256 amount;\r\n        uint256 whaleFee;\r\n        uint256 totalTax;\r\n        uint256 transferAmount;\r\n    }\r\n\r\n    mapping(address => bool) private isExcludedFromFee;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => address) public parent;\r\n    mapping(address => bool) public isRegistered;\r\n    mapping(uint8 => uint16) public commision; // for referals\r\n\r\n    // address where burned tokens sent to, No one have access to this address\r\n    address private constant burnAccount =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    // 10% tax on every transfer\r\n    uint16 private totalTax = 1000;\r\n\r\n    // percentage of totalTax(after referrals distributed , if any) that goes into burning mechanism\r\n    uint16 private taxBurn = 4000;\r\n\r\n    // percentage of transaction redistributed to all holders\r\n    uint16 private taxReward = 3500;\r\n\r\n    // percentage of transaction goes to developers\r\n    uint16 private taxDev = 2500;\r\n\r\n    event Taxes(uint256 burnTax, uint256 devTax, uint256 rewardstax);\r\n    event UserRegistered(\r\n        address indexed user,\r\n        address indexed referer,\r\n        uint256 timestamp\r\n    );\r\n    event RefTx(uint8 refIndex, address referer, uint256 amount);\r\n\r\n    constructor(uint256 _totalSupply) {\r\n        totalSupply = _totalSupply * (10 ** decimals);\r\n        vault = address(new Vault()); \r\n        _balances[owner()] = totalSupply;\r\n        currentSupply = totalSupply;\r\n        excludeAccountFromFee(owner());\r\n        commision[0] = 500;\r\n        commision[1] = 300;\r\n        commision[2] = 200;\r\n        commision[3] = 100;\r\n        commision[4] = 50;\r\n    }\r\n\r\n    function getVault() public view returns(address){\r\n        return vault;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Excludes an account from fee\r\n    function excludeAccountFromFee(address account) internal {\r\n        require(!isExcludedFromFee[account], \"Account is already excluded.\");\r\n        isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        ValuesOfAmount memory values = getValues(\r\n            amount,\r\n            isExcludedFromFee[sender],\r\n            isExcludedFromFee[recipient]\r\n        );\r\n\r\n        _balances[sender] -= values.amount;\r\n        _balances[recipient] += values.transferAmount;\r\n\r\n        emit Transfer(sender, recipient, values.transferAmount);\r\n\r\n        if (!isExcludedFromFee[sender] && !isExcludedFromFee[recipient]) {\r\n            _afterTokenTransfer(values, sender);\r\n        }\r\n        transactionCount++;\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        ValuesOfAmount memory values,\r\n        address sender\r\n    ) private {\r\n        uint8 i = 0;\r\n        address parentAddress = getParent(sender);\r\n        while (parentAddress != address(0) && i <= 4) {\r\n            uint256 tAmount = calculateTax(values.totalTax, commision[i]);\r\n            _balances[parentAddress] += tAmount;\r\n            values.totalTax -= tAmount;\r\n            emit RefTx(i, parentAddress, tAmount);\r\n            parentAddress = getParent(parentAddress);\r\n            i++;\r\n        }\r\n\r\n        uint256 BurnFee = calculateTax(values.totalTax, taxBurn);\r\n        uint256 RewardFee = calculateTax(values.totalTax, taxReward);\r\n        uint256 DevFee = calculateTax(values.totalTax, taxDev);\r\n\r\n        // burn\r\n        _balances[address(this)] += BurnFee;\r\n        _approve(address(this), msg.sender, BurnFee);\r\n        burnFrom(address(this), BurnFee);\r\n\r\n        if (transactionCount % 100 == 0) {\r\n            uint _amount = balanceOf(vault);\r\n            IsaltzYard.notifyRewardAmount(_amount);\r\n        }\r\n        moveSaltzToRewardWallet(RewardFee);\r\n        _balances[devWallet] += DevFee;\r\n\r\n        emit Taxes(BurnFee, DevFee, RewardFee);\r\n    }\r\n\r\n    function moveSaltzToRewardWallet(uint256 rewards) internal {\r\n        //TODO: call rewardswallet storeRewards method. And add the token in rewards wallet address.\r\n        if (vault != address(0)) {\r\n            _balances[vault] += rewards;\r\n            allowance[vault][saltzYard] += rewards;\r\n        } else {\r\n            _balances[devWallet] += rewards;\r\n        }\r\n    }\r\n\r\n    //Adding yard address\r\n    function addYard(address _yard) external onlyOwner {\r\n        saltzYard = _yard;\r\n        IsaltzYard = ISaltzYard(_yard);\r\n    }\r\n\r\n    //Transfer function to send reward to yard\r\n    function transferRewardToYard() external onlyOwner {\r\n        uint _amount = balanceOf(vault);\r\n        IsaltzYard.notifyRewardAmount(_amount);\r\n    }\r\n\r\n    function getParent(address user) private view returns (address referer) {\r\n        return parent[user];\r\n    }\r\n\r\n    function registerUser(address _user, address _referer) public {\r\n        require(isRegistered[_user] == false);\r\n        _register(_user, _referer);\r\n        emit UserRegistered(_user, _referer, block.timestamp);\r\n    }\r\n\r\n    function _register(address _user, address _referer) internal {\r\n        parent[_user] = _referer;\r\n        isRegistered[_user] = true;\r\n        users.push(_user);\r\n    }\r\n\r\n    function getValues(\r\n        uint256 amount,\r\n        bool deductTransferFee,\r\n        bool sender\r\n    ) private view returns (ValuesOfAmount memory) {\r\n        ValuesOfAmount memory values;\r\n        values.amount = amount;\r\n        if (!deductTransferFee && !sender) {\r\n            // calculate fee\r\n            uint16 taxWhale_ = taxWhale(values.amount);\r\n            values.whaleFee = calculateTax(values.amount, taxWhale_);\r\n            uint256 tempTotalTax = calculateTax(\r\n                (values.amount - values.whaleFee),\r\n                totalTax\r\n            );\r\n            values.totalTax = tempTotalTax + values.whaleFee;\r\n            values.transferAmount = values.amount - values.totalTax;\r\n        } else {\r\n            values.whaleFee = 0;\r\n            values.totalTax = 0;\r\n            values.transferAmount = values.amount;\r\n        }\r\n        return values;\r\n    }\r\n\r\n    // caclcutes tax. If tax is 10% the uint16 tax should be 1000 - we devide with 10 ** 4 instead of 10 ** 2\r\n    function calculateTax(\r\n        uint256 amount,\r\n        uint16 tax\r\n    ) private pure returns (uint256) {\r\n        return (amount * tax) / (10 ** 4);\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(spender != address(0));\r\n        allowance[account][spender] += amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        require(_value <= balanceOf(_from), \"insufficient balance\");\r\n        require(\r\n            _value <= allowance[_from][msg.sender],\r\n            \"insufficient allowance\"\r\n        );\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != burnAccount);\r\n        require(balanceOf(account) >= amount);\r\n        _balances[account] -= amount;\r\n        _balances[burnAccount] += amount;\r\n        currentSupply -= amount;\r\n        totalBurnt += amount;\r\n        emit Burn(account, amount, block.timestamp);\r\n        emit Transfer(account, burnAccount, amount);\r\n    }\r\n\r\n    event Burn(address account, uint256 amount, uint256 timestamp);\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public {\r\n        require(\r\n            allowance[account][msg.sender] >= amount,\r\n            \"insufficient allowance\"\r\n        );\r\n        _approve(account, msg.sender, allowance[account][msg.sender] - amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    // calculates whale tax depending on the amount\r\n    function taxWhale(uint256 _amount) internal view returns (uint16) {\r\n        uint256 i = (_amount * 100) / currentSupply;\r\n        uint16 whaleTax;\r\n        if (i < 1) {\r\n            whaleTax = 0;\r\n        } else if (i >= 1 && i < 2) {\r\n            whaleTax = 500;\r\n        } else if (i >= 2 && i < 3) {\r\n            whaleTax = 1000;\r\n        } else if (i >= 3 && i < 4) {\r\n            whaleTax = 1500;\r\n        } else if (i >= 4 && i < 5) {\r\n            whaleTax = 2000;\r\n        } else if (i >= 5 && i < 6) {\r\n            whaleTax = 2500;\r\n        } else if (i >= 6 && i < 7) {\r\n            whaleTax = 3000;\r\n        } else if (i >= 7 && i < 8) {\r\n            whaleTax = 3500;\r\n        } else if (i >= 8 && i < 9) {\r\n            whaleTax = 4000;\r\n        } else if (i >= 9 && i < 10) {\r\n            whaleTax = 4500;\r\n        } else if (i >= 10) {\r\n            whaleTax = 5000;\r\n        }\r\n        return whaleTax;\r\n    }\r\n\r\n    //////////////// View Functions /////////////////\r\n\r\n    function CurrentSupply() external view returns (uint256) {\r\n        return currentSupply;\r\n    }\r\n\r\n    // function setRewardsWallet(\r\n    //     address _rewardsContractAddress\r\n    // ) public onlyOwner {\r\n    //     rewardsWallet = RewardsWallet(_rewardsContractAddress);\r\n    //     excludeAccountFromFee(_rewardsContractAddress);\r\n    // }\r\n\r\n    function BurnedTokens() external view returns (uint256) {\r\n        return totalBurnt;\r\n    }\r\n\r\n    function setMasterchef(address _masterchef) external {\r\n        masterchef = _masterchef;\r\n    }\r\n\r\n    function burnMasterchef(address to, uint256 amount) external {\r\n        require(msg.sender == masterchef);\r\n        _burn(to, amount);\r\n    }\r\n\r\n    function mintMasterchef(address to, uint256 amount) external {\r\n        require(msg.sender == masterchef);\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        //_beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        //_afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    // sets developer wallet address for receiving fee\r\n    function setDevWallet(address _devWallet) public onlyOwner {\r\n        devWallet = _devWallet;\r\n        excludeAccountFromFee(devWallet);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"refIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardstax\",\"type\":\"uint256\"}],\"name\":\"Taxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yard\",\"type\":\"address\"}],\"name\":\"addYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnMasterchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"commision\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMasterchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWzxallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterchef\",\"type\":\"address\"}],\"name\":\"setMasterchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsTillDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardToYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000002710", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa8099f612973e03e28a44fe8bca099bb5fb249f776567b8450464e89ff8f9b0"}