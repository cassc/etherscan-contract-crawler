{"SourceCode": "/**                                             \r\n _____                                                                                                                                                                                                               \r\n|_   _|                                                          _                                                                                                                                                   \r\n  | | _ __ ___  _ __    _ __ ___   ___  ___ ___  __ _  __ _  ___(_)                                                                                                                                                  \r\n  | || '_ ` _ \\| '_ \\  | '_ ` _ \\ / _ \\/ __/ __|/ _` |/ _` |/ _ \\                                                                                                                                                    \r\n _| || | | | | | |_) | | | | | | |  __/\\__ \\__ \\ (_| | (_| |  __/_                                                                                                                                                   \r\n \\___/_| |_| |_| .__/  |_| |_| |_|\\___||___/___/\\__,_|\\__, |\\___(_)                                                                                                                                                  \r\n               | |                                     __/ |                                                                                                                                                         \r\n               |_|                                    |___/                                                                                                                                                          \r\n _____ _     _       _                         _           _                     _           _     _           __                 _____            _ _         _ _                                        _          \r\n|_   _| |   (_)     (_)                       | |         | |                   (_)         | |   | |         / _|               |_   _|          | | |       | | |                                      | |         \r\n  | | | |__  _ ___   _ ___   _ __ ___  _   _  | | __ _ ___| |_   _ __  _ __ ___  _  ___  ___| |_  | |__   ___| |_ ___  _ __ ___    | |    ___  ___| | |   __ _| | |  _ __ ___  _   _    __ _ ___ ___  ___| |_ ___    \r\n  | | | '_ \\| / __| | / __| | '_ ` _ \\| | | | | |/ _` / __| __| | '_ \\| '__/ _ \\| |/ _ \\/ __| __| | '_ \\ / _ \\  _/ _ \\| '__/ _ \\   | |   / __|/ _ \\ | |  / _` | | | | '_ ` _ \\| | | |  / _` / __/ __|/ _ \\ __/ __|   \r\n  | | | | | | \\__ \\ | \\__ \\ | | | | | | |_| | | | (_| \\__ \\ |_  | |_) | | | (_) | |  __/ (__| |_  | |_) |  __/ || (_) | | |  __/  _| |_  \\__ \\  __/ | | | (_| | | | | | | | | | |_| | | (_| \\__ \\__ \\  __/ |_\\__ \\_  \r\n  \\_/ |_| |_|_|___/ |_|___/ |_| |_| |_|\\__, | |_|\\__,_|___/\\__| | .__/|_|  \\___/| |\\___|\\___|\\__| |_.__/ \\___|_| \\___/|_|  \\___|  \\___/  |___/\\___|_|_|  \\__,_|_|_| |_| |_| |_|\\__, |  \\__,_|___/___/\\___|\\__|___(_) \r\n                                        __/ |                   | |            _/ |                                                                                             __/ |                                \r\n                                       |___/                    |_|           |__/                                                                                             |___/                                 \r\n______                         _         _____                   _____ _      __                                                                                                                                     \r\n| ___ \\                       | |    _  /  ___|                 /  ___| |    / _|                                                                                                                                    \r\n| |_/ /___  __ _  __ _ _ __ __| |___(_) \\ `--.  __ _ _ __ ___   \\ `--.| |__ | |_                                                                                                                                     \r\n|    // _ \\/ _` |/ _` | '__/ _` / __|    `--. \\/ _` | '_ ` _ \\   `--. \\ '_ \\|  _|                                                                                                                                    \r\n| |\\ \\  __/ (_| | (_| | | | (_| \\__ \\_  /\\__/ / (_| | | | | | | /\\__/ / |_) | |                                                                                                                                      \r\n\\_| \\_\\___|\\__, |\\__,_|_|  \\__,_|___(_) \\____/ \\__,_|_| |_| |_| \\____/|_.__/|_|                                                                                                                                      \r\n            __/ |                                                                                                                                                                                                    \r\n           |___/                                                                    \r\n                                         \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nhttps://t.me/wheresdevgone\r\n*/\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract WhereIsDev is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Where's Dev?\";\r\n    string private constant _symbol = \"FTX \";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 420690000 * 10 ** _decimals;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderCheckpoint;\r\n\r\n    uint256 private _iBuyTax = 25;\r\n    uint256 private _fBuyTax = 2;\r\n    uint256 private _buyTaxLimit = 100;\r\n\r\n    uint256 private _iSellTax = 25;\r\n    uint256 private _fSellTax = 2;\r\n    uint256 private _sellTaxLimit = 100;\r\n\r\n    uint256 private _swapPreventLimit = 15;\r\n    uint256 private _buyCounter = 0;\r\n\r\n    uint256 public maxTxnAmount = 4206900 * 10 ** _decimals;\r\n    uint256 public maxWalletLimit = 4206900 * 10 ** _decimals;\r\n    uint256 public taxSwapThreshold = 8413800 * 10 ** _decimals;\r\n    uint256 public maxTaxSwap = 8413800 * 10 ** _decimals;\r\n\r\n    IDexRouter private router;\r\n    address private pair;\r\n    address payable private feeWallet;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool public transferLimitEnabled = true;\r\n\r\n    event MaxTxnAmountUpdated(uint maxTxnAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        feeWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[feeWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount\r\n                .mul((_buyCounter > _buyTaxLimit) ? _fBuyTax : _iBuyTax)\r\n                .div(100);\r\n\r\n            if (transferLimitEnabled) {\r\n                if (to != address(router) && to != address(pair)) {\r\n                    require(\r\n                        _holderCheckpoint[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderCheckpoint[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (\r\n                from == pair && to != address(router) && !_isExcludedFromFee[to]\r\n            ) {\r\n                require(amount <= maxTxnAmount, \"Exceeds the maxTxnAmount.\");\r\n                require(\r\n                    balanceOf(to) + amount <= maxWalletLimit,\r\n                    \"Exceeds the maxWalletLimit.\"\r\n                );\r\n                _buyCounter++;\r\n            }\r\n\r\n            if (to == pair && from != address(this)) {\r\n                taxAmount = amount\r\n                    .mul((_buyCounter > _sellTaxLimit) ? _fSellTax : _iSellTax)\r\n                    .div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                to == pair &&\r\n                swapEnabled &&\r\n                contractTokenBalance > taxSwapThreshold &&\r\n                _buyCounter > _swapPreventLimit\r\n            ) {\r\n                swapTokensForEth(\r\n                    getMin(amount, getMin(contractTokenBalance, maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0.005 ether) {\r\n                    transferFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function transferFee(uint256 amount) private {\r\n        feeWallet.transfer(amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getMin(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(router), _totalSupply);\r\n        pair = IDexFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(pair).approve(address(router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function clearTransferLimits() external onlyOwner {\r\n        maxTxnAmount = _totalSupply;\r\n        maxWalletLimit = _totalSupply;\r\n        transferLimitEnabled = false;\r\n        emit MaxTxnAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 _iBuy,\r\n        uint256 _fBuy,\r\n        uint256 _buyLimit\r\n    ) external onlyOwner {\r\n        _iBuyTax = _iBuy;\r\n        _fBuyTax = _fBuy;\r\n        _buyTaxLimit = _buyLimit;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 _iSell,\r\n        uint256 _fSell,\r\n        uint256 _sellLimit\r\n    ) external onlyOwner {\r\n        _iSellTax = _iSell;\r\n        _fSellTax = _fSell;\r\n        _sellTaxLimit = _sellLimit;\r\n    }\r\n\r\n    function swapFee() external {\r\n        require(_msgSender() == feeWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            transferFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function removeStuckToken(address _token, uint256 _amount) external {\r\n        require(_msgSender() == feeWallet);\r\n        IERC20(_token).transfer(feeWallet, _amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxnAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxnAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearTransferLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLimit\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WhereIsDev", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://64da17beb31ab930edb8c8f40d06347ea515ec6bf5dd98402db2e1b1fb7f47fe"}