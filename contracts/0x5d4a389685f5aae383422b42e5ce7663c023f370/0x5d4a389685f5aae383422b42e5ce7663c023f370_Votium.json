{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Votium.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Votium\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Votium is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // relevant time constraints\\n    uint256 epochDuration = 86400 * 14; // 2 weeks\\n    uint256 roundDuration = 86400 * 5; // 5 days\\n    uint256 deadlineDuration = 60 * 60 * 6; // 6 hours\\n\\n    mapping(address => bool) public tokenAllowed; // token allow list\\n    mapping(address => bool) public approvedTeam; // for team functions that do not require multi-sig security\\n\\n    address public feeAddress; // address to receive platform fees\\n    uint256 public platformFee = 400; // 4%\\n    uint256 public constant DENOMINATOR = 10000; // denominates weights 10000 = 100%\\n    address public distributor; // address of distributor contract\\n    uint256 private maxMaxPerVote = type(uint256).max/(100000000*10**18); // to prevent overflow when ending round\\n\\n    bool public requireAllowlist = true; // begin with erc20 allow list in effect\\n    bool public allowExclusions = false; // enable ability to exclude addresses\\n\\n    struct Incentive {\\n        address token;\\n        uint256 amount;\\n        uint256 maxPerVote;\\n        uint256 distributed;\\n        uint256 recycled;\\n        address depositor;\\n        address[] excluded; // list of addresses that cannot receive this incentive\\n    }\\n\\n    mapping(uint256 => address[]) public roundGauges; // round => gauge array\\n    mapping(uint256 => mapping(address => bool)) public inRoundGauges; // round => gauge => bool\\n    mapping(uint256 => mapping(address => Incentive[])) public incentives; // round => gauge => incentive array\\n    mapping(uint256 => mapping(address => uint256)) public votesReceived; // round => gauge => votes\\n\\n    mapping(address => uint256) public virtualBalance; // token => amount\\n\\n    uint256 public lastRoundProcessed; // last round that was processed by multi-sig\\n\\n    mapping(address => uint256) private toTransfer; // token => amount\\n    address[] private toTransferList; // list of tokens to transfer, needed for push \\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _approved,\\n        address _approved2,\\n        address _feeAddress,\\n        address _distributor,\\n        address _initialOwner\\n    ) {\\n        approvedTeam[_approved] = true;\\n        approvedTeam[_approved2] = true;\\n        feeAddress = _feeAddress;\\n        distributor = _distributor;\\n        transferOwnership(_initialOwner);\\n        lastRoundProcessed = activeRound() - 1;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function gaugesLength(uint256 _round) public view returns (uint256) {\\n        return roundGauges[_round].length;\\n    }\\n\\n    function incentivesLength(\\n        uint256 _round,\\n        address _gauge\\n    ) public view returns (uint256) {\\n        return incentives[_round][_gauge].length;\\n    }\\n\\n\\n    function currentEpoch() public view returns (uint256) {\\n        return (block.timestamp / epochDuration) * epochDuration;\\n    }\\n\\n    // Display current or next active round\\n    function activeRound() public view returns (uint256) {\\n        if (\\n            block.timestamp < currentEpoch() + roundDuration - deadlineDuration\\n        ) {\\n            return currentEpoch() / epochDuration - 1348; // 1348 is the votium genesis round\\n        } else {\\n            return currentEpoch() / epochDuration - 1347;\\n        }\\n    }\\n\\n    // Include excluded addresses in incentive\\n    function viewIncentive(\\n        uint256 _round,\\n        address _gauge,\\n        uint256 _incentive\\n    ) public view returns (Incentive memory) {\\n        return incentives[_round][_gauge][_incentive];\\n    }\\n\\n    // Deposit vote incentive for a single gauge in a active round with no max and no exclusions -- for gas efficiency\\n    function depositIncentiveSimple(\\n        address _token,\\n        uint256 _amount,\\n        address _gauge\\n    ) public {\\n        _takeDeposit(_token, _amount);\\n        uint256 _round = activeRound();\\n        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);\\n        virtualBalance[_token] += rewardTotal;\\n        incentives[_round][_gauge].push(Incentive({\\n            token: _token,\\n            amount: rewardTotal,\\n            maxPerVote: 0,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: new address[](0)\\n        }));\\n        _maintainGaugeArrays(_round, _gauge);\\n        emit NewIncentive(\\n            incentives[_round][_gauge].length - 1,\\n            _token,\\n            rewardTotal,\\n            _round,\\n            _gauge,\\n            0,\\n            new address[](0),\\n            msg.sender,\\n            false\\n        );\\n    }\\n\\n    function depositIncentive(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _round,\\n        address _gauge,\\n        uint256 _maxPerVote,\\n        address[] calldata _excluded\\n    ) public {\\n        require(_round >= activeRound(), \\\"!roundEnded\\\");\\n        require(_round <= activeRound() + 6, \\\"!farFuture\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n        _takeDeposit(_token, _amount);\\n        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);\\n        virtualBalance[_token] += rewardTotal;\\n        incentives[_round][_gauge].push(Incentive({\\n            token: _token,\\n            amount: rewardTotal,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        }));\\n        _maintainGaugeArrays(_round, _gauge);\\n        emit NewIncentive(\\n            incentives[_round][_gauge].length - 1,\\n            _token,\\n            rewardTotal,\\n            _round,\\n            _gauge,\\n            _maxPerVote,\\n            _excluded,\\n            msg.sender,\\n            false\\n        );\\n    }\\n\\n    // evenly split deposit across a single gauge in multiple rounds\\n    function depositSplitRounds(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _numRounds,\\n        address _gauge,\\n        uint256 _maxPerVote,\\n        address[] calldata _excluded\\n    ) public {\\n        require(_numRounds < 8, \\\"!farFuture\\\");\\n        require(_numRounds > 1, \\\"!numRounds\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n\\n        uint256 totalDeposit = _amount * _numRounds;\\n        _takeDeposit(_token, totalDeposit);\\n        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);\\n        virtualBalance[_token] += rewardTotal * _numRounds;\\n        uint256 round = activeRound();\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: rewardTotal,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        });\\n        for (uint256 i = 0; i < _numRounds; i++) {\\n            incentives[round + i][_gauge].push(incentive);\\n            _maintainGaugeArrays(round + i, _gauge);\\n            emit NewIncentive(\\n                incentives[round + i][_gauge].length - 1,\\n                incentive.token,\\n                rewardTotal,\\n                round + i,\\n                _gauge,\\n                _maxPerVote,\\n                _excluded,\\n                msg.sender,\\n                false\\n            );\\n        }\\n    }\\n\\n    // evenly split deposit across multiple gauges in a single round\\n    function depositSplitGauges(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _round,\\n        address[] calldata _gauges,\\n        uint256 _maxPerVote,\\n        address[] calldata _excluded\\n    ) public {\\n        require(_round >= activeRound(), \\\"!roundEnded\\\");\\n        require(_round <= activeRound() + 6, \\\"!farFuture\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        require(_gauges.length > 1, \\\"!gauges\\\");\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n\\n        uint256 totalDeposit = _amount * _gauges.length;\\n        _takeDeposit(_token, totalDeposit);\\n        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);\\n        virtualBalance[_token] += rewardTotal * _gauges.length;\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: rewardTotal,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        });\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            incentives[_round][_gauges[i]].push(incentive);\\n            uint256 id = incentives[_round][_gauges[i]].length - 1; // stack depth\\n            _maintainGaugeArrays(_round, _gauges[i]);\\n            emit NewIncentive(\\n                id,\\n                incentive.token,\\n                rewardTotal,\\n                _round,\\n                _gauges[i],\\n                _maxPerVote,\\n                _excluded,\\n                msg.sender,\\n                false\\n            );\\n        }\\n    }\\n\\n    // evenly split deposit across multiple gauges in multiple rounds\\n    function depositSplitGaugesRounds(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _numRounds,\\n        address[] memory _gauges,\\n        uint256 _maxPerVote,\\n        address[] memory _excluded\\n    ) public {\\n        require(_numRounds < 8, \\\"!farFuture\\\");\\n        require(_numRounds > 1, \\\"!numRounds\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        require(_gauges.length > 1, \\\"!gauges\\\");\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n\\n        uint256 totalDeposit = _amount * _numRounds * _gauges.length;\\n        _takeDeposit(_token, totalDeposit);\\n        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);\\n        virtualBalance[_token] += rewardTotal * _numRounds * _gauges.length;\\n        uint256 round = activeRound();\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: rewardTotal,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        });\\n        for (uint256 i = 0; i < _numRounds; i++) {\\n            for (uint256 j = 0; j < _gauges.length; j++) {\\n                incentives[round + i][_gauges[j]].push(incentive);\\n                _maintainGaugeArrays(round + i, _gauges[j]);\\n                emit NewIncentive(\\n                    incentives[round + i][_gauges[j]].length - 1,\\n                    incentive.token,\\n                    rewardTotal,\\n                    round + i,\\n                    _gauges[j],\\n                    _maxPerVote,\\n                    _excluded,\\n                    msg.sender,\\n                    false\\n                );\\n            }\\n        }\\n    }\\n\\n    // deposit same token to multiple gauges with different amounts in a single round\\n    function depositUnevenSplitGauges(\\n        address _token,\\n        uint256 _round,\\n        address[] memory _gauges,\\n        uint256[] calldata _amounts,\\n        uint256 _maxPerVote,\\n        address[] calldata _excluded\\n    ) public {\\n        require(_gauges.length == _amounts.length, \\\"!length\\\");\\n        require(_round >= activeRound(), \\\"!roundEnded\\\");\\n        require(_round <= activeRound() + 6, \\\"!farFuture\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n        uint256 totalDeposit;\\n        uint256 rewardsTotal;\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: 0,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        });\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            require(_amounts[i] > 0, \\\"!amount\\\");\\n            totalDeposit += _amounts[i];\\n            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;\\n            incentive.amount = rewardTotal;\\n            rewardsTotal += rewardTotal;\\n            incentives[_round][_gauges[i]].push(incentive);\\n            uint256 id = incentives[_round][_gauges[i]].length - 1; // stack depth\\n            _maintainGaugeArrays(_round, _gauges[i]);\\n            emit NewIncentive(\\n                id,\\n                incentive.token,\\n                rewardTotal,\\n                _round,\\n                _gauges[i],\\n                _maxPerVote,\\n                _excluded,\\n                msg.sender,\\n                false\\n            );\\n        }\\n        _takeDeposit(_token, totalDeposit);\\n        virtualBalance[_token] += rewardsTotal;\\n    }\\n\\n    // deposit same token to multiple gauges with different amounts in active round with no max and no exclusions\\n    function depositUnevenSplitGaugesSimple(\\n        address _token,\\n        address[] memory _gauges,\\n        uint256[] memory _amounts\\n    ) public {\\n        require(_gauges.length == _amounts.length, \\\"!length\\\");\\n        uint256 _round = activeRound();\\n        uint256 totalDeposit;\\n        uint256 rewardsTotal;\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: 0,\\n            maxPerVote: 0,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: new address[](0)\\n        });\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            require(_amounts[i] > 0, \\\"!amount\\\");\\n            totalDeposit += _amounts[i];\\n            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;\\n            incentive.amount = rewardTotal;\\n            rewardsTotal += rewardTotal;\\n            incentives[_round][_gauges[i]].push(incentive);\\n            _maintainGaugeArrays(_round, _gauges[i]);\\n            emit NewIncentive(\\n                incentives[_round][_gauges[i]].length - 1,\\n                _token,\\n                rewardTotal,\\n                _round,\\n                _gauges[i],\\n                0,\\n                new address[](0),\\n                msg.sender,\\n                false\\n            );\\n        }\\n        _takeDeposit(_token, totalDeposit);\\n        virtualBalance[_token] += rewardsTotal;\\n    }\\n\\n    // deposit same token to multiple gauges with different amounts in a single round\\n    function depositUnevenSplitGaugesRounds(\\n        address _token,\\n        uint256 _numRounds,\\n        address[] memory _gauges,\\n        uint256[] memory _amounts,\\n        uint256 _maxPerVote,\\n        address[] calldata _excluded\\n    ) public {\\n        require(_gauges.length == _amounts.length, \\\"!length\\\");\\n        require(_numRounds < 8, \\\"!farFuture\\\");\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        require(_numRounds > 1, \\\"!numRounds\\\");\\n        if(!allowExclusions) { require(_excluded.length == 0, \\\"!excluded\\\"); }\\n        uint256 totalDeposit;\\n        uint256 rewardsTotal;\\n        Incentive memory incentive = Incentive({\\n            token: _token,\\n            amount: 0,\\n            maxPerVote: _maxPerVote,\\n            distributed: 0,\\n            recycled: 0,\\n            depositor: msg.sender,\\n            excluded: _excluded\\n        });\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            require(_amounts[i] > 0, \\\"!amount\\\");\\n            totalDeposit += _amounts[i];\\n            uint256 round = activeRound();\\n            // to prevent rounding issues and potentially failed txs, virtual balance should directly reflect Inventive amount sums\\n            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;\\n            incentive.amount = rewardTotal;\\n            rewardsTotal += rewardTotal * _numRounds;\\n            for (uint256 j = 0; j < _numRounds; j++) {\\n                incentives[round + j][_gauges[i]].push(incentive);\\n                uint256 id = incentives[round + j][_gauges[i]].length - 1; // stack depth\\n                _maintainGaugeArrays(round + j, _gauges[i]);\\n                emit NewIncentive(\\n                    id,\\n                    incentive.token,\\n                    rewardTotal,\\n                    round + j,\\n                    _gauges[i],\\n                    incentive.maxPerVote,\\n                    incentive.excluded,\\n                    msg.sender,\\n                    false\\n                );\\n            }\\n        }\\n        totalDeposit = totalDeposit * _numRounds;\\n        _takeDeposit(_token, totalDeposit);\\n        virtualBalance[_token] += rewardsTotal;\\n    }\\n\\n    function increaseIncentive(\\n        uint256 _round,\\n        address _gauge,\\n        uint256 _incentive,\\n        uint256 _increase,\\n        uint256 _maxPerVote\\n    ) public {\\n        require(_maxPerVote < maxMaxPerVote, \\\"!highMax\\\"); // prevent overflow when ending round\\n        require(\\n            _maxPerVote != incentives[_round][_gauge][_incentive].maxPerVote ||\\n                _increase > 0,\\n            \\\"!change\\\"\\n        );\\n        require(_round >= activeRound(), \\\"!deadline\\\");\\n        require(\\n            incentives[_round][_gauge][_incentive].depositor == msg.sender,\\n            \\\"!depositor\\\"\\n        );\\n        if (_maxPerVote > 0) {\\n            require(\\n                _maxPerVote >=\\n                    incentives[_round][_gauge][_incentive].maxPerVote,\\n                \\\"!increaseOnly\\\"\\n            );\\n            require(\\n                incentives[_round][_gauge][_incentive].maxPerVote != 0,\\n                \\\"!increaseOnly\\\"\\n            );\\n        }\\n        if (_maxPerVote != incentives[_round][_gauge][_incentive].maxPerVote) {\\n            incentives[_round][_gauge][_incentive].maxPerVote = _maxPerVote;\\n        }\\n        uint256 rewardIncrease;\\n        if (_increase > 0) {\\n            _takeDeposit(\\n                incentives[_round][_gauge][_incentive].token,\\n                _increase\\n            );\\n            rewardIncrease =\\n                _increase -\\n                ((_increase * platformFee) / DENOMINATOR);\\n            incentives[_round][_gauge][_incentive].amount += rewardIncrease;\\n            virtualBalance[\\n                incentives[_round][_gauge][_incentive].token\\n            ] += rewardIncrease;\\n        }\\n        emit IncreasedIncentive(\\n            _incentive,\\n            incentives[_round][_gauge][_incentive].token,\\n            incentives[_round][_gauge][_incentive].amount,\\n            rewardIncrease,\\n            _round,\\n            _gauge,\\n            _maxPerVote\\n        );\\n    }\\n\\n    // function for depositor to withdraw unprocessed incentives\\n    // this should only happen if a gauge does not exist or is killed before the round ends\\n    // fees are not returned\\n    function withdrawUnprocessed(\\n        uint256 _round,\\n        address _gauge,\\n        uint256 _incentive\\n    ) public nonReentrant {\\n        require(\\n            _round <= lastRoundProcessed || _round + 3 < activeRound(),\\n            \\\"!roundNotProcessed\\\"\\n        ); // allow 3 rounds for processing before withdraw can be forced\\n        require(\\n            incentives[_round][_gauge][_incentive].depositor == msg.sender,\\n            \\\"!depositor\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].distributed == 0,\\n            \\\"!distributed\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].recycled == 0,\\n            \\\"!recycled\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].amount > 0,\\n            \\\"!zero\\\"\\n        );\\n        uint256 amount = incentives[_round][_gauge][_incentive].amount;\\n        incentives[_round][_gauge][_incentive].amount = 0;\\n        uint256 adjustedAmount = (amount *\\n            IERC20(incentives[_round][_gauge][_incentive].token).balanceOf(\\n                address(this)\\n            )) / virtualBalance[incentives[_round][_gauge][_incentive].token];\\n        amount = amount > adjustedAmount ? adjustedAmount : amount; // use lower amount to avoid over-withdrawal for negative rebase tokens, honeypotting, etc\\n        IERC20(incentives[_round][_gauge][_incentive].token).safeTransfer(\\n            msg.sender,\\n            amount\\n        );\\n        virtualBalance[incentives[_round][_gauge][_incentive].token] -= amount;\\n        emit WithdrawUnprocessed(_incentive, _round, _gauge, amount);\\n    }\\n\\n    // function for depositor to recycle unprocessed incentives instead of withdrawing (maybe gauge was not active yet or was killed and revived)\\n    function recycleUnprocessed(\\n        uint256 _round,\\n        address _gauge,\\n        uint256 _incentive\\n    ) public nonReentrant {\\n        require(_round <= lastRoundProcessed, \\\"!roundNotProcessed\\\");\\n        require(\\n            incentives[_round][_gauge][_incentive].depositor == msg.sender ||\\n                msg.sender == owner(),\\n            \\\"!auth\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].distributed == 0,\\n            \\\"!distributed\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].recycled == 0,\\n            \\\"!recycled\\\"\\n        );\\n        require(\\n            incentives[_round][_gauge][_incentive].amount > 0,\\n            \\\"!zero\\\"\\n        );\\n        Incentive memory original = incentives[_round][_gauge][_incentive];\\n        uint256 currentRound = activeRound();\\n        incentives[currentRound][_gauge].push(original);\\n        _maintainGaugeArrays(currentRound, _gauge);\\n        uint256 id = incentives[currentRound][_gauge].length - 1; // stack depth\\n        incentives[_round][_gauge][_incentive].recycled = original.amount;\\n        emit NewIncentive(id, original.token, original.amount, currentRound, _gauge, original.maxPerVote, original.excluded, original.depositor, true);\\n    }\\n\\n    /* ========== APPROVED TEAM FUNCTIONS ========== */\\n\\n    // allow/deny token\\n    function allowToken(address _token, bool _allow) public onlyTeam {\\n        tokenAllowed[_token] = _allow;\\n        emit TokenAllow(_token, _allow);\\n    }\\n\\n    // allow/deny multiple tokens\\n    // can be used to retire contract by denying all tokens\\n    function allowTokens(\\n        address[] calldata _tokens,\\n        bool _allow\\n    ) public onlyTeam {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenAllowed[_tokens[i]] = _allow;\\n            emit TokenAllow(_tokens[i], _allow);\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    // take deposit and send fees to feeAddress, return rewardTotal\\n    function _takeDeposit(address _token, uint256 _amount) internal {\\n        if (requireAllowlist == true) {\\n            require(tokenAllowed[_token] == true, \\\"!allowlist\\\");\\n        }\\n        uint256 fee = (_amount * platformFee) / DENOMINATOR;\\n        require(fee > 0, \\\"!amount\\\");\\n        uint256 rewardTotal = _amount - fee;\\n        IERC20(_token).safeTransferFrom(msg.sender, feeAddress, fee);\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), rewardTotal);\\n    }\\n\\n    function _maintainGaugeArrays(uint256 _round, address _gauge) internal {\\n        if (!inRoundGauges[_round][_gauge]) {\\n            roundGauges[_round].push(_gauge);\\n            inRoundGauges[_round][_gauge] = true;\\n        }\\n    }\\n\\n    /* ========== MUTLI-SIG FUNCTIONS ========== */\\n\\n    // submit vote totals and transfer rewards to distributor\\n    // added finalize param so that large rounds can be ended in separate transactions\\n    function endRound(\\n        uint256 _round,\\n        address[] calldata _gauges,\\n        uint256[] calldata _totals,\\n        bool _finalize\\n    ) public onlyOwner {\\n        require(_gauges.length == _totals.length, \\\"!gauges/totals\\\");\\n        require(_round < activeRound(), \\\"!activeRound\\\");\\n        require(_round - 1 == lastRoundProcessed, \\\"!lastRoundProcessed\\\");\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            bool recycle;\\n            require(votesReceived[_round][_gauges[i]] == 0, \\\"!duplicate\\\");\\n            votesReceived[_round][_gauges[i]] = _totals[i];\\n            for (\\n                uint256 n = 0;\\n                n < incentives[_round][_gauges[i]].length;\\n                n++\\n            ) {\\n                Incentive memory incentive = incentives[_round][_gauges[i]][n];\\n                uint256 reward;\\n                if (incentive.maxPerVote > 0) {\\n                    reward = incentive.maxPerVote * _totals[i];\\n                    if (reward >= incentive.amount) {\\n                        reward = incentive.amount;\\n                    } else {\\n                        // recycle unused reward\\n                        incentive.amount -= reward;\\n                        incentives[_round+1][_gauges[i]].push(incentive);\\n                        uint256 id = incentives[_round+1][_gauges[i]].length-1; // stack depth\\n                        recycle = true;\\n                        incentives[_round][_gauges[i]][n].recycled = incentive.amount; // already subtracted reward\\n                        emit NewIncentive(id, incentive.token, incentive.amount, _round+1, _gauges[i], incentive.maxPerVote, incentive.excluded, incentive.depositor, true);\\n                    }\\n                    incentives[_round][_gauges[i]][n].distributed = reward;\\n                } else {\\n                    if(_totals[i] == 0) {\\n                        // can pass 0 votes to recycle reward (for gauges that were not active, but will be next round)\\n                        // if a gauge is killed or nonexistent, it should not be passed at all\\n                        incentives[_round+1][_gauges[i]].push(incentive);\\n                        uint256 id = incentives[_round+1][_gauges[i]].length-1; // stack depth\\n                        recycle = true;\\n                        incentives[_round][_gauges[i]][n].recycled = incentive.amount;\\n                        emit NewIncentive(id, incentive.token, incentive.amount, _round+1, _gauges[i], incentive.maxPerVote, incentive.excluded, incentive.depositor, true);\\n                    } else {\\n                        reward = incentive.amount;\\n                        incentives[_round][_gauges[i]][n].distributed = reward;\\n                    }\\n                }\\n                toTransfer[incentive.token] += reward;\\n                toTransferList.push(incentive.token);\\n            }\\n            if(recycle) {\\n                _maintainGaugeArrays(_round+1, _gauges[i]);\\n            }\\n        }\\n        if (_finalize) {\\n            lastRoundProcessed = _round;\\n        }\\n        for (uint256 i = 0; i < toTransferList.length; i++) {\\n            if (toTransfer[toTransferList[i]] == 0) continue; // skip if already transferred\\n            IERC20(toTransferList[i]).safeTransfer(\\n                distributor,\\n                (toTransfer[toTransferList[i]] *\\n                    IERC20(toTransferList[i]).balanceOf(address(this))) /\\n                    virtualBalance[toTransferList[i]] // account for rebasing tokens\\n            );\\n            virtualBalance[toTransferList[i]] -= toTransfer[toTransferList[i]];\\n            toTransfer[toTransferList[i]] = 0;\\n        }\\n        delete toTransferList;\\n    }\\n\\n    // invalidate incentive - emergency function to invalidate an incentive\\n    // this should only be needed as a last resort if something breaks, to prevent an improper withdrawal\\n    function invalidateIncentives(\\n        uint256 _round,\\n        address _gauge,\\n        uint256[] calldata _incentives\\n    ) public onlyOwner {\\n        require(_round < activeRound(), \\\"!activeRound\\\");\\n        for (uint256 i = 0; i < _incentives.length; i++) {\\n            require(\\n                incentives[_round][_gauge][_incentives[i]].depositor ==\\n                    msg.sender,\\n                \\\"!depositor\\\"\\n            );\\n            require(\\n                incentives[_round][_gauge][_incentives[i]].distributed == 0,\\n                \\\"!distributed\\\"\\n            );\\n            require(\\n                incentives[_round][_gauge][_incentives[i]].recycled == 0,\\n                \\\"!recycled\\\"\\n            );\\n            virtualBalance[\\n                incentives[_round][_gauge][_incentives[i]].token\\n            ] -= incentives[_round][_gauge][_incentives[i]].amount;\\n            incentives[_round][_gauge][_incentives[i]].amount = 0;\\n        }\\n    }\\n\\n    // toggle allowlist requirement\\n    function setAllowlistRequired(bool _requireAllowlist) public onlyOwner {\\n        requireAllowlist = _requireAllowlist;\\n        emit AllowlistRequirement(_requireAllowlist);\\n    }\\n\\n    // toggle allowExclusions\\n    function setAllowExclusions(bool _allowExclusions) public onlyOwner {\\n        allowExclusions = _allowExclusions;\\n        emit AllowExclusions(_allowExclusions);\\n    }\\n\\n    // update fee address\\n    function updateFeeAddress(address _feeAddress) public onlyOwner {\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // update fee amount\\n    function updateFeeAmount(uint256 _feeAmount) public onlyOwner {\\n        require(_feeAmount < 400, \\\"max fee\\\"); // Max fee 4%\\n        platformFee = _feeAmount;\\n        emit UpdatedFee(_feeAmount);\\n    }\\n\\n    // add or remove address from team functions\\n    function modifyTeam(address _member, bool _approval) public onlyOwner {\\n        approvedTeam[_member] = _approval;\\n        emit ModifiedTeam(_member, _approval);\\n    }\\n\\n    // update token distributor address\\n    function updateDistributor(address _distributor) public onlyOwner {\\n        distributor = _distributor;\\n        emit UpdatedDistributor(distributor);\\n    }\\n\\n    // Fallback executable function\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n        return (success, result);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyTeam() {\\n        require(approvedTeam[msg.sender] == true, \\\"Team only\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event NewIncentive(\\n        uint256 _index,\\n        address _token,\\n        uint256 _amount,\\n        uint256 indexed _round,\\n        address indexed _gauge,\\n        uint256 _maxPerVote,\\n        address[] _excluded,\\n        address indexed _depositor,\\n        bool _recycled\\n    );\\n    event TokenAllow(address _token, bool _allow);\\n    event AllowlistRequirement(bool _requireAllowlist);\\n    event AllowExclusions(bool _allowExclusions);\\n    event UpdatedFee(uint256 _feeAmount);\\n    event ModifiedTeam(address _member, bool _approval);\\n    event UpdatedDistributor(address _distributor);\\n    event WithdrawUnprocessed(\\n        uint256 _index,\\n        uint256 indexed _round,\\n        address indexed _gauge,\\n        uint256 _amount\\n    );\\n    event IncreasedIncentive(\\n        uint256 _index,\\n        address _token,\\n        uint256 _total,\\n        uint256 _increase,\\n        uint256 indexed _round,\\n        address indexed _gauge,\\n        uint256 _maxPerVote\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approved2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowExclusions\",\"type\":\"bool\"}],\"name\":\"AllowExclusions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_requireAllowlist\",\"type\":\"bool\"}],\"name\":\"AllowlistRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"}],\"name\":\"IncreasedIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"ModifiedTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_recycled\",\"type\":\"bool\"}],\"name\":\"NewIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"TokenAllow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"UpdatedDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnprocessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowExclusions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"depositIncentiveSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositSplitGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numRounds\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositSplitGaugesRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numRounds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositSplitRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositUnevenSplitGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numRounds\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_excluded\",\"type\":\"address[]\"}],\"name\":\"depositUnevenSplitGaugesRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositUnevenSplitGaugesSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totals\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_finalize\",\"type\":\"bool\"}],\"name\":\"endRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"gaugesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inRoundGauges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recycled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"incentivesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_increase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"}],\"name\":\"increaseIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_incentives\",\"type\":\"uint256[]\"}],\"name\":\"invalidateIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundProcessed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"modifyTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"}],\"name\":\"recycleUnprocessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundGauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowExclusions\",\"type\":\"bool\"}],\"name\":\"setAllowExclusions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireAllowlist\",\"type\":\"bool\"}],\"name\":\"setAllowlistRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"updateDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"updateFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"}],\"name\":\"viewIncentive\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recycled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"excluded\",\"type\":\"address[]\"}],\"internalType\":\"struct Votium.Incentive\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"virtualBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votesReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"}],\"name\":\"withdrawUnprocessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Votium", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc7c7f0bea8444c12ec98ec626ff071c6fa27a19000000000000000000000000c8076f60cbdd2ee93d54fcc0ced88095a72f4a2f00000000000000000000000029e3b0e8df4ee3f71a62c34847c34e139fc0b297000000000000000000000000378ba9b73309be80bf4c2c027aad799766a7ed5a000000000000000000000000e39b8617d571cee5e75e1ec6b2bb40ddc8cf6fa3", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}