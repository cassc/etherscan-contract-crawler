{"SourceCode": "{\"ICommonUtilities.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface ICommonUtilities {\\r\\n    function toString(address _addr) external pure returns(string memory);\\r\\n    function toString(uint _i) external pure returns(string memory);\\r\\n    function toUint256(bytes calldata bs) external pure returns(uint256 x);\\r\\n    function toAddress(bytes calldata b) external pure returns (address addr);\\r\\n    function compareStrings(string calldata a, string calldata b) external pure returns(bool);\\r\\n    function getFirstJSONPart(address sourceLocation, uint256 sourceLocationId, address location) external pure returns(bytes memory);\\r\\n    function formatReturnAbiParametersArray(string calldata m) external pure returns(string memory);\\r\\n    function toLowerCase(string calldata str) external pure returns(string memory);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC721.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC721 {\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\"},\"IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\"},\"IMVDFunctionalitiesManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMVDFunctionalitiesManager {\\n\\n    function getProxy() external view returns (address);\\n    function setProxy() external;\\n\\n    function init(address sourceLocation,\\n        uint256 getMinimumBlockNumberSourceLocationId, address getMinimumBlockNumberFunctionalityAddress,\\n        uint256 getEmergencyMinimumBlockNumberSourceLocationId, address getEmergencyMinimumBlockNumberFunctionalityAddress,\\n        uint256 getEmergencySurveyStakingSourceLocationId, address getEmergencySurveyStakingFunctionalityAddress,\\n        uint256 checkVoteResultSourceLocationId, address checkVoteResultFunctionalityAddress) external;\\n\\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender) external;\\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, uint256 position) external;\\n    function removeFunctionality(string calldata codeName) external returns(bool removed, uint256 position);\\n    function isValidFunctionality(address functionality) external view returns(bool);\\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\\n    function setCallingContext(address location) external returns(bool);\\n    function clearCallingContext() external;\\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\\n    function hasFunctionality(string calldata codeName) external view returns(bool);\\n    function getFunctionalitiesAmount() external view returns(uint256);\\n    function functionalitiesToJSON() external view returns(string memory);\\n    function functionalitiesToJSON(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\\n    function functionalityNames() external view returns(string memory);\\n    function functionalityNames(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\\n    function functionalityToJSON(string calldata codeName) external view returns(string memory);\\n\\n    function preConditionCheck(string calldata codeName, bytes calldata data, uint8 submitable, address sender, uint256 value) external view returns(address location, bytes memory payload);\\n\\n    function setupFunctionality(address proposalAddress) external returns (bool);\\n}\"},\"IMVDFunctionalityModelsManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface IMVDFunctionalityModelsManager {\\r\\n    function init() external;\\r\\n    function checkWellKnownFunctionalities(string calldata codeName, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, string calldata replaces) external view;\\r\\n}\"},\"IMVDFunctionalityProposal.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMVDFunctionalityProposal {\\n\\n    function init(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces, address proxy) external;\\n    function setCollateralData(bool emergency, address sourceLocation, uint256 sourceLocationId, bool submitable, bool isInternal, bool needsSender, address proposer, uint256 votesHardCap) external;\\n\\n    function getProxy() external view returns(address);\\n    function getCodeName() external view returns(string memory);\\n    function isEmergency() external view returns(bool);\\n    function getSourceLocation() external view returns(address);\\n    function getSourceLocationId() external view returns(uint256);\\n    function getLocation() external view returns(address);\\n    function isSubmitable() external view returns(bool);\\n    function getMethodSignature() external view returns(string memory);\\n    function getReturnAbiParametersArray() external view returns(string memory);\\n    function isInternal() external view returns(bool);\\n    function needsSender() external view returns(bool);\\n    function getReplaces() external view returns(string memory);\\n    function getProposer() external view returns(address);\\n    function getSurveyEndBlock() external view returns(uint256);\\n    function getSurveyDuration() external view returns(uint256);\\n    function isVotesHardCapReached() external view returns(bool);\\n    function getVotesHardCapToReach() external view returns(uint256);\\n    function toJSON() external view returns(string memory);\\n    function getVote(address addr) external view returns(uint256 accept, uint256 refuse);\\n    function getVotes() external view returns(uint256, uint256);\\n    function start() external;\\n    function disable() external;\\n    function isDisabled() external view returns(bool);\\n    function isTerminated() external view returns(bool);\\n    function accept(uint256 amount) external;\\n    function retireAccept(uint256 amount) external;\\n    function moveToAccept(uint256 amount) external;\\n    function refuse(uint256 amount) external;\\n    function retireRefuse(uint256 amount) external;\\n    function moveToRefuse(uint256 amount) external;\\n    function retireAll() external;\\n    function withdraw() external;\\n    function terminate() external;\\n    function set() external;\\n\\n    event Accept(address indexed voter, uint256 amount);\\n    event RetireAccept(address indexed voter, uint256 amount);\\n    event MoveToAccept(address indexed voter, uint256 amount);\\n    event Refuse(address indexed voter, uint256 amount);\\n    event RetireRefuse(address indexed voter, uint256 amount);\\n    event MoveToRefuse(address indexed voter, uint256 amount);\\n    event RetireAll(address indexed voter, uint256 amount);\\n}\"},\"IMVDFunctionalityProposalManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMVDFunctionalityProposalManager {\\n    function newProposal(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces) external returns(address);\\n    function checkProposal(address proposalAddress) external;\\n    function getProxy() external view returns (address);\\n    function setProxy() external;\\n    function isValidProposal(address proposal) external view returns (bool);\\n}\"},\"IMVDProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMVDProxy {\\n\\n    function init(address votingTokenAddress, address functionalityProposalManagerAddress, address stateHolderAddress, address functionalityModelsManagerAddress, address functionalitiesManagerAddress, address walletAddress) external;\\n\\n    function getDelegates() external view returns(address,address,address,address,address,address);\\n    function getToken() external view returns(address);\\n    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\\n    function getStateHolderAddress() external view returns(address);\\n    function getMVDFunctionalityModelsManagerAddress() external view returns(address);\\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\\n    function getMVDWalletAddress() external view returns(address);\\n    function setDelegate(uint256 position, address newAddress) external returns(address oldAddress);\\n    function changeProxy(address newAddress, bytes calldata initPayload) external;\\n    function isValidProposal(address proposal) external view returns (bool);\\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\\n    function newProposal(string calldata codeName, bool emergency, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnParametersJSONArray, bool isInternal, bool needsSender, string calldata replaces) external returns(address proposalAddress);\\n    function startProposal(address proposalAddress) external;\\n    function disableProposal(address proposalAddress) external;\\n    function transfer(address receiver, uint256 value, address token) external;\\n    function transfer721(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\\n    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\\n    function setProposal() external;\\n    function read(string calldata codeName, bytes calldata data) external view returns(bytes memory returnData);\\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\\n    function callFromManager(address location, bytes calldata payload) external returns(bool, bytes memory);\\n    function emitFromManager(string calldata codeName, address proposal, string calldata replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address location, bool submitable, string calldata methodSignature, bool isInternal, bool needsSender, address proposalAddress) external;\\n\\n    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\\n\\n    event ProxyChanged(address indexed newAddress);\\n    event DelegateChanged(uint256 position, address indexed oldAddress, address indexed newAddress);\\n\\n    event Proposal(address proposal);\\n    event ProposalCheck(address indexed proposal);\\n    event ProposalSet(address indexed proposal, bool success);\\n    event FunctionalitySet(string codeName, address indexed proposal, string replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address indexed replacedLocation, bool replacedWasSubmitable, string replacedMethodSignature, bool replacedWasInternal, bool replacedNeededSender, address indexed replacedProposal);\\n\\n    event Event(string indexed key, bytes32 indexed firstIndex, bytes32 indexed secondIndex, bytes data);\\n}\"},\"IMVDWallet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMVDWallet {\\n\\n    function getProxy() external view returns (address);\\n\\n    function setProxy() external;\\n\\n    function setNewWallet(address payable newWallet, address tokenAddress) external;\\n\\n    function transfer(address receiver, uint256 value, address tokenAddress) external;\\n    \\n    function transfer(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\\n\\n    function flushToNewWallet(address token) external;\\n\\n    function flush721ToNewWallet(uint256 tokenId, bytes calldata data, bool safe, address tokenAddress) external;\\n}\"},\"IStateHolder.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IStateHolder {\\n\\n    function init() external;\\n\\n    function getProxy() external view returns (address);\\n    function setProxy() external;\\n    function toJSON() external view returns(string memory);\\n    function toJSON(uint256 start, uint256 l) external view returns(string memory);\\n    function getStateSize() external view returns (uint256);\\n    function exists(string calldata varName) external view returns(bool);\\n    function getDataType(string calldata varName) external view returns(string memory dataType);\\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\\n    function setBytes(string calldata varName, bytes calldata val) external returns(bytes memory);\\n    function getBytes(string calldata varName) external view returns(bytes memory);\\n    function setString(string calldata varName, string calldata val) external returns(string memory);\\n    function getString(string calldata varName) external view returns (string memory);\\n    function setBool(string calldata varName, bool val) external returns(bool);\\n    function getBool(string calldata varName) external view returns (bool);\\n    function getUint256(string calldata varName) external view returns (uint256);\\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\\n    function getAddress(string calldata varName) external view returns (address);\\n    function setAddress(string calldata varName, address val) external returns (address);\\n}\"},\"IVotingToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface IVotingToken {\\r\\n    function init(string calldata name, string calldata symbol, uint256 decimals, uint256 totalSupply) external;\\r\\n\\r\\n    function getProxy() external view returns (address);\\r\\n    function setProxy() external;\\r\\n\\r\\n    function name() external view returns(string memory);\\r\\n    function symbol() external view returns(string memory);\\r\\n    function decimals() external view returns(uint256);\\r\\n\\r\\n    function mint(uint256 amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\"},\"VotingToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IMVDProxy.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IVotingToken.sol\\\";\\nimport \\\"./IMVDFunctionalityProposalManager.sol\\\";\\nimport \\\"./IMVDFunctionalitiesManager.sol\\\";\\n\\ncontract VotingToken is IERC20, IVotingToken {\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _decimals;\\n    address private _proxy;\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public {\\n        if(totalSupply == 0) {\\n            return;\\n        }\\n        init(name, symbol, decimals, totalSupply);\\n    }\\n\\n    function init(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public override {\\n        require(_totalSupply == 0, \\\"Init already called!\\\");\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        _totalSupply = totalSupply * (10 ** decimals);\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(this), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"ETH not accepted\\\");\\n    }\\n\\n    function getProxy() public override view returns(address) {\\n        return _proxy;\\n    }\\n\\n    function name() public override view returns(string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public override view returns(string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public override view returns(uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        address txSender = msg.sender;\\n        if(_proxy == address(0) || !(IMVDFunctionalityProposalManager(IMVDProxy(_proxy).getMVDFunctionalityProposalManagerAddress()).isValidProposal(txSender) \\u0026\\u0026 recipient == txSender)) {\\n            _approve(sender, txSender, _allowances[sender][txSender] = sub(_allowances[sender][txSender], amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        }\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\\n        _approve(msg.sender, spender, add(_allowances[msg.sender][spender], addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\\n        _approve(msg.sender, spender, sub(_allowances[msg.sender][spender], subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = sub(_balances[sender], amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = add(_balances[recipient], amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\\n        require(b \\u003c= a, errorMessage);\\n        c = a - b;\\n    }\\n\\n    function setProxy() public override {\\n        require(_totalSupply != 0, \\\"Init not called!\\\");\\n        require(_proxy == address(0) || _proxy == msg.sender, _proxy != address(0) ? \\\"Proxy already set!\\\" : \\\"Only Proxy can toggle itself!\\\");\\n        _proxy = _proxy == address(0) ?  msg.sender : address(0);\\n    }\\n\\n    function mint(uint256 amount) public override {\\n        require(IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \\\"Unauthorized access!\\\");\\n\\n        _totalSupply = add(_totalSupply, amount);\\n        _balances[_proxy] = add(_balances[_proxy], amount);\\n        emit Transfer(address(0), _proxy, amount);\\n    }\\n\\n    function burn(uint256 amount) public override {\\n        _balances[msg.sender] = sub(_balances[msg.sender], amount, \\\"VotingToken: burn amount exceeds balance\\\");\\n        _totalSupply = sub(_totalSupply, amount, \\\"VotingToken: burn amount exceeds total supply\\\");\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VotingToken", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000025e1663000000000000000000000000000000000000000000000000000000000000000664666f68756200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005627569646c000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1cd1d726efd29883483d0d732966c74cd84d917c364530256c3171106fca5336"}