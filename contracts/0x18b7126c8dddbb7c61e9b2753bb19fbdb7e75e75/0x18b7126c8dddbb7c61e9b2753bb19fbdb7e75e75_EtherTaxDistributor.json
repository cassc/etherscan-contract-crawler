{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title EtherTaxDistributor\r\n * @dev A contract that distributes received Ether to three predefined wallets.\r\n */\r\ncontract EtherTaxDistributor {\r\n    enum DistributionState { DISABLED, ENABLED }\r\n\r\n    address public owner;\r\n    address payable public wallet1;\r\n    address payable public wallet2;\r\n    address payable public wallet3;\r\n    DistributionState public distributionState;\r\n\r\n    event FundsReceived(address indexed sender, uint256 amount);\r\n    // event FundsDistributed(address indexed wallet, uint256 amount);\r\n    event FundsDistributed(address indexed wallet1, uint256 amountToWallet1, address indexed wallet2, uint256 amountToWallet2, address indexed wallet3, uint256 amountToWallet3);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(\r\n        address payable _wallet1,\r\n        address payable _wallet2,\r\n        address payable _wallet3\r\n    ) payable {\r\n        // Ensure valid wallet addresses are provided\r\n        require(_wallet1 != address(0) && _wallet2 != address(0) && _wallet3 != address(0), \"Invalid wallet address\");\r\n\r\n        owner = msg.sender;\r\n        wallet1 = _wallet1;\r\n        wallet2 = _wallet2;\r\n        wallet3 = _wallet3;\r\n        distributionState = DistributionState.ENABLED;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function to receive Ether\r\n     */\r\n    receive() external payable {\r\n        emit FundsReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to restrict a function to be called only by the contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set wallet addresses to distribute funds\r\n     */\r\n    function setWallets(address payable _newWallet1, address payable _newWallet2, address payable _newWallet3) public onlyOwner {\r\n        require(_newWallet1 != address(0) && _newWallet2 != address(0) && _newWallet3 != address(0), \"Invalid wallet addresses\");\r\n        wallet1 = _newWallet1;\r\n        wallet2 = _newWallet2;\r\n        wallet3 = _newWallet3;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the contract owner\r\n     * @param newOwner The new owner's address\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw any excess Ether from the contract\r\n     */\r\n    function withdrawExcessFunds() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = msg.sender.call{value: balance}(\"\");\r\n        require(success, \"Failed to withdraw excess funds.\");\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy the contract and send any remaining balance to the contract owner\r\n     */\r\n    function destroyContract() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /**\r\n     * @dev Check if it's possible to make distribution\r\n     */\r\n    modifier distributionEnabled() {\r\n        require(distributionState == DistributionState.ENABLED, \"Ether distribution is currently disabled\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle the distribution state of the contract.\r\n     * @param enabled Whether distribution should be enabled or disabled.\r\n     */\r\n    function toggleDistribution(bool enabled) public onlyOwner {\r\n        distributionState = enabled ? DistributionState.ENABLED : DistributionState.DISABLED;\r\n    }\r\n\r\n    /**\r\n     * @dev Trigger the distribution of funds to the predefined wallets\r\n     */\r\n    function distributeFunds() public distributionEnabled {\r\n        uint256 thisBalance = address(this).balance;\r\n\r\n        uint256 amountToWallet1 = (thisBalance * 3685) / 10000;\r\n        uint256 amountToWallet2 = (thisBalance * 3300) / 10000;\r\n        uint256 amountToWallet3 = (thisBalance * 3015) / 10000;\r\n\r\n        distributionState = DistributionState.DISABLED;\r\n\r\n        _safeTransfer(wallet1, amountToWallet1);\r\n        _safeTransfer(wallet2, amountToWallet2);\r\n        _safeTransfer(wallet3, amountToWallet3);\r\n\r\n        distributionState = DistributionState.ENABLED;\r\n\r\n        emit FundsDistributed(wallet1, amountToWallet1, wallet2, amountToWallet2, wallet3, amountToWallet3);\r\n\r\n    }\r\n\r\n    function _safeTransfer(address payable recipient, uint256 amount) private {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet3\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWallet3\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionState\",\"outputs\":[{\"internalType\":\"enum EtherTaxDistributor.DistributionState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_newWallet2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_newWallet3\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"toggleDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcessFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EtherTaxDistributor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000aaec9ba6411be3e61a696a778f60f9d96a26823c000000000000000000000000501ca829266cea87dafc624863c3e285738304bb0000000000000000000000002dec58e92f93ce90ec43a6f03910663257cf2a73", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://754f5699fea0c0f0f287549dcc1f5654ada859ba5f2567366982a3889c7e2407"}