{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Claiming is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    /**\r\n     * Structure of an object to pass for allowance list\r\n     */\r\n    struct allowedUser {\r\n        address wallet;\r\n        uint256 amount;\r\n    }\r\n\r\n    IERC20 public token;\r\n    bool internal isClaimOpen;\r\n    uint256 internal totalUnclaimed;\r\n\r\n    mapping(address => uint256) allowanceAmounts;\r\n\r\n    constructor(IERC20 _token){\r\n        token = _token;\r\n        isClaimOpen = false;\r\n        totalUnclaimed = 0;\r\n    }\r\n\r\n    event UnsuccessfulTransfer(address recipient);\r\n\r\n    /**\r\n    * Ensures that claiming tokens is currently allowed by the owner.\r\n    */\r\n    modifier openClaiming() {\r\n        require(\r\n            isClaimOpen,\r\n            \"Claiming tokens is not currently allowed.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Ensures that the amount of claimed tokens is not bigger than the user is allowed to claim.\r\n    */\r\n    modifier userHasEnoughClaimableTokens (uint256 amount) {\r\n        require(\r\n            allowanceAmounts[msg.sender] >= amount,\r\n            \"The users token amount is smaller than the requested.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Ensures that contract has enough tokens for the transaction.\r\n    */\r\n    modifier enoughContractAmount(uint256 amount) {\r\n        require(\r\n            token.balanceOf(address(this)) >= amount, \r\n            \"Owned token amount is too small.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * Ensures that only people from the allowance list can claim tokens.\r\n    */\r\n    modifier userHasClaimableTokens() {\r\n        require(\r\n            allowanceAmounts[msg.sender] > 0,\r\n            \"There is no tokens for the user to claim or the user is not allowed to do so.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier hasContractTokens() {\r\n        require(\r\n            token.balanceOf(address(this)) > 0,\r\n            \"There is no tokens for the user to claim or the user is not allowed to do so.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /** @dev Transfers the spacified number of tokens to the user requesting\r\n     *\r\n     * Substracts the requested amount of tokens from the allowance amount of the user\r\n     * Transfers tokens from contract to the message sender\r\n     * In case of failure restores the previous allowance amount\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - message sender cannot be address(0) and has to be in AllowanceList\r\n     */\r\n    function claimCustomAmountTokens(uint256 amount)\r\n        public \r\n        openClaiming \r\n        userHasEnoughClaimableTokens(amount)\r\n        enoughContractAmount(amount)\r\n    {\r\n        require(msg.sender != address(0), \"Sender is address zero\");\r\n        allowanceAmounts[msg.sender] = allowanceAmounts[msg.sender].sub(amount);\r\n        token.approve(address(this), amount);\r\n        if (!token.transferFrom(address(this), msg.sender, amount)){\r\n            allowanceAmounts[msg.sender].add(amount);\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n        else {\r\n            totalUnclaimed = totalUnclaimed.sub(amount);\r\n        }\r\n    }\r\n\r\n    /** @dev Transfers the spacified number of tokens to the user requesting\r\n     *\r\n     * Makes the allowance equal to zero\r\n     * Transfers all allowed tokens from contract to the message sender\r\n     * In case of failure restores the previous allowance amount\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - message sender cannot be address(0) and has to be in AllowanceList\r\n     */\r\n    function claimRemainingTokens()\r\n        public\r\n        openClaiming\r\n        userHasClaimableTokens   \r\n    {   \r\n        \r\n        require(msg.sender != address(0), \"Sender is address zero\");\r\n        uint256 amount = allowanceAmounts[msg.sender];\r\n        \r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient amount of tokens in contract\");\r\n        \r\n        allowanceAmounts[msg.sender] = 0;\r\n        token.approve(address(this), amount);\r\n        if (!token.transferFrom(address(this), msg.sender, amount)){\r\n            allowanceAmounts[msg.sender] = amount;\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n        else{\r\n            totalUnclaimed = totalUnclaimed.sub(amount);\r\n        }\r\n    }\r\n\r\n    /** @dev Adds the provided address to Allowance list with allowed provided amount of tokens\r\n     * Available only for the owner of contract\r\n     */\r\n    function addToAllowanceListSingle(address addAddress, uint256 amount) \r\n        public \r\n        onlyOwner \r\n    {\r\n        allowanceAmounts[addAddress] = allowanceAmounts[addAddress].add(amount);\r\n        totalUnclaimed = totalUnclaimed.add(amount);\r\n    }\r\n    \r\n    /** @dev Adds the provided address to Allowance list with allowed provided amount of tokens\r\n     * Available only for the owner\r\n     */\r\n    function substractFromAllowanceListSingle(address subAddress, uint256 amount) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(allowanceAmounts[subAddress] != 0, \"The address does not have allowance to substract from.\");\r\n        allowanceAmounts[subAddress] = allowanceAmounts[subAddress].sub(amount);\r\n        totalUnclaimed = totalUnclaimed.sub(amount);\r\n    }\r\n\r\n\r\n    /** @dev Adds the provided address list to Allowance list with allowed provided amounts of tokens\r\n     * Available only for the owner\r\n     */\r\n    function addToAllowanceListMultiple(allowedUser[] memory addAddresses)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addAddresses.length; i++) {\r\n            allowanceAmounts[addAddresses[i].wallet] = allowanceAmounts[addAddresses[i].wallet].add(addAddresses[i].amount);\r\n            totalUnclaimed = totalUnclaimed.add(addAddresses[i].amount);\r\n        }\r\n    }\r\n    \r\n    /** @dev Removes the provided address from Allowance list by setting his allowed sum to zero\r\n     * Available only for the owner of contract\r\n     */\r\n    function removeFromAllowanceList(address remAddress) \r\n        public \r\n        onlyOwner \r\n    {\r\n        totalUnclaimed = totalUnclaimed.sub(allowanceAmounts[remAddress]);\r\n        delete allowanceAmounts[remAddress];\r\n    }\r\n\r\n    /** @dev Allows the owner to turn the claiming on.\r\n     */\r\n    function turnClaimingOn() \r\n        public \r\n        onlyOwner\r\n    {\r\n        isClaimOpen = true;\r\n    }\r\n\r\n    /** @dev Allows the owner to turn the claiming off.\r\n     */\r\n    function turnClaimingOff() \r\n        public \r\n        onlyOwner\r\n    {\r\n        isClaimOpen = false;\r\n    }\r\n\r\n    /** @dev Allows the owner to withdraw all the remaining tokens from the contract\r\n     */\r\n    function withdrawAllTokensOwner() \r\n        public \r\n        onlyOwner\r\n    {\r\n        token.approve(address(this), token.balanceOf(address(this)));\r\n        if (!token.transferFrom(address(this), msg.sender, token.balanceOf(address(this)))){\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /** @dev Allows the owner to withdraw the specified amount of tokens from the contract\r\n     */\r\n     function withdrawCustomTokensOwner(uint256 amount) \r\n        public \r\n        onlyOwner \r\n        enoughContractAmount(amount)\r\n    {\r\n        token.approve(address(this), amount);\r\n        if (!token.transferFrom(address(this), msg.sender, amount)){\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /** @dev Allows the owner to withdraw the residual tokens from the contract\r\n     */\r\n     function withdrawResidualTokensOwner() \r\n        public \r\n        onlyOwner \r\n    {\r\n        uint256 amount = token.balanceOf(address(this)).sub(totalUnclaimed);\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient amount of tokens in contract\");\r\n        token.approve(address(this), amount);\r\n        if (!token.transferFrom(address(this), msg.sender, amount)){\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /** @dev Allows the owner to withdraw the specified amount of any IERC20 tokens from the contract\r\n     */\r\n    function withdrawAnyContractTokens(IERC20 tokenAddress, address recipient) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(msg.sender != address(0), \"Sender is address zero\");\r\n        require(recipient != address(0), \"Receiver is address zero\");\r\n        tokenAddress.approve(address(this), tokenAddress.balanceOf(address(this)));\r\n        if(!tokenAddress.transferFrom(address(this), recipient, tokenAddress.balanceOf(address(this)))){\r\n            emit UnsuccessfulTransfer(msg.sender);\r\n        }\r\n    } \r\n    \r\n    /** @dev Shows the amount of total unclaimed tokens in the contract\r\n     */\r\n    function totalUnclaimedTokens() \r\n        public \r\n        view \r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        return totalUnclaimed;\r\n    }\r\n    \r\n    /** @dev Shows the residual tokens of the user sending request\r\n     */\r\n    function myResidualTokens() \r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowanceAmounts[msg.sender];\r\n    } \r\n    \r\n    /** @dev Shows the owner residual tokens of any address (owner only function)\r\n     */\r\n    function residualTokensOf(address user) \r\n        public  \r\n        view\r\n        onlyOwner \r\n        returns (uint256)\r\n    {\r\n        return allowanceAmounts[user];\r\n    }\r\n\r\n    /** @dev Shows the amount of total tokens in the contract\r\n     */\r\n    function tokenBalance() \r\n        public \r\n        view \r\n        returns (uint256)\r\n    {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /** @dev Shows whether claiming is allowed right now.\r\n     */\r\n    function isClaimingOn() \r\n        public\r\n        view \r\n        returns (bool)\r\n    {\r\n        return isClaimOpen;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"UnsuccessfulTransfer\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Claiming.allowedUser[]\",\"name\":\"addAddresses\",\"type\":\"tuple[]\"}],\"name\":\"addToAllowanceListMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToAllowanceListSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimCustomAmountTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimingOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myResidualTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remAddress\",\"type\":\"address\"}],\"name\":\"removeFromAllowanceList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"residualTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"substractFromAllowanceListSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnClaimingOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnClaimingOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllTokensOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAnyContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCustomTokensOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawResidualTokensOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Claiming", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4b5470523ccd314c6b9da041076e7d79e0df267", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c563e06ffc017251db0dc832ae6bd4157a3d3947cf8c00faa7d391737b30a582"}