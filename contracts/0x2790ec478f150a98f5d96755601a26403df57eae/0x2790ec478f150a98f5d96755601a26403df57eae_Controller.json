{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"EnumerableSet.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\nimport \\\"ScaledMath.sol\\\";\\n\\nimport \\\"IController.sol\\\";\\nimport \\\"ILpTokenStaker.sol\\\";\\nimport \\\"IPoolAdapter.sol\\\";\\nimport \\\"IFeeRecipient.sol\\\";\\nimport \\\"ILpToken.sol\\\";\\nimport \\\"IBooster.sol\\\";\\nimport \\\"IBonding.sol\\\";\\n\\ncontract Controller is IController, Ownable, Initializable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ScaledMath for uint256;\\n\\n    uint256 public constant MAX_WEIGHT_UPDATE_MIN_DELAY = 21 days;\\n    uint256 public constant MIN_WEIGHT_UPDATE_MIN_DELAY = 1 days;\\n\\n    uint256 internal constant _MAX_TAINTED_USD_AMOUNT = 10_000e18;\\n\\n    EnumerableSet.AddressSet internal _pools;\\n    EnumerableSet.AddressSet internal _activePools;\\n    EnumerableSet.AddressSet internal _pauseManagers;\\n    EnumerableSet.AddressSet internal _multiDepositsWithdrawsWhitelist;\\n\\n    mapping(address => uint256) internal _minimumTaintedTransferAmount;\\n\\n    address public immutable cncToken;\\n\\n    address public override convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    address public override curveHandler;\\n    address public override convexHandler;\\n    IGenericOracle public override priceOracle;\\n    ICurveRegistryCache public override curveRegistryCache;\\n\\n    IInflationManager public override inflationManager;\\n    ILpTokenStaker public override lpTokenStaker;\\n    IBonding public override bonding;\\n    IFeeRecipient public override feeRecipient;\\n\\n    mapping(address => IPoolAdapter) internal _customPoolAdapters;\\n    IPoolAdapter public override defaultPoolAdapter;\\n\\n    uint256 public weightUpdateMinDelay;\\n\\n    mapping(address => uint256) public lastWeightUpdate;\\n\\n    constructor(address cncToken_, address curveRegistryCacheAddress_) {\\n        cncToken = cncToken_;\\n        curveRegistryCache = ICurveRegistryCache(curveRegistryCacheAddress_);\\n    }\\n\\n    function initialize(address _lpTokenStaker) external onlyOwner initializer {\\n        lpTokenStaker = ILpTokenStaker(_lpTokenStaker);\\n    }\\n\\n    /// @notice shut downs the current lp token staker and sets a new one\\n    function switchLpTokenStaker(address _lpTokenStaker) external onlyOwner {\\n        lpTokenStaker.shutdown();\\n        lpTokenStaker = ILpTokenStaker(_lpTokenStaker);\\n        for (uint256 i; i < _pools.length(); i++) {\\n            lpTokenStaker.checkpoint(_pools.at(i));\\n        }\\n    }\\n\\n    function listPools() external view override returns (address[] memory) {\\n        return _pools.values();\\n    }\\n\\n    function listActivePools() external view override returns (address[] memory) {\\n        return _activePools.values();\\n    }\\n\\n    function addPool(address poolAddress) external override onlyOwner {\\n        require(_pools.add(poolAddress), \\\"failed to add pool\\\");\\n        require(_activePools.add(poolAddress), \\\"failed to add pool\\\");\\n        lpTokenStaker.checkpoint(poolAddress);\\n        emit PoolAdded(poolAddress);\\n    }\\n\\n    function removePool(address poolAddress) external override onlyOwner {\\n        require(_pools.remove(poolAddress), \\\"failed to remove pool\\\");\\n        require(!_activePools.contains(poolAddress), \\\"shutdown the pool before removing it\\\");\\n        emit PoolRemoved(poolAddress);\\n    }\\n\\n    function shutdownPool(address poolAddress) external override onlyOwner {\\n        require(_activePools.remove(poolAddress), \\\"failed to remove pool\\\");\\n        IConicPool(poolAddress).shutdownPool();\\n        inflationManager.updatePoolWeights();\\n        emit PoolShutdown(poolAddress);\\n    }\\n\\n    function isPool(address poolAddress) external view override returns (bool) {\\n        return _pools.contains(poolAddress);\\n    }\\n\\n    function isActivePool(address poolAddress) external view override returns (bool) {\\n        return _activePools.contains(poolAddress);\\n    }\\n\\n    function updateWeights(WeightUpdate memory update) public override onlyOwner {\\n        require(\\n            lastWeightUpdate[update.conicPoolAddress] + weightUpdateMinDelay < block.timestamp,\\n            \\\"weight update delay not elapsed\\\"\\n        );\\n        IConicPool(update.conicPoolAddress).updateWeights(update.weights);\\n        lastWeightUpdate[update.conicPoolAddress] = block.timestamp;\\n    }\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external override onlyOwner {\\n        for (uint256 i; i < weights.length; i++) {\\n            updateWeights(weights[i]);\\n        }\\n    }\\n\\n    function setConvexBooster(address _convexBooster) external override onlyOwner {\\n        require(IBooster(convexBooster).isShutdown(), \\\"current booster is not shutdown\\\");\\n        require(_convexBooster != convexBooster, \\\"same convex booster\\\");\\n        convexBooster = _convexBooster;\\n        emit ConvexBoosterSet(_convexBooster);\\n    }\\n\\n    function setCurveHandler(address _curveHandler) external override onlyOwner {\\n        require(_curveHandler != curveHandler, \\\"same curve handler\\\");\\n        curveHandler = _curveHandler;\\n        emit CurveHandlerSet(_curveHandler);\\n    }\\n\\n    function setConvexHandler(address _convexHandler) external override onlyOwner {\\n        require(_convexHandler != convexHandler, \\\"same convex handler\\\");\\n        convexHandler = _convexHandler;\\n        emit ConvexHandlerSet(_convexHandler);\\n    }\\n\\n    function setInflationManager(address manager) external onlyOwner {\\n        require(manager != address(0), \\\"cannot set to zero address\\\");\\n        require(manager != address(inflationManager), \\\"same inflation manager\\\");\\n        inflationManager = IInflationManager(manager);\\n        emit InflationManagerSet(manager);\\n    }\\n\\n    function setPriceOracle(address oracle) external override onlyOwner {\\n        require(oracle != address(0), \\\"cannot set to zero address\\\");\\n        require(oracle != address(priceOracle), \\\"same price oracle\\\");\\n        priceOracle = IGenericOracle(oracle);\\n        emit PriceOracleSet(oracle);\\n    }\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external override onlyOwner {\\n        require(curveRegistryCache_ != address(0), \\\"cannot set to zero address\\\");\\n        require(curveRegistryCache_ != address(curveRegistryCache), \\\"same curve registry cache\\\");\\n        curveRegistryCache = ICurveRegistryCache(curveRegistryCache_);\\n        emit CurveRegistryCacheSet(curveRegistryCache_);\\n    }\\n\\n    function poolAdapterFor(address pool) external view override returns (IPoolAdapter) {\\n        IPoolAdapter adapter = _customPoolAdapters[pool];\\n        return address(adapter) == address(0) ? defaultPoolAdapter : adapter;\\n    }\\n\\n    function setDefaultPoolAdapter(address poolAdapter) external override onlyOwner {\\n        require(poolAdapter != address(0), \\\"cannot set to zero address\\\");\\n        require(poolAdapter != address(defaultPoolAdapter), \\\"same default pool adapter\\\");\\n        defaultPoolAdapter = IPoolAdapter(poolAdapter);\\n        emit DefaultPoolAdapterSet(poolAdapter);\\n    }\\n\\n    function setCustomPoolAdapter(address pool, address poolAdapter) external override onlyOwner {\\n        require(poolAdapter != address(_customPoolAdapters[pool]), \\\"same custom pool adapter\\\");\\n        _customPoolAdapters[pool] = IPoolAdapter(poolAdapter);\\n        emit CustomPoolAdapterSet(pool, poolAdapter);\\n    }\\n\\n    function setBonding(address _bonding) external override onlyOwner {\\n        require(address(_bonding) != address(0), \\\"cannot set to zero address\\\");\\n        require(address(_bonding) != address(bonding), \\\"same bonding\\\");\\n        bonding = IBonding(_bonding);\\n        emit BondingSet(_bonding);\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) external override onlyOwner {\\n        require(address(_feeRecipient) != address(0), \\\"cannot set to zero address\\\");\\n        require(address(_feeRecipient) != address(feeRecipient), \\\"same fee recipient\\\");\\n        feeRecipient = IFeeRecipient(_feeRecipient);\\n        emit FeeRecipientSet(_feeRecipient);\\n    }\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external override onlyOwner {\\n        require(delay < MAX_WEIGHT_UPDATE_MIN_DELAY, \\\"delay too long\\\");\\n        require(delay > MIN_WEIGHT_UPDATE_MIN_DELAY, \\\"delay too short\\\");\\n        require(delay != weightUpdateMinDelay, \\\"same delay\\\");\\n        weightUpdateMinDelay = delay;\\n        emit WeightUpdateMinDelaySet(delay);\\n    }\\n\\n    function isPauseManager(address account) external view override returns (bool) {\\n        return _pauseManagers.contains(account);\\n    }\\n\\n    function listPauseManagers() external view override returns (address[] memory) {\\n        return _pauseManagers.values();\\n    }\\n\\n    function setPauseManager(address account, bool isManager) external override onlyOwner {\\n        bool changed = isManager ? _pauseManagers.add(account) : _pauseManagers.remove(account);\\n        if (changed) emit PauseManagerSet(account, isManager);\\n    }\\n\\n    function setAllowedMultipleDepositsWithdraws(address account, bool allowed) external onlyOwner {\\n        bool changed;\\n        if (allowed) changed = _multiDepositsWithdrawsWhitelist.add(account);\\n        else changed = _multiDepositsWithdrawsWhitelist.remove(account);\\n\\n        if (changed) emit MultiDepositsWithdrawsWhitelistSet(account, allowed);\\n    }\\n\\n    function isAllowedMultipleDepositsWithdraws(address account) external view returns (bool) {\\n        return _multiDepositsWithdrawsWhitelist.contains(account);\\n    }\\n\\n    function getMultipleDepositsWithdrawsWhitelist() external view returns (address[] memory) {\\n        return _multiDepositsWithdrawsWhitelist.values();\\n    }\\n\\n    function setMinimumTaintedTransferAmount(\\n        address token,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        require(amount != _minimumTaintedTransferAmount[token], \\\"same amount\\\");\\n\\n        address conicPool = ILpToken(token).minter();\\n        IERC20Metadata underlying = IConicPool(conicPool).underlying();\\n        uint256 underlyingPrice = priceOracle.getUSDPrice(address(underlying));\\n        uint256 scaledAmount = amount.convertScale(underlying.decimals(), 18);\\n        uint256 usdAmount = scaledAmount.mulDown(underlyingPrice);\\n\\n        require(usdAmount <= _MAX_TAINTED_USD_AMOUNT, \\\"amount too high\\\");\\n\\n        _minimumTaintedTransferAmount[token] = amount;\\n        emit MinimumTaintedTransferAmountSet(token, amount);\\n    }\\n\\n    function getMinimumTaintedTransferAmount(address token) external view returns (uint256) {\\n        return _minimumTaintedTransferAmount[token];\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10 ** DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b, uint256 decimals) internal pure returns (uint256) {\\n        return (a * b) / (10 ** decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(uint256 a, uint256 b, uint256 decimals) internal pure returns (uint256) {\\n        return (a * 10 ** decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(int256 a, int256 b, uint256 decimals) internal pure returns (int256) {\\n        return (a * b) / int256(10 ** decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(int256 a, int256 b, uint256 decimals) internal pure returns (int256) {\\n        return (a * int256(10 ** decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10 ** (toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10 ** (fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10 ** (toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10 ** (fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IConicPoolWeightManagement.sol\\\";\\nimport \\\"IConicPool.sol\\\";\\nimport \\\"IGenericOracle.sol\\\";\\nimport \\\"IInflationManager.sol\\\";\\nimport \\\"ILpTokenStaker.sol\\\";\\nimport \\\"IBonding.sol\\\";\\nimport \\\"IPoolAdapter.sol\\\";\\nimport \\\"IFeeRecipient.sol\\\";\\nimport \\\"ICurveRegistryCache.sol\\\";\\n\\ninterface IController {\\n    event PoolAdded(address indexed pool);\\n    event PoolRemoved(address indexed pool);\\n    event PoolShutdown(address indexed pool);\\n    event ConvexBoosterSet(address convexBooster);\\n    event CurveHandlerSet(address curveHandler);\\n    event ConvexHandlerSet(address convexHandler);\\n    event CurveRegistryCacheSet(address curveRegistryCache);\\n    event InflationManagerSet(address inflationManager);\\n    event BondingSet(address bonding);\\n    event FeeRecipientSet(address feeRecipient);\\n    event PriceOracleSet(address priceOracle);\\n    event WeightUpdateMinDelaySet(uint256 weightUpdateMinDelay);\\n    event PauseManagerSet(address indexed manager, bool isManager);\\n    event MultiDepositsWithdrawsWhitelistSet(address pool, bool allowed);\\n    event MinimumTaintedTransferAmountSet(address indexed token, uint256 amount);\\n    event DefaultPoolAdapterSet(address poolAdapter);\\n    event CustomPoolAdapterSet(address indexed pool, address poolAdapter);\\n\\n    struct WeightUpdate {\\n        address conicPoolAddress;\\n        IConicPoolWeightManagement.PoolWeight[] weights;\\n    }\\n\\n    function initialize(address _lpTokenStaker) external;\\n\\n    // inflation manager\\n\\n    function inflationManager() external view returns (IInflationManager);\\n\\n    function setInflationManager(address manager) external;\\n\\n    // views\\n    function curveRegistryCache() external view returns (ICurveRegistryCache);\\n\\n    // pool adapter\\n    function poolAdapterFor(address pool) external view returns (IPoolAdapter);\\n\\n    function defaultPoolAdapter() external view returns (IPoolAdapter);\\n\\n    function setDefaultPoolAdapter(address poolAdapter) external;\\n\\n    function setCustomPoolAdapter(address pool, address poolAdapter) external;\\n\\n    /// lp token staker\\n    function switchLpTokenStaker(address _lpTokenStaker) external;\\n\\n    function lpTokenStaker() external view returns (ILpTokenStaker);\\n\\n    // bonding\\n    function bonding() external view returns (IBonding);\\n\\n    function setBonding(address _bonding) external;\\n\\n    // fees\\n    function feeRecipient() external view returns (IFeeRecipient);\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    // oracle\\n    function priceOracle() external view returns (IGenericOracle);\\n\\n    function setPriceOracle(address oracle) external;\\n\\n    // pool functions\\n\\n    function listPools() external view returns (address[] memory);\\n\\n    function listActivePools() external view returns (address[] memory);\\n\\n    function isPool(address poolAddress) external view returns (bool);\\n\\n    function isActivePool(address poolAddress) external view returns (bool);\\n\\n    function addPool(address poolAddress) external;\\n\\n    function shutdownPool(address poolAddress) external;\\n\\n    function removePool(address poolAddress) external;\\n\\n    function cncToken() external view returns (address);\\n\\n    function lastWeightUpdate(address poolAddress) external view returns (uint256);\\n\\n    function updateWeights(WeightUpdate memory update) external;\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external;\\n\\n    // handler functions\\n\\n    function convexBooster() external view returns (address);\\n\\n    function curveHandler() external view returns (address);\\n\\n    function convexHandler() external view returns (address);\\n\\n    function setConvexBooster(address _convexBooster) external;\\n\\n    function setCurveHandler(address _curveHandler) external;\\n\\n    function setConvexHandler(address _convexHandler) external;\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external;\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external;\\n\\n    function isPauseManager(address account) external view returns (bool);\\n\\n    function listPauseManagers() external view returns (address[] memory);\\n\\n    function setPauseManager(address account, bool isManager) external;\\n\\n    // deposit/withdrawal whitelist\\n    function isAllowedMultipleDepositsWithdraws(address poolAddress) external view returns (bool);\\n\\n    function setAllowedMultipleDepositsWithdraws(address account, bool allowed) external;\\n\\n    function getMultipleDepositsWithdrawsWhitelist() external view returns (address[] memory);\\n\\n    // tainted transfer amount\\n    function setMinimumTaintedTransferAmount(address token, uint256 amount) external;\\n\\n    function getMinimumTaintedTransferAmount(address token) external view returns (uint256);\\n\\n    // constants\\n\\n    function MAX_WEIGHT_UPDATE_MIN_DELAY() external view returns (uint256);\\n\\n    function MIN_WEIGHT_UPDATE_MIN_DELAY() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IConicPoolWeightManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IConicPoolWeightManagement {\\n    struct PoolWeight {\\n        address poolAddress;\\n        uint256 weight;\\n    }\\n\\n    function addPool(address pool) external;\\n\\n    function removePool(address pool) external;\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external;\\n\\n    function handleDepeggedCurvePool(address curvePool_) external;\\n\\n    function handleInvalidConvexPid(address pool) external returns (uint256);\\n\\n    function allPools() external view returns (address[] memory);\\n\\n    function poolsCount() external view returns (uint256);\\n\\n    function getPoolAtIndex(uint256 _index) external view returns (address);\\n\\n    function getWeight(address curvePool) external view returns (uint256);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function isRegisteredPool(address _pool) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IConicPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"ILpToken.sol\\\";\\nimport \\\"IRewardManager.sol\\\";\\nimport \\\"IOracle.sol\\\";\\nimport \\\"IController.sol\\\";\\nimport \\\"IPausable.sol\\\";\\nimport \\\"IConicPoolWeightManagement.sol\\\";\\n\\ninterface IConicPool is IConicPoolWeightManagement, IPausable {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 depositedAmount,\\n        uint256 lpReceived\\n    );\\n    event Withdraw(address indexed account, uint256 amount);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n    event NewMaxIdleCurveLpRatio(uint256 newRatio);\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event HandledDepeggedCurvePool(address curvePool_);\\n    event HandledInvalidConvexPid(address curvePool_, uint256 pid_);\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event Shutdown();\\n    event DepegThresholdUpdated(uint256 newThreshold);\\n    event MaxDeviationUpdated(uint256 newMaxDeviation);\\n    event RebalancingRewardsEnabledSet(bool enabled);\\n    event EmergencyRebalancingRewardFactorUpdated(uint256 factor);\\n\\n    struct PoolWithAmount {\\n        address poolAddress;\\n        uint256 amount;\\n    }\\n\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    function lpToken() external view returns (ILpToken);\\n\\n    function rewardManager() external view returns (IRewardManager);\\n\\n    function depegThreshold() external view returns (uint256);\\n\\n    function maxIdleCurveLpRatio() external view returns (uint256);\\n\\n    function setMaxIdleCurveLpRatio(uint256 value) external;\\n\\n    function setMaxDeviation(uint256 maxDeviation_) external;\\n\\n    function updateDepegThreshold(uint256 value) external;\\n\\n    function depositFor(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _minLpReceived) external returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function usdExchangeRate() external view returns (uint256);\\n\\n    function unstakeAndWithdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function unstakeAndWithdraw(\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount, address _to) external returns (uint256);\\n\\n    function getAllocatedUnderlying() external view returns (PoolWithAmount[] memory);\\n\\n    function rebalancingRewardActive() external view returns (bool);\\n\\n    function totalDeviationAfterWeightUpdate() external view returns (uint256);\\n\\n    function computeTotalDeviation() external view returns (uint256);\\n\\n    /// @notice returns the total amount of funds held by this pool in terms of underlying\\n    function totalUnderlying() external view returns (uint256);\\n\\n    function getTotalAndPerPoolUnderlying()\\n        external\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        );\\n\\n    /// @notice same as `totalUnderlying` but returns a cached version\\n    /// that might be slightly outdated if oracle prices have changed\\n    /// @dev this is useful in cases where we want to reduce gas usage and do\\n    /// not need a precise value\\n    function cachedTotalUnderlying() external view returns (uint256);\\n\\n    function updateRewardSpendingApproval(address token, bool approved) external;\\n\\n    function shutdownPool() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function isBalanced() external view returns (bool);\\n\\n    function rebalancingRewardsEnabled() external view returns (bool);\\n\\n    function setRebalancingRewardsEnabled(bool enabled) external;\\n\\n    function getAllUnderlyingCoins() external view returns (address[] memory result);\\n\\n    function rebalancingRewardsFactor() external view returns (uint256);\\n\\n    function rebalancingRewardsActivatedAt() external view returns (uint64);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function runSanityChecks() external;\\n}\\n\"\r\n    },\r\n    \"ILpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\n\\ninterface ILpToken is IERC20Metadata {\\n    function minter() external view returns (address);\\n\\n    function mint(address account, uint256 amount, address ubo) external returns (uint256);\\n\\n    function burn(address _owner, uint256 _amount, address ubo) external returns (uint256);\\n\\n    function taint(address from, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IRewardManager {\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event SoldRewardTokens(uint256 targetTokenReceived);\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardRemoved(address reward);\\n    event ExtraRewardsCurvePoolSet(address extraReward, address curvePool);\\n    event FeesSet(uint256 feePercentage);\\n    event FeesEnabled(uint256 feePercentage);\\n    event EarningsClaimed(\\n        address indexed claimedBy,\\n        uint256 cncEarned,\\n        uint256 crvEarned,\\n        uint256 cvxEarned\\n    );\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function addExtraReward(address reward) external returns (bool);\\n\\n    function addBatchExtraRewards(address[] memory rewards) external;\\n\\n    function conicPool() external view returns (address);\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function claimableRewards(\\n        address account\\n    ) external view returns (uint256 cncRewards, uint256 crvRewards, uint256 cvxRewards);\\n\\n    function claimEarnings() external returns (uint256, uint256, uint256);\\n\\n    function claimPoolEarningsAndSellRewardTokens() external;\\n\\n    function feePercentage() external view returns (uint256);\\n\\n    function feesEnabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IOracle {\\n    event TokenUpdated(address indexed token, address feed, uint256 maxDelay, bool isEthPrice);\\n\\n    /// @notice returns the price in USD of symbol.\\n    function getUSDPrice(address token) external view returns (uint256);\\n\\n    /// @notice returns if the given token is supported for pricing.\\n    function isTokenSupported(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\nimport \\\"IController.sol\\\";\\n\\ninterface IPausable {\\n    event Paused(uint256 pausedUntil);\\n    event PauseDurationSet(uint256 pauseDuration);\\n\\n    function controller() external view returns (IController);\\n\\n    function pausedUntil() external view returns (uint256);\\n\\n    function pauseDuration() external view returns (uint256);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function setPauseDuration(uint256 _pauseDuration) external;\\n\\n    function pause() external;\\n}\\n\"\r\n    },\r\n    \"IGenericOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IOracle.sol\\\";\\n\\ninterface IGenericOracle is IOracle {\\n    /// @notice returns the oracle to be used to price `token`\\n    function getOracle(address token) external view returns (IOracle);\\n\\n    /// @notice converts the price of an LP token to the given underlying\\n    function curveLpToUnderlying(\\n        address curveLpToken,\\n        address underlying,\\n        uint256 curveLpAmount\\n    ) external view returns (uint256);\\n\\n    /// @notice same as above but avoids fetching the underlying price again\\n    function curveLpToUnderlying(\\n        address curveLpToken,\\n        address underlying,\\n        uint256 curveLpAmount,\\n        uint256 underlyingPrice\\n    ) external view returns (uint256);\\n\\n    /// @notice converts the price an underlying asset to a given Curve LP token\\n    function underlyingToCurveLp(\\n        address underlying,\\n        address curveLpToken,\\n        uint256 underlyingAmount\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IInflationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IInflationManager {\\n    event TokensClaimed(address indexed pool, uint256 cncAmount);\\n    event RebalancingRewardHandlerAdded(address indexed pool, address indexed handler);\\n    event RebalancingRewardHandlerRemoved(address indexed pool, address indexed handler);\\n    event PoolWeightsUpdated();\\n\\n    function executeInflationRateUpdate() external;\\n\\n    function updatePoolWeights() external;\\n\\n    /// @notice returns the weights of the Conic pools to know how much inflation\\n    /// each of them will receive, as well as the total amount of USD value in all the pools\\n    function computePoolWeights()\\n        external\\n        view\\n        returns (address[] memory _pools, uint256[] memory poolWeights, uint256 totalUSDValue);\\n\\n    function computePoolWeight(\\n        address pool\\n    ) external view returns (uint256 poolWeight, uint256 totalUSDValue);\\n\\n    function currentInflationRate() external view returns (uint256);\\n\\n    function getCurrentPoolInflationRate(address pool) external view returns (uint256);\\n\\n    function handleRebalancingRewards(\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n\\n    function addPoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function removePoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function rebalancingRewardHandlers(\\n        address poolAddress\\n    ) external view returns (address[] memory);\\n\\n    function hasPoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address handler\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"ILpTokenStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface ILpTokenStaker {\\n    event LpTokenStaked(address indexed account, uint256 amount);\\n    event LpTokenUnstaked(address indexed account, uint256 amount);\\n    event TokensClaimed(address indexed pool, uint256 cncAmount);\\n    event Shutdown();\\n\\n    function stake(uint256 amount, address conicPool) external;\\n\\n    function unstake(uint256 amount, address conicPool) external;\\n\\n    function stakeFor(uint256 amount, address conicPool, address account) external;\\n\\n    function unstakeFor(uint256 amount, address conicPool, address account) external;\\n\\n    function unstakeFrom(uint256 amount, address account) external;\\n\\n    function getUserBalanceForPool(\\n        address conicPool,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function getBalanceForPool(address conicPool) external view returns (uint256);\\n\\n    function updateBoost(address user) external;\\n\\n    function claimCNCRewardsForPool(address pool) external;\\n\\n    function claimableCnc(address pool) external view returns (uint256);\\n\\n    function checkpoint(address pool) external returns (uint256);\\n\\n    function shutdown() external;\\n\\n    function getBoost(address user) external view returns (uint256);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IBonding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IBonding {\\n    event CncStartPriceSet(uint256 startPrice);\\n    event PriceIncreaseFactorSet(uint256 factor);\\n    event MinBondingAmountSet(uint256 amount);\\n    event Bonded(\\n        address indexed account,\\n        address indexed recipient,\\n        uint256 lpTokenAmount,\\n        uint256 cncReceived,\\n        uint256 lockTime\\n    );\\n    event DebtPoolSet(address indexed pool);\\n    event DebtPoolFeesClaimed(uint256 crvAmount, uint256 cvxAmount, uint256 cncAmount);\\n    event StreamClaimed(address indexed account, uint256 amount);\\n    event BondingStarted(uint256 amount, uint256 epochs);\\n    event RemainingCNCRecovered(uint256 amount);\\n\\n    function startBonding() external;\\n\\n    function setCncStartPrice(uint256 _cncStartPrice) external;\\n\\n    function setCncPriceIncreaseFactor(uint256 _priceIncreaseFactor) external;\\n\\n    function setMinBondingAmount(uint256 _minBondingAmount) external;\\n\\n    function setDebtPool(address _debtPool) external;\\n\\n    function bondCncCrvUsd(\\n        uint256 lpTokenAmount,\\n        uint256 minCncReceived,\\n        uint64 cncLockTime\\n    ) external returns (uint256);\\n\\n    function recoverRemainingCNC() external;\\n\\n    function claimStream() external;\\n\\n    function claimFeesForDebtPool() external;\\n\\n    function streamCheckpoint() external;\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function computeCurrentCncBondPrice() external view returns (uint256);\\n\\n    function cncAvailable() external view returns (uint256);\\n\\n    function cncBondPrice() external view returns (uint256);\\n\\n    function bondCncCrvUsdFor(\\n        uint256 lpTokenAmount,\\n        uint256 minCncReceived,\\n        uint64 cncLockTime,\\n        address recipient\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IPoolAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IPoolAdapter {\\n    /// @notice This is to set which LP token price the value computation should use\\n    /// `Latest` uses a freshly computed price\\n    /// `Cached` uses the price in cache\\n    /// `Minimum` uses the minimum of these two\\n    enum PriceMode {\\n        Latest,\\n        Cached,\\n        Minimum\\n    }\\n\\n    /// @notice Deposit `underlyingAmount` of `underlying` into `pool`\\n    /// @dev This function should be written with the assumption that it will be delegate-called into\\n    function deposit(address pool, address underlying, uint256 underlyingAmount) external;\\n\\n    /// @notice Withdraw `underlyingAmount` of `underlying` from `pool`\\n    /// @dev This function should be written with the assumption that it will be delegate-called into\\n    function withdraw(address pool, address underlying, uint256 underlyingAmount) external;\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of USD\\n    function computePoolValueInUSD(\\n        address conicPool,\\n        address pool\\n    ) external view returns (uint256 usdAmount);\\n\\n    /// @notice Updates the price caches of the given pools\\n    function updatePriceCache(address pool) external;\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of USD\\n    /// using the given price mode\\n    function computePoolValueInUSD(\\n        address conicPool,\\n        address pool,\\n        PriceMode priceMode\\n    ) external view returns (uint256 usdAmount);\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of underlying\\n    function computePoolValueInUnderlying(\\n        address conicPool,\\n        address pool,\\n        address underlying,\\n        uint256 underlyingPrice\\n    ) external view returns (uint256 underlyingAmount);\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of underlying\\n    /// using the given price mode\\n    function computePoolValueInUnderlying(\\n        address conicPool,\\n        address pool,\\n        address underlying,\\n        uint256 underlyingPrice,\\n        PriceMode priceMode\\n    ) external view returns (uint256 underlyingAmount);\\n\\n    /// @notice Claim earnings of `conicPool` from `pool`\\n    function claimEarnings(address conicPool, address pool) external;\\n\\n    /// @notice Returns the LP token of a given `pool`\\n    function lpToken(address pool) external view returns (address);\\n\\n    /// @notice Returns true if `pool` supports `asset`\\n    function supportsAsset(address pool, address asset) external view returns (bool);\\n\\n    /// @notice Returns the amount of CRV earned by `pool` on Convex\\n    function getCRVEarnedOnConvex(\\n        address account,\\n        address curvePool\\n    ) external view returns (uint256);\\n\\n    /// @notice Executes a sanity check, e.g. checking for reentrancy\\n    function executeSanityCheck(address pool) external;\\n\\n    /// @notice returns all the underlying coins of the pool\\n    function getAllUnderlyingCoins(address pool) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"IFeeRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IFeeRecipient {\\n    event FeesReceived(address indexed sender, uint256 crvAmount, uint256 cvxAmount);\\n\\n    function receiveFees(uint256 amountCrv, uint256 amountCvx) external;\\n}\\n\"\r\n    },\r\n    \"ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IBooster.sol\\\";\\nimport \\\"CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    event PoolInitialized(address indexed pool, uint256 indexed pid);\\n\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    ) external view returns (int128, int128, bool);\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n\\n    /// @notice this returns the underlying coins of a pool, including the underlying of the base pool\\n    /// if the given pool is a meta pool\\n    /// This does not return the LP token of the base pool as an underlying\\n    /// e.g. if the pool is 3CrvFrax, this will return FRAX, DAI, USDC, USDT\\n    function getAllUnderlyingCoins(address pool) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IBooster {\\n    function poolInfo(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"ICurvePoolV2.sol\\\";\\nimport \\\"ICurvePoolV1.sol\\\";\\nimport \\\"ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    error NotWithinThreshold(address pool, uint256 assetA, uint256 assetB);\\n\\n    /// @dev by default, allow for 30 bps deviation regardless of pool fees\\n    uint256 internal constant _DEFAULT_IMBALANCE_BUFFER = 30e14;\\n\\n    /// @dev Curve scales the `fee` by 1e10\\n    uint8 internal constant _CURVE_POOL_FEE_DECIMALS = 10;\\n\\n    /// @dev allow imbalance to be buffer + 3x the fee, e.g. if fee is 3.6 bps and buffer is 30 bps, allow 40.8 bps\\n    uint256 internal constant _FEE_IMBALANCE_MULTIPLIER = 3;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] imbalanceBuffers;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 poolFee = ICurvePoolV1(poolMeta.pool).fee().convertScale(\\n            _CURVE_POOL_FEE_DECIMALS,\\n            18\\n        );\\n\\n        for (uint256 i = 0; i < poolMeta.numberOfCoins - 1; i++) {\\n            uint256 fromDecimals = poolMeta.decimals[i];\\n            uint256 fromBalance = 10 ** fromDecimals;\\n            uint256 fromPrice = poolMeta.prices[i];\\n\\n            for (uint256 j = i + 1; j < poolMeta.numberOfCoins; j++) {\\n                uint256 toDecimals = poolMeta.decimals[j];\\n                uint256 toPrice = poolMeta.prices[j];\\n                uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n                uint256 toExpected = toExpectedUnscaled.convertScale(\\n                    uint8(fromDecimals),\\n                    uint8(toDecimals)\\n                );\\n\\n                uint256 toActual;\\n\\n                if (poolMeta.assetType == AssetType.CRYPTO) {\\n                    // Handling crypto pools\\n                    toActual = ICurvePoolV2(poolMeta.pool).get_dy(i, j, fromBalance);\\n                } else {\\n                    // Handling other pools\\n                    toActual = ICurvePoolV1(poolMeta.pool).get_dy(\\n                        int128(uint128(i)),\\n                        int128(uint128(j)),\\n                        fromBalance\\n                    );\\n                }\\n                uint256 _maxImbalanceBuffer = poolMeta.imbalanceBuffers[i].max(\\n                    poolMeta.imbalanceBuffers[j]\\n                );\\n\\n                if (!_isWithinThreshold(toExpected, toActual, poolFee, _maxImbalanceBuffer))\\n                    revert NotWithinThreshold(poolMeta.pool, i, j);\\n            }\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 poolFee,\\n        uint256 imbalanceBuffer\\n    ) internal pure returns (bool) {\\n        if (imbalanceBuffer == 0) imbalanceBuffer = _DEFAULT_IMBALANCE_BUFFER;\\n        uint256 imbalanceTreshold = imbalanceBuffer + poolFee * _FEE_IMBALANCE_MULTIPLIER;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 token_amount,\\n        uint256 i\\n    ) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(int128 i, int128 j, uint256 _dx) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[4] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function fee() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Controller.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cncToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curveRegistryCacheAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"BondingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"convexBooster\",\"type\":\"address\"}],\"name\":\"ConvexBoosterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"convexHandler\",\"type\":\"address\"}],\"name\":\"ConvexHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveHandler\",\"type\":\"address\"}],\"name\":\"CurveHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveRegistryCache\",\"type\":\"address\"}],\"name\":\"CurveRegistryCacheSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAdapter\",\"type\":\"address\"}],\"name\":\"CustomPoolAdapterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAdapter\",\"type\":\"address\"}],\"name\":\"DefaultPoolAdapterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inflationManager\",\"type\":\"address\"}],\"name\":\"InflationManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinimumTaintedTransferAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"MultiDepositsWithdrawsWhitelistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"PauseManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"PriceOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weightUpdateMinDelay\",\"type\":\"uint256\"}],\"name\":\"WeightUpdateMinDelaySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT_UPDATE_MIN_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT_UPDATE_MIN_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonding\",\"outputs\":[{\"internalType\":\"contract IBonding\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cncToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRegistryCache\",\"outputs\":[{\"internalType\":\"contract ICurveRegistryCache\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoolAdapter\",\"outputs\":[{\"internalType\":\"contract IPoolAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinimumTaintedTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultipleDepositsWithdrawsWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationManager\",\"outputs\":[{\"internalType\":\"contract IInflationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpTokenStaker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"isActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowedMultipleDepositsWithdraws\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauseManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWeightUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listActivePools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listPauseManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenStaker\",\"outputs\":[{\"internalType\":\"contract ILpTokenStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolAdapterFor\",\"outputs\":[{\"internalType\":\"contract IPoolAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IGenericOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedMultipleDepositsWithdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonding\",\"type\":\"address\"}],\"name\":\"setBonding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_convexBooster\",\"type\":\"address\"}],\"name\":\"setConvexBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_convexHandler\",\"type\":\"address\"}],\"name\":\"setConvexHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveHandler\",\"type\":\"address\"}],\"name\":\"setCurveHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveRegistryCache_\",\"type\":\"address\"}],\"name\":\"setCurveRegistryCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAdapter\",\"type\":\"address\"}],\"name\":\"setCustomPoolAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAdapter\",\"type\":\"address\"}],\"name\":\"setDefaultPoolAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setInflationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumTaintedTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"setPauseManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setWeightUpdateMinDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"shutdownPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpTokenStaker\",\"type\":\"address\"}],\"name\":\"switchLpTokenStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conicPoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IConicPoolWeightManagement.PoolWeight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IController.WeightUpdate[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"name\":\"updateAllWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conicPoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IConicPoolWeightManagement.PoolWeight[]\",\"name\":\"weights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IController.WeightUpdate\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"updateWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightUpdateMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ae380f0272e2162340a5bb646c354271c0f5cfc00000000000000000000000029e06bba53f73e271859214d9d87a1be636273c0", "EVMVersion": "london", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}