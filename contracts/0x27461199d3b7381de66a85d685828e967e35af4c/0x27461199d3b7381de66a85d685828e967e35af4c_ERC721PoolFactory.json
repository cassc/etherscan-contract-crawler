{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ERC721PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { ClonesWithImmutableArgs } from '@clones/ClonesWithImmutableArgs.sol';\\nimport { IERC165 }                 from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\nimport { IERC721PoolFactory } from './interfaces/pool/erc721/IERC721PoolFactory.sol';\\nimport { IPoolFactory }       from './interfaces/pool/IPoolFactory.sol';\\nimport { PoolType }           from './interfaces/pool/IPool.sol';\\n\\nimport { ERC721Pool }   from './ERC721Pool.sol';\\nimport { PoolDeployer } from './base/PoolDeployer.sol';\\n\\n/**\\n *  @title  ERC721 Pool Factory\\n *  @notice Pool factory contract for creating `ERC721` pools. If a list with token ids is provided then a subset `ERC721` pool is created for the `NFT`.\\n *  @notice Pool factory contract for creating `ERC20` pools.  If a list with token ids is provided then a subset `ERC721` pool is created for the `NFT`. Actors actions:\\n *          - `Pool creators`: create pool by providing a fungible token for quote, a non fungible token for collateral and an interest rate between `1%-10%`.\\n *  @dev    Reverts if pool is already created or if params to deploy new pool are invalid.\\n */\\ncontract ERC721PoolFactory is PoolDeployer, IERC721PoolFactory {\\n\\n    using ClonesWithImmutableArgs for address;\\n\\n    /// @dev `ERC721` clonable pool contract used to deploy the new pool.\\n    ERC721Pool public implementation;\\n\\n    /// @dev Default `bytes32` hash used by `ERC721` `Non-NFTSubset` pool types\\n    bytes32 public constant ERC721_NON_SUBSET_HASH = keccak256(\\\"ERC721_NON_SUBSET_HASH\\\");\\n\\n    constructor(address ajna_) {\\n        if (ajna_ == address(0)) revert DeployWithZeroAddress();\\n\\n        ajna = ajna_;\\n\\n        implementation = new ERC721Pool();\\n    }\\n\\n    /**\\n     *  @inheritdoc IERC721PoolFactory\\n     *  @dev  immutable args: pool type; ajna, collateral and quote address; quote scale; number of token ids in subset\\n     *  @dev    === Write state ===\\n     *  @dev    - `deployedPools` mapping\\n     *  @dev    - `deployedPoolsList` array\\n     *  @dev    === Reverts on ===\\n     *  @dev    - `0x` address provided as quote or collateral `DeployWithZeroAddress()`\\n     *  @dev    - quote lacks `decimals()` method `DecimalsNotCompliant()`\\n     *  @dev    - pool with provided quote / collateral pair already exists `PoolAlreadyExists()`\\n     *  @dev    - invalid interest rate provided `PoolInterestRateInvalid()`\\n     *  @dev    - not supported `NFT` provided `NFTNotSupported()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `PoolCreated`\\n     */\\n    function deployPool(\\n        address collateral_, address quote_, uint256[] memory tokenIds_, uint256 interestRate_\\n    ) external canDeploy(collateral_, quote_, interestRate_) returns (address pool_) {\\n        bytes32 subsetHash = getNFTSubsetHash(tokenIds_);\\n\\n        address existingPool = deployedPools[subsetHash][collateral_][quote_];\\n        if (existingPool != address(0)) revert IPoolFactory.PoolAlreadyExists(existingPool);\\n\\n        uint256 quoteTokenScale = _getTokenScale(quote_);\\n\\n        try IERC165(collateral_).supportsInterface(0x80ac58cd) returns (bool supportsERC721Interface) {\\n            if (!supportsERC721Interface) revert NFTNotSupported();\\n        } catch {\\n            revert NFTNotSupported();\\n        }\\n\\n        bytes memory data = abi.encodePacked(\\n            PoolType.ERC721,\\n            ajna,\\n            collateral_,\\n            quote_,\\n            quoteTokenScale,\\n            tokenIds_.length\\n        );\\n\\n        ERC721Pool pool = ERC721Pool(address(implementation).clone(data));\\n\\n        pool_ = address(pool);\\n\\n        // Track the newly deployed pool\\n        deployedPools[subsetHash][collateral_][quote_] = pool_;\\n        deployedPoolsList.push(pool_);\\n\\n        emit PoolCreated(pool_, subsetHash);\\n\\n        pool.initialize(tokenIds_, interestRate_);\\n    }\\n\\n    /**\\n     *  @dev                Create a new pool that accepts any token in a NFT collection\\n     *  @param collateral_  The NFT collateral token address\\n     *  @param quote_       The borrower quote token address\\n     *  @return pool_       The address of the new pool\\n     */\\n    function deployPool(address collateral_, address quote_, uint256 interestRate_) public returns (address pool_) {\\n        pool_ = this.deployPool(collateral_, quote_, new uint256[](0), interestRate_);\\n    }\\n\\n    /*******************************/\\n    /*** Pool Creation Functions ***/\\n    /*******************************/\\n\\n    /**\\n     *  @notice Get the hash of the subset of `NFT`s that will be used to create the pool.\\n     *  @dev    If no `tokenIds` are provided, the default `ERC721_NON_SUBSET_HASH` is returned.\\n     *  @param  tokenIds_ The array of token ids that will be used to create the pool.\\n     *  @return The hash of the subset of `NFT`s that will be used to create the pool.\\n     */\\n    function getNFTSubsetHash(uint256[] memory tokenIds_) public pure returns (bytes32) {\\n        if (tokenIds_.length == 0) return ERC721_NON_SUBSET_HASH;\\n        else {\\n            // check the array of token ids is sorted in ascending order\\n            // revert if not sorted\\n            _checkTokenIdSortOrder(tokenIds_);\\n\\n            // hash the sorted array of tokenIds\\n            return keccak256(abi.encode(tokenIds_));\\n        }\\n    }\\n\\n    /**\\n     *  @notice Check that the array of token ids is sorted in ascending order, else revert.\\n     *  @dev    The counters are modified in unchecked blocks due to being bounded by array length.\\n     *  @param  tokenIds_ The array of token ids to check for sorting.\\n     */\\n    function _checkTokenIdSortOrder(uint256[] memory tokenIds_) internal pure {\\n        for (uint256 i = 0; i < tokenIds_.length - 1; ) {\\n            if (tokenIds_[i] >= tokenIds_[i + 1]) revert TokenIdSubsetInvalid();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/clones-with-immutable-args/src/ClonesWithImmutableArgs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD\\n\\npragma solidity ^0.8.4;\\n\\n/// @title ClonesWithImmutableArgs\\n/// @author wighawag, zefram.eth\\n/// @notice Enables creating clone contracts with immutable args\\nlibrary ClonesWithImmutableArgs {\\n    error CreateFail();\\n\\n    /// @notice Creates a clone proxy of the implementation contract, with immutable args\\n    /// @dev data cannot exceed 65535 bytes, since 2 bytes are used to store the data length\\n    /// @param implementation The implementation contract to clone\\n    /// @param data Encoded immutable args\\n    /// @return instance The address of the created clone\\n    function clone(address implementation, bytes memory data)\\n        internal\\n        returns (address payable instance)\\n    {\\n        // unrealistic for memory ptr or data length to exceed 256 bits\\n        unchecked {\\n            uint256 extraLength = data.length + 2; // +2 bytes for telling how much data there is appended to the call\\n            uint256 creationSize = 0x41 + extraLength;\\n            uint256 runSize = creationSize - 10;\\n            uint256 dataPtr;\\n            uint256 ptr;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                ptr := mload(0x40)\\n\\n                // -------------------------------------------------------------------------------------------------------------\\n                // CREATION (10 bytes)\\n                // -------------------------------------------------------------------------------------------------------------\\n\\n                // 61 runtime  | PUSH2 runtime (r)     | r                       | \u2013\\n                mstore(\\n                    ptr,\\n                    0x6100000000000000000000000000000000000000000000000000000000000000\\n                )\\n                mstore(add(ptr, 0x01), shl(240, runSize)) // size of the contract running bytecode (16 bits)\\n\\n                // creation size = 0a\\n                // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\\n                // 81          | DUP2                  | r 0 r                   | \u2013\\n                // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\\n                // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\\n                // f3          | RETURN                |                         | [0-runSize): runtime code\\n\\n                // -------------------------------------------------------------------------------------------------------------\\n                // RUNTIME (55 bytes + extraLength)\\n                // -------------------------------------------------------------------------------------------------------------\\n\\n                // 3d          | RETURNDATASIZE        | 0                       | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\\n                // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\\n                // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\\n                // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\\n                // 61          | PUSH2 extra           | extra 0 0 0 0           | [0, cds) = calldata\\n                mstore(\\n                    add(ptr, 0x03),\\n                    0x3d81600a3d39f33d3d3d3d363d3d376100000000000000000000000000000000\\n                )\\n                mstore(add(ptr, 0x13), shl(240, extraLength))\\n\\n                // 60 0x37     | PUSH1 0x37            | 0x37 extra 0 0 0 0      | [0, cds) = calldata // 0x37 (55) is runtime size - data\\n                // 36          | CALLDATASIZE          | cds 0x37 extra 0 0 0 0  | [0, cds) = calldata\\n                // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 61 extra    | PUSH2 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                mstore(\\n                    add(ptr, 0x15),\\n                    0x6037363936610000000000000000000000000000000000000000000000000000\\n                )\\n                mstore(add(ptr, 0x1b), shl(240, extraLength))\\n\\n                // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                mstore(\\n                    add(ptr, 0x1d),\\n                    0x013d730000000000000000000000000000000000000000000000000000000000\\n                )\\n                mstore(add(ptr, 0x20), shl(0x60, implementation))\\n\\n                // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x37) = extraData\\n                // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x37) when rds < cds+0x37)\\n                // 60 0x35     | PUSH1 0x35            | 0x35 sucess 0 rds       | [0, rds) = return data\\n                // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\\n                // fd          | REVERT                | \u2013                       | [0, rds) = return data\\n                // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\\n                // f3          | RETURN                | \u2013                       | [0, rds) = return data\\n                mstore(\\n                    add(ptr, 0x34),\\n                    0x5af43d3d93803e603557fd5bf300000000000000000000000000000000000000\\n                )\\n            }\\n\\n            // -------------------------------------------------------------------------------------------------------------\\n            // APPENDED DATA (Accessible from extcodecopy)\\n            // (but also send as appended data to the delegatecall)\\n            // -------------------------------------------------------------------------------------------------------------\\n\\n            extraLength -= 2;\\n            uint256 counter = extraLength;\\n            uint256 copyPtr = ptr + 0x41;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                dataPtr := add(data, 32)\\n            }\\n            for (; counter >= 32; counter -= 32) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(copyPtr, mload(dataPtr))\\n                }\\n\\n                copyPtr += 32;\\n                dataPtr += 32;\\n            }\\n            uint256 mask = ~(256**(32 - counter) - 1);\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(copyPtr, and(mload(dataPtr), mask))\\n            }\\n            copyPtr += counter;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(copyPtr, shl(240, extraLength))\\n            }\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                instance := create(0, ptr, creationSize)\\n            }\\n            if (instance == address(0)) {\\n                revert CreateFail();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IPoolFactory } from '../IPoolFactory.sol';\\n\\n/**\\n *  @title ERC721 Pool Factory\\n *  @dev   Used to deploy non fungible pools.\\n */\\ninterface IERC721PoolFactory is IPoolFactory {\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    /**\\n     *  @notice User tried to deploy a pool with an array of `tokenIds` that weren't sorted, or contained duplicates.\\n     */\\n    error TokenIdSubsetInvalid();\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Deploys a cloned pool for the given collateral and quote token.\\n     *  @dev    Pool must not already exist, and must use `WETH` instead of `ETH`.\\n     *  @param  collateral_   Address of `NFT` collateral token.\\n     *  @param  quote_        Address of `NFT` quote token.\\n     *  @param  tokenIds_     Ids of subset `NFT` tokens.\\n     *  @param  interestRate_ Initial interest rate of the pool.\\n     *  @return pool_         Address of the newly created pool.\\n     */\\n    function deployPool(\\n        address collateral_,\\n        address quote_,\\n        uint256[] memory tokenIds_,\\n        uint256 interestRate_\\n    ) external returns (address pool_);\\n\\n    /**\\n     *  @notice User attempted to make pool with non supported `NFT` contract as collateral.\\n     */\\n    error NFTNotSupported();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n *  @title Pool Factory Interface.\\n *  @dev   Used to deploy both funigible and non fungible pools.\\n */\\ninterface IPoolFactory {\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n    /**\\n     *  @notice Can't deploy if quote and collateral are the same token.\\n     */\\n    error DeployQuoteCollateralSameToken();\\n\\n    /**\\n     *  @notice Can't deploy with one of the args pointing to the `0x` address.\\n     */\\n    error DeployWithZeroAddress();\\n\\n    /**\\n     *  @notice Can't deploy with token that has no decimals method or decimals greater than 18\\n     */\\n    error DecimalsNotCompliant();\\n\\n    /**\\n     *  @notice Pool with this combination of quote and collateral already exists.\\n     *  @param  pool_ The address of deployed pool.\\n     */\\n    error PoolAlreadyExists(address pool_);\\n\\n    /**\\n     *  @notice Pool starting interest rate is invalid.\\n     */\\n    error PoolInterestRateInvalid();\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @notice Emitted when a new pool is created.\\n     *  @param  pool_ The address of the new pool.\\n     *  @param  subsetHash_ The subset hash for the pool lookup\\n     */\\n    event PoolCreated(address pool_, bytes32 subsetHash_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IPoolBorrowerActions } from './commons/IPoolBorrowerActions.sol';\\nimport { IPoolLPActions }       from './commons/IPoolLPActions.sol';\\nimport { IPoolLenderActions }   from './commons/IPoolLenderActions.sol';\\nimport { IPoolKickerActions }   from './commons/IPoolKickerActions.sol';\\nimport { IPoolTakerActions }    from './commons/IPoolTakerActions.sol';\\nimport { IPoolSettlerActions }  from './commons/IPoolSettlerActions.sol';\\n\\nimport { IPoolImmutables }      from './commons/IPoolImmutables.sol';\\nimport { IPoolState }           from './commons/IPoolState.sol';\\nimport { IPoolDerivedState }    from './commons/IPoolDerivedState.sol';\\nimport { IPoolEvents }          from './commons/IPoolEvents.sol';\\nimport { IPoolErrors }          from './commons/IPoolErrors.sol';\\nimport { IERC3156FlashLender }  from './IERC3156FlashLender.sol';\\n\\n/**\\n * @title Base Pool Interface\\n */\\ninterface IPool is\\n    IPoolBorrowerActions,\\n    IPoolLPActions,\\n    IPoolLenderActions,\\n    IPoolKickerActions,\\n    IPoolTakerActions,\\n    IPoolSettlerActions,\\n    IPoolImmutables,\\n    IPoolState,\\n    IPoolDerivedState,\\n    IPoolEvents,\\n    IPoolErrors,\\n    IERC3156FlashLender\\n{\\n\\n}\\n\\n/// @dev Pool type enum - `ERC20` and `ERC721`\\nenum PoolType { ERC20, ERC721 }\\n\\n/// @dev `ERC20` token interface.\\ninterface IERC20Token {\\n    function balanceOf(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function decimals() external view returns (uint8);\\n}\\n\\n/// @dev `ERC721` token interface.\\ninterface IERC721Token {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/ERC721Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport {\\n    IERC721Token,\\n    IPoolErrors,\\n    IPoolLenderActions,\\n    IPoolKickerActions,\\n    IPoolTakerActions,\\n    IPoolSettlerActions\\n}                           from './interfaces/pool/IPool.sol';\\nimport {\\n    DrawDebtResult,\\n    RepayDebtResult,\\n    SettleParams,\\n    SettleResult,\\n    TakeResult\\n}                           from './interfaces/pool/commons/IPoolInternals.sol';\\nimport { PoolState }        from './interfaces/pool/commons/IPoolState.sol';\\n\\nimport {\\n    IERC721Pool,\\n    IERC721PoolBorrowerActions,\\n    IERC721PoolImmutables,\\n    IERC721PoolLenderActions\\n}                               from './interfaces/pool/erc721/IERC721Pool.sol';\\nimport { IERC721Taker }         from './interfaces/pool/erc721/IERC721Taker.sol';\\nimport { IERC721PoolState }     from './interfaces/pool/erc721/IERC721PoolState.sol';\\n\\nimport { FlashloanablePool } from './base/FlashloanablePool.sol';\\nimport { _roundToScale }     from './libraries/helpers/PoolHelper.sol';\\n\\nimport {\\n    _revertIfAuctionClearable,\\n    _revertAfterExpiry\\n}                               from './libraries/helpers/RevertsHelper.sol';\\n\\nimport { Maths }    from './libraries/internal/Maths.sol';\\nimport { Deposits } from './libraries/internal/Deposits.sol';\\nimport { Loans }    from './libraries/internal/Loans.sol';\\n\\nimport { LenderActions }   from './libraries/external/LenderActions.sol';\\nimport { BorrowerActions } from './libraries/external/BorrowerActions.sol';\\nimport { SettlerActions }  from './libraries/external/SettlerActions.sol';\\nimport { TakerActions }    from './libraries/external/TakerActions.sol';\\n\\n/**\\n *  @title  ERC721 Pool contract\\n *  @notice Entrypoint of `ERC721` Pool actions for pool actors:\\n *          - `Lenders`: add, remove and move quote tokens; transfer `LP`\\n *          - `Borrowers`: draw and repay debt\\n *          - `Traders`: add, remove and move quote tokens; add and remove collateral\\n *          - `Kickers`: auction undercollateralized loans; settle auctions; claim bond rewards\\n *          - `Bidders`: take auctioned collateral\\n *          - `Reserve purchasers`: start auctions; take reserves\\n *          - `Flash borrowers`: initiate flash loans on ERC20 quote tokens\\n *  @dev    Contract is `FlashloanablePool` with flashloan logic.\\n *  @dev    Contract is base `Pool` with logic to handle `ERC721` collateral.\\n *  @dev    Calls logic from external `PoolCommons`, `LenderActions`, `BorrowerActions` and `Auction` actions libraries.\\n */\\ncontract ERC721Pool is FlashloanablePool, IERC721Pool {\\n\\n    /*****************/\\n    /*** Constants ***/\\n    /*****************/\\n\\n    /// @dev Immutable NFT subset pool arg offset.\\n    uint256 internal constant SUBSET = 93;\\n\\n    /***********************/\\n    /*** State Variables ***/\\n    /***********************/\\n\\n    /// @dev Borrower `address => array` of tokenIds pledged by borrower mapping.\\n    mapping(address => uint256[]) public borrowerTokenIds;\\n    /// @dev Array of `tokenIds` in pool buckets (claimable from pool).\\n    uint256[]                     public bucketTokenIds;\\n\\n    /// @dev Mapping of `tokenIds` allowed in `NFT` Subset type pool.\\n    mapping(uint256 => bool)      internal tokenIdsAllowed_;\\n\\n    /****************************/\\n    /*** Initialize Functions ***/\\n    /****************************/\\n\\n    /// @inheritdoc IERC721Pool\\n    function initialize(\\n        uint256[] memory tokenIds_,\\n        uint256 rate_\\n    ) external override {\\n        if (isPoolInitialized) revert AlreadyInitialized();\\n\\n        inflatorState.inflator       = uint208(1e18);\\n        inflatorState.inflatorUpdate = uint48(block.timestamp);\\n\\n        interestState.interestRate       = uint208(rate_);\\n        interestState.interestRateUpdate = uint48(block.timestamp);\\n\\n        uint256 noOfTokens = tokenIds_.length;\\n\\n        if (noOfTokens != 0) {\\n            // add subset of tokenIds allowed in the pool\\n            for (uint256 id = 0; id < noOfTokens;) {\\n                tokenIdsAllowed_[tokenIds_[id]] = true;\\n\\n                unchecked { ++id; }\\n            }\\n        }\\n\\n        Loans.init(loans);\\n\\n        // increment initializations count to ensure these values can't be updated\\n        isPoolInitialized = true;\\n    }\\n\\n    /******************/\\n    /*** Immutables ***/\\n    /******************/\\n\\n    /// @inheritdoc IERC721PoolImmutables\\n    function isSubset() external pure override returns (bool) {\\n        return _getArgUint256(SUBSET) != 0;\\n    }\\n\\n    /***********************************/\\n    /*** Borrower External Functions ***/\\n    /***********************************/\\n\\n    function tokenIdsAllowed(uint256 tokenId_) public view returns (bool) {\\n        return (_getArgUint256(SUBSET) == 0 || tokenIdsAllowed_[tokenId_]);\\n    }\\n\\n    /**\\n     *  @inheritdoc IERC721PoolBorrowerActions\\n     *  @dev    === Write state ===\\n     *  @dev    - decrement `poolBalances.t0DebtInAuction` accumulator\\n     *  @dev    - increment `poolBalances.pledgedCollateral` accumulator\\n     *  @dev    - increment `poolBalances.t0Debt` accumulator\\n     *  @dev    - update `t0Debt2ToCollateral` ratio only if loan not in auction, debt and collateral pre action are considered 0 if auction settled\\n     *  @dev    - update `borrowerTokenIds` and `bucketTokenIds` arrays\\n     *  @dev    === Emit events ===\\n     *  @dev    - `DrawDebtNFT`\\n     */\\n    function drawDebt(\\n        address borrowerAddress_,\\n        uint256 amountToBorrow_,\\n        uint256 limitIndex_,\\n        uint256[] calldata tokenIdsToPledge_\\n    ) external nonReentrant {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        // ensure the borrower is not charged for additional debt that they did not receive\\n        amountToBorrow_ = _roundToScale(amountToBorrow_, poolState.quoteTokenScale);\\n\\n        DrawDebtResult memory result = BorrowerActions.drawDebt(\\n            auctions,\\n            deposits,\\n            loans,\\n            poolState,\\n            _availableQuoteToken(),\\n            borrowerAddress_,\\n            amountToBorrow_,\\n            limitIndex_,\\n            Maths.wad(tokenIdsToPledge_.length)\\n        );\\n\\n        emit DrawDebtNFT(borrowerAddress_, amountToBorrow_, tokenIdsToPledge_, result.newLup);\\n\\n        // update in memory pool state struct\\n        poolState.debt       = result.poolDebt;\\n        poolState.t0Debt     = result.t0PoolDebt;\\n        poolState.collateral = result.poolCollateral;\\n\\n        // adjust t0Debt2ToCollateral ratio\\n        _updateT0Debt2ToCollateral(\\n            result.debtPreAction,\\n            result.debtPostAction,\\n            result.collateralPreAction,\\n            result.collateralPostAction\\n        );\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, result.newLup);\\n\\n        if (tokenIdsToPledge_.length != 0) {\\n            // update pool balances pledged collateral state\\n            poolBalances.pledgedCollateral = poolState.collateral;\\n\\n            // move collateral from sender to pool\\n            _transferFromSenderToPool(borrowerTokenIds[borrowerAddress_], tokenIdsToPledge_);\\n        }\\n\\n        // move borrowed amount from pool to sender\\n        if (amountToBorrow_ != 0) {\\n            // update pool balances t0 debt state\\n            poolBalances.t0Debt = poolState.t0Debt;\\n\\n            // move borrowed amount from pool to sender\\n            _transferQuoteToken(msg.sender, amountToBorrow_);\\n        }\\n    }\\n\\n    /**\\n     *  @inheritdoc IERC721PoolBorrowerActions\\n     *  @dev    === Write state ===\\n     *  @dev    - decrement `poolBalances.t0Debt accumulator`\\n     *  @dev    - decrement `poolBalances.t0DebtInAuction accumulator`\\n     *  @dev    - decrement `poolBalances.pledgedCollateral accumulator`\\n     *  @dev    - update `t0Debt2ToCollateral` ratio only if loan not in auction, debt and collateral pre action are considered 0 if auction settled\\n     *  @dev    - update `borrowerTokenIds` and `bucketTokenIds` arrays\\n     *  @dev    === Emit events ===\\n     *  @dev    - `RepayDebt`\\n     */\\n    function repayDebt(\\n        address borrowerAddress_,\\n        uint256 maxQuoteTokenAmountToRepay_,\\n        uint256 noOfNFTsToPull_,\\n        address collateralReceiver_,\\n        uint256 limitIndex_\\n    ) external nonReentrant returns (uint256 amountRepaid_) {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        // ensure accounting is performed using the appropriate token scale\\n        if (maxQuoteTokenAmountToRepay_ != type(uint256).max)\\n            maxQuoteTokenAmountToRepay_ = _roundToScale(maxQuoteTokenAmountToRepay_, poolState.quoteTokenScale);\\n\\n        RepayDebtResult memory result = BorrowerActions.repayDebt(\\n            auctions,\\n            deposits,\\n            loans,\\n            poolState,\\n            borrowerAddress_,\\n            maxQuoteTokenAmountToRepay_,\\n            Maths.wad(noOfNFTsToPull_),\\n            limitIndex_\\n        );\\n\\n        amountRepaid_        = result.quoteTokenToRepay;\\n        // update in memory pool state struct\\n        poolState.debt       = result.poolDebt;\\n        poolState.t0Debt     = result.t0PoolDebt;\\n        poolState.collateral = result.poolCollateral;\\n\\n        emit RepayDebt(borrowerAddress_, amountRepaid_, noOfNFTsToPull_, result.newLup);\\n\\n        // adjust t0Debt2ToCollateral ratio\\n        _updateT0Debt2ToCollateral(\\n            result.debtPreAction,\\n            result.debtPostAction,\\n            result.collateralPreAction,\\n            result.collateralPostAction\\n        );\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, result.newLup);\\n\\n        // update pool balances pledged collateral state\\n        poolBalances.pledgedCollateral = poolState.collateral;\\n\\n        if (amountRepaid_ != 0) {\\n            // update pool balances t0 debt state\\n            poolBalances.t0Debt = poolState.t0Debt;\\n\\n            // move amount to repay from sender to pool\\n            _transferQuoteTokenFrom(msg.sender, amountRepaid_);\\n        }\\n        if (noOfNFTsToPull_ != 0) {\\n            // move collateral from pool to address specified as collateral receiver\\n            _transferFromPoolToAddress(collateralReceiver_, borrowerTokenIds[msg.sender], noOfNFTsToPull_);\\n        }\\n    }\\n\\n    /*********************************/\\n    /*** Lender External Functions ***/\\n    /*********************************/\\n\\n    /**\\n     *  @inheritdoc IERC721PoolLenderActions\\n     *  @dev    === Write state ===\\n     *  @dev    - update `bucketTokenIds` arrays\\n     *  @dev    === Emit events ===\\n     *  @dev    - `AddCollateralNFT`\\n     */\\n    function addCollateral(\\n        uint256[] calldata tokenIds_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external override nonReentrant returns (uint256 bucketLP_) {\\n        _revertAfterExpiry(expiry_);\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        bucketLP_ = LenderActions.addCollateral(\\n            buckets,\\n            deposits,\\n            Maths.wad(tokenIds_.length),\\n            index_\\n        );\\n\\n        emit AddCollateralNFT(msg.sender, index_, tokenIds_, bucketLP_);\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, Deposits.getLup(deposits, poolState.debt));\\n\\n        // move required collateral from sender to pool\\n        _transferFromSenderToPool(bucketTokenIds, tokenIds_);\\n    }\\n\\n    /**\\n     *  @inheritdoc IERC721PoolLenderActions\\n     *  @dev    === Write state ===\\n     *  @dev    - update `bucketTokenIds` arrays\\n     *  @dev    === Emit events ===\\n     *  @dev    - `MergeOrRemoveCollateralNFT`\\n     */\\n    function mergeOrRemoveCollateral(\\n        uint256[] calldata removalIndexes_,\\n        uint256 noOfNFTsToRemove_,\\n        uint256 toIndex_\\n    ) external override nonReentrant returns (uint256 collateralMerged_, uint256 bucketLP_) {\\n        _revertIfAuctionClearable(auctions, loans);\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n        uint256 collateralAmount = Maths.wad(noOfNFTsToRemove_);\\n\\n        (\\n            collateralMerged_,\\n            bucketLP_\\n        ) = LenderActions.mergeOrRemoveCollateral(\\n            buckets,\\n            deposits,\\n            removalIndexes_,\\n            collateralAmount,\\n            toIndex_\\n        );\\n\\n        emit MergeOrRemoveCollateralNFT(msg.sender, collateralMerged_, bucketLP_);\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, Deposits.getLup(deposits, poolState.debt));\\n\\n        if (collateralMerged_ == collateralAmount) {\\n            // Total collateral in buckets meets the requested removal amount, noOfNFTsToRemove_\\n            _transferFromPoolToAddress(msg.sender, bucketTokenIds, noOfNFTsToRemove_);\\n        }\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolLenderActions\\n     *  @dev    === Write state ===\\n     *  @dev    - update `bucketTokenIds` arrays\\n     *  @dev    === Emit events ===\\n     *  @dev    - `RemoveCollateral`\\n     *  @param noOfNFTsToRemove_ Number of `NFT` tokens to remove.\\n     */\\n    function removeCollateral(\\n        uint256 noOfNFTsToRemove_,\\n        uint256 index_\\n    ) external override nonReentrant returns (uint256 removedAmount_, uint256 redeemedLP_) {\\n        _revertIfAuctionClearable(auctions, loans);\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        removedAmount_ = Maths.wad(noOfNFTsToRemove_);\\n        redeemedLP_ = LenderActions.removeCollateral(\\n            buckets,\\n            deposits,\\n            removedAmount_,\\n            index_\\n        );\\n\\n        emit RemoveCollateral(msg.sender, index_, noOfNFTsToRemove_, redeemedLP_);\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, Deposits.getLup(deposits, poolState.debt));\\n\\n        _transferFromPoolToAddress(msg.sender, bucketTokenIds, noOfNFTsToRemove_);\\n    }\\n\\n    /*******************************/\\n    /*** Pool Auctions Functions ***/\\n    /*******************************/\\n\\n    /**\\n     *  @inheritdoc IPoolSettlerActions\\n     *  @dev    === Write state ===\\n     *  @dev    - decrement `poolBalances.t0Debt` accumulator\\n     *  @dev    - decrement `poolBalances.t0DebtInAuction` accumulator\\n     *  @dev    - decrement `poolBalances.pledgedCollateral` accumulator\\n     *  @dev    - no update of `t0Debt2ToCollateral` ratio as debt and collateral pre settle are not taken into account (pre debt and pre collateral = 0)\\n     */\\n    function settle(\\n        address borrowerAddress_,\\n        uint256 maxDepth_\\n    ) external nonReentrant override returns (uint256 collateralSettled_, bool isBorrowerSettled_) {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        SettleParams memory params = SettleParams({\\n            borrower:    borrowerAddress_,\\n            poolBalance: _getNormalizedPoolQuoteTokenBalance(),\\n            bucketDepth: maxDepth_\\n        });\\n\\n        SettleResult memory result = SettlerActions.settlePoolDebt(\\n            auctions,\\n            buckets,\\n            deposits,\\n            loans,\\n            reserveAuction,\\n            poolState,\\n            params\\n        );\\n\\n        _updatePostSettleState(result, poolState);\\n\\n        // move token ids from borrower array to pool claimable array if any collateral used to settle bad debt\\n        _rebalanceTokens(params.borrower, result.collateralRemaining);\\n\\n        collateralSettled_ = result.collateralSettled;\\n        isBorrowerSettled_ = (result.debtPostAction == 0);\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolTakerActions\\n     *  @dev    === Write state ===\\n     *  @dev    - decrement `poolBalances.t0Debt` accumulator\\n     *  @dev    - decrement `poolBalances.t0DebtInAuction` accumulator\\n     *  @dev    - decrement `poolBalances.pledgedCollateral` accumulator\\n     *  @dev    - update `t0Debt2ToCollateral` ratio only if auction settled, debt and collateral pre action are considered 0\\n     */\\n    function take(\\n        address        borrowerAddress_,\\n        uint256        collateral_,\\n        address        callee_,\\n        bytes calldata data_\\n    ) external override nonReentrant returns (uint256 collateralTaken_) {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        TakeResult memory result = TakerActions.take(\\n            auctions,\\n            buckets,\\n            deposits,\\n            loans,\\n            poolState,\\n            borrowerAddress_,\\n            Maths.wad(collateral_),\\n            1\\n        );\\n\\n        _updatePostTakeState(result, poolState);\\n\\n        // transfer rounded collateral from pool to taker\\n        collateralTaken_ = result.collateralAmount / 1e18;\\n        uint256[] memory tokensTaken = _transferFromPoolToAddress(\\n            callee_,\\n            borrowerTokenIds[borrowerAddress_],\\n            collateralTaken_\\n        );\\n\\n        uint256 totalQuoteTokenAmount = result.quoteTokenAmount + result.excessQuoteToken;\\n\\n        if (data_.length != 0) {\\n            IERC721Taker(callee_).atomicSwapCallback(\\n                tokensTaken,\\n                totalQuoteTokenAmount  / poolState.quoteTokenScale,\\n                data_\\n            );\\n        }\\n\\n        // move borrower token ids to bucket claimable token ids after taking / reducing borrower collateral\\n        _rebalanceTokens(borrowerAddress_, result.remainingCollateral);\\n\\n        // transfer from taker to pool the amount of quote tokens needed to cover collateral auctioned (including excess for rounded collateral)\\n        _transferQuoteTokenFrom(msg.sender, totalQuoteTokenAmount);\\n\\n        // transfer from pool to borrower the excess of quote tokens after rounding collateral auctioned\\n        if (result.excessQuoteToken != 0) _transferQuoteToken(borrowerAddress_, result.excessQuoteToken);\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolTakerActions\\n     *  @dev    === Write state ===\\n     *  @dev    - decrement `poolBalances.t0Debt` accumulator\\n     *  @dev    - decrement `poolBalances.t0DebtInAuction` accumulator\\n     *  @dev    - decrement `poolBalances.pledgedCollateral` accumulator\\n     *  @dev    - update `t0Debt2ToCollateral` ratio only if auction settled, debt and collateral pre action are considered 0\\n     */\\n    function bucketTake(\\n        address borrowerAddress_,\\n        bool    depositTake_,\\n        uint256 index_\\n    ) external override nonReentrant {\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        TakeResult memory result = TakerActions.bucketTake(\\n            auctions,\\n            buckets,\\n            deposits,\\n            loans,\\n            poolState,\\n            borrowerAddress_,\\n            depositTake_,\\n            index_,\\n            1\\n        );\\n\\n        _updatePostTakeState(result, poolState);\\n\\n        // move borrower token ids to bucket claimable token ids after taking / reducing borrower collateral\\n        _rebalanceTokens(borrowerAddress_, result.remainingCollateral);\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Rebalance `NFT` token and transfer difference to floor collateral from borrower to pool claimable array.\\n     *  @dev    === Write state ===\\n     *  @dev    - update `borrowerTokens` and `bucketTokenIds` arrays\\n     *  @param  borrowerAddress_    Address of borrower.\\n     *  @param  borrowerCollateral_ Current borrower collateral to be rebalanced.\\n     */\\n    function _rebalanceTokens(\\n        address borrowerAddress_,\\n        uint256 borrowerCollateral_\\n    ) internal {\\n        // rebalance borrower's collateral, transfer difference to floor collateral from borrower to pool claimable array\\n        uint256[] storage borrowerTokens = borrowerTokenIds[borrowerAddress_];\\n\\n        uint256 noOfTokensPledged    = borrowerTokens.length;\\n        /*\\n            eg1. borrowerCollateral_ = 4.1, noOfTokensPledged = 6; noOfTokensToTransfer = 1\\n            eg2. borrowerCollateral_ = 4, noOfTokensPledged = 6; noOfTokensToTransfer = 2\\n        */\\n        uint256 borrowerCollateralRoundedUp = (borrowerCollateral_ + 1e18 - 1) / 1e18;\\n        uint256 noOfTokensToTransfer = noOfTokensPledged - borrowerCollateralRoundedUp;\\n\\n        for (uint256 i = 0; i < noOfTokensToTransfer;) {\\n            uint256 tokenId = borrowerTokens[--noOfTokensPledged]; // start with moving the last token pledged by borrower\\n            borrowerTokens.pop();                                  // remove token id from borrower\\n            bucketTokenIds.push(tokenId);                          // add token id to pool claimable tokens\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     *  @notice Helper function for transferring multiple `NFT` tokens from msg.sender to pool.\\n     *  @dev    Reverts in case token id is not supported by subset pool.\\n     *  @param  poolTokens_ Array in pool that tracks `NFT` ids (could be tracking `NFT`s pledged by borrower or `NFT`s added by a lender in a specific bucket).\\n     *  @param  tokenIds_   Array of `NFT` token ids to transfer from `msg.sender` to pool.\\n     */\\n    function _transferFromSenderToPool(\\n        uint256[] storage poolTokens_,\\n        uint256[] calldata tokenIds_\\n    ) internal {\\n        for (uint256 i = 0; i < tokenIds_.length;) {\\n            uint256 tokenId = tokenIds_[i];\\n            if (!tokenIdsAllowed(tokenId)) revert OnlySubset();\\n            poolTokens_.push(tokenId);\\n\\n            _transferNFT(msg.sender, address(this), tokenId);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     *  @notice Helper function for transferring multiple `NFT` tokens from pool to given address.\\n     *  @dev    It transfers `NFT`s from the most recent one added into the pool (pop from array tracking `NFT`s in pool).\\n     *  @param  toAddress_      Address where pool should transfer tokens to.\\n     *  @param  poolTokens_     Array in pool that tracks `NFT` ids (could be tracking `NFT`s pledged by borrower or `NFT`s added by a lender in a specific bucket).\\n     *  @param  amountToRemove_ Number of `NFT` tokens to transfer from pool to given address.\\n     *  @return Array containing token ids that were transferred from pool to address.\\n     */\\n    function _transferFromPoolToAddress(\\n        address toAddress_,\\n        uint256[] storage poolTokens_,\\n        uint256 amountToRemove_\\n    ) internal returns (uint256[] memory) {\\n        uint256[] memory tokensTransferred = new uint256[](amountToRemove_);\\n\\n        uint256 noOfNFTsInPool = poolTokens_.length;\\n\\n        for (uint256 i = 0; i < amountToRemove_;) {\\n            uint256 tokenId = poolTokens_[--noOfNFTsInPool]; // start with transferring the last token added in bucket\\n            poolTokens_.pop();\\n\\n            _transferNFT(address(this), toAddress_, tokenId);\\n\\n            tokensTransferred[i] = tokenId;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        return tokensTransferred;\\n    }\\n\\n    /**\\n     *  @notice Helper function to transfer an `NFT` from owner to target address (reused in code to reduce contract deployment bytecode size).\\n     *  @dev    Since `transferFrom` is used instead of `safeTransferFrom`, calling smart contracts must be careful to check that they support any received `NFT`s.\\n     *  @param  from_    `NFT` owner address.\\n     *  @param  to_      New `NFT` owner address.\\n     *  @param  tokenId_ `NFT` token id to be transferred.\\n     */\\n    function _transferNFT(address from_, address to_, uint256 tokenId_) internal {\\n        // slither-disable-next-line calls-loop\\n        IERC721Token(_getArgAddress(COLLATERAL_ADDRESS)).transferFrom(from_, to_, tokenId_);\\n    }\\n\\n    /*******************************/\\n    /*** External View Functions ***/\\n    /*******************************/\\n\\n    /// @inheritdoc IERC721PoolState\\n    function getBorrowerTokenIds(address borrower_) external view override returns(uint256[] memory) {\\n        return borrowerTokenIds[borrower_];\\n    }\\n\\n    /// @inheritdoc IERC721PoolState\\n    function getBucketTokenIds() external view override returns(uint256[] memory) {\\n        return bucketTokenIds;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/base/PoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { IPoolFactory } from '../interfaces/pool/IPoolFactory.sol';\\nimport { IERC20Token }  from '../interfaces/pool/IPool.sol';\\n\\n/**\\n *  @title  Pool Deployer base contract\\n *  @notice Base contract for Pool Deployer, contains logic used by both ERC20 and ERC721 Pool Factories.\\n */\\nabstract contract PoolDeployer {\\n\\n    /// @dev Min interest rate value allowed for deploying the pool (1%)\\n    uint256 public constant MIN_RATE = 0.01 * 1e18;\\n    /// @dev Max interest rate value allowed for deploying the pool (10%)\\n    uint256 public constant MAX_RATE = 0.1  * 1e18;\\n\\n    /// @dev `Ajna` token address\\n    address public ajna; // Ajna token contract address on a network.\\n\\n    /***********************/\\n    /*** State Variables ***/\\n    /***********************/\\n\\n    /// @dev SubsetHash => CollateralAddress => QuoteAddress => Pool Address mapping\\n    // slither-disable-next-line uninitialized-state\\n    mapping(bytes32 => mapping(address => mapping(address => address))) public deployedPools;\\n\\n    /// @notice List of all deployed pools. Separate list is maintained for each factory.\\n    // slither-disable-next-line uninitialized-state\\n    address[] public deployedPoolsList;\\n\\n    /*****************/\\n    /*** Modifiers ***/\\n    /*****************/\\n\\n    /**\\n     * @notice Ensures that pools are deployed according to specifications.\\n     * @dev    Used by both `ERC20` and `ERC721` pool factories.\\n     */\\n    modifier canDeploy(address collateral_, address quote_, uint256 interestRate_) {\\n        if (collateral_ == quote_)                                  revert IPoolFactory.DeployQuoteCollateralSameToken();\\n        if (collateral_ == address(0) || quote_ == address(0))      revert IPoolFactory.DeployWithZeroAddress();\\n        if (MIN_RATE > interestRate_ || interestRate_ > MAX_RATE)   revert IPoolFactory.PoolInterestRateInvalid();\\n        _;\\n    }\\n\\n    /*********************************/\\n    /*** Internal Helper Functions ***/\\n    /*********************************/\\n\\n    /**\\n     * @notice Calculates `ERC20` token scale based on token decimals.\\n     * @dev    Reverts with `DecimalsNotCompliant` if token decimals are more than 18 or token contract lacks `decimals` method.\\n     * @param  token_  `ERC20` token address.\\n     * @return scale_  Calculated token scale. \\n     */\\n    function _getTokenScale(address token_) internal view returns (uint256 scale_) {\\n        try IERC20Token(token_).decimals() returns (uint8 tokenDecimals_) {\\n            // revert if token decimals is more than 18\\n            if (tokenDecimals_ > 18) revert IPoolFactory.DecimalsNotCompliant();\\n\\n            // scale calculated at pool precision (18)\\n            scale_ = 10 ** (18 - tokenDecimals_);\\n        } catch {\\n            // revert if token contract lack `decimals` method\\n            revert IPoolFactory.DecimalsNotCompliant();\\n        }\\n    }\\n\\n    /*******************************/\\n    /*** External View Functions ***/\\n    /*******************************/\\n\\n    /**\\n     * @notice Returns the list of all deployed pools.\\n     * @dev    This function is used by integrations to access deployed pools.\\n     * @dev    Each factory implementation maintains its own list of deployed pools.\\n     * @dev    This method should only be used by off-chain integrations.\\n     * @return List of all deployed pools.\\n     */\\n    function getDeployedPoolsList() external view returns (address[] memory) {\\n        return deployedPoolsList;\\n    }\\n\\n    /**\\n     * @notice Returns the number of deployed pools that have been deployed by a factory.\\n     * @return Length of `deployedPoolsList` array.\\n     */\\n    function getNumberOfDeployedPools() external view returns (uint256) {\\n        return deployedPoolsList.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolBorrowerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Borrower Actions\\n */\\ninterface IPoolBorrowerActions {\\n\\n    /**\\n     *  @notice Called by fully collateralized borrowers to restamp the `Np to Tp ratio` of the loan (only if loan is fully collateralized and not in auction).\\n     *          The reason for stamping the `Np to Tp ratio` on the loan is to provide some certainty to the borrower as to at what price they can expect to be liquidated.\\n     *          This action can restamp only the loan of `msg.sender`.\\n     */\\n    function stampLoan() external;\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolLPActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool `LP` Actions\\n */\\ninterface IPoolLPActions {\\n\\n    /**\\n     *  @notice Called by `LP` owners to approve transfer of an amount of `LP` to a new owner.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  spender_ The new owner of the `LP`.\\n     *  @param  indexes_ Bucket indexes from where `LP` are transferred.\\n     *  @param  amounts_ The amounts of `LP` approved to transfer (`WAD` precision).\\n     */\\n    function increaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to decrease the amount of `LP` that can be spend by a new owner.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  spender_ The new owner of the `LP`.\\n     *  @param  indexes_ Bucket indexes from where `LP` are transferred.\\n     *  @param  amounts_ The amounts of `LP` disapproved to transfer (`WAD` precision).\\n     */\\n    function decreaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to decrease the amount of `LP` that can be spend by a new owner.\\n     *  @param  spender_ Address that is having it's allowance revoked.\\n     *  @param  indexes_ List of bucket index to remove the allowance from.\\n     */\\n    function revokeLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to allow addresses that can transfer LP.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  transferors_ Addresses that are allowed to transfer `LP` to new owner.\\n     */\\n    function approveLPTransferors(\\n        address[] calldata transferors_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to revoke addresses that can transfer `LP`.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  transferors_ Addresses that are revoked to transfer `LP` to new owner.\\n     */\\n    function revokeLPTransferors(\\n        address[] calldata transferors_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to transfers their `LP` to a different address. `approveLpOwnership` needs to be run first.\\n     *  @dev    Used by `PositionManager.memorializePositions()`.\\n     *  @param  owner_    The original owner address of the position.\\n     *  @param  newOwner_ The new owner address of the position.\\n     *  @param  indexes_  Array of price buckets index at which `LP` were moved.\\n     */\\n    function transferLP(\\n        address owner_,\\n        address newOwner_,\\n        uint256[] calldata indexes_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolLenderActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Lender Actions\\n */\\ninterface IPoolLenderActions {\\n\\n    /*********************************************/\\n    /*** Quote/collateral management functions ***/\\n    /*********************************************/\\n\\n    /**\\n     *  @notice Called by lenders to add an amount of credit at a specified price bucket.\\n     *  @param  amount_           The amount of quote token to be added by a lender (`WAD` precision).\\n     *  @param  index_            The index of the bucket to which the quote tokens will be added.\\n     *  @param  expiry_           Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return bucketLP_         The amount of `LP` changed for the added quote tokens (`WAD` precision).\\n     *  @return addedAmount_      The amount of quote token added (`WAD` precision).\\n     */\\n    function addQuoteToken(\\n        uint256 amount_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external returns (uint256 bucketLP_, uint256 addedAmount_);\\n\\n    /**\\n     *  @notice Called by lenders to move an amount of credit from a specified price bucket to another specified price bucket.\\n     *  @param  maxAmount_        The maximum amount of quote token to be moved by a lender (`WAD` precision).\\n     *  @param  fromIndex_        The bucket index from which the quote tokens will be removed.\\n     *  @param  toIndex_          The bucket index to which the quote tokens will be added.\\n     *  @param  expiry_           Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return fromBucketLP_     The amount of `LP` moved out from bucket (`WAD` precision).\\n     *  @return toBucketLP_       The amount of `LP` moved to destination bucket (`WAD` precision).\\n     *  @return movedAmount_      The amount of quote token moved (`WAD` precision).\\n     */\\n    function moveQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 fromIndex_,\\n        uint256 toIndex_,\\n        uint256 expiry_\\n    ) external returns (uint256 fromBucketLP_, uint256 toBucketLP_, uint256 movedAmount_);\\n\\n    /**\\n     *  @notice Called by lenders to claim collateral from a price bucket.\\n     *  @param  maxAmount_     The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) to claim.\\n     *  @param  index_         The bucket index from which collateral will be removed.\\n     *  @return removedAmount_ The amount of collateral removed (`WAD` precision).\\n     *  @return redeemedLP_    The amount of `LP` used for removing collateral amount (`WAD` precision).\\n     */\\n    function removeCollateral(\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external returns (uint256 removedAmount_, uint256 redeemedLP_);\\n\\n    /**\\n     *  @notice Called by lenders to remove an amount of credit at a specified price bucket.\\n     *  @param  maxAmount_     The max amount of quote token to be removed by a lender (`WAD` precision).\\n     *  @param  index_         The bucket index from which quote tokens will be removed.\\n     *  @return removedAmount_ The amount of quote token removed (`WAD` precision).\\n     *  @return redeemedLP_    The amount of `LP` used for removing quote tokens amount (`WAD` precision).\\n     */\\n    function removeQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external returns (uint256 removedAmount_, uint256 redeemedLP_);\\n\\n    /********************************/\\n    /*** Interest update function ***/\\n    /********************************/\\n\\n    /**\\n     *  @notice Called by actors to update pool interest rate (can be updated only once in a `12` hours period of time).\\n     */\\n    function updateInterest() external;\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolKickerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Kicker Actions\\n */\\ninterface IPoolKickerActions {\\n\\n    /********************/\\n    /*** Liquidations ***/\\n    /********************/\\n\\n    /**\\n     *  @notice Called by actors to initiate a liquidation.\\n     *  @param  borrower_     Identifies the loan to liquidate.\\n     *  @param  npLimitIndex_ Index of the lower bound of `NP` tolerated when kicking the auction.\\n     */\\n    function kick(\\n        address borrower_,\\n        uint256 npLimitIndex_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by lenders to liquidate the top loan.\\n     *  @param  index_        The deposit index to use for kicking the top loan.\\n     *  @param  npLimitIndex_ Index of the lower bound of `NP` tolerated when kicking the auction.\\n     */\\n    function lenderKick(\\n        uint256 index_,\\n        uint256 npLimitIndex_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by kickers to withdraw their auction bonds (the amount of quote tokens that are not locked in active auctions).\\n     *  @param  recipient_ Address to receive claimed bonds amount.\\n     *  @param  maxAmount_ The max amount to withdraw from auction bonds (`WAD` precision). Constrained by claimable amounts and liquidity.\\n     *  @return withdrawnAmount_ The amount withdrawn (`WAD` precision).\\n     */\\n    function withdrawBonds(\\n        address recipient_,\\n        uint256 maxAmount_\\n    ) external returns (uint256 withdrawnAmount_);\\n\\n    /***********************/\\n    /*** Reserve Auction ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Called by actor to start a `Claimable Reserve Auction` (`CRA`).\\n     */\\n    function kickReserveAuction() external;\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolTakerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Taker Actions\\n */\\ninterface IPoolTakerActions {\\n\\n    /**\\n     *  @notice Called by actors to use quote token to arb higher-priced deposit off the book.\\n     *  @param  borrowerAddress_  Address of the borower take is being called upon.\\n     *  @param  depositTake_      If `true` then the take will happen at an auction price equal with bucket price. Auction price is used otherwise.\\n     *  @param  index_            Index of a bucket, likely the `HPB`, in which collateral will be deposited.\\n     */\\n    function bucketTake(\\n        address borrowerAddress_,\\n        bool    depositTake_,\\n        uint256 index_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by actors to purchase collateral from the auction in exchange for quote token.\\n     *  @param  borrowerAddress_  Address of the borower take is being called upon.\\n     *  @param  maxAmount_        Max amount of collateral that will be taken from the auction (`WAD` precision for `ERC20` pools, max number of `NFT`s for `ERC721` pools).\\n     *  @param  callee_           Identifies where collateral should be sent and where quote token should be obtained.\\n     *  @param  data_             If provided, take will assume the callee implements `IERC*Taker`.  Take will send collateral to \\n     *                            callee before passing this data to `IERC*Taker.atomicSwapCallback`.  If not provided, \\n     *                            the callback function will not be invoked.\\n     *  @return collateralTaken_  Amount of collateral taken from the auction (`WAD` precision for `ERC20` pools, max number of `NFT`s for `ERC721` pools).\\n     */\\n    function take(\\n        address        borrowerAddress_,\\n        uint256        maxAmount_,\\n        address        callee_,\\n        bytes calldata data_\\n    ) external returns (uint256 collateralTaken_);\\n\\n    /***********************/\\n    /*** Reserve Auction ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Purchases claimable reserves during a `CRA` using `Ajna` token.\\n     *  @param  maxAmount_ Maximum amount of quote token to purchase at the current auction price (`WAD` precision).\\n     *  @return amount_    Actual amount of reserves taken (`WAD` precision).\\n     */\\n    function takeReserves(\\n        uint256 maxAmount_\\n    ) external returns (uint256 amount_);\\n\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolSettlerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Settler Actions\\n */\\ninterface IPoolSettlerActions {\\n\\n    /**\\n     *  @notice Called by actors to settle an amount of debt in a completed liquidation.\\n     *  @param  borrowerAddress_   Address of the auctioned borrower.\\n     *  @param  maxDepth_          Measured from `HPB`, maximum number of buckets deep to settle debt.\\n     *  @return collateralSettled_ Amount of collateral settled.\\n     *  @return isBorrowerSettled_ True if all borrower's debt is settled.\\n     *  @dev    `maxDepth_` is used to prevent unbounded iteration clearing large liquidations.\\n     */\\n    function settle(\\n        address borrowerAddress_,\\n        uint256 maxDepth_\\n    ) external returns (uint256 collateralSettled_, bool isBorrowerSettled_);\\n\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Immutables\\n */\\ninterface IPoolImmutables {\\n\\n    /**\\n     *  @notice Returns the type of the pool (`0` for `ERC20`, `1` for `ERC721`).\\n     */\\n    function poolType() external pure returns (uint8);\\n\\n    /**\\n     *  @notice Returns the address of the pool's collateral token.\\n     */\\n    function collateralAddress() external pure returns (address);\\n\\n    /**\\n     *  @notice Returns the address of the pool's quote token.\\n     */\\n    function quoteTokenAddress() external pure returns (address);\\n\\n    /**\\n     *  @notice Returns the `quoteTokenScale` state variable.\\n     *  @notice Token scale is also the minimum amount a lender may have in a bucket (dust amount).\\n     *  @return The precision of the quote `ERC20` token based on decimals.\\n     */\\n    function quoteTokenScale() external pure returns (uint256);\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool State\\n */\\ninterface IPoolState {\\n\\n    /**\\n     *  @notice Returns details of an auction for a given borrower address.\\n     *  @param  borrower_         Address of the borrower that is liquidated.\\n     *  @return kicker_           Address of the kicker that is kicking the auction.\\n     *  @return bondFactor_       The factor used for calculating bond size.\\n     *  @return bondSize_         The bond amount in quote token terms.\\n     *  @return kickTime_         Time the liquidation was initiated.\\n     *  @return referencePrice_   Price used to determine auction start price.\\n     *  @return neutralPrice_     `Neutral Price` of auction.\\n     *  @return debtToCollateral_ Borrower debt to collateral, which is used in BPF for kicker's reward calculation.\\n     *  @return head_             Address of the head auction.\\n     *  @return next_             Address of the next auction in queue.\\n     *  @return prev_             Address of the prev auction in queue.\\n     */\\n    function auctionInfo(address borrower_)\\n        external\\n        view\\n        returns (\\n            address kicker_,\\n            uint256 bondFactor_,\\n            uint256 bondSize_,\\n            uint256 kickTime_,\\n            uint256 referencePrice_,\\n            uint256 neutralPrice_,\\n            uint256 debtToCollateral_,\\n            address head_,\\n            address next_,\\n            address prev_\\n        );\\n\\n    /**\\n     *  @notice Returns pool related debt values.\\n     *  @return debt_                Current amount of debt owed by borrowers in pool.\\n     *  @return accruedDebt_         Debt owed by borrowers based on last inflator snapshot.\\n     *  @return debtInAuction_       Total amount of debt in auction.\\n     *  @return t0Debt2ToCollateral_ t0debt accross all borrowers divided by their collateral, used in determining a collateralization weighted debt.\\n     */\\n    function debtInfo()\\n        external\\n        view\\n        returns (\\n            uint256 debt_,\\n            uint256 accruedDebt_,\\n            uint256 debtInAuction_,\\n            uint256 t0Debt2ToCollateral_\\n        );\\n\\n    /**\\n     *  @notice Mapping of borrower addresses to `Borrower` structs.\\n     *  @dev    NOTE: Cannot use appended underscore syntax for return params since struct is used.\\n     *  @param  borrower_   Address of the borrower.\\n     *  @return t0Debt_     Amount of debt borrower would have had if their loan was the first debt drawn from the pool.\\n     *  @return collateral_ Amount of collateral that the borrower has deposited, in collateral token.\\n     *  @return npTpRatio_  Np to Tp ratio of borrower at the time of last borrow or pull collateral.\\n     */\\n    function borrowerInfo(address borrower_)\\n        external\\n        view\\n        returns (\\n            uint256 t0Debt_,\\n            uint256 collateral_,\\n            uint256 npTpRatio_\\n        );\\n\\n    /**\\n     *  @notice Mapping of buckets indexes to `Bucket` structs.\\n     *  @dev    NOTE: Cannot use appended underscore syntax for return params since struct is used.\\n     *  @param  index_               Bucket index.\\n     *  @return lpAccumulator_       Amount of `LP` accumulated in current bucket.\\n     *  @return availableCollateral_ Amount of collateral available in current bucket.\\n     *  @return bankruptcyTime_      Timestamp when bucket become insolvent, `0` if healthy.\\n     *  @return bucketDeposit_       Amount of quote tokens in bucket.\\n     *  @return bucketScale_         Bucket multiplier.\\n     */\\n    function bucketInfo(uint256 index_)\\n        external\\n        view\\n        returns (\\n            uint256 lpAccumulator_,\\n            uint256 availableCollateral_,\\n            uint256 bankruptcyTime_,\\n            uint256 bucketDeposit_,\\n            uint256 bucketScale_\\n        );\\n\\n    /**\\n     *  @notice Mapping of burnEventEpoch to `BurnEvent` structs.\\n     *  @dev    Reserve auctions correspond to burn events.\\n     *  @param  burnEventEpoch_  Id of the current reserve auction.\\n     *  @return burnBlock_       Block in which a reserve auction started.\\n     *  @return totalInterest_   Total interest as of the reserve auction.\\n     *  @return totalBurned_     Total ajna tokens burned as of the reserve auction.\\n     */\\n    function burnInfo(uint256 burnEventEpoch_) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n     *  @notice Returns the latest `burnEventEpoch` of reserve auctions.\\n     *  @dev    If a reserve auction is active, it refers to the current reserve auction. If no reserve auction is active, it refers to the last reserve auction.\\n     *  @return Current `burnEventEpoch`.\\n     */\\n    function currentBurnEpoch() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns information about the pool `EMA (Exponential Moving Average)` variables.\\n     *  @return debtColEma_   Debt squared to collateral Exponential, numerator to `TU` calculation.\\n     *  @return lupt0DebtEma_ Exponential of `LUP * t0 debt`, denominator to `TU` calculation\\n     *  @return debtEma_      Exponential debt moving average.\\n     *  @return depositEma_   sample of meaningful deposit Exponential, denominator to `MAU` calculation.\\n     */\\n    function emasInfo()\\n        external\\n        view\\n        returns (\\n            uint256 debtColEma_,\\n            uint256 lupt0DebtEma_,\\n            uint256 debtEma_,\\n            uint256 depositEma_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool inflator.\\n     *  @return inflator_   Pool inflator value.\\n     *  @return lastUpdate_ The timestamp of the last `inflator` update.\\n     */\\n    function inflatorInfo()\\n        external\\n        view\\n        returns (\\n            uint256 inflator_,\\n            uint256 lastUpdate_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool interest rate.\\n     *  @return interestRate_       Current interest rate in pool.\\n     *  @return interestRateUpdate_ The timestamp of the last interest rate update.\\n     */\\n    function interestRateInfo()\\n        external\\n        view\\n        returns (\\n            uint256 interestRate_,\\n            uint256 interestRateUpdate_\\n        );\\n\\n\\n    /**\\n     *  @notice Returns details about kicker balances.\\n     *  @param  kicker_    The address of the kicker to retrieved info for.\\n     *  @return claimable_ Amount of quote token kicker can claim / withdraw from pool at any time.\\n     *  @return locked_    Amount of quote token kicker locked in auctions (as bonds).\\n     */\\n    function kickerInfo(address kicker_)\\n        external\\n        view\\n        returns (\\n            uint256 claimable_,\\n            uint256 locked_\\n        );\\n\\n    /**\\n     *  @notice Mapping of buckets indexes and owner addresses to `Lender` structs.\\n     *  @param  index_       Bucket index.\\n     *  @param  lender_      Address of the liquidity provider.\\n     *  @return lpBalance_   Amount of `LP` owner has in current bucket.\\n     *  @return depositTime_ Time the user last deposited quote token.\\n     */\\n    function lenderInfo(\\n        uint256 index_,\\n        address lender_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lpBalance_,\\n            uint256 depositTime_\\n    );\\n\\n    /**\\n     *  @notice Return the `LP` allowance a `LP` owner provided to a spender.\\n     *  @param  index_     Bucket index.\\n     *  @param  spender_   Address of the `LP` spender.\\n     *  @param  owner_     The initial owner of the `LP`.\\n     *  @return allowance_ Amount of `LP` spender can utilize.\\n     */\\n    function lpAllowance(\\n        uint256 index_,\\n        address spender_,\\n        address owner_\\n    ) external view returns (uint256 allowance_);\\n\\n    /**\\n     *  @notice Returns information about a loan in the pool.\\n     *  @param  loanId_             Loan's id within loan heap. Max loan is position `1`.\\n     *  @return borrower_           Borrower address at the given position.\\n     *  @return t0DebtToCollateral_ Borrower t0 debt to collateral.\\n     */\\n    function loanInfo(\\n        uint256 loanId_\\n    )\\n        external\\n        view\\n        returns (\\n            address borrower_,\\n            uint256 t0DebtToCollateral_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool loans.\\n     *  @return maxBorrower_           Borrower address with highest t0 debt to collateral.\\n     *  @return maxT0DebtToCollateral_ Highest t0 debt to collateral in pool.\\n     *  @return noOfLoans_             Total number of loans.\\n     */\\n    function loansInfo()\\n        external\\n        view\\n        returns (\\n            address maxBorrower_,\\n            uint256 maxT0DebtToCollateral_,\\n            uint256 noOfLoans_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool reserves.\\n     *  @return liquidationBondEscrowed_ Amount of liquidation bond across all liquidators.\\n     *  @return reserveAuctionUnclaimed_ Amount of claimable reserves which has not been taken in the `Claimable Reserve Auction`.\\n     *  @return reserveAuctionKicked_    Time a `Claimable Reserve Auction` was last kicked.\\n     *  @return lastKickedReserves_      Amount of reserves upon last kick, used to calculate price.\\n     *  @return totalInterestEarned_     Total interest earned by all lenders in the pool\\n     */\\n    function reservesInfo()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationBondEscrowed_,\\n            uint256 reserveAuctionUnclaimed_,\\n            uint256 reserveAuctionKicked_,\\n            uint256 lastKickedReserves_,\\n            uint256 totalInterestEarned_\\n    );\\n\\n    /**\\n     *  @notice Returns the `pledgedCollateral` state variable.\\n     *  @return The total pledged collateral in the system, in WAD units.\\n     */\\n    function pledgedCollateral() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the total number of active auctions in pool.\\n     *  @return totalAuctions_ Number of active auctions.\\n     */\\n    function totalAuctionsInPool() external view returns (uint256);\\n\\n     /**\\n     *  @notice Returns the `t0Debt` state variable.\\n     *  @dev    This value should be multiplied by inflator in order to calculate current debt of the pool.\\n     *  @return The total `t0Debt` in the system, in `WAD` units.\\n     */\\n    function totalT0Debt() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the `t0DebtInAuction` state variable.\\n     *  @dev    This value should be multiplied by inflator in order to calculate current debt in auction of the pool.\\n     *  @return The total `t0DebtInAuction` in the system, in `WAD` units.\\n     */\\n    function totalT0DebtInAuction() external view returns (uint256);\\n\\n    /**\\n     *  @notice Mapping of addresses that can transfer `LP` to a given lender.\\n     *  @param  lender_     Lender that receives `LP`.\\n     *  @param  transferor_ Transferor that transfers `LP`.\\n     *  @return True if the transferor is approved by lender.\\n     */\\n    function approvedTransferors(\\n        address lender_,\\n        address transferor_\\n    ) external view returns (bool);\\n\\n}\\n\\n/*********************/\\n/*** State Structs ***/\\n/*********************/\\n\\n/******************/\\n/*** Pool State ***/\\n/******************/\\n\\n/// @dev Struct holding inflator state.\\nstruct InflatorState {\\n    uint208 inflator;       // [WAD] pool's inflator\\n    uint48  inflatorUpdate; // [SEC] last time pool's inflator was updated\\n}\\n\\n/// @dev Struct holding pool interest state.\\nstruct InterestState {\\n    uint208 interestRate;        // [WAD] pool's interest rate\\n    uint48  interestRateUpdate;  // [SEC] last time pool's interest rate was updated (not before 12 hours passed)\\n    uint256 debt;                // [WAD] previous update's debt\\n    uint256 meaningfulDeposit;   // [WAD] previous update's meaningfulDeposit\\n    uint256 t0Debt2ToCollateral; // [WAD] utilization weight accumulator, tracks debt and collateral relationship accross borrowers \\n    uint256 debtCol;             // [WAD] previous debt squared to collateral\\n    uint256 lupt0Debt;           // [WAD] previous LUP * t0 debt\\n}\\n\\n/// @dev Struct holding pool EMAs state.\\nstruct EmaState {\\n    uint256 debtEma;             // [WAD] sample of debt EMA, numerator to MAU calculation\\n    uint256 depositEma;          // [WAD] sample of meaningful deposit EMA, denominator to MAU calculation\\n    uint256 debtColEma;          // [WAD] debt squared to collateral EMA, numerator to TU calculation\\n    uint256 lupt0DebtEma;        // [WAD] EMA of LUP * t0 debt, denominator to TU calculation\\n    uint256 emaUpdate;           // [SEC] last time pool's EMAs were updated\\n}\\n\\n/// @dev Struct holding pool balances state.\\nstruct PoolBalancesState {\\n    uint256 pledgedCollateral; // [WAD] total collateral pledged in pool\\n    uint256 t0DebtInAuction;   // [WAD] Total debt in auction used to restrict LPB holder from withdrawing\\n    uint256 t0Debt;            // [WAD] Pool debt as if the whole amount was incurred upon the first loan\\n}\\n\\n/// @dev Struct holding pool params (in memory only).\\nstruct PoolState {\\n    uint8   poolType;             // pool type, can be ERC20 or ERC721\\n    uint256 t0Debt;               // [WAD] t0 debt in pool\\n    uint256 t0DebtInAuction;      // [WAD] t0 debt in auction within pool\\n    uint256 debt;                 // [WAD] total debt in pool, accrued in current block\\n    uint256 collateral;           // [WAD] total collateral pledged in pool\\n    uint256 inflator;             // [WAD] current pool inflator\\n    bool    isNewInterestAccrued; // true if new interest already accrued in current block\\n    uint256 rate;                 // [WAD] pool's current interest rate\\n    uint256 quoteTokenScale;      // [WAD] quote token scale of the pool. Same as quote token dust.\\n}\\n\\n/*********************/\\n/*** Buckets State ***/\\n/*********************/\\n\\n/// @dev Struct holding lender state.\\nstruct Lender {\\n    uint256 lps;         // [WAD] Lender LP accumulator\\n    uint256 depositTime; // timestamp of last deposit\\n}\\n\\n/// @dev Struct holding bucket state.\\nstruct Bucket {\\n    uint256 lps;                        // [WAD] Bucket LP accumulator\\n    uint256 collateral;                 // [WAD] Available collateral tokens deposited in the bucket\\n    uint256 bankruptcyTime;             // Timestamp when bucket become insolvent, 0 if healthy\\n    mapping(address => Lender) lenders; // lender address to Lender struct mapping\\n}\\n\\n/**********************/\\n/*** Deposits State ***/\\n/**********************/\\n\\n/// @dev Struct holding deposits (Fenwick) values and scaling.\\nstruct DepositsState {\\n    uint256[8193] values;  // Array of values in the FenwickTree.\\n    uint256[8193] scaling; // Array of values which scale (multiply) the FenwickTree accross indexes.\\n}\\n\\n/*******************/\\n/*** Loans State ***/\\n/*******************/\\n\\n/// @dev Struct holding loans state.\\nstruct LoansState {\\n    Loan[] loans;\\n    mapping (address => uint)     indices;   // borrower address => loan index mapping\\n    mapping (address => Borrower) borrowers; // borrower address => Borrower struct mapping\\n}\\n\\n/// @dev Struct holding loan state.\\nstruct Loan {\\n    address borrower;           // borrower address\\n    uint96  t0DebtToCollateral; // [WAD] Borrower t0 debt to collateral.\\n}\\n\\n/// @dev Struct holding borrower state.\\nstruct Borrower {\\n    uint256 t0Debt;                    // [WAD] Borrower debt time-adjusted as if it was incurred upon first loan of pool.\\n    uint256 collateral;                // [WAD] Collateral deposited by borrower.\\n    uint256 npTpRatio;                 // [WAD] Np to Tp ratio at the time of last borrow or pull collateral.\\n}\\n\\n/**********************/\\n/*** Auctions State ***/\\n/**********************/\\n\\n/// @dev Struct holding pool auctions state.\\nstruct AuctionsState {\\n    uint96  noOfAuctions;                         // total number of auctions in pool\\n    address head;                                 // first address in auction queue\\n    address tail;                                 // last address in auction queue\\n    uint256 totalBondEscrowed;                    // [WAD] total amount of quote token posted as auction kick bonds\\n    mapping(address => Liquidation) liquidations; // mapping of borrower address and auction details\\n    mapping(address => Kicker)      kickers;      // mapping of kicker address and kicker balances\\n}\\n\\n/// @dev Struct holding liquidation state.\\nstruct Liquidation {\\n    address kicker;                // address that initiated liquidation\\n    uint96  bondFactor;            // [WAD] bond factor used to start liquidation\\n    uint96  kickTime;              // timestamp when liquidation was started\\n    address prev;                  // previous liquidated borrower in auctions queue\\n    uint96  referencePrice;        // [WAD] used to calculate auction start price\\n    address next;                  // next liquidated borrower in auctions queue\\n    uint160 bondSize;              // [WAD] liquidation bond size\\n    uint96  neutralPrice;          // [WAD] Neutral Price when liquidation was started\\n    uint256 debtToCollateral;      // [WAD] Borrower debt to collateral, which is used in BPF for kicker's reward calculation\\n    uint256 t0ReserveSettleAmount; // [WAD] Amount of t0Debt that could be settled via reserves in this auction\\n}\\n\\n/// @dev Struct holding kicker state.\\nstruct Kicker {\\n    uint256 claimable; // [WAD] kicker's claimable balance\\n    uint256 locked;    // [WAD] kicker's balance of tokens locked in auction bonds\\n}\\n\\n/******************************/\\n/*** Reserve Auctions State ***/\\n/******************************/\\n\\n/// @dev Struct holding reserve auction state.\\nstruct ReserveAuctionState {\\n    uint256 kicked;                            // Time a Claimable Reserve Auction was last kicked.\\n    uint256 lastKickedReserves;                // [WAD] Amount of reserves upon last kick, used to calculate price.\\n    uint256 unclaimed;                         // [WAD] Amount of claimable reserves which has not been taken in the Claimable Reserve Auction.\\n    uint256 latestBurnEventEpoch;              // Latest burn event epoch.\\n    uint256 totalAjnaBurned;                   // [WAD] Total ajna burned in the pool.\\n    uint256 totalInterestEarned;               // [WAD] Total interest earned by all lenders in the pool.\\n    mapping (uint256 => BurnEvent) burnEvents; // Mapping burnEventEpoch => BurnEvent.\\n}\\n\\n/// @dev Struct holding burn event state.\\nstruct BurnEvent {\\n    uint256 timestamp;     // time at which the burn event occured\\n    uint256 totalInterest; // [WAD] current pool interest accumulator `PoolCommons.accrueInterest().newInterest`\\n    uint256 totalBurned;   // [WAD] burn amount accumulator\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Derived State\\n */\\ninterface IPoolDerivedState {\\n\\n    /**\\n     *  @notice Returns the exchange rate for a given bucket index.\\n     *  @param  index_        The bucket index.\\n     *  @return exchangeRate_ Exchange rate of the bucket (`WAD` precision).\\n     */\\n    function bucketExchangeRate(\\n        uint256 index_\\n    ) external view returns (uint256 exchangeRate_);\\n\\n    /**\\n     *  @notice Returns the prefix sum of a given bucket.\\n     *  @param  index_   The bucket index.\\n     *  @return The deposit up to given index (`WAD` precision).\\n     */\\n    function depositUpToIndex(\\n        uint256 index_\\n    ) external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the bucket index for a given debt amount.\\n     *  @param  debt_  The debt amount to calculate bucket index for (`WAD` precision).\\n     *  @return Bucket index.\\n     */\\n    function depositIndex(\\n        uint256 debt_\\n    ) external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the total amount of quote tokens deposited in pool.\\n     *  @return Total amount of deposited quote tokens (`WAD` precision).\\n     */\\n    function depositSize() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the meaningful actual utilization of the pool.\\n     *  @return Deposit utilization (`WAD` precision).\\n     */\\n    function depositUtilization() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the scaling value of deposit at given index.\\n     *  @param  index_  Deposit index.\\n     *  @return Deposit scaling (`WAD` precision).\\n     */\\n    function depositScale(\\n        uint256 index_\\n    ) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Events\\n */\\ninterface IPoolEvents {\\n\\n    /*********************/\\n    /*** Lender events ***/\\n    /*********************/\\n\\n    /**\\n     *  @notice Emitted when lender adds quote token to the pool.\\n     *  @param  lender    Recipient that added quote tokens.\\n     *  @param  index     Index at which quote tokens were added.\\n     *  @param  amount    Amount of quote tokens added to the pool (`WAD` precision).\\n     *  @param  lpAwarded Amount of `LP` awarded for the deposit (`WAD` precision).\\n     *  @param  lup       `LUP` calculated after deposit.\\n     */\\n    event AddQuoteToken(\\n        address indexed lender,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpAwarded,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender moves quote token from a bucket price to another.\\n     *  @param  lender         Recipient that moved quote tokens.\\n     *  @param  from           Price bucket from which quote tokens were moved.\\n     *  @param  to             Price bucket where quote tokens were moved.\\n     *  @param  amount         Amount of quote tokens moved (`WAD` precision).\\n     *  @param  lpRedeemedFrom Amount of `LP` removed from the `from` bucket (`WAD` precision).\\n     *  @param  lpAwardedTo    Amount of `LP` credited to the `to` bucket (`WAD` precision).\\n     *  @param  lup            `LUP` calculated after removal.\\n     */\\n    event MoveQuoteToken(\\n        address indexed lender,\\n        uint256 indexed from,\\n        uint256 indexed to,\\n        uint256 amount,\\n        uint256 lpRedeemedFrom,\\n        uint256 lpAwardedTo,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes quote token from the pool.\\n     *  @param  lender     Recipient that removed quote tokens.\\n     *  @param  index      Index at which quote tokens were removed.\\n     *  @param  amount     Amount of quote tokens removed from the pool (`WAD` precision).\\n     *  @param  lpRedeemed Amount of `LP` exchanged for quote token (`WAD` precision).\\n     *  @param  lup        `LUP` calculated after removal.\\n     */\\n    event RemoveQuoteToken(\\n        address indexed lender,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpRedeemed,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender claims collateral from a bucket.\\n     *  @param  claimer    Recipient that claimed collateral.\\n     *  @param  index      Index at which collateral was claimed.\\n     *  @param  amount     The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) transferred to the claimer.\\n     *  @param  lpRedeemed Amount of `LP` exchanged for quote token (`WAD` precision).\\n     */\\n    event RemoveCollateral(\\n        address indexed claimer,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpRedeemed\\n    );\\n\\n    /***********************/\\n    /*** Borrower events ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Emitted when borrower repays quote tokens to the pool and/or pulls collateral from the pool.\\n     *  @param  borrower         `msg.sender` or on behalf of sender.\\n     *  @param  quoteRepaid      Amount of quote tokens repaid to the pool (`WAD` precision).\\n     *  @param  collateralPulled The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) transferred to the claimer.\\n     *  @param  lup              `LUP` after repay.\\n     */\\n    event RepayDebt(\\n        address indexed borrower,\\n        uint256 quoteRepaid,\\n        uint256 collateralPulled,\\n        uint256 lup\\n    );\\n\\n    /**********************/\\n    /*** Auction events ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Emitted when a liquidation is initiated.\\n     *  @param  borrower   Identifies the loan being liquidated.\\n     *  @param  debt       Debt the liquidation will attempt to cover (`WAD` precision).\\n     *  @param  collateral Amount of collateral up for liquidation (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools).\\n     *  @param  bond       Bond amount locked by kicker (`WAD` precision).\\n     */\\n    event Kick(\\n        address indexed borrower,\\n        uint256 debt,\\n        uint256 collateral,\\n        uint256 bond\\n    );\\n\\n    /**\\n     *  @notice Emitted when kickers are withdrawing funds posted as auction bonds.\\n     *  @param  kicker   The kicker withdrawing bonds.\\n     *  @param  reciever The address receiving withdrawn bond amount.\\n     *  @param  amount   The bond amount that was withdrawn (`WAD` precision).\\n     */\\n    event BondWithdrawn(\\n        address indexed kicker,\\n        address indexed reciever,\\n        uint256 amount\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor uses quote token to arb higher-priced deposit off the book.\\n     *  @param  borrower    Identifies the loan being liquidated.\\n     *  @param  index       The index of the `Highest Price Bucket` used for this take.\\n     *  @param  amount      Amount of quote token used to purchase collateral (`WAD` precision).\\n     *  @param  collateral  Amount of collateral purchased with quote token (`WAD` precision).\\n     *  @param  bondChange  Impact of this take to the liquidation bond (`WAD` precision).\\n     *  @param  isReward    `True` if kicker was rewarded with `bondChange` amount, `false` if kicker was penalized.\\n     *  @dev    amount / collateral implies the auction price.\\n     */\\n    event BucketTake(\\n        address indexed borrower,\\n        uint256 index,\\n        uint256 amount,\\n        uint256 collateral,\\n        uint256 bondChange,\\n        bool    isReward\\n    );\\n\\n    /**\\n     *  @notice Emitted when `LP` are awarded to a taker or kicker in a bucket take.\\n     *  @param  taker           Actor who invoked the bucket take.\\n     *  @param  kicker          Actor who started the auction.\\n     *  @param  lpAwardedTaker  Amount of `LP` awarded to the taker (`WAD` precision).\\n     *  @param  lpAwardedKicker Amount of `LP` awarded to the actor who started the auction (`WAD` precision).\\n     */\\n    event BucketTakeLPAwarded(\\n        address indexed taker,\\n        address indexed kicker,\\n        uint256 lpAwardedTaker,\\n        uint256 lpAwardedKicker\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor uses quote token outside of the book to purchase collateral under liquidation.\\n     *  @param  borrower   Identifies the loan being liquidated.\\n     *  @param  amount     Amount of quote token used to purchase collateral (`WAD` precision).\\n     *  @param  collateral Amount of collateral purchased with quote token (for `ERC20` pool, `WAD` precision) or number of `NFT`s purchased (for `ERC721` pool).\\n     *  @param  bondChange Impact of this take to the liquidation bond (`WAD` precision).\\n     *  @param  isReward   `True` if kicker was rewarded with `bondChange` amount, `false` if kicker was penalized.\\n     *  @dev    amount / collateral implies the auction price.\\n     */\\n    event Take(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 collateral,\\n        uint256 bondChange,\\n        bool    isReward\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor settles debt in a completed liquidation\\n     *  @param  borrower    Identifies the loan under liquidation.\\n     *  @param  settledDebt Amount of pool debt settled in this transaction (`WAD` precision).\\n     *  @dev    When `amountRemaining_ == 0`, the auction has been completed cleared and removed from the queue.\\n     */\\n    event Settle(\\n        address indexed borrower,\\n        uint256 settledDebt\\n    );\\n\\n    /**\\n     *  @notice Emitted when auction is completed.\\n     *  @param  borrower   Address of borrower that exits auction.\\n     *  @param  collateral Borrower's remaining collateral when auction completed (`WAD` precision).\\n     */\\n    event AuctionSettle(\\n        address indexed borrower,\\n        uint256 collateral\\n    );\\n\\n    /**\\n     *  @notice Emitted when `NFT` auction is completed.\\n     *  @param  borrower   Address of borrower that exits auction.\\n     *  @param  collateral Borrower's remaining collateral when auction completed.\\n     *  @param  lp         Amount of `LP` given to the borrower to compensate fractional collateral (if any, `WAD` precision).\\n     *  @param  index      Index of the bucket with `LP` to compensate fractional collateral.\\n     */\\n    event AuctionNFTSettle(\\n        address indexed borrower,\\n        uint256 collateral,\\n        uint256 lp,\\n        uint256 index\\n    );\\n\\n    /**\\n     *  @notice Emitted when a `Claimaible Reserve Auction` is started.\\n     *  @param  claimableReservesRemaining Amount of claimable reserves which has not yet been taken (`WAD` precision).\\n     *  @param  auctionPrice               Current price at which `1` quote token may be purchased, denominated in `Ajna`.\\n     *  @param  currentBurnEpoch           Current burn epoch.\\n     */\\n    event KickReserveAuction(\\n        uint256 claimableReservesRemaining,\\n        uint256 auctionPrice,\\n        uint256 currentBurnEpoch\\n    );\\n\\n    /**\\n     *  @notice Emitted when a `Claimaible Reserve Auction` is taken.\\n     *  @param  claimableReservesRemaining Amount of claimable reserves which has not yet been taken (`WAD` precision).\\n     *  @param  auctionPrice               Current price at which `1` quote token may be purchased, denominated in `Ajna`.\\n     *  @param  currentBurnEpoch           Current burn epoch.\\n     */\\n    event ReserveAuction(\\n        uint256 claimableReservesRemaining,\\n        uint256 auctionPrice,\\n        uint256 currentBurnEpoch\\n    );\\n\\n    /**************************/\\n    /*** LP transfer events ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Emitted when owner increase the `LP` allowance of a spender at specified indexes with specified amounts.\\n     *  @param  owner     `LP` owner.\\n     *  @param  spender   Address approved to transfer `LP`.\\n     *  @param  indexes   Bucket indexes of `LP` approved.\\n     *  @param  amounts   `LP` amounts added (ordered by indexes, `WAD` precision).\\n     */\\n    event IncreaseLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     *  @notice Emitted when owner decrease the `LP` allowance of a spender at specified indexes with specified amounts.\\n     *  @param  owner     `LP` owner.\\n     *  @param  spender   Address approved to transfer `LP`.\\n     *  @param  indexes   Bucket indexes of `LP` approved.\\n     *  @param  amounts   `LP` amounts removed (ordered by indexes, `WAD` precision).\\n     */\\n    event DecreaseLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes the allowance of a spender for their `LP`.\\n     *  @param  owner   `LP` owner.\\n     *  @param  spender Address that is having it's allowance revoked.\\n     *  @param  indexes List of bucket index to remove the allowance from.\\n     */\\n    event RevokeLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender whitelists addresses to accept `LP` from.\\n     *  @param  lender      Recipient that approves new owner for `LP`.\\n     *  @param  transferors List of addresses that can transfer `LP` to lender.\\n     */\\n    event ApproveLPTransferors(\\n        address indexed lender,\\n        address[] transferors\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes addresses from the `LP` transferors whitelist.\\n     *  @param  lender      Recipient that approves new owner for `LP`.\\n     *  @param  transferors List of addresses that won't be able to transfer `LP` to lender anymore.\\n     */\\n    event RevokeLPTransferors(\\n        address indexed lender,\\n        address[] transferors\\n    );\\n\\n    /**\\n     *  @notice Emitted when a lender transfers their `LP` to a different address.\\n     *  @dev    Used by `PositionManager.memorializePositions()`.\\n     *  @param  owner    The original owner address of the position.\\n     *  @param  newOwner The new owner address of the position.\\n     *  @param  indexes  Array of price bucket indexes at which `LP` were transferred.\\n     *  @param  lp       Amount of `LP` transferred (`WAD` precision).\\n     */\\n    event TransferLP(\\n        address owner,\\n        address newOwner,\\n        uint256[] indexes,\\n        uint256 lp\\n    );\\n\\n    /**************************/\\n    /*** Pool common events ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Emitted when `LP` are forfeited as a result of the bucket losing all assets.\\n     *  @param  index       The index of the bucket.\\n     *  @param  lpForfeited Amount of `LP` forfeited by lenders (`WAD` precision).\\n     */\\n    event BucketBankruptcy(\\n        uint256 indexed index,\\n        uint256 lpForfeited\\n    );\\n\\n    /**\\n     *  @notice Emitted when a flashloan is taken from pool.\\n     *  @param  receiver The address receiving the flashloan.\\n     *  @param  token    The address of token flashloaned from pool.\\n     *  @param  amount   The amount of tokens flashloaned from pool (token precision).\\n     */\\n    event Flashloan(\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     *  @notice Emitted when a loan `Np to Tp ratio` is restamped.\\n     *  @param  borrower Identifies the loan to update the `Np to Tp ratio`.\\n     */\\n    event LoanStamped(\\n        address indexed borrower\\n    );\\n\\n    /**\\n     *  @notice Emitted when pool interest rate is reset. This happens when `interest rate > 10%` and `debtEma < 5%` of `depositEma`\\n     *  @param  oldRate Old pool interest rate.\\n     *  @param  newRate New pool interest rate.\\n     */\\n    event ResetInterestRate(\\n        uint256 oldRate,\\n        uint256 newRate\\n    );\\n\\n    /**\\n     *  @notice Emitted when pool interest rate is updated.\\n     *  @param  oldRate Old pool interest rate.\\n     *  @param  newRate New pool interest rate.\\n     */\\n    event UpdateInterestRate(\\n        uint256 oldRate,\\n        uint256 newRate\\n    );\\n\\n    /**\\n     *  @notice Emitted when interest accural or update interest overflows.\\n     */\\n    event InterestUpdateFailure();\\n\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Errors.\\n */\\ninterface IPoolErrors {\\n    /**************************/\\n    /*** Common Pool Errors ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Adding liquidity above current auction price.\\n     */\\n    error AddAboveAuctionPrice();\\n\\n    /**\\n     *  @notice The action cannot be executed on an active auction.\\n     */\\n    error AuctionActive();\\n\\n    /**\\n     *  @notice Attempted auction to clear doesn't meet conditions.\\n     */\\n    error AuctionNotClearable();\\n\\n    /**\\n     *  @notice Auction does not meet requirements to take liquidity.\\n     */\\n    error AuctionNotTakeable();\\n\\n    /**\\n     *  @notice Head auction should be cleared prior of executing this action.\\n     */\\n    error AuctionNotCleared();\\n\\n    /**\\n     *  @notice The auction price is greater than the arbed bucket price.\\n     */\\n    error AuctionPriceGtBucketPrice();\\n\\n    /**\\n     *  @notice Pool already initialized.\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     *  @notice Borrower is attempting to create or modify a loan such that their loan's quote token would be less than the pool's minimum debt amount.\\n     */\\n    error AmountLTMinDebt();\\n\\n    /**\\n     *  @notice Recipient of borrowed quote tokens doesn't match the caller of the `drawDebt` function.\\n     */\\n    error BorrowerNotSender();\\n\\n    /**\\n     *  @notice Borrower has a healthy over-collateralized position.\\n     */\\n    error BorrowerOk();\\n\\n    /**\\n     *  @notice Borrower is attempting to borrow more quote token than they have collateral for.\\n     */\\n    error BorrowerUnderCollateralized();\\n\\n    /**\\n     *  @notice Operation cannot be executed in the same block when bucket becomes insolvent.\\n     */\\n    error BucketBankruptcyBlock();\\n\\n    /**\\n     *  @notice User attempted to merge collateral from a lower price bucket into a higher price bucket.\\n     */\\n    error CannotMergeToHigherPrice();\\n\\n    /**\\n     *  @notice User attempted an operation which does not exceed the dust amount, or leaves behind less than the dust amount.\\n     */\\n    error DustAmountNotExceeded();\\n\\n    /**\\n     *  @notice Callback invoked by `flashLoan` function did not return the expected hash (see `ERC-3156` spec).\\n     */\\n    error FlashloanCallbackFailed();\\n\\n    /**\\n     *  @notice Balance of pool contract before flashloan is different than the balance after flashloan.\\n     */\\n    error FlashloanIncorrectBalance();\\n\\n    /**\\n     *  @notice Pool cannot facilitate a flashloan for the specified token address.\\n     */\\n    error FlashloanUnavailableForToken();\\n\\n    /**\\n     *  @notice User is attempting to move or pull more collateral than is available.\\n     */\\n    error InsufficientCollateral();\\n\\n    /**\\n     *  @notice Lender is attempting to move or remove more collateral they have claim to in the bucket.\\n     *  @notice Lender is attempting to remove more collateral they have claim to in the bucket.\\n     *  @notice Lender must have enough `LP` to claim the desired amount of quote from the bucket.\\n     */\\n    error InsufficientLP();\\n\\n    /**\\n     *  @notice Bucket must have more quote available in the bucket than the lender is attempting to claim.\\n     */\\n    error InsufficientLiquidity();\\n\\n    /**\\n     *  @notice When increasing / decreasing `LP` allowances indexes and amounts arrays parameters should have same length.\\n     */\\n    error InvalidAllowancesInput();\\n\\n    /**\\n     *  @notice When transferring `LP` between indices, the new index must be a valid index.\\n     */\\n    error InvalidIndex();\\n\\n    /**\\n     *  @notice The amount used for performed action should be greater than `0`.\\n     */\\n    error InvalidAmount();\\n\\n    /**\\n     *  @notice Borrower is attempting to borrow more quote token than is available before the supplied `limitIndex`.\\n     */\\n    error LimitIndexExceeded();\\n\\n    /**\\n     *  @notice When moving quote token `HTP` must stay below `LUP`.\\n     *  @notice When removing quote token `HTP` must stay below `LUP`.\\n     */\\n    error LUPBelowHTP();\\n\\n    /**\\n     *  @notice From index and to index arguments to move are the same.\\n     */\\n    error MoveToSameIndex();\\n\\n    /**\\n     *  @notice Owner of the `LP` must have approved the new owner prior to transfer.\\n     */\\n    error NoAllowance();\\n\\n    /**\\n     *  @notice Actor is attempting to take or clear an inactive auction.\\n     */\\n    error NoAuction();\\n\\n    /**\\n     *  @notice No pool reserves are claimable.\\n     */\\n    error NoReserves();\\n\\n    /**\\n     *  @notice Actor is attempting to take or clear an inactive reserves auction.\\n     */\\n    error NoReservesAuction();\\n\\n    /**\\n     *  @notice Lender must have non-zero `LP` when attemptign to remove quote token from the pool.\\n     */\\n    error NoClaim();\\n\\n    /**\\n     *  @notice Borrower has no debt to liquidate.\\n     *  @notice Borrower is attempting to repay when they have no outstanding debt.\\n     */\\n    error NoDebt();\\n\\n    /**\\n     *  @notice Actor is attempting to kick with bucket price below the `LUP`.\\n     */\\n    error PriceBelowLUP();\\n\\n    /**\\n     *  @notice Lender is attempting to remove quote tokens from a bucket that exists above active auction debt from top-of-book downward.\\n     */\\n    error RemoveDepositLockedByAuctionDebt();\\n\\n    /**\\n     * @notice User attempted to kick off a new auction less than `2` weeks since the last auction completed.\\n     */\\n    error ReserveAuctionTooSoon();\\n\\n    /**\\n     *  @notice Current block timestamp has reached or exceeded a user-provided expiration.\\n     */\\n    error TransactionExpired();\\n\\n    /**\\n     *  @notice The address that transfer `LP` is not approved by the `LP` receiving address.\\n     */\\n    error TransferorNotApproved();\\n\\n    /**\\n     *  @notice Owner of the `LP` attemps to transfer `LP` to same address.\\n     */\\n    error TransferToSameOwner();\\n\\n    /**\\n     *  @notice The DebtToCollateral of the loan to be inserted in loans heap is zero.\\n     */\\n    error ZeroDebtToCollateral();\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport { IERC3156FlashBorrower } from \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev    The amount of currency available to be lent.\\n     * @param  token_ The loan currency.\\n     * @return The amount of `token` that can be borrowed (token precision).\\n     */\\n    function maxFlashLoan(\\n        address token_\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev    The fee to be charged for a given loan.\\n     * @param  token_    The loan currency.\\n     * @param  amount_   The amount of tokens lent (token precision).\\n     * @return The amount of `token` to be charged for the loan (token precision), on top of the returned principal .\\n     */\\n    function flashFee(\\n        address token_,\\n        uint256 amount_\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev    Initiate a flash loan.\\n     * @param  receiver_ The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param  token_    The loan currency.\\n     * @param  amount_   The amount of tokens lent (token precision).\\n     * @param  data_     Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return `True` when successful flashloan, `false` otherwise.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver_,\\n        address token_,\\n        uint256 amount_,\\n        bytes   calldata data_\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"src/interfaces/pool/commons/IPoolInternals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Internal structs used by the pool / libraries\\n */\\n\\n/*****************************/\\n/*** Auction Param Structs ***/\\n/*****************************/\\n\\n/// @dev Struct used to return result of `KickerAction.kick` action.\\nstruct KickResult {\\n    uint256 amountToCoverBond;    // [WAD] amount of bond that needs to be covered\\n    uint256 t0KickedDebt;         // [WAD] new t0 debt after kick\\n    uint256 collateralPreAction;  // [WAD] The amount of borrower collateral before kick, same as the one after kick\\n    uint256 lup;                  // [WAD] current LUP in pool after kick\\n}\\n\\n/// @dev Struct used to hold parameters for `SettlerAction.settlePoolDebt` action.\\nstruct SettleParams {\\n    address borrower;    // borrower address to settle\\n    uint256 bucketDepth; // number of buckets to use when settle debt\\n    uint256 poolBalance; // current pool quote token balance\\n}\\n\\n/// @dev Struct used to return result of `SettlerAction.settlePoolDebt` action.\\nstruct SettleResult {\\n    uint256 debtPreAction;       // [WAD] The amount of borrower t0 debt before settle\\n    uint256 debtPostAction;      // [WAD] The amount of borrower t0 debt remaining after settle\\n    uint256 collateralPreAction; // [WAD] The amount of borrower collateral before settle\\n    uint256 collateralRemaining; // [WAD] The amount of borrower collateral left after settle\\n    uint256 collateralSettled;   // [WAD] The amount of borrower collateral settled\\n    uint256 t0DebtSettled;       // [WAD] The amount of t0 debt settled\\n    uint256 debtSettled;         // [WAD] The amount of actual debt settled\\n}\\n\\n/// @dev Struct used to return result of `TakerAction.take` and `TakerAction.bucketTake` actions.\\nstruct TakeResult {\\n    uint256 collateralAmount;      // [WAD] amount of collateral taken\\n    uint256 compensatedCollateral; // [WAD] amount of borrower collateral that is compensated with LP\\n    uint256 quoteTokenAmount;      // [WAD] amount of quote tokens paid by taker for taken collateral, used in take action\\n    uint256 excessQuoteToken;      // [WAD] (NFT only) amount of quote tokens to be paid by taker to borrower for fractional collateral, used in take action\\n    uint256 remainingCollateral;   // [WAD] amount of borrower collateral remaining after take\\n    uint256 poolDebt;              // [WAD] current pool debt\\n    uint256 t0PoolDebt;            // [WAD] t0 pool debt\\n    uint256 newLup;                // [WAD] current lup\\n    uint256 t0DebtInAuctionChange; // [WAD] the amount of t0 debt recovered by take action\\n    bool    settledAuction;        // true if auction is settled by take action\\n    uint256 debtPreAction;         // [WAD] The amount of borrower t0 debt before take\\n    uint256 debtPostAction;        // [WAD] The amount of borrower t0 debt after take\\n    uint256 collateralPreAction;   // [WAD] The amount of borrower collateral before take\\n    uint256 collateralPostAction;  // [WAD] The amount of borrower collateral after take\\n}\\n\\n/// @dev Struct used to hold parameters for `KickerAction.kickReserveAuction` action.\\nstruct KickReserveAuctionParams {\\n    uint256 poolSize;    // [WAD] total deposits in pool (with accrued debt)\\n    uint256 t0PoolDebt;  // [WAD] current t0 pool debt\\n    uint256 poolBalance; // [WAD] pool quote token balance\\n    uint256 inflator;    // [WAD] pool current inflator\\n}\\n\\n/******************************************/\\n/*** Liquidity Management Param Structs ***/\\n/******************************************/\\n\\n/// @dev Struct used to hold parameters for `LenderAction.addQuoteToken` action.\\nstruct AddQuoteParams {\\n    uint256 amount;           // [WAD] amount to be added\\n    uint256 index;            // the index in which to deposit\\n}\\n\\n/// @dev Struct used to hold parameters for `LenderAction.moveQuoteToken` action.\\nstruct MoveQuoteParams {\\n    uint256 fromIndex;             // the deposit index from where amount is moved\\n    uint256 maxAmountToMove;       // [WAD] max amount to move between deposits\\n    uint256 toIndex;               // the deposit index where amount is moved to\\n    uint256 maxT0DebtToCollateral; // [WAD] max t0 debt to collateral in pool\\n}\\n\\n/// @dev Struct used to hold parameters for `LenderAction.removeQuoteToken` action.\\nstruct RemoveQuoteParams {\\n    uint256 index;                 // the deposit index from where amount is removed\\n    uint256 maxAmount;             // [WAD] max amount to be removed\\n    uint256 maxT0DebtToCollateral; // [WAD] max t0 debt to collateral in pool\\n}\\n\\n/*************************************/\\n/*** Loan Management Param Structs ***/\\n/*************************************/\\n\\n/// @dev Struct used to return result of `BorrowerActions.drawDebt` action.\\nstruct DrawDebtResult {\\n    uint256 newLup;                // [WAD] new pool LUP after draw debt\\n    uint256 poolCollateral;        // [WAD] total amount of collateral in pool after pledge collateral\\n    uint256 poolDebt;              // [WAD] total accrued debt in pool after draw debt\\n    uint256 remainingCollateral;   // [WAD] amount of borrower collateral after draw debt (for NFT can be diminished if auction settled)\\n    uint256 t0PoolDebt;            // [WAD] amount of t0 debt in pool after draw debt\\n    uint256 debtPreAction;         // [WAD] The amount of borrower t0 debt before draw debt\\n    uint256 debtPostAction;        // [WAD] The amount of borrower t0 debt after draw debt\\n    uint256 collateralPreAction;   // [WAD] The amount of borrower collateral before draw debt\\n    uint256 collateralPostAction;  // [WAD] The amount of borrower collateral after draw debt\\n}\\n\\n/// @dev Struct used to return result of `BorrowerActions.repayDebt` action.\\nstruct RepayDebtResult {\\n    uint256 newLup;                // [WAD] new pool LUP after draw debt\\n    uint256 poolCollateral;        // [WAD] total amount of collateral in pool after pull collateral\\n    uint256 poolDebt;              // [WAD] total accrued debt in pool after repay debt\\n    uint256 remainingCollateral;   // [WAD] amount of borrower collateral after pull collateral\\n    uint256 t0PoolDebt;            // [WAD] amount of t0 debt in pool after repay\\n    uint256 quoteTokenToRepay;     // [WAD] quote token amount to be transferred from sender to pool\\n    uint256 debtPreAction;         // [WAD] The amount of borrower t0 debt before repay debt\\n    uint256 debtPostAction;        // [WAD] The amount of borrower t0 debt after repay debt\\n    uint256 collateralPreAction;   // [WAD] The amount of borrower collateral before repay debt\\n    uint256 collateralPostAction;  // [WAD] The amount of borrower collateral after repay debt\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IPool } from '../IPool.sol';\\n\\nimport { IERC721PoolBorrowerActions } from './IERC721PoolBorrowerActions.sol';\\nimport { IERC721PoolLenderActions }   from './IERC721PoolLenderActions.sol';\\nimport { IERC721PoolImmutables }      from './IERC721PoolImmutables.sol';\\nimport { IERC721PoolState }           from './IERC721PoolState.sol';\\nimport { IERC721PoolEvents }          from './IERC721PoolEvents.sol';\\nimport { IERC721PoolErrors }          from './IERC721PoolErrors.sol';\\n\\n/**\\n * @title ERC721 Pool\\n */\\ninterface IERC721Pool is\\n    IPool,\\n    IERC721PoolLenderActions,\\n    IERC721PoolBorrowerActions,\\n    IERC721PoolState,\\n    IERC721PoolImmutables,\\n    IERC721PoolEvents,\\n    IERC721PoolErrors\\n{\\n\\n    /**\\n     *  @notice Initializes a new pool, setting initial state variables.\\n     *  @param  tokenIds_  Enumerates `tokenIds_` to be allowed in the pool.\\n     *  @param  rate_      Initial interest rate of the pool.\\n     */\\n    function initialize(\\n        uint256[] memory tokenIds_,\\n        uint256 rate_\\n    ) external;\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721Taker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IERC721Taker {\\n    /**\\n     *  @notice Called by `Pool.take` allowing a taker to externally swap collateral for quote token.\\n     *  @param  tokenIds       Identifies the `NFT`s being taken.\\n     *  @param  quoteAmountDue Denormalized amount of quote token required to purchase `collateralAmount` at the \\n     *                         current auction price (`WAD` precision).\\n     *  @param  data           Taker-provided calldata passed from taker's invocation to their callback.\\n     */\\n    function atomicSwapCallback(\\n        uint256[] memory tokenIds, \\n        uint256          quoteAmountDue,\\n        bytes calldata   data\\n    ) external;\\n}\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool State\\n */\\ninterface IERC721PoolState {\\n\\n    /**\\n     *  @notice Check if a token id is allowed as collateral in pool.\\n     *  @param  tokenId The token id to check.\\n     *  @return allowed `True` if token id is allowed in pool.\\n     */\\n    function tokenIdsAllowed(\\n        uint256 tokenId\\n    ) external view returns (bool allowed);\\n\\n    /**\\n     *  @notice Returns the token id of an `NFT` pledged by a borrower with a given index.\\n     *  @param  borrower The address of borrower that pledged the `NFT`.\\n     *  @param  nftIndex `NFT` index in borrower's pledged token ids array.\\n     *  @return tokenId  Token id of the `NFT`.\\n     */\\n    function borrowerTokenIds(\\n        address borrower,\\n        uint256 nftIndex\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     *  @notice Returns the token id of an `NFT` added in pool bucket (claimable from pool).\\n     *  @param  nftIndex `NFT` index in bucket's token ids array.\\n     *  @return tokenId  Token id of the `NFT`.\\n     */\\n    function bucketTokenIds(\\n        uint256 nftIndex\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     *  @notice Returns the list of `NFT` tokenIds pledged by a borrower in a pool.\\n     *  @param  borrower_ The address of borrower that pledged the `NFT`s.\\n     *  @return List of `NFT`s pledged by borrower.\\n     */\\n    function getBorrowerTokenIds(address borrower_) external view returns(uint256[] memory);\\n\\n    /**\\n     *  @notice Returns the list of `NFT` tokenIds added to pool buckets.\\n     *  @return List of `NFT`s that are claimable from the pool.\\n     */\\n    function getBucketTokenIds() external view returns(uint256[] memory);\\n\\n}\\n\"\r\n    },\r\n    \"src/base/FlashloanablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 }    from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Pool }                  from './Pool.sol';\\nimport { PoolCommons }           from '../libraries/external/PoolCommons.sol';\\nimport { IERC3156FlashBorrower } from '../interfaces/pool/IERC3156FlashBorrower.sol';\\n\\n/**\\n *  @title  Flashloanable Pool Contract\\n *  @notice Pool contract with `IERC3156` flashloans capabilities.\\n *  @notice No fee is charged for taking flashloans from pool.\\n *  @notice Flashloans can be taking in `ERC20` quote and `ERC20` collateral tokens.\\n */\\nabstract contract FlashloanablePool is Pool {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     *  @notice Called by flashloan borrowers to borrow liquidity which must be repaid in the same transaction.\\n     *  @param  receiver_ Address of the contract which implements the appropriate interface to receive tokens.\\n     *  @param  token_    Address of the `ERC20` token caller wants to borrow.\\n     *  @param  amount_   The denormalized amount (dependent upon token precision) of tokens to borrow.\\n     *  @param  data_     User-defined calldata passed to the receiver.\\n     *  @return `True` if flashloan was successful.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver_,\\n        address token_,\\n        uint256 amount_,\\n        bytes calldata data_\\n    ) external virtual override nonReentrant returns (bool) {\\n        if (!_isFlashloanSupported(token_)) revert FlashloanUnavailableForToken();\\n        PoolCommons.flashLoan(receiver_, token_, amount_, data_);\\n        // if flashLoan call didn't revert then flashloan was successful\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice Returns `0`, as no fee is charged for flashloans.\\n     */\\n    function flashFee(\\n        address token_,\\n        uint256\\n    ) external virtual view override returns (uint256) {\\n        if (!_isFlashloanSupported(token_)) revert FlashloanUnavailableForToken();\\n        return 0;\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of tokens available to be lent.\\n     *  @param  token_   Address of the `ERC20` token to be lent.\\n     *  @return maxLoan_ The amount of `token_` that can be lent.\\n     */\\n     function maxFlashLoan(\\n        address token_\\n    ) external virtual view override returns (uint256 maxLoan_) {\\n        if (_isFlashloanSupported(token_)) maxLoan_ = IERC20(token_).balanceOf(address(this));\\n    }\\n\\n    /**\\n     *  @notice Returns `true` if pool allows flashloans for given token address, `false` otherwise.\\n     *  @dev    Allows flashloans for quote token, overriden in pool implementation to allow flashloans for other tokens.\\n     *  @param  token_   Address of the `ERC20` token to be lent.\\n     *  @return `True` if token can be flashloaned, `false` otherwise.\\n     */\\n    function _isFlashloanSupported(\\n        address token_\\n    ) internal virtual view returns (bool) {\\n        return token_ == _getArgAddress(QUOTE_ADDRESS);\\n    }\\n}\"\r\n    },\r\n    \"src/libraries/helpers/PoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { PRBMathSD59x18 } from \\\"@prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport { Math }           from '@openzeppelin/contracts/utils/math/Math.sol';\\nimport { SafeCast }       from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { PoolType }                 from '../../interfaces/pool/IPool.sol';\\nimport { InflatorState, PoolState } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { Buckets } from '../internal/Buckets.sol';\\nimport { Maths }   from '../internal/Maths.sol';\\n\\n    error BucketIndexOutOfBounds();\\n    error BucketPriceOutOfBounds();\\n\\n    /*************************/\\n    /*** Price Conversions ***/\\n    /*************************/\\n\\n    /// @dev constant price indices defining the min and max of the potential price range\\n    int256  constant MAX_BUCKET_INDEX  =  4_156;\\n    int256  constant MIN_BUCKET_INDEX  = -3_232;\\n    uint256 constant MAX_FENWICK_INDEX =  7_388;\\n\\n    uint256 constant MIN_PRICE = 99_836_282_890;\\n    uint256 constant MAX_PRICE = 1_004_968_987.606512354182109771 * 1e18;\\n\\n    uint256 constant MAX_INFLATED_PRICE = 50_248_449_380.325617709105488550 * 1e18; // 50 * MAX_PRICE\\n\\n    /// @dev deposit buffer (extra margin) used for calculating reserves\\n    uint256 constant DEPOSIT_BUFFER = 1.000000001 * 1e18;\\n\\n    /// @dev step amounts in basis points. This is a constant across pools at `0.005`, achieved by dividing `WAD` by `10,000`\\n    int256 constant FLOAT_STEP_INT = 1.005 * 1e18;\\n\\n    /// @dev collateralization factor used to calculate borrrower HTP/TP/collateralization.\\n    uint256 constant COLLATERALIZATION_FACTOR = 1.04 * 1e18;\\n\\n    /**\\n     *  @notice Calculates the price (`WAD` precision) for a given `Fenwick` index.\\n     *  @dev    Reverts with `BucketIndexOutOfBounds` if index exceeds maximum constant.\\n     *  @dev    Uses fixed-point math to get around lack of floating point numbers in `EVM`.\\n     *  @dev    Fenwick index is converted to bucket index.\\n     *  @dev    Fenwick index to bucket index conversion:\\n     *  @dev      `1.00`      : bucket index `0`,     fenwick index `4156`: `7388-4156-3232=0`.\\n     *  @dev      `MAX_PRICE` : bucket index `4156`,  fenwick index `0`:    `7388-0-3232=4156`.\\n     *  @dev      `MIN_PRICE` : bucket index - `3232`, fenwick index `7388`: `7388-7388-3232=-3232`.\\n     *  @dev    `V1`: `price = MIN_PRICE + (FLOAT_STEP * index)`\\n     *  @dev    `V2`: `price = MAX_PRICE * (FLOAT_STEP ** (abs(int256(index - MAX_PRICE_INDEX))));`\\n     *  @dev    `V3 (final)`: `x^y = 2^(y*log_2(x))`\\n     */\\n    function _priceAt(\\n        uint256 index_\\n    ) pure returns (uint256) {\\n        // Lowest Fenwick index is highest price, so invert the index and offset by highest bucket index.\\n        int256 bucketIndex = MAX_BUCKET_INDEX - int256(index_);\\n        if (bucketIndex < MIN_BUCKET_INDEX || bucketIndex > MAX_BUCKET_INDEX) revert BucketIndexOutOfBounds();\\n\\n        return uint256(\\n            PRBMathSD59x18.exp2(\\n                PRBMathSD59x18.mul(\\n                    PRBMathSD59x18.fromInt(bucketIndex),\\n                    PRBMathSD59x18.log2(FLOAT_STEP_INT)\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates the  Fenwick  index for a given price.\\n     *  @dev    Reverts with `BucketPriceOutOfBounds` if price exceeds maximum constant.\\n     *  @dev    Price expected to be inputted as a `WAD` (`18` decimal).\\n     *  @dev    `V1`: `bucket index = (price - MIN_PRICE) / FLOAT_STEP`\\n     *  @dev    `V2`: `bucket index = (log(FLOAT_STEP) * price) /  MAX_PRICE`\\n     *  @dev    `V3 (final)`: `bucket index =  log_2(price) / log_2(FLOAT_STEP)`\\n     *  @dev    `Fenwick index = 7388 - bucket index + 3232`\\n     */\\n    function _indexOf(\\n        uint256 price_\\n    ) pure returns (uint256) {\\n        if (price_ < MIN_PRICE || price_ > MAX_PRICE) revert BucketPriceOutOfBounds();\\n\\n        int256 index = PRBMathSD59x18.div(\\n            PRBMathSD59x18.log2(int256(price_)),\\n            PRBMathSD59x18.log2(FLOAT_STEP_INT)\\n        );\\n\\n        int256 ceilIndex = PRBMathSD59x18.ceil(index);\\n        if (index < 0 && ceilIndex - index > 0.5 * 1e18) {\\n            return uint256(4157 - PRBMathSD59x18.toInt(ceilIndex));\\n        }\\n        return uint256(4156 - PRBMathSD59x18.toInt(ceilIndex));\\n    }\\n\\n    /**********************/\\n    /*** Pool Utilities ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Calculates the minimum debt amount that can be borrowed or can remain in a loan in pool.\\n     *  @param  debt_          The debt amount to calculate minimum debt amount for.\\n     *  @param  loansCount_    The number of loans in pool.\\n     *  @return minDebtAmount_ Minimum debt amount value of the pool.\\n     */\\n    function _minDebtAmount(\\n        uint256 debt_,\\n        uint256 loansCount_\\n    ) pure returns (uint256 minDebtAmount_) {\\n        if (loansCount_ != 0) {\\n            minDebtAmount_ = Maths.wdiv(Maths.wdiv(debt_, Maths.wad(loansCount_)), 10**19);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates origination fee for a given interest rate.\\n     *  @notice Calculated as greater of the current annualized interest rate divided by `52` (one week of interest) or `5` bps.\\n     *  @param  interestRate_ The current interest rate.\\n     *  @return Fee rate based upon the given interest rate.\\n     */\\n    function _borrowFeeRate(\\n        uint256 interestRate_\\n    ) pure returns (uint256) {\\n        // greater of the current annualized interest rate divided by 52 (one week of interest) or 5 bps\\n        return Maths.max(Maths.wdiv(interestRate_, 52 * 1e18), 0.0005 * 1e18);\\n    }\\n\\n    /**\\n     * @notice Calculates the unutilized deposit fee, charged to lenders who deposit below the `LUP`.\\n     * @param  interestRate_ The current interest rate.\\n     * @return Fee rate based upon the given interest rate\\n     */\\n    function _depositFeeRate(\\n        uint256 interestRate_\\n    ) pure returns (uint256) {\\n        // current annualized rate divided by 365 * 3 (8 hours of interest)\\n        return Maths.wdiv(interestRate_, 365 * 3e18);\\n    }\\n\\n    /**\\n     * @notice Determines how the inflator state should be updated\\n     * @param  poolState_     State of the pool after updateInterestState was called.\\n     * @param  inflatorState_ Old inflator state.\\n     * @return newInflator_     New inflator value.\\n     * @return updateTimestamp_ `True` if timestamp of last update should be updated.\\n     */\\n    function _determineInflatorState(\\n        PoolState memory poolState_,\\n        InflatorState memory inflatorState_\\n    ) view returns (uint208 newInflator_, bool updateTimestamp_) {\\n        newInflator_ = inflatorState_.inflator;\\n\\n        // update pool inflator\\n        if (poolState_.isNewInterestAccrued) {\\n            newInflator_     = SafeCast.toUint208(poolState_.inflator);\\n            updateTimestamp_ = true;\\n        // if the debt in the current pool state is 0, also update the inflator and inflatorUpdate fields in inflatorState\\n        // slither-disable-next-line incorrect-equality\\n        } else if (poolState_.debt == 0) {\\n            newInflator_     = SafeCast.toUint208(Maths.WAD);\\n            updateTimestamp_ = true;\\n        // if the first loan has just been drawn, update the inflator timestamp\\n        // slither-disable-next-line incorrect-equality\\n        } else if (inflatorState_.inflator == Maths.WAD && inflatorState_.inflatorUpdate != block.timestamp){\\n            updateTimestamp_ = true;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates `HTP` price.\\n     *  @param  maxT0DebtToCollateral_ Max t0 debt to collateral in pool.\\n     *  @param  inflator_              Pool's inflator.\\n     */\\n    function _htp(\\n        uint256 maxT0DebtToCollateral_,\\n        uint256 inflator_\\n    ) pure returns (uint256) {\\n        return Maths.wmul(\\n            Maths.wmul(maxT0DebtToCollateral_, inflator_),\\n            COLLATERALIZATION_FACTOR\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates debt-weighted average threshold price.\\n     *  @param  t0Debt_              Pool debt owed by borrowers in `t0` terms.\\n     *  @param  inflator_            Pool's borrower inflator.\\n     *  @param  t0Debt2ToCollateral_ `t0-debt-squared-to-collateral` accumulator. \\n     */\\n    function _dwatp(\\n        uint256 t0Debt_,\\n        uint256 inflator_,\\n        uint256 t0Debt2ToCollateral_\\n    ) pure returns (uint256) {\\n        return t0Debt_ == 0 ? 0 : Maths.wdiv(\\n            Maths.wmul(\\n                Maths.wmul(inflator_, t0Debt2ToCollateral_),\\n                COLLATERALIZATION_FACTOR\\n            ),\\n            t0Debt_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Collateralization calculation.\\n     *  @param debt_       Debt to calculate collateralization for.\\n     *  @param collateral_ Collateral to calculate collateralization for.\\n     *  @param price_      Price to calculate collateralization for.\\n     *  @param type_       Type of the pool.\\n     *  @return `True` if value of collateral exceeds or equals debt.\\n     */\\n    function _isCollateralized(\\n        uint256 debt_,\\n        uint256 collateral_,\\n        uint256 price_,\\n        uint8 type_\\n    ) pure returns (bool) {\\n        // `False` if LUP = MIN_PRICE unless there is no debt\\n        if (price_ == MIN_PRICE && debt_ != 0) return false;\\n\\n        // Use collateral floor for NFT pools\\n        if (type_ == uint8(PoolType.ERC721)) {\\n            //slither-disable-next-line divide-before-multiply\\n            collateral_ = (collateral_ / Maths.WAD) * Maths.WAD; // use collateral floor\\n        }\\n        \\n        return Maths.wmul(collateral_, price_) >= Maths.wmul(COLLATERALIZATION_FACTOR, debt_);\\n    }\\n\\n    /**\\n     *  @notice Price precision adjustment used in calculating collateral dust for a bucket.\\n     *          To ensure the accuracy of the exchange rate calculation, buckets with smaller prices require\\n     *          larger minimum amounts of collateral.  This formula imposes a lower bound independent of token scale.\\n     *  @param  bucketIndex_              Index of the bucket, or `0` for encumbered collateral with no bucket affinity.\\n     *  @return pricePrecisionAdjustment_ Unscaled integer of the minimum number of decimal places the dust limit requires.\\n     */\\n    function _getCollateralDustPricePrecisionAdjustment(\\n        uint256 bucketIndex_\\n    ) pure returns (uint256 pricePrecisionAdjustment_) {\\n        // conditional is a gas optimization\\n        if (bucketIndex_ > 3900) {\\n            int256 bucketOffset = int256(bucketIndex_ - 3900);\\n            int256 result = PRBMathSD59x18.sqrt(PRBMathSD59x18.div(bucketOffset * 1e18, int256(36 * 1e18)));\\n            pricePrecisionAdjustment_ = uint256(result / 1e18);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of collateral calculated for the given amount of `LP`.\\n     *  @dev    The value returned is capped at collateral amount available in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lenderLPBalance_  The amount of `LP` to calculate collateral for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return collateralAmount_ Amount of collateral calculated for the given `LP `amount.\\n     */\\n    function _lpToCollateral(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lenderLPBalance_,\\n        uint256 bucketPrice_\\n    ) pure returns (uint256 collateralAmount_) {\\n        collateralAmount_ = Buckets.lpToCollateral(\\n            bucketCollateral_,\\n            bucketLP_,\\n            deposit_,\\n            lenderLPBalance_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n\\n        if (collateralAmount_ > bucketCollateral_) {\\n            // user is owed more collateral than is available in the bucket\\n            collateralAmount_ = bucketCollateral_;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of quote tokens calculated for the given amount of `LP`.\\n     *  @dev    The value returned is capped at available bucket deposit.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lenderLPBalance_  The amount of `LP` to calculate quote token amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return quoteTokenAmount_ Amount of quote tokens calculated for the given `LP` amount, capped at available bucket deposit.\\n     */\\n    function _lpToQuoteToken(\\n        uint256 bucketLP_,\\n        uint256 bucketCollateral_,\\n        uint256 deposit_,\\n        uint256 lenderLPBalance_,\\n        uint256 bucketPrice_\\n    ) pure returns (uint256 quoteTokenAmount_) {\\n        quoteTokenAmount_ = Buckets.lpToQuoteTokens(\\n            bucketCollateral_,\\n            bucketLP_,\\n            deposit_,\\n            lenderLPBalance_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n\\n        if (quoteTokenAmount_ > deposit_) quoteTokenAmount_ = deposit_;\\n    }\\n\\n    /**\\n     *  @notice Rounds a token amount down to the minimum amount permissible by the token scale.\\n     *  @param  amount_       Value to be rounded.\\n     *  @param  tokenScale_   Scale of the token, presented as a power of `10`.\\n     *  @return scaledAmount_ Rounded value.\\n     */\\n    function _roundToScale(\\n        uint256 amount_,\\n        uint256 tokenScale_\\n    ) pure returns (uint256 scaledAmount_) {\\n        scaledAmount_ = (amount_ / tokenScale_) * tokenScale_;\\n    }\\n\\n    /**\\n     *  @notice Rounds a token amount up to the next amount permissible by the token scale.\\n     *  @param  amount_       Value to be rounded.\\n     *  @param  tokenScale_   Scale of the token, presented as a power of `10`.\\n     *  @return scaledAmount_ Rounded value.\\n     */\\n    function _roundUpToScale(\\n        uint256 amount_,\\n        uint256 tokenScale_\\n    ) pure returns (uint256 scaledAmount_) {\\n        if (amount_ % tokenScale_ == 0)\\n            scaledAmount_ = amount_;\\n        else\\n            scaledAmount_ = _roundToScale(amount_, tokenScale_) + tokenScale_;\\n    }\\n\\n    /*********************************/\\n    /*** Reserve Auction Utilities ***/\\n    /*********************************/\\n\\n    uint256 constant MINUTE_HALF_LIFE    = 0.988514020352896135_356867505 * 1e27;  // 0.5^(1/60)\\n\\n    /**\\n     *  @notice Calculates claimable reserves within the pool.\\n     *  @dev    Claimable reserve auctions and escrowed auction bonds are guaranteed by the pool.\\n     *  @param  debt_                    Pool's debt.\\n     *  @param  poolSize_                Pool's deposit size.\\n     *  @param  totalBondEscrowed_       Total bond escrowed.\\n     *  @param  reserveAuctionUnclaimed_ Pool's unclaimed reserve auction.\\n     *  @param  quoteTokenBalance_       Pool's quote token balance.\\n     *  @return claimable_               Calculated pool reserves.\\n     */  \\n    function _claimableReserves(\\n        uint256 debt_,\\n        uint256 poolSize_,\\n        uint256 totalBondEscrowed_,\\n        uint256 reserveAuctionUnclaimed_,\\n        uint256 quoteTokenBalance_\\n    ) pure returns (uint256 claimable_) {\\n        uint256 guaranteedFunds = totalBondEscrowed_ + reserveAuctionUnclaimed_;\\n\\n        // calculate claimable reserves if there's quote token excess\\n        if (quoteTokenBalance_ > guaranteedFunds) {\\n            claimable_ = debt_ + quoteTokenBalance_;\\n\\n            claimable_ -= Maths.min(\\n                claimable_,\\n                // require 1.0 + 1e-9 deposit buffer (extra margin) for deposits\\n                Maths.wmul(DEPOSIT_BUFFER, poolSize_) + guaranteedFunds\\n            );\\n\\n            // incremental claimable reserve should not exceed excess quote in pool\\n            claimable_ = Maths.min(\\n                claimable_,\\n                quoteTokenBalance_ - guaranteedFunds\\n            );\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates reserves auction price.\\n     *  @param  reserveAuctionKicked_ Time when reserve auction was started (kicked).\\n     *  @param  lastKickedReserves_   Reserves to be auctioned when started (kicked).\\n     *  @return price_                Calculated auction price.\\n     */     \\n    function _reserveAuctionPrice(\\n        uint256 reserveAuctionKicked_,\\n        uint256 lastKickedReserves_\\n    ) view returns (uint256 price_) {\\n        if (reserveAuctionKicked_ != 0) {\\n            uint256 secondsElapsed   = block.timestamp - reserveAuctionKicked_;\\n            uint256 hoursComponent   = 1e27 >> secondsElapsed / 3600;\\n            uint256 minutesComponent = Maths.rpow(MINUTE_HALF_LIFE, secondsElapsed % 3600 / 60);\\n            uint256 initialPrice     = lastKickedReserves_ == 0 ? 0 : Maths.wdiv(1_000_000_000 * 1e18, lastKickedReserves_);\\n\\n            price_ = initialPrice * Maths.rmul(hoursComponent, minutesComponent) / 1e27;\\n        }\\n    }\\n\\n    /*************************/\\n    /*** Auction Utilities ***/\\n    /*************************/\\n\\n    /// @dev min bond factor.\\n    uint256 constant MIN_BOND_FACTOR = 0.005 * 1e18;\\n    /// @dev max bond factor.\\n    uint256 constant MAX_BOND_FACTOR = 0.03 * 1e18;\\n\\n    /**\\n     *  @notice Calculates auction price.\\n     *  @param  referencePrice_ Recorded at kick, used to calculate start price.\\n     *  @param  kickTime_       Time when auction was kicked.\\n     *  @return price_          Calculated auction price.\\n     */\\n    function _auctionPrice(\\n        uint256 referencePrice_,\\n        uint256 kickTime_\\n    ) view returns (uint256 price_) {\\n        uint256 elapsedMinutes = Maths.wdiv((block.timestamp - kickTime_) * 1e18, 1 minutes * 1e18);\\n\\n        int256 timeAdjustment;\\n        if (elapsedMinutes < 120 * 1e18) {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256(elapsedMinutes / 20));\\n            price_ = 256 * Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment)));\\n        } else if (elapsedMinutes < 840 * 1e18) {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256((elapsedMinutes - 120 * 1e18) / 120));\\n            price_ = 4 * Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment)));\\n        } else {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256((elapsedMinutes - 840 * 1e18) / 60));\\n            price_ = Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment))) / 16;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates bond penalty factor.\\n     *  @dev    Called in kick and take.\\n     *  @param debtToCollateral_ Borrower debt to collateral at time of kick.\\n     *  @param neutralPrice_     `NP` of auction.\\n     *  @param bondFactor_       Factor used to determine bondSize.\\n     *  @param auctionPrice_     Auction price at the time of call or, for bucket takes, bucket price.\\n     *  @return bpf_             Factor used in determining bond `reward` (positive) or `penalty` (negative).\\n     */\\n    function _bpf(\\n        uint256 debtToCollateral_,\\n        uint256 neutralPrice_,\\n        uint256 bondFactor_,\\n        uint256 auctionPrice_\\n    ) pure returns (int256) {\\n        int256 sign;\\n        if (debtToCollateral_ < neutralPrice_) {\\n            // BPF = BondFactor * min(1, max(-1, (neutralPrice - price) / (neutralPrice - debtToCollateral)))\\n            sign = Maths.minInt(\\n                1e18,\\n                Maths.maxInt(\\n                    -1 * 1e18,\\n                    PRBMathSD59x18.div(\\n                        int256(neutralPrice_) - int256(auctionPrice_),\\n                        int256(neutralPrice_) - int256(debtToCollateral_)\\n                    )\\n                )\\n            );\\n        } else {\\n            int256 val = int256(neutralPrice_) - int256(auctionPrice_);\\n            if (val < 0 )      sign = -1e18;\\n            else if (val != 0) sign = 1e18;\\n        }\\n\\n        return PRBMathSD59x18.mul(int256(bondFactor_), sign);\\n    }\\n\\n    /**\\n     *  @notice Calculates bond parameters of an auction.\\n     *  @param  borrowerDebt_   Borrower's debt before entering in liquidation.\\n     *  @param  npTpRatio_      Borrower's Np to Tp ratio\\n     */\\n    function _bondParams(\\n        uint256 borrowerDebt_,\\n        uint256 npTpRatio_\\n    ) pure returns (uint256 bondFactor_, uint256 bondSize_) {\\n        // bondFactor = max(min(MAX_BOND_FACTOR, (NP/TP_ratio - 1) / 10), MIN_BOND_FACTOR)\\n        bondFactor_ = Maths.max(\\n            Maths.min(\\n                MAX_BOND_FACTOR,\\n                (npTpRatio_ - 1e18) / 10\\n            ),\\n            MIN_BOND_FACTOR\\n        );\\n\\n        bondSize_ = Maths.wmul(bondFactor_,  borrowerDebt_);\\n    }\\n\"\r\n    },\r\n    \"src/libraries/helpers/RevertsHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    DepositsState,\\n    LoansState,\\n    PoolBalancesState\\n} from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { _minDebtAmount, _priceAt, _auctionPrice } from './PoolHelper.sol';\\n\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n    // See `IPoolErrors` for descriptions\\n    error AuctionNotCleared();\\n    error AuctionActive();\\n    error AmountLTMinDebt();\\n    error DustAmountNotExceeded();\\n    error LimitIndexExceeded();\\n    error RemoveDepositLockedByAuctionDebt();\\n    error TransactionExpired();\\n    error AddAboveAuctionPrice();\\n\\n    /**\\n     *  @notice Called by `LP` removal functions assess whether or not `LP` is locked.\\n     *  @dev    Reverts with `RemoveDepositLockedByAuctionDebt` if debt locked.\\n     *  @param  t0DebtInAuction_ Pool's t0 debt currently in auction.\\n     *  @param  index_           The deposit index from which `LP` is attempting to be removed.\\n     *  @param  inflator_        The pool inflator used to properly assess t0 debt in auctions.\\n     */\\n    function _revertIfAuctionDebtLocked(\\n        DepositsState storage deposits_,\\n        uint256 t0DebtInAuction_,\\n        uint256 index_,\\n        uint256 inflator_\\n    ) view {\\n        if (t0DebtInAuction_ != 0 ) {\\n            // deposit in buckets within liquidation debt from the top-of-book down are frozen.\\n            if (index_ <= Deposits.findIndexOfSum(deposits_, Maths.wmul(t0DebtInAuction_, inflator_))) revert RemoveDepositLockedByAuctionDebt();\\n        } \\n    }\\n\\n    /**\\n     *  @notice Check if head auction is clearable (auction is kicked and `72` hours passed since kick time or auction still has debt but no remaining collateral).\\n     *  @dev    Reverts with `AuctionNotCleared` if auction is clearable.\\n     */\\n    function _revertIfAuctionClearable(\\n        AuctionsState storage auctions_,\\n        LoansState    storage loans_\\n    ) view {\\n        address head     = auctions_.head;\\n        uint256 kickTime = auctions_.liquidations[head].kickTime;\\n        if (kickTime != 0) {\\n            if (block.timestamp - kickTime > 72 hours) revert AuctionNotCleared();\\n\\n            Borrower storage borrower = loans_.borrowers[head];\\n            if (borrower.t0Debt != 0 && borrower.collateral == 0) revert AuctionNotCleared();\\n        }\\n    }\\n\\n    /**\\n     *  @notice  Check if provided price is at or above index limit provided by borrower.\\n     *  @notice  Prevents stale transactions and certain `MEV` manipulations.\\n     *  @dev     Reverts with `LimitIndexExceeded` if index limit provided exceeded.\\n     *  @param newPrice_   New price to be compared with given limit price (can be `LUP`, `NP`).\\n     *  @param limitIndex_ Limit price index provided by user creating the transaction.\\n     */\\n    function _revertIfPriceDroppedBelowLimit(\\n        uint256 newPrice_,\\n        uint256 limitIndex_\\n    ) pure {\\n        if (newPrice_ < _priceAt(limitIndex_)) revert LimitIndexExceeded();\\n    }\\n\\n    /**\\n     *  @notice  Check if provided price is above current auction price.\\n     *  @notice  Prevents manipulative deposits and arbTakes.\\n     *  @dev     Reverts with `AddAboveAuctionPrice` if price is above head of auction queue.\\n     *  @param auctions_ Auctions data.\\n     *  @param index_    Identifies bucket price to be compared with current auction price.\\n     */\\n    function _revertIfAuctionPriceBelow(\\n        AuctionsState storage auctions_,\\n        uint256 index_\\n    ) view {\\n        address head = auctions_.head;\\n        if (head != address(0)) {\\n            uint256 auctionPrice = _auctionPrice(auctions_.liquidations[head].referencePrice, auctions_.liquidations[head].kickTime);\\n            if (_priceAt(index_) >= auctionPrice) revert AddAboveAuctionPrice();\\n        }\\n    }\\n\\n    /**\\n     *  @notice  Check if there are still active / non settled auctions in pool.\\n     *  @notice  Prevents kicking reserves auctions until all pending auctions are fully settled.\\n     *  @dev     Reverts with `AuctionActive`.\\n     *  @param auctions_ Auctions data.\\n     */\\n    function _revertIfActiveAuctions(\\n        AuctionsState storage auctions_\\n    ) view {\\n        if (auctions_.noOfAuctions != 0) revert AuctionActive();\\n    }\\n\\n    /**\\n     *  @notice Check if expiration provided by user has met or exceeded current block height timestamp.\\n     *  @notice Prevents stale transactions interacting with the pool at potentially unfavorable prices.\\n     *  @dev    Reverts with `TransactionExpired` if expired.\\n     *  @param  expiry_ Expiration provided by user when creating the transaction.\\n     */\\n    function _revertAfterExpiry(\\n        uint256 expiry_\\n    ) view {\\n        if (block.timestamp > expiry_) revert TransactionExpired();\\n    }\\n\\n    /**\\n     *  @notice Called when borrower debt changes, ensuring minimum debt rules are honored.\\n     *  @dev    Reverts with `DustAmountNotExceeded` if under dust amount or with `AmountLTMinDebt` if amount under min debt value.\\n     *  @param  loans_        Loans heap, used to determine loan count.\\n     *  @param  poolDebt_     Total pool debt, used to calculate average debt.\\n     *  @param  borrowerDebt_ New debt for the borrower, assuming the current transaction succeeds.\\n     *  @param  quoteDust_    Smallest amount of quote token when can be transferred, determined by token scale.\\n     */\\n    function _revertOnMinDebt(\\n        LoansState storage loans_,\\n        uint256 poolDebt_,\\n        uint256 borrowerDebt_,\\n        uint256 quoteDust_\\n    ) view {\\n        if (borrowerDebt_ != 0) {\\n            if (borrowerDebt_ < quoteDust_) revert DustAmountNotExceeded();\\n            uint256 loansCount = Loans.noOfLoans(loans_);\\n            if (loansCount >= 10)\\n                if (borrowerDebt_ < _minDebtAmount(poolDebt_, loansCount)) revert AmountLTMinDebt();\\n        }\\n    }\\n\"\r\n    },\r\n    \"src/libraries/internal/Maths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.18;\\n\\n/**\\n    @title  Maths library\\n    @notice Internal library containing common maths.\\n */\\nlibrary Maths {\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + WAD / 2) / WAD;\\n    }\\n\\n    function floorWmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / WAD;\\n    }\\n\\n    function ceilWmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + WAD - 1) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD + y / 2) / y;\\n    }\\n\\n    function floorWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD) / y;\\n    }\\n\\n    function ceilWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD + y - 1) / y;\\n    }\\n\\n    function ceilDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x + y - 1) / y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function wad(uint256 x) internal pure returns (uint256) {\\n        return x * WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + RAY / 2) / RAY;\\n    }\\n\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n\\n    /*************************/\\n    /*** Integer Functions ***/\\n    /*************************/\\n\\n    function maxInt(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function minInt(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/libraries/internal/Deposits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport { DepositsState } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { _priceAt, MAX_FENWICK_INDEX } from '../helpers/PoolHelper.sol';\\n\\nimport { Maths } from './Maths.sol';\\n\\n/**\\n    @title  Deposits library\\n    @notice Internal library containing common logic for deposits management.\\n    @dev    Implemented as `Fenwick Tree` data structure.\\n */\\nlibrary Deposits {\\n\\n    /// @dev Max index supported in the `Fenwick` tree\\n    uint256 internal constant SIZE = 8192;\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error InvalidAmount();\\n\\n    /**\\n     *  @notice Increase a value in the FenwickTree at an index.\\n     *  @dev    Starts at leaf/target and moved up towards root\\n     *  @dev    === Reverts on ===\\n     *  @dev    unscaled amount to add is 0 `InvalidAmount()`\\n     *  @param  deposits_          Deposits state struct.\\n     *  @param  index_             The deposit index.\\n     *  @param  unscaledAddAmount_ The unscaled amount to increase deposit by.\\n     */\\n    function unscaledAdd(\\n        DepositsState storage deposits_,\\n        uint256 index_,\\n        uint256 unscaledAddAmount_\\n    ) internal {\\n\\n        // revert if 0 amount is added.\\n        if (unscaledAddAmount_ == 0) revert InvalidAmount();\\n\\n        // price buckets are indexed starting at 0, Fenwick bit logic is more elegant starting at 1\\n        ++index_;\\n\\n        // unscaledAddAmount_ is the raw amount to add directly to the value at index_, unaffected by the scale array\\n        // For example, to denote an amount of deposit added to the array, we would need to call unscaledAdd with\\n        // (deposit amount) / scale(index).  There are two reasons for this:\\n        // 1- scale(index) is often already known in the context of where unscaledAdd(..) is called, and we want to avoid\\n        //    redundant iterations through the Fenwick tree.\\n        // 2- We often need to precisely change the value in the tree, avoiding the rounding that dividing by scale(index).\\n        //    This is more relevant to unscaledRemove(...), where we need to ensure the value is precisely set to 0, but we\\n        //    also prefer it here for consistency.\\n\\n        uint256 value;\\n        uint256 scaling;\\n        uint256 newValue;\\n\\n        while (index_ <= SIZE) {\\n            value    = deposits_.values[index_];\\n            scaling  = deposits_.scaling[index_];\\n\\n            // Compute the new value to be put in location index_\\n            newValue = value + unscaledAddAmount_;\\n\\n            // Update unscaledAddAmount to propogate up the Fenwick tree\\n            // Note: we can't just multiply addAmount_ by scaling[i_] due to rounding\\n            // We need to track the precice change in values[i_] in order to ensure\\n            // obliterated indices remain zero after subsequent adding to related indices\\n            // if scaling==0, the actual scale value is 1, otherwise it is scaling\\n            if (scaling != 0) unscaledAddAmount_ = Maths.wmul(newValue, scaling) - Maths.wmul(value, scaling);\\n\\n            deposits_.values[index_] = newValue;\\n\\n            // traverse upwards through tree via \\\"update\\\" route\\n            index_ += lsb(index_);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Finds index and sum of first bucket that EXCEEDS the given sum\\n     *  @dev    Used in `LUP` calculation\\n     *  @param  deposits_      Struct for deposits state.\\n     *  @param  targetSum_     The sum to find index for.\\n     *  @return sumIndex_      Smallest index where prefixsum greater than the sum.\\n     *  @return sumIndexSum_   Sum at index PRECEDING `sumIndex_`.\\n     *  @return sumIndexScale_ Scale of bucket PRECEDING `sumIndex_`.\\n     */\\n    function findIndexAndSumOfSum(\\n        DepositsState storage deposits_,\\n        uint256 targetSum_\\n    ) internal view returns (uint256 sumIndex_, uint256 sumIndexSum_, uint256 sumIndexScale_) {\\n        // i iterates over bits from MSB to LSB.  We check at each stage if the target sum is to the left or right of sumIndex_+i\\n        uint256 i  = 4096; // 1 << (_numBits - 1) = 1 << (13 - 1) = 4096\\n        uint256 runningScale = Maths.WAD;\\n\\n        // We construct the target sumIndex_ bit by bit, from MSB to LSB.  lowerIndexSum_ always maintains the sum\\n        // up to the current value of sumIndex_\\n        uint256 lowerIndexSum;\\n        uint256 curIndex;\\n        uint256 value;\\n        uint256 scaling;\\n        uint256 scaledValue;\\n\\n        while (i > 0) {\\n            // Consider if the target index is less than or greater than sumIndex_ + i\\n            curIndex = sumIndex_ + i;\\n            value    = deposits_.values[curIndex];\\n            scaling  = deposits_.scaling[curIndex];\\n\\n            // Compute sum up to sumIndex_ + i\\n            scaledValue =\\n                lowerIndexSum +\\n                (\\n                    scaling != 0 ? Math.mulDiv(\\n                        runningScale * scaling,\\n                        value,\\n                        1e36\\n                    ) : Maths.wmul(runningScale, value)\\n                );\\n\\n            if (scaledValue  < targetSum_) {\\n                // Target value is too small, need to consider increasing sumIndex_ still\\n                if (curIndex <= MAX_FENWICK_INDEX) {\\n                    // sumIndex_+i is in range of Fenwick prices.  Target index has this bit set to 1.  \\n                    sumIndex_ = curIndex;\\n                    lowerIndexSum = scaledValue;\\n                }\\n            } else {\\n                // Target index has this bit set to 0\\n                // scaling == 0 means scale factor == 1, otherwise scale factor == scaling\\n                if (scaling != 0) runningScale = Maths.floorWmul(runningScale, scaling);\\n\\n                // Current scaledValue is <= targetSum_, it's a candidate value for sumIndexSum_\\n                sumIndexSum_   = scaledValue;\\n                sumIndexScale_ = runningScale;\\n            }\\n            // Shift i to next less significant bit\\n            i = i >> 1;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Finds index of passed sum. Helper function for `findIndexAndSumOfSum`.\\n     *  @dev    Used in `LUP` calculation\\n     *  @param  deposits_ Deposits state struct.\\n     *  @param  sum_      The sum to find index for.\\n     *  @return sumIndex_ Smallest index where prefixsum greater than the sum.\\n     */\\n    function findIndexOfSum(\\n        DepositsState storage deposits_,\\n        uint256 sum_\\n    ) internal view returns (uint256 sumIndex_) {\\n        (sumIndex_,,) = findIndexAndSumOfSum(deposits_, sum_);\\n    }\\n\\n    /**\\n     *  @notice Get least significant bit (`LSB`) of integer `i_`.\\n     *  @dev    Used primarily to decrement the binary index in loops, iterating over range parents.\\n     *  @param  i_  The integer with which to return the `LSB`.\\n     */\\n    function lsb(\\n        uint256 i_\\n    ) internal pure returns (uint256 lsb_) {\\n        if (i_ != 0) {\\n            // \\\"i & (-i)\\\"\\n            lsb_ = i_ & ((i_ ^ 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 1);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Scale values in the tree from the index provided, upwards.\\n     *  @dev    Starts at passed in node and increments through range parent nodes, and ends at `8192`.\\n     *  @param  deposits_ Deposits state struct.\\n     *  @param  index_    The index to start scaling from.\\n     *  @param  factor_   The factor to scale the values by.\\n     */\\n    function mult(\\n        DepositsState storage deposits_,\\n        uint256 index_,\\n        uint256 factor_\\n    ) internal {\\n        // price buckets are indexed starting at 0, Fenwick bit logic is more elegant starting at 1\\n        ++index_;\\n\\n        uint256 sum;\\n        uint256 value;\\n        uint256 scaling;\\n        uint256 bit = lsb(index_);\\n\\n        // Starting with the LSB of index, we iteratively move up towards the MSB of SIZE\\n        // Case 1:     the bit of index_ is set to 1.  In this case, the entire subtree below index_\\n        //             is scaled.  So, we include factor_ into scaling[index_], and remember in sum how much\\n        //             we increased the subtree by, so that we can use it in case we encounter 0 bits (below).\\n        // Case 2:     The bit of index_ is set to 0.  In this case, consider the subtree below the node\\n        //             index_+bit. The subtree below that is not entirely scaled, but it does contain the\\n        //             subtree what was scaled earlier.  Therefore: we need to increment it's stored value\\n        //             (in sum) which was set in a prior interation in case 1.\\n        while (bit <= SIZE) {\\n            if ((bit & index_) != 0) {\\n                // Case 1 as described above\\n                value   = deposits_.values[index_];\\n                scaling = deposits_.scaling[index_];\\n\\n                // Calc sum, will only be stored in range parents of starting node, index_\\n                if (scaling != 0) {\\n                    // Note: we can't just multiply by factor_ - 1 in the following line, as rounding will\\n                    // cause obliterated indices to have nonzero values.  Need to track the actual\\n                    // precise delta in the value array\\n                    uint256 scaledFactor = Maths.wmul(factor_, scaling);\\n\\n                    sum += Maths.wmul(scaledFactor, value) - Maths.wmul(scaling, value);\\n\\n                    // Apply scaling to all range parents less then starting node, index_\\n                    deposits_.scaling[index_] = scaledFactor;\\n                } else {\\n                    // this node's scale factor is 1\\n                    sum += Maths.wmul(factor_, value) - value;\\n                    deposits_.scaling[index_] = factor_;\\n                }\\n                // Unset the bit in index to continue traversing up the Fenwick tree\\n                index_ -= bit;\\n            } else {\\n                // Case 2 above.  superRangeIndex is the index of the node to consider that\\n                //                contains the sub range that was already scaled in prior iteration\\n                uint256 superRangeIndex = index_ + bit;\\n\\n                value   = (deposits_.values[superRangeIndex] += sum);\\n                scaling = deposits_.scaling[superRangeIndex];\\n\\n                // Need to be careful due to rounding to propagate actual changes upwards in tree.\\n                // sum is always equal to the actual value we changed deposits_.values[] by\\n                if (scaling != 0) sum = Maths.wmul(value, scaling) - Maths.wmul(value - sum, scaling);\\n            }\\n            // consider next most significant bit\\n            bit = bit << 1;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Get prefix sum of all indexes from provided index downwards.\\n     *  @dev    Starts at tree root and decrements through range parent nodes summing from index `sumIndex_`'s range to index `0`.\\n     *  @param  deposits_  Deposits state struct.\\n     *  @param  sumIndex_  The index to receive the prefix sum.\\n     *  @param  sum_       The prefix sum from current index downwards.\\n     */\\n    function prefixSum(\\n        DepositsState storage deposits_,\\n        uint256 sumIndex_\\n    ) internal view returns (uint256 sum_) {\\n        // price buckets are indexed starting at 0, Fenwick bit logic is more elegant starting at 1\\n        ++sumIndex_;\\n\\n        uint256 runningScale = Maths.WAD; // Tracks scale(index_) as we move down Fenwick tree\\n        uint256 j            = SIZE;      // bit that iterates from MSB to LSB\\n        uint256 index        = 0;         // build up sumIndex bit by bit\\n\\n        // Used to terminate loop.  We don't need to consider final 0 bits of sumIndex_\\n        uint256 indexLSB = lsb(sumIndex_);\\n        uint256 curIndex;\\n\\n        while (j >= indexLSB) {\\n            curIndex = index + j;\\n\\n            // Skip considering indices outside bounds of Fenwick tree\\n            if (curIndex > SIZE) continue;\\n\\n            // We are considering whether to include node index + j in the sum or not.  Either way, we need to scaling[index + j],\\n            // either to increment sum_ or to accumulate in runningScale\\n            uint256 scaled = deposits_.scaling[curIndex];\\n\\n            if (sumIndex_ & j != 0) {\\n                // node index + j of tree is included in sum\\n                uint256 value = deposits_.values[curIndex];\\n\\n                // Accumulate in sum_, recall that scaled==0 means that the scale factor is actually 1\\n                sum_  += scaled != 0 ? Math.mulDiv(\\n                    runningScale * scaled,\\n                    value,\\n                    1e36\\n                ) : Maths.wmul(runningScale, value);\\n\\n                // Build up index bit by bit\\n                index = curIndex;\\n\\n                // terminate if we've already matched sumIndex_\\n                if (index == sumIndex_) break;\\n            } else {\\n                // node is not included in sum, but its scale needs to be included for subsequent sums\\n                if (scaled != 0) runningScale = Maths.floorWmul(runningScale, scaled);\\n            }\\n            // shift j to consider next less signficant bit\\n            j = j >> 1;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Decrease a node in the `FenwickTree` at an index.\\n     *  @dev    Starts at leaf/target and moved up towards root.\\n     *  @dev    === Reverts on ===\\n     *  @dev    unscaled amount to remove is 0 `InvalidAmount()`\\n     *  @param  deposits_             Deposits state struct.\\n     *  @param  index_                The deposit index.\\n     *  @param  unscaledRemoveAmount_ Unscaled amount to decrease deposit by.\\n     */\\n    function unscaledRemove(\\n        DepositsState storage deposits_,\\n        uint256 index_,\\n        uint256 unscaledRemoveAmount_\\n    ) internal {\\n\\n        // revert if 0 amount is removed.\\n        if (unscaledRemoveAmount_ == 0) revert InvalidAmount();\\n\\n        // price buckets are indexed starting at 0, Fenwick bit logic is more elegant starting at 1\\n        ++index_;\\n\\n        // We operate with unscaledRemoveAmount_ here instead of a scaled quantity to avoid duplicate computation of scale factor\\n        // (thus redundant iterations through the Fenwick tree), and ALSO so that we can set the value of a given deposit exactly\\n        // to 0.\\n        \\n        while (index_ <= SIZE) {\\n            // Decrement deposits_ at index_ for removeAmount, storing new value in value\\n            uint256 value   = (deposits_.values[index_] -= unscaledRemoveAmount_);\\n            uint256 scaling = deposits_.scaling[index_];\\n\\n            // If scale factor != 1, we need to adjust unscaledRemoveAmount by scale factor to adjust values further up in tree\\n            // On the line below, it would be tempting to replace this with:\\n            // unscaledRemoveAmount_ = Maths.wmul(unscaledRemoveAmount, scaling).  This will introduce nonzero values up\\n            // the tree due to rounding.  It's important to compute the actual change in deposits_.values[index_]\\n            // and propogate that upwards.\\n            if (scaling != 0) unscaledRemoveAmount_ = Maths.wmul(value + unscaledRemoveAmount_, scaling) - Maths.wmul(value,  scaling);\\n\\n            // Traverse upward through the \\\"update\\\" path of the Fenwick tree\\n            index_ += lsb(index_);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Scale tree starting from given index.\\n     *  @dev    Starts at leaf/target and moved up towards root.\\n     *  @param  deposits_ Deposits state struct.\\n     *  @param  index_    The deposit index.\\n     *  @return scaled_   Scaled value.\\n     */\\n    function scale(\\n        DepositsState storage deposits_,\\n        uint256 index_\\n    ) internal view returns (uint256 scaled_) {\\n        // price buckets are indexed starting at 0, Fenwick bit logic is more elegant starting at 1\\n        ++index_;\\n\\n        // start with scaled_1 = 1\\n        scaled_ = Maths.WAD;\\n        while (index_ <= SIZE) {\\n            // Traverse up through Fenwick tree via \\\"update\\\" path, accumulating scale factors as we go\\n            uint256 scaling = deposits_.scaling[index_];\\n            // scaling==0 means actual scale factor is 1\\n            if (scaling != 0) scaled_ = Maths.wmul(scaled_, scaling);\\n            index_ += lsb(index_);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns sum of all deposits.\\n     *  @param  deposits_ Deposits state struct.\\n     *  @return Sum of all deposits in tree.\\n     */\\n    function treeSum(\\n        DepositsState storage deposits_\\n    ) internal view returns (uint256) {\\n        // In a scaled Fenwick tree, sum is at the root node and never scaled\\n        return deposits_.values[SIZE];\\n    }\\n\\n    /**\\n     *  @notice Returns deposit value for a given deposit index.\\n     *  @param  deposits_     Deposits state struct.\\n     *  @param  index_        The deposit index.\\n     *  @return depositValue_ Value of the deposit.\\n     */\\n    function valueAt(\\n        DepositsState storage deposits_,\\n        uint256 index_\\n    ) internal view returns (uint256 depositValue_) {\\n        // Get unscaled value at index and multiply by scale\\n        depositValue_ = Maths.wmul(unscaledValueAt(deposits_, index_), scale(deposits_,index_));\\n    }\\n\\n    /**\\n     *  @notice Returns unscaled (deposit without interest) deposit value for a given deposit index.\\n     *  @param  deposits_             Deposits state struct.\\n     *  @param  index_                The deposit index.\\n     *  @return unscaledDepositValue_ Value of unscaled deposit.\\n     */\\n    function unscaledValueAt(\\n        DepositsState storage deposits_,\\n        uint256 index_\\n    ) internal view returns (uint256 unscaledDepositValue_) {\\n        // In a scaled Fenwick tree, sum is at the root node, but needs to be scaled\\n        ++index_;\\n\\n        uint256 j = 1;\\n\\n        // Returns the unscaled value at the node.  We consider the unscaled value for two reasons:\\n        // 1- If we want to zero out deposit in bucket, we need to subtract the exact unscaled value\\n        // 2- We may already have computed the scale factor, so we can avoid duplicate traversal\\n\\n        unscaledDepositValue_ = deposits_.values[index_];\\n        uint256 curIndex;\\n        uint256 value;\\n        uint256 scaling;\\n\\n        while (j & index_ == 0) {\\n            curIndex = index_ - j;\\n\\n            value   = deposits_.values[curIndex];\\n            scaling = deposits_.scaling[curIndex];\\n\\n            unscaledDepositValue_ -= scaling != 0 ? Maths.wmul(scaling, value) : value;\\n            j = j << 1;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns `LUP` for a given debt value (capped at min bucket price).\\n     *  @param  deposits_ Deposits state struct.\\n     *  @param  debt_     The debt amount to calculate `LUP` for.\\n     *  @return `LUP` for given debt.\\n     */\\n    function getLup(\\n        DepositsState storage deposits_,\\n        uint256 debt_\\n    ) internal view returns (uint256) {\\n        return _priceAt(findIndexOfSum(deposits_, debt_));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/internal/Loans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { SafeCast }       from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { PRBMathSD59x18 } from \\\"@prb-math/contracts/PRBMathSD59x18.sol\\\";\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    DepositsState,\\n    Loan,\\n    LoansState\\n} from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { _priceAt } from '../helpers/PoolHelper.sol';\\n\\nimport { Deposits } from './Deposits.sol';\\nimport { Maths }    from './Maths.sol';\\n\\n/**\\n    @title  Loans library\\n    @notice Internal library containing common logic for loans management.\\n    @dev    The `Loans` heap is a `Max Heap` data structure (complete binary tree), the root node is the loan with the highest t0 threshold price (`TP`)\\n            at a given time. The heap is represented as an array, where the first element is a dummy element (`Loan(address(0), 0)`) and the first\\n            value of the heap starts at index `1`, `ROOT_INDEX`. The t0 threshold price of a loan's parent is always greater than or equal to the\\n            t0 threshold price of the loan.\\n    @dev    This code was modified from the following source: https://github.com/zmitton/eth-heap/blob/master/contracts/Heap.sol\\n */\\nlibrary Loans {\\n\\n    uint256 constant ROOT_INDEX = 1;\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error ZeroDebtToCollateral();\\n\\n    /***********************/\\n    /***  Initialization ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Initializes Loans Max Heap.\\n     *  @dev    Organizes loans so `Highest t0 threshold price` can be retrieved easily.\\n     *  @param  loans_ Holds Loan heap data.\\n     */\\n    function init(LoansState storage loans_) internal {\\n        loans_.loans.push(Loan(address(0), 0));\\n    }\\n\\n    /***********************************/\\n    /***  Loans Management Functions ***/\\n    /***********************************/\\n\\n    /**\\n     *  @notice Updates a loan: updates heap (`upsert` if `TP` not `0`, `remove` otherwise) and borrower balance.\\n     *  @dev    === Write state ===\\n     *  @dev    - `_upsert`:\\n     *  @dev      insert or update loan in `loans` array\\n     *  @dev    - `remove`:\\n     *  @dev      remove loan from `loans` array\\n     *  @dev    - update borrower in `address => borrower` mapping\\n     *  @param loans_           Holds loans heap data.\\n     *  @param borrower_        Borrower struct with borrower details.\\n     *  @param borrowerAddress_ Borrower's address to update.\\n     *  @param poolRate_        Pool's current rate.\\n     *  @param inAuction_       Whether the loan is in auction or not.\\n     *  @param npTpRatioUpdate_ Whether the Np to Tp ratio of borrower should be updated or not.\\n     */\\n    function update(\\n        LoansState storage loans_,\\n        Borrower memory borrower_,\\n        address borrowerAddress_,\\n        uint256 poolRate_,\\n        bool inAuction_,\\n        bool npTpRatioUpdate_\\n    ) internal {\\n\\n        bool activeBorrower = borrower_.t0Debt != 0 && borrower_.collateral != 0;\\n\\n        uint256 t0DebtToCollateral = activeBorrower ? Maths.wdiv(borrower_.t0Debt, borrower_.collateral) : 0;\\n\\n        // loan not in auction, update t0 threshold price and position in heap\\n        if (!inAuction_ ) {\\n            // get the loan id inside the heap\\n            uint256 loanId = loans_.indices[borrowerAddress_];\\n            if (activeBorrower) {\\n                // revert if t0 threshold price is zero\\n                if (t0DebtToCollateral == 0) revert ZeroDebtToCollateral();\\n\\n                // update heap, insert if a new loan, update loan if already in heap\\n                _upsert(loans_, borrowerAddress_, loanId, SafeCast.toUint96(t0DebtToCollateral));\\n\\n            // if loan is in heap and borrwer is no longer active (no debt, no collateral) then remove loan from heap\\n            } else if (loanId != 0) {\\n                remove(loans_, borrowerAddress_, loanId);\\n            }\\n        }\\n\\n        // update Np to Tp ratio of borrower\\n        if (npTpRatioUpdate_) {\\n            borrower_.npTpRatio = 1e18 + uint256(PRBMathSD59x18.sqrt(int256(poolRate_))) / 2;\\n        }\\n\\n        // save borrower state\\n        loans_.borrowers[borrowerAddress_] = borrower_;\\n    }\\n\\n    /**************************************/\\n    /***  Loans Heap Internal Functions ***/\\n    /**************************************/\\n\\n    /**\\n     *  @notice Moves a `Loan` up the heap.\\n     *  @param loans_ Holds loans heap data.\\n     *  @param loan_  `Loan` to be moved.\\n     *  @param index_ Index of `Loan` to be moved to.\\n     */\\n    function _bubbleUp(LoansState storage loans_, Loan memory loan_, uint index_) private {\\n        uint256 count = loans_.loans.length;\\n        if (index_ == ROOT_INDEX || loan_.t0DebtToCollateral <= loans_.loans[index_ / 2].t0DebtToCollateral){\\n          _insert(loans_, loan_, index_, count);\\n        } else {\\n          _insert(loans_, loans_.loans[index_ / 2], index_, count);\\n          _bubbleUp(loans_, loan_, index_ / 2);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Moves a `Loan` down the heap.\\n     *  @param loans_ Holds loans heap data.\\n     *  @param loan_  `Loan` to be moved.\\n     *  @param index_ Index of `Loan` to be moved to.\\n     */\\n    function _bubbleDown(LoansState storage loans_, Loan memory loan_, uint index_) private {\\n        // Left child index.\\n        uint cIndex = index_ * 2;\\n\\n        uint256 count = loans_.loans.length;\\n        if (count <= cIndex) {\\n            _insert(loans_, loan_, index_, count);\\n        } else {\\n            Loan memory largestChild = loans_.loans[cIndex];\\n\\n            if (count > cIndex + 1 && loans_.loans[cIndex + 1].t0DebtToCollateral > largestChild.t0DebtToCollateral) {\\n                largestChild = loans_.loans[++cIndex];\\n            }\\n\\n            if (largestChild.t0DebtToCollateral <= loan_.t0DebtToCollateral) {\\n              _insert(loans_, loan_, index_, count);\\n            } else {\\n              _insert(loans_, largestChild, index_, count);\\n              _bubbleDown(loans_, loan_, cIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice Inserts a `Loan` in the heap.\\n     *  @param loans_ Holds loans heap data.\\n     *  @param loan_  `Loan` to be inserted.\\n     *  @param index_ Index of `Loan` to be inserted at.\\n     */\\n    function _insert(LoansState storage loans_, Loan memory loan_, uint index_, uint256 count_) private {\\n        if (index_ == count_) loans_.loans.push(loan_);\\n        else loans_.loans[index_] = loan_;\\n\\n        loans_.indices[loan_.borrower] = index_;\\n    }\\n\\n    /**\\n     *  @notice Removes `Loan` from heap given borrower address.\\n     *  @param loans_    Holds loans heap data.\\n     *  @param borrower_ Borrower address whose `Loan` is being updated or inserted.\\n     *  @param index_    Index of `Loan` to be removed.\\n     */\\n    function remove(LoansState storage loans_, address borrower_, uint256 index_) internal {\\n        delete loans_.indices[borrower_];\\n        uint256 tailIndex = loans_.loans.length - 1;\\n        if (index_ == tailIndex) loans_.loans.pop(); // we're removing the tail, pop without sorting\\n        else {\\n            Loan memory tail = loans_.loans[tailIndex];\\n            loans_.loans.pop();            // remove tail loan\\n            _bubbleUp(loans_, tail, index_);\\n            _bubbleDown(loans_, loans_.loans[index_], index_);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Performs an insert or an update dependent on borrowers existance.\\n     *  @param loans_              Holds loans heap data.\\n     *  @param borrower_           Borrower address that is being updated or inserted.\\n     *  @param index_              Index of `Loan` to be upserted.\\n     *  @param t0DebtToCollateral_ Borrower t0 debt to collateral that is updated or inserted.\\n     */\\n    function _upsert(\\n        LoansState storage loans_,\\n        address borrower_,\\n        uint256 index_,\\n        uint96 t0DebtToCollateral_\\n    ) internal {\\n        // Loan exists, update in place.\\n        if (index_ != 0) {\\n            Loan memory currentLoan = loans_.loans[index_];\\n            if (currentLoan.t0DebtToCollateral > t0DebtToCollateral_) {\\n                currentLoan.t0DebtToCollateral = t0DebtToCollateral_;\\n                _bubbleDown(loans_, currentLoan, index_);\\n            } else {\\n                currentLoan.t0DebtToCollateral = t0DebtToCollateral_;\\n                _bubbleUp(loans_, currentLoan, index_);\\n            }\\n\\n        // New loan, insert it\\n        } else {\\n            _bubbleUp(loans_, Loan(borrower_, t0DebtToCollateral_), loans_.loans.length);\\n        }\\n    }\\n\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Retreives `Loan` by index, `index_`.\\n     *  @param loans_ Holds loans heap data.\\n     *  @param index_ Index to retrieve `Loan`.\\n     *  @return `Loan` struct retrieved by index.\\n     */\\n    function getByIndex(LoansState storage loans_, uint256 index_) internal view returns(Loan memory) {\\n        return loans_.loans.length > index_ ? loans_.loans[index_] : Loan(address(0), 0);\\n    }\\n\\n    /**\\n     *  @notice Retreives `Loan` with the highest t0 threshold price value.\\n     *  @param loans_ Holds loans heap data.\\n     *  @return `Max Loan` in the heap.\\n     */\\n    function getMax(LoansState storage loans_) internal view returns(Loan memory) {\\n        return getByIndex(loans_, ROOT_INDEX);\\n    }\\n\\n    /**\\n     *  @notice Returns number of loans in pool.\\n     *  @param loans_ Holds loans heap data.\\n     *  @return Number of loans in pool.\\n     */\\n    function noOfLoans(LoansState storage loans_) internal view returns (uint256) {\\n        return loans_.loans.length - 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/LenderActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport {\\n    AddQuoteParams,\\n    MoveQuoteParams,\\n    RemoveQuoteParams\\n}                     from '../../interfaces/pool/commons/IPoolInternals.sol';\\nimport {\\n    Bucket,\\n    DepositsState,\\n    Lender,\\n    PoolState\\n}                     from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { \\n    _depositFeeRate,\\n    _htp,\\n    _priceAt,\\n    MAX_FENWICK_INDEX\\n} from '../helpers/PoolHelper.sol';\\n\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Buckets }  from '../internal/Buckets.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n/**\\n    @title  LenderActions library\\n    @notice External library containing logic for lender actors:\\n            - `Lenders`: add, remove and move quote tokens;\\n            - `Traders`: add, remove and move quote tokens; add and remove collateral\\n */\\nlibrary LenderActions {\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `moveQuoteToken` function local vars.\\n    struct MoveQuoteLocalVars {\\n        uint256 fromBucketPrice;            // [WAD] Price of the bucket to move amount from.\\n        uint256 fromBucketCollateral;       // [WAD] Total amount of collateral in from bucket.\\n        uint256 fromBucketLP;               // [WAD] Total amount of LP in from bucket.\\n        uint256 fromBucketLenderLP;         // [WAD] Amount of LP owned by lender in from bucket.\\n        uint256 fromBucketDepositTime;      // Time of lender deposit in the bucket to move amount from.\\n        uint256 fromBucketRemainingLP;      // Amount of LP remaining in from bucket after move.\\n        uint256 fromBucketRemainingDeposit; // Amount of scaled deposit remaining in from bucket after move.\\n        uint256 toBucketPrice;              // [WAD] Price of the bucket to move amount to.\\n        uint256 toBucketBankruptcyTime;     // Time the bucket to move amount to was marked as insolvent.\\n        uint256 toBucketDepositTime;        // Time of lender deposit in the bucket to move amount to.\\n        uint256 toBucketUnscaledDeposit;    // Amount of unscaled deposit in to bucket.\\n        uint256 toBucketDeposit;            // Amount of scaled deposit in to bucket.\\n        uint256 toBucketScale;              // Scale deposit of to bucket.\\n        uint256 htp;                        // [WAD] Highest Threshold Price.\\n    }\\n\\n    /// @dev Struct used for `removeQuoteToken` function local vars.\\n    struct RemoveDepositParams {\\n        uint256 depositConstraint; // [WAD] Constraint on deposit in quote token.\\n        uint256 lpConstraint;      // [WAD] Constraint in LPB terms.\\n        uint256 bucketLP;          // [WAD] Total LPB in the bucket.\\n        uint256 bucketCollateral;  // [WAD] Claimable collateral in the bucket.\\n        uint256 price;             // [WAD] Price of bucket.\\n        uint256 index;             // Bucket index.\\n        uint256 dustLimit;         // Minimum amount of deposit which may reside in a bucket.\\n    }\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event AddQuoteToken(address indexed lender, uint256 indexed index, uint256 amount, uint256 lpAwarded, uint256 lup);\\n    event BucketBankruptcy(uint256 indexed index, uint256 lpForfeited);\\n    event MoveQuoteToken(address indexed lender, uint256 indexed from, uint256 indexed to, uint256 amount, uint256 lpRedeemedFrom, uint256 lpAwardedTo, uint256 lup);\\n    event RemoveQuoteToken(address indexed lender, uint256 indexed index, uint256 amount, uint256 lpRedeemed, uint256 lup);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error BucketBankruptcyBlock();\\n    error CannotMergeToHigherPrice();\\n    error DustAmountNotExceeded();\\n    error InvalidIndex();\\n    error InvalidAmount();\\n    error LUPBelowHTP();\\n    error NoClaim();\\n    error InsufficientLP();\\n    error InsufficientLiquidity();\\n    error InsufficientCollateral();\\n    error MoveToSameIndex();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IERC20PoolLenderActions` and `IERC721PoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Buckets.addCollateral`:\\n     *  @dev      increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev      `addLenderLP`: increment `lender.lps` accumulator and `lender.depositTime `state\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid bucket index `InvalidIndex()`\\n     *  @dev    no LP awarded in bucket `InsufficientLP()`\\n     */\\n    function addCollateral(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        uint256 collateralAmountToAdd_,\\n        uint256 index_\\n    ) external returns (uint256 bucketLP_) {\\n        // revert if no amount to be added\\n        if (collateralAmountToAdd_ == 0) revert InvalidAmount();\\n        // revert if adding at invalid index\\n        if (index_ == 0 || index_ > MAX_FENWICK_INDEX) revert InvalidIndex();\\n\\n        uint256 bucketDeposit = Deposits.valueAt(deposits_, index_);\\n        uint256 bucketPrice   = _priceAt(index_);\\n\\n        bucketLP_ = Buckets.addCollateral(\\n            buckets_[index_],\\n            msg.sender,\\n            bucketDeposit,\\n            collateralAmountToAdd_,\\n            bucketPrice\\n        );\\n\\n        // revert if (due to rounding) the awarded LP is 0\\n        if (bucketLP_ == 0) revert InsufficientLP();\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Deposits.unscaledAdd` (add new amount in `Fenwick` tree): update `values` array state \\n     *  @dev    - increment `bucket.lps` accumulator\\n     *  @dev    - increment `lender.lps` accumulator and `lender.depositTime` state\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid bucket index `InvalidIndex()`\\n     *  @dev    same block when bucket becomes insolvent `BucketBankruptcyBlock()`\\n     *  @dev    no LP awarded in bucket `InsufficientLP()`\\n     *  @dev    calculated unscaled amount to add is 0 `InvalidAmount()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `AddQuoteToken`\\n     */\\n    function addQuoteToken(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        PoolState calldata poolState_,\\n        AddQuoteParams calldata params_\\n    ) external returns (uint256 bucketLP_, uint256 addedAmount_, uint256 lup_) {\\n        // revert if no amount to be added\\n        if (params_.amount == 0) revert InvalidAmount();\\n        // revert if adding to an invalid index\\n        if (params_.index == 0 || params_.index > MAX_FENWICK_INDEX) revert InvalidIndex();\\n\\n        Bucket storage bucket = buckets_[params_.index];\\n\\n        uint256 bankruptcyTime = bucket.bankruptcyTime;\\n\\n        // cannot deposit in the same block when bucket becomes insolvent\\n        if (bankruptcyTime == block.timestamp) revert BucketBankruptcyBlock();\\n\\n        uint256 unscaledBucketDeposit = Deposits.unscaledValueAt(deposits_, params_.index);\\n        uint256 bucketScale           = Deposits.scale(deposits_, params_.index);\\n        uint256 bucketDeposit         = Maths.wmul(bucketScale, unscaledBucketDeposit);\\n        uint256 bucketPrice           = _priceAt(params_.index);\\n\\n        // calculate added amount charging deposit fee\\n        addedAmount_ = Maths.wmul(params_.amount, Maths.WAD - _depositFeeRate(poolState_.rate));\\n\\n        bucketLP_ = Buckets.quoteTokensToLP(\\n            bucket.collateral,\\n            bucket.lps,\\n            bucketDeposit,\\n            addedAmount_,\\n            bucketPrice,\\n            Math.Rounding.Down\\n        );\\n\\n        // revert if (due to rounding) the awarded LP is 0\\n        if (bucketLP_ == 0) revert InsufficientLP();\\n\\n        Deposits.unscaledAdd(deposits_, params_.index, Maths.wdiv(addedAmount_, bucketScale));\\n\\n        // update lender LP\\n        Buckets.addLenderLP(bucket, bankruptcyTime, msg.sender, bucketLP_);\\n\\n        // update bucket LP\\n        bucket.lps += bucketLP_;\\n\\n        // calculate new LUP\\n        uint256 lupIndex = Deposits.findIndexOfSum(deposits_, poolState_.debt);\\n        lup_ = _priceAt(lupIndex);\\n\\n        emit AddQuoteToken(\\n            msg.sender,\\n            params_.index,\\n            addedAmount_,\\n            bucketLP_,\\n            lup_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `_removeMaxDeposit`:\\n     *  @dev      `Deposits.unscaledRemove` (remove amount in `Fenwick` tree, from index): update `values` array state\\n     *  @dev    - `Deposits.unscaledAdd` (add amount in `Fenwick` tree, to index): update `values` array state\\n     *  @dev    - decrement `lender.lps` accumulator for from bucket\\n     *  @dev    - increment `lender.lps` accumulator and `lender.depositTime` state for to bucket\\n     *  @dev    - decrement `bucket.lps` accumulator for from bucket\\n     *  @dev    - increment `bucket.lps` accumulator for to bucket\\n     *  @dev    === Reverts on ===\\n     *  @dev    same index `MoveToSameIndex()`\\n     *  @dev    dust amount `DustAmountNotExceeded()`\\n     *  @dev    invalid index `InvalidIndex()`\\n     *  @dev    no LP awarded in to bucket `InsufficientLP()`\\n     *  @dev    calculated unscaled amount to move is 0 `InvalidAmount()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketBankruptcy`\\n     *  @dev    - `MoveQuoteToken`\\n     */\\n    function moveQuoteToken(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        PoolState calldata poolState_,\\n        MoveQuoteParams calldata params_\\n    ) external returns (uint256 fromBucketRedeemedLP_, uint256 toBucketLP_, uint256 movedAmount_, uint256 lup_) {\\n        if (params_.fromIndex == params_.toIndex)\\n            revert MoveToSameIndex();\\n        if (params_.maxAmountToMove < poolState_.quoteTokenScale)\\n            revert DustAmountNotExceeded();\\n        if (params_.toIndex == 0 || params_.toIndex > MAX_FENWICK_INDEX) \\n            revert InvalidIndex();\\n\\n        Bucket storage toBucket = buckets_[params_.toIndex];\\n\\n        MoveQuoteLocalVars memory vars;\\n        vars.toBucketBankruptcyTime = toBucket.bankruptcyTime;\\n\\n        // cannot move in the same block when target bucket becomes insolvent\\n        if (vars.toBucketBankruptcyTime == block.timestamp) revert BucketBankruptcyBlock();\\n\\n        Bucket storage fromBucket       = buckets_[params_.fromIndex];\\n        Lender storage fromBucketLender = fromBucket.lenders[msg.sender];\\n\\n        vars.fromBucketPrice       = _priceAt(params_.fromIndex);\\n        vars.fromBucketCollateral  = fromBucket.collateral;\\n        vars.fromBucketLP          = fromBucket.lps;\\n        vars.fromBucketDepositTime = fromBucketLender.depositTime;\\n\\n        vars.toBucketPrice         = _priceAt(params_.toIndex);\\n\\n        if (fromBucket.bankruptcyTime < vars.fromBucketDepositTime) vars.fromBucketLenderLP = fromBucketLender.lps;\\n\\n        (movedAmount_, fromBucketRedeemedLP_, vars.fromBucketRemainingDeposit) = _removeMaxDeposit(\\n            deposits_,\\n            RemoveDepositParams({\\n                depositConstraint: params_.maxAmountToMove,\\n                lpConstraint:      vars.fromBucketLenderLP,\\n                bucketLP:          vars.fromBucketLP,\\n                bucketCollateral:  vars.fromBucketCollateral,\\n                price:             vars.fromBucketPrice,\\n                index:             params_.fromIndex,\\n                dustLimit:         poolState_.quoteTokenScale\\n            })\\n        );\\n\\n        // apply deposit fee if moving to a lower-priced bucket\\n        if (params_.fromIndex < params_.toIndex) {\\n            movedAmount_ = Maths.wmul(movedAmount_, Maths.WAD - _depositFeeRate(poolState_.rate));\\n        }\\n\\n        vars.toBucketUnscaledDeposit = Deposits.unscaledValueAt(deposits_, params_.toIndex);\\n        vars.toBucketScale           = Deposits.scale(deposits_, params_.toIndex);\\n        vars.toBucketDeposit         = Maths.wmul(vars.toBucketUnscaledDeposit, vars.toBucketScale);\\n\\n        toBucketLP_ = Buckets.quoteTokensToLP(\\n            toBucket.collateral,\\n            toBucket.lps,\\n            vars.toBucketDeposit,\\n            movedAmount_,\\n            vars.toBucketPrice,\\n            Math.Rounding.Down\\n        );\\n\\n        // revert if (due to rounding) the awarded LP in to bucket is 0\\n        if (toBucketLP_ == 0) revert InsufficientLP();\\n\\n        Deposits.unscaledAdd(deposits_, params_.toIndex, Maths.wdiv(movedAmount_, vars.toBucketScale));\\n\\n        // recalculate LUP and HTP\\n        lup_ = Deposits.getLup(deposits_, poolState_.debt);\\n        vars.htp = _htp(params_.maxT0DebtToCollateral, poolState_.inflator);\\n\\n        // check loan book's htp against new lup, revert if move drives LUP below HTP\\n        if (\\n            params_.fromIndex < params_.toIndex\\n            &&\\n            (\\n                // check loan book's htp doesn't exceed new lup\\n                vars.htp > lup_\\n                ||\\n                // ensure that pool debt < deposits after move\\n                // this can happen if deposit fee is applied when moving amount\\n                (poolState_.debt != 0 && poolState_.debt > Deposits.treeSum(deposits_))\\n            )\\n        ) revert LUPBelowHTP();\\n\\n        // update lender and bucket LP balance in from bucket\\n        vars.fromBucketRemainingLP = vars.fromBucketLP - fromBucketRedeemedLP_;\\n\\n        // check if from bucket healthy after move quote tokens - set bankruptcy if collateral and deposit are 0 but there's still LP\\n        if (vars.fromBucketCollateral == 0 && vars.fromBucketRemainingDeposit == 0 && vars.fromBucketRemainingLP != 0) {\\n            fromBucket.lps            = 0;\\n            fromBucket.bankruptcyTime = block.timestamp;\\n\\n            emit BucketBankruptcy(\\n                params_.fromIndex,\\n                vars.fromBucketRemainingLP\\n            );\\n        } else {\\n            // update lender and bucket LP balance\\n            fromBucketLender.lps -= fromBucketRedeemedLP_;\\n\\n            fromBucket.lps = vars.fromBucketRemainingLP;\\n        }\\n\\n        // update lender and bucket LP balance in target bucket\\n        Lender storage toBucketLender = toBucket.lenders[msg.sender];\\n\\n        vars.toBucketDepositTime = toBucketLender.depositTime;\\n        if (vars.toBucketBankruptcyTime >= vars.toBucketDepositTime) {\\n            // bucket is bankrupt and deposit was done before bankruptcy time, reset lender lp amount\\n            toBucketLender.lps = toBucketLP_;\\n\\n            // set deposit time of the lender's to bucket as bucket's last bankruptcy timestamp + 1 so deposit won't get invalidated\\n            vars.toBucketDepositTime = vars.toBucketBankruptcyTime + 1;\\n        } else {\\n            toBucketLender.lps += toBucketLP_;\\n        }\\n\\n        // set deposit time to the greater of the lender's from bucket and the target bucket\\n        toBucketLender.depositTime = Maths.max(vars.fromBucketDepositTime, vars.toBucketDepositTime);\\n\\n        // update bucket LP balance\\n        toBucket.lps += toBucketLP_;\\n\\n        emit MoveQuoteToken(\\n            msg.sender,\\n            params_.fromIndex,\\n            params_.toIndex,\\n            movedAmount_,\\n            fromBucketRedeemedLP_,\\n            toBucketLP_,\\n            lup_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `_removeMaxDeposit`:\\n     *  @dev      `Deposits.unscaledRemove` (remove amount in `Fenwick` tree, from index): update `values` array state\\n     *  @dev    - decrement `lender.lps` accumulator\\n     *  @dev    - decrement `bucket.lps` accumulator\\n     *  @dev    === Reverts on ===\\n     *  @dev    no `LP` `NoClaim()`;\\n     *  @dev    `LUP` lower than `HTP` `LUPBelowHTP()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `RemoveQuoteToken`\\n     *  @dev    - `BucketBankruptcy`\\n     */\\n    function removeQuoteToken(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        PoolState calldata poolState_,\\n        RemoveQuoteParams calldata params_\\n    ) external returns (uint256 removedAmount_, uint256 redeemedLP_, uint256 lup_) {\\n        // revert if no amount to be removed\\n        if (params_.maxAmount == 0) revert InvalidAmount();\\n\\n        Bucket storage bucket = buckets_[params_.index];\\n        Lender storage lender = bucket.lenders[msg.sender];\\n\\n        uint256 depositTime = lender.depositTime;\\n\\n        RemoveDepositParams memory removeParams;\\n\\n        if (bucket.bankruptcyTime < depositTime) removeParams.lpConstraint = lender.lps;\\n\\n        // revert if no LP to claim\\n        if (removeParams.lpConstraint == 0) revert NoClaim();\\n\\n        removeParams.depositConstraint = params_.maxAmount;\\n        removeParams.price             = _priceAt(params_.index);\\n        removeParams.bucketLP          = bucket.lps;\\n        removeParams.bucketCollateral  = bucket.collateral;\\n        removeParams.index             = params_.index;\\n        removeParams.dustLimit         = poolState_.quoteTokenScale;\\n\\n        uint256 unscaledRemaining;\\n\\n        (removedAmount_, redeemedLP_, unscaledRemaining) = _removeMaxDeposit(\\n            deposits_,\\n            removeParams\\n        );\\n\\n        lup_ = Deposits.getLup(deposits_, poolState_.debt);\\n\\n        uint256 htp = _htp(params_.maxT0DebtToCollateral, poolState_.inflator);\\n\\n        if (\\n            // check loan book's htp doesn't exceed new lup\\n            htp > lup_\\n            ||\\n            // ensure that pool debt < deposits after removal\\n            // this can happen if lup and htp are less than min bucket price and htp > lup (since LUP is capped at min bucket price)\\n            (poolState_.debt != 0 && poolState_.debt > Deposits.treeSum(deposits_))\\n        ) revert LUPBelowHTP();\\n\\n        uint256 lpRemaining = removeParams.bucketLP - redeemedLP_;\\n\\n        // check if bucket healthy after remove quote tokens - set bankruptcy if collateral and deposit are 0 but there's still LP\\n        if (removeParams.bucketCollateral == 0 && unscaledRemaining == 0 && lpRemaining != 0) {\\n            bucket.lps            = 0;\\n            bucket.bankruptcyTime = block.timestamp;\\n\\n            emit BucketBankruptcy(\\n                params_.index,\\n                lpRemaining\\n            );\\n        } else {\\n            // update lender and bucket LP balances\\n            lender.lps -= redeemedLP_;\\n\\n            bucket.lps = lpRemaining;\\n        }\\n\\n        emit RemoveQuoteToken(\\n            msg.sender,\\n            params_.index,\\n            removedAmount_,\\n            redeemedLP_,\\n            lup_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    decrement `lender.lps` accumulator\\n     *  @dev    decrement `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    === Reverts on ===\\n     *  @dev    not enough collateral `InsufficientCollateral()`\\n     *  @dev    no `LP` redeemed `InsufficientLP()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketBankruptcy`\\n     */\\n    function removeCollateral(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        uint256 amount_,\\n        uint256 index_\\n    ) external returns (uint256 lpAmount_) {\\n        // revert if no amount to be removed\\n        if (amount_ == 0) revert InvalidAmount();\\n\\n        Bucket storage bucket = buckets_[index_];\\n\\n        uint256 bucketCollateral = bucket.collateral;\\n\\n        if (amount_ > bucketCollateral) revert InsufficientCollateral();\\n\\n        uint256 bucketPrice   = _priceAt(index_);\\n        uint256 bucketLP      = bucket.lps;\\n        uint256 bucketDeposit = Deposits.valueAt(deposits_, index_);\\n\\n        lpAmount_ = Buckets.collateralToLP(\\n            bucketCollateral,\\n            bucketLP,\\n            bucketDeposit,\\n            amount_,\\n            bucketPrice,\\n            Math.Rounding.Up\\n        );\\n\\n        // revert if (due to rounding) required LP is 0\\n        if (lpAmount_ == 0) revert InsufficientLP();\\n\\n        Lender storage lender = bucket.lenders[msg.sender];\\n\\n        uint256 lenderLpBalance;\\n        if (bucket.bankruptcyTime < lender.depositTime) lenderLpBalance = lender.lps;\\n        if (lenderLpBalance == 0 || lpAmount_ > lenderLpBalance) revert InsufficientLP();\\n\\n        // update bucket LP and collateral balance\\n        bucketLP -= lpAmount_;\\n\\n        // If clearing out the bucket collateral, ensure it's zeroed out\\n        if (bucketLP == 0 && bucketDeposit == 0) {\\n            amount_ = bucketCollateral;\\n        }\\n\\n        bucketCollateral  -= amount_;\\n        bucket.collateral = bucketCollateral;\\n\\n        // check if bucket healthy after collateral remove - set bankruptcy if collateral and deposit are 0 but there's still LP\\n        if (bucketCollateral == 0 && bucketDeposit == 0 && bucketLP != 0) {\\n            bucket.lps            = 0;\\n            bucket.bankruptcyTime = block.timestamp;\\n\\n            emit BucketBankruptcy(\\n                index_,\\n                bucketLP\\n            );\\n        } else {\\n            // update lender and bucket LP balances\\n            lender.lps -= lpAmount_;\\n            bucket.lps = bucketLP;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Removes max collateral amount from a given bucket index.\\n     *  @dev    === Write state ===\\n     *  @dev    - `_removeMaxCollateral`:\\n     *  @dev      decrement `lender.lps` accumulator\\n     *  @dev      decrement `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    === Reverts on ===\\n     *  @dev    not enough collateral `InsufficientCollateral()`\\n     *  @dev    no claim `NoClaim()`\\n     *  @dev    leaves less than dust limit in bucket `DustAmountNotExceeded()`\\n     *  @return Amount of collateral that was removed.\\n     *  @return Amount of LP redeemed for removed collateral amount.\\n     */\\n    function removeMaxCollateral(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        uint256 dustLimit_,\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external returns (uint256, uint256) {\\n        // revert if no amount to remove\\n        if (maxAmount_ == 0) revert InvalidAmount();\\n\\n        return _removeMaxCollateral(\\n            buckets_,\\n            deposits_,\\n            dustLimit_,\\n            maxAmount_,\\n            index_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IERC721PoolLenderActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Buckets.addCollateral`:\\n     *  @dev      increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev      increment `lender.lps` accumulator and `lender.depositTime` state\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid merge index `CannotMergeToHigherPrice()`\\n     *  @dev    no `LP` awarded in `toIndex_` bucket `InsufficientLP()`\\n     *  @dev    no collateral removed from bucket `InvalidAmount()`\\n     */\\n    function mergeOrRemoveCollateral(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        uint256[] calldata removalIndexes_,\\n        uint256 collateralAmount_,\\n        uint256 toIndex_\\n    ) external returns (uint256 collateralToMerge_, uint256 bucketLP_) {\\n        uint256 i;\\n        uint256 fromIndex;\\n        uint256 collateralRemoved;\\n        uint256 noOfBuckets = removalIndexes_.length;\\n        uint256 collateralRemaining = collateralAmount_;\\n\\n        // Loop over buckets, exit if collateralAmount is reached or max noOfBuckets is reached\\n        while (collateralToMerge_ < collateralAmount_ && i < noOfBuckets) {\\n            fromIndex = removalIndexes_[i];\\n\\n            if (fromIndex > toIndex_) revert CannotMergeToHigherPrice();\\n\\n            (collateralRemoved, ) = _removeMaxCollateral(\\n                buckets_,\\n                deposits_,\\n                1,                   // dust limit is same as collateral scale\\n                collateralRemaining,\\n                fromIndex\\n            );\\n\\n            // revert if calculated amount of collateral to remove is 0\\n            if (collateralRemoved == 0) revert InvalidAmount();\\n\\n            collateralToMerge_ += collateralRemoved;\\n\\n            collateralRemaining = collateralRemaining - collateralRemoved;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        if (collateralToMerge_ != collateralAmount_) {\\n            // Merge totalled collateral to specified bucket, toIndex_\\n            uint256 toBucketDeposit = Deposits.valueAt(deposits_, toIndex_);\\n            uint256 toBucketPrice   = _priceAt(toIndex_);\\n\\n            bucketLP_ = Buckets.addCollateral(\\n                buckets_[toIndex_],\\n                msg.sender,\\n                toBucketDeposit,\\n                collateralToMerge_,\\n                toBucketPrice\\n            );\\n\\n            // revert if (due to rounding) the awarded LP is 0\\n            if (bucketLP_ == 0) revert InsufficientLP();\\n        }\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Removes max collateral amount from a given bucket index.\\n     *  @dev    === Write state ===\\n     *  @dev    decrement `lender.lps` accumulator\\n     *  @dev    decrement `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    === Reverts on ===\\n     *  @dev    not enough collateral `InsufficientCollateral()`\\n     *  @dev    no claim `NoClaim()`\\n     *  @dev    no `LP` redeemed `InsufficientLP()`\\n     *  @dev    leaves less than dust limit in bucket `DustAmountNotExceeded()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketBankruptcy`\\n     *  @return collateralAmount_ Amount of collateral that was removed.\\n     *  @return lpAmount_         Amount of `LP` redeemed for removed collateral amount.\\n     */\\n    function _removeMaxCollateral(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        uint256 dustLimit_,\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) internal returns (uint256 collateralAmount_, uint256 lpAmount_) {\\n        Bucket storage bucket = buckets_[index_];\\n\\n        uint256 bucketCollateral = bucket.collateral;\\n        // revert if there's no collateral in bucket\\n        if (bucketCollateral == 0) revert InsufficientCollateral();\\n\\n        Lender storage lender = bucket.lenders[msg.sender];\\n\\n        uint256 lenderLpBalance;\\n\\n        if (bucket.bankruptcyTime < lender.depositTime) lenderLpBalance = lender.lps;\\n        // revert if no LP to redeem\\n        if (lenderLpBalance == 0) revert NoClaim();\\n\\n        uint256 bucketPrice   = _priceAt(index_);\\n        uint256 bucketLP     = bucket.lps;\\n        uint256 bucketDeposit = Deposits.valueAt(deposits_, index_);\\n\\n        // limit amount by what is available in the bucket\\n        collateralAmount_ = Maths.min(maxAmount_, bucketCollateral);\\n\\n        // determine how much LP would be required to remove the requested amount\\n        uint256 requiredLP = Buckets.collateralToLP(\\n            bucketCollateral,\\n            bucketLP,\\n            bucketDeposit,\\n            collateralAmount_,\\n            bucketPrice,\\n            Math.Rounding.Up\\n        );\\n\\n        // revert if (due to rounding) the required LP is 0\\n        if (requiredLP == 0) revert InsufficientLP();\\n\\n        // limit withdrawal by the lender's LPB\\n        if (requiredLP <= lenderLpBalance) {\\n            // withdraw collateralAmount_ as is\\n            lpAmount_ = requiredLP;\\n        } else {\\n            lpAmount_         = lenderLpBalance;\\n            collateralAmount_ = Math.mulDiv(lenderLpBalance, collateralAmount_, requiredLP);\\n\\n            if (collateralAmount_ == 0) revert InsufficientLP();\\n        }\\n\\n        // update bucket LP and collateral balance\\n        bucketLP -= Maths.min(bucketLP, lpAmount_);\\n\\n        // If clearing out the bucket collateral, ensure it's zeroed out\\n        if (bucketLP == 0 && bucketDeposit == 0) collateralAmount_ = bucketCollateral;\\n\\n        collateralAmount_ = Maths.min(bucketCollateral, collateralAmount_);\\n        bucketCollateral  -= collateralAmount_;\\n        if (bucketCollateral != 0 && bucketCollateral < dustLimit_) revert DustAmountNotExceeded();\\n        bucket.collateral = bucketCollateral;\\n\\n        // check if bucket healthy after collateral remove - set bankruptcy if collateral and deposit are 0 but there's still LP\\n        if (bucketCollateral == 0 && bucketDeposit == 0 && bucketLP != 0) {\\n            bucket.lps            = 0;\\n            bucket.bankruptcyTime = block.timestamp;\\n\\n            emit BucketBankruptcy(\\n                index_,\\n                bucketLP\\n            );\\n        } else {\\n            // update lender and bucket LP balances\\n            lender.lps -= lpAmount_;\\n            bucket.lps = bucketLP;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Removes the amount of quote tokens calculated for the given amount of LP.\\n     *  @dev    === Write state ===\\n     *  @dev    - `Deposits.unscaledRemove` (remove amount in `Fenwick` tree, from index):\\n     *  @dev      update `values` array state\\n     *  @dev    === Reverts on ===\\n     *  @dev    no `LP` redeemed `InsufficientLP()`\\n     *  @dev    no unscaled amount removed `InvalidAmount()`\\n     *  @return removedAmount_     Amount of scaled deposit removed.\\n     *  @return redeemedLP_        Amount of bucket `LP` corresponding for calculated scaled deposit amount.\\n     *  @return unscaledRemaining_ Amount of unscaled deposit remaining.\\n     */\\n    function _removeMaxDeposit(\\n        DepositsState storage deposits_,\\n        RemoveDepositParams memory params_\\n    ) internal returns (uint256 removedAmount_, uint256 redeemedLP_, uint256 unscaledRemaining_) {\\n\\n        uint256 unscaledDepositAvailable = Deposits.unscaledValueAt(deposits_, params_.index);\\n\\n        // revert if there's no liquidity available to remove\\n        if (unscaledDepositAvailable == 0) revert InsufficientLiquidity();\\n\\n        uint256 depositScale           = Deposits.scale(deposits_, params_.index);\\n        uint256 scaledDepositAvailable = Maths.wmul(unscaledDepositAvailable, depositScale);\\n\\n        // Below is pseudocode explaining the logic behind finding the constrained amount of deposit and LPB\\n        // scaledRemovedAmount is constrained by the scaled maxAmount(in QT), the scaledDeposit constraint, and\\n        // the lender LPB exchange rate in scaled deposit-to-LPB for the bucket:\\n        // scaledRemovedAmount = min ( maxAmount_, scaledDeposit, lenderLPBalance*exchangeRate)\\n        // redeemedLP_ = min ( maxAmount_/scaledExchangeRate, scaledDeposit/exchangeRate, lenderLPBalance)\\n\\n        uint256 scaledLpConstraint = Buckets.lpToQuoteTokens(\\n            params_.bucketCollateral,\\n            params_.bucketLP,\\n            scaledDepositAvailable,\\n            params_.lpConstraint,\\n            params_.price,\\n            Math.Rounding.Down\\n        );\\n        uint256 unscaledRemovedAmount;\\n        if (\\n            params_.depositConstraint < scaledDepositAvailable &&\\n            params_.depositConstraint < scaledLpConstraint\\n        ) {\\n            // depositConstraint is binding constraint\\n            removedAmount_ = params_.depositConstraint;\\n            redeemedLP_    = Buckets.quoteTokensToLP(\\n                params_.bucketCollateral,\\n                params_.bucketLP,\\n                scaledDepositAvailable,\\n                removedAmount_,\\n                params_.price,\\n                Math.Rounding.Up\\n            );\\n            redeemedLP_ = Maths.min(redeemedLP_, params_.lpConstraint);\\n            unscaledRemovedAmount = Maths.wdiv(removedAmount_, depositScale);\\n        } else if (scaledDepositAvailable < scaledLpConstraint) {\\n            // scaledDeposit is binding constraint\\n            removedAmount_ = scaledDepositAvailable;\\n            redeemedLP_    = Buckets.quoteTokensToLP(\\n                params_.bucketCollateral,\\n                params_.bucketLP,\\n                scaledDepositAvailable,\\n                removedAmount_,\\n                params_.price,\\n                Math.Rounding.Up\\n            );\\n            redeemedLP_ = Maths.min(redeemedLP_, params_.lpConstraint);\\n            unscaledRemovedAmount = unscaledDepositAvailable;\\n        } else {\\n            // redeeming all LP\\n            redeemedLP_    = params_.lpConstraint;\\n            removedAmount_ = Buckets.lpToQuoteTokens(\\n                params_.bucketCollateral,\\n                params_.bucketLP,\\n                scaledDepositAvailable,\\n                redeemedLP_,\\n                params_.price,\\n                Math.Rounding.Down\\n            );\\n            unscaledRemovedAmount = Maths.wdiv(removedAmount_, depositScale);\\n        }\\n\\n        // If clearing out the bucket deposit, ensure it's zeroed out\\n        if (redeemedLP_ == params_.bucketLP) {\\n            removedAmount_ = scaledDepositAvailable;\\n            unscaledRemovedAmount = unscaledDepositAvailable;\\n        }\\n\\n        scaledDepositAvailable -= removedAmount_;\\n        if (scaledDepositAvailable != 0 && scaledDepositAvailable < params_.dustLimit) revert DustAmountNotExceeded();\\n\\n        unscaledRemaining_ = unscaledDepositAvailable - unscaledRemovedAmount;\\n\\n        // revert if (due to rounding) required LP is 0\\n        if (redeemedLP_ == 0) revert InsufficientLP();\\n\\n        // update FenwickTree\\n        Deposits.unscaledRemove(deposits_, params_.index, unscaledRemovedAmount);\\n    }\\n}\"\r\n    },\r\n    \"src/libraries/external/BorrowerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    Bucket,\\n    DepositsState,\\n    LoansState,\\n    PoolState\\n}                   from '../../interfaces/pool/commons/IPoolState.sol';\\nimport {\\n    DrawDebtResult,\\n    RepayDebtResult\\n}                   from '../../interfaces/pool/commons/IPoolInternals.sol';\\n\\nimport {\\n    _borrowFeeRate,\\n    _priceAt,\\n    _isCollateralized\\n}                           from '../helpers/PoolHelper.sol';\\nimport { \\n    _revertIfPriceDroppedBelowLimit,\\n    _revertOnMinDebt\\n}                           from '../helpers/RevertsHelper.sol';\\n\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\nimport { SettlerActions } from './SettlerActions.sol';\\n\\n/**\\n    @title  BorrowerActions library\\n    @notice External library containing logic for for pool actors:\\n            - `Borrowers`: pledge collateral and draw debt; repay debt and pull collateral\\n */\\nlibrary BorrowerActions {\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `drawDebt` function local vars.\\n    struct DrawDebtLocalVars {\\n        bool    borrow;                // true if borrow action\\n        uint256 borrowerDebt;          // [WAD] borrower's accrued debt\\n        uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow\\n        uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action\\n        bool    pledge;                // true if pledge action\\n        bool    stampNpTpRatio;        // true if loan's Np to Tp ratio should be restamped (when drawing debt or pledge settles auction)\\n    }\\n\\n    /// @dev Struct used for `repayDebt` function local vars.\\n    struct RepayDebtLocalVars {\\n        uint256 borrowerDebt;          // [WAD] borrower's accrued debt\\n        bool    pull;                  // true if pull action\\n        bool    repay;                 // true if repay action\\n        bool    stampNpTpRatio;        // true if loan's Np to Tp ratio should be restamped (when repay settles auction or pull collateral)\\n        uint256 t0RepaidDebt;          // [WAD] t0 debt repaid\\n    }\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event LoanStamped(address indexed borrowerAddress);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error AuctionActive();\\n    error BorrowerNotSender();\\n    error BorrowerUnderCollateralized();\\n    error InsufficientLiquidity();\\n    error InsufficientCollateral();\\n    error InvalidAmount();\\n    error LimitIndexExceeded();\\n    error NoDebt();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IERC20PoolBorrowerActions` and `IERC721PoolBorrowerActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Loans.update` (`_upsert`):\\n     *  @dev      insert or update loan in loans array\\n     *  @dev      remove loan from loans array\\n     *  @dev      update borrower in `address => borrower` mapping\\n     *  @dev    === Reverts on ===\\n     *  @dev    not enough quote tokens available `InsufficientLiquidity()`\\n     *  @dev    borrower not sender `BorrowerNotSender()`\\n     *  @dev    borrower debt less than pool min debt `AmountLTMinDebt()`\\n     *  @dev    limit price reached `LimitIndexExceeded()`\\n     *  @dev    borrower cannot draw more debt `BorrowerUnderCollateralized()`\\n     *  @dev    borrower cannot be in auction `AuctionActive()`\\n     */\\n    function drawDebt(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        LoansState    storage loans_,\\n        PoolState calldata poolState_,\\n        uint256 maxAvailable_,\\n        address borrowerAddress_,\\n        uint256 amountToBorrow_,\\n        uint256 limitIndex_,\\n        uint256 collateralToPledge_\\n    ) external returns (\\n        DrawDebtResult memory result_\\n    ) {\\n        // revert if not enough pool balance to borrow\\n        if (amountToBorrow_ > maxAvailable_) revert InsufficientLiquidity();\\n\\n        // revert if borrower is in auction\\n        if (_inAuction(auctions_, borrowerAddress_)) revert AuctionActive();\\n\\n        DrawDebtLocalVars memory vars;\\n        vars.pledge = collateralToPledge_ != 0;\\n        vars.borrow = amountToBorrow_ != 0;\\n\\n        // revert if no amount to pledge or borrow\\n        if (!vars.pledge && !vars.borrow) revert InvalidAmount();\\n\\n        Borrower memory borrower = loans_.borrowers[borrowerAddress_];\\n\\n        vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);\\n\\n        result_.debtPreAction       = borrower.t0Debt;\\n        result_.collateralPreAction = borrower.collateral;\\n        result_.t0PoolDebt          = poolState_.t0Debt;\\n        result_.poolDebt            = poolState_.debt;\\n        result_.poolCollateral      = poolState_.collateral;\\n        result_.remainingCollateral = borrower.collateral;\\n\\n        if (vars.pledge) {\\n            // add new amount of collateral to pledge to borrower balance\\n            borrower.collateral  += collateralToPledge_;\\n\\n            result_.remainingCollateral += collateralToPledge_;\\n            result_.newLup              = Deposits.getLup(deposits_, result_.poolDebt);\\n\\n            // add new amount of collateral to pledge to pool balance\\n            result_.poolCollateral += collateralToPledge_;\\n        }\\n\\n        if (vars.borrow) {\\n            // only intended recipient can borrow quote\\n            if (borrowerAddress_ != msg.sender) revert BorrowerNotSender();\\n\\n            vars.t0BorrowAmount = Maths.ceilWdiv(amountToBorrow_, poolState_.inflator);\\n\\n            // t0 debt change is t0 amount to borrow plus the origination fee\\n            vars.t0DebtChange = Maths.wmul(vars.t0BorrowAmount, _borrowFeeRate(poolState_.rate) + Maths.WAD);\\n\\n            borrower.t0Debt += vars.t0DebtChange;\\n\\n            vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);\\n\\n            // check that drawing debt doesn't leave borrower debt under pool min debt amount\\n            _revertOnMinDebt(\\n                loans_,\\n                result_.poolDebt,\\n                vars.borrowerDebt,\\n                poolState_.quoteTokenScale\\n            );\\n\\n            // add debt change to pool's debt\\n            result_.t0PoolDebt += vars.t0DebtChange;\\n            result_.poolDebt   = Maths.wmul(result_.t0PoolDebt, poolState_.inflator);\\n            result_.newLup     = Deposits.getLup(deposits_, result_.poolDebt);\\n\\n            // revert if borrow drives LUP price under the specified price limit\\n            _revertIfPriceDroppedBelowLimit(result_.newLup, limitIndex_);\\n\\n            // use new lup to check borrow action won't push borrower into a state of under-collateralization\\n            // this check also covers the scenario when loan is already auctioned\\n            if (!_isCollateralized(vars.borrowerDebt, borrower.collateral, result_.newLup, poolState_.poolType)) {\\n                revert BorrowerUnderCollateralized();\\n            }\\n\\n            // stamp borrower Np to Tp ratio when draw debt\\n            vars.stampNpTpRatio = true;\\n        }\\n\\n        // update loan state\\n        Loans.update(\\n            loans_,\\n            borrower,\\n            borrowerAddress_,\\n            poolState_.rate,\\n            false,                          // loan not in auction\\n            vars.stampNpTpRatio\\n        );\\n\\n        result_.debtPostAction       = borrower.t0Debt;\\n        result_.collateralPostAction = borrower.collateral;\\n    }\\n\\n    /**\\n     *  @notice See `IERC20PoolBorrowerActions` and `IERC721PoolBorrowerActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Loans.update` (`_upsert`):\\n     *  @dev      insert or update loan in loans array\\n     *  @dev      remove loan from loans array\\n     *  @dev      update borrower in `address => borrower` mapping\\n     *  @dev    === Reverts on ===\\n     *  @dev    no debt to repay `NoDebt()`\\n     *  @dev    borrower debt less than pool min debt `AmountLTMinDebt()`\\n     *  @dev    borrower not sender `BorrowerNotSender()`\\n     *  @dev    not enough collateral to pull `InsufficientCollateral()`\\n     *  @dev    limit price reached `LimitIndexExceeded()`\\n     *  @dev    borrower cannot be in auction `AuctionActive()`\\n     */\\n    function repayDebt(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        LoansState    storage loans_,\\n        PoolState calldata poolState_,\\n        address borrowerAddress_,\\n        uint256 maxQuoteTokenAmountToRepay_,\\n        uint256 collateralAmountToPull_,\\n        uint256 limitIndex_\\n    ) external returns (\\n        RepayDebtResult memory result_\\n    ) {\\n        RepayDebtLocalVars memory vars;\\n        vars.repay = maxQuoteTokenAmountToRepay_ != 0;\\n        vars.pull  = collateralAmountToPull_     != 0;\\n\\n        // revert if no amount to pull or repay\\n        if (!vars.repay && !vars.pull) revert InvalidAmount();\\n\\n        if (_inAuction(auctions_, borrowerAddress_)) revert AuctionActive();\\n\\n        Borrower memory borrower = loans_.borrowers[borrowerAddress_];\\n\\n        vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);\\n\\n        result_.debtPreAction       = borrower.t0Debt;\\n        result_.collateralPreAction = borrower.collateral;\\n        result_.t0PoolDebt          = poolState_.t0Debt;\\n        result_.poolDebt            = poolState_.debt;\\n        result_.poolCollateral      = poolState_.collateral;\\n        result_.remainingCollateral = borrower.collateral;\\n\\n        if (vars.repay) {\\n            if (borrower.t0Debt == 0) revert NoDebt();\\n\\n            if (maxQuoteTokenAmountToRepay_ == type(uint256).max) {\\n                vars.t0RepaidDebt = borrower.t0Debt;\\n            } else {\\n                vars.t0RepaidDebt = Maths.min(\\n                    borrower.t0Debt,\\n                    Maths.floorWdiv(maxQuoteTokenAmountToRepay_, poolState_.inflator)\\n                );\\n            }\\n\\n            result_.quoteTokenToRepay = Maths.ceilWmul(vars.t0RepaidDebt, poolState_.inflator);\\n            // revert if (due to roundings) calculated token amount to repay is 0\\n            if (result_.quoteTokenToRepay == 0) revert InvalidAmount();\\n\\n            result_.t0PoolDebt -= vars.t0RepaidDebt;\\n            result_.poolDebt   = Maths.wmul(result_.t0PoolDebt, poolState_.inflator);\\n\\n            vars.borrowerDebt = Maths.wmul(borrower.t0Debt - vars.t0RepaidDebt, poolState_.inflator);\\n\\n            // check that paying the loan doesn't leave borrower debt under min debt amount\\n            _revertOnMinDebt(\\n                loans_,\\n                result_.poolDebt,\\n                vars.borrowerDebt,\\n                poolState_.quoteTokenScale\\n            );\\n\\n            result_.newLup = Deposits.getLup(deposits_, result_.poolDebt);\\n            borrower.t0Debt -= vars.t0RepaidDebt;\\n        }\\n\\n        if (vars.pull) {\\n            // only intended recipient can pull collateral\\n            if (borrowerAddress_ != msg.sender) revert BorrowerNotSender();\\n\\n            // calculate LUP only if it wasn't calculated in repay action\\n            if (!vars.repay) result_.newLup = Deposits.getLup(deposits_, result_.poolDebt);\\n\\n            // prevent underflow\\n            if (collateralAmountToPull_ > borrower.collateral) \\n                revert InsufficientCollateral();\\n\\n            // check collateralization\\n            borrower.collateral -= collateralAmountToPull_;\\n            if (!_isCollateralized(vars.borrowerDebt, borrower.collateral, result_.newLup, poolState_.poolType)) \\n                revert InsufficientCollateral();\\n\\n            // stamp borrower Np to Tp ratio when pull collateral action\\n            vars.stampNpTpRatio = true;\\n\\n            result_.poolCollateral -= collateralAmountToPull_;\\n        }\\n\\n        // check limit price and revert if price dropped below\\n        _revertIfPriceDroppedBelowLimit(result_.newLup, limitIndex_);\\n\\n        // update loan state\\n        Loans.update(\\n            loans_,\\n            borrower,\\n            borrowerAddress_,\\n            poolState_.rate,\\n            false,                         // loan not in auction\\n            vars.stampNpTpRatio\\n        );\\n\\n        result_.debtPostAction       = borrower.t0Debt;\\n        result_.collateralPostAction = borrower.collateral;\\n    }\\n\\n    /**\\n     *  @notice See `IPoolBorrowerActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    - `Loans.update` (`_upsert`):\\n     *  @dev      insert or update loan in loans array\\n     *  @dev      remove loan from loans array\\n     *  @dev      update borrower in `address => borrower` mapping\\n     *  @dev    === Reverts on ===\\n     *  @dev    auction active `AuctionActive()`\\n     *  @dev    loan not fully collateralized `BorrowerUnderCollateralized()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `LoanStamped`\\n     */\\n    function stampLoan(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        LoansState    storage loans_,\\n        PoolState calldata poolState_\\n    ) external returns (\\n        uint256 newLup_\\n    ) {\\n        // revert if loan is in auction\\n        if (_inAuction(auctions_, msg.sender)) revert AuctionActive();\\n\\n        Borrower memory borrower = loans_.borrowers[msg.sender];\\n\\n        newLup_ = Deposits.getLup(deposits_, poolState_.debt);\\n\\n        // revert if loan is not fully collateralized at current LUP\\n        if (\\n            !_isCollateralized(\\n                Maths.wmul(borrower.t0Debt, poolState_.inflator), // current borrower debt\\n                borrower.collateral,\\n                newLup_,\\n                poolState_.poolType\\n            )\\n        ) revert BorrowerUnderCollateralized();\\n\\n        // update loan state to stamp Np to Tp ratio\\n        Loans.update(\\n            loans_,\\n            borrower,\\n            msg.sender,\\n            poolState_.rate,\\n            false,          // loan not in auction\\n            true            // stamp Np to Tp ratio of the loan\\n        );\\n\\n        emit LoanStamped(msg.sender);\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Returns `true` if borrower is in auction.\\n     *  @dev    Used to accuratley increment and decrement `t0DebtInAuction` accumulator.\\n     *  @param  auctions_ Struct for pool auctions state.\\n     *  @param  borrower_ Borrower address to check auction status for.\\n     *  @return `True` if borrower is in auction.\\n     */\\n    function _inAuction(\\n        AuctionsState storage auctions_,\\n        address borrower_\\n    ) internal view returns (bool) {\\n        return auctions_.liquidations[borrower_].kickTime != 0;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/SettlerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { PoolType } from '../../interfaces/pool/IPool.sol';\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    Bucket,\\n    DepositsState,\\n    Kicker,\\n    Liquidation,\\n    LoansState,\\n    PoolState,\\n    ReserveAuctionState\\n}                       from '../../interfaces/pool/commons/IPoolState.sol';\\nimport {\\n    SettleParams,\\n    SettleResult\\n}                       from '../../interfaces/pool/commons/IPoolInternals.sol';\\n\\nimport {\\n    _auctionPrice,\\n    _indexOf,\\n    _priceAt,\\n    MAX_FENWICK_INDEX,\\n    MIN_PRICE,\\n    DEPOSIT_BUFFER   \\n}  from '../helpers/PoolHelper.sol';\\n\\nimport { Buckets }  from '../internal/Buckets.sol';\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n/**\\n    @title  Auction settler library\\n    @notice External library containing actions involving auctions within pool:\\n            - `settle` auctions\\n */\\nlibrary SettlerActions {\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `_settlePoolDebtWithDeposit` function local vars.\\n    struct SettleLocalVars {\\n        uint256 collateralUsed;     // [WAD] collateral used to settle debt\\n        uint256 debt;               // [WAD] debt to settle\\n        uint256 hpbCollateral;      // [WAD] amount of collateral in HPB bucket\\n        uint256 hpbUnscaledDeposit; // [WAD] unscaled amount of of quote tokens in HPB bucket before settle\\n        uint256 hpbLP;              // [WAD] amount of LP in HPB bucket\\n        uint256 index;              // index of settling bucket\\n        uint256 maxSettleableDebt;  // [WAD] max amount that can be settled with existing collateral\\n        uint256 price;              // [WAD] price of settling bucket\\n        uint256 scaledDeposit;      // [WAD] scaled amount of quote tokens in bucket\\n        uint256 scale;              // [WAD] scale of settling bucket\\n        uint256 unscaledDeposit;    // [WAD] unscaled amount of quote tokens in bucket\\n    }\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event AuctionSettle(address indexed borrower, uint256 collateral);\\n    event AuctionNFTSettle(address indexed borrower, uint256 collateral, uint256 lp, uint256 index);\\n    event BucketBankruptcy(uint256 indexed index, uint256 lpForfeited);\\n    event Settle(address indexed borrower, uint256 settledDebt);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error AuctionNotClearable();\\n    error NoAuction();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IPoolSettlerActions` for descriptions.\\n     *  @notice Settles the debt of the given loan / borrower by performing following steps:\\n     *          1. settle debt with `HPB`s deposit, up to specified buckets depth.\\n     *          2. settle debt with pool reserves (if there's still debt and no collateral left after step 1).\\n     *          3. forgive bad debt from next `HPB`, up to remaining buckets depth (and if there's still debt after step 2).\\n     *  @dev    === Write state ===\\n     *  @dev    update borrower state\\n     *  @dev    === Reverts on ===\\n     *  @dev    loan is not in auction `NoAuction()`\\n     *  @dev    `72` hours didn't pass and auction still has collateral `AuctionNotClearable()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `Settle`\\n     *  @return result_ The `SettleResult` struct result of settle action.\\n     */\\n    function settlePoolDebt(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        LoansState storage loans_,\\n        ReserveAuctionState storage reserveAuction_,\\n        PoolState calldata poolState_,\\n        SettleParams memory params_\\n    ) external returns (SettleResult memory result_) {\\n        uint256 kickTime = auctions_.liquidations[params_.borrower].kickTime;\\n        if (kickTime == 0) revert NoAuction();\\n\\n        Borrower memory borrower = loans_.borrowers[params_.borrower];\\n        if ((block.timestamp - kickTime <= 72 hours) && (borrower.collateral != 0)) revert AuctionNotClearable();\\n\\n        result_.debtPreAction       = borrower.t0Debt;\\n        result_.collateralPreAction = borrower.collateral;\\n        result_.t0DebtSettled       = borrower.t0Debt;\\n        result_.collateralSettled   = borrower.collateral;\\n\\n        // 1. settle debt with HPB deposit\\n        (\\n            borrower.t0Debt,\\n            borrower.collateral,\\n            params_.bucketDepth\\n        ) = _settlePoolDebtWithDeposit(\\n            buckets_,\\n            deposits_,\\n            params_,\\n            borrower,\\n            poolState_.inflator\\n        );\\n\\n        if (borrower.t0Debt != 0 && borrower.collateral == 0) {\\n            // 2. settle debt with pool reserves\\n            uint256 assets   = Maths.floorWmul(poolState_.t0Debt - result_.t0DebtSettled + borrower.t0Debt, poolState_.inflator) + params_.poolBalance;\\n            uint256 deposits = Deposits.treeSum(deposits_);\\n\\n            uint256 liabilities =\\n                // require 1.0 + 1e-9 deposit buffer (extra margin) for deposits\\n                Maths.wmul(DEPOSIT_BUFFER, deposits) +\\n                auctions_.totalBondEscrowed +\\n                reserveAuction_.unclaimed;\\n\\n            // settle debt from reserves (assets - liabilities) if reserves positive, round reserves down however\\n            // capped at half of the origination fee rate, based on current book fees\\n            if (assets > liabilities) {\\n                uint256 t0ReserveSettleAmount = Maths.min(Maths.floorWdiv(assets - liabilities, poolState_.inflator), borrower.t0Debt);\\n\\n                // if the settlement phase of 144 hours has not ended, settle up to the borrower reserve limit\\n                if (deposits > 0 && block.timestamp - kickTime < 144 hours) {\\n                    // retrieve amount of debt that can be settled with reserves\\n                    uint256 reserveSettleLimit = auctions_.liquidations[params_.borrower].t0ReserveSettleAmount;\\n\\n                    // calculate reserve amount to be used when settling the auction\\n                    t0ReserveSettleAmount = Maths.min(t0ReserveSettleAmount, reserveSettleLimit);\\n                    reserveSettleLimit -= t0ReserveSettleAmount;\\n\\n                    // store remaining amount limit to settle\\n                    auctions_.liquidations[params_.borrower].t0ReserveSettleAmount = reserveSettleLimit;\\n                }\\n                borrower.t0Debt -= t0ReserveSettleAmount;\\n            }\\n\\n            // 3. forgive bad debt from next HPB\\n            if (borrower.t0Debt != 0) {\\n                borrower.t0Debt = _forgiveBadDebt(\\n                    buckets_,\\n                    deposits_,\\n                    params_,\\n                    borrower,\\n                    poolState_.inflator\\n                );\\n            }\\n        }\\n\\n        // complete result struct with debt settled\\n        result_.t0DebtSettled -= borrower.t0Debt;\\n        result_.debtSettled   = Maths.wmul(result_.t0DebtSettled, poolState_.inflator);\\n\\n        emit Settle(params_.borrower, result_.debtSettled);\\n\\n        // if entire debt was settled then settle auction\\n        if (borrower.t0Debt == 0) {\\n            (borrower.collateral, ) = _settleAuction(\\n                auctions_,\\n                buckets_,\\n                deposits_,\\n                params_.borrower,\\n                borrower.collateral,\\n                poolState_.poolType\\n            );\\n        }\\n\\n        // complete result struct with debt and collateral post action and collateral settled\\n        result_.debtPostAction      = borrower.t0Debt;\\n        result_.collateralRemaining = borrower.collateral;\\n        result_.collateralSettled   -= result_.collateralRemaining;\\n\\n        // update borrower state\\n        loans_.borrowers[params_.borrower] = borrower;\\n    }\\n\\n    /***************************/\\n    /***  Internal Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice Performs auction settle based on pool type, emits settle event and removes auction from auctions queue.\\n     *  @dev    === Emit events ===\\n     *  @dev    - `AuctionNFTSettle` or `AuctionSettle`\\n     *  @param  auctions_              Struct for pool auctions state.\\n     *  @param  buckets_               Struct for pool buckets state.\\n     *  @param  deposits_              Struct for pool deposits state.\\n     *  @param  borrowerAddress_       Address of the borrower that exits auction.\\n     *  @param  borrowerCollateral_    Borrower collateral amount before auction exit (in `NFT` could be fragmented as result of partial takes).\\n     *  @param  poolType_              Type of the pool (can be `ERC20` or `ERC721`).\\n     *  @return remainingCollateral_   Collateral remaining after auction is settled (same amount for `ERC20` pool, rounded collateral for `ERC721` pool).\\n     *  @return compensatedCollateral_ Amount of collateral compensated (`ERC721` settle only), to be deducted from pool pledged collateral accumulator. Always `0` for `ERC20` pools.\\n     */\\n    function _settleAuction(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        address borrowerAddress_,\\n        uint256 borrowerCollateral_,\\n        uint256 poolType_\\n    ) internal returns (uint256 remainingCollateral_, uint256 compensatedCollateral_) {\\n\\n        if (poolType_ == uint8(PoolType.ERC721)) {\\n            uint256 lp;\\n            uint256 bucketIndex;\\n\\n            // floor collateral of borrower\\n            remainingCollateral_ = (borrowerCollateral_ / Maths.WAD) * Maths.WAD;\\n\\n            // if there's fraction of NFTs remaining then reward difference to borrower as LP in auction price bucket\\n            if (remainingCollateral_ != borrowerCollateral_) {\\n\\n                // calculate the amount of collateral that should be compensated with LP\\n                compensatedCollateral_ = borrowerCollateral_ - remainingCollateral_;\\n\\n                uint256 auctionPrice = _auctionPrice(\\n                    auctions_.liquidations[borrowerAddress_].referencePrice,\\n                    auctions_.liquidations[borrowerAddress_].kickTime\\n                );\\n\\n                // determine the bucket index to compensate fractional collateral\\n                bucketIndex = auctionPrice > MIN_PRICE ? _indexOf(auctionPrice) : MAX_FENWICK_INDEX;\\n\\n                // deposit collateral in bucket and reward LP to compensate fractional collateral\\n                lp = Buckets.addCollateral(\\n                    buckets_[bucketIndex],\\n                    borrowerAddress_,\\n                    Deposits.valueAt(deposits_, bucketIndex),\\n                    compensatedCollateral_,\\n                    _priceAt(bucketIndex)\\n                );\\n            }\\n\\n            emit AuctionNFTSettle(\\n                borrowerAddress_,\\n                remainingCollateral_,\\n                lp,\\n                bucketIndex\\n            );\\n\\n        } else {\\n            remainingCollateral_ = borrowerCollateral_;\\n\\n            emit AuctionSettle(\\n                borrowerAddress_,\\n                remainingCollateral_\\n            );\\n        }\\n\\n        _removeAuction(auctions_, borrowerAddress_);\\n    }\\n\\n    /**\\n     *  @notice Removes auction and repairs the queue order.\\n     *  @notice Updates kicker's claimable balance with bond size awarded and subtracts bond size awarded from `liquidationBondEscrowed`.\\n     *  @dev    === Write state ===\\n     *  @dev    decrement kicker locked accumulator, increment kicker claimable accumumlator\\n     *  @dev    decrement auctions count accumulator\\n     *  @dev    update auction queue state\\n     *  @param  auctions_ Struct for pool auctions state.\\n     *  @param  borrower_ Auctioned borrower address.\\n     */\\n    function _removeAuction(\\n        AuctionsState storage auctions_,\\n        address borrower_\\n    ) internal {\\n        Liquidation memory liquidation = auctions_.liquidations[borrower_];\\n        // update kicker balances\\n        Kicker storage kicker = auctions_.kickers[liquidation.kicker];\\n\\n        kicker.locked    -= liquidation.bondSize;\\n        kicker.claimable += liquidation.bondSize;\\n\\n        // decrement number of active auctions\\n        -- auctions_.noOfAuctions;\\n\\n        // update auctions queue\\n        if (auctions_.head == borrower_ && auctions_.tail == borrower_) {\\n            // liquidation is the head and tail\\n            auctions_.head = address(0);\\n            auctions_.tail = address(0);\\n        }\\n        else if (auctions_.head == borrower_) {\\n            // liquidation is the head\\n            auctions_.liquidations[liquidation.next].prev = address(0);\\n            auctions_.head = liquidation.next;\\n        }\\n        else if (auctions_.tail == borrower_) {\\n            // liquidation is the tail\\n            auctions_.liquidations[liquidation.prev].next = address(0);\\n            auctions_.tail = liquidation.prev;\\n        }\\n        else {\\n            // liquidation is in the middle\\n            auctions_.liquidations[liquidation.prev].next = liquidation.next;\\n            auctions_.liquidations[liquidation.next].prev = liquidation.prev;\\n        }\\n        // delete liquidation\\n        delete auctions_.liquidations[borrower_];\\n    }\\n\\n    /**\\n     *  @notice Called to settle debt using `HPB` deposits, up to the number of specified buckets depth.\\n     *  @dev    === Write state ===\\n     *  @dev    - `Deposits.unscaledRemove()` (remove amount in `Fenwick` tree, from index):\\n     *  @dev      update `values` array state\\n     *  @dev    - `Buckets.addCollateral`:\\n     *  @dev      increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev      increment `lender.lps` accumulator and `lender.depositTime` state\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketBankruptcy`\\n     *  @param  buckets_             Struct for pool buckets state.\\n     *  @param  deposits_            Struct for pool deposits state.\\n     *  @param  params_              Struct containing params for settle action.\\n     *  @param  borrower_            Struct containing borrower details.\\n     *  @param  inflator_            Current pool inflator.\\n     *  @return remainingt0Debt_     Remaining borrower `t0` debt after settle with `HPB`.\\n     *  @return remainingCollateral_ Remaining borrower collateral after settle with `HPB`.\\n     *  @return bucketDepth_         Number of buckets to use for forgiving debt in case there's more remaining.\\n     */\\n    function _settlePoolDebtWithDeposit(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        SettleParams memory params_,\\n        Borrower memory borrower_,\\n        uint256 inflator_\\n    ) internal returns (uint256 remainingt0Debt_, uint256 remainingCollateral_, uint256 bucketDepth_) {\\n        remainingt0Debt_     = borrower_.t0Debt;\\n        remainingCollateral_ = borrower_.collateral;\\n        bucketDepth_         = params_.bucketDepth;\\n\\n        while (bucketDepth_ != 0 && remainingt0Debt_ != 0 && remainingCollateral_ != 0) {\\n            SettleLocalVars memory vars;\\n\\n            (vars.index, , vars.scale) = Deposits.findIndexAndSumOfSum(deposits_, 1);\\n            vars.hpbUnscaledDeposit    = Deposits.unscaledValueAt(deposits_, vars.index);\\n            vars.unscaledDeposit       = vars.hpbUnscaledDeposit;\\n            vars.price                 = _priceAt(vars.index);\\n\\n            if (vars.unscaledDeposit != 0) {\\n                vars.debt              = Maths.wmul(remainingt0Debt_, inflator_);           // current debt to be settled\\n                vars.maxSettleableDebt = Maths.floorWmul(remainingCollateral_, vars.price); // max debt that can be settled with existing collateral\\n                vars.scaledDeposit     = Maths.wmul(vars.scale, vars.unscaledDeposit);\\n\\n                // 1) bucket deposit covers remaining loan debt to settle, loan's collateral can cover remaining loan debt to settle\\n                if (vars.scaledDeposit >= vars.debt && vars.maxSettleableDebt >= vars.debt) {\\n                    // remove only what's needed to settle the debt\\n                    vars.unscaledDeposit = Maths.wdiv(vars.debt, vars.scale);\\n                    vars.collateralUsed  = Maths.ceilWdiv(vars.debt, vars.price);\\n\\n                    // settle the entire debt\\n                    remainingt0Debt_ = 0;\\n                }\\n                // 2) bucket deposit can not cover all of loan's remaining debt, bucket deposit is the constraint\\n                else if (vars.maxSettleableDebt >= vars.scaledDeposit) {\\n                    vars.collateralUsed = Maths.ceilWdiv(vars.scaledDeposit, vars.price);\\n\\n                    // subtract from debt the corresponding t0 amount of deposit\\n                    remainingt0Debt_ -= Maths.floorWdiv(vars.scaledDeposit, inflator_);\\n                }\\n                // 3) loan's collateral can not cover remaining loan debt to settle, loan collateral is the constraint\\n                else {\\n                    vars.unscaledDeposit = Maths.wdiv(vars.maxSettleableDebt, vars.scale);\\n                    vars.collateralUsed  = remainingCollateral_;\\n\\n                    remainingt0Debt_ -= Maths.floorWdiv(vars.maxSettleableDebt, inflator_);\\n                }\\n\\n                // remove settled collateral from loan\\n                remainingCollateral_ -= vars.collateralUsed;\\n\\n                // use HPB bucket to swap loan collateral for loan debt\\n                Bucket storage hpb = buckets_[vars.index];\\n                vars.hpbLP         = hpb.lps;\\n                vars.hpbCollateral = hpb.collateral + vars.collateralUsed;\\n\\n                // set amount to remove as min of calculated amount and available deposit (to prevent rounding issues)\\n                vars.unscaledDeposit    = Maths.min(vars.hpbUnscaledDeposit, vars.unscaledDeposit);\\n                vars.hpbUnscaledDeposit -= vars.unscaledDeposit;\\n\\n                // remove amount to settle debt from bucket (could be entire deposit or only the settled debt)\\n                // when unscaledDeposit == 0 the amount of debt is very small and worth forgiving versus having settle revert\\n                if (vars.unscaledDeposit != 0) Deposits.unscaledRemove(deposits_, vars.index, vars.unscaledDeposit);\\n\\n                // check if bucket healthy - set bankruptcy if collateral is 0 and entire deposit was used to settle and there's still LP\\n                if (vars.hpbCollateral == 0 && vars.hpbUnscaledDeposit == 0 && vars.hpbLP != 0) {\\n                    hpb.lps            = 0;\\n                    hpb.bankruptcyTime = block.timestamp;\\n\\n                    emit BucketBankruptcy(\\n                        vars.index,\\n                        vars.hpbLP\\n                    );\\n                } else {\\n                    // add settled collateral into bucket\\n                    hpb.collateral = vars.hpbCollateral;\\n                }\\n\\n            } else {\\n                // Deposits in the tree is zero, insert entire collateral into lowest bucket 7388\\n                Buckets.addCollateral(\\n                    buckets_[vars.index],\\n                    params_.borrower,\\n                    0,  // zero deposit in bucket\\n                    remainingCollateral_,\\n                    vars.price\\n                );\\n                // entire collateral added into bucket, no borrower pledged collateral remaining\\n                remainingCollateral_ = 0;\\n            }\\n\\n            --bucketDepth_;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Called to forgive bad debt starting from next `HPB`, up to the number of remaining buckets depth.\\n     *  @dev    === Write state ===\\n     *  @dev    - `Deposits.unscaledRemove()` (remove amount in `Fenwick` tree, from index):\\n     *  @dev      update `values` array state\\n     *  @dev      reset `bucket.lps` accumulator and update `bucket.bankruptcyTime`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketBankruptcy`\\n     *  @param  buckets_         Struct for pool buckets state.\\n     *  @param  deposits_        Struct for pool deposits state.\\n     *  @param  params_          Struct containing params for settle action.\\n     *  @param  borrower_        Struct containing borrower details.\\n     *  @param  inflator_        Current pool inflator.\\n     *  @return remainingt0Debt_ Remaining borrower `t0` debt after forgiving bad debt in case not enough buckets used.\\n     */\\n    function _forgiveBadDebt(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        SettleParams memory params_,\\n        Borrower memory borrower_,\\n        uint256 inflator_\\n    ) internal returns (uint256 remainingt0Debt_) {\\n        remainingt0Debt_ = borrower_.t0Debt;\\n\\n        // loop through remaining buckets if there's still debt to forgive\\n        while (params_.bucketDepth != 0 && remainingt0Debt_ != 0) {\\n\\n            (uint256 index, , uint256 scale) = Deposits.findIndexAndSumOfSum(deposits_, 1);\\n            uint256 unscaledDeposit          = Deposits.unscaledValueAt(deposits_, index);\\n            uint256 depositToRemove          = Maths.wmul(scale, unscaledDeposit);\\n            uint256 debt                     = Maths.wmul(remainingt0Debt_, inflator_);\\n            uint256 depositRemaining;\\n\\n            // 1) bucket deposit covers entire loan debt to settle, no constraints needed\\n            if (depositToRemove >= debt) {\\n                // no remaining debt to forgive\\n                remainingt0Debt_ = 0;\\n\\n                uint256 depositUsed = Maths.min(Maths.wdiv(debt, scale), unscaledDeposit);\\n                depositRemaining    = unscaledDeposit - depositUsed;\\n\\n                // Remove deposit used to forgive bad debt from bucket\\n                // when depositUsed == 0 the amount of debt is very small and worth forgiving versus having settle revert\\n                if (depositUsed != 0) Deposits.unscaledRemove(deposits_, index, depositUsed);\\n\\n            // 2) loan debt to settle exceeds bucket deposit, bucket deposit is the constraint\\n            } else {\\n                // subtract from remaining debt the corresponding t0 amount of deposit\\n                remainingt0Debt_ -= Maths.floorWdiv(depositToRemove, inflator_);\\n\\n                // Remove all deposit from bucket\\n                // when unscaledDeposit == 0 the amount of debt is very small and worth forgiving versus having settle revert\\n                if (unscaledDeposit != 0) Deposits.unscaledRemove(deposits_, index, unscaledDeposit);\\n            }\\n\\n            Bucket storage hpbBucket = buckets_[index];\\n            uint256 bucketLP = hpbBucket.lps;\\n\\n            // If the remaining deposit and resulting bucket collateral is so small that the exchange rate\\n            // rounds to 0, then bankrupt the bucket.  Note that lhs are WADs, so the\\n            // quantity is naturally 1e18 times larger than the actual product\\n            if (depositRemaining * scale + hpbBucket.collateral * _priceAt(index) <= bucketLP) {\\n                // existing LP for the bucket shall become unclaimable\\n                hpbBucket.lps            = 0;\\n                hpbBucket.bankruptcyTime = block.timestamp;\\n\\n                emit BucketBankruptcy(\\n                    index,\\n                    bucketLP\\n                );\\n            }\\n\\n            --params_.bucketDepth;\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/TakerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { PRBMathSD59x18 } from \\\"@prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport { Math }           from '@openzeppelin/contracts/utils/math/Math.sol';\\nimport { SafeCast }       from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { PoolType } from '../../interfaces/pool/IPool.sol';\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    Bucket,\\n    BurnEvent,\\n    DepositsState,\\n    Liquidation,\\n    LoansState,\\n    PoolState,\\n    ReserveAuctionState\\n}                        from '../../interfaces/pool/commons/IPoolState.sol';\\nimport {\\n    TakeResult\\n}                        from '../../interfaces/pool/commons/IPoolInternals.sol';\\n\\nimport {\\n    _auctionPrice,\\n    _bpf,\\n    _priceAt,\\n    _reserveAuctionPrice,\\n    _roundToScale,\\n    _roundUpToScale\\n}                           from '../helpers/PoolHelper.sol';\\nimport { _revertOnMinDebt } from '../helpers/RevertsHelper.sol';\\n\\nimport { SettlerActions } from './SettlerActions.sol';\\n\\nimport { Buckets }  from '../internal/Buckets.sol';\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n/**\\n    @title  Auction Taker Actions library\\n    @notice External library containing actions involving taking auctions within pool:\\n            - `take` and `bucketTake` auctioned collateral; take reserves\\n */\\nlibrary TakerActions {\\n\\n    /*******************************/\\n    /*** Function Params Structs ***/\\n    /*******************************/\\n\\n    /// @dev Struct used to hold `bucketTake` function params.\\n    struct BucketTakeParams {\\n        address borrower;        // borrower address to take from\\n        bool    depositTake;     // deposit or arb take, used by bucket take\\n        uint256 index;           // bucket index, used by bucket take\\n        uint256 inflator;        // [WAD] current pool inflator\\n        uint256 collateralScale; // precision of collateral token based on decimals\\n    }\\n\\n    /// @dev Struct used to hold `take` function params.\\n    struct TakeParams {\\n        address borrower;        // borrower address to take from\\n        uint256 takeCollateral;  // [WAD] desired amount to take\\n        uint256 inflator;        // [WAD] current pool inflator\\n        uint256 poolType;        // pool type (ERC20 or NFT)\\n        uint256 collateralScale; // precision of collateral token based on decimals\\n    }\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `take` function local vars.\\n    struct TakeLocalVars {\\n        uint256 auctionPrice;                // [WAD] The price of auction.\\n        uint256 bondChange;                  // [WAD] The change made on the bond size (beeing reward or penalty).\\n        uint256 borrowerDebt;                // [WAD] The accrued debt of auctioned borrower.\\n        int256  bpf;                         // The bond penalty factor.\\n        uint256 bondFactor;                  // [WAD] The bond factor.\\n        uint256 bucketPrice;                 // [WAD] The bucket price.\\n        uint256 bucketScale;                 // [WAD] The bucket scale.\\n        uint256 collateralAmount;            // [WAD] The amount of collateral taken.\\n        uint256 excessQuoteToken;            // [WAD] Difference of quote token that borrower receives after take (for fractional NFT only)\\n        bool    isRewarded;                  // True if kicker is rewarded (auction price lower than neutral price), false if penalized (auction price greater than neutral price).\\n        address kicker;                      // Address of auction kicker.\\n        uint256 quoteTokenAmount;            // [WAD] Scaled quantity in Fenwick tree and before 1-bpf factor, paid for collateral\\n        uint256 t0RepayAmount;               // [WAD] The amount of debt (quote tokens) that is recovered / repayed by take t0 terms.\\n        uint256 t0BorrowerDebt;              // [WAD] Borrower's t0 debt.\\n        uint256 unscaledDeposit;             // [WAD] Unscaled bucket quantity\\n        uint256 unscaledQuoteTokenAmount;    // [WAD] The unscaled token amount that taker should pay for collateral taken.\\n        uint256 depositCollateralConstraint; // [WAD] Constraint on bucket take from deposit present in bucket\\n        uint256 debtCollateralConstraint;    // [WAD] Constraint on take due to debt.\\n   }\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event BucketTake(address indexed borrower, uint256 index, uint256 amount, uint256 collateral, uint256 bondChange, bool isReward);\\n    event BucketTakeLPAwarded(address indexed taker, address indexed kicker, uint256 lpAwardedTaker, uint256 lpAwardedKicker);\\n    event Take(address indexed borrower, uint256 amount, uint256 collateral, uint256 bondChange, bool isReward);\\n    event ReserveAuction(uint256 claimableReservesRemaining, uint256 auctionPrice, uint256 currentBurnEpoch);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error AuctionNotTakeable();\\n    error AuctionPriceGtBucketPrice();\\n    error CollateralRoundingNeededButNotPossible();\\n    error InsufficientLiquidity();\\n    error InsufficientCollateral();\\n    error InvalidAmount();\\n    error NoAuction();\\n    error NoReservesAuction();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IPoolTakerActions` for descriptions.\\n     *  @notice Performs bucket take collateral on an auction, rewards taker and kicker (if case) and updates loan info (settles auction if case).\\n     *  @dev    === Reverts on ===\\n     *  @dev    not enough collateral to take `InsufficientCollateral()`\\n     *  @return result_ `TakeResult` struct containing details of bucket take result.\\n    */\\n    function bucketTake(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        LoansState storage loans_,\\n        PoolState memory poolState_,\\n        address borrowerAddress_,\\n        bool    depositTake_,\\n        uint256 index_,\\n        uint256 collateralScale_\\n    ) external returns (TakeResult memory result_) {\\n        Borrower memory borrower = loans_.borrowers[borrowerAddress_];\\n        // revert if borrower's collateral is 0\\n        if (borrower.collateral == 0) revert InsufficientCollateral();\\n\\n        result_.debtPreAction       = borrower.t0Debt;\\n        result_.collateralPreAction = borrower.collateral;\\n\\n        // bucket take auction\\n        TakeLocalVars memory vars = _takeBucket(\\n            auctions_,\\n            buckets_,\\n            deposits_,\\n            borrower,\\n            BucketTakeParams({\\n                borrower:        borrowerAddress_,\\n                inflator:        poolState_.inflator,\\n                depositTake:     depositTake_,\\n                index:           index_,\\n                collateralScale: collateralScale_\\n            })\\n        );\\n\\n        // update borrower after take\\n        borrower.collateral -= vars.collateralAmount;\\n        borrower.t0Debt     =  vars.t0BorrowerDebt - vars.t0RepayAmount;\\n        // update pool params after take\\n        poolState_.t0Debt -= vars.t0RepayAmount;\\n        poolState_.debt   =  Maths.wmul(poolState_.t0Debt, poolState_.inflator);\\n\\n        // update loan after take\\n        (\\n            result_.newLup,\\n            result_.settledAuction,\\n            result_.remainingCollateral,\\n            result_.compensatedCollateral\\n        ) = _takeLoan(auctions_, buckets_, deposits_, loans_, poolState_, borrower, borrowerAddress_);\\n\\n        // complete take result struct\\n        result_.debtPostAction       = borrower.t0Debt;\\n        result_.collateralPostAction = borrower.collateral;\\n        result_.t0PoolDebt           = poolState_.t0Debt;\\n        result_.poolDebt             = poolState_.debt;\\n        result_.collateralAmount     = vars.collateralAmount;\\n        // if settled then debt in auction changed is the entire borrower debt, otherwise only repaid amount\\n        result_.t0DebtInAuctionChange = result_.settledAuction ? vars.t0BorrowerDebt : vars.t0RepayAmount;\\n    }\\n\\n    /**\\n     *  @notice See `IPoolTakerActions` for descriptions.\\n     *  @notice Performs take collateral on an auction, rewards taker and kicker (if case) and updates loan info (settles auction if case).\\n     *  @dev    === Reverts on ===\\n     *  @dev    insufficient collateral to take `InsufficientCollateral()`\\n     *  @return result_ `TakeResult` struct containing details of take result.\\n    */\\n    function take(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        LoansState storage loans_,\\n        PoolState memory poolState_,\\n        address borrowerAddress_,\\n        uint256 collateral_,\\n        uint256 collateralScale_\\n    ) external returns (TakeResult memory result_) {\\n        // revert if no amount to take\\n        if (collateral_ == 0) revert InvalidAmount();\\n\\n        Borrower memory borrower = loans_.borrowers[borrowerAddress_];\\n\\n        if (\\n            // revert in case of NFT take when there isn't a full token to be taken\\n            (poolState_.poolType == uint8(PoolType.ERC721) && borrower.collateral < 1e18) ||\\n            // revert in case of ERC20 take when no collateral to be taken\\n            (poolState_.poolType == uint8(PoolType.ERC20)  && borrower.collateral == 0)\\n        ) {\\n            revert InsufficientCollateral();\\n        }\\n\\n        result_.debtPreAction       = borrower.t0Debt;\\n        result_.collateralPreAction = borrower.collateral;\\n\\n        // take auction\\n        TakeLocalVars memory vars = _take(\\n            auctions_,\\n            borrower,\\n            TakeParams({\\n                borrower:        borrowerAddress_,\\n                takeCollateral:  collateral_,\\n                inflator:        poolState_.inflator,\\n                poolType:        poolState_.poolType,\\n                collateralScale: collateralScale_\\n            })\\n        );\\n\\n        // update borrower after take\\n        borrower.collateral -= vars.collateralAmount;\\n        borrower.t0Debt     =  vars.t0BorrowerDebt - vars.t0RepayAmount;\\n        // update pool params after take\\n        poolState_.t0Debt -= vars.t0RepayAmount;\\n        poolState_.debt   =  Maths.wmul(poolState_.t0Debt, poolState_.inflator);\\n\\n        // update loan after take\\n        (\\n            result_.newLup,\\n            result_.settledAuction,\\n            result_.remainingCollateral,\\n            result_.compensatedCollateral\\n        ) = _takeLoan(auctions_, buckets_, deposits_, loans_, poolState_, borrower, borrowerAddress_);\\n\\n        // complete take result struct\\n        result_.debtPostAction       = borrower.t0Debt;\\n        result_.collateralPostAction = borrower.collateral;\\n        result_.t0PoolDebt           = poolState_.t0Debt;\\n        result_.poolDebt             = poolState_.debt;\\n        result_.collateralAmount     = vars.collateralAmount;\\n        result_.quoteTokenAmount     = vars.quoteTokenAmount;\\n        result_.excessQuoteToken     = vars.excessQuoteToken;\\n        // if settled then debt in auction changed is the entire borrower debt, otherwise only repaid amount\\n        result_.t0DebtInAuctionChange = result_.settledAuction ? vars.t0BorrowerDebt : vars.t0RepayAmount;\\n    }\\n\\n    /*************************/\\n    /***  Reserve Auction  ***/\\n    /*************************/\\n\\n    /**\\n     *  @notice See `IPoolTakerActions` for descriptions.\\n     *  @dev    === Write state ===\\n     *  @dev    decrement `reserveAuction.unclaimed` accumulator\\n     *  @dev    === Reverts on ===\\n     *  @dev    not kicked or `72` hours passed `NoReservesAuction()`\\n     *  @dev    0 take amount or 0 AJNA burned `InvalidAmount()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `ReserveAuction`\\n     */\\n    function takeReserves(\\n        ReserveAuctionState storage reserveAuction_,\\n        uint256 maxAmount_,\\n        uint256 quoteScale_\\n    ) external returns (uint256 amount_, uint256 ajnaRequired_) {\\n        uint256 kicked = reserveAuction_.kicked;\\n\\n        if (kicked != 0 && block.timestamp - kicked <= 72 hours) {\\n            uint256 unclaimed = reserveAuction_.unclaimed;\\n            uint256 price     = _reserveAuctionPrice(kicked, reserveAuction_.lastKickedReserves);\\n\\n            amount_       = Maths.min(unclaimed, maxAmount_);\\n            // revert if no amount to be taken\\n            if (amount_ / quoteScale_ == 0) revert InvalidAmount();\\n\\n            ajnaRequired_ = Maths.ceilWmul(amount_, price);\\n            // prevent 0-bid; must burn at least 1 wei of AJNA\\n            if (ajnaRequired_ == 0) revert InvalidAmount();\\n\\n            unclaimed -= amount_;\\n\\n            reserveAuction_.unclaimed = unclaimed;\\n\\n            uint256 totalBurned = reserveAuction_.totalAjnaBurned + ajnaRequired_;\\n            \\n            // accumulate additional ajna burned\\n            reserveAuction_.totalAjnaBurned = totalBurned;\\n\\n            uint256 burnEventEpoch = reserveAuction_.latestBurnEventEpoch;\\n\\n            // record burn event information to enable querying by staking rewards\\n            BurnEvent storage burnEvent = reserveAuction_.burnEvents[burnEventEpoch];\\n            burnEvent.totalInterest = reserveAuction_.totalInterestEarned;\\n            burnEvent.totalBurned   = totalBurned;\\n\\n            emit ReserveAuction(\\n                unclaimed,\\n                price,\\n                burnEventEpoch\\n            );\\n        } else {\\n            revert NoReservesAuction();\\n        }\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Performs take collateral on an auction and updates bond size and kicker balance accordingly.\\n     *  @dev    === Emit events ===\\n     *  @dev    - `Take`\\n     *  @param  auctions_ Struct for pool auctions state.\\n     *  @param  borrower_ Struct containing auctioned borrower details.\\n     *  @param  params_   Struct containing take action params details.\\n     *  @return vars_     Struct containing auction take vars.\\n    */\\n    function _take(\\n        AuctionsState storage auctions_,\\n        Borrower memory borrower_,\\n        TakeParams memory params_\\n    ) internal returns (TakeLocalVars memory vars_) {\\n        Liquidation storage liquidation = auctions_.liquidations[params_.borrower];\\n\\n        vars_ = _prepareTake(\\n            liquidation,\\n            0,\\n            borrower_.t0Debt,\\n            params_.inflator\\n        );\\n\\n        // These are placeholder max values passed to calculateTakeFlows because there is no explicit bound on the\\n        // quote token amount in take calls (as opposed to bucketTake)\\n        vars_.unscaledDeposit = type(uint256).max;\\n        vars_.bucketScale     = Maths.WAD;\\n\\n        uint256 takeableCollateral = borrower_.collateral;\\n        // for NFT take make sure the take flow and bond change calculation happens for the rounded collateral that can be taken\\n        if (params_.poolType == uint8(PoolType.ERC721)) {\\n            takeableCollateral = (takeableCollateral / 1e18) * 1e18;\\n        }\\n\\n        // In the case of take, the taker binds the collateral qty but not the quote token qty\\n        // ugly to get take work like a bucket take -- this is the max amount of quote token from the take that could go to\\n        // reduce the debt of the borrower -- analagous to the amount of deposit in the bucket for a bucket take\\n        vars_ = _calculateTakeFlowsAndBondChange(\\n            Maths.min(takeableCollateral, params_.takeCollateral),\\n            params_.inflator,\\n            params_.collateralScale,\\n            vars_\\n        );\\n\\n        _rewardTake(auctions_, liquidation, vars_);\\n\\n        if (params_.poolType == uint8(PoolType.ERC721)) {\\n            // slither-disable-next-line divide-before-multiply\\n            uint256 collateralTaken = (vars_.collateralAmount / 1e18) * 1e18; // solidity rounds down, so if 2.5 it will be 2.5 / 1 = 2\\n\\n            // collateral taken not a round number\\n            if (collateralTaken != vars_.collateralAmount) {\\n                if (Maths.min(borrower_.collateral, params_.takeCollateral) >= collateralTaken + 1e18) {\\n                    // round up collateral to take\\n                    collateralTaken += 1e18;\\n\\n                    // taker should send additional quote tokens to cover difference between collateral needed to be taken and rounded collateral, at auction price\\n                    // borrower will get quote tokens for the difference between rounded collateral and collateral taken to cover debt\\n                    vars_.excessQuoteToken = Maths.wmul(collateralTaken - vars_.collateralAmount, vars_.auctionPrice);\\n                    vars_.collateralAmount = collateralTaken;\\n                } else {\\n                    // shouldn't get here, but just in case revert\\n                    revert CollateralRoundingNeededButNotPossible();\\n                }\\n            }\\n        }\\n\\n        emit Take(\\n            params_.borrower,\\n            vars_.quoteTokenAmount,\\n            vars_.collateralAmount,\\n            vars_.bondChange,\\n            vars_.isRewarded\\n        );\\n    }\\n\\n    /**\\n     *  @notice Performs bucket take collateral on an auction and rewards taker and kicker (if case).\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketTake`\\n     *  @param  auctions_ Struct for pool auctions state.\\n     *  @param  buckets_  Struct for pool buckets state.\\n     *  @param  deposits_ Struct for pool deposits state.\\n     *  @param  borrower_ Struct containing auctioned borrower details.\\n     *  @param  params_   Struct containing take action details.\\n     *  @return vars_     Struct containing auction take vars.\\n    */\\n    function _takeBucket(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        Borrower memory borrower_,\\n        BucketTakeParams memory params_\\n    ) internal returns (TakeLocalVars memory vars_) {\\n        Liquidation storage liquidation = auctions_.liquidations[params_.borrower];\\n\\n        vars_= _prepareTake(\\n            liquidation,\\n            _priceAt(params_.index),\\n            borrower_.t0Debt,\\n            params_.inflator\\n        );\\n\\n        vars_.unscaledDeposit = Deposits.unscaledValueAt(deposits_, params_.index);\\n\\n        // revert if no quote tokens in arbed bucket\\n        if (vars_.unscaledDeposit == 0) revert InsufficientLiquidity();\\n\\n        // cannot arb with a price lower than the auction price\\n        if (vars_.auctionPrice > vars_.bucketPrice) revert AuctionPriceGtBucketPrice();\\n        \\n        // if deposit take then price to use when calculating take is bucket price\\n        if (params_.depositTake) vars_.auctionPrice = vars_.bucketPrice;\\n\\n        vars_.bucketScale = Deposits.scale(deposits_, params_.index);\\n\\n        vars_ = _calculateTakeFlowsAndBondChange(\\n            borrower_.collateral,\\n            params_.inflator,\\n            params_.collateralScale,\\n            vars_\\n        );\\n\\n        // revert if bucket deposit cannot cover at least one unit of collateral\\n        if (vars_.collateralAmount == 0) revert InsufficientLiquidity();\\n\\n        _rewardBucketTake(\\n            auctions_,\\n            deposits_,\\n            buckets_,\\n            liquidation,\\n            params_.index,\\n            params_.depositTake,\\n            vars_\\n        );\\n\\n        emit BucketTake(\\n            params_.borrower,\\n            params_.index,\\n            vars_.quoteTokenAmount,\\n            vars_.collateralAmount,\\n            vars_.bondChange,\\n            vars_.isRewarded\\n        );\\n    }\\n\\n    /**\\n     *  @notice Performs update of an auctioned loan that was taken (using bucket or regular take).\\n     *  @notice If borrower's debt has been fully covered, then auction is settled. Update loan's state.\\n     *  @dev    === Reverts on ===\\n     *  @dev    borrower debt less than pool min debt `AmountLTMinDebt()`\\n     *  @param  auctions_              Struct for pool auctions state.\\n     *  @param  buckets_               Struct for pool buckets state.\\n     *  @param  deposits_              Struct for pool deposits state.\\n     *  @param  loans_                 Struct for pool loans state.\\n     *  @param  poolState_             Struct containing pool details.\\n     *  @param  borrower_              The borrower details owning loan that is taken.\\n     *  @param  borrowerAddress_       The address of the borrower.\\n     *  @return newLup_                The new `LUP` of pool (after debt is repaid).\\n     *  @return settledAuction_        True if auction is settled by the take action. (`NFT` take: rebalance borrower collateral in pool if true)\\n     *  @return remainingCollateral_   Borrower collateral remaining after take action. (`NFT` take: collateral to be rebalanced in case of `NFT` settlement)\\n     *  @return compensatedCollateral_ Amount of collateral compensated, to be deducted from pool pledged collateral accumulator.\\n    */\\n    function _takeLoan(\\n        AuctionsState storage auctions_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        DepositsState storage deposits_,\\n        LoansState storage loans_,\\n        PoolState memory poolState_,\\n        Borrower memory borrower_,\\n        address borrowerAddress_\\n    ) internal returns (\\n        uint256 newLup_,\\n        bool settledAuction_,\\n        uint256 remainingCollateral_,\\n        uint256 compensatedCollateral_\\n    ) {\\n\\n        uint256 borrowerDebt = Maths.wmul(borrower_.t0Debt, poolState_.inflator);\\n\\n        // check that taking from loan doesn't leave borrower debt under min debt amount\\n        _revertOnMinDebt(\\n            loans_,\\n            poolState_.debt,\\n            borrowerDebt,\\n            poolState_.quoteTokenScale\\n        );\\n\\n        remainingCollateral_ = borrower_.collateral;\\n\\n        // if debt is fully repaid, settle the auction\\n        if (borrower_.t0Debt == 0) {\\n            settledAuction_ = true;\\n\\n            // settle auction and update borrower's collateral with value after settlement\\n            (remainingCollateral_, compensatedCollateral_) = SettlerActions._settleAuction(\\n                auctions_,\\n                buckets_,\\n                deposits_,\\n                borrowerAddress_,\\n                borrower_.collateral,\\n                poolState_.poolType\\n            );\\n\\n            borrower_.collateral = remainingCollateral_;\\n        }\\n\\n        // update loan state, stamp borrower Np to Tp ratio only when exiting from auction\\n        Loans.update(\\n            loans_,\\n            borrower_,\\n            borrowerAddress_,\\n            poolState_.rate,\\n            !settledAuction_,\\n            settledAuction_ // stamp borrower Np to Tp ratio if exiting from auction\\n        );\\n\\n        // calculate new lup with repaid debt from take\\n        newLup_ = Deposits.getLup(deposits_, poolState_.debt);\\n    }\\n\\n    /**\\n     *  @notice Rewards actors of a regular take action.\\n     *  @dev    === Write state ===\\n     *  @dev    update liquidation `bond size` accumulator\\n     *  @dev    update kicker's `locked balance` accumulator\\n     *  @dev    update `auctions.totalBondEscrowed` accumulator\\n     *  @param  auctions_     Struct for pool auctions state.\\n     *  @param  liquidation_  Struct containing details of auction.\\n     *  @param  vars          Struct containing take action result details.\\n     */\\n    function _rewardTake(\\n        AuctionsState storage auctions_,\\n        Liquidation storage liquidation_,\\n        TakeLocalVars memory vars\\n    ) internal {\\n        if (vars.isRewarded) {\\n            // take is below neutralPrice, Kicker is rewarded\\n            liquidation_.bondSize                 += SafeCast.toUint160(vars.bondChange);\\n            auctions_.kickers[vars.kicker].locked += vars.bondChange;\\n            auctions_.totalBondEscrowed           += vars.bondChange;\\n        } else {\\n            // take is above neutralPrice, Kicker is penalized\\n            vars.bondChange = Maths.min(liquidation_.bondSize, vars.bondChange);\\n\\n            liquidation_.bondSize                 -= SafeCast.toUint160(vars.bondChange);\\n            auctions_.kickers[vars.kicker].locked -= vars.bondChange;\\n            auctions_.totalBondEscrowed           -= vars.bondChange;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Rewards actors of a bucket take action.\\n     *  @dev    === Write state ===\\n     *  @dev    - `Buckets.addLenderLP`:\\n     *  @dev      increment taker `lender.lps` accumulator and `lender.depositTime` state\\n     *  @dev      increment kicker `lender.lps` accumulator and l`ender.depositTime` state\\n     *  @dev    - update liquidation bond size accumulator\\n     *  @dev    - update kicker's locked balance accumulator\\n     *  @dev    - update `auctions.totalBondEscrowed` accumulator\\n     *  @dev    - `Deposits.unscaledRemove()` (remove amount in `Fenwick` tree, from index):\\n     *  @dev      update `values` array state\\n     *  @dev    - increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    === Emit events ===\\n     *  @dev    - `BucketTakeLPAwarded`\\n     *  @dev    === Reverts on ===\\n     *  @dev    calculated unscaled amount to remove is 0 `InvalidAmount()`\\n     *  @param  auctions_     Struct for pool auctions state.\\n     *  @param  deposits_     Struct for pool deposits state.\\n     *  @param  buckets_      Struct for pool buckets state.\\n     *  @param  liquidation_  Struct containing details of auction to be taken from.\\n     *  @param  bucketIndex_  Index of a bucket, likely the `HPB`, in which collateral will be deposited.\\n     *  @param  depositTake_  If `true` then the take will happen at an auction price equal with bucket price. Auction price is used otherwise.\\n     *  @param  vars          Struct containing bucket take action result details.\\n     */\\n    function _rewardBucketTake(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        Liquidation storage liquidation_,\\n        uint256 bucketIndex_,\\n        bool depositTake_,\\n        TakeLocalVars memory vars\\n    ) internal {\\n        Bucket storage bucket = buckets_[bucketIndex_];\\n\\n        uint256 bankruptcyTime = bucket.bankruptcyTime;\\n        uint256 scaledDeposit  = Maths.wmul(vars.unscaledDeposit, vars.bucketScale);\\n        uint256 totalLPReward;\\n        uint256 takerLPReward;\\n        uint256 kickerLPReward;\\n\\n        // if arb take - taker is awarded collateral * (bucket price - auction price) worth (in quote token terms) units of LPB in the bucket\\n        if (!depositTake_) {\\n            takerLPReward = Buckets.quoteTokensToLP(\\n                bucket.collateral,\\n                bucket.lps,\\n                scaledDeposit,\\n                Maths.wmul(vars.collateralAmount, vars.bucketPrice - vars.auctionPrice),\\n                vars.bucketPrice,\\n                Math.Rounding.Down\\n            );\\n            totalLPReward = takerLPReward;\\n\\n            Buckets.addLenderLP(bucket, bankruptcyTime, msg.sender, takerLPReward);\\n        }\\n\\n        // the bondholder/kicker is awarded bond change worth of LPB in the bucket\\n        if (vars.isRewarded) {\\n            kickerLPReward = Buckets.quoteTokensToLP(\\n                bucket.collateral,\\n                bucket.lps,\\n                scaledDeposit,\\n                vars.bondChange,\\n                vars.bucketPrice,\\n                Math.Rounding.Down\\n            );\\n            totalLPReward  += kickerLPReward;\\n\\n            Buckets.addLenderLP(bucket, bankruptcyTime, vars.kicker, kickerLPReward);\\n        } else {\\n            // take is above neutralPrice, Kicker is penalized\\n            vars.bondChange = Maths.min(liquidation_.bondSize, vars.bondChange);\\n\\n            liquidation_.bondSize -= SafeCast.toUint160(vars.bondChange);\\n\\n            auctions_.kickers[vars.kicker].locked -= vars.bondChange;\\n            auctions_.totalBondEscrowed           -= vars.bondChange;\\n        }\\n\\n        // remove quote tokens from bucket\u2019s deposit\\n        Deposits.unscaledRemove(deposits_, bucketIndex_, vars.unscaledQuoteTokenAmount);\\n\\n        // total rewarded LP are added to the bucket LP balance\\n        if (totalLPReward != 0) bucket.lps += totalLPReward;\\n        // collateral is added to the bucket\u2019s claimable collateral\\n        bucket.collateral += vars.collateralAmount;\\n\\n        emit BucketTakeLPAwarded(\\n            msg.sender,\\n            vars.kicker,\\n            takerLPReward,\\n            kickerLPReward\\n        );\\n    }\\n\\n    /**\\n     *  @notice Utility function to validate take and calculate take's parameters.\\n     *  @dev    reverts on:\\n     *              - loan is not in auction NoAuction()\\n     *  @param  liquidation_ Liquidation struct holding auction details.\\n     *  @param  bucketPrice_ Price of the bucket, or 0 for non-bucket takes.\\n     *  @param  t0Debt_      Borrower t0 debt.\\n     *  @param  inflator_    The pool's inflator, used to calculate borrower debt.\\n     *  @return vars         The prepared vars for take action.\\n     */\\n    function _prepareTake(\\n        Liquidation memory liquidation_,\\n        uint256 bucketPrice_,\\n        uint256 t0Debt_,\\n        uint256 inflator_\\n    ) internal view returns (TakeLocalVars memory vars) {\\n\\n        uint256 kickTime = liquidation_.kickTime;\\n        if (kickTime == 0) revert NoAuction();\\n        // Auction may not be taken in the same block it was kicked\\n        if (kickTime == block.timestamp) revert AuctionNotTakeable();\\n\\n        vars.t0BorrowerDebt = t0Debt_;\\n\\n        vars.borrowerDebt = Maths.wmul(vars.t0BorrowerDebt, inflator_);\\n\\n        uint256 neutralPrice = liquidation_.neutralPrice;\\n\\n        vars.auctionPrice = _auctionPrice(liquidation_.referencePrice, kickTime);\\n        vars.bucketPrice = bucketPrice_;\\n        vars.bondFactor   = liquidation_.bondFactor;\\n        vars.bpf          = _bpf(\\n            liquidation_.debtToCollateral,\\n            neutralPrice,\\n            liquidation_.bondFactor,\\n            bucketPrice_ == 0 ? vars.auctionPrice : bucketPrice_\\n        );\\n        vars.kicker       = liquidation_.kicker;\\n        vars.isRewarded   = (vars.bpf  >= 0);\\n    }\\n\\n    /**\\n     *  @notice Computes the flows of collateral, quote token between the borrower, lender and kicker.\\n     *  @param  totalCollateral_        Total collateral in loan.\\n     *  @param  inflator_               Current pool inflator.\\n     *  @param  vars                    TakeParams for the take/buckettake\\n     */\\n    function _calculateTakeFlowsAndBondChange(\\n        uint256              totalCollateral_,\\n        uint256              inflator_,\\n        uint256              collateralScale_,\\n        TakeLocalVars memory vars\\n    ) internal pure returns (\\n        TakeLocalVars memory\\n    ) {\\n        // price is the current auction price, which is the price paid by the LENDER for collateral\\n        // from the borrower point of view, there is a take penalty of  (1.25 * bondFactor - 0.25 * bpf)\\n        // Therefore the price is actually price * (1.0 - 1.25 * bondFactor + 0.25 * bpf)\\n        uint256 takePenaltyFactor    = uint256(5 * int256(vars.bondFactor) - vars.bpf + 3) / 4;  // Round up\\n        uint256 borrowerPrice        = Maths.floorWmul(vars.auctionPrice, Maths.WAD - takePenaltyFactor);\\n\\n        // To determine the value of quote token removed from a bucket in a bucket take call, we need to account for whether the bond is\\n        // rewarded or not.  If the bond is rewarded, we need to remove the bond reward amount from the amount removed, else it's simply the \\n        // collateral times auction price.\\n        uint256 netRewardedPrice     = (vars.isRewarded) ? Maths.wmul(Maths.WAD - uint256(vars.bpf), vars.auctionPrice) : vars.auctionPrice;\\n\\n        // auctions may not be zero-bid; prevent divide-by-zero in constraint calculations\\n        if (vars.auctionPrice == 0) revert InvalidAmount();\\n\\n        // Collateral taken in bucket takes is constrained by the deposit available at the price including the reward.  This is moot in the case of takes.\\n        vars.depositCollateralConstraint = (vars.unscaledDeposit != type(uint256).max) ? _roundToScale(Math.mulDiv(vars.unscaledDeposit, vars.bucketScale, netRewardedPrice), collateralScale_) : type(uint256).max;\\n\\n        // Collateral taken is also constained by the borrower's debt, at the price they receive.\\n        vars.debtCollateralConstraint = borrowerPrice != 0 ? _roundUpToScale(Maths.ceilWdiv(vars.borrowerDebt, borrowerPrice), collateralScale_) : type(uint256).max;\\n        \\n        if (vars.depositCollateralConstraint <= vars.debtCollateralConstraint && vars.depositCollateralConstraint <= totalCollateral_) {\\n            // quote token used to purchase is constraining factor\\n            vars.collateralAmount         = vars.depositCollateralConstraint;\\n            vars.quoteTokenAmount         = Maths.wmul(vars.collateralAmount, vars.auctionPrice);\\n            vars.t0RepayAmount            = Math.mulDiv(vars.collateralAmount, borrowerPrice, inflator_);\\n            vars.unscaledQuoteTokenAmount = Maths.min(\\n                vars.unscaledDeposit,\\n                Math.mulDiv(vars.collateralAmount, netRewardedPrice, vars.bucketScale)\\n            );\\n        } else if (vars.debtCollateralConstraint <= totalCollateral_) {\\n            // borrower debt is constraining factor\\n            vars.collateralAmount         = vars.debtCollateralConstraint;\\n            vars.t0RepayAmount            = vars.t0BorrowerDebt;\\n            vars.unscaledQuoteTokenAmount = Math.mulDiv(vars.collateralAmount, netRewardedPrice, vars.bucketScale);\\n\\n            vars.quoteTokenAmount         = Math.mulDiv(vars.collateralAmount, borrowerPrice, Maths.WAD - takePenaltyFactor);\\n        } else {\\n            // collateral available is constraint\\n            vars.collateralAmount         = totalCollateral_;\\n            vars.t0RepayAmount            = Math.mulDiv(totalCollateral_, borrowerPrice, inflator_);\\n            vars.unscaledQuoteTokenAmount = Math.mulDiv(totalCollateral_, netRewardedPrice, vars.bucketScale);\\n\\n            vars.quoteTokenAmount         = Maths.wmul(vars.collateralAmount, vars.auctionPrice);\\n        }\\n\\n        // repaid amount cannot exceed the borrower owned debt\\n        vars.t0RepayAmount = Maths.min(vars.t0RepayAmount, vars.t0BorrowerDebt);\\n\\n        if (vars.isRewarded) {\\n            // take is below neutralPrice, Kicker is rewarded\\n            vars.bondChange = Maths.floorWmul(vars.quoteTokenAmount, uint256(vars.bpf));\\n        } else {\\n            // take is above neutralPrice, Kicker is penalized\\n            vars.bondChange = Maths.ceilWmul(vars.quoteTokenAmount, uint256(-vars.bpf));\\n        }\\n\\n        return vars;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev    Receive a flash loan.\\n     * @param  initiator The initiator of the loan.\\n     * @param  token     The loan currency.\\n     * @param  amount    The amount of tokens lent (token precision).\\n     * @param  fee       The additional amount of tokens to repay.\\n     * @param  data      Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The `keccak256` hash of `ERC3156FlashBorrower.onFlashLoan`\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes   calldata data\\n    ) external returns (bytes32);\\n}\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolBorrowerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool Borrower Actions\\n */\\ninterface IERC721PoolBorrowerActions {\\n\\n    /**\\n     *  @notice Called by borrowers to add collateral to the pool and/or borrow quote from the pool.\\n     *  @dev    Can be called by borrowers with either `0` `amountToBorrow_` or `0` `collateralToPledge`_, if borrower only wants to take a single action. \\n     *  @param  borrower_         The address of borrower to drawDebt for.\\n     *  @param  amountToBorrow_   The amount of quote tokens to borrow (`WAD` precision).\\n     *  @param  limitIndex_       Lower bound of `LUP` change (if any) that the borrower will tolerate from a creating or modifying position.\\n     *  @param  tokenIdsToPledge_ Array of token ids to be pledged to the pool.\\n     */\\n    function drawDebt(\\n        address borrower_,\\n        uint256 amountToBorrow_,\\n        uint256 limitIndex_,\\n        uint256[] calldata tokenIdsToPledge_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by borrowers to repay borrowed quote to the pool, and/or pull collateral form the pool.\\n     *  @dev    Can be called by borrowers with either `0` `maxQuoteTokenAmountToRepay_` or `0` `collateralAmountToPull_`, if borrower only wants to take a single action. \\n     *  @param  borrowerAddress_            The borrower whose loan is being interacted with.\\n     *  @param  maxQuoteTokenAmountToRepay_ The max amount of quote tokens to repay (`WAD` precision).\\n     *  @param  noOfNFTsToPull_             The integer number of `NFT` collateral to be puled from the pool.\\n     *  @param  recipient_                  The address to receive amount of pulled collateral.\\n     *  @param  limitIndex_                 Ensures `LUP` has not moved far from state when borrower pulls collateral.\\n     *  @return amountRepaid_               The amount of quote token repaid (`WAD` precision).\\n     */\\n    function repayDebt(\\n        address borrowerAddress_,\\n        uint256 maxQuoteTokenAmountToRepay_,\\n        uint256 noOfNFTsToPull_,\\n        address recipient_,\\n        uint256 limitIndex_\\n    ) external returns (uint256 amountRepaid_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolLenderActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool Lender Actions\\n */\\ninterface IERC721PoolLenderActions {\\n\\n    /**\\n     *  @notice Deposit claimable collateral into a specified bucket.\\n     *  @param  tokenIds_ Array of token ids to deposit.\\n     *  @param  index_    The bucket index to which collateral will be deposited.\\n     *  @param  expiry_   Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return bucketLP_ The amount of `LP `changed for the added collateral.\\n     */\\n    function addCollateral(\\n        uint256[] calldata tokenIds_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external returns (uint256 bucketLP_);\\n\\n    /**\\n     *  @notice Merge collateral accross a number of buckets, `removalIndexes_` reconstitute an `NFT`.\\n     *  @param  removalIndexes_   Array of bucket indexes to remove all collateral that the caller has ownership over.\\n     *  @param  noOfNFTsToRemove_ Intergral number of `NFT`s to remove if collateral amount is met `noOfNFTsToRemove_`, else merge at bucket index, `toIndex_`.\\n     *  @param  toIndex_          The bucket index to which merge collateral into.\\n     *  @return collateralMerged_ Amount of collateral merged into `toIndex_` (`WAD` precision).\\n     *  @return bucketLP_         If non-zero, amount of `LP` in `toIndex_` when collateral is merged into bucket (`WAD` precision). If `0`, no collateral is merged.\\n     */\\n    function mergeOrRemoveCollateral(\\n        uint256[] calldata removalIndexes_,\\n        uint256 noOfNFTsToRemove_,\\n        uint256 toIndex_\\n    ) external returns (uint256 collateralMerged_, uint256 bucketLP_);\\n}\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool Immutables\\n */\\ninterface IERC721PoolImmutables{\\n\\n    /**\\n     *  @notice Returns the type of `NFT` pool.\\n     *  @return `True` if `NTF` pool is a subset pool.\\n     */\\n    function isSubset() external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool Events\\n */\\ninterface IERC721PoolEvents {\\n\\n    /**\\n     *  @notice Emitted when actor adds claimable collateral to a bucket.\\n     *  @param  actor     Recipient that added collateral.\\n     *  @param  index     Index at which collateral were added.\\n     *  @param  tokenIds  Array of tokenIds to be added to the pool.\\n     *  @param  lpAwarded Amount of LP awarded for the deposit (`WAD` precision).\\n     */\\n    event AddCollateralNFT(\\n        address indexed actor,\\n        uint256 indexed index,\\n        uint256[] tokenIds,\\n        uint256   lpAwarded\\n    );\\n\\n    /**\\n     *  @notice Emitted when actor adds claimable collateral to a bucket.\\n     *  @param  actor            Recipient that added collateral.\\n     *  @param  collateralMerged Amount of collateral merged (`WAD` precision).\\n     *  @param  toIndexLps       If non-zero, amount of LP in toIndex when collateral is merged into bucket (`WAD` precision). If 0, no collateral is merged.\\n     */\\n    event MergeOrRemoveCollateralNFT(\\n        address indexed actor,\\n        uint256 collateralMerged,\\n        uint256 toIndexLps\\n    );\\n\\n    /**\\n     *  @notice Emitted when borrower draws debt from the pool or adds collateral to the pool.\\n     *  @param  borrower          `msg.sender`.\\n     *  @param  amountBorrowed    Amount of quote tokens borrowed from the pool (`WAD` precision).\\n     *  @param  tokenIdsPledged   Array of tokenIds to be added to the pool.\\n     *  @param  lup               LUP after borrow.\\n     */\\n    event DrawDebtNFT(\\n        address indexed borrower,\\n        uint256   amountBorrowed,\\n        uint256[] tokenIdsPledged,\\n        uint256   lup\\n    );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/erc721/IERC721PoolErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ERC721 Pool Errors\\n */\\ninterface IERC721PoolErrors {\\n\\n    /**\\n     *  @notice User attempted to add an `NFT` to the pool with a `tokenId` outside of the allowed subset.\\n     */\\n    error OnlySubset();\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/base/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Clone }           from '@clones/Clone.sol';\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport { Multicall }       from '@openzeppelin/contracts/utils/Multicall.sol';\\nimport { SafeERC20 }       from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 }          from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {\\n    IPool,\\n    IPoolImmutables,\\n    IPoolBorrowerActions,\\n    IPoolLPActions,\\n    IPoolLenderActions,\\n    IPoolKickerActions,\\n    IPoolTakerActions,\\n    IPoolSettlerActions,\\n    IPoolState,\\n    IPoolDerivedState,\\n    IERC20Token\\n}                                    from '../interfaces/pool/IPool.sol';\\nimport {\\n    PoolState,\\n    AuctionsState,\\n    DepositsState,\\n    Loan,\\n    LoansState,\\n    InflatorState,\\n    EmaState,\\n    InterestState,\\n    PoolBalancesState,\\n    ReserveAuctionState,\\n    Bucket,\\n    Lender,\\n    Borrower,\\n    Kicker,\\n    BurnEvent,\\n    Liquidation\\n}                                   from '../interfaces/pool/commons/IPoolState.sol';\\nimport {\\n    KickResult,\\n    SettleResult,\\n    TakeResult,\\n    RemoveQuoteParams,\\n    MoveQuoteParams,\\n    AddQuoteParams,\\n    KickReserveAuctionParams\\n}                                   from '../interfaces/pool/commons/IPoolInternals.sol';\\n\\nimport {\\n    COLLATERALIZATION_FACTOR,\\n    _determineInflatorState,\\n    _priceAt,\\n    _roundToScale\\n}                               from '../libraries/helpers/PoolHelper.sol';\\nimport {\\n    _revertIfAuctionDebtLocked,\\n    _revertIfAuctionClearable,\\n    _revertAfterExpiry,\\n    _revertIfAuctionPriceBelow,\\n    _revertIfActiveAuctions\\n}                               from '../libraries/helpers/RevertsHelper.sol';\\n\\nimport { Buckets }  from '../libraries/internal/Buckets.sol';\\nimport { Deposits } from '../libraries/internal/Deposits.sol';\\nimport { Loans }    from '../libraries/internal/Loans.sol';\\nimport { Maths }    from '../libraries/internal/Maths.sol';\\n\\nimport { BorrowerActions } from '../libraries/external/BorrowerActions.sol';\\nimport { LenderActions }   from '../libraries/external/LenderActions.sol';\\nimport { LPActions }       from '../libraries/external/LPActions.sol';\\nimport { KickerActions }   from '../libraries/external/KickerActions.sol';\\nimport { TakerActions }    from '../libraries/external/TakerActions.sol';\\nimport { PoolCommons }     from '../libraries/external/PoolCommons.sol';\\n\\n/**\\n *  @title  Pool Contract\\n *  @dev    Base contract and entrypoint for commong logic of both `ERC20` and `ERC721` pools.\\n */\\nabstract contract Pool is Clone, ReentrancyGuard, Multicall, IPool {\\n    using SafeERC20 for IERC20;\\n\\n    /*****************/\\n    /*** Constants ***/\\n    /*****************/\\n\\n    /// @dev Immutable pool type arg offset.\\n    uint256 internal constant POOL_TYPE          = 0;\\n    /// @dev Immutable `Ajna` token address arg offset.\\n    uint256 internal constant AJNA_ADDRESS       = 1;\\n    /// @dev Immutable collateral token address arg offset.\\n    uint256 internal constant COLLATERAL_ADDRESS = 21;\\n    /// @dev Immutable quote token address arg offset.\\n    uint256 internal constant QUOTE_ADDRESS      = 41;\\n    /// @dev Immutable quote token scale arg offset.\\n    uint256 internal constant QUOTE_SCALE        = 61;\\n\\n    /***********************/\\n    /*** State Variables ***/\\n    /***********************/\\n\\n    AuctionsState       internal auctions;\\n    DepositsState       internal deposits;\\n    LoansState          internal loans;\\n    InflatorState       internal inflatorState;\\n    EmaState            internal emaState;\\n    InterestState       internal interestState;\\n    PoolBalancesState   internal poolBalances;\\n    ReserveAuctionState internal reserveAuction;\\n\\n    /// @dev deposit index -> bucket mapping\\n    mapping(uint256 => Bucket) internal buckets;\\n\\n    bool internal isPoolInitialized;\\n\\n    /// @dev owner address -> new owner address -> deposit index -> allowed amount mapping\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) private _lpAllowances;\\n\\n    /// @dev owner address -> transferor address -> approved flag mapping\\n    mapping(address => mapping(address => bool)) public override approvedTransferors;\\n\\n    /******************/\\n    /*** Immutables ***/\\n    /******************/\\n\\n    /// @inheritdoc IPoolImmutables\\n    function poolType() external pure override returns (uint8) {\\n        return _getArgUint8(POOL_TYPE);\\n    }\\n\\n    /// @inheritdoc IPoolImmutables\\n    function collateralAddress() external pure override returns (address) {\\n        return _getArgAddress(COLLATERAL_ADDRESS);\\n    }\\n\\n    /// @inheritdoc IPoolImmutables\\n    function quoteTokenAddress() external pure override returns (address) {\\n        return _getArgAddress(QUOTE_ADDRESS);\\n    }\\n\\n    /// @inheritdoc IPoolImmutables\\n    function quoteTokenScale() external pure override returns (uint256) {\\n        return _getArgUint256(QUOTE_SCALE);\\n    }\\n\\n\\n    /*********************************/\\n    /*** Lender External Functions ***/\\n    /*********************************/\\n\\n    /// @inheritdoc IPoolLenderActions\\n    function addQuoteToken(\\n        uint256 amount_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external override nonReentrant returns (uint256 bucketLP_, uint256 addedAmount_) {\\n        _revertAfterExpiry(expiry_);\\n\\n        _revertIfAuctionClearable(auctions, loans);\\n\\n        _revertIfAuctionPriceBelow(auctions, index_);\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        // round to token precision\\n        amount_ = _roundToScale(amount_, poolState.quoteTokenScale);\\n\\n        uint256 newLup;\\n        (bucketLP_, addedAmount_, newLup) = LenderActions.addQuoteToken(\\n            buckets,\\n            deposits,\\n            poolState,\\n            AddQuoteParams({\\n                amount:           amount_,\\n                index:            index_\\n            })\\n        );\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, newLup);\\n\\n        // move quote token amount from lender to pool\\n        _transferQuoteTokenFrom(msg.sender, amount_);\\n    }\\n\\n    /// @inheritdoc IPoolLenderActions\\n    function moveQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 fromIndex_,\\n        uint256 toIndex_,\\n        uint256 expiry_\\n    ) external override nonReentrant returns (uint256 fromBucketLP_, uint256 toBucketLP_, uint256 movedAmount_) {\\n        _revertAfterExpiry(expiry_);\\n\\n        _revertIfAuctionClearable(auctions, loans);\\n\\n        _revertIfAuctionPriceBelow(auctions, toIndex_);\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        _revertIfAuctionDebtLocked(deposits, poolState.t0DebtInAuction, fromIndex_, poolState.inflator);\\n\\n        MoveQuoteParams memory moveParams;\\n        moveParams.maxAmountToMove       = maxAmount_;\\n        moveParams.fromIndex             = fromIndex_;\\n        moveParams.toIndex               = toIndex_;\\n        moveParams.maxT0DebtToCollateral = Loans.getMax(loans).t0DebtToCollateral;\\n\\n        uint256 newLup;\\n        (\\n            fromBucketLP_,\\n            toBucketLP_,\\n            movedAmount_,\\n            newLup\\n        ) = LenderActions.moveQuoteToken(\\n            buckets,\\n            deposits,\\n            poolState,\\n            moveParams\\n        );\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, newLup);\\n    }\\n\\n    /// @inheritdoc IPoolLenderActions\\n    function removeQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external override nonReentrant returns (uint256 removedAmount_, uint256 redeemedLP_) {\\n        _revertIfAuctionClearable(auctions, loans);\\n\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        _revertIfAuctionDebtLocked(deposits, poolState.t0DebtInAuction, index_, poolState.inflator);\\n\\n        uint256 newLup;\\n        (\\n            removedAmount_,\\n            redeemedLP_,\\n            newLup\\n        ) = LenderActions.removeQuoteToken(\\n            buckets,\\n            deposits,\\n            poolState,\\n            RemoveQuoteParams({\\n                maxAmount:             Maths.min(maxAmount_, _availableQuoteToken()),\\n                index:                 index_,\\n                maxT0DebtToCollateral: Loans.getMax(loans).t0DebtToCollateral\\n            })\\n        );\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, newLup);\\n\\n        // move quote token amount from pool to lender\\n        _transferQuoteToken(msg.sender, removedAmount_);\\n    }\\n\\n    /// @inheritdoc IPoolLenderActions\\n    function updateInterest() external override nonReentrant {\\n        PoolState memory poolState = _accruePoolInterest();\\n        _updateInterestState(poolState, Deposits.getLup(deposits, poolState.debt));\\n    }\\n\\n    /***********************************/\\n    /*** Borrower External Functions ***/\\n    /***********************************/\\n\\n    /// @inheritdoc IPoolBorrowerActions\\n    function stampLoan() external override nonReentrant {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        uint256 newLup = BorrowerActions.stampLoan(\\n            auctions,\\n            deposits,\\n            loans,\\n            poolState\\n        );\\n\\n        _updateInterestState(poolState, newLup);\\n    }\\n\\n    /*****************************/\\n    /*** Liquidation Functions ***/\\n    /*****************************/\\n\\n    /**\\n     *  @inheritdoc IPoolKickerActions\\n     *  @dev    === Write state ===\\n     *  @dev    increment `poolBalances.t0DebtInAuction` and `poolBalances.t0Debt` accumulators\\n     *  @dev    update `t0Debt2ToCollateral` ratio, debt and collateral post action are considered 0\\n     */\\n    function kick(\\n        address borrower_,\\n        uint256 npLimitIndex_\\n    ) external override nonReentrant {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        // kick auction\\n        KickResult memory result = KickerActions.kick(\\n            auctions,\\n            deposits,\\n            loans,\\n            poolState,\\n            borrower_,\\n            npLimitIndex_\\n        );\\n\\n        // update in memory pool state struct\\n        poolState.t0DebtInAuction += result.t0KickedDebt;\\n\\n        // adjust t0Debt2ToCollateral ratio\\n        _updateT0Debt2ToCollateral(\\n            result.t0KickedDebt,\\n            0, // debt post kick (for loan in auction) not taken into account\\n            result.collateralPreAction,\\n            0  // collateral post kick (for loan in auction) not taken into account\\n        );\\n\\n        // update pool balances state\\n        poolBalances.t0DebtInAuction = poolState.t0DebtInAuction;\\n        // update pool interest rate state\\n        _updateInterestState(poolState, result.lup);\\n\\n        if (result.amountToCoverBond != 0) _transferQuoteTokenFrom(msg.sender, result.amountToCoverBond);\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolKickerActions\\n     *  @dev    === Write state ===\\n     */\\n    function lenderKick(\\n        uint256 index_,\\n        uint256 npLimitIndex_\\n    ) external override nonReentrant {\\n        PoolState memory poolState = _accruePoolInterest();\\n\\n        // kick auctions\\n        KickResult memory result = KickerActions.lenderKick(\\n            auctions,\\n            deposits,\\n            buckets,\\n            loans,\\n            poolState,\\n            index_,\\n            npLimitIndex_\\n        );\\n\\n        // update in memory pool state struct\\n        poolState.t0DebtInAuction += result.t0KickedDebt;\\n\\n        // adjust t0Debt2ToCollateral ratio\\n        _updateT0Debt2ToCollateral(\\n            result.t0KickedDebt,\\n            0, // debt post kick (for loan in auction) not taken into account\\n            result.collateralPreAction,\\n            0 // collateral post kick (for loan in auction) not taken into account\\n        );\\n\\n        // update pool balances state\\n        poolBalances.t0DebtInAuction = poolState.t0DebtInAuction;\\n\\n        // update pool interest rate state\\n        _updateInterestState(poolState, result.lup);\\n\\n        // transfer from kicker to pool the difference to cover bond\\n        if (result.amountToCoverBond != 0) _transferQuoteTokenFrom(msg.sender, result.amountToCoverBond);\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolKickerActions\\n     *  @dev    === Write state ===\\n     *  @dev    decrease kicker's `claimable` accumulator\\n     *  @dev    decrease auctions `totalBondEscrowed` accumulator\\n     */\\n    function withdrawBonds(\\n        address recipient_,\\n        uint256 maxAmount_\\n    ) external override nonReentrant returns (uint256 withdrawnAmount_) {\\n        withdrawnAmount_ = KickerActions.withdrawBonds(auctions, recipient_, maxAmount_);\\n        _transferQuoteToken(recipient_, withdrawnAmount_);\\n    }\\n\\n    /*********************************/\\n    /*** Reserve Auction Functions ***/\\n    /*********************************/\\n\\n    /**\\n     *  @inheritdoc IPoolKickerActions\\n     *  @dev    === Write state ===\\n     *  @dev    increment `latestBurnEpoch` counter\\n     *  @dev    update `reserveAuction.latestBurnEventEpoch` and burn event `timestamp` state\\n     *  @dev    === Reverts on ===\\n     *  @dev    no reserves to claim `NoReserves()`\\n     *  @dev    5 days not passed `ReserveAuctionTooSoon()`\\n     *  @dev    unsettled liquidation `AuctionActive()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `KickReserveAuction`\\n     */\\n    function kickReserveAuction() external override nonReentrant {\\n        _revertIfActiveAuctions(auctions);\\n\\n        // start a new claimable reserve auction, passing in relevant parameters such as the current pool size, debt, balance, and inflator value\\n        KickerActions.kickReserveAuction(\\n            auctions,\\n            reserveAuction,\\n            KickReserveAuctionParams({\\n                poolSize:    Deposits.treeSum(deposits),\\n                t0PoolDebt:  poolBalances.t0Debt,\\n                poolBalance: _getNormalizedPoolQuoteTokenBalance(),\\n                inflator:    inflatorState.inflator\\n            })\\n        );\\n    }\\n\\n    /**\\n     *  @inheritdoc IPoolTakerActions\\n     *  @dev    === Write state ===\\n     *  @dev    increment `reserveAuction.totalAjnaBurned` accumulator\\n     *  @dev    update burn event `totalInterest` and `totalBurned` accumulators\\n     */\\n    function takeReserves(\\n        uint256 maxAmount_\\n    ) external override nonReentrant returns (uint256 amount_) {\\n        uint256 ajnaRequired;\\n        (amount_, ajnaRequired) = TakerActions.takeReserves(\\n            reserveAuction,\\n            maxAmount_,\\n            _getArgUint256(QUOTE_SCALE)\\n        );\\n\\n        // burn required number of ajna tokens to take quote from reserves\\n        IERC20(_getArgAddress(AJNA_ADDRESS)).safeTransferFrom(msg.sender, address(this), ajnaRequired);\\n\\n        IERC20Token(_getArgAddress(AJNA_ADDRESS)).burn(ajnaRequired);\\n\\n        // transfer quote token to caller\\n        _transferQuoteToken(msg.sender, amount_);\\n    }\\n\\n    /*****************************/\\n    /*** Transfer LP Functions ***/\\n    /*****************************/\\n\\n    /// @inheritdoc IPoolLPActions\\n    function increaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external override nonReentrant {\\n        LPActions.increaseLPAllowance(\\n            _lpAllowances[msg.sender][spender_],\\n            spender_,\\n            indexes_,\\n            amounts_\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolLPActions\\n    function decreaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external override nonReentrant {\\n        LPActions.decreaseLPAllowance(\\n            _lpAllowances[msg.sender][spender_],\\n            spender_,\\n            indexes_,\\n            amounts_\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolLPActions\\n    function revokeLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_\\n    ) external override nonReentrant {\\n        LPActions.revokeLPAllowance(\\n            _lpAllowances[msg.sender][spender_],\\n            spender_,\\n            indexes_\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolLPActions\\n    function approveLPTransferors(\\n        address[] calldata transferors_\\n    ) external override {\\n        LPActions.approveLPTransferors(\\n            approvedTransferors[msg.sender],\\n            transferors_\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolLPActions\\n    function revokeLPTransferors(\\n        address[] calldata transferors_\\n    ) external override {\\n        LPActions.revokeLPTransferors(\\n            approvedTransferors[msg.sender],\\n            transferors_\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolLPActions\\n    function transferLP(\\n        address owner_,\\n        address newOwner_,\\n        uint256[] calldata indexes_\\n    ) external override nonReentrant {\\n        LPActions.transferLP(\\n            buckets,\\n            _lpAllowances,\\n            approvedTransferors,\\n            owner_,\\n            newOwner_,\\n            indexes_\\n        );\\n    }\\n\\n    /*****************************/\\n    /*** Pool Helper Functions ***/\\n    /*****************************/\\n\\n    /**\\n     *  @notice Accrues pool interest in current block and returns pool details.\\n     *  @dev    external libraries call: `PoolCommons.accrueInterest`\\n     *  @dev    === Write state ===\\n     *  @dev    - `PoolCommons.accrueInterest` - `Deposits.mult` (scale `Fenwick` tree with new interest accrued):\\n     *  @dev      update scaling array state \\n     *  @dev    - increment `reserveAuction.totalInterestEarned` accumulator\\n     *  @return poolState_ Struct containing pool details.\\n     */\\n    function _accruePoolInterest() internal returns (PoolState memory poolState_) {\\n        poolState_.t0Debt          = poolBalances.t0Debt;\\n        poolState_.t0DebtInAuction = poolBalances.t0DebtInAuction;\\n        poolState_.collateral      = poolBalances.pledgedCollateral;\\n        poolState_.inflator        = inflatorState.inflator;\\n        poolState_.rate            = interestState.interestRate;\\n        poolState_.poolType        = _getArgUint8(POOL_TYPE);\\n        poolState_.quoteTokenScale = _getArgUint256(QUOTE_SCALE);\\n\\n\\t    // check if t0Debt is not equal to 0, indicating that there is debt to be tracked for the pool\\n        if (poolState_.t0Debt != 0) {\\n            // Calculate prior pool debt\\n            poolState_.debt = Maths.wmul(poolState_.t0Debt, poolState_.inflator);\\n\\n            // calculate elapsed time since inflator was last updated\\n            uint256 elapsed = block.timestamp - inflatorState.inflatorUpdate;\\n\\n            // set isNewInterestAccrued field to true if elapsed time is not 0, indicating that new interest may have accrued\\n            poolState_.isNewInterestAccrued = elapsed != 0;\\n\\n            // if new interest may have accrued, call accrueInterest function and update inflator and debt fields of poolState_ struct\\n            if (poolState_.isNewInterestAccrued) {\\n                try PoolCommons.accrueInterest(\\n                    emaState,\\n                    deposits,\\n                    poolState_,\\n                    Loans.getMax(loans).t0DebtToCollateral,\\n                    elapsed\\n                ) returns (uint256 newInflator, uint256 newInterest) {\\n                    poolState_.inflator = newInflator;\\n                    // After debt owed to lenders has accrued, calculate current debt owed by borrowers\\n                    poolState_.debt = Maths.wmul(poolState_.t0Debt, poolState_.inflator);\\n\\n                    // update total interest earned accumulator with the newly accrued interest\\n                    reserveAuction.totalInterestEarned += newInterest;\\n                } catch {\\n                    poolState_.isNewInterestAccrued = false;\\n                    emit InterestUpdateFailure();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice Helper function to update pool state post take and bucket take actions.\\n     *  @param result_    Struct containing details of take result.\\n     *  @param poolState_ Struct containing pool details.\\n     */\\n    function _updatePostTakeState(\\n        TakeResult memory result_,\\n        PoolState memory poolState_\\n    ) internal {\\n        // update in memory pool state struct\\n        poolState_.debt            =  result_.poolDebt;\\n        poolState_.t0Debt          =  result_.t0PoolDebt;\\n        poolState_.t0DebtInAuction -= result_.t0DebtInAuctionChange;\\n        poolState_.collateral      -= (result_.collateralAmount + result_.compensatedCollateral); // deduct collateral taken plus collateral compensated if NFT auction settled\\n\\n        // adjust t0Debt2ToCollateral ratio if auction settled by take action\\n        if (result_.settledAuction) {\\n            _updateT0Debt2ToCollateral(\\n                0, // debt pre take (for loan in auction) not taken into account\\n                result_.debtPostAction,\\n                0, // collateral pre take (for loan in auction) not taken into account\\n                result_.collateralPostAction\\n            );\\n        }\\n\\n        // update pool balances state\\n        poolBalances.t0Debt            = poolState_.t0Debt;\\n        poolBalances.t0DebtInAuction   = poolState_.t0DebtInAuction;\\n        poolBalances.pledgedCollateral = poolState_.collateral;\\n        // update pool interest rate state\\n        _updateInterestState(poolState_, result_.newLup);\\n    }\\n\\n    /**\\n     *  @notice Helper function to update pool state post settle action.\\n     *  @param result_    Struct containing details of settle result.\\n     *  @param poolState_ Struct containing pool details.\\n     */\\n    function _updatePostSettleState(\\n        SettleResult memory result_,\\n        PoolState memory poolState_\\n    ) internal {\\n        // update in memory pool state struct\\n        poolState_.debt            -= result_.debtSettled;\\n        poolState_.t0Debt          -= result_.t0DebtSettled;\\n        poolState_.t0DebtInAuction -= result_.t0DebtSettled;\\n        poolState_.collateral      -= result_.collateralSettled;\\n\\n        // update pool balances state\\n        poolBalances.t0Debt            = poolState_.t0Debt;\\n        poolBalances.t0DebtInAuction   = poolState_.t0DebtInAuction;\\n        poolBalances.pledgedCollateral = poolState_.collateral;\\n        // update pool interest rate state\\n        _updateInterestState(poolState_, Deposits.getLup(deposits, poolState_.debt));\\n    }\\n\\n    /**\\n     *  @notice Adjusts the `t0` debt 2 to collateral ratio, `interestState.t0Debt2ToCollateral`.\\n     *  @dev    Anytime a borrower's debt or collateral changes, the `interestState.t0Debt2ToCollateral` must be updated.\\n     *  @dev    === Write state ===\\n     *  @dev    update `interestState.t0Debt2ToCollateral` accumulator\\n     *  @param debtPreAction_  Borrower's debt before the action\\n     *  @param debtPostAction_ Borrower's debt after the action\\n     *  @param colPreAction_   Borrower's collateral before the action\\n     *  @param colPostAction_  Borrower's collateral after the action\\n     */\\n    function _updateT0Debt2ToCollateral(\\n        uint256 debtPreAction_,\\n        uint256 debtPostAction_,\\n        uint256 colPreAction_,\\n        uint256 colPostAction_\\n    ) internal {\\n        uint256 debt2ColAccumPreAction  = colPreAction_  != 0 ? debtPreAction_  ** 2 / colPreAction_  : 0;\\n        uint256 debt2ColAccumPostAction = colPostAction_ != 0 ? debtPostAction_ ** 2 / colPostAction_ : 0;\\n\\n        if (debt2ColAccumPreAction != 0 || debt2ColAccumPostAction != 0) {\\n            uint256 curT0Debt2ToCollateral = interestState.t0Debt2ToCollateral;\\n            curT0Debt2ToCollateral += debt2ColAccumPostAction;\\n            curT0Debt2ToCollateral -= debt2ColAccumPreAction;\\n\\n            interestState.t0Debt2ToCollateral = curT0Debt2ToCollateral;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Update interest rate and inflator of the pool.\\n     *  @dev    external libraries call: `PoolCommons.updateInterestState`\\n     *  @dev    === Write state ===\\n     *  @dev    - `PoolCommons.updateInterestState`\\n     *  @dev      `EMA`s accumulators\\n     *  @dev      interest rate accumulator and `interestRateUpdate` state\\n     *  @dev      pool inflator and `inflatorUpdate` state\\n     *  @dev    === Emit events ===\\n     *  @dev    `PoolCommons.updateInterestState`: `UpdateInterestRate`\\n     *  @param  poolState_ Struct containing pool details.\\n     *  @param  lup_       Current `LUP` in pool.\\n     */\\n    function _updateInterestState(\\n        PoolState memory poolState_,\\n        uint256 lup_\\n    ) internal {\\n        try PoolCommons.updateInterestState(interestState, emaState, deposits, poolState_, lup_) {} catch {\\n            emit InterestUpdateFailure();\\n        }\\n\\n        (uint208 newInflator, bool updateTimestamp) = _determineInflatorState(poolState_, inflatorState);\\n        inflatorState.inflator = newInflator;\\n        if (updateTimestamp) inflatorState.inflatorUpdate = uint48(block.timestamp);\\n    }\\n\\n    /**\\n     *  @notice Helper function to transfer amount of quote tokens from sender to pool contract.\\n     *  @param  from_    Sender address.\\n     *  @param  amount_  Amount to transfer from sender (`WAD` precision). Scaled to quote token precision before transfer.\\n     */\\n    function _transferQuoteTokenFrom(address from_, uint256 amount_) internal {\\n        // Transfer amount in favour of the pool\\n        uint256 transferAmount = Maths.ceilDiv(amount_, _getArgUint256(QUOTE_SCALE));\\n        IERC20(_getArgAddress(QUOTE_ADDRESS)).safeTransferFrom(from_, address(this), transferAmount);\\n    }\\n\\n    /**\\n     *  @notice Helper function to transfer amount of quote tokens from pool contract.\\n     *  @param  to_     Receiver address.\\n     *  @param  amount_ Amount to transfer to receiver (`WAD` precision). Scaled to quote token precision before transfer.\\n     */\\n    function _transferQuoteToken(address to_, uint256 amount_) internal {\\n        IERC20(_getArgAddress(QUOTE_ADDRESS)).safeTransfer(to_, amount_ / _getArgUint256(QUOTE_SCALE));\\n    }\\n\\n    /**\\n     *  @notice Returns the quote token amount available to take loans or to be removed from pool.\\n     *          Ensures claimable reserves and auction bonds are not used when taking loans.\\n     */\\n    function _availableQuoteToken() internal view returns (uint256 quoteAvailable_) {\\n        uint256 poolBalance     = _getNormalizedPoolQuoteTokenBalance();\\n        uint256 escrowedAmounts = auctions.totalBondEscrowed + reserveAuction.unclaimed;\\n\\n        if (poolBalance > escrowedAmounts) quoteAvailable_ = poolBalance - escrowedAmounts;\\n    }\\n\\n    /**\\n     *  @notice Returns the pool quote token balance normalized to `WAD` to be used for calculating pool reserves.\\n     */\\n    function _getNormalizedPoolQuoteTokenBalance() internal view returns (uint256) {\\n        return IERC20(_getArgAddress(QUOTE_ADDRESS)).balanceOf(address(this)) * _getArgUint256(QUOTE_SCALE);\\n    }\\n\\n    /*******************************/\\n    /*** External View Functions ***/\\n    /*******************************/\\n\\n    /// @inheritdoc IPoolState\\n    function auctionInfo(\\n        address borrower_\\n    ) external\\n    view override returns (\\n        address kicker_,\\n        uint256 bondFactor_,\\n        uint256 bondSize_,\\n        uint256 kickTime_,\\n        uint256 referencePrice_,\\n        uint256 neutralPrice_,\\n        uint256 debtToCollateral_,\\n        address head_,\\n        address next_,\\n        address prev_\\n    ) {\\n        Liquidation storage liquidation = auctions.liquidations[borrower_];\\n        return (\\n            liquidation.kicker,\\n            liquidation.bondFactor,\\n            liquidation.bondSize,\\n            liquidation.kickTime,\\n            liquidation.referencePrice,\\n            liquidation.neutralPrice,\\n            liquidation.debtToCollateral,\\n            auctions.head,\\n            liquidation.next,\\n            liquidation.prev\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function borrowerInfo(\\n        address borrower_\\n    ) external view override returns (uint256, uint256, uint256) {\\n        Borrower storage borrower = loans.borrowers[borrower_];\\n        return (\\n            borrower.t0Debt,\\n            borrower.collateral,\\n            borrower.npTpRatio\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function bucketInfo(\\n        uint256 index_\\n    ) external view override returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint256 scale = Deposits.scale(deposits, index_);\\n        Bucket storage bucket = buckets[index_];\\n        return (\\n            bucket.lps,\\n            bucket.collateral,\\n            bucket.bankruptcyTime,\\n            Maths.wmul(scale, Deposits.unscaledValueAt(deposits, index_)),\\n            scale\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolDerivedState\\n    function bucketExchangeRate(\\n        uint256 index_\\n    ) external view returns (uint256 exchangeRate_) {\\n        Bucket storage bucket = buckets[index_];\\n\\n        exchangeRate_ = Buckets.getExchangeRate(\\n            bucket.collateral,\\n            bucket.lps,\\n            Deposits.valueAt(deposits, index_),\\n            _priceAt(index_)\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function currentBurnEpoch() external view returns (uint256) {\\n        return reserveAuction.latestBurnEventEpoch;\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function burnInfo(uint256 burnEventEpoch_) external view returns (uint256, uint256, uint256) {\\n        BurnEvent storage burnEvent = reserveAuction.burnEvents[burnEventEpoch_];\\n\\n        return (\\n            burnEvent.timestamp,\\n            burnEvent.totalInterest,\\n            burnEvent.totalBurned\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function debtInfo() external view returns (uint256, uint256, uint256, uint256) {\\n        return PoolCommons.debtInfo(poolBalances, inflatorState, interestState);\\n    }\\n\\n    /// @inheritdoc IPoolDerivedState\\n    function depositUpToIndex(uint256 index_) external view override returns (uint256) {\\n        return Deposits.prefixSum(deposits, index_);\\n    }\\n    \\n    /// @inheritdoc IPoolDerivedState\\n    function depositIndex(uint256 debt_) external view override returns (uint256) {\\n        return Deposits.findIndexOfSum(deposits, debt_);\\n    }\\n\\n    /// @inheritdoc IPoolDerivedState\\n    function depositSize() external view override returns (uint256) {\\n        return Deposits.treeSum(deposits);\\n    }\\n\\n    /// @inheritdoc IPoolDerivedState\\n    function depositUtilization() external view override returns (uint256) {\\n        return PoolCommons.utilization(emaState);\\n    }\\n\\n    /// @inheritdoc IPoolDerivedState\\n    function depositScale(uint256 index_) external view override returns (uint256) {\\n        return deposits.scaling[index_];\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function emasInfo() external view override returns (uint256, uint256, uint256, uint256) {\\n        return (\\n            emaState.debtColEma,\\n            emaState.lupt0DebtEma,\\n            emaState.debtEma,\\n            emaState.depositEma\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function inflatorInfo() external view override returns (uint256, uint256) {\\n        return (\\n            inflatorState.inflator,\\n            inflatorState.inflatorUpdate\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function interestRateInfo() external view returns (uint256, uint256) {\\n        return (\\n            interestState.interestRate,\\n            interestState.interestRateUpdate\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function kickerInfo(\\n        address kicker_\\n    ) external view override returns (uint256, uint256) {\\n        Kicker storage kicker = auctions.kickers[kicker_];\\n        return(\\n            kicker.claimable,\\n            kicker.locked\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function lenderInfo(\\n        uint256 index_,\\n        address lender_\\n    ) external view override returns (uint256 lpBalance_, uint256 depositTime_) {\\n        Bucket storage bucket = buckets[index_];\\n        Lender storage lender = bucket.lenders[lender_];\\n\\n        depositTime_ = lender.depositTime;\\n        if (bucket.bankruptcyTime < depositTime_) lpBalance_ = lender.lps;\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function lpAllowance(\\n        uint256 index_,\\n        address spender_,\\n        address owner_\\n    ) external view override returns (uint256 allowance_) {\\n        allowance_ = _lpAllowances[owner_][spender_][index_];\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function loanInfo(\\n        uint256 loanId_\\n    ) external view override returns (address, uint256) {\\n        Loan memory loan = Loans.getByIndex(loans, loanId_);\\n        return (\\n            loan.borrower,\\n            loan.t0DebtToCollateral\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function loansInfo() external view override returns (address, uint256, uint256) {\\n        Loan memory maxLoan = Loans.getMax(loans);\\n        return (\\n            maxLoan.borrower,\\n            maxLoan.t0DebtToCollateral,\\n            Loans.noOfLoans(loans)\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function pledgedCollateral() external view override returns (uint256) {\\n        return poolBalances.pledgedCollateral;\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function reservesInfo() external view override returns (uint256, uint256, uint256, uint256, uint256) {\\n        return (\\n            auctions.totalBondEscrowed,\\n            reserveAuction.unclaimed,\\n            reserveAuction.kicked,\\n            reserveAuction.lastKickedReserves,\\n            reserveAuction.totalInterestEarned\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function totalAuctionsInPool() external view override returns (uint256) {\\n        return auctions.noOfAuctions;\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function totalT0Debt() external view override returns (uint256) {\\n        return poolBalances.t0Debt;\\n    }\\n\\n    /// @inheritdoc IPoolState\\n    function totalT0DebtInAuction() external view override returns (uint256) {\\n        return poolBalances.t0DebtInAuction;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/PoolCommons.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { PRBMathSD59x18 } from \\\"@prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport { PRBMathUD60x18 } from \\\"@prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport { IERC20 }    from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nimport { \\n    DepositsState, \\n    EmaState, \\n    InflatorState,\\n    InterestState, \\n    PoolBalancesState, \\n    PoolState \\n} from '../../interfaces/pool/commons/IPoolState.sol';\\nimport { IERC3156FlashBorrower }                             from '../../interfaces/pool/IERC3156FlashBorrower.sol';\\n\\nimport { \\n    _dwatp,\\n    _htp,\\n    _indexOf,\\n    MAX_FENWICK_INDEX,\\n    MIN_PRICE, MAX_PRICE\\n} from '../helpers/PoolHelper.sol';\\n\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Buckets }  from '../internal/Buckets.sol';\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n/**\\n    @title  PoolCommons library\\n    @notice External library containing logic for common pool functionality:\\n            - interest rate accrual and interest rate params update\\n            - pool utilization\\n */\\nlibrary PoolCommons {\\n    using SafeERC20 for IERC20;\\n\\n\\n    /*****************/\\n    /*** Constants ***/\\n    /*****************/\\n\\n    uint256 internal constant CUBIC_ROOT_1000000 = 100 * 1e18;\\n    uint256 internal constant ONE_THIRD          = 0.333333333333333334 * 1e18;\\n\\n    uint256 internal constant INCREASE_COEFFICIENT = 1.1 * 1e18;\\n    uint256 internal constant DECREASE_COEFFICIENT = 0.9 * 1e18;\\n    int256  internal constant PERCENT_102          = 1.02 * 1e18;\\n    int256  internal constant NEG_H_MAU_HOURS      = -0.057762265046662105 * 1e18; // -ln(2)/12\\n    int256  internal constant NEG_H_TU_HOURS       = -0.008251752149523158 * 1e18; // -ln(2)/84\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event Flashloan(address indexed receiver, address indexed token, uint256 amount);\\n    event ResetInterestRate(uint256 oldRate, uint256 newRate);\\n    event UpdateInterestRate(uint256 oldRate, uint256 newRate);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error FlashloanCallbackFailed();\\n    error FlashloanIncorrectBalance();\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `updateInterestState` function local vars.\\n    struct UpdateInterestLocalVars {\\n        uint256 debtEma;\\n        uint256 depositEma;\\n        uint256 debtColEma;\\n        uint256 lupt0DebtEma;\\n        uint256 t0Debt2ToCollateral;\\n        uint256 newMeaningfulDeposit;\\n        uint256 newDebt;\\n        uint256 newDebtCol;\\n        uint256 newLupt0Debt;\\n        uint256 lastEmaUpdate;\\n        int256 elapsed;\\n        int256 weightMau;\\n        int256 weightTu;\\n        uint256 newInterestRate;\\n        uint256 nonAuctionedT0Debt;\\n    }\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Calculates EMAs, caches values required for calculating interest rate, and saves new values in storage.\\n     *  @notice Calculates new pool interest rate (Never called more than once every 12 hours) and saves new values in storage.\\n     *  @dev    === Write state ===\\n     *  @dev    `EMA`s state\\n     *  @dev    interest rate accumulator and `interestRateUpdate` state\\n     *  @dev    === Emit events ===\\n     *  @dev    - `UpdateInterestRate` / `ResetInterestRate`\\n     */\\n    function updateInterestState(\\n        InterestState storage interestParams_,\\n        EmaState      storage emaParams_,\\n        DepositsState storage deposits_,\\n        PoolState memory poolState_,\\n        uint256 lup_\\n    ) external {\\n        UpdateInterestLocalVars memory vars;\\n        // load existing EMA values\\n        vars.debtEma       = emaParams_.debtEma;\\n        vars.depositEma    = emaParams_.depositEma;\\n        vars.debtColEma    = emaParams_.debtColEma;\\n        vars.lupt0DebtEma  = emaParams_.lupt0DebtEma;\\n        vars.lastEmaUpdate = emaParams_.emaUpdate;\\n\\n        vars.t0Debt2ToCollateral = interestParams_.t0Debt2ToCollateral;\\n\\n        // calculate new interest params\\n        vars.nonAuctionedT0Debt = poolState_.t0Debt - poolState_.t0DebtInAuction;\\n        vars.newDebt = Maths.wmul(vars.nonAuctionedT0Debt, poolState_.inflator);\\n        // new meaningful deposit cannot be less than pool's debt\\n        vars.newMeaningfulDeposit = Maths.max(\\n            _meaningfulDeposit(\\n                deposits_,\\n                poolState_.t0DebtInAuction,\\n                vars.nonAuctionedT0Debt,\\n                poolState_.inflator,\\n                vars.t0Debt2ToCollateral\\n            ),\\n            vars.newDebt\\n        );\\n        vars.newDebtCol   = Maths.wmul(poolState_.inflator, vars.t0Debt2ToCollateral);\\n        vars.newLupt0Debt = Maths.wmul(lup_, vars.nonAuctionedT0Debt);\\n\\n        // update EMAs only once per block\\n        if (vars.lastEmaUpdate != block.timestamp) {\\n\\n            // first time EMAs are updated, initialize EMAs\\n            if (vars.lastEmaUpdate == 0) {\\n                vars.debtEma      = vars.newDebt;\\n                vars.depositEma   = vars.newMeaningfulDeposit;\\n                vars.debtColEma   = vars.newDebtCol;\\n                vars.lupt0DebtEma = vars.newLupt0Debt;\\n            } else {\\n                vars.elapsed   = int256(Maths.wdiv(block.timestamp - vars.lastEmaUpdate, 1 hours));\\n                vars.weightMau = PRBMathSD59x18.exp(PRBMathSD59x18.mul(NEG_H_MAU_HOURS, vars.elapsed));\\n                vars.weightTu  = PRBMathSD59x18.exp(PRBMathSD59x18.mul(NEG_H_TU_HOURS,  vars.elapsed));\\n\\n                // calculate the t0 debt EMA, used for MAU\\n                vars.debtEma = uint256(\\n                    PRBMathSD59x18.mul(vars.weightMau, int256(vars.debtEma)) +\\n                    PRBMathSD59x18.mul(1e18 - vars.weightMau, int256(interestParams_.debt))\\n                );\\n\\n                // update the meaningful deposit EMA, used for MAU\\n                vars.depositEma = uint256(\\n                    PRBMathSD59x18.mul(vars.weightMau, int256(vars.depositEma)) +\\n                    PRBMathSD59x18.mul(1e18 - vars.weightMau, int256(interestParams_.meaningfulDeposit))\\n                );\\n\\n                // calculate the debt squared to collateral EMA, used for TU\\n                vars.debtColEma = uint256(\\n                    PRBMathSD59x18.mul(vars.weightTu, int256(vars.debtColEma)) +\\n                    PRBMathSD59x18.mul(1e18 - vars.weightTu, int256(interestParams_.debtCol))\\n                );\\n\\n                // calculate the EMA of LUP * t0 debt\\n                vars.lupt0DebtEma = uint256(\\n                    PRBMathSD59x18.mul(vars.weightTu, int256(vars.lupt0DebtEma)) +\\n                    PRBMathSD59x18.mul(1e18 - vars.weightTu, int256(interestParams_.lupt0Debt))\\n                );\\n            }\\n\\n            // save EMAs in storage\\n            emaParams_.debtEma      = vars.debtEma;\\n            emaParams_.depositEma   = vars.depositEma;\\n            emaParams_.debtColEma   = vars.debtColEma;\\n            emaParams_.lupt0DebtEma = vars.lupt0DebtEma;\\n\\n            // save last EMA update time\\n            emaParams_.emaUpdate = block.timestamp;\\n        }\\n\\n        // reset interest rate if pool rate > 10% and debtEma < 5% of depositEma\\n        if (\\n            poolState_.rate > 0.1 * 1e18\\n            &&\\n            vars.debtEma < Maths.wmul(vars.depositEma, 0.05 * 1e18)\\n        ) {\\n            interestParams_.interestRate       = uint208(0.1 * 1e18);\\n            interestParams_.interestRateUpdate = uint48(block.timestamp);\\n\\n            emit ResetInterestRate(\\n                poolState_.rate,\\n                0.1 * 1e18\\n            );\\n        }\\n        // otherwise calculate and update interest rate if it has been more than 12 hours since the last update\\n        else if (block.timestamp - interestParams_.interestRateUpdate > 12 hours) {\\n            vars.newInterestRate = _calculateInterestRate(\\n                poolState_,\\n                vars.debtEma,\\n                vars.depositEma,\\n                vars.debtColEma,\\n                vars.lupt0DebtEma\\n            );\\n\\n            if (poolState_.rate != vars.newInterestRate) {\\n                interestParams_.interestRate       = uint208(vars.newInterestRate);\\n                interestParams_.interestRateUpdate = uint48(block.timestamp);\\n\\n                emit UpdateInterestRate(\\n                    poolState_.rate,\\n                    vars.newInterestRate\\n                );\\n            }\\n        }\\n\\n        // save new interest rate params to storage\\n        interestParams_.debt              = vars.newDebt;\\n        interestParams_.meaningfulDeposit = vars.newMeaningfulDeposit;\\n        interestParams_.debtCol           = vars.newDebtCol;\\n        interestParams_.lupt0Debt         = vars.newLupt0Debt;\\n    }\\n\\n    /**\\n     *  @notice Calculates new pool interest and scale the fenwick tree to update amount of debt owed to lenders (saved in storage).\\n     *  @dev    === Write state ===\\n     *  @dev    - `Deposits.mult` (scale `Fenwick` tree with new interest accrued):\\n     *  @dev      update `scaling` array state\\n     *  @param  emaParams_             Struct for pool `EMA`s state.\\n     *  @param  deposits_              Struct for pool deposits state.\\n     *  @param  poolState_             Current state of the pool.\\n     *  @param  maxT0DebtToCollateral_ Max t0 debt to collateral in Pool.\\n     *  @param  elapsed_               Time elapsed since last inflator update.\\n     *  @return newInflator_           The new value of pool inflator.\\n     *  @return newInterest_           The new interest accrued.\\n     */\\n    function accrueInterest(\\n        EmaState      storage emaParams_,\\n        DepositsState storage deposits_,\\n        PoolState calldata poolState_,\\n        uint256 maxT0DebtToCollateral_,\\n        uint256 elapsed_\\n    ) external returns (uint256 newInflator_, uint256 newInterest_) {\\n        // Scale the borrower inflator to update amount of interest owed by borrowers\\n        uint256 pendingFactor = PRBMathUD60x18.exp((poolState_.rate * elapsed_) / 365 days);\\n\\n        // calculate the highest threshold price\\n        newInflator_ = Maths.wmul(poolState_.inflator, pendingFactor);\\n        uint256 htp  = _htp(maxT0DebtToCollateral_, poolState_.inflator);\\n\\n        uint256 accrualIndex;\\n        if (htp > MAX_PRICE)      accrualIndex = 1;                 // if HTP is over the highest price bucket then no buckets earn interest\\n        else if (htp < MIN_PRICE) accrualIndex = MAX_FENWICK_INDEX; // if HTP is under the lowest price bucket then all buckets earn interest\\n        else                      accrualIndex = _indexOf(htp);     // else HTP bucket earn interest\\n\\n        uint256 lupIndex = Deposits.findIndexOfSum(deposits_, poolState_.debt);\\n        // accrual price is less of lup and htp, and prices decrease as index increases\\n        if (lupIndex > accrualIndex) accrualIndex = lupIndex;\\n\\n        uint256 interestEarningDeposit = Deposits.prefixSum(deposits_, accrualIndex);\\n\\n        if (interestEarningDeposit != 0) {\\n            newInterest_ = Maths.wmul(\\n                _lenderInterestMargin(_utilization(emaParams_.debtEma, emaParams_.depositEma)),\\n                Maths.wmul(pendingFactor - Maths.WAD, poolState_.debt)\\n            );\\n\\n            // lender factor computation, capped at 10x the interest factor for borrowers\\n            uint256 lenderFactor = Maths.min(\\n                Maths.floorWdiv(newInterest_, interestEarningDeposit),\\n                Maths.wmul(pendingFactor - Maths.WAD, Maths.wad(10))\\n            ) + Maths.WAD;\\n\\n            // Scale the fenwick tree to update amount of debt owed to lenders\\n            Deposits.mult(deposits_, accrualIndex, lenderFactor);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Executes a flashloan from current pool.\\n     *  @dev    === Reverts on ===\\n     *  @dev    - `FlashloanCallbackFailed()` if receiver is not an `ERC3156FlashBorrower`\\n     *  @dev    - `FlashloanIncorrectBalance()` if pool balance after flashloan is different than initial balance\\n     *  @param  receiver_ Address of the contract which implements the appropriate interface to receive tokens.\\n     *  @param  token_    Address of the `ERC20` token caller wants to borrow.\\n     *  @param  amount_   The denormalized amount (dependent upon token precision) of tokens to borrow.\\n     *  @param  data_     User-defined calldata passed to the receiver.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver_,\\n        address token_, \\n        uint256 amount_,\\n        bytes calldata data_\\n    ) external {\\n        IERC20 tokenContract = IERC20(token_);\\n\\n        uint256 initialBalance = tokenContract.balanceOf(address(this));\\n\\n        tokenContract.safeTransfer(\\n            address(receiver_),\\n            amount_\\n        );\\n\\n        if (receiver_.onFlashLoan(msg.sender, token_, amount_, 0, data_) != \\n            keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")) revert FlashloanCallbackFailed();\\n\\n        tokenContract.safeTransferFrom(\\n            address(receiver_),\\n            address(this),\\n            amount_\\n        );\\n\\n        if (tokenContract.balanceOf(address(this)) != initialBalance) revert FlashloanIncorrectBalance();\\n\\n        emit Flashloan(address(receiver_), token_, amount_);\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Calculates new pool interest rate.\\n     */\\n    function _calculateInterestRate(\\n        PoolState memory poolState_,\\n        uint256 debtEma_,\\n        uint256 depositEma_,\\n        uint256 debtColEma_,\\n        uint256 lupt0DebtEma_\\n    ) internal pure returns (uint256 newInterestRate_)  {\\n        // meaningful actual utilization\\n        int256 mau;\\n        // meaningful actual utilization * 1.02\\n        int256 mau102;\\n\\n        if (poolState_.debt != 0) {\\n            // calculate meaningful actual utilization for interest rate update\\n            mau    = int256(_utilization(debtEma_, depositEma_));\\n            mau102 = (mau * PERCENT_102) / 1e18;\\n        }\\n\\n        // calculate target utilization\\n        int256 tu = (lupt0DebtEma_ != 0) ? \\n            int256(Maths.wdiv(debtColEma_, lupt0DebtEma_)) : int(Maths.WAD);\\n\\n        newInterestRate_ = poolState_.rate;\\n\\n        // raise rates if 4*(tu-1.02*mau) < (tu+1.02*mau-1)^2-1\\n        if (4 * (tu - mau102) < (((tu + mau102 - 1e18) / 1e9) ** 2) - 1e18) {\\n            newInterestRate_ = Maths.wmul(poolState_.rate, INCREASE_COEFFICIENT);\\n        // decrease rates if 4*(tu-mau) > 1-(tu+mau-1)^2\\n        } else if (4 * (tu - mau) > 1e18 - ((tu + mau - 1e18) / 1e9) ** 2) {\\n            newInterestRate_ = Maths.wmul(poolState_.rate, DECREASE_COEFFICIENT);\\n        }\\n\\n        // bound rates between 10 bps and 400%\\n        newInterestRate_ = Maths.min(4 * 1e18, Maths.max(0.001 * 1e18, newInterestRate_));\\n    }\\n\\n    /**\\n     *  @notice Calculates pool meaningful actual utilization.\\n     *  @param  debtEma_     `EMA` of pool debt.\\n     *  @param  depositEma_  `EMA` of meaningful pool deposit.\\n     *  @return utilization_ Pool meaningful actual utilization value.\\n     */\\n    function _utilization(\\n        uint256 debtEma_,\\n        uint256 depositEma_\\n    ) internal pure returns (uint256 utilization_) {\\n        if (depositEma_ != 0) utilization_ = Maths.wdiv(debtEma_, depositEma_);\\n    }\\n\\n    /**\\n     *  @notice Calculates lender interest margin.\\n     *  @param  mau_ Meaningful actual utilization.\\n     *  @return The lender interest margin value.\\n     */\\n    function _lenderInterestMargin(\\n        uint256 mau_\\n    ) internal pure returns (uint256) {\\n        // Net Interest Margin = ((1 - MAU1)^(1/3) * 0.15)\\n        // Where MAU1 is MAU capped at 100% (min(MAU,1))\\n        // Lender Interest Margin = 1 - Net Interest Margin\\n\\n        // PRBMath library forbids raising a number < 1e18 to a power.  Using the product and quotient rules of \\n        // exponents, rewrite the equation with a coefficient s which provides sufficient precision:\\n        // Net Interest Margin = ((1 - MAU1) * s)^(1/3) / s^(1/3) * 0.15\\n\\n        uint256 base = 1_000_000 * 1e18 - Maths.min(mau_, 1e18) * 1_000_000;\\n        // If unutilized deposit is infinitessimal, lenders get 100% of interest.\\n        if (base < 1e18) {\\n            return 1e18;\\n        } else {\\n            // cubic root of the percentage of meaningful unutilized deposit\\n            uint256 crpud = PRBMathUD60x18.pow(base, ONE_THIRD);\\n            // finish calculating Net Interest Margin, and then convert to Lender Interest Margin\\n            return 1e18 - Maths.wdiv(Maths.wmul(crpud, 0.15 * 1e18), CUBIC_ROOT_1000000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates pool's meaningful deposit.\\n     *  @param  deposits_            Struct for pool deposits state.\\n     *  @param  t0DebtInAuction_     Value of pool's t0 debt currently in auction.\\n     *  @param  nonAuctionedT0Debt_  Value of pool's t0 debt that is not in auction.\\n     *  @param  inflator_            Pool's current inflator.\\n     *  @param  t0Debt2ToCollateral_ `t0Debt2ToCollateral` ratio.\\n     *  @return meaningfulDeposit_   Pool's meaningful deposit.\\n     */\\n    function _meaningfulDeposit(\\n        DepositsState storage deposits_,\\n        uint256 t0DebtInAuction_,\\n        uint256 nonAuctionedT0Debt_,\\n        uint256 inflator_,\\n        uint256 t0Debt2ToCollateral_\\n    ) internal view returns (uint256 meaningfulDeposit_) {\\n        uint256 dwatp = _dwatp(nonAuctionedT0Debt_, inflator_, t0Debt2ToCollateral_);\\n        if (dwatp == 0) {\\n            meaningfulDeposit_ = Deposits.treeSum(deposits_);\\n        } else {\\n            if      (dwatp >= MAX_PRICE) meaningfulDeposit_ = 0;\\n            else if (dwatp >= MIN_PRICE) meaningfulDeposit_ = Deposits.prefixSum(deposits_, _indexOf(dwatp));\\n            else                         meaningfulDeposit_ = Deposits.treeSum(deposits_);\\n        }\\n        meaningfulDeposit_ -= Maths.min(\\n            meaningfulDeposit_,\\n            Maths.wmul(t0DebtInAuction_, inflator_)\\n        );\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Calculates pool related debt values.\\n     *  @param poolBalances_  Pool debt\\n     *  @param inflatorState_ Interest inflator and last update time\\n     *  @param interestState_ Interest rate and t0Debt2ToCollateral accumulator\\n     *  @return Current amount of debt owed by borrowers in pool.\\n     *  @return Debt owed by borrowers based on last inflator snapshot.\\n     *  @return Total amount of debt in auction.\\n     *  @return t0debt accross all borrowers divided by their collateral, used in determining a collateralization weighted debt.  \\n     */\\n    function debtInfo(\\n        PoolBalancesState memory poolBalances_,\\n        InflatorState     memory inflatorState_,\\n        InterestState     memory interestState_\\n    ) external view returns (uint256, uint256, uint256, uint256) {\\n        uint256 t0Debt   = poolBalances_.t0Debt;\\n        uint256 inflator = inflatorState_.inflator;\\n\\n        return (\\n            Maths.ceilWmul(\\n                t0Debt,\\n                pendingInflator(inflator, inflatorState_.inflatorUpdate, interestState_.interestRate)\\n            ),\\n            Maths.ceilWmul(t0Debt, inflator),\\n            Maths.ceilWmul(poolBalances_.t0DebtInAuction, inflator),\\n            interestState_.t0Debt2ToCollateral\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates pool interest factor for a given interest rate and time elapsed since last inflator update.\\n     *  @param  interestRate_   Current pool interest rate.\\n     *  @param  elapsed_        Time elapsed since last inflator update.\\n     *  @return The value of pool interest factor.\\n     */\\n    function pendingInterestFactor(\\n        uint256 interestRate_,\\n        uint256 elapsed_\\n    ) external pure returns (uint256) {\\n        return PRBMathUD60x18.exp((interestRate_ * elapsed_) / 365 days);\\n    }\\n\\n    /**\\n     *  @notice Calculates pool pending inflator given the current inflator, time of last update and current interest rate.\\n     *  @param  inflator_      Current pool inflator.\\n     *  @param  inflatorUpdate Timestamp when inflator was updated.\\n     *  @param  interestRate_  The interest rate of the pool.\\n     *  @return The pending value of pool inflator.\\n     */\\n    function pendingInflator(\\n        uint256 inflator_,\\n        uint256 inflatorUpdate,\\n        uint256 interestRate_\\n    ) public view returns (uint256) {\\n        return Maths.wmul(\\n            inflator_,\\n            PRBMathUD60x18.exp((interestRate_ * (block.timestamp - inflatorUpdate)) / 365 days)\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates lender interest margin for a given meaningful actual utilization.\\n     *  @dev Wrapper of the internal function.\\n     */\\n    function lenderInterestMargin(\\n        uint256 mau_\\n    ) external pure returns (uint256) {\\n        return _lenderInterestMargin(mau_);\\n    }\\n\\n    /**\\n     *  @notice Calculates pool meaningful actual utilization.\\n     *  @dev Wrapper of the internal function.\\n     */\\n    function utilization(\\n        EmaState storage emaParams_\\n    ) external view returns (uint256 utilization_) {\\n        return _utilization(emaParams_.debtEma, emaParams_.depositEma);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/prb-math/contracts/PRBMathSD59x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/internal/Buckets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport { Bucket, Lender } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { Maths } from './Maths.sol';\\n\\n/**\\n    @title  Buckets library\\n    @notice Internal library containing common logic for buckets management.\\n */\\nlibrary Buckets {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolError` for descriptions\\n    error BucketBankruptcyBlock();\\n\\n    /***********************************/\\n    /*** Bucket Management Functions ***/\\n    /***********************************/\\n\\n    /**\\n     *  @notice Add collateral to a bucket and updates `LP` for bucket and lender with the amount coresponding to collateral amount added.\\n     *  @dev    Increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    - `addLenderLP`:\\n     *  @dev    increment `lender.lps` accumulator and `lender.depositTime` state\\n     *  @param  lender_                Address of the lender.\\n     *  @param  deposit_               Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  collateralAmountToAdd_ Additional collateral amount to add to bucket.\\n     *  @param  bucketPrice_           Bucket price.\\n     *  @return addedLP_               Amount of bucket `LP` for the collateral amount added.\\n     */\\n    function addCollateral(\\n        Bucket storage bucket_,\\n        address lender_,\\n        uint256 deposit_,\\n        uint256 collateralAmountToAdd_,\\n        uint256 bucketPrice_\\n    ) internal returns (uint256 addedLP_) {\\n        // cannot deposit in the same block when bucket becomes insolvent\\n        uint256 bankruptcyTime = bucket_.bankruptcyTime;\\n        if (bankruptcyTime == block.timestamp) revert BucketBankruptcyBlock();\\n\\n        // calculate amount of LP to be added for the amount of collateral added to bucket\\n        addedLP_ = collateralToLP(\\n            bucket_.collateral,\\n            bucket_.lps,\\n            deposit_,\\n            collateralAmountToAdd_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n        // update bucket LP balance and collateral\\n\\n        // update bucket collateral\\n        bucket_.collateral += collateralAmountToAdd_;\\n        // update bucket and lender LP balance and deposit timestamp\\n        bucket_.lps += addedLP_;\\n\\n        addLenderLP(bucket_, bankruptcyTime, lender_, addedLP_);\\n    }\\n\\n    /**\\n     *  @notice Add amount of `LP` for a given lender in a given bucket.\\n     *  @dev    Increments lender lps accumulator and updates the deposit time.\\n     *  @param  bucket_         Bucket to record lender `LP`.\\n     *  @param  bankruptcyTime_ Time when bucket become insolvent.\\n     *  @param  lender_         Lender address to add `LP` for in the given bucket.\\n     *  @param  lpAmount_       Amount of `LP` to be recorded for the given lender.\\n     */\\n    function addLenderLP(\\n        Bucket storage bucket_,\\n        uint256 bankruptcyTime_,\\n        address lender_,\\n        uint256 lpAmount_\\n    ) internal {\\n        if (lpAmount_ != 0) {\\n            Lender storage lender = bucket_.lenders[lender_];\\n\\n            if (bankruptcyTime_ >= lender.depositTime) lender.lps = lpAmount_;\\n            else lender.lps += lpAmount_;\\n\\n            lender.depositTime = block.timestamp;\\n        }\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /****************************/\\n    /*** Assets to LP helpers ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the amount of bucket `LP` calculated for the given amount of collateral.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  collateral_       The amount of collateral to calculate bucket LP for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @param  rounding_         The direction of rounding when calculating LP (down when adding, up when removing collateral from pool).\\n     *  @return Amount of `LP` calculated for the amount of collateral.\\n     */\\n    function collateralToLP(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 collateral_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return Maths.wmul(collateral_, bucketPrice_);\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return Maths.wmul(collateral_, bucketPrice_);\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            bucketLP_,\\n            collateral_ * bucketPrice_,\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of `LP` calculated for the given amount of quote tokens.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  quoteTokens_      The amount of quote tokens to calculate `LP` amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @param  rounding_         The direction of rounding when calculating LP (down when adding, up when removing quote tokens from pool).\\n     *  @return The amount of `LP` coresponding to the given quote tokens in current bucket.\\n     */\\n    function quoteTokensToLP(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 quoteTokens_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return quoteTokens_;\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return quoteTokens_;\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            bucketLP_,\\n            quoteTokens_ * Maths.WAD,\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /****************************/\\n    /*** LP to Assets helpers ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the amount of collateral calculated for the given amount of lp\\n     *  @dev    The value returned is not capped at collateral amount available in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lp_               The amount of LP to calculate collateral amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return The amount of collateral coresponding to the given `LP` in current bucket.\\n     */\\n    function lpToCollateral(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lp_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return Maths.wdiv(lp_, bucketPrice_);\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return Maths.wdiv(lp_, bucketPrice_);\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            lp_,\\n            bucketLP_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of quote token (in value) calculated for the given amount of `LP`.\\n     *  @dev    The value returned is not capped at available bucket deposit.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lp_               The amount of LP to calculate quote tokens amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return The amount coresponding to the given quote tokens in current bucket.\\n     */\\n    function lpToQuoteTokens(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lp_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return lp_;\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return lp_;\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            lp_,\\n            bucketLP_ * Maths.WAD,\\n            rounding_\\n        );\\n    }\\n\\n    /****************************/\\n    /*** Exchange Rate helper ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the exchange rate for a given bucket (conversion of 1 lp to quote token).\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  bucketDeposit_    The amount of quote tokens deposited in the given bucket.\\n     *  @param  bucketPrice_      Bucket's price.\\n     */\\n    function getExchangeRate(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 bucketDeposit_,\\n        uint256 bucketPrice_\\n    ) internal pure returns (uint256) {\\n        return lpToQuoteTokens(\\n            bucketCollateral_,\\n            bucketLP_,\\n            bucketDeposit_,\\n            Maths.WAD,\\n            bucketPrice_,\\n            Math.Rounding.Up\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/clones-with-immutable-args/src/Clone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD\\npragma solidity ^0.8.4;\\n\\n/// @title Clone\\n/// @author zefram.eth\\n/// @notice Provides helper functions for reading immutable args from calldata\\ncontract Clone {\\n    /// @notice Reads an immutable arg with type address\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgAddress(uint256 argOffset)\\n        internal\\n        pure\\n        returns (address arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0x60, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint256\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint256(uint256 argOffset)\\n        internal\\n        pure\\n        returns (uint256 arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := calldataload(add(offset, argOffset))\\n        }\\n    }\\n\\n    /// @notice Reads a uint256 array stored in the immutable args.\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @param arrLen Number of elements in the array\\n    /// @return arr The array\\n    function _getArgUint256Array(uint256 argOffset, uint64 arrLen)\\n        internal\\n        pure\\n      returns (uint256[] memory arr)\\n    {\\n      uint256 offset = _getImmutableArgsOffset();\\n      uint256 el;\\n      arr = new uint256[](arrLen);\\n      for (uint64 i = 0; i < arrLen; i++) {\\n        assembly {\\n          // solhint-disable-next-line no-inline-assembly\\n          el := calldataload(add(add(offset, argOffset), mul(i, 32)))\\n        }\\n        arr[i] = el;\\n      }\\n      return arr;\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint64\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint64(uint256 argOffset)\\n        internal\\n        pure\\n        returns (uint64 arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0xc0, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint8\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint8(uint256 argOffset) internal pure returns (uint8 arg) {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0xf8, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @return offset The offset of the packed immutable args in calldata\\n    function _getImmutableArgsOffset() internal pure returns (uint256 offset) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            offset := sub(\\n                calldatasize(),\\n                add(shr(240, calldataload(sub(calldatasize(), 2))), 2)\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/LPActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Bucket, Lender } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { MAX_FENWICK_INDEX } from '../helpers/PoolHelper.sol';\\n\\nimport { Maths } from '../internal/Maths.sol';\\n\\n/**\\n    @title  LPActions library\\n    @notice External library containing logic for `LP` owners to:\\n            - `increase`/`decrease`/`revoke` `LP` allowance; `approve`/`revoke` `LP` transferors; `transfer` `LP`\\n */\\nlibrary LPActions {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event ApproveLPTransferors(address indexed lender, address[] transferors);\\n    event RevokeLPTransferors(address indexed lender, address[] transferors);\\n    event IncreaseLPAllowance(address indexed owner, address indexed spender, uint256[] indexes, uint256[] amounts);\\n    event DecreaseLPAllowance(address indexed owner, address indexed spender, uint256[] indexes, uint256[] amounts);\\n    event RevokeLPAllowance(address indexed owner, address indexed spender, uint256[] indexes);\\n    event TransferLP(address owner, address newOwner, uint256[] indexes, uint256 lp);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error BucketBankruptcyBlock();\\n    error InvalidAllowancesInput();\\n    error InvalidIndex();\\n    error NoAllowance();\\n    error TransferorNotApproved();\\n    error TransferToSameOwner();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    increment `LP` allowances\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid indexes and amounts input `InvalidAllowancesInput()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `IncreaseLPAllowance`\\n     */\\n    function increaseLPAllowance(\\n        mapping(uint256 => uint256) storage allowances_,\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external {\\n        uint256 indexesLength = indexes_.length;\\n\\n        if (indexesLength != amounts_.length) revert InvalidAllowancesInput();\\n\\n        uint256 index;\\n        for (uint256 i = 0; i < indexesLength; ) {\\n            index = indexes_[i];\\n\\n            allowances_[index] += amounts_[i];\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit IncreaseLPAllowance(\\n            msg.sender,\\n            spender_,\\n            indexes_,\\n            amounts_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    decrement `LP` allowances\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid indexes and amounts input `InvalidAllowancesInput()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `DecreaseLPAllowance`\\n     */\\n    function decreaseLPAllowance(\\n        mapping(uint256 => uint256) storage allowances_,\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external {\\n        uint256 indexesLength = indexes_.length;\\n\\n        if (indexesLength != amounts_.length) revert InvalidAllowancesInput();\\n\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < indexesLength; ) {\\n            index = indexes_[i];\\n\\n            allowances_[index] -= amounts_[i];\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit DecreaseLPAllowance(\\n            msg.sender,\\n            spender_,\\n            indexes_,\\n            amounts_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    decrement `LP` allowances\\n     *  @dev    === Emit events ===\\n     *  @dev    - `RevokeLPAllowance`\\n     */\\n    function revokeLPAllowance(\\n        mapping(uint256 => uint256) storage allowances_,\\n        address spender_,\\n        uint256[] calldata indexes_\\n    ) external {\\n        uint256 indexesLength = indexes_.length;\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < indexesLength; ) {\\n            index = indexes_[i];\\n\\n            allowances_[index] = 0;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit RevokeLPAllowance(\\n            msg.sender,\\n            spender_,\\n            indexes_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    `approvedTransferors` mapping\\n     *  @dev    === Emit events ===\\n     *  @dev    - `ApproveLPTransferors`\\n     */\\n    function approveLPTransferors(\\n        mapping(address => bool) storage allowances_,\\n        address[] calldata transferors_\\n    ) external  {\\n        uint256 transferorsLength = transferors_.length;\\n        for (uint256 i = 0; i < transferorsLength; ) {\\n            allowances_[transferors_[i]] = true;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit ApproveLPTransferors(\\n            msg.sender,\\n            transferors_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    `approvedTransferors` mapping\\n     *  @dev    === Emit events ===\\n     *  @dev    - `RevokeLPTransferors`\\n     */\\n    function revokeLPTransferors(\\n        mapping(address => bool) storage allowances_,\\n        address[] calldata transferors_\\n    ) external  {\\n        uint256 transferorsLength = transferors_.length;\\n        for (uint256 i = 0; i < transferorsLength; ) {\\n            delete allowances_[transferors_[i]];\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit RevokeLPTransferors(\\n            msg.sender,\\n            transferors_\\n        );\\n    }\\n\\n    /**\\n     *  @notice See `IPoolLPActions` for descriptions\\n     *  @dev    === Write state ===\\n     *  @dev    delete allowance mapping\\n     *  @dev    increment new `lender.lps` accumulator and `lender.depositTime` state\\n     *  @dev    delete old lender from `bucket -> lender` mapping\\n     *  @dev    === Reverts on ===\\n     *  @dev    invalid index `InvalidIndex()`\\n     *  @dev    no allowance `NoAllowance()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `TransferLP`\\n     */\\n    function transferLP(\\n        mapping(uint256 => Bucket) storage buckets_,\\n        mapping(address => mapping(address => mapping(uint256 => uint256))) storage allowances_,\\n        mapping(address => mapping(address => bool)) storage approvedTransferors_,\\n        address ownerAddress_,\\n        address newOwnerAddress_,\\n        uint256[] calldata indexes_\\n    ) external {\\n        // revert if msg.sender is not the new owner and is not approved as a transferor by the new owner\\n        if (newOwnerAddress_ != msg.sender && !approvedTransferors_[newOwnerAddress_][msg.sender]) revert TransferorNotApproved();\\n\\n        // revert if new owner address is the same as old owner address\\n        if (ownerAddress_ == newOwnerAddress_) revert TransferToSameOwner();\\n\\n        uint256 indexesLength = indexes_.length;\\n        uint256 index;\\n        uint256 lpTransferred;\\n\\n        for (uint256 i = 0; i < indexesLength; ) {\\n            index = indexes_[i];\\n\\n            // revert if invalid index\\n            if (index > MAX_FENWICK_INDEX) revert InvalidIndex();\\n\\n            Bucket storage bucket = buckets_[index];\\n            Lender storage owner  = bucket.lenders[ownerAddress_];\\n\\n            uint256 bankruptcyTime   = bucket.bankruptcyTime;\\n            uint256 ownerDepositTime = owner.depositTime;\\n            uint256 ownerLpBalance   = bankruptcyTime < ownerDepositTime ? owner.lps : 0;\\n\\n            uint256 allowedAmount = allowances_[ownerAddress_][newOwnerAddress_][index];\\n            if (allowedAmount == 0) revert NoAllowance();\\n\\n            // transfer allowed amount or entire LP balance\\n            allowedAmount = Maths.min(allowedAmount, ownerLpBalance);\\n\\n            // move owner LP (if any) to the new owner\\n            if (allowedAmount != 0) {\\n                Lender storage newOwner = bucket.lenders[newOwnerAddress_];\\n\\n                uint256 newOwnerDepositTime = newOwner.depositTime;\\n\\n                if (newOwnerDepositTime > bankruptcyTime) {\\n                    // deposit happened in a healthy bucket, add amount of LP to new owner\\n                    newOwner.lps += allowedAmount;\\n                } else {\\n                    // bucket bankruptcy happened after deposit, reset balance and add amount of LP to new owner\\n                    newOwner.lps = allowedAmount;\\n                }\\n\\n                // remove amount of LP from old owner\\n                owner.lps     -= allowedAmount;\\n                // add amount of LP to total LP transferred\\n                lpTransferred += allowedAmount;\\n\\n                // set the deposit time as the max of transferred deposit and current deposit time\\n                newOwner.depositTime = Maths.max(ownerDepositTime, newOwnerDepositTime);\\n            }\\n\\n            // reset allowances of transferred LP\\n            delete allowances_[ownerAddress_][newOwnerAddress_][index];\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit TransferLP(\\n            ownerAddress_,\\n            newOwnerAddress_,\\n            indexes_,\\n            lpTransferred\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/external/KickerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Math }     from '@openzeppelin/contracts/utils/math/Math.sol';\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { PoolType } from '../../interfaces/pool/IPool.sol';\\n\\nimport {\\n    AuctionsState,\\n    Borrower,\\n    Bucket,\\n    DepositsState,\\n    Kicker,\\n    Lender,\\n    Liquidation,\\n    LoansState,\\n    PoolState,\\n    ReserveAuctionState\\n}                             from '../../interfaces/pool/commons/IPoolState.sol';\\nimport {\\n    KickResult,\\n    KickReserveAuctionParams\\n}                             from '../../interfaces/pool/commons/IPoolInternals.sol';\\n\\nimport {\\n    MAX_INFLATED_PRICE,\\n    COLLATERALIZATION_FACTOR,\\n    _bondParams,\\n    _borrowFeeRate,\\n    _claimableReserves,\\n    _htp,\\n    _isCollateralized,\\n    _priceAt,\\n    _reserveAuctionPrice\\n}                                   from '../helpers/PoolHelper.sol';\\nimport {\\n    _revertIfPriceDroppedBelowLimit\\n}                                   from '../helpers/RevertsHelper.sol';\\n\\nimport { Buckets }  from '../internal/Buckets.sol';\\nimport { Deposits } from '../internal/Deposits.sol';\\nimport { Loans }    from '../internal/Loans.sol';\\nimport { Maths }    from '../internal/Maths.sol';\\n\\n/**\\n    @title  Auctions kicker actions library\\n    @notice External library containing kicker actions involving auctions within pool:\\n            - kick undercollateralized loans; start reserve auctions\\n */\\nlibrary KickerActions {\\n\\n    /*************************/\\n    /*** Local Var Structs ***/\\n    /*************************/\\n\\n    /// @dev Struct used for `kick` function local vars.\\n    struct KickLocalVars {\\n        uint256 borrowerDebt;          // [WAD] the accrued debt of kicked borrower\\n        uint256 borrowerCollateral;    // [WAD] amount of kicked borrower collateral\\n        uint256 t0ReserveSettleAmount; // [WAD] Amount of t0Debt that could be settled via reserves in an auction\\n        uint256 borrowerNpTpRatio;     // [WAD] borrower NP to TP ratio\\n        uint256 neutralPrice;          // [WAD] neutral price recorded in kick action\\n        uint256 htp;                   // [WAD] highest threshold price (including the collateralization factor) in pool\\n        uint256 referencePrice;        // [WAD] used to calculate auction start price\\n        uint256 bondFactor;            // [WAD] bond factor of kicked auction\\n        uint256 bondSize;              // [WAD] bond size of kicked auction\\n        uint256 debtToCollateral;      // [WAD] borrower debt to collateral at kick time\\n    }\\n\\n    /// @dev Struct used for `lenderKick` function local vars.\\n    struct LenderKickLocalVars {\\n        uint256 bucketDeposit;  // [WAD] amount of quote tokens in bucket\\n        uint256 bucketPrice;    // [WAD] bucket price\\n        uint256 entitledAmount; // [WAD] amount that lender is entitled to remove at specified index\\n        uint256 lenderLP;       // [WAD] LP of lender in bucket\\n    }\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolEvents` for descriptions\\n    event BondWithdrawn(address indexed kicker, address indexed receiver, uint256 amount);\\n    event BucketBankruptcy(uint256 indexed index, uint256 lpForfeited);\\n    event Kick(address indexed borrower, uint256 debt, uint256 collateral, uint256 bond);\\n    event KickReserveAuction(uint256 claimableReservesRemaining, uint256 auctionPrice, uint256 currentBurnEpoch);\\n    event RemoveQuoteToken(address indexed lender, uint256 indexed price, uint256 amount, uint256 lpRedeemed, uint256 lup);\\n\\n    /**************/\\n    /*** Errors ***/\\n    /**************/\\n\\n    // See `IPoolErrors` for descriptions\\n    error AuctionActive();\\n    error BorrowerOk();\\n    error InsufficientLiquidity();\\n    error NoReserves();\\n    error PriceBelowLUP();\\n    error ReserveAuctionTooSoon();\\n\\n    /***************************/\\n    /***  External Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice See `IPoolKickerActions` for descriptions.\\n     *  @return kickResult_ The `KickResult` struct result of the kick action.\\n     */\\n    function kick(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        LoansState    storage loans_,\\n        PoolState calldata poolState_,\\n        address borrowerAddress_,\\n        uint256 limitIndex_\\n    ) external returns (\\n        KickResult memory kickResult_\\n    ) {\\n        uint256 curLup = Deposits.getLup(deposits_, poolState_.debt);\\n\\n        kickResult_ = _kick(\\n            auctions_,\\n            loans_,\\n            poolState_,\\n            borrowerAddress_,\\n            limitIndex_,\\n            curLup // proposed LUP is the current pool LUP\\n        );\\n        // return current LUP in pool\\n        kickResult_.lup = curLup;\\n    }\\n\\n    /**\\n     *  @notice See `IPoolKickerActions` for descriptions.\\n     *  @dev    === Reverts on ===\\n     *  @dev    bucket price below current pool `LUP` `PriceBelowLUP()`\\n     *  @dev    insufficient deposit to kick auction `InsufficientLiquidity()`\\n     *  @return kickResult_ The `KickResult` struct result of the kick action.\\n     */\\n    function lenderKick(\\n        AuctionsState storage auctions_,\\n        DepositsState storage deposits_,\\n        mapping(uint256 => Bucket) storage buckets_,\\n        LoansState storage loans_,\\n        PoolState calldata poolState_,\\n        uint256 index_,\\n        uint256 limitIndex_\\n    ) external returns (\\n        KickResult memory kickResult_\\n    ) {\\n        LenderKickLocalVars memory vars;\\n\\n        vars.bucketPrice = _priceAt(index_);\\n\\n        // revert if the bucket price is below current LUP\\n        uint256 curLup = Deposits.getLup(deposits_, poolState_.debt);\\n        if (vars.bucketPrice < curLup) revert PriceBelowLUP();\\n\\n        Bucket storage bucket = buckets_[index_];\\n        Lender storage lender = bucket.lenders[msg.sender];\\n\\n        vars.lenderLP      = bucket.bankruptcyTime < lender.depositTime ? lender.lps : 0;\\n        vars.bucketDeposit = Deposits.valueAt(deposits_, index_);\\n\\n        // calculate amount lender is entitled in current bucket (based on lender LP in bucket)\\n        vars.entitledAmount = Buckets.lpToQuoteTokens(\\n            bucket.collateral,\\n            bucket.lps,\\n            vars.bucketDeposit,\\n            vars.lenderLP,\\n            vars.bucketPrice,\\n            Math.Rounding.Down\\n        );\\n\\n        // cap the amount entitled at bucket deposit\\n        if (vars.entitledAmount > vars.bucketDeposit) vars.entitledAmount = vars.bucketDeposit;\\n\\n        // revert if no entitled amount\\n        if (vars.entitledAmount == 0) revert InsufficientLiquidity();\\n\\n        // add amount to remove to pool debt in order to calculate proposed LUP\\n        // this simulates LUP movement with additional debt\\n        uint256 proposedLup =  Deposits.getLup(deposits_, poolState_.debt + vars.entitledAmount);\\n\\n        // kick top borrower\\n        kickResult_ = _kick(\\n            auctions_,\\n            loans_,\\n            poolState_,\\n            Loans.getMax(loans_).borrower,\\n            limitIndex_,\\n            proposedLup\\n        );\\n        // return current LUP in pool\\n        kickResult_.lup = curLup;\\n    }\\n\\n    /*************************/\\n    /***  Reserve Auction  ***/\\n    /*************************/\\n\\n    /**\\n     *  @notice See `IPoolKickerActions` for descriptions.\\n     *  @dev    === Write state ===\\n     *  @dev    update `reserveAuction.unclaimed` accumulator\\n     *  @dev    update `reserveAuction.kicked` timestamp state\\n     *  @dev    === Reverts on ===\\n     *  @dev    no reserves to claim `NoReserves()`\\n     *  @dev    5 days not passed `ReserveAuctionTooSoon()`\\n     *  @dev    === Emit events ===\\n     *  @dev    - `KickReserveAuction`\\n     */\\n    function kickReserveAuction(\\n        AuctionsState storage auctions_,\\n        ReserveAuctionState storage reserveAuction_,\\n        KickReserveAuctionParams calldata params_\\n    ) external {\\n        // retrieve timestamp of latest burn event and last burn timestamp\\n        uint256 latestBurnEpoch = reserveAuction_.latestBurnEventEpoch;\\n\\n        // check that at least five days have passed since the last reserve auction was kicked\\n        if (block.timestamp < reserveAuction_.kicked + 120 hours) {\\n            revert ReserveAuctionTooSoon();\\n        }\\n\\n        uint256 curUnclaimedAuctionReserve = reserveAuction_.unclaimed;\\n\\n        uint256 claimable = _claimableReserves(\\n            Maths.wmul(params_.t0PoolDebt, params_.inflator),\\n            params_.poolSize,\\n            auctions_.totalBondEscrowed,\\n            curUnclaimedAuctionReserve,\\n            params_.poolBalance\\n        );\\n\\n        curUnclaimedAuctionReserve += claimable;\\n\\n        if (curUnclaimedAuctionReserve == 0) revert NoReserves();\\n\\n        reserveAuction_.unclaimed          = curUnclaimedAuctionReserve;\\n        reserveAuction_.kicked             = block.timestamp;\\n        reserveAuction_.lastKickedReserves = curUnclaimedAuctionReserve;\\n\\n        // increment latest burn event epoch and update burn event timestamp\\n        latestBurnEpoch += 1;\\n\\n        reserveAuction_.latestBurnEventEpoch = latestBurnEpoch;\\n        reserveAuction_.burnEvents[latestBurnEpoch].timestamp = block.timestamp;\\n\\n        emit KickReserveAuction(\\n            curUnclaimedAuctionReserve,\\n            _reserveAuctionPrice(block.timestamp, curUnclaimedAuctionReserve),\\n            latestBurnEpoch\\n        );\\n    }\\n\\n    function withdrawBonds(\\n        AuctionsState storage auctions_,\\n        address recipient_,\\n        uint256 maxAmount_\\n    ) external returns (uint256 amount_) {\\n        uint256 claimable = auctions_.kickers[msg.sender].claimable;\\n\\n        // the amount to claim is constrained by the claimable balance of sender\\n        // claiming escrowed bonds is not constraiend by the pool balance\\n        amount_ = Maths.min(maxAmount_, claimable);\\n\\n        // revert if no amount to claim\\n        if (amount_ == 0) revert InsufficientLiquidity();\\n\\n        // decrement total bond escrowed\\n        auctions_.totalBondEscrowed             -= amount_;\\n        auctions_.kickers[msg.sender].claimable -= amount_;\\n\\n        emit BondWithdrawn(msg.sender, recipient_, amount_);\\n    }\\n\\n    /***************************/\\n    /***  Internal Functions ***/\\n    /***************************/\\n\\n    /**\\n     *  @notice Called to start borrower liquidation and to update the auctions queue.\\n     *  @dev    === Write state ===\\n     *  @dev    - `_recordAuction`:\\n     *  @dev      `borrower -> liquidation` mapping update\\n     *  @dev      increment `auctions count` accumulator\\n     *  @dev      increment `auctions.totalBondEscrowed` accumulator\\n     *  @dev      updates auction queue state\\n     *  @dev    - `_updateEscrowedBonds`:\\n     *  @dev      update `locked` and `claimable` kicker accumulators\\n     *  @dev    - `Loans.remove`:\\n     *  @dev      delete borrower from `indices => borrower` address mapping\\n     *  @dev      remove loan from loans array\\n     *  @dev    === Emit events ===\\n     *  @dev    - `Kick`\\n     *  @param  auctions_        Struct for pool auctions state.\\n     *  @param  loans_           Struct for pool loans state.\\n     *  @param  poolState_       Current state of the pool.\\n     *  @param  borrowerAddress_ Address of the borrower to kick.\\n     *  @param  limitIndex_      Index of the lower bound of `NP` tolerated when kicking the auction.\\n     *  @param  proposedLup_     Proposed `LUP` in pool.\\n     *  @return kickResult_      The `KickResult` struct result of the kick action.\\n     */\\n    function _kick(\\n        AuctionsState storage auctions_,\\n        LoansState    storage loans_,\\n        PoolState calldata poolState_,\\n        address borrowerAddress_,\\n        uint256 limitIndex_,\\n        uint256 proposedLup_\\n    ) internal returns (\\n        KickResult memory kickResult_\\n    ) {\\n        Liquidation storage liquidation = auctions_.liquidations[borrowerAddress_];\\n        // revert if liquidation is active\\n        if (liquidation.kickTime != 0) revert AuctionActive();\\n\\n        Borrower storage borrower = loans_.borrowers[borrowerAddress_];\\n\\n        kickResult_.t0KickedDebt        = borrower.t0Debt;\\n        kickResult_.collateralPreAction = borrower.collateral;\\n\\n        KickLocalVars memory vars;\\n        vars.borrowerDebt          = Maths.wmul(kickResult_.t0KickedDebt, poolState_.inflator);\\n        vars.borrowerCollateral    = kickResult_.collateralPreAction;\\n        vars.t0ReserveSettleAmount = Maths.wmul(kickResult_.t0KickedDebt, _borrowFeeRate(poolState_.rate)) / 2;\\n        vars.borrowerNpTpRatio     = borrower.npTpRatio;\\n\\n        // revert if kick on a collateralized borrower\\n        if (_isCollateralized(vars.borrowerDebt, vars.borrowerCollateral, proposedLup_, poolState_.poolType)) {\\n            revert BorrowerOk();\\n        }\\n\\n        // calculate auction params\\n        // neutral price = Tp * Np to Tp ratio\\n        // neutral price is capped at 50 * max pool price\\n        vars.neutralPrice = Maths.min(\\n            Math.mulDiv(Maths.wmul(vars.borrowerDebt, COLLATERALIZATION_FACTOR), \\n            vars.borrowerNpTpRatio, vars.borrowerCollateral),\\n            MAX_INFLATED_PRICE\\n        );\\n        // check if NP is not less than price at the limit index provided by the kicker - done to prevent frontrunning kick auction call with a large amount of loan\\n        // which will make it harder for kicker to earn a reward and more likely that the kicker is penalized\\n        _revertIfPriceDroppedBelowLimit(vars.neutralPrice, limitIndex_);\\n\\n        vars.htp            = _htp(Loans.getMax(loans_).t0DebtToCollateral, poolState_.inflator);\\n        vars.referencePrice = Maths.min(Maths.max(vars.htp, vars.neutralPrice), MAX_INFLATED_PRICE);\\n\\n        (vars.bondFactor, vars.bondSize) = _bondParams(\\n            vars.borrowerDebt,\\n            vars.borrowerNpTpRatio\\n        );\\n\\n        vars.debtToCollateral = Maths.wdiv(vars.borrowerDebt, vars.borrowerCollateral);\\n\\n        // record liquidation info\\n        _recordAuction(\\n            auctions_,\\n            liquidation,\\n            borrowerAddress_,\\n            vars.bondSize,\\n            vars.bondFactor,\\n            vars.referencePrice,\\n            vars.neutralPrice,\\n            vars.debtToCollateral,\\n            vars.t0ReserveSettleAmount\\n        );\\n\\n        // update escrowed bonds balances and get the difference needed to cover bond (after using any kick claimable funds if any)\\n        kickResult_.amountToCoverBond = _updateEscrowedBonds(auctions_, vars.bondSize);\\n\\n        // remove kicked loan from heap\\n        Loans.remove(loans_, borrowerAddress_, loans_.indices[borrowerAddress_]);\\n\\n        emit Kick(\\n            borrowerAddress_,\\n            vars.borrowerDebt,\\n            vars.borrowerCollateral,\\n            vars.bondSize\\n        );\\n    }\\n\\n    /**\\n     *  @notice Updates escrowed bonds balances, reuse kicker claimable funds and calculates difference needed to cover new bond.\\n     *  @dev    === Write state ===\\n     *  @dev    update `locked` and `claimable` kicker accumulators\\n     *  @dev    update `totalBondEscrowed` accumulator\\n     *  @param  auctions_       Struct for pool auctions state.\\n     *  @param  bondSize_       Bond size to cover newly kicked auction.\\n     *  @return bondDifference_ The amount that kicker should send to pool to cover auction bond.\\n     */\\n    function _updateEscrowedBonds(\\n        AuctionsState storage auctions_,\\n        uint256 bondSize_\\n    ) internal returns (uint256 bondDifference_){\\n        Kicker storage kicker = auctions_.kickers[msg.sender];\\n\\n        kicker.locked += bondSize_;\\n\\n        uint256 kickerClaimable = kicker.claimable;\\n\\n        if (kickerClaimable >= bondSize_) {\\n            // no need to update total bond escrowed as bond is covered by kicker claimable (which is already tracked by accumulator)\\n            kicker.claimable -= bondSize_;\\n        } else {\\n            bondDifference_  = bondSize_ - kickerClaimable;\\n            kicker.claimable = 0;\\n\\n            // increment total bond escrowed by amount needed to cover bond difference\\n            auctions_.totalBondEscrowed += bondDifference_;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Saves in storage a new liquidation that was kicked.\\n     *  @dev    === Write state ===\\n     *  @dev    `borrower -> liquidation` mapping update\\n     *  @dev    increment auctions count accumulator\\n     *  @dev    updates auction queue state\\n     *  @param  auctions_              Struct for pool auctions state.\\n     *  @param  liquidation_           Struct for current auction state.\\n     *  @param  borrowerAddress_       Address of the borrower that is kicked.\\n     *  @param  bondSize_              Bond size to cover newly kicked auction.\\n     *  @param  bondFactor_            Bond factor of the newly kicked auction.\\n     *  @param  referencePrice_        Used to calculate auction start price.\\n     *  @param  neutralPrice_          Current pool `Neutral Price`.\\n     *  @param  debtToCollateral_      Borrower debt to collateral at time of kick.\\n     *  @param  t0ReserveSettleAmount_ Amount of t0Debt that could be settled via reserves in auction\\n     */\\n    function _recordAuction(\\n        AuctionsState storage auctions_,\\n        Liquidation storage liquidation_,\\n        address borrowerAddress_,\\n        uint256 bondSize_,\\n        uint256 bondFactor_,\\n        uint256 referencePrice_,\\n        uint256 neutralPrice_,\\n        uint256 debtToCollateral_,\\n        uint256 t0ReserveSettleAmount_\\n    ) internal {\\n        // record liquidation info\\n        liquidation_.kicker                = msg.sender;\\n        liquidation_.kickTime              = uint96(block.timestamp);\\n        liquidation_.bondSize              = SafeCast.toUint160(bondSize_);\\n        liquidation_.bondFactor            = SafeCast.toUint96(bondFactor_);\\n        liquidation_.neutralPrice          = SafeCast.toUint96(neutralPrice_);\\n        liquidation_.debtToCollateral      = debtToCollateral_;\\n        liquidation_.t0ReserveSettleAmount = t0ReserveSettleAmount_;\\n\\n        // increment number of active auctions\\n        ++auctions_.noOfAuctions;\\n\\n        // update auctions queue\\n        if (auctions_.head != address(0)) {\\n            // other auctions in queue, liquidation doesn't exist or overwriting.\\n            address tail = auctions_.tail;\\n            auctions_.liquidations[tail].next = borrowerAddress_;\\n            liquidation_.prev = tail;\\n            liquidation_.referencePrice = SafeCast.toUint96(Maths.max(referencePrice_, auctions_.liquidations[tail].referencePrice));\\n        } else {\\n            // first auction in queue\\n            auctions_.head = borrowerAddress_;\\n            liquidation_.referencePrice = SafeCast.toUint96(referencePrice_);\\n        }\\n        // update liquidation with the new ordering\\n        auctions_.tail = borrowerAddress_;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/prb-math/contracts/PRBMathUD60x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/prb-math/contracts/PRBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"@clones/=lib/clones-with-immutable-args/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/=lib/prb-math/\",\r\n      \"@base64-sol/=lib/base64/\",\r\n      \"src/=src/\",\r\n      \"base64/=lib/base64/\",\r\n      \"clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\r\n      \"ds-test/=lib/clones-with-immutable-args/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/prb-math/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/external/BorrowerActions.sol\": {\r\n        \"BorrowerActions\": \"0x37ed1d5d903adddda4fcc6d003b840c883d05402\"\r\n      },\r\n      \"src/libraries/external/KickerActions.sol\": {\r\n        \"KickerActions\": \"0xaf983b52aec0f6e127ddd51ce3367552d7916387\"\r\n      },\r\n      \"src/libraries/external/LPActions.sol\": {\r\n        \"LPActions\": \"0xac8892dd81ee0fec9c11ecf6ef3bd1a773d003fb\"\r\n      },\r\n      \"src/libraries/external/LenderActions.sol\": {\r\n        \"LenderActions\": \"0xdce7fd455e1a65b40186292657e6231f87d81c49\"\r\n      },\r\n      \"src/libraries/external/PoolCommons.sol\": {\r\n        \"PoolCommons\": \"0xe88aaf46c9124b7b08c2dcc2505429ce72979648\"\r\n      },\r\n      \"src/libraries/external/PositionNFTSVG.sol\": {\r\n        \"PositionNFTSVG\": \"0x83fcb77b91288173175a4ac70f848d57ff95a9dd\"\r\n      },\r\n      \"src/libraries/external/SettlerActions.sol\": {\r\n        \"SettlerActions\": \"0x4418b6a45d785b85e87c022d99b0ff9e267268fe\"\r\n      },\r\n      \"src/libraries/external/TakerActions.sol\": {\r\n        \"TakerActions\": \"0x9c09a67a622650037fe70f21a5f6770a363009e1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ajna_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreateFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsNotCompliant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployQuoteCollateralSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployWithZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"PoolAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolInterestRateInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIdSubsetInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"subsetHash_\",\"type\":\"bytes32\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721_NON_SUBSET_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ajna\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployedPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedPoolsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedPoolsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"getNFTSubsetHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDeployedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract ERC721Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC721PoolFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "0000000000000000000000009a96ec9b57fb64fbc60b423d1f4da7691bd35079", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}