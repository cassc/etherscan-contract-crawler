{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/proxy/PDCreateProjectProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport { ReentrancyGuard } from \\\"@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\\\";\\nimport { OPERATION_ROLE } from \\\"contracts/interface/D4AConstants.sol\\\";\\nimport { PriceTemplateType } from \\\"contracts/interface/D4AEnums.sol\\\";\\nimport {\\n    DaoMetadataParam,\\n    DaoMintCapParam,\\n    DaoETHAndERC20SplitRatioParam,\\n    TemplateParam,\\n    Whitelist,\\n    Blacklist,\\n    BasicDaoParam,\\n    NftMinterCapInfo,\\n    SetMintCapAndPermissionParam,\\n    SetRatioParam,\\n    ContinuousDaoParam\\n} from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport {\\n    ZeroFloorPriceCannotUseLinearPriceVariation,\\n    NotBasicDaoOwner,\\n    ZeroNftReserveNumber\\n} from \\\"contracts/interface/D4AErrors.sol\\\";\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IAccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport { IUniswapV2Factory } from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport { ID4AProtocolReadable } from \\\"contracts/interface/ID4AProtocolReadable.sol\\\";\\nimport { ID4AProtocolSetter } from \\\"contracts/interface/ID4AProtocolSetter.sol\\\";\\nimport { ID4ACreate } from \\\"contracts/interface/ID4ACreate.sol\\\";\\nimport { IPDCreate } from \\\"contracts/interface/IPDCreate.sol\\\";\\nimport { ID4AERC721 } from \\\"contracts/interface/ID4AERC721.sol\\\";\\nimport { ID4ARoyaltySplitterFactory } from \\\"contracts/interface/ID4ARoyaltySplitterFactory.sol\\\";\\nimport { ID4ASettingsReadable } from \\\"contracts/D4ASettings/ID4ASettingsReadable.sol\\\";\\n\\ncontract PDCreateProjectProxy is OwnableUpgradeable, ReentrancyGuard {\\n    address public protocol;\\n    ID4ARoyaltySplitterFactory public royaltySplitterFactory;\\n    address public royaltySplitterOwner;\\n    mapping(bytes32 daoId => address royaltySplitter) public royaltySplitters;\\n\\n    IUniswapV2Factory public d4aswapFactory;\\n    address public immutable WETH;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address WETH_) {\\n        WETH = WETH_;\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address d4aswapFactory_,\\n        address protocol_,\\n        address royaltySplitterFactory_,\\n        address royaltySplitterOwner_\\n    )\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        d4aswapFactory = IUniswapV2Factory(d4aswapFactory_);\\n        protocol = protocol_;\\n        royaltySplitterFactory = ID4ARoyaltySplitterFactory(royaltySplitterFactory_);\\n        royaltySplitterOwner = royaltySplitterOwner_;\\n    }\\n\\n    function set(\\n        address newProtocol,\\n        address newRoyaltySplitterFactory,\\n        address newRoyaltySplitterOwner,\\n        address newD4AswapFactory\\n    )\\n        public\\n        onlyOwner\\n    {\\n        protocol = newProtocol;\\n        royaltySplitterFactory = ID4ARoyaltySplitterFactory(newRoyaltySplitterFactory);\\n        royaltySplitterOwner = newRoyaltySplitterOwner;\\n        d4aswapFactory = IUniswapV2Factory(newD4AswapFactory);\\n    }\\n\\n    event CreateProjectParamEmitted(\\n        bytes32 daoId,\\n        address daoFeePool,\\n        address token,\\n        address nft,\\n        DaoMetadataParam daoMetadataParam,\\n        Whitelist whitelist,\\n        Blacklist blacklist,\\n        DaoMintCapParam daoMintCapParam,\\n        DaoETHAndERC20SplitRatioParam splitRatioParam,\\n        TemplateParam templateParam,\\n        BasicDaoParam basicDaoParam,\\n        uint256 actionType\\n    );\\n\\n    event CreateContinuousProjectParamEmitted(\\n        bytes32 existDaoId,\\n        bytes32 daoId,\\n        uint256 dailyMintCap,\\n        bool needMintableWork,\\n        bool unifiedPriceModeOff,\\n        uint256 unifiedPrice,\\n        uint256 reserveNftNumber\\n    );\\n\\n    struct CreateProjectLocalVars {\\n        bytes32 existDaoId;\\n        bytes32 daoId;\\n        address daoFeePool;\\n        address token;\\n        address nft;\\n        DaoMetadataParam daoMetadataParam;\\n        Whitelist whitelist;\\n        Blacklist blacklist;\\n        DaoMintCapParam daoMintCapParam;\\n        DaoETHAndERC20SplitRatioParam splitRatioParam;\\n        TemplateParam templateParam;\\n        BasicDaoParam basicDaoParam;\\n        uint256 actionType;\\n        bool needMintableWork;\\n        uint256 dailyMintCap;\\n    }\\n\\n    // first bit: 0: project, 1: owner project\\n    // second bit: 0: without permission, 1: with permission\\n    // third bit: 0: without mint cap, 1: with mint cap\\n    // fourth bit: 0: without DEX pair initialized, 1: with DEX pair initialized\\n    // fifth bit: modify DAO ETH and ERC20 Split Ratio when minting NFTs or not\\n    function createBasicDao(\\n        DaoMetadataParam calldata daoMetadataParam,\\n        Whitelist memory whitelist, //creator is in whitelist\\n        Blacklist calldata blacklist,\\n        DaoMintCapParam calldata daoMintCapParam,\\n        DaoETHAndERC20SplitRatioParam calldata splitRatioParam,\\n        TemplateParam calldata templateParam,\\n        BasicDaoParam calldata basicDaoParam,\\n        uint256 actionType\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        returns (bytes32 daoId)\\n    {\\n        // floor price rank 9999 means 0 floor price, 0 floor price can only use exponential price variation\\n        if (\\n            daoMetadataParam.floorPriceRank == 9999\\n                && templateParam.priceTemplateType != PriceTemplateType.EXPONENTIAL_PRICE_VARIATION\\n        ) {\\n            revert ZeroFloorPriceCannotUseLinearPriceVariation();\\n        }\\n\\n        if ((actionType & 0x1) != 0) {\\n            require(\\n                IAccessControlUpgradeable(address(protocol)).hasRole(OPERATION_ROLE, msg.sender),\\n                \\\"only admin can specify project index\\\"\\n            );\\n            daoId = IPDCreate(protocol).createOwnerBasicDao{ value: msg.value }(daoMetadataParam, basicDaoParam);\\n        } else {\\n            daoId = IPDCreate(protocol).createBasicDao{ value: msg.value }(daoMetadataParam, basicDaoParam);\\n        }\\n\\n        CreateProjectLocalVars memory vars;\\n        vars.daoFeePool = ID4AProtocolReadable(address(protocol)).getDaoFeePool(daoId);\\n        vars.token = ID4AProtocolReadable(address(protocol)).getDaoToken(daoId);\\n        vars.nft = ID4AProtocolReadable(address(protocol)).getDaoNft(daoId);\\n\\n        emit CreateProjectParamEmitted(\\n            daoId,\\n            vars.daoFeePool,\\n            vars.token,\\n            vars.nft,\\n            daoMetadataParam,\\n            whitelist,\\n            blacklist,\\n            daoMintCapParam,\\n            splitRatioParam,\\n            templateParam,\\n            basicDaoParam,\\n            actionType\\n        );\\n\\n        vars.dailyMintCap = ID4AProtocolReadable(address(protocol)).getDaoDailyMintCap(daoId);\\n        bool _unifiedPriceModeOff = ID4AProtocolReadable(address(protocol)).getDaoUnifiedPriceModeOff(daoId);\\n        uint256 _unifiedPrice = ID4AProtocolReadable(address(protocol)).getDaoUnifiedPrice(daoId);\\n        uint256 _reserveNftNumber = ID4AProtocolReadable(address(protocol)).getDaoReserveNftNumber(daoId);\\n\\n        emit CreateContinuousProjectParamEmitted(\\n            daoId, daoId, vars.dailyMintCap, true, _unifiedPriceModeOff, _unifiedPrice, _reserveNftNumber\\n        );\\n\\n        //\u4e0d\u9700\u8981\u628a\u65b0\u5efanft\u653e\u5230\u65e0\u94f8\u9020\u4e0a\u9650\u767d\u540d\u5355\u91cc\\n        //address[] memory minterNFTHolderPasses = new address[](whitelist.minterNFTHolderPasses.length + 1);\\n        //minterNFTHolderPasses[whitelist.minterNFTHolderPasses.length] = vars.nft;\\n        //whitelist.minterNFTHolderPasses = minterNFTHolderPasses;\\n        ID4ASettingsReadable(address(protocol)).permissionControl().addPermission(daoId, whitelist, blacklist);\\n\\n        SetMintCapAndPermissionParam memory permissionVars;\\n        permissionVars.daoId = daoId;\\n        permissionVars.daoMintCap = daoMintCapParam.daoMintCap;\\n        permissionVars.userMintCapParams = daoMintCapParam.userMintCapParams;\\n        //\u628a\u65b0\u5efanft\u653e\u5230\u6709\u94f8\u9020\u4e0a\u9650\u767d\u540d\u5355\u91cc\u5e76\u8bbe\u7f6ecap\u4e3a5\\n        NftMinterCapInfo[] memory nftMinterCapInfo = new NftMinterCapInfo[](1);\\n        nftMinterCapInfo[0] = NftMinterCapInfo({ nftAddress: vars.nft, nftMintCap: 5 });\\n        permissionVars.nftMinterCapInfo = nftMinterCapInfo;\\n        permissionVars.whitelist = whitelist;\\n        permissionVars.blacklist = blacklist;\\n        permissionVars.unblacklist = Blacklist(new address[](0), new address[](0));\\n        if ((actionType & 0x4) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setMintCapAndPermission(\\n                permissionVars.daoId,\\n                permissionVars.daoMintCap,\\n                permissionVars.userMintCapParams,\\n                permissionVars.nftMinterCapInfo,\\n                permissionVars.whitelist,\\n                permissionVars.blacklist,\\n                permissionVars.unblacklist\\n            );\\n        }\\n\\n        if ((actionType & 0x8) != 0) {\\n            d4aswapFactory.createPair(vars.token, WETH);\\n        }\\n\\n        SetRatioParam memory ratioVars;\\n        ratioVars.daoId = daoId;\\n        ratioVars.daoCreatorERC20Ratio = splitRatioParam.daoCreatorERC20Ratio;\\n        ratioVars.canvasCreatorERC20Ratio = splitRatioParam.canvasCreatorERC20Ratio;\\n        ratioVars.nftMinterERC20Ratio = splitRatioParam.nftMinterERC20Ratio;\\n        ratioVars.daoFeePoolETHRatio = splitRatioParam.daoFeePoolETHRatio;\\n        ratioVars.daoFeePoolETHRatioFlatPrice = splitRatioParam.daoFeePoolETHRatioFlatPrice;\\n        if ((actionType & 0x10) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setRatio(\\n                ratioVars.daoId,\\n                ratioVars.daoCreatorERC20Ratio,\\n                ratioVars.canvasCreatorERC20Ratio,\\n                ratioVars.nftMinterERC20Ratio,\\n                ratioVars.daoFeePoolETHRatio,\\n                ratioVars.daoFeePoolETHRatioFlatPrice\\n            );\\n        }\\n\\n        // setup template\\n        ID4AProtocolSetter(address(protocol)).setTemplate(daoId, templateParam);\\n\\n        uint96 royaltyFeeRatioInBps = ID4AProtocolReadable(address(protocol)).getDaoNftRoyaltyFeeRatioInBps(daoId);\\n        uint256 protocolRoyaltyFeeRatioInBps = ID4ASettingsReadable(address(protocol)).tradeProtocolFeeRatio();\\n        ID4ASettingsReadable(address(protocol)).ownerProxy().transferOwnership(daoId, msg.sender);\\n        ID4ASettingsReadable(address(protocol)).ownerProxy().transferOwnership(basicDaoParam.canvasId, msg.sender);\\n        OwnableUpgradeable(vars.nft).transferOwnership(msg.sender);\\n        address splitter = royaltySplitterFactory.createD4ARoyaltySplitter(\\n            ID4ASettingsReadable(address(protocol)).protocolFeePool(),\\n            protocolRoyaltyFeeRatioInBps,\\n            vars.daoFeePool,\\n            uint256(royaltyFeeRatioInBps) - protocolRoyaltyFeeRatioInBps\\n        );\\n        royaltySplitters[daoId] = splitter;\\n        OwnableUpgradeable(splitter).transferOwnership(royaltySplitterOwner);\\n        ID4AERC721(vars.nft).setRoyaltyInfo(splitter, royaltyFeeRatioInBps);\\n    }\\n\\n    function createContinuousDao(\\n        bytes32 existDaoId,\\n        DaoMetadataParam calldata daoMetadataParam,\\n        Whitelist memory whitelist,\\n        Blacklist calldata blacklist,\\n        DaoMintCapParam calldata daoMintCapParam,\\n        DaoETHAndERC20SplitRatioParam calldata splitRatioParam,\\n        TemplateParam calldata templateParam,\\n        BasicDaoParam calldata basicDaoParam,\\n        ContinuousDaoParam calldata continuousDaoParam,\\n        uint256 actionType\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        returns (bytes32 daoId)\\n    {\\n        {\\n            if (ID4ASettingsReadable(address(protocol)).ownerProxy().ownerOf(existDaoId) != msg.sender) {\\n                revert NotBasicDaoOwner();\\n            }\\n        }\\n        CreateProjectLocalVars memory vars;\\n        vars.existDaoId = existDaoId;\\n        vars.daoMetadataParam = daoMetadataParam;\\n        vars.whitelist = whitelist;\\n        vars.blacklist = blacklist;\\n        vars.daoMintCapParam = daoMintCapParam;\\n        vars.splitRatioParam = splitRatioParam;\\n        vars.templateParam = templateParam;\\n        vars.basicDaoParam = basicDaoParam;\\n        vars.actionType = actionType;\\n        vars.needMintableWork = continuousDaoParam.needMintableWork;\\n        vars.dailyMintCap = continuousDaoParam.dailyMintCap;\\n\\n        // floor price rank 9999 means 0 floor price, 0 floor price can only use exponential price variation\\n        if (\\n            daoMetadataParam.floorPriceRank == 9999\\n                && templateParam.priceTemplateType != PriceTemplateType.EXPONENTIAL_PRICE_VARIATION\\n        ) {\\n            revert ZeroFloorPriceCannotUseLinearPriceVariation();\\n        }\\n        if (continuousDaoParam.reserveNftNumber == 0 && continuousDaoParam.needMintableWork) {\\n            revert ZeroNftReserveNumber(); //\u8981\u4e48\u4e0d\u5f00\uff0c\u5f00\u4e86\u5c31\u4e0d\u80fd\u4f200\\n        }\\n        // if ((actionType & 0x1) != 0) {\\n        //     require(\\n        //         IAccessControlUpgradeable(address(protocol)).hasRole(OPERATION_ROLE, msg.sender),\\n        //         \\\"only admin can specify project index\\\"\\n        //     );\\n        //     daoId = IPDCreate(protocol).createOwnerBasicDao{ value: msg.value }(daoMetadataParam, basicDaoParam);\\n        // } else {\\n        //     daoId = IPDCreate(protocol).createBasicDao{ value: msg.value }(daoMetadataParam, basicDaoParam);\\n        // }\\n        daoId = IPDCreate(protocol).createContinuousDao{ value: msg.value }(\\n            existDaoId, daoMetadataParam, basicDaoParam, continuousDaoParam\\n        );\\n        vars.daoId = daoId;\\n\\n        // Use the exist DaoFeePool and DaoToken\\n        vars.daoFeePool = ID4AProtocolReadable(address(protocol)).getDaoFeePool(existDaoId);\\n        vars.token = ID4AProtocolReadable(address(protocol)).getDaoToken(existDaoId);\\n        vars.nft = ID4AProtocolReadable(address(protocol)).getDaoNft(daoId);\\n\\n        emit CreateProjectParamEmitted(\\n            vars.daoId,\\n            vars.daoFeePool,\\n            vars.token,\\n            vars.nft,\\n            vars.daoMetadataParam,\\n            vars.whitelist,\\n            vars.blacklist,\\n            vars.daoMintCapParam,\\n            vars.splitRatioParam,\\n            vars.templateParam,\\n            vars.basicDaoParam,\\n            vars.actionType\\n        );\\n\\n        emit CreateContinuousProjectParamEmitted(\\n            vars.existDaoId,\\n            vars.daoId,\\n            vars.dailyMintCap,\\n            vars.needMintableWork,\\n            continuousDaoParam.unifiedPriceModeOff,\\n            ID4AProtocolReadable(address(protocol)).getDaoUnifiedPrice(daoId),\\n            continuousDaoParam.reserveNftNumber\\n        );\\n\\n        ID4ASettingsReadable(address(protocol)).permissionControl().addPermission(daoId, whitelist, blacklist);\\n\\n        SetMintCapAndPermissionParam memory permissionVars;\\n        permissionVars.daoId = daoId;\\n        permissionVars.daoMintCap = daoMintCapParam.daoMintCap;\\n        permissionVars.userMintCapParams = daoMintCapParam.userMintCapParams;\\n        NftMinterCapInfo[] memory nftMinterCapInfo;\\n        permissionVars.nftMinterCapInfo = nftMinterCapInfo;\\n        permissionVars.whitelist = whitelist;\\n        permissionVars.blacklist = blacklist;\\n        permissionVars.unblacklist = Blacklist(new address[](0), new address[](0));\\n        if ((actionType & 0x4) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setMintCapAndPermission(\\n                permissionVars.daoId,\\n                permissionVars.daoMintCap,\\n                permissionVars.userMintCapParams,\\n                permissionVars.nftMinterCapInfo,\\n                permissionVars.whitelist,\\n                permissionVars.blacklist,\\n                permissionVars.unblacklist\\n            );\\n        }\\n\\n        if ((actionType & 0x8) != 0) {\\n            d4aswapFactory.createPair(vars.token, WETH);\\n        }\\n\\n        SetRatioParam memory ratioVars;\\n        ratioVars.daoId = daoId;\\n        ratioVars.daoCreatorERC20Ratio = splitRatioParam.daoCreatorERC20Ratio;\\n        ratioVars.canvasCreatorERC20Ratio = splitRatioParam.canvasCreatorERC20Ratio;\\n        ratioVars.nftMinterERC20Ratio = splitRatioParam.nftMinterERC20Ratio;\\n        ratioVars.daoFeePoolETHRatio = splitRatioParam.daoFeePoolETHRatio;\\n        ratioVars.daoFeePoolETHRatioFlatPrice = splitRatioParam.daoFeePoolETHRatioFlatPrice;\\n        if ((actionType & 0x10) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setRatio(\\n                ratioVars.daoId,\\n                ratioVars.daoCreatorERC20Ratio,\\n                ratioVars.canvasCreatorERC20Ratio,\\n                ratioVars.nftMinterERC20Ratio,\\n                ratioVars.daoFeePoolETHRatio,\\n                ratioVars.daoFeePoolETHRatioFlatPrice\\n            );\\n        }\\n\\n        // setup template\\n        ID4AProtocolSetter(address(protocol)).setTemplate(daoId, templateParam);\\n\\n        uint96 royaltyFeeRatioInBps = ID4AProtocolReadable(address(protocol)).getDaoNftRoyaltyFeeRatioInBps(daoId);\\n        uint256 protocolRoyaltyFeeRatioInBps = ID4ASettingsReadable(address(protocol)).tradeProtocolFeeRatio();\\n        ID4ASettingsReadable(address(protocol)).ownerProxy().transferOwnership(daoId, msg.sender);\\n        ID4ASettingsReadable(address(protocol)).ownerProxy().transferOwnership(basicDaoParam.canvasId, msg.sender);\\n        OwnableUpgradeable(vars.nft).transferOwnership(msg.sender);\\n        address splitter = royaltySplitterFactory.createD4ARoyaltySplitter(\\n            ID4ASettingsReadable(address(protocol)).protocolFeePool(),\\n            protocolRoyaltyFeeRatioInBps,\\n            vars.daoFeePool,\\n            uint256(royaltyFeeRatioInBps) - protocolRoyaltyFeeRatioInBps\\n        );\\n        royaltySplitters[daoId] = splitter;\\n        OwnableUpgradeable(splitter).transferOwnership(royaltySplitterOwner);\\n        ID4AERC721(vars.nft).setRoyaltyInfo(splitter, royaltyFeeRatioInBps);\\n    }\\n\\n    event CreateProjectParamEmitted(\\n        bytes32 daoId,\\n        address daoFeePool,\\n        address token,\\n        address nft,\\n        DaoMetadataParam daoMetadataParam,\\n        Whitelist whitelist,\\n        Blacklist blacklist,\\n        DaoMintCapParam daoMintCapParam,\\n        DaoETHAndERC20SplitRatioParam splitRatioParam,\\n        TemplateParam templateParam,\\n        uint256 actionType\\n    );\\n\\n    // first bit: 0: project, 1: owner project\\n    // second bit: 0: without permission, 1: with permission\\n    // third bit: 0: without mint cap, 1: with mint cap\\n    // fourth bit: 0: without DEX pair initialized, 1: with DEX pair initialized\\n    // fifth bit: modify DAO ETH and ERC20 Split Ratio when minting NFTs or not\\n    function createProject(\\n        DaoMetadataParam calldata daoMetadataParam,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        DaoMintCapParam calldata daoMintCapParam,\\n        DaoETHAndERC20SplitRatioParam calldata splitRatioParam,\\n        TemplateParam calldata templateParam,\\n        uint256 actionType\\n    )\\n        public\\n        payable\\n        returns (bytes32 daoId)\\n    {\\n        // floor price rank 9999 means 0 floor price, 0 floor price can only use exponential price variation\\n        if (\\n            daoMetadataParam.floorPriceRank == 9999\\n                && templateParam.priceTemplateType != PriceTemplateType.EXPONENTIAL_PRICE_VARIATION\\n        ) {\\n            revert ZeroFloorPriceCannotUseLinearPriceVariation();\\n        }\\n        if ((actionType & 0x1) != 0) {\\n            require(\\n                IAccessControlUpgradeable(address(protocol)).hasRole(OPERATION_ROLE, msg.sender),\\n                \\\"only admin can specify project index\\\"\\n            );\\n            daoId = ID4ACreate(protocol).createOwnerProject{ value: msg.value }(daoMetadataParam);\\n        } else {\\n            daoId = ID4ACreate(protocol).createProject{ value: msg.value }(\\n                daoMetadataParam.startDrb,\\n                daoMetadataParam.mintableRounds,\\n                daoMetadataParam.floorPriceRank,\\n                daoMetadataParam.maxNftRank,\\n                daoMetadataParam.royaltyFee,\\n                daoMetadataParam.projectUri\\n            );\\n        }\\n\\n        address daoFeePool = ID4AProtocolReadable(address(protocol)).getDaoFeePool(daoId);\\n        address token = ID4AProtocolReadable(address(protocol)).getDaoToken(daoId);\\n        address nft = ID4AProtocolReadable(address(protocol)).getDaoNft(daoId);\\n        emit CreateProjectParamEmitted(\\n            daoId,\\n            daoFeePool,\\n            token,\\n            nft,\\n            daoMetadataParam,\\n            whitelist,\\n            blacklist,\\n            daoMintCapParam,\\n            splitRatioParam,\\n            templateParam,\\n            actionType\\n        );\\n\\n        if ((actionType & 0x2) != 0) {\\n            ID4ASettingsReadable(address(protocol)).permissionControl().addPermission(daoId, whitelist, blacklist);\\n        }\\n\\n        SetMintCapAndPermissionParam memory permissionVars;\\n        permissionVars.daoId = daoId;\\n        permissionVars.daoMintCap = daoMintCapParam.daoMintCap;\\n        permissionVars.userMintCapParams = daoMintCapParam.userMintCapParams;\\n        NftMinterCapInfo[] memory nftMinterCapInfo;\\n        permissionVars.nftMinterCapInfo = nftMinterCapInfo;\\n        permissionVars.whitelist = whitelist;\\n        permissionVars.blacklist = blacklist;\\n        permissionVars.unblacklist = Blacklist(new address[](0), new address[](0));\\n        if ((actionType & 0x4) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setMintCapAndPermission(\\n                permissionVars.daoId,\\n                permissionVars.daoMintCap,\\n                permissionVars.userMintCapParams,\\n                permissionVars.nftMinterCapInfo,\\n                permissionVars.whitelist,\\n                permissionVars.blacklist,\\n                permissionVars.unblacklist\\n            );\\n        }\\n\\n        if ((actionType & 0x8) != 0) {\\n            d4aswapFactory.createPair(token, WETH);\\n        }\\n\\n        SetRatioParam memory ratioVars;\\n        ratioVars.daoId = daoId;\\n        ratioVars.daoCreatorERC20Ratio = splitRatioParam.daoCreatorERC20Ratio;\\n        ratioVars.canvasCreatorERC20Ratio = splitRatioParam.canvasCreatorERC20Ratio;\\n        ratioVars.nftMinterERC20Ratio = splitRatioParam.nftMinterERC20Ratio;\\n        ratioVars.daoFeePoolETHRatio = splitRatioParam.daoFeePoolETHRatio;\\n        ratioVars.daoFeePoolETHRatioFlatPrice = splitRatioParam.daoFeePoolETHRatioFlatPrice;\\n        if ((actionType & 0x10) != 0) {\\n            ID4AProtocolSetter(address(protocol)).setRatio(\\n                ratioVars.daoId,\\n                ratioVars.daoCreatorERC20Ratio,\\n                ratioVars.canvasCreatorERC20Ratio,\\n                ratioVars.nftMinterERC20Ratio,\\n                ratioVars.daoFeePoolETHRatio,\\n                ratioVars.daoFeePoolETHRatioFlatPrice\\n            );\\n        }\\n\\n        // setup template\\n        ID4AProtocolSetter(address(protocol)).setTemplate(daoId, templateParam);\\n\\n        uint96 royaltyFeeRatioInBps = ID4AProtocolReadable(address(protocol)).getDaoNftRoyaltyFeeRatioInBps(daoId);\\n        uint256 protocolRoyaltyFeeRatioInBps = ID4ASettingsReadable(address(protocol)).tradeProtocolFeeRatio();\\n        ID4ASettingsReadable(address(protocol)).ownerProxy().transferOwnership(daoId, msg.sender);\\n        OwnableUpgradeable(nft).transferOwnership(msg.sender);\\n        address splitter = royaltySplitterFactory.createD4ARoyaltySplitter(\\n            ID4ASettingsReadable(address(protocol)).protocolFeePool(),\\n            protocolRoyaltyFeeRatioInBps,\\n            daoFeePool,\\n            uint256(royaltyFeeRatioInBps) - protocolRoyaltyFeeRatioInBps\\n        );\\n        royaltySplitters[daoId] = splitter;\\n        OwnableUpgradeable(splitter).transferOwnership(royaltySplitterOwner);\\n        ID4AERC721(nft).setRoyaltyInfo(splitter, royaltyFeeRatioInBps);\\n    }\\n\\n    receive() external payable { }\\n}\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IReentrancyGuard } from './IReentrancyGuard.sol';\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    uint256 internal constant REENTRANCY_STATUS_LOCKED = 2;\\n    uint256 internal constant REENTRANCY_STATUS_UNLOCKED = 1;\\n\\n    modifier nonReentrant() {\\n        if (ReentrancyGuardStorage.layout().status == REENTRANCY_STATUS_LOCKED)\\n            revert ReentrancyGuard__ReentrantCall();\\n        _lockReentrancyGuard();\\n        _;\\n        _unlockReentrancyGuard();\\n    }\\n\\n    /**\\n     * @notice lock functions that use the nonReentrant modifier\\n     */\\n    function _lockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_LOCKED;\\n    }\\n\\n    /**\\n     * @notice unlock funtions that use the nonReentrant modifier\\n     */\\n    function _unlockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_UNLOCKED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nuint256 constant BASIS_POINT = 10_000;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0;\\nbytes32 constant PROTOCOL_ROLE = keccak256(\\\"PROTOCOL_ROLE\\\");\\nbytes32 constant OPERATION_ROLE = keccak256(\\\"OPERATION_ROLE\\\");\\nbytes32 constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\nbytes32 constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\nuint256 constant BASIC_DAO_RESERVE_NFT_NUMBER = 1000;\\n\"\r\n    },\r\n    \"contracts/interface/D4AEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nenum PriceTemplateType {\\n    EXPONENTIAL_PRICE_VARIATION,\\n    LINEAR_PRICE_VARIATION\\n}\\n\\nenum RewardTemplateType {\\n    LINEAR_REWARD_ISSUANCE,\\n    EXPONENTIAL_REWARD_ISSUANCE\\n}\\n\\nenum TemplateChoice {\\n    PRICE,\\n    REWARD\\n}\\n\\nenum DaoTag {\\n    D4A_DAO,\\n    BASIC_DAO\\n}\\n\\nenum DeployMethod {\\n    REMOVE,\\n    REPLACE,\\n    ADD,\\n    REMOVE_AND_ADD\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { PriceTemplateType, RewardTemplateType } from \\\"./D4AEnums.sol\\\";\\n\\nstruct DaoMetadataParam {\\n    uint256 startDrb;\\n    uint256 mintableRounds;\\n    uint256 floorPriceRank;\\n    uint256 maxNftRank;\\n    uint96 royaltyFee;\\n    string projectUri;\\n    uint256 projectIndex;\\n}\\n\\nstruct DaoMintInfo {\\n    uint32 daoMintCap; // Dao\u7684\u94f8\u9020\u4e0a\u9650\\n    uint32 NFTHolderMintCap; // NftHolder\u7684\u94f8\u9020\u4e0a\u9650\\n    mapping(address minter => UserMintInfo) userMintInfos; // \u7ed9\u5b9aminter\u7684\u5730\u5740\uff0c\u83b7\u53d6\u5df2\u7ecfmint\u7684\u4e2a\u6570\u4ee5\u53camintCap\\n}\\n\\nstruct NftMinterCapInfo {\\n    address nftAddress;\\n    uint256 nftMintCap;\\n}\\n\\nstruct NftMinterCap {\\n    mapping(address nftAddress => bool) nftExistInMapping;\\n    mapping(address nftAddress => uint256) nftHolderMintCap;\\n}\\n\\nstruct UserMintInfo {\\n    uint32 minted;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoMintCapParam {\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n}\\n\\nstruct UserMintCapParam {\\n    address minter;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoETHAndERC20SplitRatioParam {\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\\n\\nstruct TemplateParam {\\n    PriceTemplateType priceTemplateType;\\n    uint256 priceFactor;\\n    RewardTemplateType rewardTemplateType;\\n    uint256 rewardDecayFactor;\\n    bool isProgressiveJackpot;\\n}\\n\\nstruct UpdateRewardParam {\\n    bytes32 daoId;\\n    bytes32 canvasId;\\n    address token;\\n    uint256 startRound;\\n    uint256 currentRound;\\n    uint256 totalRound;\\n    uint256 daoFeeAmount;\\n    uint256 protocolERC20RatioInBps;\\n    uint256 daoCreatorERC20RatioInBps;\\n    uint256 canvasCreatorERC20RatioInBps;\\n    uint256 nftMinterERC20RatioInBps;\\n    uint256 canvasRebateRatioInBps;\\n}\\n\\nstruct MintNftInfo {\\n    string tokenUri;\\n    uint256 flatPrice;\\n}\\n\\nstruct Blacklist {\\n    address[] minterAccounts;\\n    address[] canvasCreatorAccounts;\\n}\\n\\nstruct Whitelist {\\n    bytes32 minterMerkleRoot;\\n    address[] minterNFTHolderPasses;\\n    bytes32 canvasCreatorMerkleRoot;\\n    address[] canvasCreatorNFTHolderPasses;\\n}\\n\\nstruct BasicDaoParam {\\n    uint256 initTokenSupplyRatio;\\n    bytes32 canvasId;\\n    string canvasUri;\\n    string daoName;\\n}\\n\\nstruct ContinuousDaoParam {\\n    uint256 reserveNftNumber;\\n    bool unifiedPriceModeOff;\\n    uint256 unifiedPrice;\\n    bool needMintableWork;\\n    uint256 dailyMintCap;\\n}\\n// \u4fee\u6539Dao\u4e2d\u53c2\u6570\u7684\u7ed3\u6784\u4f53\uff0c\u88ab\u7528\u4e8esetDaoParams\u65b9\u6cd5\\n\\nstruct SetDaoParam {\\n    bytes32 daoId;\\n    uint256 nftMaxSupplyRank;\\n    uint256 mintableRoundRank;\\n    uint256 daoFloorPriceRank;\\n    PriceTemplateType priceTemplateType;\\n    uint256 nftPriceFactor;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n    uint256 dailyMintCap;\\n    uint256 addedDaoToken;\\n    uint256 unifiedPrice;\\n}\\n\\nstruct SetMintCapAndPermissionParam {\\n    bytes32 daoId;\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n    NftMinterCapInfo[] nftMinterCapInfo;\\n    Whitelist whitelist;\\n    Blacklist blacklist;\\n    Blacklist unblacklist;\\n}\\n\\nstruct SetRatioParam {\\n    bytes32 daoId;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nerror NotDaoOwner();\\n\\nerror NotCanvasOwner();\\n\\nerror NotRole(bytes32 role, address account);\\n\\nerror NotCaller(address caller);\\n\\nerror RoyaltyFeeRatioOutOfRange();\\n\\nerror UnauthorizedToExchangeRoyaltyTokenToETH();\\n\\nerror Blacklisted();\\n\\nerror NotInWhitelist();\\n\\nerror InvalidETHRatio();\\n\\nerror ExceedMaxMintableRound();\\n\\nerror ExceedDaoMintableRound();\\n\\nerror NewMintableRoundsFewerThanRewardIssuedRounds();\\n\\nerror InvalidRound();\\n\\nerror ExceedMinterMaxMintAmount();\\n\\nerror NftExceedMaxAmount();\\n\\nerror ZeroFloorPriceCannotUseLinearPriceVariation();\\n\\nerror D4APaused();\\n\\nerror Paused(bytes32 id);\\n\\nerror UriAlreadyExist(string uri);\\n\\nerror UriNotExist(string uri);\\n\\nerror DaoIndexTooLarge();\\n\\nerror DaoIndexAlreadyExist();\\n\\nerror InvalidSignature();\\n\\nerror DaoNotExist();\\n\\nerror CanvasNotExist();\\n\\nerror PriceTooLow();\\n\\nerror NotEnoughEther();\\n\\nerror D4AProjectAlreadyExist(bytes32 daoId);\\n\\nerror D4ACanvasAlreadyExist(bytes32 canvasId);\\n\\nerror StartRoundAlreadyPassed();\\n\\nerror DaoNotStarted();\\n\\nerror NotOperationRole();\\n\\nerror UnableToUnlock();\\n\\nerror BasicDaoLocked();\\n\\nerror NotCanvasIdOfSpecialTokenUri();\\n\\nerror NotBasicDaoNftFlatPrice();\\n\\nerror SupplyOutOfRange();\\n\\nerror ExceedDailyMintCap();\\n\\nerror NotBasicDaoFloorPrice();\\n\\nerror NotBasicDaoOwner();\\n\\nerror ZeroNftReserveNumber();\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ID4AProtocolReadable {\\n    // legacy functions\\n    function getProjectCanvasAt(bytes32 daoId, uint256 index) external view returns (bytes32);\\n\\n    function getProjectInfo(bytes32 daoId)\\n        external\\n        view\\n        returns (\\n            uint256 startRound,\\n            uint256 mintableRound,\\n            uint256 maxNftAmount,\\n            address daoFeePool,\\n            uint96 royaltyFeeRatioInBps,\\n            uint256 index,\\n            string memory daoUri,\\n            uint256 erc20TotalSupply\\n        );\\n\\n    function getProjectFloorPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getProjectTokens(bytes32 daoId) external view returns (address token, address nft);\\n\\n    function getCanvasNFTCount(bytes32 canvasId) external view returns (uint256);\\n\\n    function getTokenIDAt(bytes32 canvasId, uint256 index) external view returns (uint256);\\n\\n    function getCanvasProject(bytes32 canvasId) external view returns (bytes32);\\n\\n    function getCanvasURI(bytes32 canvasId) external view returns (string memory);\\n\\n    function getProjectCanvasCount(bytes32 daoId) external view returns (uint256);\\n\\n    // new functions\\n    // DAO related functions\\n    function getDaoStartRound(bytes32 daoId) external view returns (uint256 startRound);\\n\\n    function getDaoMintableRound(bytes32 daoId) external view returns (uint256 mintableRound);\\n\\n    function getDaoIndex(bytes32 daoId) external view returns (uint256 index);\\n\\n    function getDaoUri(bytes32 daoId) external view returns (string memory daoUri);\\n\\n    function getDaoFeePool(bytes32 daoId) external view returns (address daoFeePool);\\n\\n    function getDaoToken(bytes32 daoId) external view returns (address token);\\n\\n    function getDaoTokenMaxSupply(bytes32 daoId) external view returns (uint256 tokenMaxSupply);\\n\\n    function getDaoNft(bytes32 daoId) external view returns (address nft);\\n\\n    function getDaoNftMaxSupply(bytes32 daoId) external view returns (uint256 nftMaxSupply);\\n\\n    function getDaoNftTotalSupply(bytes32 daoId) external view returns (uint256 nftTotalSupply);\\n\\n    function getDaoNftRoyaltyFeeRatioInBps(bytes32 daoId) external view returns (uint96 royaltyFeeRatioInBps);\\n\\n    function getDaoExist(bytes32 daoId) external view returns (bool);\\n\\n    function getDaoCanvases(bytes32 daoId) external view returns (bytes32[] memory canvases);\\n\\n    function getDaoPriceTemplate(bytes32 daoId) external view returns (address priceTemplate);\\n\\n    function getDaoPriceFactor(bytes32 daoId) external view returns (uint256 priceFactor);\\n\\n    function getDaoRewardTemplate(bytes32 daoId) external view returns (address rewardTemplate);\\n\\n    function getDaoMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getDaoNftHolderMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getUserMintInfo(\\n        bytes32 daoId,\\n        address account\\n    )\\n        external\\n        view\\n        returns (uint32 minted, uint32 userMintCap);\\n\\n    function getDaoFeePoolETHRatio(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoFeePoolETHRatioFlatPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoTag(bytes32 daoId) external view returns (string memory);\\n\\n    // canvas related functions\\n    function getCanvasDaoId(bytes32 canvasId) external view returns (bytes32 daoId);\\n\\n    function getCanvasTokenIds(bytes32 canvasId) external view returns (uint256[] memory tokenIds);\\n\\n    function getCanvasIndex(bytes32 canvasId) external view returns (uint256);\\n\\n    function getCanvasUri(bytes32 canvasId) external view returns (string memory canvasUri);\\n\\n    function getCanvasRebateRatioInBps(bytes32 canvasId) external view returns (uint256 rebateRatioInBps);\\n\\n    function getCanvasExist(bytes32 canvasId) external view returns (bool);\\n\\n    // prices related functions\\n    function getCanvasLastPrice(bytes32 canvasId) external view returns (uint256 round, uint256 price);\\n\\n    function getCanvasNextPrice(bytes32 canvasId) external view returns (uint256 price);\\n\\n    function getDaoMaxPriceInfo(bytes32 daoId) external view returns (uint256 round, uint256 price);\\n\\n    function getDaoFloorPrice(bytes32 daoId) external view returns (uint256 floorPrice);\\n\\n    function getDaoDailyMintCap(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoUnifiedPriceModeOff(bytes32 daoId) external view returns (bool);\\n\\n    function getDaoUnifiedPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoReserveNftNumber(bytes32 daoId) external view returns (uint256);\\n\\n    // reward related functions\\n    function getDaoRewardStartRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 startRound);\\n\\n    function getDaoRewardTotalRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalRound);\\n\\n    function getDaoTotalReward(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalReward);\\n\\n    function getDaoRewardDecayFactor(bytes32 daoId) external view returns (uint256 rewardDecayFactor);\\n\\n    function getDaoRewardIsProgressiveJackpot(bytes32 daoId) external view returns (bool isProgressiveJackpot);\\n\\n    function getDaoRewardLastActiveRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 lastActiveRound);\\n\\n    function getDaoRewardActiveRounds(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory activeRounds);\\n\\n    function getDaoCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getCanvasCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getNftMinterClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getTotalWeight(bytes32 daoId, uint256 round) external view returns (uint256 totalWeight);\\n\\n    function getProtocolWeight(bytes32 daoId, uint256 round) external view returns (uint256 protocolWeight);\\n\\n    function getDaoCreatorWeight(bytes32 daoId, uint256 round) external view returns (uint256 creatorWeight);\\n\\n    function getCanvasCreatorWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 creatorWeight);\\n\\n    function getNftMinterWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 minterWeight);\\n\\n    function getDaoCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getCanvasCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getNftMinterERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) external view returns (uint256);\\n\\n    function getRewardTillRound(bytes32 daoId, uint256 round) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AProtocolSetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {\\n    UserMintCapParam,\\n    TemplateParam,\\n    Whitelist,\\n    Blacklist,\\n    SetDaoParam,\\n    NftMinterCapInfo\\n} from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { PriceTemplateType } from \\\"contracts/interface/D4AEnums.sol\\\";\\n\\ninterface ID4AProtocolSetter {\\n    event MintCapSet(\\n        bytes32 indexed daoId,\\n        uint32 daoMintCap,\\n        UserMintCapParam[] userMintCapParams,\\n        NftMinterCapInfo[] nftMinterCapInfo\\n    );\\n\\n    event DaoPriceTemplateSet(bytes32 indexed daoId, PriceTemplateType priceTemplateType, uint256 nftPriceFactor);\\n\\n    event CanvasRebateRatioInBpsSet(bytes32 indexed canvasId, uint256 newCanvasRebateRatioInBps);\\n\\n    event DaoNftMaxSupplySet(bytes32 indexed daoId, uint256 newMaxSupply);\\n\\n    event DaoMintableRoundSet(bytes32 daoId, uint256 newMintableRounds);\\n\\n    event DaoFloorPriceSet(bytes32 daoId, uint256 newFloorPrice);\\n\\n    event DaoTemplateSet(bytes32 daoId, TemplateParam templateParam);\\n\\n    event DaoRatioSet(\\n        bytes32 daoId,\\n        uint256 daoCreatorERC20Ratio,\\n        uint256 canvasCreatorERC20Ratio,\\n        uint256 nftMinterERC20Ratio,\\n        uint256 daoFeePoolETHRatio,\\n        uint256 daoFeePoolETHRatioFlatPrice\\n    );\\n\\n    event DailyMintCapSet(bytes32 indexed daoId, uint256 dailyMintCap);\\n\\n    event DaoTokenSupplySet(bytes32 daoId, uint256 addedDaoToken);\\n\\n    event WhiteListMintCapSet(bytes32 daoId, address whitelistUser, uint256 whitelistUserMintCap);\\n\\n    event DaoUnifiedPriceSet(bytes32 daoId, uint256 newUnifiedPrice);\\n\\n    function setMintCapAndPermission(\\n        bytes32 daoId,\\n        uint32 daoMintCap,\\n        UserMintCapParam[] calldata userMintCapParams,\\n        NftMinterCapInfo[] calldata nftMinterCapInfo,\\n        Whitelist memory whitelist,\\n        Blacklist memory blacklist,\\n        Blacklist memory unblacklist\\n    )\\n        external;\\n\\n    function setDaoParams(SetDaoParam memory vars) external;\\n\\n    function setDaoPriceTemplate(bytes32 daoId, PriceTemplateType priceTemplateType, uint256 priceFactor) external;\\n\\n    function setDaoNftMaxSupply(bytes32 daoId, uint256 newMaxSupply) external;\\n\\n    function setDaoMintableRound(bytes32 daoId, uint256 newMintableRound) external;\\n\\n    function setDaoFloorPrice(bytes32 daoId, uint256 newFloorPrice) external;\\n\\n    function setTemplate(bytes32 daoId, TemplateParam calldata templateParam) external;\\n\\n    function setDailyMintCap(bytes32 daoId, uint256 dailyMintCap) external;\\n\\n    function setDaoTokenSupply(bytes32 daoId, uint256 addedDaoToken) external;\\n\\n    function setWhitelistMintCap(bytes32 daoId, address whitelistUser, uint32 whitelistUserMintCap) external;\\n\\n    function setRatio(\\n        bytes32 daoId,\\n        uint256 daoCreatorERC20Ratio,\\n        uint256 canvasCreatorERC20Ratio,\\n        uint256 nftMinterERC20Ratio,\\n        uint256 daoFeePoolETHRatio,\\n        uint256 daoFeePoolETHRatioFlatPrice\\n    )\\n        external;\\n\\n    function setCanvasRebateRatioInBps(bytes32 canvasId, uint256 newCanvasRebateRatioInBps) external payable;\\n\\n    function setDaoUnifiedPrice(bytes32 daoId, uint256 newUnifiedPrice) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4ACreate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { DaoMetadataParam } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ICreate } from \\\"contracts/interface/ICreate.sol\\\";\\n\\ninterface ID4ACreate is ICreate {\\n    function createProject(\\n        uint256 startRound,\\n        uint256 mintableRound,\\n        uint256 daoFloorPriceRank,\\n        uint256 nftMaxSupplyRank,\\n        uint96 royaltyFeeRatioInBps,\\n        string calldata daoUri\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createOwnerProject(DaoMetadataParam calldata daoMetadataParam) external payable returns (bytes32 daoId);\\n\\n    function createCanvas(\\n        bytes32 daoId,\\n        string calldata canvasUri,\\n        bytes32[] calldata proof,\\n        uint256 canvasRebateRatioInBps\\n    )\\n        external\\n        payable\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPDCreate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { DaoMetadataParam, BasicDaoParam, ContinuousDaoParam } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ICreate } from \\\"contracts/interface/ICreate.sol\\\";\\n\\ninterface IPDCreate is ICreate {\\n    function createBasicDao(\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createOwnerBasicDao(\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createContinuousDao(\\n        bytes32 existDaoId,\\n        DaoMetadataParam memory daoMetadataParam,\\n        BasicDaoParam memory basicDaoParam,\\n        ContinuousDaoParam memory continuousDaoParam\\n    )\\n        external\\n        payable\\n        returns (bytes32 daoId);\\n\\n    function createCanvas(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        string calldata canvasUri,\\n        bytes32[] calldata proof,\\n        address to\\n    )\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AERC721 {\\n    function mintItem(address player, string memory tokenURI) external returns (uint256);\\n\\n    function setRoyaltyInfo(address _receiver, uint96 _royaltyFeeInBips) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4ARoyaltySplitterFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4ARoyaltySplitterFactory {\\n    function createD4ARoyaltySplitter(\\n        address protocolFeePool,\\n        uint256 protocolShare,\\n        address daoFeePool,\\n        uint256 daoShare\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/D4ASettings/ID4ASettingsReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IPermissionControl } from \\\"contracts/interface/IPermissionControl.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"contracts/interface/ID4AOwnerProxy.sol\\\";\\n\\ninterface ID4ASettingsReadable {\\n    function permissionControl() external view returns (IPermissionControl);\\n\\n    function ownerProxy() external view returns (ID4AOwnerProxy);\\n\\n    function mintProtocolFeeRatio() external view returns (uint256);\\n\\n    function protocolFeePool() external view returns (address);\\n\\n    function tradeProtocolFeeRatio() external view returns (uint256);\\n\\n    function mintProjectFeeRatio() external view returns (uint256);\\n\\n    function mintProjectFeeRatioFlatPrice() external view returns (uint256);\\n\\n    function ratioBase() external view returns (uint256);\\n\\n    function createProjectFee() external view returns (uint256);\\n\\n    function createCanvasFee() external view returns (uint256);\\n\\n    function getPriceTemplates() external view returns (address[] memory priceTemplates);\\n\\n    function getRewardTemplates() external view returns (address[] memory rewardTemplates);\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/IReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n}\\n\"\r\n    },\r\n    \"node_modules/@solidstate/contracts/security/reentrancy_guard/ReentrancyGuardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICreate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ICreate {\\n    event NewProject(\\n        bytes32 daoId, string daoUri, address daoFeePool, address token, address nft, uint256 royaltyFeeRatioInBps\\n    );\\n\\n    event NewCanvas(bytes32 daoId, bytes32 canvasId, string canvasUri);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport { Whitelist, Blacklist } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"contracts/interface/ID4AOwnerProxy.sol\\\";\\n\\ninterface IPermissionControl {\\n    event MinterBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event MinterUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event WhitelistModified(bytes32 indexed daoId, Whitelist whitelist);\\n\\n    function getWhitelist(bytes32 daoId) external view returns (Whitelist calldata whitelist);\\n\\n    function addPermissionWithSignature(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        bytes calldata signature\\n    )\\n        external;\\n\\n    function addPermission(bytes32 daoId, Whitelist calldata whitelist, Blacklist calldata blacklist) external;\\n\\n    function modifyPermission(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        Blacklist calldata unblacklist\\n    )\\n        external;\\n\\n    function isMinterBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function isCanvasCreatorBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function inMinterWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inMinterNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function inCanvasCreatorWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inCanvasCreatorNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function setOwnerProxy(ID4AOwnerProxy _ownerProxy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AOwnerProxy {\\n    function ownerOf(bytes32 hash) external view returns (address);\\n    function initOwnerOf(bytes32 hash, address addr) external returns (bool);\\n    function transferOwnership(bytes32 hash, address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidstate/=node_modules/@solidstate/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotBasicDaoOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFloorPriceCannotUseLinearPriceVariation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroNftReserveNumber\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"existDaoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"needMintableWork\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unifiedPriceModeOff\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unifiedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveNftNumber\",\"type\":\"uint256\"}],\"name\":\"CreateContinuousProjectParamEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoFeePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDrb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPriceRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNftRank\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DaoMetadataParam\",\"name\":\"daoMetadataParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"minterMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"minterNFTHolderPasses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"canvasCreatorMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorNFTHolderPasses\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct Whitelist\",\"name\":\"whitelist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"minterAccounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorAccounts\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct Blacklist\",\"name\":\"blacklist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daoMintCap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mintCap\",\"type\":\"uint32\"}],\"internalType\":\"struct UserMintCapParam[]\",\"name\":\"userMintCapParams\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct DaoMintCapParam\",\"name\":\"daoMintCapParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canvasCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMinterERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatioFlatPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DaoETHAndERC20SplitRatioParam\",\"name\":\"splitRatioParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PriceTemplateType\",\"name\":\"priceTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardTemplateType\",\"name\":\"rewardTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TemplateParam\",\"name\":\"templateParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initTokenSupplyRatio\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"canvasUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct BasicDaoParam\",\"name\":\"basicDaoParam\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"CreateProjectParamEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoFeePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDrb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPriceRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNftRank\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DaoMetadataParam\",\"name\":\"daoMetadataParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"minterMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"minterNFTHolderPasses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"canvasCreatorMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorNFTHolderPasses\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct Whitelist\",\"name\":\"whitelist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"minterAccounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorAccounts\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct Blacklist\",\"name\":\"blacklist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daoMintCap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mintCap\",\"type\":\"uint32\"}],\"internalType\":\"struct UserMintCapParam[]\",\"name\":\"userMintCapParams\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct DaoMintCapParam\",\"name\":\"daoMintCapParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canvasCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMinterERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatioFlatPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DaoETHAndERC20SplitRatioParam\",\"name\":\"splitRatioParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PriceTemplateType\",\"name\":\"priceTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardTemplateType\",\"name\":\"rewardTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TemplateParam\",\"name\":\"templateParam\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"CreateProjectParamEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDrb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPriceRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNftRank\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoMetadataParam\",\"name\":\"daoMetadataParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"minterMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"minterNFTHolderPasses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"canvasCreatorMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorNFTHolderPasses\",\"type\":\"address[]\"}],\"internalType\":\"struct Whitelist\",\"name\":\"whitelist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"minterAccounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorAccounts\",\"type\":\"address[]\"}],\"internalType\":\"struct Blacklist\",\"name\":\"blacklist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daoMintCap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mintCap\",\"type\":\"uint32\"}],\"internalType\":\"struct UserMintCapParam[]\",\"name\":\"userMintCapParams\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DaoMintCapParam\",\"name\":\"daoMintCapParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canvasCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMinterERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatioFlatPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoETHAndERC20SplitRatioParam\",\"name\":\"splitRatioParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PriceTemplateType\",\"name\":\"priceTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardTemplateType\",\"name\":\"rewardTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"internalType\":\"struct TemplateParam\",\"name\":\"templateParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initTokenSupplyRatio\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"canvasUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"}],\"internalType\":\"struct BasicDaoParam\",\"name\":\"basicDaoParam\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"createBasicDao\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"existDaoId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDrb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPriceRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNftRank\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoMetadataParam\",\"name\":\"daoMetadataParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"minterMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"minterNFTHolderPasses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"canvasCreatorMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorNFTHolderPasses\",\"type\":\"address[]\"}],\"internalType\":\"struct Whitelist\",\"name\":\"whitelist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"minterAccounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorAccounts\",\"type\":\"address[]\"}],\"internalType\":\"struct Blacklist\",\"name\":\"blacklist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daoMintCap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mintCap\",\"type\":\"uint32\"}],\"internalType\":\"struct UserMintCapParam[]\",\"name\":\"userMintCapParams\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DaoMintCapParam\",\"name\":\"daoMintCapParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canvasCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMinterERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatioFlatPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoETHAndERC20SplitRatioParam\",\"name\":\"splitRatioParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PriceTemplateType\",\"name\":\"priceTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardTemplateType\",\"name\":\"rewardTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"internalType\":\"struct TemplateParam\",\"name\":\"templateParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initTokenSupplyRatio\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"canvasUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"}],\"internalType\":\"struct BasicDaoParam\",\"name\":\"basicDaoParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveNftNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unifiedPriceModeOff\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unifiedPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needMintableWork\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dailyMintCap\",\"type\":\"uint256\"}],\"internalType\":\"struct ContinuousDaoParam\",\"name\":\"continuousDaoParam\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"createContinuousDao\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDrb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPriceRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNftRank\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoMetadataParam\",\"name\":\"daoMetadataParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"minterMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"minterNFTHolderPasses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"canvasCreatorMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorNFTHolderPasses\",\"type\":\"address[]\"}],\"internalType\":\"struct Whitelist\",\"name\":\"whitelist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"minterAccounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canvasCreatorAccounts\",\"type\":\"address[]\"}],\"internalType\":\"struct Blacklist\",\"name\":\"blacklist\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daoMintCap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mintCap\",\"type\":\"uint32\"}],\"internalType\":\"struct UserMintCapParam[]\",\"name\":\"userMintCapParams\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DaoMintCapParam\",\"name\":\"daoMintCapParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canvasCreatorERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMinterERC20Ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoFeePoolETHRatioFlatPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoETHAndERC20SplitRatioParam\",\"name\":\"splitRatioParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PriceTemplateType\",\"name\":\"priceTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum RewardTemplateType\",\"name\":\"rewardTemplateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"internalType\":\"struct TemplateParam\",\"name\":\"templateParam\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d4aswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d4aswapFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltySplitterFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltySplitterOwner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltySplitterFactory\",\"outputs\":[{\"internalType\":\"contract ID4ARoyaltySplitterFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltySplitterOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"royaltySplitters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltySplitter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRoyaltySplitterFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRoyaltySplitterOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newD4AswapFactory\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PDCreateProjectProxy", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}