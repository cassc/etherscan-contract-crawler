{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PledgesRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary PledgesRepo {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum StateOfPld {\\n        Pending,\\n        Issued,\\n        Locked,\\n        Released,\\n        Executed,\\n        Revoked\\n    }\\n\\n    struct Head {\\n        uint32 seqOfShare;\\n        uint16 seqOfPld;\\n        uint48 createDate;\\n        uint16 daysToMaturity;\\n        uint16 guaranteeDays;\\n        uint40 creditor;\\n        uint40 debtor;\\n        uint40 pledgor;\\n        uint8 state;\\n    }\\n\\n    struct Body {\\n        uint64 paid;\\n        uint64 par;\\n        uint64 guaranteedAmt;\\n        uint16 preSeq;\\n        uint16 execDays;\\n        uint16 para;\\n        uint16 argu;\\n    }\\n\\n    //Pledge \u8d28\u6743\\n    struct Pledge {\\n        Head head; //\u8d28\u62bc\u7f16\u53f7\\n        Body body;\\n        bytes32 hashLock;\\n    }\\n\\n    struct Repo{\\n        // seqOfShare => seqOfPld => Pledge\\n        mapping(uint256 => mapping(uint256 => Pledge)) pledges;\\n        EnumerableSet.Bytes32Set snList;\\n    }\\n\\n    //##################\\n    //##  Write I/O  ##\\n    //##################\\n\\n    function snParser(bytes32 sn) public pure returns (Head memory head) {\\n        uint _sn = uint(sn);\\n        \\n        head = Head({\\n            seqOfShare: uint32(_sn >> 224),\\n            seqOfPld: uint16(_sn >> 208),\\n            createDate: uint48(_sn >> 160),\\n            daysToMaturity: uint16(_sn >> 144),\\n            guaranteeDays: uint16(_sn >> 128),\\n            creditor: uint40(_sn >> 88),\\n            debtor: uint40(_sn >> 48),\\n            pledgor: uint40(_sn >> 8),\\n            state: uint8(_sn)\\n        });\\n    } \\n\\n    function codifyHead(Head memory head) public pure returns (bytes32 sn) {\\n        bytes memory _sn = abi.encodePacked(\\n                            head.seqOfShare,\\n                            head.seqOfPld,\\n                            head.createDate,\\n                            head.daysToMaturity,\\n                            head.guaranteeDays,\\n                            head.creditor,\\n                            head.pledgor,\\n                            head.debtor,\\n                            head.state);        \\n        assembly {\\n            sn := mload(add(_sn, 0x20))\\n        }\\n\\n    } \\n\\n    function createPledge(\\n            Repo storage repo, \\n            bytes32 snOfPld, \\n            uint paid,\\n            uint par,\\n            uint guaranteedAmt,\\n            uint execDays\\n    ) public returns (Head memory head) \\n    {\\n        head = snParser(snOfPld);\\n        head = issuePledge(repo, head, paid, par, guaranteedAmt, execDays);\\n    }\\n\\n    function issuePledge(\\n        Repo storage repo,\\n        Head memory head,\\n        uint paid,\\n        uint par,\\n        uint guaranteedAmt,\\n        uint execDays\\n    ) public returns(Head memory regHead) {\\n\\n        require (guaranteedAmt > 0, \\\"PR.issuePld: zero guaranteedAmt\\\");\\n        require (par > 0, \\\"PR.issuePld: zero par\\\");\\n        require (par >= paid, \\\"PR.issuePld: paid overflow\\\");\\n\\n        Pledge memory pld;\\n\\n        pld.head = head;\\n\\n        pld.head.createDate = uint48(block.timestamp);\\n        pld.head.state = uint8(StateOfPld.Issued);\\n\\n        pld.body = Body({\\n            paid: uint64(paid),\\n            par: uint64(par),\\n            guaranteedAmt: uint64(guaranteedAmt),\\n            preSeq:0,\\n            execDays: uint16(execDays),\\n            para:0,\\n            argu:0\\n        });\\n\\n        regHead = regPledge(repo, pld);\\n    }\\n\\n    function regPledge(\\n        Repo storage repo,\\n        Pledge memory pld\\n    ) public returns(Head memory){\\n\\n        require(pld.head.seqOfShare > 0,\\\"PR.regPledge: zero seqOfShare\\\");\\n    \\n        pld.head.seqOfPld = _increaseCounterOfPld(repo, pld.head.seqOfShare);\\n\\n        repo.pledges[pld.head.seqOfShare][pld.head.seqOfPld] = pld;\\n        repo.snList.add(codifyHead(pld.head));\\n\\n        return pld.head;\\n    }\\n\\n    // ==== Update Pledge ====\\n\\n    function splitPledge(\\n        Repo storage repo,\\n        uint256 seqOfShare,\\n        uint256 seqOfPld,\\n        uint buyer,\\n        uint amt,\\n        uint caller\\n    ) public returns(Pledge memory newPld) {\\n\\n        Pledge storage pld = repo.pledges[seqOfShare][seqOfPld];\\n\\n        require(caller == pld.head.creditor, \\\"PR.splitPld: not creditor\\\");\\n\\n        require(!isExpired(pld), \\\"PR.splitPld: pledge expired\\\");\\n        require(pld.head.state == uint8(StateOfPld.Issued) ||\\n            pld.head.state == uint8(StateOfPld.Locked), \\\"PR.splitPld: wrong state\\\");\\n        require(amt > 0, \\\"PR.splitPld: zero amt\\\");\\n        // require(amt <= pld.body.guaranteedAmt, \\\"PR.splitPld: amt overflow\\\");\\n\\n        newPld = pld;\\n\\n        if (amt < pld.body.guaranteedAmt) {\\n            uint64 ratio = uint64(amt) * 10000 / newPld.body.guaranteedAmt;\\n\\n            newPld.body.paid = pld.body.paid * ratio / 10000;\\n            newPld.body.par = pld.body.par * ratio / 10000;\\n            newPld.body.guaranteedAmt = uint64(amt);\\n\\n            pld.body.paid -= newPld.body.paid;\\n            pld.body.par -= newPld.body.par;\\n            pld.body.guaranteedAmt -= newPld.body.guaranteedAmt;\\n\\n        } else if (amt == pld.body.guaranteedAmt) {\\n\\n            pld.head.state = uint8(StateOfPld.Released);\\n\\n        } else revert(\\\"PR.splitPld: amt overflow\\\");\\n\\n        if (buyer > 0) {\\n            newPld.body.preSeq = pld.head.seqOfPld;\\n\\n            newPld.head.creditor = uint40(buyer);\\n            newPld.head = regPledge(repo, newPld);\\n        }\\n    }\\n\\n    function extendPledge(\\n        Pledge storage pld,\\n        uint extDays,\\n        uint caller\\n    ) public {\\n        require(caller == pld.head.pledgor, \\\"PR.extendPld: not pledgor\\\");\\n        require(pld.head.state == uint8(StateOfPld.Issued) ||\\n            pld.head.state == uint8(StateOfPld.Locked), \\\"PR.EP: wrong state\\\");\\n        require(!isExpired(pld), \\\"PR.UP: pledge expired\\\");\\n        pld.head.guaranteeDays += uint16(extDays);\\n    }\\n\\n    // ==== Lock & Release ====\\n\\n    function lockPledge(\\n        Pledge storage pld,\\n        bytes32 hashLock,\\n        uint caller\\n    ) public {\\n        require(caller == pld.head.creditor, \\\"PR.lockPld: not creditor\\\");        \\n        require (!isExpired(pld), \\\"PR.lockPld: pledge expired\\\");\\n        require (hashLock != bytes32(0), \\\"PR.lockPld: zero hashLock\\\");\\n\\n        if (pld.head.state == uint8(StateOfPld.Issued)){\\n            pld.head.state = uint8(StateOfPld.Locked);\\n            pld.hashLock = hashLock;\\n        } else revert (\\\"PR.lockPld: wrong state\\\");\\n    }\\n\\n    function releasePledge(\\n        Pledge storage pld,\\n        string memory hashKey\\n    ) public {\\n        require (pld.head.state == uint8(StateOfPld.Locked), \\\"PR.RP: wrong state\\\");\\n        if (pld.hashLock == keccak256(bytes(hashKey))) {\\n            pld.head.state = uint8(StateOfPld.Released);\\n        } else revert(\\\"PR.releasePld: wrong Key\\\");\\n    }\\n\\n    function execPledge(Pledge storage pld, uint caller) public {\\n\\n        require(caller == pld.head.creditor, \\\"PR.execPld: not creditor\\\");\\n        require(isTriggerd(pld), \\\"PR.execPld: pledge not triggered\\\");\\n        require(!isExpired(pld), \\\"PR.execPld: pledge expired\\\");\\n\\n        if (pld.head.state == uint8(StateOfPld.Issued) ||\\n            pld.head.state == uint8(StateOfPld.Locked))\\n        {\\n            pld.head.state = uint8(StateOfPld.Executed);\\n        } else revert (\\\"PR.execPld: wrong state\\\");\\n    }\\n\\n    function revokePledge(Pledge storage pld, uint caller) public {\\n        require(caller == pld.head.pledgor, \\\"PR.revokePld: not pledgor\\\");\\n        require(isExpired(pld), \\\"PR.revokePld: pledge not expired\\\");\\n\\n        if (pld.head.state == uint8(StateOfPld.Issued) || \\n            pld.head.state == uint8(StateOfPld.Locked)) \\n        {\\n            pld.head.state = uint8(StateOfPld.Revoked);\\n        } else revert (\\\"PR.revokePld: wrong state\\\");\\n    }\\n\\n    // ==== Counter ====\\n\\n    function _increaseCounterOfPld(Repo storage repo, uint256 seqOfShare) \\n        private returns (uint16 seqOfPld) \\n    {\\n        repo.pledges[seqOfShare][0].head.seqOfPld++;\\n        seqOfPld = repo.pledges[seqOfShare][0].head.seqOfPld;\\n    }\\n\\n    //#################\\n    //##    \u8bfb\u63a5\u53e3    ##\\n    //#################\\n\\n    function isTriggerd(Pledge storage pld) public view returns(bool) {\\n        uint64 triggerDate = pld.head.createDate + uint48(pld.head.daysToMaturity) * 86400;\\n        return block.timestamp >= triggerDate;\\n    }\\n\\n    function isExpired(Pledge storage pld) public view returns(bool) {\\n        uint64 expireDate = pld.head.createDate + uint48(pld.head.daysToMaturity + pld.head.guaranteeDays) * 86400;\\n        return block.timestamp >= expireDate;\\n    }\\n\\n    function counterOfPld(Repo storage repo, uint256 seqOfShare) \\n        public view returns (uint16) \\n    {\\n        return repo.pledges[seqOfShare][0].head.seqOfPld;\\n    }\\n\\n    function isPledge(Repo storage repo, uint seqOfShare, uint seqOfPledge) \\n        public view returns (bool)\\n    {\\n        return repo.pledges[seqOfShare][seqOfPledge].head.createDate > 0;\\n    }\\n\\n    function getSNList(Repo storage repo) public view returns (bytes32[] memory list)\\n    {\\n        list = repo.snList.values();\\n    }\\n\\n    function getPledge(Repo storage repo, uint256 seqOfShare, uint seqOfPld) \\n        public view returns (Pledge memory)\\n    {\\n        return repo.pledges[seqOfShare][seqOfPld];\\n    } \\n\\n    function getPledgesOfShare(Repo storage repo, uint256 seqOfShare) \\n        public view returns (Pledge[] memory) \\n    {\\n        uint256 len = counterOfPld(repo, seqOfShare);\\n\\n        // require(len > 0, \\\"PR.getPldsOfShare: no pledges found\\\");\\n\\n        Pledge[] memory output = new Pledge[](len);\\n\\n        while (len > 0) {\\n            output[len - 1] = repo.pledges[seqOfShare][len];\\n            len--;\\n        }\\n\\n        return output;\\n    }\\n\\n    function getAllPledges(Repo storage repo) \\n        public view returns (Pledge[] memory)\\n    {\\n        bytes32[] memory snList = getSNList(repo);\\n        uint len = snList.length;\\n        Pledge[] memory ls = new Pledge[](len);\\n\\n        while( len > 0 ) {\\n            Head memory head = snParser(snList[len - 1]);\\n            ls[len - 1] = repo.pledges[head.seqOfShare][head.seqOfPld];\\n            len--;\\n        }\\n\\n        return ls;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"seqOfPld\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"createDate\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"daysToMaturity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"guaranteeDays\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"creditor\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"debtor\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"pledgor\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct PledgesRepo.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"name\":\"codifyHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"snParser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"seqOfPld\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"createDate\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"daysToMaturity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"guaranteeDays\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"creditor\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"debtor\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"pledgor\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct PledgesRepo.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PledgesRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}