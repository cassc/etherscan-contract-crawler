{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/strategies/NFTXLiquidityPoolStakingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20, SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport {IERC1155} from '@openzeppelin/contracts/interfaces/IERC1155.sol';\\n\\nimport {CannotDepositZeroAmount, CannotWithdrawZeroAmount, NoRewardsAvailableToClaim} from '@floor/utils/Errors.sol';\\n\\nimport {BaseStrategy, InsufficientPosition, ZeroAmountReceivedFromWithdraw} from '@floor/strategies/BaseStrategy.sol';\\n\\nimport {ITimelockRewardDistributionToken} from '@floor-interfaces/nftx/TimelockRewardDistributionToken.sol';\\nimport {INFTXVault} from '@floor-interfaces/nftx/NFTXVault.sol';\\nimport {INFTXLiquidityStaking} from '@floor-interfaces/nftx/NFTXLiquidityStaking.sol';\\nimport {INFTXStakingZap} from '@floor-interfaces/nftx/NFTXStakingZap.sol';\\nimport {IWETH} from '@floor-interfaces/tokens/WETH.sol';\\n\\n/**\\n * Supports an Liquidity Staking position against a single NFTX vault. This strategy\\n * will hold the corresponding xToken against deposits.\\n *\\n * The contract will extend the {BaseStrategy} to ensure it conforms to the required\\n * logic and functionality. Only functions that have varied internal logic have been\\n * included in this interface with function documentation to explain.\\n *\\n * @dev This contract does not support PUNK tokens. If a strategy needs to be established\\n * then it should be done through another, bespoke contract.\\n */\\ncontract NFTXLiquidityPoolStakingStrategy is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    /// The NFTX vault ID that the strategy is attached to\\n    uint public vaultId;\\n\\n    /// The underlying token will be the same as the address of the NFTX vault.\\n    address public underlyingToken;\\n\\n    /// The dividend token will be a vault xToken as defined by the LP contract.\\n    address public dividendToken;\\n\\n    /// The reward token will be a vToken as defined by the LP contract.\\n    address public rewardToken;\\n\\n    /// The ERC721 / ERC1155 token asset for the NFTX vault\\n    address public assetAddress;\\n\\n    /// The NFTX zap addresses\\n    INFTXLiquidityStaking public liquidityStaking;\\n    INFTXStakingZap public stakingZap;\\n\\n    /// Track the amount of deposit token\\n    uint public deposits;\\n\\n    // Store our WETH reference\\n    IWETH public WETH;\\n\\n    /**\\n     * Sets up our contract variables.\\n     *\\n     * @param _name The name of the strategy\\n     * @param _strategyId ID index of the strategy created\\n     * @param _initData Encoded data to be decoded\\n     */\\n    function initialize(bytes32 _name, uint _strategyId, bytes calldata _initData) public initializer {\\n        // Set our strategy name\\n        name = _name;\\n\\n        // Set our strategy ID\\n        strategyId = _strategyId;\\n\\n        // Extract the NFTX information from our initialisation bytes data\\n        (\\n            uint _vaultId,\\n            address _underlyingToken,\\n            address _dividendToken,\\n            address _rewardToken,\\n            address _liquidityStaking,\\n            address _stakingZap,\\n            address _weth\\n        ) = abi.decode(_initData, (uint, address, address, address, address, address, address));\\n\\n        // Map our NFTX information\\n        vaultId = _vaultId;\\n        underlyingToken = _underlyingToken;\\n        dividendToken = _dividendToken;\\n        rewardToken = _rewardToken;\\n        stakingZap = INFTXStakingZap(_stakingZap);\\n        liquidityStaking = INFTXLiquidityStaking(_liquidityStaking);\\n\\n        // Register our WETH contract address\\n        WETH = IWETH(_weth);\\n\\n        // Set our ERC721 / ERC1155 token asset address\\n        assetAddress = INFTXVault(_rewardToken).assetAddress();\\n\\n        // Set the underlying token as valid to process\\n        _validTokens[underlyingToken] = true;\\n\\n        // Transfer ownership to the caller\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * Deposit the underlying token into the LP staking pool.\\n     *\\n     * @return amount_ Amount of dividend token returned from NFTX\\n     */\\n    function depositErc20(uint amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updatesPosition(dividendToken)\\n        returns (uint amount_)\\n    {\\n        // Prevent users from trying to deposit nothing\\n        if (amount == 0) {\\n            revert CannotDepositZeroAmount();\\n        }\\n\\n        // Capture our starting balance\\n        uint startXTokenBalance = IERC20(dividendToken).balanceOf(address(this));\\n\\n        // Transfer the underlying token from our caller\\n        IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\\n        deposits += amount;\\n\\n        // Approve the NFTX contract against our underlying token\\n        IERC20(underlyingToken).approve(address(liquidityStaking), amount);\\n\\n        // Deposit the token into the NFTX contract\\n        liquidityStaking.deposit(vaultId, amount);\\n\\n        // Determine the amount of dividend token returned from our deposit\\n        amount_ = IERC20(dividendToken).balanceOf(address(this)) - startXTokenBalance;\\n    }\\n\\n    function depositErc721(uint[] calldata tokenIds, uint minWethIn, uint wethIn)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updatesPosition(dividendToken)\\n        refundsWeth\\n    {\\n        // Pull tokens in\\n        uint tokensLength = tokenIds.length;\\n        for (uint i; i < tokensLength;) {\\n            IERC721(assetAddress).transferFrom(msg.sender, address(this), tokenIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Pull our WETH from the sender\\n        WETH.transferFrom(msg.sender, address(this), wethIn);\\n\\n        // Approve stakingZap and WETH allocation\\n        IERC721(assetAddress).setApprovalForAll(address(stakingZap), true);\\n        IERC20(WETH).approve(address(stakingZap), wethIn);\\n\\n        // Push tokens out with WETH allocation\\n        stakingZap.addLiquidity721To(vaultId, tokenIds, minWethIn, wethIn, address(this));\\n    }\\n\\n    function depositErc1155(uint[] calldata tokenIds, uint[] calldata amounts, uint minWethIn, uint wethIn)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updatesPosition(dividendToken)\\n        refundsWeth\\n    {\\n        // Pull tokens in\\n        IERC1155(assetAddress).safeBatchTransferFrom(msg.sender, address(this), tokenIds, amounts, '');\\n\\n        // Pull our WETH from the sender\\n        WETH.transferFrom(msg.sender, address(this), wethIn);\\n\\n        // Approve stakingZap and WETH allocation\\n        IERC1155(assetAddress).setApprovalForAll(address(stakingZap), true);\\n        IERC20(WETH).approve(address(stakingZap), wethIn);\\n\\n        // Push tokens out\\n        stakingZap.addLiquidity1155To(vaultId, tokenIds, amounts, minWethIn, wethIn, address(this));\\n    }\\n\\n    /**\\n     * Withdraws an amount of our position from the NFTX strategy.\\n     *\\n     * @dev Implements `nonReentrant` through `_withdrawErc20`\\n     *\\n     * @param amount Amount of dividend token to withdraw\\n     *\\n     * @return amount_ Amount of the underlying token returned\\n     */\\n    function withdrawErc20(address recipient, uint amount) external onlyOwner returns (uint) {\\n        // Prevent users from trying to claim nothing\\n        if (amount == 0) {\\n            revert CannotWithdrawZeroAmount();\\n        }\\n\\n        return _withdrawErc20(recipient, amount);\\n    }\\n\\n    /**\\n     * Makes a call to a strategy to withdraw a percentage of the deposited holdings.\\n     *\\n     * @param recipient Recipient of the withdrawal\\n     * @param percentage The 2 decimal accuracy of the percentage to withdraw (e.g. 100% = 10000)\\n     */\\n    function withdrawPercentage(address recipient, uint percentage)\\n        external\\n        override\\n        onlyOwner\\n        returns (address[] memory tokens_, uint[] memory amounts_)\\n    {\\n        // Get the total amount of underlyingToken that has been deposited. From that, take\\n        // the percentage of the token.\\n        uint amount = (position[dividendToken] * percentage) / 100_00;\\n\\n        tokens_ = validTokens();\\n\\n        // Call our internal {withdrawErc20} function to move tokens to the caller\\n        amounts_ = new uint[](1);\\n        amounts_[0] = _withdrawErc20(recipient, amount);\\n    }\\n\\n    function _withdrawErc20(address recipient, uint amount) internal nonReentrant returns (uint amount_) {\\n        // Ensure our user has sufficient position to withdraw from\\n        if (amount > position[dividendToken]) {\\n            revert InsufficientPosition(dividendToken, amount, position[dividendToken]);\\n        }\\n\\n        // Capture our starting balance\\n        uint startTokenBalance = IERC20(underlyingToken).balanceOf(address(this));\\n\\n        // Process our withdrawal against the NFTX contract\\n        liquidityStaking.withdraw(vaultId, amount);\\n\\n        // Determine the amount of `underlyingToken` received\\n        amount_ = IERC20(underlyingToken).balanceOf(address(this)) - startTokenBalance;\\n        if (amount_ == 0) {\\n            revert ZeroAmountReceivedFromWithdraw();\\n        }\\n\\n        // Transfer the received token to the caller\\n        IERC20(underlyingToken).safeTransfer(recipient, amount_);\\n\\n        unchecked {\\n            deposits -= amount_;\\n\\n            // We can now reduce the users position and total position held by the strategy\\n            position[dividendToken] -= amount;\\n        }\\n\\n        // Fire an event to show amount of token claimed and the recipient\\n        emit Withdraw(underlyingToken, amount_, recipient);\\n    }\\n\\n    /**\\n     * Gets rewards that are available to harvest.\\n     */\\n    function available() public view override returns (address[] memory tokens_, uint[] memory amounts_) {\\n        // Set up our return arrays\\n        tokens_ = new address[](1);\\n        amounts_ = new uint[](1);\\n\\n        // Assign our dividend token as the return\\n        tokens_[0] = rewardToken;\\n\\n        // Get the xToken balance held by the strategy that is in addition to the amount\\n        // deposited. This should show only the gain / rewards generated.\\n        amounts_[0] = ITimelockRewardDistributionToken(dividendToken).dividendOf(address(this));\\n    }\\n\\n    /**\\n     * Extracts all rewards from third party and moves it to a recipient. This should\\n     * only be called by a specific action via the {StrategyFactory}.\\n     */\\n    function harvest(address _recipient) external override onlyOwner {\\n        (, uint[] memory amounts) = this.available();\\n\\n        if (amounts[0] != 0) {\\n            // Withdraw our xToken to return vToken from the NFTX staking contract\\n            liquidityStaking.claimRewards(vaultId);\\n\\n            // We can now withdraw all of the vToken from the contract\\n            IERC20(rewardToken).safeTransfer(_recipient, IERC20(rewardToken).balanceOf(address(this)));\\n\\n            unchecked {\\n                lifetimeRewards[rewardToken] += amounts[0];\\n            }\\n        }\\n\\n        emit Harvest(dividendToken, amounts[0]);\\n    }\\n\\n    /**\\n     * Returns an array of tokens that the strategy supports.\\n     */\\n    function validTokens() public view override returns (address[] memory) {\\n        address[] memory tokens_ = new address[](1);\\n        tokens_[0] = underlyingToken;\\n        return tokens_;\\n    }\\n\\n    /**\\n     * Increases our dividend token position based on the logic transacted in the call.\\n     *\\n     * @dev This should be called for any deposit calls made.\\n     */\\n    modifier updatesPosition(address token) {\\n        // Capture our starting balance\\n        uint startBalance = IERC20(token).balanceOf(address(this));\\n\\n        _;\\n\\n        // Determine the amount of dividend token returned from our deposit\\n        uint amount = IERC20(token).balanceOf(address(this)) - startBalance;\\n\\n        // Increase the user's position and the total position for the strategy\\n        unchecked {\\n            position[token] += amount;\\n        }\\n\\n        // Emit our event to followers\\n        emit Deposit(token, amount, msg.sender);\\n    }\\n\\n    modifier refundsWeth() {\\n        // Capture our starting balance\\n        uint startBalance = WETH.balanceOf(address(this));\\n\\n        _;\\n\\n        // Determine the amount of remaining WETH token to be returned\\n        uint amount = WETH.balanceOf(address(this)) - startBalance;\\n        if (amount != 0) {\\n            WETH.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /**\\n     * Allows the contract to receive ERC1155 tokens.\\n     */\\n    function onERC1155Received(address, address, uint, uint, bytes calldata) public view returns (bytes4) {\\n        require(msg.sender == assetAddress, 'Invalid asset');\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * Allows the contract to receive batch ERC1155 tokens.\\n     */\\n    function onERC1155BatchReceived(address, address, uint[] calldata, uint[] calldata, bytes calldata) external view returns (bytes4) {\\n        require(msg.sender == assetAddress, 'Invalid asset');\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"src/contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * A collection of generic errors that can be referenced across multiple\\n * contracts. Contract-specific errors should still be stored in their\\n * individual Solidity files.\\n */\\n\\n/// If a NULL address tries to be stored which should not be accepted\\nerror CannotSetNullAddress();\\n\\n/// If the caller has entered an insufficient amount to process the action. This\\n/// will likely be a zero amount.\\nerror InsufficientAmount();\\n\\n/// If the caller enters a percentage value that is too high for the requirements\\nerror PercentageTooHigh(uint amount);\\n\\n/// If a required ETH or token `transfer` call fails\\nerror TransferFailed();\\n\\n/// If a user calls a deposit related function with a zero amount\\nerror CannotDepositZeroAmount();\\n\\n/// If a user calls a withdrawal related function with a zero amount\\nerror CannotWithdrawZeroAmount();\\n\\n/// If there are no rewards available to be claimed\\nerror NoRewardsAvailableToClaim();\\n\\n/// If the requested collection is not approved\\n/// @param collection Address of the collection requested\\nerror CollectionNotApproved(address collection);\\n\\n/// If the requested strategy implementation is not approved\\n/// @param strategyImplementation Address of the strategy implementation requested\\nerror StrategyNotApproved(address strategyImplementation);\\n\"\r\n    },\r\n    \"src/contracts/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {Initializable} from '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\nimport {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport {InsufficientAmount} from '@floor/utils/Errors.sol';\\n\\nimport {IBaseStrategy} from '@floor-interfaces/strategies/BaseStrategy.sol';\\n\\n/// If a zero amount is sent to be deposited\\nerror ZeroAmountReceivedFromDeposit();\\n\\n/// If a zero amount is sent to be withdrawn\\nerror ZeroAmountReceivedFromWithdraw();\\n\\n/// If the caller has an insufficient position to withdraw from\\n/// @param amount The amount requested to withdraw\\n/// @param position The amount available to withdraw for the caller\\nerror InsufficientPosition(address token, uint amount, uint position);\\n\\n/**\\n * Provides underlying logic for all strategies that handles common logic. This includes\\n * storing the total pending rewards and taking snapshots to maintain epoch earned yield.\\n */\\nabstract contract BaseStrategy is IBaseStrategy, Initializable, Ownable, Pausable, ReentrancyGuard {\\n    /**\\n     * The human-readable name of the strategy.\\n     */\\n    bytes32 public name;\\n\\n    /**\\n     * The numerical ID of the strategy that acts as an index for the {StrategyFactory}.\\n     *\\n     * @dev This must be set in the initializer function call.\\n     */\\n    uint public strategyId;\\n\\n    /**\\n     * The amount of rewards claimed in the last claim call.\\n     */\\n    mapping(address => uint) public lastEpochRewards;\\n\\n    /**\\n     * This will return the internally tracked value of tokens that have been harvested\\n     * by the strategy.\\n     */\\n    mapping(address => uint) public lifetimeRewards;\\n\\n    /**\\n     * Maintain a list of active positions held by depositing users.\\n     */\\n    mapping(address => uint) public position;\\n\\n    /**\\n     * Stores a list of tokens that the strategy supports.\\n     */\\n    mapping(address => bool) internal _validTokens;\\n\\n    /**\\n     * Gets a read of new yield since the last call. This is what can be called when\\n     * the epoch ends to determine the amount generated within the epoch.\\n     *\\n     * @return tokens_ Tokens that have been generated as yield\\n     * @return amounts_ The amount of yield generated for the corresponding token\\n     */\\n    function snapshot() external onlyOwner returns (address[] memory tokens_, uint[] memory amounts_) {\\n        // Get all the available tokens\\n        (tokens_, amounts_) = this.totalRewards();\\n\\n        // Find the token difference available\\n        uint length = amounts_.length;\\n        for (uint i; i < length;) {\\n            // Capture the current total rewards for the token\\n            uint totalRewardsForToken = amounts_[i];\\n\\n            // Remove the last epoch rewards from our amount returned to show how much\\n            // additional has been earned in the epoch\\n            amounts_[i] -= lastEpochRewards[tokens_[i]];\\n\\n            // We can then update our epoch rewards amount for the token\\n            lastEpochRewards[tokens_[i]] = totalRewardsForToken;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * The total amount of rewards generated by the strategy.\\n     */\\n    function totalRewards() public view returns (address[] memory tokens_, uint[] memory amounts_) {\\n        // Get all the available tokens\\n        (tokens_, amounts_) = this.available();\\n        uint tokensLength = tokens_.length;\\n\\n        // Add our lifetime rewards\\n        for (uint i; i < tokensLength;) {\\n            amounts_[i] += lifetimeRewards[tokens_[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Gets rewards that are available to harvest.\\n     */\\n    function available() public view virtual returns (address[] memory, uint[] memory) {\\n        revert('Not implemented');\\n    }\\n\\n    /**\\n     * Extracts all rewards from third party and moves it to a recipient. This should\\n     * only be called by a specific action.\\n     *\\n     * @dev The recipient _should_ always be set to the {Treasury} by the {StrategyFactory}.\\n     */\\n    function harvest(address /* _recipient */ ) external virtual onlyOwner {\\n        revert('Not implemented');\\n    }\\n\\n    /**\\n     * Returns an array of tokens that the strategy supports.\\n     *\\n     * @return address[] The address of valid tokens\\n     */\\n    function validTokens() public view virtual returns (address[] memory) {\\n        revert('Not implemented');\\n    }\\n\\n    /**\\n     * Allows for liquidation of the strategy based on a percentage value. This withdraws the\\n     * percentage of the underlying tokens that were initially deposited, using the relevant\\n     * withdraw functions.\\n     *\\n     * The tokens will be withdrawn to the caller of the function, so relevant permissions should\\n     * be checked.\\n     *\\n     * @dev This must be implemented in each strategy.\\n     *\\n     * @return The tokens that have been withdrawn\\n     * @return The amount of tokens withdrawn\\n     */\\n    function withdrawPercentage(address /* recipient */, uint /* percentage */) external virtual onlyOwner returns (address[] memory, uint[] memory) {\\n        revert('Not implemented');\\n    }\\n\\n    /**\\n     * Pauses deposits from being made into the strategy.\\n     *\\n     * @dev This should only be called by a guardian or governor.\\n     *\\n     * @param _p Boolean value for if the strategy should be paused\\n     */\\n    function pause(bool _p) external onlyOwner {\\n        if (_p) _pause();\\n        else _unpause();\\n    }\\n\\n    /**\\n     * Confirms that the requested single token is valid before processing a function.\\n     *\\n     * @param token A token address that must be valid\\n     */\\n    modifier onlyValidToken(address token) {\\n        require(_validTokens[token], 'Invalid token');\\n        _;\\n    }\\n\\n    /**\\n     * Confirms that the requested tokens are all valid before processing a function.\\n     *\\n     * @param tokens An array of tokens that must all be valid\\n     */\\n    modifier onlyValidTokens(address[] memory tokens) {\\n        // Iterate over tokens to ensure that they are registered as valid. If they\\n        // aren't then we will revert the call before processing.\\n        uint length = tokens.length;\\n        for (uint i; i < length;) {\\n            require(_validTokens[tokens[i]], 'Invalid token');\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/nftx/TimelockRewardDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITimelockRewardDistributionToken {\\n    function distributeRewards(uint amount) external;\\n    function mint(address account, address to, uint amount) external;\\n    function timelockMint(address account, uint amount, uint timelockLength) external;\\n    function burnFrom(address account, uint amount) external;\\n    function withdrawReward(address user) external;\\n    function dividendOf(address _owner) external view returns (uint);\\n    function withdrawnRewardOf(address _owner) external view returns (uint);\\n    function accumulativeRewardOf(address _owner) external view returns (uint);\\n    function timelockUntil(address account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/nftx/NFTXVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXVault {\\n    function manager() external view returns (address);\\n    function assetAddress() external view returns (address);\\n\\n    function is1155() external view returns (bool);\\n    function allowAllItems() external view returns (bool);\\n    function enableMint() external view returns (bool);\\n    function enableRandomRedeem() external view returns (bool);\\n    function enableTargetRedeem() external view returns (bool);\\n    function enableRandomSwap() external view returns (bool);\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint);\\n    function nftIdAt(uint holdingsIndex) external view returns (uint);\\n    function allHoldings() external view returns (uint[] memory);\\n    function totalHoldings() external view returns (uint);\\n    function mintFee() external view returns (uint);\\n    function randomRedeemFee() external view returns (uint);\\n    function targetRedeemFee() external view returns (uint);\\n    function randomSwapFee() external view returns (uint);\\n    function targetSwapFee() external view returns (uint);\\n    function vaultFees() external view returns (uint, uint, uint, uint, uint);\\n\\n    function redeem(uint amount, uint[] calldata specificIds) external returns (uint[] calldata);\\n\\n    function redeemTo(uint amount, uint[] calldata specificIds, address to) external returns (uint[] calldata);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/nftx/NFTXLiquidityStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXLiquidityStaking {\\n    function nftxVaultFactory() external view returns (address);\\n    function rewardDistTokenImpl() external view returns (address);\\n    function stakingTokenProvider() external view returns (address);\\n    function vaultToken(address _stakingToken) external view returns (address);\\n    function stakingToken(address _vaultToken) external view returns (address);\\n    function rewardDistributionToken(uint vaultId) external view returns (address);\\n    function newRewardDistributionToken(uint vaultId) external view returns (address);\\n    function oldRewardDistributionToken(uint vaultId) external view returns (address);\\n    function unusedRewardDistributionToken(uint vaultId) external view returns (address);\\n    function rewardDistributionTokenAddr(address stakedToken, address rewardToken) external view returns (address);\\n\\n    // Write functions.\\n    function receiveRewards(uint vaultId, uint amount) external returns (bool);\\n    function deposit(uint vaultId, uint amount) external;\\n    function timelockDepositFor(uint vaultId, address account, uint amount, uint timelockLength) external;\\n    function exit(uint vaultId, uint amount) external;\\n    function rescue(uint vaultId) external;\\n    function withdraw(uint vaultId, uint amount) external;\\n    function claimRewards(uint vaultId) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/nftx/NFTXStakingZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTXStakingZap {\\n    function lpLockTime() external returns (uint);\\n\\n    function inventoryLockTime() external returns (uint);\\n\\n    function assignStakingContracts() external;\\n\\n    function setTimelockExcludeList(address addr) external;\\n\\n    function setLPLockTime(uint newLPLockTime) external;\\n\\n    function setInventoryLockTime(uint newInventoryLockTime) external;\\n\\n    function isAddressTimelockExcluded(address addr, uint vaultId) external view returns (bool);\\n\\n    function provideInventory721(uint vaultId, uint[] calldata tokenIds) external;\\n\\n    function provideInventory1155(uint vaultId, uint[] calldata tokenIds, uint[] calldata amounts) external;\\n\\n    function addLiquidity721ETH(uint vaultId, uint[] calldata ids, uint minWethIn) external payable returns (uint);\\n\\n    function addLiquidity721ETHTo(uint vaultId, uint[] memory ids, uint minWethIn, address to) external payable returns (uint);\\n\\n    function addLiquidity1155ETH(uint vaultId, uint[] calldata ids, uint[] calldata amounts, uint minEthIn)\\n        external\\n        payable\\n        returns (uint);\\n\\n    function addLiquidity1155ETHTo(uint vaultId, uint[] memory ids, uint[] memory amounts, uint minEthIn, address to)\\n        external\\n        payable\\n        returns (uint);\\n\\n    function addLiquidity721(uint vaultId, uint[] calldata ids, uint minWethIn, uint wethIn) external returns (uint);\\n\\n    function addLiquidity721To(uint vaultId, uint[] memory ids, uint minWethIn, uint wethIn, address to) external returns (uint);\\n\\n    function addLiquidity1155(uint vaultId, uint[] memory ids, uint[] memory amounts, uint minWethIn, uint wethIn)\\n        external\\n        returns (uint);\\n\\n    function addLiquidity1155To(uint vaultId, uint[] memory ids, uint[] memory amounts, uint minWethIn, uint wethIn, address to)\\n        external\\n        returns (uint);\\n\\n    function rescue(address token) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/tokens/WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function allowance(address, address) external view returns (uint);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function approve(address, uint) external returns (bool);\\n\\n    function transfer(address, uint) external returns (bool);\\n\\n    function transferFrom(address, address, uint) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Strategies will hold the logic for interacting with external platforms to stake\\n * and harvest reward yield. Each strategy will require its own strategy implementation\\n * to allow for different immutable variables to be defined during construct.\\n *\\n * This will follow a similar approach to how NFTX offer their eligibility module\\n * logic, with a lot of the power coming from inheritence.\\n *\\n * When constructed, we want to give the {Treasury} a max uint approval of the yield\\n * and underlying tokens.\\n */\\ninterface IBaseStrategy {\\n    /// @dev When strategy receives a deposit\\n    event Deposit(address token, uint amount, address caller);\\n\\n    /// @dev When strategy is harvested\\n    event Harvest(address token, uint amount);\\n\\n    /// @dev When a staked user exits their position\\n    event Withdraw(address token, uint amount, address recipient);\\n\\n    /**\\n     * Allows the strategy to be initialised.\\n     */\\n    function initialize(bytes32 name, uint strategyId, bytes calldata initData) external;\\n\\n    /**\\n     * Name of the strategy.\\n     */\\n    function name() external view returns (bytes32);\\n\\n    /**\\n     * The numerical ID of the strategy that acts as an index for the {StrategyFactory}.\\n     */\\n    function strategyId() external view returns (uint);\\n\\n    /**\\n     * Total rewards generated by the strategy in all time. This is pure bragging rights.\\n     */\\n    function lifetimeRewards(address token) external returns (uint amount_);\\n\\n    /**\\n     * The amount of rewards claimed in the last claim call.\\n     */\\n    function lastEpochRewards(address token) external returns (uint amount_);\\n\\n    /**\\n     * Gets rewards that are available to harvest.\\n     */\\n    function available() external returns (address[] memory, uint[] memory);\\n\\n    /**\\n     * Extracts all rewards from third party and moves it to a recipient. This should\\n     * only be called by a specific action.\\n     *\\n     * @dev This _should_ always be imposed to be the {Treasury} by the {StrategyFactory}.\\n     */\\n    function harvest(address /* _recipient */ ) external;\\n\\n    /**\\n     * Returns an array of tokens that the strategy supports.\\n     *\\n     * @return address[] The address of valid tokens\\n     */\\n    function validTokens() external view returns (address[] memory);\\n\\n    /**\\n     * Makes a call to a strategy to withdraw a percentage of the deposited holdings.\\n     *\\n     * @param recipient Strategy address to be updated\\n     * @param percentage The 2 decimal accuracy of the percentage to withdraw (e.g. 100% = 10000)\\n     *\\n     * @return address[] Array of tokens withdrawn\\n     * @return uint[] Amounts of respective tokens withdrawn\\n     */\\n    function withdrawPercentage(address recipient, uint percentage) external returns (address[] memory, uint[] memory);\\n\\n    /**\\n     * Pauses deposits from being made into the strategy. This should only be called by\\n     * a guardian or governor.\\n     *\\n     * @param _p Boolean value for if the strategy should be paused\\n     */\\n    function pause(bool _p) external;\\n\\n    /**\\n     * Gets a read of new yield since the last call. This is what can be called when\\n     * the epoch ends to determine the amount generated within the epoch.\\n     */\\n    function snapshot() external returns (address[] memory, uint[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap-v3/=lib/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@murky/=lib/murky/src/\",\r\n      \"@solidity-math-utils/=lib/solidity-math-utils/project/contracts/\",\r\n      \"@solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"@1inch/=lib/\",\r\n      \"@charmfi/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"@sudoswap/=lib/lssvm/src/\",\r\n      \"@floor/=src/contracts/\",\r\n      \"@floor-interfaces/=src/interfaces/\",\r\n      \"@floor-scripts/=script/\",\r\n      \"@ERC721A/=lib/ERC721A/contracts/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"@nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"@manifoldxyz/=lib/lssvm2/lib/\",\r\n      \"@mocks/=lib/nftx-protocol-v3/src/mocks/\",\r\n      \"@permit2/=lib/nftx-protocol-v3/lib/permit2/src/\",\r\n      \"@prb/math/=lib/lssvm2/lib/prb-math/src/\",\r\n      \"@prb/test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"@src/=lib/nftx-protocol-v3/src/\",\r\n      \"@test/=lib/nftx-protocol-v3/test/\",\r\n      \"@uni-core/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"@uni-periphery/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/\",\r\n      \"@uniswap/lib/=lib/nftx-protocol-v3/lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/nftx-protocol-v3/lib/v2-core/\",\r\n      \"@uniswap/v3-core/contracts/=lib/nftx-protocol-v3/src/uniswap/v3-core/\",\r\n      \"CramBit/=lib/foundry-random/lib/CramBit/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"base64-sol/=lib/nftx-protocol-v3/src/uniswap/v3-periphery/libraries/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"charmfi-contracts-0.8.0-support/=lib/charmfi-contracts-0.8.0-support/\",\r\n      \"clones-with-immutable-args/=lib/lssvm2/lib/clones-with-immutable-args/src/\",\r\n      \"crambit/=lib/foundry-random/lib/CramBit/src/\",\r\n      \"create2-helpers/=lib/lssvm2/lib/royalty-registry-solidity/lib/create2-helpers/\",\r\n      \"create3-factory/=lib/lssvm2/lib/create3-factory/\",\r\n      \"foundry-huff/=lib/lssvm2/lib/foundry-huff/src/\",\r\n      \"foundry-random/=lib/foundry-random/src/\",\r\n      \"huffmate/=lib/lssvm2/lib/huffmate/src/\",\r\n      \"libraries-solidity/=lib/lssvm2/lib/libraries-solidity/contracts/\",\r\n      \"lssvm/=lib/lssvm/src/\",\r\n      \"lssvm2/=lib/lssvm2/src/\",\r\n      \"manifoldxyz/=lib/lssvm2/lib/royalty-registry-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"nftx-protocol-v3/=lib/nftx-protocol-v3/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/solidity-trigonometry/lib/prb-math/contracts/\",\r\n      \"prb-test/=lib/foundry-random/lib/prb-test/src/\",\r\n      \"royalty-registry-solidity.git/=lib/lssvm/lib/royalty-registry-solidity.git/contracts/\",\r\n      \"royalty-registry-solidity/=lib/lssvm2/lib/royalty-registry-solidity/\",\r\n      \"solidity-bytes-utils/=lib/foundry-random/lib/solidity-bytes-utils/contracts/\",\r\n      \"solidity-math-utils/=lib/solidity-math-utils/\",\r\n      \"solidity-stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"solidity-trigonometry/=lib/solidity-trigonometry/src/\",\r\n      \"solidity-utils/=lib/solidity-utils/contracts/\",\r\n      \"solmate/=lib/lssvm2/lib/solmate/src/\",\r\n      \"src/=lib/foundry-random/src/\",\r\n      \"stringutils/=lib/lssvm2/lib/foundry-huff/lib/solidity-stringutils/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"weird-erc20/=lib/lssvm/lib/solmate/lib/weird-erc20/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CannotDepositZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWithdrawZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"InsufficientPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountReceivedFromWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"depositErc1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"depositErc721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_strategyId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_initData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEpochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lifetimeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityStaking\",\"outputs\":[{\"internalType\":\"contract INFTXLiquidityStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_p\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingZap\",\"outputs\":[{\"internalType\":\"contract INFTXStakingZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"withdrawPercentage\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTXLiquidityPoolStakingStrategy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}