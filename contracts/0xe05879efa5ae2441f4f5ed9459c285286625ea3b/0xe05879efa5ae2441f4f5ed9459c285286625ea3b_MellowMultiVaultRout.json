{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MellowMultiVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"./interfaces/IMellowMultiVaultRouter.sol\\\";\\nimport \\\"./interfaces/IERC20RootVault.sol\\\";\\nimport \\\"./interfaces/IMarginEngine.sol\\\";\\nimport \\\"./interfaces/IVoltzVault.sol\\\";\\nimport \\\"./storages/MellowMultiVaultRouterStorage.sol\\\";\\nimport \\\"./libraries/SafeTransferLib.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\ncontract MellowMultiVaultRouter is\\n    IMellowMultiVaultRouter,\\n    MellowMultiVaultRouterStorage,\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    using SafeTransferLib for IERC20Minimal;\\n    using SafeTransferLib for IWETH;\\n\\n    uint256 public constant WAD = 1e18;\\n\\n    uint256 constant WEIGHT_SUM = 100;\\n\\n    // -------------------  INITIALIZER  -------------------\\n\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // To authorize the owner to upgrade the contract we implement _authorizeUpgrade with the onlyOwner modifier.\\n    // ref: https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function initialize(\\n        IWETH weth_,\\n        IERC20Minimal token_,\\n        IERC20RootVault[] memory vaults_\\n    ) external override initializer {\\n        require(vaults_.length > 0, \\\"empty vaults\\\");\\n\\n        _weth = weth_;\\n        _token = token_;\\n\\n        for (uint256 i = 0; i < vaults_.length; i++) {\\n            _addVault(vaults_[i]);\\n        }\\n\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // -------------------  GETTERS -------------------\\n\\n    function weth() external view override returns (IWETH) {\\n        return _weth;\\n    }\\n\\n    function token() external view override returns (IERC20Minimal) {\\n        return _token;\\n    }\\n\\n    function getBatchedDeposits(uint256 index)\\n        external\\n        view\\n        override\\n        returns (BatchedDeposit[] memory)\\n    {\\n        if (index >= _vaults.length) {\\n            BatchedDeposit[] memory emptyDeposits = new BatchedDeposit[](0);\\n            return emptyDeposits;\\n        }\\n\\n        BatchedDeposits storage batchedDeposits = _batchedDeposits[index];\\n\\n        uint256 activeDeposits = batchedDeposits.size - batchedDeposits.current;\\n        BatchedDeposit[] memory deposits = new BatchedDeposit[](activeDeposits);\\n\\n        for (uint256 i = 0; i < activeDeposits; i++) {\\n            deposits[i] = batchedDeposits.batch[i + batchedDeposits.current];\\n        }\\n\\n        return deposits;\\n    }\\n\\n    function getLPTokenBalances(address owner)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory lpTokenBalances = getRawLPTokenBalances(owner);\\n        if (!_isRegisteredForAutoRollover[owner]) {\\n            return lpTokenBalances;\\n        }\\n\\n        uint256[]\\n            memory propagatedAutoRolloverLPTokens = getPropagatedAutoRolloverLPTokens(\\n                owner\\n            );\\n        for (uint256 i = 0; i < _vaults.length; i += 1) {\\n            lpTokenBalances[i] += propagatedAutoRolloverLPTokens[i];\\n        }\\n\\n        return lpTokenBalances;\\n    }\\n\\n    function getVaults()\\n        external\\n        view\\n        override\\n        returns (IERC20RootVault[] memory)\\n    {\\n        return _vaults;\\n    }\\n\\n    function isVaultCompleted(uint256 index)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isVaultCompleted[index];\\n    }\\n\\n    function isVaultPaused(uint256 index)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isVaultPaused[index];\\n    }\\n\\n    function getVaultMaturity(uint256 vaultIndex)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 latestMaturity = 0;\\n\\n        // Get latest maturity of the underlying margin engines\\n        uint256[] memory subvaultNFTs = _vaults[vaultIndex].subvaultNfts();\\n\\n        for (uint256 k = 1; k < subvaultNFTs.length; k++) {\\n            address voltzVault = _vaults[vaultIndex].subvaultAt(k);\\n            IMarginEngine marginEngine = IVoltzVault(voltzVault).marginEngine();\\n            uint256 maturity = marginEngine.termEndTimestampWad() / 1e18;\\n            if (maturity > latestMaturity) {\\n                latestMaturity = maturity;\\n            }\\n        }\\n\\n        return latestMaturity;\\n    }\\n\\n    function getCachedVaultMaturity(uint256 vaultIndex)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        if (_vaultMaturity[vaultIndex] == 0) {\\n            _vaultMaturity[vaultIndex] = getVaultMaturity(vaultIndex);\\n        }\\n\\n        return _vaultMaturity[vaultIndex];\\n    }\\n\\n    function getFee() external view override returns (uint256) {\\n        return _fee;\\n    }\\n\\n    function getTotalFee() external view override returns (uint256) {\\n        return _totalFees;\\n    }\\n\\n    function getVaultDepositsCount() external view override returns (uint256) {\\n        return _vaultDepositsCount;\\n    }\\n\\n    // -------------------  CHECKS  -------------------\\n\\n    function validWeights(uint256[] memory weights)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (weights.length != _vaults.length) {\\n            return false;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            if ((_isVaultCompleted[i] || _isVaultPaused[i]) && weights[i] > 0) {\\n                return false;\\n            }\\n            sum += weights[i];\\n        }\\n\\n        return sum == WEIGHT_SUM;\\n    }\\n\\n    function canWithdrawOrRollover(uint256 vaultIndex, address owner)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!(vaultIndex < _vaults.length)) {\\n            return false;\\n        }\\n\\n        if (!_isVaultCompleted[vaultIndex]) {\\n            return false;\\n        }\\n\\n        if (_isVaultPaused[vaultIndex]) {\\n            return false;\\n        }\\n\\n        uint256[]\\n            memory autoRolloverLpTokens = getPropagatedAutoRolloverLPTokens(\\n                owner\\n            );\\n        if (\\n            autoRolloverLpTokens[vaultIndex] > 0 &&\\n            _pendingAutoRolloverDeposits[vaultIndex] > 0\\n        ) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    // -------------------  INTERNAL  -------------------\\n\\n    function _addVault(IERC20RootVault vault_) internal {\\n        address[] memory vaultTokens = vault_.vaultTokens();\\n        require(\\n            vaultTokens.length == 1 && vaultTokens[0] == address(_token),\\n            \\\"invalid vault\\\"\\n        );\\n\\n        _vaults.push(vault_);\\n        _token.safeIncreaseAllowanceTo(address(vault_), type(uint256).max);\\n    }\\n\\n    function _trackDeposit(\\n        address author,\\n        uint256 amount,\\n        uint256[] memory weights\\n    ) internal {\\n        require(validWeights(weights), \\\"invalid weights\\\");\\n\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            uint256 weightedAmount = FullMath.mulDiv(\\n                amount,\\n                weights[i],\\n                WEIGHT_SUM\\n            );\\n\\n            if (weightedAmount > 0) {\\n                BatchedDeposit memory instance = BatchedDeposit({\\n                    author: author,\\n                    amount: weightedAmount\\n                });\\n\\n                _batchedDeposits[i].batch[_batchedDeposits[i].size] = instance;\\n                _batchedDeposits[i].size += 1;\\n                _vaultDepositsCount += 1;\\n            }\\n        }\\n    }\\n\\n    function getMarginEngineBalance(IERC20RootVault vault)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        balance = 0;\\n        uint256[] memory subvaultNfts = vault.subvaultNfts();\\n\\n        for (uint256 i = 1; i < subvaultNfts.length; i++) {\\n            address subVault = vault.subvaultAt(i);\\n            address marginEngine = address(\\n                IVoltzVault(subVault).marginEngine()\\n            );\\n            balance += _token.balanceOf(marginEngine);\\n        }\\n    }\\n\\n    function getRawLPTokenBalances(address owner)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory balances = new uint256[](_vaults.length);\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            balances[i] = _managedLpTokens[owner][i];\\n        }\\n\\n        return balances;\\n    }\\n\\n    function getRawAutoRolloverLPTokenBalances(address owner)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory balances = new uint256[](_vaults.length);\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            balances[i] = _autoRolloverLpTokens[owner][i];\\n        }\\n\\n        return balances;\\n    }\\n\\n    // -------------------  SETTERS  -------------------\\n\\n    function addVault(IERC20RootVault vault_) external override onlyOwner {\\n        _addVault(vault_);\\n    }\\n\\n    function setCompletion(uint256 index, bool completed)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(index < _vaults.length, \\\"invalid index\\\");\\n        require(_isVaultCompleted[index] != completed, \\\"Already (un)completed\\\");\\n        require(\\n            _batchedDeposits[index].current == _batchedDeposits[index].size,\\n            \\\"batch non-empty\\\"\\n        );\\n\\n        _isVaultCompleted[index] = completed;\\n    }\\n\\n    function setPausability(uint256 index, bool paused)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(index < _vaults.length, \\\"invalid index\\\");\\n        require(_isVaultPaused[index] != paused, \\\"Already (un)paused\\\");\\n        require(\\n            _batchedDeposits[index].current == _batchedDeposits[index].size,\\n            \\\"batch non-empty\\\"\\n        );\\n\\n        _isVaultPaused[index] = paused;\\n    }\\n\\n    function setFee(uint256 fee_) external override onlyOwner {\\n        require(fee_ >= 0, \\\"negative fee\\\");\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            require(\\n                _batchedDeposits[i].current == _batchedDeposits[i].size,\\n                \\\"batch non-empty\\\"\\n            );\\n        }\\n        _fee = fee_;\\n    }\\n\\n    function refreshDepositCount() external override {\\n        uint256 remainingDeposits = 0;\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            remainingDeposits +=\\n                _batchedDeposits[i].size -\\n                _batchedDeposits[i].current;\\n        }\\n        _vaultDepositsCount = remainingDeposits;\\n    }\\n\\n    // -------------------  DEPOSITS  -------------------\\n\\n    function depositEth(uint256[] memory weights) public payable override {\\n        require(address(_token) == address(_weth), \\\"only ETH vaults\\\");\\n        require(msg.value > _fee, \\\"amount not sufficient\\\");\\n\\n        propagateAutoRolloverLPTokens();\\n\\n        // 1. Wrap the ETH into WETH\\n        uint256 ethPassed = msg.value;\\n        _weth.deposit{value: ethPassed}();\\n\\n        // 2. Track the deposit\\n        uint256 amountAfterFee = ethPassed - _fee;\\n        _trackDeposit(msg.sender, amountAfterFee, weights);\\n        _totalFees += _fee;\\n    }\\n\\n    function depositEthAndRegisterForAutoRollover(\\n        uint256[] memory weights,\\n        bool registration\\n    ) public payable override {\\n        depositEth(weights);\\n        registerForAutoRollover(registration);\\n    }\\n\\n    function depositErc20(uint256 amount, uint256[] memory weights)\\n        public\\n        override\\n    {\\n        propagateAutoRolloverLPTokens();\\n\\n        // 1. Send the funds from the user to the router\\n        IERC20Minimal(_token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        require(amount > _fee, \\\"amount not sufficient\\\");\\n        uint256 amountAfterFee = amount - _fee;\\n\\n        // 2. Track the deposit\\n        _trackDeposit(msg.sender, amountAfterFee, weights);\\n        _totalFees += _fee;\\n    }\\n\\n    function depositErc20AndRegisterForAutoRollover(\\n        uint256 amount,\\n        uint256[] memory weights,\\n        bool registration\\n    ) public override {\\n        depositErc20(amount, weights);\\n        registerForAutoRollover(registration);\\n    }\\n\\n    // -------------------  BATCH PUSH  -------------------\\n    function submitAllBatchesForFee() external override {\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            if (\\n                _batchedDeposits[i].current < _batchedDeposits[i].size &&\\n                !(_isVaultCompleted[i] || _isVaultPaused[i])\\n            ) {\\n                this.submitBatchForFee(i, 0, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function submitBatchForFee(\\n        uint256 index,\\n        uint256 batchSize,\\n        address account\\n    ) public override {\\n        // 1. Get the full size if batch size is 0 or more than neccessary\\n        BatchedDeposits storage batchedDeposits = _batchedDeposits[index];\\n        uint256 remainingDeposits = batchedDeposits.size -\\n            batchedDeposits.current;\\n        require(remainingDeposits > 0, \\\"empty batch\\\");\\n        if (batchSize == 0 || batchSize > remainingDeposits) {\\n            batchSize = remainingDeposits;\\n        }\\n\\n        // 2. Get initial margin engine balance\\n        uint256 initialBalance = getMarginEngineBalance(_vaults[index]);\\n        uint256 vaultDepositsCount = _vaultDepositsCount;\\n\\n        // 3. Submit Batch\\n        this.submitBatch(index, batchSize);\\n\\n        // 4. Check if tokens arrived in margin engines\\n        uint256 afterBalance = getMarginEngineBalance(_vaults[index]);\\n        require(initialBalance < afterBalance, \\\"deposit not completed\\\");\\n\\n        // 5. Transfer fees and update deposit count\\n        uint256 allocatedFee = FullMath.mulDiv(\\n            _totalFees,\\n            batchSize,\\n            vaultDepositsCount\\n        );\\n        _totalFees -= allocatedFee;\\n        _token.safeTransfer(account, allocatedFee);\\n    }\\n\\n    function submitBatch(uint256 index, uint256 batchSize) public override {\\n        BatchedDeposits storage batchedDeposits = _batchedDeposits[index];\\n        IERC20RootVault vault = _vaults[index];\\n\\n        uint256 remainingDeposits = batchedDeposits.size -\\n            batchedDeposits.current;\\n\\n        // 1. Get the full size if batch size is 0 or more than neccessary\\n        if (batchSize == 0 || batchSize > remainingDeposits) {\\n            batchSize = remainingDeposits;\\n        }\\n\\n        // 2. Set the local variables\\n        BatchedDeposit[] memory deposits = new BatchedDeposit[](batchSize);\\n\\n        // 3. Get the target deposits and aggregate the funds to push\\n        uint256 fundsToPush = 0;\\n        for (uint256 i = 0; i < batchSize; i += 1) {\\n            deposits[i] = batchedDeposits.batch[i + batchedDeposits.current];\\n\\n            fundsToPush += deposits[i].amount;\\n        }\\n\\n        if (fundsToPush > 0) {\\n            // 4. Distribute the funds to the vaults according to their weights\\n            uint256 deltaLpTokens = vault.balanceOf(address(this));\\n\\n            uint256[] memory tokenAmounts = new uint256[](1);\\n            tokenAmounts[0] = fundsToPush;\\n\\n            // Deposit to Mellow\\n            vault.deposit(tokenAmounts, 0, \\\"\\\");\\n\\n            // Track the delta lp tokens\\n            deltaLpTokens = vault.balanceOf(address(this)) - deltaLpTokens;\\n\\n            // 5. Calculate and manage how many LP tokens each user gets\\n            for (\\n                uint256 batchIndex = 0;\\n                batchIndex < batchSize;\\n                batchIndex += 1\\n            ) {\\n                uint256 share = FullMath.mulDiv(\\n                    deltaLpTokens,\\n                    deposits[batchIndex].amount,\\n                    fundsToPush\\n                );\\n\\n                _managedLpTokens[deposits[batchIndex].author][index] += share;\\n\\n                if (_isRegisteredForAutoRollover[deposits[batchIndex].author]) {\\n                    registerUserVaultForAutoRollover(\\n                        deposits[batchIndex].author,\\n                        index,\\n                        true\\n                    );\\n                } else if (deposits[batchIndex].author == address(this)) {\\n                    updateAutoRolloverExchangeRates(index, share);\\n                }\\n            }\\n        }\\n\\n        // 6. Advance the iterator\\n        batchedDeposits.current += batchSize;\\n        _vaultDepositsCount -= batchSize;\\n    }\\n\\n    // -------------------  WITHDRAWALS  -------------------\\n\\n    function claimLPTokens(\\n        uint256 index,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external override {\\n        require(canWithdrawOrRollover(index, msg.sender), \\\"Cannot withdraw\\\");\\n\\n        propagateAutoRolloverLPTokens();\\n        if (_autoRolloverLpTokens[msg.sender][index] > 0) {\\n            registerUserVaultForAutoRollover(msg.sender, index, false);\\n        }\\n\\n        uint256 balance = _managedLpTokens[msg.sender][index];\\n\\n        uint256 deltaLpTokens = _vaults[index].balanceOf(address(this));\\n        _vaults[index].withdraw(\\n            msg.sender,\\n            balance,\\n            minTokenAmounts,\\n            vaultsOptions\\n        );\\n\\n        deltaLpTokens = deltaLpTokens - _vaults[index].balanceOf(address(this));\\n        if (deltaLpTokens > balance) {\\n            deltaLpTokens = balance;\\n        }\\n\\n        _managedLpTokens[msg.sender][index] -= deltaLpTokens;\\n    }\\n\\n    function rolloverLPTokens(\\n        uint256 index,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions,\\n        uint256[] memory weights\\n    ) external override {\\n        require(canWithdrawOrRollover(index, msg.sender), \\\"Cannot rollover\\\");\\n\\n        propagateAutoRolloverLPTokens();\\n        if (_autoRolloverLpTokens[msg.sender][index] > 0) {\\n            registerUserVaultForAutoRollover(msg.sender, index, false);\\n        }\\n\\n        uint256 balance = _managedLpTokens[msg.sender][index];\\n        uint256 deltaLpTokens = _vaults[index].balanceOf(address(this));\\n\\n        uint256[] memory actualTokenAmounts = _vaults[index].withdraw(\\n            address(this),\\n            balance,\\n            minTokenAmounts,\\n            vaultsOptions\\n        );\\n\\n        deltaLpTokens = deltaLpTokens - _vaults[index].balanceOf(address(this));\\n        _managedLpTokens[msg.sender][index] -= deltaLpTokens;\\n\\n        _trackDeposit(msg.sender, actualTokenAmounts[0], weights);\\n    }\\n\\n    // -------------------  AUTO-ROLLOVERS  -------------------\\n    function getPropagatedAutoRolloverLPTokens(address owner)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        if (!_isRegisteredForAutoRollover[owner]) {\\n            return new uint256[](_vaults.length);\\n        }\\n\\n        uint256[]\\n            memory propagatedAutoRolloverLPTokens = getRawAutoRolloverLPTokenBalances(\\n                owner\\n            );\\n        for (uint256 i = 0; i < _autoRolledOverVaults.length; i += 1) {\\n            uint256 fromVault = _autoRolledOverVaults[i];\\n\\n            uint256 autoRolloverLPTokens = propagatedAutoRolloverLPTokens[\\n                fromVault\\n            ];\\n            if (\\n                autoRolloverLPTokens == 0 ||\\n                _pendingAutoRolloverDeposits[fromVault] > 0\\n            ) {\\n                continue;\\n            }\\n\\n            for (uint256 toVault = 0; toVault < _vaults.length; toVault += 1) {\\n                if (_autoRolloverExchangeRatesWad[fromVault][toVault] == 0) {\\n                    continue;\\n                }\\n\\n                propagatedAutoRolloverLPTokens[toVault] += FullMath.mulDiv(\\n                    autoRolloverLPTokens,\\n                    _autoRolloverExchangeRatesWad[fromVault][toVault],\\n                    WAD\\n                );\\n            }\\n\\n            propagatedAutoRolloverLPTokens[fromVault] = 0;\\n        }\\n\\n        return propagatedAutoRolloverLPTokens;\\n    }\\n\\n    function propagateAutoRolloverLPTokens() internal {\\n        uint256[]\\n            memory propagatedAutoRolloverLPTokens = getPropagatedAutoRolloverLPTokens(\\n                msg.sender\\n            );\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            _autoRolloverLpTokens[msg.sender][\\n                i\\n            ] = propagatedAutoRolloverLPTokens[i];\\n        }\\n    }\\n\\n    function registerUserVaultForAutoRollover(\\n        address user,\\n        uint256 vaultIndex,\\n        bool registration\\n    ) internal {\\n        require(\\n            _pendingAutoRolloverDeposits[vaultIndex] == 0,\\n            \\\"pending autorollover deposits\\\"\\n        );\\n\\n        if (registration) {\\n            _managedLpTokens[address(this)][vaultIndex] += _managedLpTokens[\\n                user\\n            ][vaultIndex];\\n            _autoRolloverLpTokens[user][vaultIndex] += _managedLpTokens[user][\\n                vaultIndex\\n            ];\\n            _managedLpTokens[user][vaultIndex] = 0;\\n        } else {\\n            _managedLpTokens[address(this)][\\n                vaultIndex\\n            ] -= _autoRolloverLpTokens[user][vaultIndex];\\n            _managedLpTokens[user][vaultIndex] += _autoRolloverLpTokens[user][\\n                vaultIndex\\n            ];\\n            _autoRolloverLpTokens[user][vaultIndex] = 0;\\n        }\\n    }\\n\\n    function updateAutoRolloverExchangeRates(\\n        uint256 toVault,\\n        uint256 lpTokensReceived\\n    ) internal {\\n        require(\\n            _batchedAutoRollovers[toVault].current <\\n                _batchedAutoRollovers[toVault].size,\\n            \\\"no batched autorollovers\\\"\\n        );\\n\\n        // pop first batched auto-rollover\\n        BatchedAutoRollover memory batchedAutoRollover = _batchedAutoRollovers[\\n            toVault\\n        ].batch[_batchedAutoRollovers[toVault].current];\\n        _batchedAutoRollovers[toVault].current += 1;\\n\\n        // update auto-rollover exchange rate\\n        uint256 fromVault = batchedAutoRollover.fromVault;\\n        _autoRolloverExchangeRatesWad[fromVault][toVault] = FullMath.mulDiv(\\n            WAD,\\n            lpTokensReceived,\\n            batchedAutoRollover.lpTokensAutoRolledOver\\n        );\\n        _pendingAutoRolloverDeposits[fromVault] -= 1;\\n\\n        // propagate auto-rollover exchange rates\\n        for (uint256 i = 0; i < _autoRolledOverVaults.length; i += 1) {\\n            uint256 pastAutoRolledOverVault = _autoRolledOverVaults[i];\\n\\n            uint256 autoRolloverExchangeRateABWad = _autoRolloverExchangeRatesWad[\\n                    pastAutoRolledOverVault\\n                ][fromVault];\\n            if (autoRolloverExchangeRateABWad == 0) {\\n                continue;\\n            }\\n\\n            uint256 autoRolloverExchangeRateBCWad = _autoRolloverExchangeRatesWad[\\n                    fromVault\\n                ][toVault];\\n\\n            _autoRolloverExchangeRatesWad[pastAutoRolledOverVault][\\n                toVault\\n            ] += FullMath.mulDiv(\\n                autoRolloverExchangeRateABWad,\\n                autoRolloverExchangeRateBCWad,\\n                WAD\\n            );\\n\\n            _autoRolloverExchangeRatesWad[pastAutoRolledOverVault][\\n                fromVault\\n            ] = 0;\\n        }\\n    }\\n\\n    function registerForAutoRollover(bool registration) public override {\\n        require(\\n            _isRegisteredForAutoRollover[msg.sender] != registration,\\n            \\\"Already registered\\\"\\n        );\\n\\n        propagateAutoRolloverLPTokens();\\n\\n        for (uint256 i = 0; i < _vaults.length; i += 1) {\\n            require(\\n                _autoRolloverLpTokens[msg.sender][i] == 0 ||\\n                    _pendingAutoRolloverDeposits[i] == 0,\\n                \\\"pending autorollover deposits\\\"\\n            );\\n\\n            require(!_isVaultPaused[i], \\\"Vault paused\\\");\\n        }\\n\\n        address user = msg.sender;\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            if (_isVaultAutoRolledOver[i]) {\\n                continue;\\n            }\\n\\n            registerUserVaultForAutoRollover(user, i, registration);\\n        }\\n\\n        _isRegisteredForAutoRollover[user] = registration;\\n    }\\n\\n    function triggerAutoRollover(uint256 vaultIndex) external override {\\n        require(_isVaultCompleted[vaultIndex], \\\"Vault not completed\\\");\\n        require(!_isVaultPaused[vaultIndex], \\\"Vault paused\\\");\\n        require(!_isVaultAutoRolledOver[vaultIndex], \\\"Vault already ARO\\\");\\n\\n        if (_managedLpTokens[address(this)][vaultIndex] == 0) {\\n            return;\\n        }\\n\\n        uint256 lpTokensBeforeRollover = _managedLpTokens[address(this)][\\n            vaultIndex\\n        ];\\n        uint256[] memory batchedDepositsSizesBefore = new uint256[](\\n            _vaults.length\\n        );\\n        for (uint256 i = 0; i < _vaults.length; i += 1) {\\n            batchedDepositsSizesBefore[i] = _batchedDeposits[i].size;\\n        }\\n\\n        this.rolloverLPTokens(\\n            vaultIndex,\\n            new uint256[](1),\\n            new bytes[](_vaults[vaultIndex].subvaultNfts().length),\\n            _autoRolloverWeights\\n        );\\n        uint256 lpTokensAfterRollover = _managedLpTokens[address(this)][\\n            vaultIndex\\n        ];\\n\\n        require(lpTokensAfterRollover == 0, \\\"partial rollover\\\");\\n\\n        BatchedAutoRollover memory batchedAutoRollover = BatchedAutoRollover({\\n            fromVault: vaultIndex,\\n            lpTokensAutoRolledOver: lpTokensBeforeRollover -\\n                lpTokensAfterRollover\\n        });\\n\\n        uint256 pendingAutoRolloverDeposits = 0;\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            if (_batchedDeposits[i].size > batchedDepositsSizesBefore[i]) {\\n                _batchedAutoRollovers[i].batch[\\n                    _batchedAutoRollovers[i].size\\n                ] = batchedAutoRollover;\\n                _batchedAutoRollovers[i].size += 1;\\n\\n                pendingAutoRolloverDeposits += 1;\\n            }\\n        }\\n\\n        _pendingAutoRolloverDeposits[vaultIndex] = pendingAutoRolloverDeposits;\\n        _autoRolledOverVaults.push(vaultIndex);\\n        _isVaultAutoRolledOver[vaultIndex] = true;\\n    }\\n\\n    function setAutoRolloverWeights(uint256[] memory autoRolloverWeights)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(validWeights(autoRolloverWeights), \\\"invalid weights\\\");\\n\\n        _autoRolloverWeights = new uint256[](_vaults.length);\\n        for (uint256 i = 0; i < _vaults.length; i += 1) {\\n            _autoRolloverWeights[i] = autoRolloverWeights[i];\\n        }\\n    }\\n\\n    function totalAutoRolloverLPTokens(uint256 vaultIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _managedLpTokens[address(this)][vaultIndex];\\n    }\\n\\n    function isRegisteredForAutoRollover(address owner)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isRegisteredForAutoRollover[owner];\\n    }\\n\\n    function getBatchedAutoRollovers(uint256 index)\\n        external\\n        view\\n        override\\n        returns (BatchedAutoRollover[] memory)\\n    {\\n        if (index >= _vaults.length) {\\n            return new BatchedAutoRollover[](0);\\n        }\\n\\n        BatchedAutoRollovers\\n            storage batchedAutoRollovers = _batchedAutoRollovers[index];\\n\\n        uint256 batchedAutoRolloversCount = batchedAutoRollovers.size -\\n            batchedAutoRollovers.current;\\n        BatchedAutoRollover[]\\n            memory autoRolloverDeposits = new BatchedAutoRollover[](\\n                batchedAutoRolloversCount\\n            );\\n\\n        for (uint256 i = 0; i < batchedAutoRolloversCount; i++) {\\n            autoRolloverDeposits[i] = batchedAutoRollovers.batch[\\n                i + batchedAutoRollovers.current\\n            ];\\n        }\\n\\n        return autoRolloverDeposits;\\n    }\\n\\n    function getAutoRolloverWeights()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _autoRolloverWeights;\\n    }\\n\\n    function getAutoRolledOverVaults()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _autoRolledOverVaults;\\n    }\\n\\n    function getPendingAutoRolloverDeposits(uint256 vaultIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _pendingAutoRolloverDeposits[vaultIndex];\\n    }\\n\\n    function getAutoRolloverExchangeRatesWad(uint256 fromVault, uint256 toVault)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _autoRolloverExchangeRatesWad[fromVault][toVault];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMellowMultiVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IERC20RootVault.sol\\\";\\n\\ninterface IMellowMultiVaultRouter {\\n    struct BatchedDeposit {\\n        address author;\\n        uint256 amount;\\n    }\\n\\n    struct BatchedDeposits {\\n        mapping(uint256 => BatchedDeposit) batch;\\n        uint256 current;\\n        uint256 size;\\n    }\\n\\n    struct BatchedAutoRollover {\\n        uint256 fromVault;\\n        uint256 lpTokensAutoRolledOver;\\n    }\\n\\n    struct BatchedAutoRollovers {\\n        mapping(uint256 => BatchedAutoRollover) batch;\\n        uint256 current;\\n        uint256 size;\\n    }\\n\\n    // -------------------  INITIALIZER -------------------\\n\\n    /// @notice Constructor for Proxies\\n    function initialize(\\n        IWETH weth_,\\n        IERC20Minimal token_,\\n        IERC20RootVault[] memory vaults_\\n    ) external;\\n\\n    // -------------------  GETTERS -------------------\\n\\n    /// @notice The official WETH of the network\\n    function weth() external view returns (IWETH);\\n\\n    /// @notice The underlying token of the vaults\\n    function token() external view returns (IERC20Minimal);\\n\\n    /// @notice Active batched deposits\\n    function getBatchedDeposits(uint256 index)\\n        external\\n        view\\n        returns (BatchedDeposit[] memory);\\n\\n    /// @notice Get the LP token balances\\n    function getLPTokenBalances(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /// @notice All vaults assigned to this router\\n    function getVaults() external view returns (IERC20RootVault[] memory);\\n\\n    /// @notice Checks if the vault is completed\\n    function isVaultCompleted(uint256 index) external view returns (bool);\\n\\n    /// @notice Checks if the vault is paused\\n    function isVaultPaused(uint256 index) external view returns (bool);\\n\\n    function getVaultMaturity(uint256 vaultIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCachedVaultMaturity(uint256 vaultIndex)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Fee paid for router deposit\\n    function getFee() external view returns (uint256);\\n\\n    /// @notice Returns fee accumulated\\n    function getTotalFee() external view returns (uint256);\\n\\n    /// @notice Returns number of pending vault deposits\\n    function getVaultDepositsCount() external view returns (uint256);\\n\\n    // -------------------  CHECKS  -------------------\\n\\n    function validWeights(uint256[] memory weights)\\n        external\\n        view\\n        returns (bool);\\n\\n    function canWithdrawOrRollover(uint256 vaultIndex, address owner)\\n        external\\n        view\\n        returns (bool);\\n\\n    // -------------------  SETTERS  -------------------\\n\\n    /// @notice Add another vault to the router\\n    /// @param vault_ The new vault\\n    function addVault(IERC20RootVault vault_) external;\\n\\n    /// @notice Mark vault as completed/uncompleted\\n    /// @param index The index of the vault to set completion for\\n    function setCompletion(uint256 index, bool completed) external;\\n\\n    /// @notice Pause/unpause vault\\n    /// @param index The index of the vault to set pausability for\\n    function setPausability(uint256 index, bool paused) external;\\n\\n    /// @notice Set fee for each router deposit\\n    /// @param fee_ Desired fee in underlying token\\n    function setFee(uint256 fee_) external;\\n\\n    /// @notice Update number of vault deposits\\n    function refreshDepositCount() external;\\n\\n    // -------------------  DEPOSITS  -------------------\\n\\n    /// @notice Deposit ETH to the router\\n    function depositEth(uint256[] memory weights) external payable;\\n\\n    /// @notice Deposit ERC20 to the router\\n    function depositErc20(uint256 amount, uint256[] memory weights) external;\\n\\n    /// @notice Deposit ETH to the router and registers for auto-rollover\\n    function depositEthAndRegisterForAutoRollover(\\n        uint256[] memory weights,\\n        bool registration\\n    ) external payable;\\n\\n    /// @notice Deposit ERC20 to the router and registers for auto-rollover\\n    function depositErc20AndRegisterForAutoRollover(\\n        uint256 amount,\\n        uint256[] memory weights,\\n        bool registration\\n    ) external;\\n\\n    // -------------------  BATCH PUSH  -------------------\\n\\n    /// @notice Push the batched funds of all vaults to Mellow\\n    /// and transfer deserving fee to sender\\n    function submitAllBatchesForFee() external;\\n\\n    /// @notice Push the batched funds of specified vault to Mellow\\n    /// and transfer deserving fee to sender\\n    function submitBatchForFee(\\n        uint256 index,\\n        uint256 batchSize,\\n        address account\\n    ) external;\\n\\n    /// @notice Push the batched funds to Mellow\\n    function submitBatch(uint256 index, uint256 batchSize) external;\\n\\n    // -------------------  WITHDRAWALS  -------------------\\n\\n    /// @notice Burn the lp tokens and withdraw the funds\\n    function claimLPTokens(\\n        uint256 index,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external;\\n\\n    /// @notice Burn the lp tokens and rollover the funds according to the weights\\n    function rolloverLPTokens(\\n        uint256 index,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions,\\n        uint256[] memory weights\\n    ) external;\\n\\n    // -------------------  AUTO-ROLLOVERS  -------------------\\n    /// @notice Allow users to opt into and out of auto-rollover functionality\\n    function registerForAutoRollover(bool registration) external;\\n\\n    /// @notice Roll over user funds from expired (completed) vault into new vaults\\n    function triggerAutoRollover(uint256 vaultIndex) external;\\n\\n    function setAutoRolloverWeights(uint256[] memory autoRolloverWeights)\\n        external;\\n\\n    // AUTO-ROLLOVER GETTERS\\n\\n    /// @notice Total LP Tokens to be auto-rolled over for given vault\\n    function totalAutoRolloverLPTokens(uint256 vaultIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isRegisteredForAutoRollover(address owner)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Batched auto-rollover deposits for given vault\\n    function getBatchedAutoRollovers(uint256 index)\\n        external\\n        view\\n        returns (BatchedAutoRollover[] memory);\\n\\n    function getAutoRolloverWeights() external view returns (uint256[] memory);\\n\\n    function getAutoRolledOverVaults() external view returns (uint256[] memory);\\n\\n    function getPendingAutoRolloverDeposits(uint256 vaultIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Auto-rollover exchange rate between fromVault and toVault\\n    function getAutoRolloverExchangeRatesWad(uint256 fromVault, uint256 toVault)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPropagatedAutoRolloverLPTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20RootVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20RootVault is IERC20 {\\n    /// @notice The function of depositing the amount of tokens in exchange\\n    /// @param tokenAmounts Array of amounts of tokens for deposit\\n    /// @param minLpTokens Minimal value of LP tokens\\n    /// @param vaultOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\\n    function deposit(\\n        uint256[] memory tokenAmounts,\\n        uint256 minLpTokens,\\n        bytes memory vaultOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice The function of withdrawing the amount of tokens in exchange\\n    /// @param to Address to which the withdrawal will be sent\\n    /// @param lpTokenAmount LP token amount, that requested for withdraw\\n    /// @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\\n    /// @param vaultsOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\\n    function withdraw(\\n        address to,\\n        uint256 lpTokenAmount,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice ERC20 tokens under Vault management.\\n    function vaultTokens() external view returns (address[] memory);\\n\\n    /// @notice Get all subvalutNfts in the current Vault\\n    /// @return subvaultNfts Subvaults of NTFs\\n    function subvaultNfts() external view returns (uint256[] memory);\\n\\n    /// @notice Get subvault by index\\n    /// @param index Index of subvault\\n    /// @return address Address of the contract\\n    function subvaultAt(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMarginEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\ninterface IMarginEngine {\\n    /// @notice The address of the underlying (non-yield bearing) token - e.g. USDC\\n    /// @return The underlying ERC20 token (e.g. USDC)\\n    function underlyingToken() external view returns (IERC20Minimal);\\n\\n    /// @notice The unix termEndTimestamp of the MarginEngine in Wad\\n    /// @return Term End Timestamp in Wad\\n    function termEndTimestampWad() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoltzVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IMarginEngine.sol\\\";\\n\\ninterface IVoltzVault {\\n    /// @notice Reference to the margin engine of Voltz Protocol\\n    function marginEngine() external view returns (IMarginEngine);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable no-inline-assembly\\n\\npragma solidity =0.8.9;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n\\n    function mulDivSigned(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (a < 0) return -int256(mulDiv(uint256(-a), b, denominator));\\n        return int256(mulDiv(uint256(a), b, denominator));\\n    }\\n\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n\\n        unchecked {\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0, \\\"Division by zero\\\");\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1, \\\"overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // uint256 twos = -denominator & denominator;\\n            // https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max, \\\"overflow\\\");\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/MellowMultiVaultRouterStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IMellowMultiVaultRouter.sol\\\";\\n\\ncontract MellowMultiVaultRouterStorageV1 {\\n    mapping(uint256 => IMellowMultiVaultRouter.BatchedDeposits)\\n        internal _batchedDeposits;\\n    IERC20Minimal internal _token;\\n    IWETH internal _weth;\\n\\n    IERC20RootVault[] internal _vaults;\\n    mapping(uint256 => bool) internal _isVaultCompleted;\\n\\n    mapping(address => mapping(uint256 => uint256)) _managedLpTokens;\\n\\n    // -------------------  AUTO-ROLLOVERS  -------------------\\n\\n    // weights used on auto-rollover\\n    uint256[] _autoRolloverWeights;\\n\\n    // list of vault indices for which auto-rollover was triggered\\n    uint256[] _autoRolledOverVaults;\\n    // given a vault index, returns true if auto-rollover was triggered\\n    // for that vault; returns false otherwise\\n    mapping(uint256 => bool) _isVaultAutoRolledOver;\\n\\n    // given a vault index, returns the number of pending batched deposits\\n    // that resulted from its auto-rollover trigger.\\n    mapping(uint256 => uint256) _pendingAutoRolloverDeposits;\\n    // given two vault indices A and B, returns how many LP Tokens in B\\n    // were obtained by auto-rolling over 1 LP Token in A (in WAD)\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public _autoRolloverExchangeRatesWad;\\n\\n    // maps each toVault (i.e., vault that was auto-rolled over into)\\n    // to a FIFO queue containing information about all auto-rollovers\\n    // that auto-rolled over into toVault\\n    mapping(uint256 => IMellowMultiVaultRouter.BatchedAutoRollovers) _batchedAutoRollovers;\\n\\n    // given an user, returns true if user is registered for auto-rollover;\\n    // returns false otherwise\\n    mapping(address => bool) _isRegisteredForAutoRollover;\\n    // stores the list of lp tokens that were registered for auto-rollover\\n    // for each given user (values might be stale and must be propagated)\\n    mapping(address => mapping(uint256 => uint256)) _autoRolloverLpTokens;\\n\\n    mapping(uint256 => uint256) _vaultMaturity;\\n\\n    mapping(uint256 => bool) internal _isVaultPaused;\\n\\n    // fee paid for each deposit into router\\n    uint256 internal _fee;\\n\\n    // total fees accumulated to be transferred to batch submitters\\n    uint256 internal _totalFees;\\n\\n    // total number of deposits to be submitted to root vaults\\n    uint256 internal _vaultDepositsCount;\\n}\\n\\ncontract MellowMultiVaultRouterStorage is MellowMultiVaultRouterStorageV1 {\\n    // Reserve some storage for use in future versions, without creating conflicts\\n    // with other inheritted contracts\\n    uint256[56] private __gap; // total storage = 100 slots, including structs\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol & utils/Address.sol)\\npragma solidity =0.8.9;\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\n/**\\n * @title SafeERC20Lib\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeTransferLib for IERC20Minimal;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeTransferLib {\\n    function safeTransfer(\\n        IERC20Minimal token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Minimal token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Minimal-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Minimal token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Minimal token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeIncreaseAllowanceTo(\\n        IERC20Minimal token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance < value) {\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, value)\\n            );\\n        }\\n    }\\n\\n    // function safeDecreaseAllowance(\\n    //     IERC20Minimal token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     unchecked {\\n    //         uint256 oldAllowance = token.allowance(address(this), spender);\\n    //         require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    //         uint256 newAllowance = oldAllowance - value;\\n    //         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    //     }\\n    // }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Minimal token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = functionCallWithZeroValue(\\n            address(token),\\n            data,\\n            \\\"STL err\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"STL fail\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithZeroValue(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: 0}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\ninterface IWETH is IERC20Minimal {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\n/// @title Minimal ERC20 interface for Voltz\\n/// @notice Contains a subset of the full ERC20 interface that is used in Voltz\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    // For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5,05 (505 / 10 ** 2).\\n    // Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_autoRolloverExchangeRatesWad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20RootVault\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"canWithdrawOrRollover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"vaultsOptions\",\"type\":\"bytes[]\"}],\"name\":\"claimLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"registration\",\"type\":\"bool\"}],\"name\":\"depositErc20AndRegisterForAutoRollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"registration\",\"type\":\"bool\"}],\"name\":\"depositEthAndRegisterForAutoRollover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoRolledOverVaults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toVault\",\"type\":\"uint256\"}],\"name\":\"getAutoRolloverExchangeRatesWad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoRolloverWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBatchedAutoRollovers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensAutoRolledOver\",\"type\":\"uint256\"}],\"internalType\":\"struct IMellowMultiVaultRouter.BatchedAutoRollover[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBatchedDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IMellowMultiVaultRouter.BatchedDeposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"}],\"name\":\"getCachedVaultMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLPTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAutoRolloverDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPropagatedAutoRolloverLPTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"}],\"name\":\"getVaultMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaults\",\"outputs\":[{\"internalType\":\"contract IERC20RootVault[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20RootVault[]\",\"name\":\"vaults_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isRegisteredForAutoRollover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isVaultCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshDepositCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"registration\",\"type\":\"bool\"}],\"name\":\"registerForAutoRollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"vaultsOptions\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"rolloverLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"autoRolloverWeights\",\"type\":\"uint256[]\"}],\"name\":\"setAutoRolloverWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"name\":\"setCompletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPausability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitAllBatchesForFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"submitBatchForFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"}],\"name\":\"totalAutoRolloverLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultIndex\",\"type\":\"uint256\"}],\"name\":\"triggerAutoRollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"validWeights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MellowMultiVaultRouter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}