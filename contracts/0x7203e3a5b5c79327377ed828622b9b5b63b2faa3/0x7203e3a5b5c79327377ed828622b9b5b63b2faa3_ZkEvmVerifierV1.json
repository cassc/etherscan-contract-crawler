{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/verifier/ZkEvmVerifierV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {IZkEvmVerifier} from \\\"./IZkEvmVerifier.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract ZkEvmVerifierV1 is IZkEvmVerifier {\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /// @dev Thrown when aggregate zk proof verification is failed.\\n    error VerificationFailed();\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// @notice The address of highly optimized plonk verifier contract.\\n    address public immutable plonkVerifier;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(address _verifier) {\\n        plonkVerifier = _verifier;\\n    }\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @inheritdoc IZkEvmVerifier\\n    function verify(bytes calldata aggrProof, bytes32 publicInputHash) external view override {\\n        address _verifier = plonkVerifier;\\n        bool success;\\n\\n        // 1. the first 12 * 32 (0x180) bytes of `aggrProof` is `accumulator`\\n        // 2. the rest bytes of `aggrProof` is the actual `batch_aggregated_proof`\\n        // 3. each byte of the `public_input_hash` should be converted to a `uint256` and the\\n        //    1024 (0x400) bytes should inserted between `accumulator` and `batch_aggregated_proof`.\\n        assembly {\\n            let p := mload(0x40)\\n            calldatacopy(p, aggrProof.offset, 0x180)\\n            for {\\n                let i := 0\\n            } lt(i, 0x400) {\\n                i := add(i, 0x20)\\n            } {\\n                mstore(add(p, sub(0x560, i)), and(publicInputHash, 0xff))\\n                publicInputHash := shr(8, publicInputHash)\\n            }\\n            calldatacopy(add(p, 0x580), add(aggrProof.offset, 0x180), sub(aggrProof.length, 0x180))\\n\\n            success := staticcall(gas(), _verifier, p, add(aggrProof.length, 0x400), 0x00, 0x00)\\n        }\\n\\n        if (!success) {\\n            revert VerificationFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/verifier/IZkEvmVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IZkEvmVerifier {\\n    /// @notice Verify aggregate zk proof.\\n    /// @param aggrProof The aggregated proof.\\n    /// @param publicInputHash The public input hash.\\n    function verify(bytes calldata aggrProof, bytes32 publicInputHash) external view;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"plonkVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggrProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"publicInputHash\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZkEvmVerifierV1", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ee18dde9dae9037c94f4d55b227fc05b20a3fbc4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}