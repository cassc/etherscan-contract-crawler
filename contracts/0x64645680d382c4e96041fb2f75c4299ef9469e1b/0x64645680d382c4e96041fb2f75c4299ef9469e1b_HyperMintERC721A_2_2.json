{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/contracts/HyperMintERC1155_2_0_0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC2981.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './Ownable_1_0_0.sol';\\n\\ncontract HyperMintERC1155_2_0_0 is ERC1155Burnable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= CUSTOM ERRORS ================= */\\n    error NewSupplyTooLow();\\n    error ArrayLengthMismatch();\\n    error MaxSupplyExceeded();\\n    error SignatureExpired();\\n    error NotAuthorised();\\n    error BuyDisabled();\\n    error InsufficientPaymentValue();\\n    error PublicSaleClosed();\\n    error SaleClosed();\\n    error MaxPerTransactionsExceeded();\\n    error ContractCallBlocked();\\n    error ImmutableRecoveryAddress();\\n\\n    /* ================= STATE VARIABLES ================= */\\n\\n    // ============== Structs ==============\\n    struct Addresses {\\n        address recoveryAddress;\\n        address collectionOwnerAddress;\\n        address authorisationAddress;\\n        address purchaseTokenAddress;\\n        address managerPrimaryRoyaltyAddress;\\n        address customerPrimaryRoyaltyAddress;\\n        address secondaryRoyaltyAddress;\\n    }\\n\\n    struct TokenInfo {\\n        uint256[] prices;\\n        uint256[] supplies;\\n        uint256[] totalSupplies;\\n        uint256[] maxPerTransactions;\\n    }\\n\\n    // ========= Immutable Storage =========\\n    uint256 internal constant BASIS_POINTS = 10000;\\n\\n    // ========== Mutable Storage ==========\\n    string public constant version = '2.0.0';\\n\\n    /// @dev token info\\n    string public name;\\n    string public symbol;\\n    uint256[] public prices;\\n    uint256[] public supplies;\\n    uint256[] public totalSupplies;\\n    uint256[] public maxPerTransactions;\\n\\n    /// @dev metadata info\\n    string public contractURI;\\n\\n    /// @dev toggle for api mints\\n    bool public allowBuy;\\n\\n    /// @dev sale dates\\n    uint256 public publicSaleDate;\\n    uint256 public saleCloseDate;\\n\\n    /// @dev royalty fees\\n    uint256 public primaryRoyaltyFee;\\n    uint256 public secondaryRoyaltyFee;\\n\\n    Addresses public addresses;\\n\\n    /* =================== CONSTRUCTOR =================== */\\n    /// @notice Creates a new NFT contract\\n    /// @param _name token name\\n    /// @param _symbol token symbol\\n    /// @param _contractMetadataURI contract metadata uri\\n    /// @param _allowBuy toggle to enable/disable buying\\n    /// @param _addresses a collection of addresses\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _contractMetadataURI,\\n        string memory _tokenMetadataURI,\\n        bool _allowBuy,\\n        Addresses memory _addresses\\n    ) ERC1155('') {\\n        _transferOwnership(_addresses.collectionOwnerAddress);\\n\\n        name = _name;\\n        symbol = _symbol;\\n        allowBuy = _allowBuy;\\n        _setURI(_tokenMetadataURI);\\n        contractURI = _contractMetadataURI;\\n        addresses = _addresses;\\n    }\\n\\n    /* ====================== Views ====================== */\\n    function getTokenInfo() external view returns (TokenInfo memory tokenInfo) {\\n        tokenInfo = TokenInfo(\\n            prices,\\n            supplies,\\n            totalSupplies,\\n            maxPerTransactions\\n        );\\n    }\\n\\n    function totalSupply(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 _totalSupply)\\n    {\\n        _totalSupply = totalSupplies[_tokenId];\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address royaltyAddress, uint256 royaltyAmount)\\n    {\\n        /// @dev secondary royalty to be paid out by the marketplace\\n        ///      to the splitter contract\\n        royaltyAddress = addresses.secondaryRoyaltyAddress;\\n        royaltyAmount = (_salePrice * secondaryRoyaltyFee) / BASIS_POINTS;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155)\\n        returns (bool result)\\n    {\\n        result = (_interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(_interfaceId));\\n    }\\n\\n    /* ================ MUTATIVE FUNCTIONS ================ */\\n\\n    // ============ Restricted =============\\n\\n    function setNameAndSymbol(\\n        string calldata _newName,\\n        string calldata _newSymbol\\n    ) external onlyContractManager {\\n        name = _newName;\\n        symbol = _newSymbol;\\n    }\\n\\n    function setMetadataURIs(\\n        string calldata _contractURI,\\n        string calldata _tokenURI\\n    ) external onlyContractManager {\\n        contractURI = _contractURI;\\n        _setURI(_tokenURI);\\n    }\\n\\n    function setDates(uint256 _publicSale, uint256 _saleClosed)\\n        external\\n        onlyContractManager\\n    {\\n        publicSaleDate = _publicSale;\\n        saleCloseDate = _saleClosed;\\n    }\\n\\n    function setTokenData(\\n        uint256 _id,\\n        uint256 _price,\\n        uint256 _supply,\\n        uint256 _maxPerAddress\\n    ) external onlyContractManager {\\n        if (supplies[_id] > _supply) revert NewSupplyTooLow();\\n\\n        prices[_id] = _price;\\n        totalSupplies[_id] = _supply;\\n        maxPerTransactions[_id] = _maxPerAddress;\\n    }\\n\\n    function setAddresses(Addresses calldata _addresses)\\n        external\\n        onlyContractManager\\n    {\\n        if (_addresses.recoveryAddress != addresses.recoveryAddress)\\n            revert ImmutableRecoveryAddress();\\n\\n        if (\\n            addresses.collectionOwnerAddress !=\\n            _addresses.collectionOwnerAddress\\n        ) {\\n            _transferOwnership(_addresses.collectionOwnerAddress);\\n        }\\n\\n        addresses = _addresses;\\n    }\\n\\n    function setAllowBuy(bool _allowBuy) external onlyContractManager {\\n        allowBuy = _allowBuy;\\n    }\\n\\n    function addTokens(\\n        uint256[] calldata _newSupplies,\\n        uint256[] calldata _newPrices,\\n        uint256[] calldata _maxPerTransactions\\n    ) external onlyContractManager arrayLengthMatch(_newSupplies, _newPrices) {\\n        uint256 suppliesLength = _newSupplies.length;\\n\\n        if (suppliesLength != _newPrices.length) revert ArrayLengthMismatch();\\n\\n        for (uint256 i = 0; i < suppliesLength; ) {\\n            totalSupplies.push(_newSupplies[i]);\\n            supplies.push(0);\\n            prices.push(_newPrices[i]);\\n            maxPerTransactions.push(_maxPerTransactions[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setRoyalty(uint256 _primaryFee, uint256 _secondaryFee)\\n        external\\n        onlyContractManager\\n    {\\n        primaryRoyaltyFee = _primaryFee;\\n        secondaryRoyaltyFee = _secondaryFee;\\n    }\\n\\n    // ============== Minting ==============\\n    function mintBatch(\\n        address[] calldata _to,\\n        uint256[][] calldata _ids,\\n        uint256[][] calldata _amounts\\n    ) external onlyContractManager nonContract {\\n        uint256 toLength = _to.length;\\n        for (uint256 i = 0; i < toLength; ) {\\n            uint256 idsLength = _ids[i].length;\\n            for (uint256 j = 0; j < idsLength; ) {\\n                uint256 _supply = supplies[_ids[i][j]];\\n                if (_supply + _amounts[i][j] > totalSupplies[_ids[i][j]])\\n                    revert MaxSupplyExceeded();\\n                /// @dev remove overflow protection enabled by default\\n                ///      as supplies is already capped by totalSupplies\\n                unchecked {\\n                    _supply += _amounts[i][j];\\n                }\\n                /// @dev write back to storage\\n                supplies[_ids[i][j]] = _supply;\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            _mintBatch(_to[i], _ids[i], _amounts[i], '0x');\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ================ Buy ================\\n    function buyAuthorised(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _totalPrice,\\n        uint256 _maxPerAddress,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external payable buyAllowed nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _amount,\\n                _totalPrice,\\n                _maxPerAddress,\\n                _expires,\\n                _id\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        _buy(_id, _amount, _totalPrice);\\n    }\\n\\n    function buy(uint256 _id, uint256 _amount)\\n        external\\n        payable\\n        buyAllowed\\n        nonContract\\n    {\\n        if (publicSaleDate == 0 || block.timestamp < publicSaleDate) revert PublicSaleClosed();\\n\\n        uint256 totalPrice = prices[_id] * _amount;\\n        _buy(_id, _amount, totalPrice);\\n    }\\n\\n    function _buy(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _totalPrice\\n    ) internal {\\n        uint256 _supply = supplies[_id];\\n\\n        if (saleCloseDate != 0) {\\n            if (block.timestamp >= saleCloseDate) revert SaleClosed();\\n        }\\n        if (_supply + _amount > totalSupplies[_id]) revert MaxSupplyExceeded();\\n\\n        if (maxPerTransactions[_id] != 0) {\\n            if (_amount > maxPerTransactions[_id])\\n                revert MaxPerTransactionsExceeded();\\n        }\\n\\n        uint256 royaltyAmount = (_totalPrice * primaryRoyaltyFee) /\\n            BASIS_POINTS;\\n\\n        if (addresses.purchaseTokenAddress != address(0)) {\\n            IERC20 token = IERC20(addresses.purchaseTokenAddress);\\n            /// @dev primary royalty cut for Hypermint\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.managerPrimaryRoyaltyAddress,\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.customerPrimaryRoyaltyAddress,\\n                _totalPrice - royaltyAmount\\n            );\\n        } else {\\n            if (msg.value < _totalPrice) revert InsufficientPaymentValue();\\n            /// @dev primary royalty cut for Hypermint\\n            payable(addresses.managerPrimaryRoyaltyAddress).transfer(\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            payable(addresses.customerPrimaryRoyaltyAddress).transfer(\\n                _totalPrice - royaltyAmount\\n            );\\n        }\\n\\n        /// @dev remove overflow protection enabled by default\\n        ///      as supply is already capped by totalSupply\\n        unchecked {\\n            _supply += _amount;\\n        }\\n\\n        /// @dev write back to storage\\n        supplies[_id] = _supply;\\n\\n        _mint(msg.sender, _id, _amount, '0x');\\n    }\\n\\n    // ============= Ownership=============\\n    function recoverContract() external {\\n        if (msg.sender != addresses.recoveryAddress) revert NotAuthorised();\\n        _transferContractManager(addresses.recoveryAddress);\\n    }\\n\\n    /* ==================== MODIFIERS ===================== */\\n    modifier buyAllowed() {\\n        if (!allowBuy) revert BuyDisabled();\\n        _;\\n    }\\n\\n    modifier arrayLengthMatch(\\n        uint256[] calldata arr1,\\n        uint256[] calldata arr2\\n    ) {\\n        if (arr1.length != arr2.length) revert ArrayLengthMismatch();\\n        _;\\n    }\\n\\n    /// @dev this eliminates the possibility of being called\\n    ///      from a contract\\n    modifier nonContract() {\\n        if (tx.origin != msg.sender) revert ContractCallBlocked();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/Ownable_1_0_0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _contractManager;\\n\\n    event ContractManagerTransferred(\\n        address indexed previousContractManager,\\n        address indexed newContractManager\\n    );\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferContractManager(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            'Ownable: new owner is the zero address'\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the manager of the contract\\n     */\\n    function contractManager() public view virtual returns (address) {\\n        return _contractManager;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Contract Manager.\\n     */\\n    modifier onlyContractManager() {\\n        require(\\n            _msgSender() == _contractManager,\\n            'Ownable: caller is not the contract manager'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers manager of the contract to a new account (`newContractManager`).\\n     * Can only be called by the current _contractManager.\\n     */\\n    function transferContractManager(address newContractManager)\\n        public\\n        virtual\\n        onlyContractManager\\n    {\\n        require(\\n            newContractManager != address(0),\\n            'Ownable: new contract owner is the zero address'\\n        );\\n        _transferContractManager(newContractManager);\\n    }\\n\\n    /**\\n     * @dev Transfers management of the contract to a new account (`newContractManager`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferContractManager(address newContractManager)\\n        internal\\n        virtual\\n    {\\n        address oldContractManager = _contractManager;\\n        _contractManager = newContractManager;\\n\\n        emit ContractManagerTransferred(oldContractManager, newContractManager);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/HyperMintERC721A_2_2_0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC2981.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './Ownable_1_0_0.sol';\\nimport 'erc721a/contracts/extensions/ERC721ABurnable.sol';\\nimport './opensea-operator-filter/OperatorFilterer.sol';\\n\\ncontract HyperMintERC721A_2_2_0 is ERC721ABurnable, Ownable, OperatorFilterer {\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= CUSTOM ERRORS ================= */\\n    error NewSupplyTooLow();\\n    error MaxSupplyExceeded();\\n    error SignatureExpired();\\n    error NotAuthorised();\\n    error BuyDisabled();\\n    error InsufficientPaymentValue();\\n    error PublicSaleClosed();\\n    error SaleClosed();\\n    error MaxPerAddressExceeded();\\n    error MaxPerTransactionExceeded();\\n    error NonExistentToken();\\n    error ContractCallBlocked();\\n    error ImmutableRecoveryAddress();\\n    error TransfersDisabled();\\n\\n    /* ================= STATE VARIABLES ================= */\\n\\n    // ============== Structs ==============\\n    struct GeneralConfig {\\n        string name;\\n        string symbol;\\n        string contractMetadataUrl;\\n        string tokenMetadataUrl;\\n        bool allowBuy;\\n        bool allowPublicTransfer;\\n        bool enableOpenSeaOperatorFilterRegistry;\\n        uint256 publicSaleDate;\\n        uint256 saleCloseDate;\\n        uint256 primaryRoyaltyFee;\\n        uint256 secondaryRoyaltyFee;\\n    }\\n\\n    struct Addresses {\\n        address recoveryAddress;\\n        address collectionOwnerAddress;\\n        address authorisationAddress;\\n        address purchaseTokenAddress;\\n        address managerPrimaryRoyaltyAddress;\\n        address customerPrimaryRoyaltyAddress;\\n        address secondaryRoyaltyAddress;\\n    }\\n\\n    struct TokenConfig {\\n        uint256 price;\\n        uint256 maxSupply;\\n        uint256 maxPerTransaction;\\n    }\\n\\n    // ========= Immutable Storage =========\\n    uint256 internal constant BASIS_POINTS = 10000;\\n\\n    // ========== Mutable Storage ==========\\n    string public constant version = '2.2.0';\\n\\n    GeneralConfig public generalConfig;\\n    TokenConfig public tokenConfig;\\n    Addresses public addresses;\\n\\n    /* =================== CONSTRUCTOR =================== */\\n    /// @param _generalConfig settings for the contract\\n    /// @param _tokenConfig settings for tokens minted by the contract\\n    /// @param _addresses a collection of addresses\\n    constructor(\\n        GeneralConfig memory _generalConfig,\\n        TokenConfig memory _tokenConfig,\\n        Addresses memory _addresses\\n    )\\n        ERC721A('', '')\\n        OperatorFilterer(\\n            address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6), // default filter by OS\\n            true // subscribe to the filter list\\n        )\\n    {\\n        _transferOwnership(_addresses.collectionOwnerAddress);\\n        generalConfig = _generalConfig;\\n        tokenConfig = _tokenConfig;\\n        addresses = _addresses;\\n    }\\n\\n    /* ====================== Views ====================== */\\n    function name()\\n        public\\n        view\\n        override\\n        returns (string memory collectionName)\\n    {\\n        collectionName = generalConfig.name;\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override\\n        returns (string memory collectionSymbol)\\n    {\\n        collectionSymbol = generalConfig.symbol;\\n    }\\n\\n    function supply() public view returns (uint256 _supply) {\\n        _supply = _totalMinted();\\n    }\\n\\n    function totalMinted(address addr) public view returns (uint256 numMinted) {\\n        numMinted = _numberMinted(addr);\\n    }\\n\\n    function contractURI() public view virtual returns (string memory uri) {\\n        uri = generalConfig.contractMetadataUrl;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory uri)\\n    {\\n        if (!_exists(_tokenId)) revert NonExistentToken();\\n        uri = string(\\n            abi.encodePacked(\\n                generalConfig.tokenMetadataUrl,\\n                _toString(_tokenId)\\n            )\\n        );\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address royaltyAddress, uint256 royaltyAmount)\\n    {\\n        /// @dev secondary royalty to be paid out by the marketplace\\n        ///      to the splitter contract\\n        royaltyAddress = addresses.secondaryRoyaltyAddress;\\n        royaltyAmount =\\n            (_salePrice * generalConfig.secondaryRoyaltyFee) /\\n            BASIS_POINTS;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A)\\n        returns (bool result)\\n    {\\n        result = (_interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(_interfaceId));\\n    }\\n\\n    /* ================ MUTATIVE FUNCTIONS ================ */\\n\\n    // ============ Restricted =============\\n    function setNameAndSymbol(\\n        string calldata _newName,\\n        string calldata _newSymbol\\n    ) external onlyContractManager {\\n        generalConfig.name = _newName;\\n        generalConfig.symbol = _newSymbol;\\n    }\\n\\n    function setMetadataURIs(\\n        string calldata _contractURI,\\n        string calldata _tokenURI\\n    ) external onlyContractManager {\\n        generalConfig.contractMetadataUrl = _contractURI;\\n        generalConfig.tokenMetadataUrl = _tokenURI;\\n    }\\n\\n    function setDates(uint256 _publicSale, uint256 _saleClosed)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.publicSaleDate = _publicSale;\\n        generalConfig.saleCloseDate = _saleClosed;\\n    }\\n\\n    function setTokenConfig(\\n        uint256 _price,\\n        uint256 _maxSupply,\\n        uint256 _maxPerTransaction\\n    ) external onlyContractManager {\\n        if (totalSupply() > _maxSupply) revert NewSupplyTooLow();\\n\\n        tokenConfig.price = _price;\\n        tokenConfig.maxSupply = _maxSupply;\\n        tokenConfig.maxPerTransaction = _maxPerTransaction;\\n    }\\n\\n    function setAddresses(Addresses calldata _addresses)\\n        external\\n        onlyContractManager\\n    {\\n        if (_addresses.recoveryAddress != addresses.recoveryAddress)\\n            revert ImmutableRecoveryAddress();\\n\\n        if (\\n            addresses.collectionOwnerAddress !=\\n            _addresses.collectionOwnerAddress\\n        ) {\\n            _transferOwnership(_addresses.collectionOwnerAddress);\\n        }\\n\\n        addresses = _addresses;\\n    }\\n\\n    function setAllowBuy(bool _allowBuy) external onlyContractManager {\\n        generalConfig.allowBuy = _allowBuy;\\n    }\\n\\n    function setAllowPublicTransfer(bool _allowPublicTransfer)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.allowPublicTransfer = _allowPublicTransfer;\\n    }\\n\\n    function setEnableOpenSeaOperatorFilterRegistry(bool _enable) external onlyContractManager {\\n        generalConfig.enableOpenSeaOperatorFilterRegistry = _enable;\\n    }\\n\\n    function setRoyalty(uint256 _primaryFee, uint256 _secondaryFee)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.primaryRoyaltyFee = _primaryFee;\\n        generalConfig.secondaryRoyaltyFee = _secondaryFee;\\n    }\\n\\n    // ============== Minting ==============\\n    function mintBatch(\\n        address[] calldata _accounts,\\n        uint256[] calldata _amounts\\n    ) external onlyContractManager nonContract {\\n        uint256 length = _accounts.length;\\n\\n        for (uint256 i = 0; i < length; ) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n\\n            if (supply() + amount > tokenConfig.maxSupply)\\n                revert MaxSupplyExceeded();\\n\\n            _mint(account, amount);\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    // ================ Buy ================\\n    function buyAuthorised(\\n        uint256 _amount,\\n        uint256 _totalPrice,\\n        uint256 _maxPerAddress,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external payable buyAllowed nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _amount,\\n                _totalPrice,\\n                _maxPerAddress,\\n                _expires\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        if (_maxPerAddress != 0) {\\n            if (_numberMinted(msg.sender) + _amount > _maxPerAddress)\\n                revert MaxPerAddressExceeded();\\n        }\\n\\n        _buy(_amount, _totalPrice);\\n    }\\n\\n    function buy(uint256 _amount) external payable buyAllowed nonContract {\\n        if (\\n            generalConfig.publicSaleDate == 0 ||\\n            block.timestamp < generalConfig.publicSaleDate\\n        ) revert PublicSaleClosed();\\n\\n        uint256 totalPrice = tokenConfig.price * _amount;\\n        _buy(_amount, totalPrice);\\n    }\\n\\n    function _buy(uint256 _amount, uint256 _totalPrice) internal {\\n        if (generalConfig.saleCloseDate != 0) {\\n            if (block.timestamp >= generalConfig.saleCloseDate)\\n                revert SaleClosed();\\n        }\\n\\n        if (_totalMinted() + _amount > tokenConfig.maxSupply)\\n            revert MaxSupplyExceeded();\\n\\n        if (tokenConfig.maxPerTransaction != 0) {\\n            if (_amount > tokenConfig.maxPerTransaction)\\n                revert MaxPerTransactionExceeded();\\n        }\\n\\n        uint256 royaltyAmount = (_totalPrice *\\n            generalConfig.primaryRoyaltyFee) / BASIS_POINTS;\\n\\n        if (addresses.purchaseTokenAddress != address(0)) {\\n            IERC20 token = IERC20(addresses.purchaseTokenAddress);\\n            /// @dev primary royalty cut for HyperMint\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.managerPrimaryRoyaltyAddress,\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.customerPrimaryRoyaltyAddress,\\n                _totalPrice - royaltyAmount\\n            );\\n        } else {\\n            if (msg.value < _totalPrice) revert InsufficientPaymentValue();\\n            /// @dev primary royalty cut for HyperMint\\n            payable(addresses.managerPrimaryRoyaltyAddress).transfer(\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            payable(addresses.customerPrimaryRoyaltyAddress).transfer(\\n                _totalPrice - royaltyAmount\\n            );\\n        }\\n\\n        /// @dev mint tokens\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    // ================ Transfers ================\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    )\\n        internal\\n        override\\n        transferAllowed(from, to)\\n        onlyAllowedOperator(from, generalConfig.enableOpenSeaOperatorFilterRegistry)\\n    {\\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n\\n    function transferAuthorised(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _from,\\n                _to,\\n                _tokenId,\\n                _expires\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        super.safeTransferFrom(_from, _to, _tokenId);\\n    }\\n\\n    // ============= Ownership =============\\n    function recoverContract() external {\\n        if (msg.sender != addresses.recoveryAddress) revert NotAuthorised();\\n        _transferContractManager(addresses.recoveryAddress);\\n    }\\n\\n    function _startTokenId() internal pure override returns (uint256 tokenId) {\\n        tokenId = 1;\\n    }\\n\\n    /* ==================== MODIFIERS ===================== */\\n    modifier buyAllowed() {\\n        if (!generalConfig.allowBuy) revert BuyDisabled();\\n        _;\\n    }\\n\\n    /// @dev this eliminates the possibility of being called\\n    ///      from a contract\\n    modifier nonContract() {\\n        if (tx.origin != msg.sender) revert ContractCallBlocked();\\n        _;\\n    }\\n\\n    modifier transferAllowed(address from, address to) {\\n        bool isMinting = from == address(0);\\n        bool isBurning = to == address(0);\\n        bool isContractManager = from == this.contractManager();\\n        bool isTransferAuthorised = msg.sig == this.transferAuthorised.selector;\\n\\n        if (\\n            !isMinting &&\\n            !isContractManager &&\\n            !isBurning &&\\n            !isTransferAuthorised\\n        ) {\\n            if (!generalConfig.allowPublicTransfer) revert TransfersDisabled();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/ERC721ABurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721ABurnable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721ABurnable.\\n *\\n * @dev ERC721A token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721ABurnable is ERC721A, IERC721ABurnable {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual override {\\n        _burn(tokenId, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/opensea-operator-filter/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IOperatorFilterRegistry} from './IOperatorFilterRegistry.sol';\\n\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant operatorFilterRegistry =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (subscribe) {\\n                operatorFilterRegistry.registerAndSubscribe(\\n                    address(this),\\n                    subscriptionOrRegistrantToCopy\\n                );\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    operatorFilterRegistry.registerAndCopyEntries(\\n                        address(this),\\n                        subscriptionOrRegistrantToCopy\\n                    );\\n                } else {\\n                    operatorFilterRegistry.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from, bool switchedOn) virtual {\\n        // return back out if toggle is off\\n        if (!switchedOn) {\\n            _;\\n            return;\\n        }\\n\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (\\n                !(operatorFilterRegistry.isOperatorAllowed(\\n                    address(this),\\n                    msg.sender\\n                ) &&\\n                    operatorFilterRegistry.isOperatorAllowed(\\n                        address(this),\\n                        from\\n                    ))\\n            ) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC721ABurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721ABurnable.\\n */\\ninterface IERC721ABurnable is IERC721A {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Reference type for token approval.\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp {\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } {\\n                // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n\\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"src/contracts/opensea-operator-filter/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription)\\n        external;\\n\\n    function registerAndCopyEntries(\\n        address registrant,\\n        address registrantToCopy\\n    ) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe)\\n        external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant)\\n        external\\n        returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index)\\n        external\\n        returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy)\\n        external;\\n\\n    function isOperatorFiltered(address registrant, address operator)\\n        external\\n        returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode)\\n        external\\n        returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash)\\n        external\\n        returns (bool);\\n\\n    function filteredOperators(address addr)\\n        external\\n        returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr)\\n        external\\n        returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index)\\n        external\\n        returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index)\\n        external\\n        returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/contracts/HyperMintERC1155_2_2_0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC2981.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './opensea-operator-filter/OperatorFilterer.sol';\\nimport './Ownable_1_0_0.sol';\\n\\ncontract HyperMintERC1155_2_2_0 is ERC1155Burnable, Ownable, OperatorFilterer {\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= CUSTOM ERRORS ================= */\\n    error NewSupplyTooLow();\\n    error ArrayLengthMismatch();\\n    error MaxSupplyExceeded();\\n    error SignatureExpired();\\n    error NotAuthorised();\\n    error BuyDisabled();\\n    error InsufficientPaymentValue();\\n    error PublicSaleClosed();\\n    error SaleClosed();\\n    error MaxPerTransactionsExceeded();\\n    error ContractCallBlocked();\\n    error ImmutableRecoveryAddress();\\n    error TransfersDisabled();\\n\\n    /* ================= STATE VARIABLES ================= */\\n\\n    // ============== Structs ==============\\n    struct GeneralConfig {\\n        string name;\\n        string symbol;\\n        string contractMetadataUrl;\\n        string tokenMetadataUrl;\\n        bool allowBuy;\\n        bool allowPublicTransfer;\\n        bool enableOpenSeaOperatorFilterRegistry;\\n        uint256 publicSaleDate;\\n        uint256 saleCloseDate;\\n        uint256 primaryRoyaltyFee;\\n        uint256 secondaryRoyaltyFee;\\n    }\\n\\n    struct Addresses {\\n        address recoveryAddress;\\n        address collectionOwnerAddress;\\n        address authorisationAddress;\\n        address purchaseTokenAddress;\\n        address managerPrimaryRoyaltyAddress;\\n        address customerPrimaryRoyaltyAddress;\\n        address secondaryRoyaltyAddress;\\n    }\\n\\n    struct TokenConfig {\\n        uint256 price;\\n        uint256 maxSupply;\\n        uint256 maxPerTransaction;\\n    }\\n\\n    // ========= Immutable Storage =========\\n    uint256 internal constant BASIS_POINTS = 10000;\\n\\n    // ========== Mutable Storage ==========\\n    string public constant version = '2.2.0';\\n\\n    GeneralConfig public generalConfig;\\n    TokenConfig[] public tokenConfigs;\\n    Addresses public addresses;\\n\\n    uint256[] public supplies;\\n\\n    /* =================== CONSTRUCTOR =================== */\\n    /// @param _generalConfig settings for the contract\\n    /// @param _addresses a collection of addresses\\n    constructor(\\n        GeneralConfig memory _generalConfig,\\n        Addresses memory _addresses\\n    )\\n        ERC1155('')\\n        OperatorFilterer(\\n            address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6), // default filter by OS\\n            true // subscribe to the filter list\\n        )\\n    {\\n        _transferOwnership(_addresses.collectionOwnerAddress);\\n        generalConfig = _generalConfig;\\n        addresses = _addresses;\\n\\n        _setURI(generalConfig.tokenMetadataUrl);\\n    }\\n\\n    /* ====================== Views ====================== */\\n    function name() public view returns (string memory collectionName) {\\n        collectionName = generalConfig.name;\\n    }\\n\\n    function symbol() public view returns (string memory collectionSymbol) {\\n        collectionSymbol = generalConfig.symbol;\\n    }\\n\\n    function contractURI() public view virtual returns (string memory uri) {\\n        uri = generalConfig.contractMetadataUrl;\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address royaltyAddress, uint256 royaltyAmount)\\n    {\\n        /// @dev secondary royalty to be paid out by the marketplace\\n        ///      to the splitter contract\\n        royaltyAddress = addresses.secondaryRoyaltyAddress;\\n        royaltyAmount =\\n            (_salePrice * generalConfig.secondaryRoyaltyFee) /\\n            BASIS_POINTS;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155)\\n        returns (bool result)\\n    {\\n        result = (_interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(_interfaceId));\\n    }\\n\\n    /* ================ MUTATIVE FUNCTIONS ================ */\\n\\n    // ============ Restricted =============\\n\\n    function setNameAndSymbol(\\n        string calldata _newName,\\n        string calldata _newSymbol\\n    ) external onlyContractManager {\\n        generalConfig.name = _newName;\\n        generalConfig.symbol = _newSymbol;\\n    }\\n\\n    function setMetadataURIs(\\n        string calldata _contractURI,\\n        string calldata _tokenURI\\n    ) external onlyContractManager {\\n        generalConfig.contractMetadataUrl = _contractURI;\\n        generalConfig.tokenMetadataUrl = _tokenURI;\\n        _setURI(_tokenURI);\\n    }\\n\\n    function setDates(uint256 _publicSale, uint256 _saleClosed)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.publicSaleDate = _publicSale;\\n        generalConfig.saleCloseDate = _saleClosed;\\n    }\\n\\n    function setTokenConfig(\\n        uint256 _id,\\n        uint256 _price,\\n        uint256 _maxSupply,\\n        uint256 _maxPerTransaction\\n    ) external onlyContractManager {\\n        if (supplies[_id] > _maxSupply) revert NewSupplyTooLow();\\n\\n        tokenConfigs[_id].price = _price;\\n        tokenConfigs[_id].maxSupply = _maxSupply;\\n        tokenConfigs[_id].maxPerTransaction = _maxPerTransaction;\\n    }\\n\\n    function setAddresses(Addresses calldata _addresses)\\n        external\\n        onlyContractManager\\n    {\\n        if (_addresses.recoveryAddress != addresses.recoveryAddress)\\n            revert ImmutableRecoveryAddress();\\n\\n        if (\\n            addresses.collectionOwnerAddress !=\\n            _addresses.collectionOwnerAddress\\n        ) {\\n            _transferOwnership(_addresses.collectionOwnerAddress);\\n        }\\n\\n        addresses = _addresses;\\n    }\\n\\n    function setAllowBuy(bool _allowBuy) external onlyContractManager {\\n        generalConfig.allowBuy = _allowBuy;\\n    }\\n\\n    function setAllowPublicTransfer(bool _allowPublicTransfer)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.allowPublicTransfer = _allowPublicTransfer;\\n    }\\n\\n    function setEnableOpenSeaOperatorFilterRegistry(bool _enable) external onlyContractManager {\\n        generalConfig.enableOpenSeaOperatorFilterRegistry = _enable;\\n    }\\n\\n    function setRoyalty(uint256 _primaryFee, uint256 _secondaryFee)\\n        external\\n        onlyContractManager\\n    {\\n        generalConfig.primaryRoyaltyFee = _primaryFee;\\n        generalConfig.secondaryRoyaltyFee = _secondaryFee;\\n    }\\n\\n    function addTokens(TokenConfig[] calldata _tokens)\\n        external\\n        onlyContractManager\\n    {\\n        for (uint256 i = 0; i < _tokens.length; ) {\\n            supplies.push(0);\\n            tokenConfigs.push(_tokens[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ============== Minting ==============\\n    function mintBatch(\\n        address[] calldata _to,\\n        uint256[][] calldata _ids,\\n        uint256[][] calldata _amounts\\n    ) external onlyContractManager nonContract {\\n        uint256 toLength = _to.length;\\n\\n        for (uint256 i = 0; i < toLength; ) {\\n            uint256 idsLength = _ids[i].length;\\n\\n            for (uint256 j = 0; j < idsLength; ) {\\n                uint256 _supply = supplies[_ids[i][j]];\\n\\n                if (\\n                    _supply + _amounts[i][j] >\\n                    tokenConfigs[_ids[i][j]].maxSupply\\n                ) revert MaxSupplyExceeded();\\n\\n                /// @dev remove overflow protection enabled by default\\n                ///      as supplies is already capped by totalSupplies\\n                unchecked {\\n                    _supply += _amounts[i][j];\\n                }\\n\\n                /// @dev write back to storage\\n                supplies[_ids[i][j]] = _supply;\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            _mintBatch(_to[i], _ids[i], _amounts[i], '0x');\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ================ Buy ================\\n    function buyAuthorised(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _totalPrice,\\n        uint256 _maxPerAddress,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external payable buyAllowed nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _amount,\\n                _totalPrice,\\n                _maxPerAddress,\\n                _expires,\\n                _id\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        _buy(_id, _amount, _totalPrice);\\n    }\\n\\n    function buy(uint256 _id, uint256 _amount)\\n        external\\n        payable\\n        buyAllowed\\n        nonContract\\n    {\\n        if (\\n            generalConfig.publicSaleDate == 0 ||\\n            block.timestamp < generalConfig.publicSaleDate\\n        ) revert PublicSaleClosed();\\n\\n        uint256 totalPrice = tokenConfigs[_id].price * _amount;\\n        _buy(_id, _amount, totalPrice);\\n    }\\n\\n    function _buy(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _totalPrice\\n    ) internal {\\n        if (generalConfig.saleCloseDate != 0) {\\n            if (block.timestamp >= generalConfig.saleCloseDate)\\n                revert SaleClosed();\\n        }\\n\\n        uint256 _supply = supplies[_id];\\n        uint256 _maxSupply = tokenConfigs[_id].maxSupply;\\n\\n        if (_supply + _amount > _maxSupply) revert MaxSupplyExceeded();\\n\\n        uint256 _maxPerTransaction = tokenConfigs[_id].maxPerTransaction;\\n        if (_maxPerTransaction != 0) {\\n            if (_amount > _maxPerTransaction)\\n                revert MaxPerTransactionsExceeded();\\n        }\\n\\n        uint256 royaltyAmount = (_totalPrice *\\n            generalConfig.primaryRoyaltyFee) / BASIS_POINTS;\\n\\n        if (addresses.purchaseTokenAddress != address(0)) {\\n            IERC20 token = IERC20(addresses.purchaseTokenAddress);\\n\\n            /// @dev primary royalty cut for Hypermint\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.managerPrimaryRoyaltyAddress,\\n                royaltyAmount\\n            );\\n\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.customerPrimaryRoyaltyAddress,\\n                _totalPrice - royaltyAmount\\n            );\\n        } else {\\n            if (msg.value < _totalPrice) revert InsufficientPaymentValue();\\n\\n            /// @dev primary royalty cut for Hypermint\\n            payable(addresses.managerPrimaryRoyaltyAddress).transfer(\\n                royaltyAmount\\n            );\\n\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            payable(addresses.customerPrimaryRoyaltyAddress).transfer(\\n                _totalPrice - royaltyAmount\\n            );\\n        }\\n\\n        /// @dev remove overflow protection enabled by default\\n        ///      as supply is already capped by totalSupply\\n        unchecked {\\n            _supply += _amount;\\n        }\\n\\n        /// @dev write back to storage\\n        supplies[_id] = _supply;\\n\\n        _mint(msg.sender, _id, _amount, '0x');\\n    }\\n\\n    // ================ Transfers ================\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        override(ERC1155)\\n        transferAllowed(from, to)\\n        onlyAllowedOperator(from, generalConfig.enableOpenSeaOperatorFilterRegistry)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function transferAuthorised(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _from,\\n                _to,\\n                _tokenId,\\n                _amount,\\n                _expires\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        super.safeTransferFrom(_from, _to, _tokenId, _amount, '0x');\\n    }\\n\\n    // ============= Ownership=============\\n    function recoverContract() external {\\n        if (msg.sender != addresses.recoveryAddress) revert NotAuthorised();\\n        _transferContractManager(addresses.recoveryAddress);\\n    }\\n\\n    /* ==================== MODIFIERS ===================== */\\n    modifier buyAllowed() {\\n        if (!generalConfig.allowBuy) revert BuyDisabled();\\n        _;\\n    }\\n\\n    /// @dev this eliminates the possibility of being called\\n    ///      from a contract\\n    modifier nonContract() {\\n        if (tx.origin != msg.sender) revert ContractCallBlocked();\\n        _;\\n    }\\n\\n    modifier transferAllowed(address from, address to) {\\n        bool isMinting = from == address(0);\\n        bool isBurning = to == address(0);\\n        bool isContractManager = from == this.contractManager();\\n        bool isTransferAuthorised = msg.sig == this.transferAuthorised.selector;\\n\\n        if (\\n            !isMinting &&\\n            !isContractManager &&\\n            !isBurning &&\\n            !isTransferAuthorised\\n        ) {\\n            if (!generalConfig.allowPublicTransfer) revert TransfersDisabled();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/HyperMintERC721A_2_0_0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC2981.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './Ownable_1_0_0.sol';\\nimport 'erc721a/contracts/extensions/ERC721ABurnable.sol';\\n\\ncontract HyperMintERC721A_2_0_0 is ERC721ABurnable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= CUSTOM ERRORS ================= */\\n    error NewSupplyTooLow();\\n    error MaxSupplyExceeded();\\n    error SignatureExpired();\\n    error NotAuthorised();\\n    error BuyDisabled();\\n    error InsufficientPaymentValue();\\n    error PublicSaleClosed();\\n    error SaleClosed();\\n    error MaxPerAddressExceeded();\\n    error MaxPerTransactionExceeded();\\n    error NonExistentToken();\\n    error ContractCallBlocked();\\n    error ImmutableRecoveryAddress();\\n\\n    /* ================= STATE VARIABLES ================= */\\n\\n    // ============== Structs ==============\\n    struct Addresses {\\n        address recoveryAddress;\\n        address collectionOwnerAddress;\\n        address authorisationAddress;\\n        address purchaseTokenAddress;\\n        address managerPrimaryRoyaltyAddress;\\n        address customerPrimaryRoyaltyAddress;\\n        address secondaryRoyaltyAddress;\\n    }\\n\\n    struct TokenInfo {\\n        uint256 price;\\n        uint256 supply;\\n        uint256 maxSupply;\\n        uint256 maxPerTransaction;\\n    }\\n\\n    // ========= Immutable Storage =========\\n    uint256 internal constant BASIS_POINTS = 10000;\\n\\n    // ========== Mutable Storage ==========\\n    string public constant version = '2.0.0';\\n\\n    /// @dev token info\\n    string _name;\\n    string _symbol;\\n    uint256 public price;\\n    uint256 public maxSupply;\\n    /// @dev only apply to public sale\\n    uint256 public maxPerTransaction;\\n\\n    /// @dev metadata info\\n    string public contractURI;\\n    string public tokenMetadataURI;\\n\\n    /// @dev toggle for api mints\\n    bool public allowBuy;\\n\\n    /// @dev sale dates\\n    uint256 public publicSaleDate;\\n    uint256 public saleCloseDate;\\n\\n    /// @dev royalty fees\\n    uint256 public primaryRoyaltyFee;\\n    uint256 public secondaryRoyaltyFee;\\n\\n    Addresses public addresses;\\n\\n    /* =================== CONSTRUCTOR =================== */\\n    /// @notice Creates a new NFT contract\\n    /// @param __name token name\\n    /// @param __symbol token symbol\\n    /// @param _price token price\\n    /// @param _maxSupply token max supply\\n    /// @param _allowBuy toggle to enable/disable buying\\n    /// @param _maxPerTransaction max amount an address can buy\\n    /// @param _addresses a collection of addresses\\n    constructor(\\n        string memory __name,\\n        string memory __symbol,\\n        uint256 _price,\\n        uint256 _maxSupply,\\n        string memory _contractMetadataURI,\\n        string memory _tokenMetadataURI,\\n        bool _allowBuy,\\n        uint256 _maxPerTransaction,\\n        Addresses memory _addresses\\n    ) ERC721A('', '') {\\n        _transferOwnership(_addresses.collectionOwnerAddress);\\n\\n        _name = __name;\\n        _symbol = __symbol;\\n        price = _price;\\n        maxSupply = _maxSupply;\\n        allowBuy = _allowBuy;\\n        tokenMetadataURI = _tokenMetadataURI;\\n        contractURI = _contractMetadataURI;\\n        maxPerTransaction = _maxPerTransaction;\\n        addresses = _addresses;\\n    }\\n\\n    /* ====================== Views ====================== */\\n    function name() public view override returns (string memory tokenName) {\\n        tokenName = _name;\\n    }\\n\\n    function totalMinted(address addr) public view returns (uint256 numMinted) {\\n        numMinted = _numberMinted(addr);\\n    }\\n\\n    function symbol() public view override returns (string memory tokenSymbol) {\\n        tokenSymbol = _symbol;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory uri)\\n    {\\n        if (!_exists(_tokenId)) revert NonExistentToken();\\n        uri = string(abi.encodePacked(tokenMetadataURI, _toString(_tokenId)));\\n    }\\n\\n    function getTokenInfo() external view returns (TokenInfo memory tokenInfo) {\\n        tokenInfo = TokenInfo(\\n            price,\\n            totalSupply(),\\n            maxSupply,\\n            maxPerTransaction\\n        );\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address royaltyAddress, uint256 royaltyAmount)\\n    {\\n        /// @dev secondary royalty to be paid out by the marketplace\\n        ///      to the splitter contract\\n        royaltyAddress = addresses.secondaryRoyaltyAddress;\\n        royaltyAmount = (_salePrice * secondaryRoyaltyFee) / BASIS_POINTS;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A)\\n        returns (bool result)\\n    {\\n        result = (_interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(_interfaceId));\\n    }\\n\\n    /* ================ MUTATIVE FUNCTIONS ================ */\\n\\n    // ============ Restricted =============\\n    function setNameAndSymbol(\\n        string calldata _newName,\\n        string calldata _newSymbol\\n    ) external onlyContractManager {\\n        _name = _newName;\\n        _symbol = _newSymbol;\\n    }\\n\\n    function setMetadataURIs(\\n        string calldata _contractURI,\\n        string calldata _tokenURI\\n    ) external onlyContractManager {\\n        contractURI = _contractURI;\\n        tokenMetadataURI = _tokenURI;\\n    }\\n\\n    function setDates(uint256 _publicSale, uint256 _saleClosed)\\n        external\\n        onlyContractManager\\n    {\\n        publicSaleDate = _publicSale;\\n        saleCloseDate = _saleClosed;\\n    }\\n\\n    function setTokenData(\\n        uint256 _price,\\n        uint256 _maxSupply,\\n        uint256 _maxPerTransaction\\n    ) external onlyContractManager {\\n        if (totalSupply() > _maxSupply) revert NewSupplyTooLow();\\n\\n        price = _price;\\n        maxSupply = _maxSupply;\\n        maxPerTransaction = _maxPerTransaction;\\n    }\\n\\n    function setAddresses(Addresses calldata _addresses)\\n        external\\n        onlyContractManager\\n    {\\n        if (_addresses.recoveryAddress != addresses.recoveryAddress)\\n            revert ImmutableRecoveryAddress();\\n\\n        if (\\n            addresses.collectionOwnerAddress !=\\n            _addresses.collectionOwnerAddress\\n        ) {\\n            _transferOwnership(_addresses.collectionOwnerAddress);\\n        }\\n\\n        addresses = _addresses;\\n    }\\n\\n    function setAllowBuy(bool _allowBuy) external onlyContractManager {\\n        allowBuy = _allowBuy;\\n    }\\n\\n    function setRoyalty(uint256 _primaryFee, uint256 _secondaryFee)\\n        external\\n        onlyContractManager\\n    {\\n        primaryRoyaltyFee = _primaryFee;\\n        secondaryRoyaltyFee = _secondaryFee;\\n    }\\n\\n    // ============== Minting ==============\\n    function mintBatch(\\n        address[] calldata _accounts,\\n        uint256[] calldata _amounts\\n    ) external onlyContractManager nonContract {\\n        uint256 length = _accounts.length;\\n\\n        for (uint256 i = 0; i < length; ) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n\\n            if (_totalMinted() + amount > maxSupply) revert MaxSupplyExceeded();\\n\\n            _mint(account, amount);\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    // ================ Buy ================\\n    function buyAuthorised(\\n        uint256 _amount,\\n        uint256 _totalPrice,\\n        uint256 _maxPerAddress,\\n        uint256 _expires,\\n        bytes calldata _signature\\n    ) external payable buyAllowed nonContract {\\n        if (block.timestamp >= _expires) revert SignatureExpired();\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                msg.sender,\\n                _amount,\\n                _totalPrice,\\n                _maxPerAddress,\\n                _expires\\n            )\\n        );\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n\\n        if (\\n            ECDSA.recover(message, _signature) != addresses.authorisationAddress\\n        ) revert NotAuthorised();\\n\\n        if (_maxPerAddress != 0) {\\n            if (_numberMinted(msg.sender) + _amount > _maxPerAddress)\\n                revert MaxPerAddressExceeded();\\n        }\\n\\n        _buy(_amount, _totalPrice);\\n    }\\n\\n    function buy(uint256 _amount) external payable buyAllowed nonContract {\\n        if (publicSaleDate == 0 || block.timestamp < publicSaleDate) revert PublicSaleClosed();\\n\\n        uint256 totalPrice = price * _amount;\\n        _buy(_amount, totalPrice);\\n    }\\n\\n    function _buy(uint256 _amount, uint256 _totalPrice) internal {\\n        if (saleCloseDate != 0) {\\n            if (block.timestamp >= saleCloseDate) revert SaleClosed();\\n        }\\n        if (_totalMinted() + _amount > maxSupply) revert MaxSupplyExceeded();\\n        if (maxPerTransaction != 0) {\\n            if (_amount > maxPerTransaction) revert MaxPerTransactionExceeded();\\n        }\\n\\n        uint256 royaltyAmount = (_totalPrice * primaryRoyaltyFee) /\\n            BASIS_POINTS;\\n\\n        if (addresses.purchaseTokenAddress != address(0)) {\\n            IERC20 token = IERC20(addresses.purchaseTokenAddress);\\n            /// @dev primary royalty cut for HyperMint\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.managerPrimaryRoyaltyAddress,\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            token.safeTransferFrom(\\n                msg.sender,\\n                addresses.customerPrimaryRoyaltyAddress,\\n                _totalPrice - royaltyAmount\\n            );\\n        } else {\\n            if (msg.value < _totalPrice) revert InsufficientPaymentValue();\\n            /// @dev primary royalty cut for HyperMint\\n            payable(addresses.managerPrimaryRoyaltyAddress).transfer(\\n                royaltyAmount\\n            );\\n            /// @dev primary sale (i.e. minting revenue) for customer (or its payees)\\n            payable(addresses.customerPrimaryRoyaltyAddress).transfer(\\n                _totalPrice - royaltyAmount\\n            );\\n        }\\n\\n        /// @dev mint tokens\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    // ============= Ownership =============\\n    function recoverContract() external {\\n        if (msg.sender != addresses.recoveryAddress) revert NotAuthorised();\\n        _transferContractManager(addresses.recoveryAddress);\\n    }\\n\\n    function _startTokenId() internal pure override returns (uint256 tokenId) {\\n        tokenId = 1;\\n    }\\n\\n    /* ==================== MODIFIERS ===================== */\\n    modifier buyAllowed() {\\n        if (!allowBuy) revert BuyDisabled();\\n        _;\\n    }\\n\\n    /// @dev this eliminates the possibility of being called\\n    ///      from a contract\\n    modifier nonContract() {\\n        if (tx.origin != msg.sender) revert ContractCallBlocked();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(\\n        IERC20 indexed token,\\n        address to,\\n        uint256 amount\\n    );\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 internal _totalShares;\\n    uint256 internal _totalReleased;\\n\\n    mapping(address => uint256) internal _shares;\\n    mapping(address => uint256) internal _released;\\n    address[] internal _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(\\n            payees.length == shares_.length,\\n            'PaymentSplitter: payees and shares length mismatch'\\n        );\\n        require(payees.length > 0, 'PaymentSplitter: no payees');\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    function releasedAll()\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory addresses = new address[](_payees.length);\\n        uint256[] memory releasedAmounts = new uint256[](_payees.length);\\n\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            addresses[i] = _payees[i];\\n            releasedAmounts[i] = _released[_payees[i]];\\n        }\\n        return (addresses, releasedAmounts);\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amounts of all payees' releasable Ether.\\n     */\\n    function releasableAll()\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory addresses = new address[](_payees.length);\\n        uint256[] memory releasableAmounts = new uint256[](_payees.length);\\n\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            addresses[i] = _payees[i];\\n            releasableAmounts[i] = releasable(_payees[i]);\\n        }\\n        return (addresses, releasableAmounts);\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /// @dev added here because _erc20Released is private\\n    function releasedAll(IERC20 token)\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory addresses = new address[](_payees.length);\\n        uint256[] memory releasedAmounts = new uint256[](_payees.length);\\n\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            addresses[i] = _payees[i];\\n            releasedAmounts[i] = _erc20Released[token][_payees[i]];\\n        }\\n        return (addresses, releasedAmounts);\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20 token, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReceived = token.balanceOf(address(this)) +\\n            totalReleased(token);\\n        return\\n            _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amounts of all payees' releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasableAll(IERC20 token)\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory addresses = new address[](_payees.length);\\n        uint256[] memory releasableAmounts = new uint256[](_payees.length);\\n\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            addresses[i] = _payees[i];\\n            releasableAmounts[i] = releasable(token, _payees[i]);\\n        }\\n        return (addresses, releasableAmounts);\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, 'PaymentSplitter: account has no shares');\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, 'PaymentSplitter: account is not due payment');\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, 'PaymentSplitter: account has no shares');\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, 'PaymentSplitter: account is not due payment');\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return\\n            (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) internal {\\n        require(\\n            account != address(0),\\n            'PaymentSplitter: account is the zero address'\\n        );\\n        require(shares_ > 0, 'PaymentSplitter: shares are 0');\\n        require(\\n            _shares[account] == 0,\\n            'PaymentSplitter: account already has shares'\\n        );\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/Splitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './PaymentSplitter.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract Splitter is Ownable, PaymentSplitter {\\n    constructor(address[] memory _payees, uint256[] memory _shares)\\n        PaymentSplitter(_payees, _shares)\\n    {}\\n\\n    function totalPayees() public view returns (uint256) {\\n        return _payees.length;\\n    }\\n\\n    function isPayee(address account) public view returns (bool) {\\n        return _shares[account] > 0;\\n    }\\n\\n    function addPayee(address account, uint256 shares_) public onlyOwner {\\n        _addPayee(account, shares_);\\n    }\\n\\n    function addPayees(address[] memory payees, uint256[] memory shares_)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /********************** ETH **********************/\\n    function releaseAll() public onlyOwner {\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            release(payable(_payees[i]));\\n        }\\n    }\\n\\n    /********************* ERC20 *********************/\\n    function releaseAll(IERC20 token) public onlyOwner {\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            release(token, _payees[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractMetadataUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadataUrl\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowPublicTransfer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableOpenSeaOperatorFilterRegistry\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCloseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryRoyaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryRoyaltyFee\",\"type\":\"uint256\"}],\"internalType\":\"struct HyperMintERC721A_2_2_0.GeneralConfig\",\"name\":\"_generalConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerTransaction\",\"type\":\"uint256\"}],\"internalType\":\"struct HyperMintERC721A_2_2_0.TokenConfig\",\"name\":\"_tokenConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryRoyaltyAddress\",\"type\":\"address\"}],\"internalType\":\"struct HyperMintERC721A_2_2_0.Addresses\",\"name\":\"_addresses\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractCallBlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImmutableRecoveryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPaymentValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPerAddressExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPerTransactionExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransfersDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousContractManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContractManager\",\"type\":\"address\"}],\"name\":\"ContractManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryRoyaltyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyAuthorised\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalConfig\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractMetadataUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadataUrl\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowPublicTransfer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableOpenSeaOperatorFilterRegistry\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCloseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryRoyaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryRoyaltyFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recoveryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customerPrimaryRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryRoyaltyAddress\",\"type\":\"address\"}],\"internalType\":\"struct HyperMintERC721A_2_2_0.Addresses\",\"name\":\"_addresses\",\"type\":\"tuple\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowBuy\",\"type\":\"bool\"}],\"name\":\"setAllowBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowPublicTransfer\",\"type\":\"bool\"}],\"name\":\"setAllowPublicTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleClosed\",\"type\":\"uint256\"}],\"name\":\"setDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableOpenSeaOperatorFilterRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setMetadataURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryFee\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerTransaction\",\"type\":\"uint256\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerTransaction\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transferAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractManager\",\"type\":\"address\"}],\"name\":\"transferContractManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HyperMintERC721A_2_2_0", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004b9067a9aff927c4e3502f815a79d892174604b2000000000000000000000000a7ada1475240eeeb74462567d5c99ff431e33b6c000000000000000000000000028bf8299b56ec8bdba9ea0705b3cfc874b78c28000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062d516276381042016b38b65c89c05ea59ccb13b000000000000000000000000a7ada1475240eeeb74462567d5c99ff431e33b6c000000000000000000000000a7ada1475240eeeb74462567d5c99ff431e33b6c000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134a756d7053746172742044657369676e6572730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a554d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004768747470733a2f2f6170692e68797065726d696e742e636f6d2f6d657461646174612f63313434356532652d636566312d343732352d383632612d65656231323639336463313800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004868747470733a2f2f6170692e68797065726d696e742e636f6d2f6d657461646174612f63313434356532652d636566312d343732352d383632612d6565623132363933646331382f000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}