{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/*\r\n\r\nMemetics for Intelligence and National Defense (MIND)\r\n\r\nTg: https://t.me/mindtokenportal\r\n\r\nToken Allocation:\r\n\r\n    90% LP\r\n    10% director\r\n\r\n    95% of LP tokens locked\r\n    5% of LP tokens reserved\r\n\r\nLaunch taxes:\r\n\r\n    5% liquidity\r\n    5% marketing/director\r\n\r\nPost Launch Taxes:\r\n\r\n    0.5% liquidity\r\n    0.5% marketing/director\r\n\r\nLaunch Limits:\r\n\r\n    1% max transaction/max wallet\r\n\r\nPost Launch Limits:\r\n\r\n    No limits\r\n\r\n*/\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address owner_) {\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, IERC20Metadata {\r\n\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount greater than allowance\");\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount greater than balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract MindToken is ERC20, Ownable {\r\n\r\n    address public director;\r\n\r\n    uint256 public buyTotalFee;\r\n    uint256 public sellTotalFee;\r\n\r\n    uint256 public buyDirectorFee;\r\n    uint256 public buyLiquidityFee;\r\n\r\n    uint256 public sellDirectorFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public tokensForDirector;\r\n    uint256 public tokensForAutomatedMarketMaker;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public automatedMarketMakerPool;\r\n\r\n    mapping(address => bool) public isAutomatedMarketMakerPool;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public maxWalletAmount;\r\n\r\n    mapping(address => bool) private isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromLimits;\r\n\r\n    uint256 public FeeDenominator = 1000;\r\n    \r\n    bool private swapping;\r\n    bool public limitsInEffect = true;\r\n\r\n    // 10%/10%\r\n    uint256 maxSellFee = 100;\r\n    uint256 maxBuyFee = 100;\r\n\r\n    constructor(\r\n        address router_,\r\n        address director_\r\n    ) ERC20(\"Memetics for Intelligence and National Defense\", \"MIND\") Ownable(msg.sender) {\r\n\r\n        director = director_;\r\n\r\n        router = IUniswapV2Router02(router_);\r\n\r\n        automatedMarketMakerPool = IUniswapV2Factory(\r\n            router.factory()\r\n        ).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        isAutomatedMarketMakerPool[automatedMarketMakerPool] = true;\r\n\r\n        isExcludedFromLimits[address(automatedMarketMakerPool)] = true;\r\n        isExcludedFromLimits[address(router)] = true;        \r\n        isExcludedFromLimits[address(this)] = true;\r\n        isExcludedFromLimits[address(0xdead)] = true;\r\n        isExcludedFromLimits[msg.sender] = true;\r\n        isExcludedFromLimits[director] = true;\r\n\r\n        uint256 totalSupply = 1_000_000_000 * 1e18;\r\n        \r\n        buyDirectorFee = 5;\r\n        buyLiquidityFee = 5;\r\n\r\n        sellDirectorFee = 5;\r\n        sellLiquidityFee = 5;\r\n\r\n        buyTotalFee = buyDirectorFee + buyLiquidityFee;\r\n        sellTotalFee = sellDirectorFee + sellLiquidityFee;\r\n\r\n        isExcludedFromFee[address(0xdead)] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[msg.sender] = true;\r\n        isExcludedFromFee[director] = true;\r\n\r\n        maxTransactionAmount = totalSupply / 100;\r\n        maxWalletAmount = totalSupply * 100;\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setBuyFee(uint256 directorFee, uint256 liquidityFee) external onlyOwner {\r\n        require(buyTotalFee <= maxBuyFee);\r\n\r\n        buyDirectorFee = directorFee;\r\n        buyLiquidityFee = liquidityFee;\r\n\r\n        buyTotalFee = buyDirectorFee + buyLiquidityFee;\r\n    }\r\n\r\n    function setSellFee(uint256 directorFee, uint256 liquidityFee) external onlyOwner {\r\n        require(sellTotalFee <= maxSellFee);\r\n        sellDirectorFee = directorFee;\r\n        sellLiquidityFee = liquidityFee;\r\n\r\n        sellTotalFee = sellDirectorFee + sellLiquidityFee;\r\n    }\r\n\r\n    function setLimits(uint256 maxTransactionAmount_, uint256 maxWalletAmount_) external onlyOwner {\r\n        require(limitsInEffect);\r\n        maxTransactionAmount = maxTransactionAmount_;\r\n        maxWalletAmount = maxWalletAmount_;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(limitsInEffect);\r\n        limitsInEffect = false;\r\n        maxWalletAmount = totalSupply();\r\n        maxTransactionAmount = totalSupply();\r\n    }\r\n\r\n    function setDirector(address newDirector) external onlyOwner {\r\n        require(director != newDirector);\r\n        director = newDirector;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPool(address automatedMarketMakerPoolAddress, bool isAutomatedMarketMakerPool_) external onlyOwner {\r\n        isAutomatedMarketMakerPool[automatedMarketMakerPoolAddress] = isAutomatedMarketMakerPool_;\r\n    }\r\n\r\n    function setIsExcludedFromLimits(address wallet, bool isExcluded) external onlyOwner {\r\n        isExcludedFromLimits[wallet] = isExcluded;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address wallet, bool isExcluded) external onlyOwner {\r\n        isExcludedFromFee[wallet] = isExcluded;\r\n    }\r\n\r\n    function setRouter(address router_) external onlyOwner {\r\n        router = IUniswapV2Router02(router_);\r\n    }\r\n\r\n    function setMainAutomatedMarketMakerPool(address mainAutomatedMarketMakerPoolAddress) external onlyOwner {\r\n        automatedMarketMakerPool = mainAutomatedMarketMakerPoolAddress;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n\r\n                if (\r\n                    isAutomatedMarketMakerPool[from] &&\r\n                    !isExcludedFromLimits[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"!maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWalletAmount,\r\n                        \"!maxWalletAmount\"\r\n                    );\r\n                }\r\n\r\n                else if (\r\n                    isAutomatedMarketMakerPool[to] &&\r\n                    !isExcludedFromLimits[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"!maxTransactionAmount.\"\r\n                    );\r\n                } else if (!isExcludedFromLimits[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWalletAmount,\r\n                        \"!maxWalletAmount\"\r\n                    );\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (\r\n            !swapping &&\r\n            to == automatedMarketMakerPool &&\r\n            !isExcludedFromFee[from] &&\r\n            !isExcludedFromFee[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n\r\n            uint256 fee = 0;\r\n\r\n            if (isAutomatedMarketMakerPool[to] && sellTotalFee > 0) {\r\n                uint256 newTokensForDirector = amount * sellDirectorFee / FeeDenominator;\r\n                uint256 newTokensForAutomatedMarketMaker = amount * sellLiquidityFee / FeeDenominator;\r\n\r\n                fee = newTokensForDirector + newTokensForAutomatedMarketMaker;\r\n\r\n                tokensForDirector += newTokensForDirector;\r\n                tokensForAutomatedMarketMaker += newTokensForAutomatedMarketMaker;\r\n            }\r\n\r\n            else if (isAutomatedMarketMakerPool[from] && buyTotalFee > 0) {\r\n                uint256 newTokensForDirector = amount * buyDirectorFee / FeeDenominator;\r\n                uint256 newTokensForAutomatedMarketMaker = amount * buyLiquidityFee / FeeDenominator;\r\n\r\n                fee = newTokensForDirector + newTokensForAutomatedMarketMaker;\r\n\r\n                tokensForDirector += newTokensForDirector;\r\n                tokensForAutomatedMarketMaker += newTokensForAutomatedMarketMaker;\r\n            }\r\n\r\n            if (fee > 0) {\r\n                super._transfer(from, address(this), fee);\r\n                amount -= fee;\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal {\r\n        if (tokensForAutomatedMarketMaker + tokensForDirector == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 liquidity = tokensForAutomatedMarketMaker / 2;\r\n        uint256 amountToSwapForETH = tokensForDirector + (tokensForAutomatedMarketMaker - liquidity);\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethForLiquidity = address(this).balance * (tokensForAutomatedMarketMaker - liquidity) / amountToSwapForETH;\r\n\r\n        if (liquidity > 0 && ethForLiquidity > 0) {\r\n            _addLiquidity(liquidity, ethForLiquidity);\r\n        }\r\n\r\n        uint256 remainingBalance = address(this).balance;\r\n\r\n        if (remainingBalance > 0) {\r\n            director.call{value: remainingBalance}(\"\");    \r\n        }\r\n\r\n        tokensForAutomatedMarketMaker = 0;\r\n        tokensForDirector = 0;\r\n        \r\n        if (balanceOf(address(this)) > 0) {\r\n            tokensForDirector = balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            director,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"director_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automatedMarketMakerPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDirectorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"director\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutomatedMarketMakerPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDirectorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"automatedMarketMakerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAutomatedMarketMakerPool_\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"directorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDirector\",\"type\":\"address\"}],\"name\":\"setDirector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount_\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mainAutomatedMarketMakerPoolAddress\",\"type\":\"address\"}],\"name\":\"setMainAutomatedMarketMakerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"directorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForAutomatedMarketMaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDirector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MindToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d830702348b2ce9d88d59faa3fdae5dc4e88e2b3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7ae66673e17ba7e2ea9d3be34ec36f20cfe9e45ddfc003c98c290a22d7a65f89"}