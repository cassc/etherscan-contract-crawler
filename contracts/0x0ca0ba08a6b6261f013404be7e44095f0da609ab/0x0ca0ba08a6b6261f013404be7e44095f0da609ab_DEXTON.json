{"SourceCode": "// Sources flattened with hardhat v2.18.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n// File contracts/Dexton.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\ninterface IUSDT {\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function allowance(address _owner, address _spender) external returns (uint remaining);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\n\r\ncontract DEXTON is IERC20, Ownable(0x88a6BCc5e06Fb3150a596392afEF3d4e1188471c) {\r\n\r\n  mapping(address => uint256) public possessionTime;\r\n  mapping(address => uint256) public _frozenBalances;\r\n  mapping(address => uint256) _balances;\r\n  mapping(address => uint256) _rewards;\r\n  mapping(address => uint256) _depositedTime;\r\n  mapping(address => uint8) _months;\r\n  mapping(address => bool) _isDepositor;\r\n\r\n  mapping (address => mapping (address => uint256)) _allowances;\r\n  \r\n  address constant TEAM_WALLET = 0x88a6BCc5e06Fb3150a596392afEF3d4e1188471c;\r\n  address public usdtAddress;\r\n  address[] depositors;\r\n  uint256 public startTimestamp;\r\n  uint256 public tokenPriceInUSDT;\r\n  uint256 _totalSupply;\r\n  uint256 _maxSupply;\r\n  uint256 _lockedTokensForSixMonth;\r\n  uint256 _rewardTokens;\r\n  uint256 _tokensForPresale;\r\n  uint8 interestOnDeposit;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  string public name;\r\n\r\n  event DEPOSIT(address sender, uint256 amount);\r\n  event PRESALED(address buyer, uint256 amount);\r\n\r\n  constructor() {\r\n    name = \"DEXTON\";\r\n    symbol = \"DEXTON\";\r\n    decimals = 18;\r\n    _totalSupply = 1000000000 * 1e18;\r\n    _maxSupply = _totalSupply;\r\n    usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    tokenPriceInUSDT = 1000;\r\n    interestOnDeposit = 10;\r\n    startTimestamp = block.timestamp;\r\n    _tokensForPresale = _totalSupply / 20; \r\n    _lockedTokensForSixMonth = _totalSupply / 10;\r\n    _rewardTokens = _totalSupply / 10;\r\n    _balances[TEAM_WALLET] = _totalSupply / 2;\r\n    _balances[address(this)] = _totalSupply / 2;\r\n    _freezeTokens(address(this), _lockedTokensForSixMonth * 4);\r\n    emit Transfer(address(0), address(this), _totalSupply / 2);\r\n    emit Transfer(address(0), TEAM_WALLET, _totalSupply/2);\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _account) external view returns (uint256) {\r\n    return _balances[_account];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) external view returns (uint256) {\r\n    return _allowances[_owner][_spender];\r\n  }\r\n\r\n  function transfer(address _recipient, uint256 _amount) external returns (bool) {\r\n    _transfer(msg.sender, _recipient, _amount);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _amount) external returns (bool) {\r\n    _approve(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool) {\r\n    require(_allowances[_sender][msg.sender] - _amount >= 0, \"DEXTON: transfer amount exceeds allowance\");\r\n\r\n    _transfer(_sender, _recipient, _amount);\r\n    _approve(_sender, msg.sender, _allowances[_sender][msg.sender] - _amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 _amount) public returns (bool) {\r\n    _burn(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n    _approve(msg.sender, _spender, _allowances[msg.sender][_spender] + _addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, _spender, _allowances[msg.sender][_spender] - _subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  function buyTokensByPresale(uint256 _amount) public {\r\n    require(_tokensForPresale - _amount * 1e18 >= 0, \"DEXTON: presale finished\");\r\n    require(IUSDT(usdtAddress).allowance(msg.sender, address(this)) >= tokenPriceInUSDT * _amount, \"DEXTON: User has not given enough allowance\"); //Checking Allowance in USDT Contract\r\n    require(IUSDT(usdtAddress).balanceOf(msg.sender) >= tokenPriceInUSDT * _amount, \"DEXTON: Insufficient user token balance\");\r\n\r\n    IUSDT(usdtAddress).transferFrom(msg.sender, TEAM_WALLET, _amount * tokenPriceInUSDT);\r\n    _transfer(TEAM_WALLET, msg.sender, _amount * 1e18);\r\n    _tokensForPresale -= _amount * 1e18;\r\n    possessionTime[msg.sender] = block.timestamp;\r\n    emit PRESALED(msg.sender, _amount);\r\n  }\r\n\r\n  function deposit(uint256 _amount) external {\r\n    require(_balances[address(this)] - _frozenBalances[address(this)] > 0, \"DEXTON: can not deposit\");\r\n    require(_balances[msg.sender] >= _amount * 1e18, \"DEXTON: insufficient token balance\");\r\n    \r\n    update();\r\n    _freezeTokens(msg.sender, _amount * 1e18); \r\n    if (_isDepositor[msg.sender] == false) {\r\n      _isDepositor[msg.sender] == true;\r\n      depositors.push(msg.sender);\r\n    }\r\n    emit DEPOSIT(msg.sender, _amount);\r\n  }\r\n\r\n  function withdraw() external {\r\n    require(_balances[address(this)] < 1e17, \" DEXTON: can not unfreeze tokens\");\r\n    uint256 depositorsLength = depositors.length;\r\n    for(uint256 i; i < depositorsLength; ++i) {\r\n      _unfreezeTokens(depositors[i], _frozenBalances[depositors[i]]);\r\n    }\r\n  }\r\n\r\n  function claim() external {\r\n    require(_isDepositor[msg.sender] == true, \" DEXTON: you are not a depositor\");\r\n    require(_balances[address(this)] != 0, \"DEXTON: can not claim\");\r\n    require(_depositedTime[msg.sender] + 30 days < block.timestamp, \"DEXTON: not time for claim\");\r\n    require(_months[msg.sender] <= 12, \"DEXTON: deposit time was expired\");\r\n\r\n    update();\r\n    if(_rewards[msg.sender] > 0) {\r\n      _transfer(address(this), msg.sender, _rewards[msg.sender]);\r\n      ++_months[msg.sender];\r\n    }\r\n  }\r\n\r\n  function unlockTokens() external onlyOwner {\r\n    require(startTimestamp + 180 days < block.timestamp, \"DEXTON: can not unlock\");\r\n    _unfreezeTokens(address(this), _lockedTokensForSixMonth);\r\n    _transfer(address(this), TEAM_WALLET, _lockedTokensForSixMonth);\r\n    startTimestamp = block.timestamp;\r\n    emit Transfer(address(0), TEAM_WALLET, _lockedTokensForSixMonth);\r\n  }\r\n\r\n  function _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n    require(_balances[_sender] - _frozenBalances[_sender] >= _amount, \"DEXTON: insufficient token balance\");\r\n    require(_sender != address(0), \"DEXTON: transfer from the zero address\");\r\n    require(_recipient != address(0), \"DEXTON: transfer to the zero address\");\r\n\r\n    _balances[_sender] = _balances[_sender] - _amount;\r\n    _balances[_recipient] = _balances[_recipient] + _amount;\r\n    emit Transfer(_sender, _recipient, _amount);\r\n  }\r\n\r\n  function _burn(address _account, uint256 _amount) internal {\r\n    require(_account != address(0), \"DEXTON: burn from the zero address\");\r\n    require(_balances[_account] > 0, \"DEXTON: transfer amount exceeds allowance\");\r\n\r\n    _balances[_account] = _balances[_account] - _amount;\r\n    _totalSupply = _totalSupply - _amount;\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n\r\n  function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n    require(_owner != address(0), \"DEXTON: approve from the zero address\");\r\n    require(_spender != address(0), \"DEXTON: approve to the zero address\");\r\n\r\n    _allowances[_owner][_spender] = _amount;\r\n    emit Approval(_owner, _spender, _amount);\r\n  }\r\n\r\n  function _freezeTokens(address _user, uint256 _amount) private {\r\n    require(_balances[_user] >= _amount, \"DEXTON: user does not have enough tokens to freeze\");\r\n        \r\n    _frozenBalances[_user] += _amount;\r\n  }\r\n\r\n  function _unfreezeTokens(address _user, uint256 _amount) private {\r\n    require(_frozenBalances[_user] >= _amount, \"DEXTON: not enough frozen tokens to unfreeze\");\r\n      \r\n    _frozenBalances[_user] -= _amount;\r\n  }\r\n\r\n  function update() private {\r\n    uint256 rewardAmount = ((block.timestamp - _depositedTime[msg.sender]) / 1 days) * (_frozenBalances[msg.sender]) / 30 / interestOnDeposit / 12;\r\n    _rewards[msg.sender] += rewardAmount;\r\n    _depositedTime[msg.sender] = block.timestamp;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DEPOSIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PRESALED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_frozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokensByPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"possessionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DEXTON", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9975f3744b8231b96ca209f2bff01c76609759239b7ad660d28c45ef19ecc324"}