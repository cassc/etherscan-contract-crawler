{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SZNL.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: Seasonal - Bryan Minear\\n/// @author: manifold.xyz\\n\\nimport \\\"./ERC721Creator.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                                                        //\\n//                                                                                                                                                                        //\\n//                                                                                                                                                                        //\\n//                    _,\u2584\u2584\u2584\u2584\u2584_          _\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584_            \u2553\u2584\u2584_            _\u2584\u2584\u2584\u2584\u2584_             ,\u2584\u2584\u2584\u2584\u2584__          \u250c\u2584\u2584_    \u2553\u2584\u2500            _\u2584\u2584\u2500            _\u2584\u2584_          //\\n//                  __\u2588\u2588\u2580\u2514\u2514\u2559\u2588\u2588\u2584         _\u2588\u2588\u2559\u2559\u2559\u2559\u2559\u2559\u2559_          __\u2588\u2588\u2588_           \u2554\u2588\u2588\u2559\u2514\u2559\u2580\u2588\u258c_         \u250c\u2588\u2588\u2580\u2514\u2514\u2559\u2588\u2588\u2584          \u2590\u2588\u2588\u258c_   \u255f\u2588\u258c           _\u2590\u2588\u2588\u2588_            \u2588\u2588           //\\n//                   j\u2588\u258c     \u2588\u2588         _\u2588\u2588                  _\u2590\u2588\u2580\u2588\u258c_         _\u2588\u2588_   _\u2588\u2588\u2500         \u2588\u2588\u2310    _\u2588\u2588          \u2590\u2588\u2588\u2588\u2584_  \u255f\u2588\u258c            \u2588\u2588\u2590\u2588\u2500_           \u2588\u2588           //\\n//                  _ \u2588\u2588\u2584__  \u2514\u2514         _\u2588\u2588                 _ \u2588\u2588_\u2551\u2588          _\u255f\u2588\u2584 _  \u00ac\u2514          \u2588\u2588\u00ac    _\u2588\u2588          \u2590\u2588\u258c\u2588\u2588__ \u255f\u2588\u258c          _\u2590\u2588\u258c \u2588\u2588            \u2588\u2588           //\\n//                   __\u2559\u2588\u2588\u2584_            _\u2588\u2588\u2584\u2584\u2584\u2584\u00b5_           _\u2590\u2588\u2310_^\u2588\u258c          _\u2559\u2588\u2588\u2588\u2584_            \u2588\u2588\u00ac    _\u2588\u2588          \u2590\u2588\u258c_\u2588\u2588 _\u255f\u2588\u258c          _\u2588\u2588__\u255f\u2588\u2500           \u2588\u2588           //\\n//                     _ \u2514\u2580\u2588\u2588\u2584_         _\u2588\u2588\u2580\u2559\u2559\u2559\u2514_          __\u2588\u2588_  \u2588\u2588_          __`\u2559\u2588\u2588\u2584           \u2588\u2588\u00ac    _\u2588\u2588          \u2590\u2588\u258c_'\u2588\u2588_\u255f\u2588\u258c         _\u2590\u2588\u258c  _\u2588\u2588_          \u2588\u2588           //\\n//                   ___    \u2559\u2588\u2588_        _\u2588\u2588                _\u2590\u2588\u258c_  \u2590\u2588\u258c         ___  _\u2514\u2588\u2588\u00ac         \u2588\u2588\u00ac    _\u2588\u2588          \u2590\u2588\u258c _\u2559\u2588\u258c\u255f\u2588\u258c        __\u2588\u2588   _\u255f\u2588\u2310          \u2588\u2588           //\\n//                   j\u2588\u258c_   _\u2588\u2588_        _\u2588\u2588                 \u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588_        \u2588\u2588_   _\u2551\u2588\u258c         \u2588\u2588\u00ac    _\u2588\u2588          \u2590\u2588\u258c   \u2559\u2588\u2588\u2588\u258c        _]\u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u258c          \u2588\u2588           //\\n//                   _\u2580\u2588\u2584,_\u2584\u2588\u2588\u2580         _\u2588\u2588\u2584\u2553\u2553\u2553\u2553\u2553\u2553_        \u2590\u2588\u258c_    \u2590\u2588\u258c_       \u2559\u2588\u2588\u2584_,\u2584\u2588\u2588          \u2559\u2588\u2588\u2584,,\u2584\u2588\u2588\u2580          \u2590\u2588\u258c    \u255f\u2588\u2588\u258c         \u2588\u2588\u2500    _\u2588\u2588\u2500         \u2588\u2588\u2553\u2553\u2553\u2553\u2553\u2553\u2553    //\\n//                   __\u2514\u2559\u2580\u2580\u2580\u2559            \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580         \u2559\u2580_      \u2580\u2580_       __\u2559\u2580\u2580\u2580\u2580\u2514 _           \u2559\u2580\u2580\u2580\u2580\u2514 _          \u2514\u2580\u2580    _\u2580\u2580\\\"        _\u2580\u2580_     \u2514\u2580\u2580         \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580    //\\n//                                                                                                                                                                        //\\n//                                                                                                                                                                        //\\n//                                                                                                           __                             ___                           //\\n//                                     ,, _                                ,  \u2554 __                           ,\u2584_                          __ \u2588 _                          //\\n//                                     \u2590\u2588\u2588\u2588\u2588\u2584_                         _\u2553,_\u2588\u2580\u00ac\u2580\u2580*\u2588\u2500_\u2584_                    ]\u2584\u2584\u2588\u2588\u2584\u2584\u03b5                    _\u2584_@\u2310\u2559\u2588\u2588\u2588\u2559j\u258c_\u2584                      //\\n//                                      \u2580\u2588\u2588\u2588\u2588_                       ___ \u2580\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2559\u2310___            _ _ __ \u2588\u2588\u2588\u2588\u2588\u2588\u2550_,__                \u2553\u2584\u2588\u2588\u2584*\u2584\u2588\u2584\u2310\u2590\u2588\u2588\u2584\u00b5                     //\\n//                                      _\u00ac\u2559\u2514\u2514w_   _\u2553\u2584\u2584_                \u2559\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2518\u2580\u250c             _\u2590\u2588\u2588\u2588\u2588\u2584\u255f\u2588\u2588\u2588\u2588\u2588,\u2588\u2588\u2588\u2588\u258c              *\u2584_ \u2584\u2559\u2588\u2584\u2588\u2553\u2588\u2580\u2584_ \u2584b                    //\\n//                                            \u2588__\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2550_            \u2580\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2588\u2580\u2310             \u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584_           _\u00b2\u2580\u2588\u2588\u2580\u2588\u2588\u2580\u2588\u2588\u2588\u2580\u2588\u2588\u2580\u2588\u2588\u2580\u2580_                  //\\n//                                             \u2588\u2514 `\u2559\u2580\u2580\u2514__              \u2584\u2588\u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2553\u2588\u00e7_            __\u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u00ac_             \\\"\u2580__\u2514\u2584\u2580\u2510\u2588\u2514\u2580\u2584\u2559__\u2559\\\\                    //\\n//                                            j\u2588_                    __  \u2588\u2584\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2584\u2584  _                \u2514\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2514                  \u2514\u2559\u2588\u2588\u00b5\u00b2\u2580\u2588\u2559\u2310j\u2588\u2588\u2559\u250c                     //\\n//                                            \u2590\u2588_                       \u2514\u2500 \u2588\u2580^\u2588\u258c\\\"\u2588\u2500_\u2514_                  _\u2559\u2514\u2514'j\u258c`\u2514\u2514\u2559                   _\u2580_\u2559\u00ac\u2584\u2580\u2588\u2580\u2584\u00ac\u2580 \u2559_                     //\\n//                                            \u2590\u2588                          _`_ \u2559 __                          _\u2590\u2580                            __\u2580___                         //\\n//                                            __                              _                             ___                             ___                           //\\n//                                                                                                                                                                        //\\n//                                                                                                                                                                        //\\n//                                                                                                                                                                        //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncontract SZNL is ERC721Creator {\\n    constructor() ERC721Creator(\\\"Seasonal - Bryan Minear\\\", \\\"SZNL\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721Creator.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\ncontract ERC721Creator is Proxy {\\n    \\n    constructor(string memory name, string memory symbol) {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0xe4E4003afE3765Aca8149a82fc064C0b125B9e5a;\\n        Address.functionDelegateCall(\\n            0xe4E4003afE3765Aca8149a82fc064C0b125B9e5a,\\n            abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol)\\n        );\\n    }\\n        \\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n     function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SZNL", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xe4e4003afe3765aca8149a82fc064c0b125b9e5a", "SwarmSource": ""}