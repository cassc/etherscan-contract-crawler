{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ARITHCrowdsale.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n\\r\\ncontract ARITHToken is ERC20, Ownable {\\r\\n    constructor(uint256 initialSupply) ERC20(\\\"ARITH\\\", \\\"ARITH\\\") {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n\\r\\n    function transferTokens(address to, uint256 amount) public onlyOwner {\\r\\n        _transfer(msg.sender, to, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ARITHCrowdsale {\\r\\n    address payable public ETHWallet = payable(0x7145E1f54Ae68Fce034ABB1234f9142D7AB230F9);\\r\\n    uint256 public totalMinted;\\r\\n    uint256 public maxMintable = 800 * (10 ** 6) * (10 ** 18);\\r\\n    uint256 public exchangeRate = 25000;\\r\\n    bool public isFunding;\\r\\n    bool public isFinalized;\\r\\n    uint256 public softCap = 15 ether;\\r\\n    uint256 public hardCap = 1600 ether;\\r\\n    ARITHToken public Token;\\r\\n    address public creator;\\r\\n    uint256 public amountRaised;\\r\\n    uint256 public saleStartTime;\\r\\n    uint256 public saleEndTime;\\r\\n\\r\\n    mapping(address => bool) public whitelist;\\r\\n    mapping(address => bool) public blacklist;\\r\\n\\r\\n\\r\\n    event Contribution(address from, uint256 amount);\\r\\n\\r\\n\\r\\n    constructor(uint256 initialTokenSupply) {\\r\\n        isFunding = true;\\r\\n        creator = msg.sender;\\r\\n        Token = new ARITHToken(initialTokenSupply);\\r\\n        saleStartTime = block.timestamp;\\r\\n        saleEndTime = saleStartTime + (6 * 30 days);\\r\\n    }\\r\\n\\r\\n    modifier onlyWhileFunding() {\\r\\n        require(isFunding, \\\"Crowdsale is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhileNotPaused() {\\r\\n        require(isFunding && !isPaused(), \\\"Crowdsale is paused or not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhileNotFinalized() {\\r\\n        require(isFunding && !isFinalized, \\\"Crowdsale is already finalized or not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        require(msg.sender == creator, \\\"Only the creator can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        require(isWhitelisted(msg.sender), \\\"Address is not whitelisted\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotBlacklisted() {\\r\\n        require(!isBlacklisted(msg.sender), \\\"Address is blacklisted\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function contribute() external payable onlyWhileNotPaused onlyWhileFunding onlyNotBlacklisted {\\r\\n        require(msg.value > 0, \\\"Contribution amount must be more than 0\\\");\\r\\n        uint256 amount = msg.value * exchangeRate;\\r\\n        uint256 total = totalMinted + amount;\\r\\n        require(total <= maxMintable, \\\"Exceeds maximum mintable amount\\\");\\r\\n        totalMinted = total;\\r\\n        ETHWallet.transfer(msg.value);\\r\\n        Token.transferTokens(msg.sender, amount);\\r\\n        amountRaised += msg.value;\\r\\n        emit Contribution(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function hasReachedSoftCap() public view returns (bool) {\\r\\n        return amountRaised >= softCap;\\r\\n    }\\r\\n\\r\\n\\r\\n    function hasReachedHardCap() public view returns (bool) {\\r\\n        return amountRaised >= hardCap;\\r\\n    }\\r\\n\\r\\n\\r\\n    function changeCreator(address _newCreator) public onlyCreator {\\r\\n        creator = _newCreator;\\r\\n    }\\r\\n\\r\\n\\r\\n    function changeETHWallet(address payable _newWallet) public onlyCreator {\\r\\n        ETHWallet = _newWallet;\\r\\n    }\\r\\n\\r\\n\\r\\n    function closeSale() public onlyCreator onlyWhileNotFinalized {\\r\\n        isFunding = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateExchangeRate(uint256 _newRate) public onlyCreator onlyWhileNotFinalized {\\r\\n        exchangeRate = _newRate;\\r\\n    }\\r\\n\\r\\n\\r\\n    function pauseSale() public onlyCreator onlyWhileFunding {\\r\\n        isFunding = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function resumeSale() public onlyCreator {\\r\\n        isFunding = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function isPaused() public view returns (bool) {\\r\\n        return !isFunding;\\r\\n    }\\r\\n\\r\\n\\r\\n    function finalize() public onlyCreator onlyWhileNotFinalized {\\r\\n        require(block.timestamp >= saleEndTime, \\\"Sale end time not reached\\\");\\r\\n        uint256 remainingTokens = maxMintable - totalMinted;\\r\\n        if (remainingTokens > 0) {\\r\\n            Token.transferTokens(creator, remainingTokens);\\r\\n            totalMinted += remainingTokens;\\r\\n        }\\r\\n        isFinalized = true;\\r\\n        isFunding = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addToWhitelist(address[] calldata addresses) external onlyCreator {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            whitelist[addresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeFromWhitelist(address[] calldata addresses) external onlyCreator {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            whitelist[addresses[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function addToBlacklist(address[] calldata addresses) external onlyCreator {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            blacklist[addresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeFromBlacklist(address[] calldata addresses) external onlyCreator {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            blacklist[addresses[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isWhitelisted(address _address) public view returns (bool) {\\r\\n        return whitelist[_address];\\r\\n    }\\r\\n\\r\\n\\r\\n    function isBlacklisted(address _address) public view returns (bool) {\\r\\n        return blacklist[_address];\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ARITHToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000295be96e640669720000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}