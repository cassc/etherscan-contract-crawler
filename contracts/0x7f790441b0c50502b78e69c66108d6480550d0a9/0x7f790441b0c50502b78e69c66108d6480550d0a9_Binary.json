{"SourceCode": "{\"Binary.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC2048.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\ncontract Binary is ERC2048{\\n\\taddress payable public treasury;\\n\\n\\tconstructor(address payable _treasury) ERC2048(\\\"Binary\\\", \\\"BINARY\\\", 18, 2048 * 2048) {\\n\\t\\ttreasury = _treasury;\\n\\t}\\n\\n\\tfunction remaining() public view returns (uint256)  {\\n\\t\\treturn _remaining();\\n\\t}\\n\\n\\tfunction mint() public payable {\\n\\t\\trequire(msg.value \\u003e 0, \\\"Attached ETH must \\u003e 0\\\");\\n\\t\\tuint256 amount = msg.value * 10000; // 0.0001 ETH per token\\n\\t\\trequire(amount \\u003c= remaining(), \\\"Exceed max mint amount\\\");\\n\\t\\t_mint(msg.sender, amount);\\n\\t\\ttreasury.transfer(msg.value);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) override public view returns (string memory) {\\n        ownerOf(id); // check NFT exists\\n\\n        uint8 level = _extractLevelFromNftId(id);\\n        string memory idStr = StringUtils.uintToString(id);\\n        string memory amountStr = StringUtils.uintToString(2 ** level);\\n\\n        string memory name = StringUtils.concat(StringUtils.concat(\\u0027\\\"name\\\":\\\"Binary#\\u0027, idStr), \\u0027\\\",\\u0027);\\n        string memory description = \\u0027\\\"description\\\":\\\"A collection of 2048 * 2048 replicants enabled by ERC2048, an experimental token standard.\\\",\\u0027;\\n        string memory image = StringUtils.concat(StringUtils.concat(\\u0027\\\"image\\\":\\\"https://raw.githubusercontent.com/erc2048/erc2048/main/assets/\\u0027, amountStr), \\u0027.svg\\\"\\u0027);\\n        string memory json = StringUtils.concat(\\u0027{\\u0027, name);\\n        json = StringUtils.concat(json, description);\\n        json = StringUtils.concat(json, image);\\n        json = StringUtils.concat(json, \\u0027}\\u0027);\\n        return StringUtils.concat(\\u0027data:application/json;utf8,\\u0027, json);\\n\\t}\\n\\n\\tfunction getNft(uint256 id) public view returns (Nft memory) {\\n\\t\\treturn _getNft(id);\\n\\t}\\n\\n\\tfunction getOwnerNfts(address owner) public view returns (Nft[] memory) {\\n\\t\\treturn _getOwnerNfts(owner);\\n\\t}\\n}\\n\"},\"ERC2048.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20Events {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary ERC721Events {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\\n/// @notice ERC2048\\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\\n///         with native liquidity and fractionalization.\\n///\\n///         This is an experimental standard designed to integrate\\n///         with pre-existing ERC20 / ERC721 support as smoothly as\\n///         possible.\\n///\\n/// @dev    In order to support full functionality of ERC20 and ERC721\\n///         supply assumptions are made that slightly constraint usage.\\n///         Ensure decimals are sufficiently large (standard 18 recommended)\\n///         as ids are effectively encoded in the lowest range of amounts.\\n///\\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\\n///         design.\\n///\\nabstract contract ERC2048 {\\n    /// @dev Token name\\n    string public name;\\n\\n    /// @dev Token symbol\\n    string public symbol;\\n\\n    /// @dev Decimals for fractional representation\\n    uint8 public immutable decimals;\\n\\n    /// @dev Total supply in fractionalized representation\\n    uint256 public immutable totalSupply;\\n\\n    /// @dev Balance of user in fractional representation\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    /// @dev Allowance of user in fractional representation\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    /// @dev Approval in native representaion\\n    mapping(uint256 =\\u003e address) public getApproved;\\n\\n    /// @dev Approval for all in native representation\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) public isApprovedForAll;\\n\\n    /// @dev Unique id by owner\\n\\tmapping(address =\\u003e uint32) private idByOwner;\\n\\n    /// @dev Owner by unique id\\n\\tmapping(uint32 =\\u003e address) private ownerById;\\n\\n    /// @dev Global unique id\\n\\tuint32 private uniqueId;\\n\\n\\tstruct Nft {\\n\\t\\tuint256 id;\\n\\t\\taddress owner;\\n        uint32 ownerId;\\n\\t\\tuint8 level;\\n\\t}\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _nativeTotalSupply\\n    ) {\\n        require(_decimals \\u003e= 18, \\\"decimals should \\u003e= 18\\\");\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        totalSupply = _nativeTotalSupply * _getUnit();\\n        balanceOf[address(0)] = totalSupply;\\n    }\\n\\n    /// @notice tokenURI must be implemented by child contract\\n    function tokenURI(uint256 id) virtual public view returns (string memory);\\n\\n    /// @notice Function for token approvals\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\n    function approve(\\n        address spender,\\n        uint256 amountOrId\\n    ) virtual public returns (bool) {\\n        require(amountOrId \\u003e 0, \\\"amountOrId must \\u003e 0\\\");\\n\\n        if (_isAmountOrId(amountOrId)) {\\n            allowance[msg.sender][spender] = amountOrId;\\n\\n            emit ERC20Events.Approval(msg.sender, spender, amountOrId);\\n        } else {\\n            address owner = _ownerOf(amountOrId);\\n\\n            require(msg.sender == owner, \\\"Not NFT owner\\\");\\n\\n            getApproved[amountOrId] = spender;\\n\\n            emit ERC721Events.Approval(owner, spender, amountOrId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Function for native approvals\\n    function setApprovalForAll(address operator, bool approved) virtual public {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ERC721Events.ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Function for fractional transfers\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) virtual public returns (bool) {\\n        return _transfer(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Function for mixed transfers\\n    /// @dev This function assumes id if amount less than or equal to current max id\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amountOrId\\n    ) virtual public {\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n\\n        if (_isAmountOrId(amountOrId)) {\\n            uint256 senderAllowance = allowance[from][msg.sender];\\n\\n            require(senderAllowance \\u003e= amountOrId, \\\"Insufficient allowance\\\");\\n\\n            allowance[from][msg.sender] = senderAllowance - amountOrId;\\n\\n            _transfer(from, to, amountOrId);\\n        } else {\\n            address owner = _ownerOf(amountOrId);\\n            uint8 level = _extractLevelFromNftId(amountOrId);\\n\\n            require(from == owner, \\\"Not NFT owner\\\");\\n\\n            require(\\n                msg.sender == from ||\\n                isApprovedForAll[from][msg.sender] ||\\n                msg.sender == getApproved[amountOrId],\\n                \\\"Unauthorized\\\"\\n            );\\n\\n\\t\\t\\t_transfer(from, to, _calcTokenAmountByLevel(level));\\n\\n            delete getApproved[amountOrId];\\n        }\\n    }\\n\\n    /// @notice This function is meaningless for ERC2048\\n    function safeTransferFrom(\\n        address /* from */,\\n        address /* to */,\\n        uint256 /* id */\\n    ) virtual public {\\n        revert(\\\"Unimplemented\\\");\\n    }\\n\\n    /// @notice This function is meaningless for ERC2048\\n    function safeTransferFrom(\\n        address /* from */,\\n        address /* to */,\\n        uint256 /* id */,\\n        bytes calldata /* data */\\n    ) virtual public {\\n        revert(\\\"Unimplemented\\\");\\n    }\\n\\n    /// @notice Function to find owner of a given id\\n    function ownerOf(uint256 id) virtual public view returns (address) {\\n\\t\\treturn _ownerOf(id);\\n    }\\n\\n    /// @notice Internal function for fractional mint\\n    function _mint(address owner, uint256 amount) internal {\\n        _transfer(address(0), owner, amount);\\n    }\\n\\n    function _remaining() internal view returns (uint256)  {\\n\\t\\treturn balanceOf[address(0)];\\n\\t}\\n\\n    /// @notice Internal function for fractional transfer\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(amount \\u003e 0, \\\"Zero amount\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n\\n\\t\\tuint256 oldBalanceOfFrom = balanceOf[from];\\n        balanceOf[from] -= amount;\\n\\n\\t\\tuint256 oldBalanceOfTo = balanceOf[to];\\n\\t\\tbalanceOf[to] += amount;\\n\\n        emit ERC20Events.Transfer(from, to, amount);\\n\\n\\t\\t_refactorNft(from, oldBalanceOfFrom, balanceOf[from]);\\n\\t\\t_refactorNft(to, oldBalanceOfTo, balanceOf[to]);\\n\\n        return true;\\n    }\\n\\n\\tfunction _refactorNft(address owner, uint256 oldBalance, uint256 newBalance) internal {\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\toldBalance /= _getUnit();\\n\\t\\tnewBalance /= _getUnit();\\n\\n\\t\\tuint256 burnNftDigits = oldBalance ^ (oldBalance \\u0026 newBalance);\\n\\t\\tuint256 mintNftDigits = newBalance ^ (oldBalance \\u0026 newBalance);\\n\\n\\t\\tuint32 ownerId = _getOwnerIdOrSetNext(owner);\\n\\n        uint8 level = 0;\\n\\n\\t\\twhile (burnNftDigits \\u003e 0) {\\n\\t\\t\\tif (burnNftDigits \\u0026 1 == 1) {\\n\\t\\t\\t\\tuint256 id = _buildNftId(ownerId, level);\\n\\n\\t\\t\\t\\temit ERC721Events.Transfer(owner, address(0), id);\\n\\t\\t\\t}\\n\\t\\t\\tlevel += 1;\\n\\t\\t\\tburnNftDigits \\u003e\\u003e= 1;\\n\\t\\t}\\n\\n\\t\\tlevel = 0;\\n\\n\\t\\twhile (mintNftDigits \\u003e 0) {\\n\\t\\t\\tif (mintNftDigits \\u0026 1 \\u003e 0) {\\n\\t\\t\\t\\tuint256 id = _buildNftId(ownerId, level);\\n\\n\\t\\t\\t\\temit ERC721Events.Transfer(address(0), owner, id);\\n\\t\\t\\t}\\n\\t\\t\\tlevel += 1;\\n\\t\\t\\tmintNftDigits \\u003e\\u003e= 1;\\n\\t\\t}\\n\\t}\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n\\t\\tuint32 ownerId = _extractOwnerIdFromNftId(id);\\n\\n\\t\\taddress owner = ownerById[ownerId];\\n\\n        require(_isNftOwned(id, owner), \\\"NFT not found\\\");\\n\\n        return owner;\\n    }\\n\\n    function _getOwnerIdOrSetNext(address owner) internal returns (uint32) {\\n\\t\\tif(idByOwner[owner] == 0) {\\n\\t\\t\\tuniqueId += 1;\\n\\t\\t\\tidByOwner[owner] = uniqueId;\\n\\t\\t\\townerById[uniqueId] = owner;\\n\\t\\t}\\n\\t\\treturn idByOwner[owner];\\n\\t}\\n\\n\\tfunction _isAmountOrId(uint256 amountOrId) internal pure returns (bool) {\\n\\t\\treturn amountOrId \\u003e 0xffffffffff;\\n\\t}\\n\\n    function _isNftOwned(uint256 id, address owner) internal view returns (bool) {\\n        uint8 level = _extractLevelFromNftId(id);\\n        uint256 nativeBalance = balanceOf[owner] / _getUnit();\\n        return owner != address(0) \\u0026\\u0026 nativeBalance \\u0026 uint256(1) \\u003c\\u003c level \\u003e 0;\\n    }\\n\\n    function _getNft(uint256 id) internal view returns (Nft memory) {\\n        address owner = _ownerOf(id);\\n        uint32 ownerId = _extractOwnerIdFromNftId(id);\\n        uint8 level = _extractLevelFromNftId(id);\\n        return Nft({\\n            id: id,\\n            owner: owner,\\n            ownerId: ownerId,\\n            level: level\\n        });\\n    }\\n\\n\\tfunction _getOwnerNfts(address owner) internal view returns (Nft[] memory) {\\n\\t\\tif (idByOwner[owner] != 0 \\u0026\\u0026 balanceOf[owner] \\u003e 0) {\\n\\t\\t\\tuint256 balance = balanceOf[owner] / _getUnit();\\n\\t\\t\\tuint32 ownerId = idByOwner[owner];\\n\\n\\t\\t\\tNft[] memory tmp = new Nft[](256);\\n\\n            uint8 level = 0;\\n\\t\\t\\tuint8 count = 0;\\n\\n\\t\\t\\twhile (balance \\u003e 0) {\\n\\t\\t\\t\\tif (balance \\u0026 1 \\u003e 0) {\\n\\t\\t\\t\\t\\tuint256 id = _buildNftId(ownerId, level);\\n\\t\\t\\t\\t\\tNft memory nft = Nft({\\n\\t\\t\\t\\t\\t\\tid: id,\\n\\t\\t\\t\\t\\t\\towner: owner,\\n                        ownerId: ownerId,\\n\\t\\t\\t\\t\\t\\tlevel: level\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\ttmp[count] = nft;\\n\\t\\t\\t\\t\\tcount += 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlevel += 1;\\n\\t\\t\\t\\tbalance \\u003e\\u003e= 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tNft[] memory nfts = new Nft[](count);\\n\\n\\t\\t\\twhile(count \\u003e 0) {\\n\\t\\t\\t\\tnfts[count - 1] = tmp[count - 1];\\n\\t\\t\\t\\tcount -= 1;\\n\\t\\t\\t}\\n\\n            return nfts;\\n\\t\\t} else {\\n            return new Nft[](0);\\n        }\\n\\t}\\n\\n    function _getUnit() internal view returns (uint256) {\\n        return 10 ** decimals;\\n    }\\n\\n    function _buildNftId(uint32 ownerId, uint8 level) internal pure returns (uint256) {\\n\\t\\treturn (uint256(ownerId) \\u003c\\u003c 8) + level;\\n\\t}\\n\\n\\tfunction _extractOwnerIdFromNftId(uint256 id) internal pure returns (uint32){\\n\\t\\treturn uint32(id \\u003e\\u003e 8 \\u0026 0xffffffff);\\n\\t}\\n\\n\\tfunction _extractLevelFromNftId(uint256 id) internal pure returns (uint8) {\\n\\t\\treturn uint8(id \\u0026 0xff);\\n\\t}\\n\\n    function _calcTokenAmountByLevel(uint8 level) internal view returns (uint256) {\\n\\t\\treturn (uint256(1) \\u003c\\u003c level) * _getUnit();\\n\\t}\\n}\\n\"},\"StringUtils.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary StringUtils {\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits--;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n\\tfunction concat(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory bytesA = bytes(a);\\n        bytes memory bytesB = bytes(b);\\n\\n        string memory concatenated = new string(bytesA.length + bytesB.length);\\n        bytes memory bytesConcatenated = bytes(concatenated);\\n\\n        uint256 k = 0;\\n        for (uint256 i = 0; i \\u003c bytesA.length; i++) {\\n            bytesConcatenated[k++] = bytesA[i];\\n        }\\n\\n        for (uint256 i = 0; i \\u003c bytesB.length; i++) {\\n            bytesConcatenated[k++] = bytesB[i];\\n        }\\n\\n        return string(bytesConcatenated);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNft\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ownerId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"internalType\":\"struct ERC2048.Nft\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerNfts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ownerId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"internalType\":\"struct ERC2048.Nft[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Binary", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000655f056c9327537fe98129b9a1ceaec414cf03c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3a6cdc50637a2caf5d918c12771fdeb1c881244e942685f02eeed3f005c2091"}