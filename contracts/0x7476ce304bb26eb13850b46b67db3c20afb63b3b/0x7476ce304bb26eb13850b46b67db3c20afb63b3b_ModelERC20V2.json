{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ModelERC20V2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// TOKEN DEPLOYED USING Saintbot!\\n// CONTRACT RENOUNCED AUTOMATICALLY\\n// THIS HAS LIQUIDITY LOCKED FOR 90 DAYS, 0 OWNER TOKENS, ANTI-RUG BY DEFAULT!\\n// Saintbot\\n// Deploy and manage fair launch anti-rug tokens seamlessly and lightning-fast with low gas on our free-to-use Telegram bot.\\n// Website: saintbot.app/\\n// Twitter: twitter.com/TeamSaintbot\\n// Telegram Bot: https://t.me/saintbot_deployer_bot\\n// Tutorials: learn.saintbot.app/\\n// Youtube: https://www.youtube.com/@TeamSaintbot\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface Factory {\\n    function ethLiquidityTax() external view returns (address);\\n    function tradingTaxes() external view returns (address);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ncontract ModelERC20V2 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n\\n    bool public transferDelayEnabled = true;\\n    address payable public _taxWallet;\\n\\n    uint256 private constant _initialBuyTax = 5;\\n    uint256 private constant _initialSellTax = 5;\\n    uint256 private constant _finalBuyTax = 5;\\n    uint256 private constant _finalSellTax = 5;\\n    uint256 private constant _reduceBuyTaxAt = 25;\\n    uint256 private constant _reduceSellTaxAt = 25;\\n    uint256 private constant _preventSwapBefore = 5;\\n    uint256 public _buyCount = 0;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant _tTotal = 100_000_000 * 10 ** _decimals;\\n    string private _name;\\n    string private _symbol;\\n\\n    uint256 public constant _maxTxAmount = 50_000_000 * 10 ** _decimals;\\n    uint256 public constant _maxWalletSize = 50_000_000 * 10 ** _decimals;\\n    uint256 public constant _taxSwapThreshold = 500_000 * 10 ** _decimals;\\n    uint256 public constant _maxTaxSwap = 500_000 * 10 ** _decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address public uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap;\\n    bool private swapEnabled;\\n\\n    bool private initialized;\\n\\n    address public factory;\\n\\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    function init(string memory _nameIn, string memory _symbolIn, address _user)\\n        external\\n        payable\\n        returns (address poolAddress)\\n    {\\n        require(!initialized, \\\"reinit\\\");\\n\\n        _name = _nameIn;\\n        _symbol = _symbolIn;\\n\\n        _taxWallet = payable(_user);\\n        _balances[address(this)] = _tTotal;\\n        _isExcludedFromFee[tx.origin] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        factory = msg.sender;\\n\\n        inSwap = false;\\n\\n        initialized = true;\\n\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n\\n        uint256 liquidityTax = msg.value / 100;\\n\\n        (bool success,) = payable(Factory(msg.sender).ethLiquidityTax()).call{value: liquidityTax}(\\\"\\\");\\n        require(success, \\\"failed sending eth\\\");\\n\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this), balanceOf(address(this)), 0, 0, msg.sender, block.timestamp\\n        );\\n\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\\n\\n        swapEnabled = true;\\n        tradingOpen = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n\\n        return uniswapV2Pair;\\n    }\\n\\n    function _distributeMultisigs(uint256 _amount) private {\\n        Factory _factory = Factory(factory);\\n\\n        address payable revShareMultisig = payable(_factory.tradingTaxes());\\n\\n        (bool success,) = revShareMultisig.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"failed sending eth\\\");\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        uint256 taxAmount;\\n\\n        if (from != _taxWallet && to != _taxWallet) {\\n            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100);\\n            if (transferDelayEnabled) {\\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                    require(\\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\\n                        \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\n                    );\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                _buyCount++;\\n            }\\n\\n            if (to == uniswapV2Pair && from != address(this)) {\\n                taxAmount = amount.mul((_buyCount > _reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100);\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n\\n            if (\\n                !inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold\\n                    && _buyCount > _preventSwapBefore\\n            ) {\\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 5000000000000000) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if (!tradingOpen) {\\n            taxAmount = 0;\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n\\n        _balances[from] = _balances[from].sub(amount);\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\n\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        uint256 taxWalletAmount = (amount * 90) / 100;\\n\\n        _taxWallet.transfer(taxWalletAmount);\\n\\n        _distributeMultisigs(amount - taxWalletAmount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function manualSwap() external {\\n        require(_msgSender() == _taxWallet || Factory(factory).tradingTaxes() == _msgSender());\\n\\n        uint256 tokenBalance = balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    function updateTaxWallet(address _updateTaxWallet) external {\\n        require(msg.sender == _taxWallet, \\\"auth\\\");\\n        require(_updateTaxWallet != address(0), \\\"address(0)\\\");\\n\\n        _taxWallet = payable(_updateTaxWallet);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameIn\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolIn\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updateTaxWallet\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ModelERC20V2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}