{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\nwebsite: https://www.thesecret.club/\r\ntwitter: https://twitter.com/MLM_token\r\ntelegram: @MLM_contract\r\n\r\nWe are excited to introduce MLM Token  - a ERC20 meme token with a unique referral marketing program.\r\nOur goal is to create an engaging and mutually beneficial community for all participants.\r\n\r\nTo take advantage of the exclusive trading opportunity with $MLM, we are offering the first 30 invitations from the developer with the invite code FIRST30.\r\n\r\n\r\nMaximum Purchase per Transaction: 2% of Total Supply.\r\n\r\nPurchase and sale tax: 2% / 2% (Buy / Sell) for activated wallets, and 3% / 3% for non-activated wallets.\r\n1% of the tax is refunded upon wallet activation.\r\n\r\nReferral Marketing Program:\r\n1st level: 0.6% - For Novice (To achieve Novice rank, invite one referral. Novice rank allows earning rewards from 1st level referrals.)\r\n2nd level: 0.5% - For Apprentice (To achieve Apprentice rank, invite five referrals with Novice rank. Apprentice rank allows earning rewards from 2nd level referrals.)\r\n3rd level: 0.4% - For Expert (To achieve Expert rank, invite five referrals with Apprentice rank. Expert rank allows earning rewards from 3rd level referrals.)\r\n4th level: 0.3% - For Master (To achieve Master rank, invite five referrals with Expert rank. Master rank allows earning rewards from 4th level referrals.)\r\n5th level: 0.2% - For Legend (To achieve Legend rank, invite five referrals with Master rank. Legend rank allows earning rewards from 5th level referrals.)\r\n\r\n* Referral is counted as an address that has made at least one token purchase.\r\n** Immediately after reaching the next rank, you receive all accumulated bonuses of the corresponding level.\r\n\r\n\r\n\r\n**/\r\n\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private locked;\r\n\r\n    constructor() {\r\n        locked = false;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!locked, \"Reentrant call\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract SwapBlock is Ownable {\r\n    mapping(address => bool) public addressesLiquidity;\r\n    event PercentsWalletLimitSet(uint256 _percentWalletLimit);\r\n    event AddressLiquidityAdded(address indexed _addressLiquidity);\r\n    event AddressLiquidityRemoved(address indexed _addressLiquidity);\r\n\r\n    function checkAddressLiquidity(address _addressLiquidity) external view returns (bool) {\r\n        return addressesLiquidity[_addressLiquidity];\r\n    }\r\n\r\n    function addAddressLiquidity(address _addressLiquidity) external onlyOwner {\r\n        addressesLiquidity[_addressLiquidity] = true;\r\n        emit AddressLiquidityAdded(_addressLiquidity);\r\n    }\r\n\r\n    function removeAddressLiquidity(address _addressLiquidity) external onlyOwner {\r\n        addressesLiquidity[_addressLiquidity] = false;\r\n        emit AddressLiquidityRemoved(_addressLiquidity);\r\n    }\r\n    uint256 private _percentWalletLimits = 2;\r\n\r\n    function getPercentsWalletLimit() public view returns (uint256) {\r\n        return _percentWalletLimits;\r\n    }\r\n\r\n    function setPercentsWalletLimit(uint256 _percentWalletLimit) external onlyOwner {\r\n        require(_percentWalletLimit <= 100, \"PercentsWalletLimit > 100\");\r\n\r\n        _percentWalletLimits = _percentWalletLimit;\r\n        emit PercentsWalletLimitSet(_percentWalletLimit);\r\n    }\r\n}\r\n\r\n\r\ncontract MLM is Context, IERC20, SwapBlock, ReentrancyGuard {\r\n\r\n    struct AddressData {\r\n        bool registered;\r\n        address referrers;\r\n        uint256 unregisteredRewards;\r\n        uint256[5] balancelevels;\r\n        uint32[5] count_levels;\r\n        bool counted;\r\n    }\r\n    struct InviteData {\r\n        bool usedInvite;\r\n        address referral;\r\n    }\r\n    event usedInvitesChanged(bytes signature);\r\n    event DataChanged(address indexed userAddress);\r\n    mapping(address => AddressData) private _address_data;\r\n    mapping(bytes32 => InviteData) private _invites_data;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 public immutable _decimals;\r\n    uint8[5] private _REWARDS;\r\n    uint8[5] private _requiredReferralsCount;\r\n    string public _symbol;\r\n    string public _name;\r\n    constructor() {\r\n        _name = \"TheSecret.club\";\r\n        _symbol = \"MLM\";\r\n        _REWARDS=[60,50,40,30,20];\r\n        _requiredReferralsCount=[1, 5, 5, 5, 5];\r\n        _decimals = 18;\r\n        _totalSupply = 420e6 * 1e18;\r\n        _balances[msg.sender] = _totalSupply;\r\n        _address_data[msg.sender].registered = true; \r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }    \r\n\r\n    function getAddressData(address user) public view returns (AddressData memory) {\r\n        return _address_data[user];\r\n    }\r\n    function getUsedInvite(bytes32 inviteId) public view returns (bool) {\r\n        bool usedInvite = _invites_data[inviteId].usedInvite;\r\n        return usedInvite;\r\n    }\r\n    function getInviteReferral(bytes32 inviteId) public view returns (address) {\r\n        address invitereferral = _invites_data[inviteId].referral;\r\n        return invitereferral;\r\n    }\r\n    function getRewards() public view returns (uint8[5] memory) {\r\n        return (_REWARDS);\r\n    }\r\n    function getrequiredReferralsCount() public view returns (uint8[5] memory) {\r\n        return (_requiredReferralsCount);\r\n    }\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address addressOwner, address spender) external view returns (uint256) {\r\n        return _allowances[addressOwner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender]-subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"Mint to the zero address\");\r\n        _totalSupply = _totalSupply+amount;\r\n        _balances[account] = _balances[account]+amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function useInvite(bytes32 inviteId, bytes memory signature) external nonReentrant {\r\n        AddressData memory address_data = _address_data[msg.sender];\r\n        require(address_data.referrers == address(0), \"Referrer already set\");\r\n        require(!_invites_data[inviteId].usedInvite, \"Invite already used\");\r\n        require(!address_data.registered, \"Already registered\");\r\n\r\n        address referrer = _recoverSigner(inviteId, signature);\r\n        require(_address_data[referrer].registered, \"Referrer not registered\");\r\n        require(msg.sender != referrer, \"You cannot refer yourself\");\r\n        _invites_data[inviteId].referral=msg.sender;\r\n        _invites_data[inviteId].usedInvite = true;\r\n        emit usedInvitesChanged(signature);\r\n        uint256 unregisteredRewards=address_data.unregisteredRewards;\r\n        address_data.referrers = referrer;\r\n        address_data.registered = true; \r\n        emit DataChanged(msg.sender);\r\n        bool levelflag = true;\r\n        uint8[5] memory REWARDS=_REWARDS;\r\n        uint8[5] memory requiredReferralsCount=_requiredReferralsCount;\r\n        if(unregisteredRewards != 0) {\r\n            address ref = referrer;\r\n            address_data.counted = true;\r\n            AddressData memory address_data_ref;\r\n            uint256 tokenback=address_data.unregisteredRewards*10/30;\r\n            for (uint i = 0; i <= 4; i++) {\r\n                address_data_ref = _address_data[ref];\r\n                if (ref == address(0)) {\r\n                    address_data.unregisteredRewards=0;\r\n                    break;\r\n                }\r\n                bool flagdatachange=false;\r\n                uint256 reward = 0;\r\n                reward = unregisteredRewards*REWARDS[i]/300;\r\n                if(levelflag){\r\n                    address_data_ref.count_levels[i]=address_data_ref.count_levels[i]+1;\r\n                    flagdatachange=true;\r\n                }\r\n                if(address_data_ref.count_levels[i]==requiredReferralsCount[i]&&levelflag){\r\n                    reward=reward+address_data_ref.balancelevels[i];\r\n                    address_data_ref.balancelevels[i]=0;\r\n                    flagdatachange=true;\r\n                    _mint(ref, reward);\r\n                    levelflag=true;\r\n                } else if(address_data_ref.count_levels[i]<requiredReferralsCount[i]){\r\n                    address_data_ref.balancelevels[i]=address_data_ref.balancelevels[i]+reward;\r\n                    flagdatachange=true;\r\n                    levelflag=false;\r\n                } else if(address_data_ref.count_levels[i]>=requiredReferralsCount[i]){\r\n                    levelflag=false;\r\n                     _mint(ref, reward);\r\n                }\r\n                if(flagdatachange){\r\n                    _address_data[ref]=address_data_ref;\r\n                    emit DataChanged(ref);\r\n                }\r\n                ref = address_data_ref.referrers;\r\n            }\r\n            address_data.unregisteredRewards=0;\r\n            _mint(msg.sender, tokenback);\r\n        }\r\n        _address_data[msg.sender]=address_data;\r\n    }\r\n    \r\n    function _recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = _splitSignature(signature);\r\n        return ecrecover(ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n\r\n    // Internal function to split a signature into its components (r, s, v)\r\n    function _splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        require(sig.length == 65, \"Invalid signature length\");\r\n\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        if (v < 27) v += 27;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal nonReentrant{\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(amount <= _balances[sender], \"Transfer amount exceeds balance\");\r\n        bool levelflag = true;\r\n        uint8[5] memory requiredReferralsCount=_requiredReferralsCount;\r\n        uint8[5] memory REWARDS=_REWARDS;\r\n        uint256 totalSupplyt=_totalSupply;\r\n        uint256 amountRecipient = amount;\r\n        if(addressesLiquidity[recipient]){ //Sell token\r\n            AddressData memory address_data_sender=_address_data[tx.origin];\r\n            if(address_data_sender.registered){\r\n                _balances[sender] = _balances[sender]-amount;\r\n                address ref = address_data_sender.referrers;\r\n                AddressData memory address_data_ref;\r\n                for (uint i = 0; i < 5; i++) {\r\n                    address_data_ref=_address_data[ref];\r\n                    uint256 reward = 0;\r\n                    reward=amount*REWARDS[i]/10000;\r\n                    if (reward != 0) {\r\n                        if (ref == address(0)) {\r\n                            amountRecipient = amountRecipient-reward;\r\n                            totalSupplyt = totalSupplyt-reward;\r\n                            emit Transfer(sender, address(0), reward);\r\n                        } else {\r\n                            amountRecipient = amountRecipient-reward;\r\n                            if(address_data_ref.count_levels[i]>=requiredReferralsCount[i]){\r\n                                _balances[ref] = _balances[ref]+reward;\r\n                                emit Transfer(sender, ref, reward);\r\n                            } else {\r\n                                totalSupplyt = totalSupplyt-reward;\r\n                                emit Transfer(sender, address(0), reward);\r\n                                address_data_ref.balancelevels[i]=address_data_ref.balancelevels[i]+reward;\r\n                                _address_data[ref]=address_data_ref;\r\n                                emit DataChanged(ref);\r\n                            }\r\n                        }\r\n                    }\r\n                    ref = address_data_ref.referrers;\r\n                }\r\n            } else {\r\n                _balances[sender] = _balances[sender]-amount;\r\n                uint256 reward=0;\r\n                reward = amount*3/100;\r\n                amountRecipient = amountRecipient-reward;\r\n                _address_data[tx.origin].unregisteredRewards=address_data_sender.unregisteredRewards+reward;\r\n                totalSupplyt = totalSupplyt-reward;\r\n                emit Transfer(sender, address(0), reward);\r\n            }\r\n            _totalSupply=totalSupplyt;\r\n            _balances[recipient] = _balances[recipient]+amountRecipient;\r\n            emit Transfer(sender, recipient, amountRecipient);\r\n\r\n        } else if(addressesLiquidity[sender]){ //Buy Token\r\n            require((_balances[recipient]+amount) <= (totalSupplyt*SwapBlock.getPercentsWalletLimit())/100, \"Transfer PercentsWalletLimit\"); //Limit\r\n            AddressData memory address_data_recipient=_address_data[tx.origin];\r\n            if(!address_data_recipient.registered){\r\n                uint256 reward=0;\r\n                reward = amount*3/100;\r\n                amountRecipient = amountRecipient-reward;\r\n                address_data_recipient.unregisteredRewards=address_data_recipient.unregisteredRewards+reward;\r\n                totalSupplyt = totalSupplyt-reward;\r\n                emit Transfer(sender, address(0), reward);\r\n            } else {\r\n                address ref = address_data_recipient.referrers;\r\n                AddressData memory address_data_ref;\r\n                \r\n                for (uint i = 0; i < 5; i++) {\r\n                    uint256 reward = 0;\r\n                    reward=amount*REWARDS[i]/10000;\r\n                    address_data_ref=_address_data[ref];\r\n                    bool flagdatachange=false;\r\n                    amountRecipient = amountRecipient-reward;\r\n                    if (reward != 0) {\r\n                        if (ref == address(0)) {\r\n                            totalSupplyt = totalSupplyt-reward;\r\n                            emit Transfer(sender, address(0), reward);\r\n                        } else {\r\n                            if(address_data_recipient.counted){\r\n                                if((address_data_ref.count_levels[i]>=requiredReferralsCount[i])){\r\n                                    _balances[ref] = _balances[ref]+reward;\r\n                                    emit Transfer(sender, ref, reward);\r\n                                } else {\r\n                                    totalSupplyt = totalSupplyt-reward;\r\n                                    emit Transfer(sender, address(0), reward);\r\n                                    address_data_ref.balancelevels[i]=address_data_ref.balancelevels[i]+reward;\r\n                                    flagdatachange=true;    \r\n                                }\r\n                            } else {\r\n                                if(levelflag){\r\n                                    address_data_ref.count_levels[i]=address_data_ref.count_levels[i]+1;\r\n                                    flagdatachange=true;\r\n                                }\r\n                                if(address_data_ref.count_levels[i]==requiredReferralsCount[i]&&levelflag){\r\n                                    if(address_data_ref.balancelevels[i]!=0){\r\n                                        _mint(ref, address_data_ref.balancelevels[i]);\r\n                                        address_data_ref.balancelevels[i]=0;\r\n                                    }\r\n                                    \r\n                                    flagdatachange=true;\r\n                                    _balances[ref] = _balances[ref]+reward;\r\n                                    emit Transfer(sender, ref, reward);\r\n                                } else if(address_data_ref.count_levels[i]>=requiredReferralsCount[i]){\r\n                                    _balances[ref] = _balances[ref]+reward;\r\n                                    emit Transfer(sender, ref, reward);\r\n                                    levelflag=false;\r\n                                } else {\r\n                                    totalSupplyt = totalSupplyt-reward;\r\n                                    \r\n                                    emit Transfer(sender, address(0), reward);\r\n                                    address_data_ref.balancelevels[i]=address_data_ref.balancelevels[i]+reward;\r\n                                    flagdatachange=true;\r\n                                    levelflag=false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if(flagdatachange){\r\n                        _address_data[ref]=address_data_ref;\r\n                        emit DataChanged(ref);\r\n                    }\r\n                    ref = address_data_ref.referrers;\r\n                }\r\n                address_data_recipient.counted=true;\r\n            }\r\n            _address_data[tx.origin]=address_data_recipient;\r\n            _totalSupply=totalSupplyt;\r\n            _balances[sender] = _balances[sender]-amount;\r\n            _balances[recipient] = _balances[recipient]+amountRecipient;\r\n            emit Transfer(sender, recipient, amountRecipient);\r\n        } else {\r\n            _balances[sender] = _balances[sender]-amount;\r\n            _balances[recipient] = _balances[recipient]+amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _approve(address addressOwner, address spender, uint256 amount) internal {\r\n        require(addressOwner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n\r\n        _allowances[addressOwner][spender] = amount;\r\n        emit Approval(addressOwner, spender, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addressLiquidity\",\"type\":\"address\"}],\"name\":\"AddressLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addressLiquidity\",\"type\":\"address\"}],\"name\":\"AddressLiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentWalletLimit\",\"type\":\"uint256\"}],\"name\":\"PercentsWalletLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"usedInvitesChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressLiquidity\",\"type\":\"address\"}],\"name\":\"addAddressLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressLiquidity\",\"type\":\"address\"}],\"name\":\"checkAddressLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAddressData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrers\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unregisteredRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"balancelevels\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint32[5]\",\"name\":\"count_levels\",\"type\":\"uint32[5]\"},{\"internalType\":\"bool\",\"name\":\"counted\",\"type\":\"bool\"}],\"internalType\":\"struct MLM.AddressData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inviteId\",\"type\":\"bytes32\"}],\"name\":\"getInviteReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentsWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inviteId\",\"type\":\"bytes32\"}],\"name\":\"getUsedInvite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getrequiredReferralsCount\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressLiquidity\",\"type\":\"address\"}],\"name\":\"removeAddressLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentWalletLimit\",\"type\":\"uint256\"}],\"name\":\"setPercentsWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"inviteId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"useInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MLM", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5da0b1b62081fbb722a8d2018211a5829d7ac35d9311101a708867ede87ef88c"}