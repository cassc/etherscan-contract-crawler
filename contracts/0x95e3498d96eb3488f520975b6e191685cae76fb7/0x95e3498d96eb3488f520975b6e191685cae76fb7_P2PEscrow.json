{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/P2PEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title P2PEscrow\\n * @author Vamsi Krishna Srungarapu\\n * @notice Smart Contract aiding two users to swap tokens while acting as an escrow\\n */\\ncontract P2PEscrow is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Events emitted during the contract functions execution\\n    event OrderDeposit(bytes16 indexed orderId);\\n    event OrderSuccessful(bytes16 indexed orderId);\\n    event RefundedOrder(bytes16 indexed orderId);\\n    event CancelledOrder(bytes16 indexed orderId);\\n\\n    // End of Events\\n\\n    // errors\\n    error OrderFailure(OrderFailureReason reason);\\n    error RefundFailure(RefundFailureReason reason);\\n    error CancelOrderFailure(CancelOrderFailureReason reason);\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER\\n    }\\n    enum OrderStatus {\\n        AWAITING_DELIVERY,\\n        SUCCESS,\\n        REFUNDED,\\n        CANCELLED\\n    }\\n    enum OrderFailureReason {\\n        INVALID_STATE,\\n        INSUFFICIENT_BALANCE,\\n        DUPLICATE_ORDER,\\n        INVALID_ORDER_DETAILS\\n    }\\n    enum RefundFailureReason {\\n        REFUND_ONLY_AFTER_TIMEOUT,\\n        INVALID_STATE\\n    }\\n    enum CancelOrderFailureReason {\\n        ONLY_ORDER_CREATOR_CANCEL,\\n        INVALID_STATE\\n    }\\n    // Order struct saving the state of order details\\n    struct Order {\\n        address sender;\\n        uint96 swapTokenAmount;\\n        uint96 tokenAmount;\\n        uint32 timeoutTime;\\n        uint16 tokenId;\\n        uint16 swapTokenId;\\n        OrderStatus status;\\n        OrderType orderType;\\n    }\\n\\n    // Default order time out duration in\\n    // seconds saved at contract level\\n    uint32 public orderTimeoutDuration;\\n    // Mapping between order id and the order object\\n    mapping(bytes16 => Order) orderMap;\\n    // List of whitelisted token addresses\\n    address[] tokens;\\n\\n    constructor(address[] memory _tokens) {\\n        // Set default order time out to 300 seconds\\n        orderTimeoutDuration = 300;\\n        tokens = _tokens;\\n    }\\n\\n    /**\\n     * Helper function for transferring asset from user in to the smart contract\\n     * @param user address from which the tokens are pulled in to this contract\\n     * @param asset token address which is being pulled from the user\\n     * @param amount amount of token address that is being pulled from user\\n     */\\n    function _pullTokens(address user, address asset, uint256 amount) private {\\n        if (asset == address(0)) return;\\n        IERC20(asset).safeTransferFrom(user, address(this), amount);\\n    }\\n\\n    /**\\n     * Helper function for transferring asset from this smart contract to user\\n     * @param user asset receiving address\\n     * @param asset token address which is sent to user\\n     * @param amount amount of token address that is being sent to user\\n     */\\n    function _pushTokens(address user, address asset, uint256 amount) private {\\n        if (asset == address(0)) return;\\n        IERC20(asset).safeTransfer(user, amount);\\n    }\\n\\n    /**\\n     * Helper function for transferring asset from sender to receiver\\n     * @param sender token sending address\\n     * @param receiver token receiving address\\n     * @param asset token address which is being sent from sender to receiver\\n     * @param amount amount of token address that is being sent from sender to receiver\\n     */\\n    function _sendTokens(\\n        address sender,\\n        address receiver,\\n        address asset,\\n        uint256 amount\\n    ) private {\\n        if (asset == address(0)) return;\\n        IERC20(asset).safeTransferFrom(sender, receiver, amount);\\n    }\\n\\n    /**\\n     * Set the default time out duration. Only contract owner can invoke this functionality\\n     * @param timeoutDuration default time out duration in seconds\\n     */\\n    function setOrderTimeout(uint32 timeoutDuration) external onlyOwner {\\n        orderTimeoutDuration = timeoutDuration;\\n    }\\n\\n    /**\\n     * @notice executes a market order or limit order\\n     * @dev execute a market order or a limit order. A user who wants to\\n     * trade in and a user who wants to trade out should use the same order id.\\n     * A valid combination can be as below:\\n     * Let us assume that block.timestamp is less than given timeout time while placing the order\\n     * User 1 --> (tokenId: 1, tokenAmount: 1_000_000, swapTokenId: 2, swapTokenAmount: 2_000_000, timeoutTime: 1686927958, orderId: o1, orderType: 0)\\n     * User 2 --> (tokenId: 2, tokenAmount: 2_000_000, swapTokenId: 1, swapTokenAmount: 1_000_000, timeoutTime: 1686927958, orderId: o1, orderType: 0)\\n     * Now, when user 1 executes the order, tokenId:1 amount is deposited into the escrow amount.\\n     * Later when user 2 executes the order before the timeoutTime: 1686927958,\\n     *  tokenId:1 amount is moved from escrow to user and tokenId: 2 amount is moved from user 2 to user 1\\n     * @param tokenId id of the token that user wants to trade in\\n     * @param tokenAmount amount of token user wants to trade in\\n     * @param swapTokenId id of the token that a user wants to trade out\\n     * @param swapTokenAmount amount of token user wants to trade out\\n     * @param timeoutTime expiry time of the order\\n     * @param orderId unique order id\\n     * @param orderType can be market order or limit order\\n     */\\n    function executeOrder(\\n        uint16 tokenId,\\n        uint96 tokenAmount,\\n        uint16 swapTokenId,\\n        uint96 swapTokenAmount,\\n        uint32 timeoutTime,\\n        bytes16 orderId,\\n        OrderType orderType\\n    ) private nonReentrant returns (bytes16) {\\n        require(tokenId < tokensLength(), \\\"invalid tokenId\\\");\\n        require(swapTokenId < tokensLength(), \\\"invalid swap token id\\\");\\n\\n        if (orderMap[orderId].sender == msg.sender)\\n            revert OrderFailure(OrderFailureReason.DUPLICATE_ORDER);\\n\\n        if (orderMap[orderId].sender == address(0)) {\\n            orderMap[orderId].sender = msg.sender;\\n            orderMap[orderId].tokenId = tokenId;\\n            orderMap[orderId].swapTokenId = swapTokenId;\\n            orderMap[orderId].tokenAmount = tokenAmount;\\n            orderMap[orderId].swapTokenAmount = swapTokenAmount;\\n            orderMap[orderId].timeoutTime = timeoutTime;\\n            orderMap[orderId].status = OrderStatus.AWAITING_DELIVERY;\\n            orderMap[orderId].orderType = orderType;\\n\\n            emit OrderDeposit(orderId);\\n            _pullTokens(msg.sender, tokens[tokenId], tokenAmount);\\n\\n            return orderId;\\n        }\\n\\n        if (orderMap[orderId].status != OrderStatus.AWAITING_DELIVERY)\\n            revert OrderFailure(OrderFailureReason.INVALID_STATE);\\n        if (block.timestamp > orderMap[orderId].timeoutTime)\\n            revert OrderFailure(OrderFailureReason.INVALID_STATE);\\n        if (\\n            orderMap[orderId].tokenId != swapTokenId ||\\n            orderMap[orderId].tokenAmount != swapTokenAmount ||\\n            orderMap[orderId].swapTokenId != tokenId ||\\n            orderMap[orderId].swapTokenAmount != tokenAmount ||\\n            orderMap[orderId].orderType != orderType\\n        ) revert OrderFailure(OrderFailureReason.INVALID_ORDER_DETAILS);\\n\\n        orderMap[orderId].status = OrderStatus.SUCCESS;\\n        emit OrderSuccessful(orderId);\\n\\n        address swapToken = tokens[swapTokenId];\\n        _pushTokens(msg.sender, swapToken, swapTokenAmount);\\n\\n        _sendTokens(\\n            msg.sender,\\n            orderMap[orderId].sender,\\n            tokens[tokenId],\\n            tokenAmount\\n        );\\n\\n        return orderId;\\n    }\\n\\n    /**\\n     * @notice executes a market order\\n     * @dev see executeOrder comments. this function is just a wrapper on top of executeOrder\\n     * @param tokenId id of the token that user wants to trade in\\n     * @param tokenAmount amount of token user wants to trade in\\n     * @param swapTokenId id of the token that a user wants to trade out\\n     * @param swapTokenAmount amount of token user wants to trade out\\n     * @param orderId unique order id\\n     */\\n    function marketOrder(\\n        uint16 tokenId,\\n        uint96 tokenAmount,\\n        uint16 swapTokenId,\\n        uint96 swapTokenAmount,\\n        bytes16 orderId\\n    ) external returns (bytes16) {\\n        return\\n            executeOrder(\\n                tokenId,\\n                tokenAmount,\\n                swapTokenId,\\n                swapTokenAmount,\\n                uint32(block.timestamp + orderTimeoutDuration),\\n                orderId,\\n                OrderType.MARKET_ORDER\\n            );\\n    }\\n\\n    /**\\n     * @notice executes a limit order\\n     * @dev see executeOrder comments. this function is just a wrapper on top of executeOrder\\n     * @param tokenId id of the token that user wants to trade in\\n     * @param tokenAmount amount of token user wants to trade in\\n     * @param swapTokenId id of the token that a user wants to trade out\\n     * @param swapTokenAmount amount of token user wants to trade out\\n     * @param timeoutTime expiry time of the order\\n     * @param orderId unique order id\\n     */\\n    function limitOrder(\\n        uint16 tokenId,\\n        uint96 tokenAmount,\\n        uint16 swapTokenId,\\n        uint96 swapTokenAmount,\\n        uint32 timeoutTime,\\n        bytes16 orderId\\n    ) external returns (bytes16) {\\n        return\\n            executeOrder(\\n                tokenId,\\n                tokenAmount,\\n                swapTokenId,\\n                swapTokenAmount,\\n                timeoutTime,\\n                orderId,\\n                OrderType.LIMIT_ORDER\\n            );\\n    }\\n\\n    /**\\n     * @notice Cancel a waiting order\\n     * @dev a user who created the order first with the given order id can only cancel the order\\n     * @param orderId order id that has to be cancelled\\n     */\\n    function cancelOrder(bytes16 orderId) external {\\n        Order memory order = orderMap[orderId];\\n        if (msg.sender != order.sender)\\n            revert CancelOrderFailure(\\n                CancelOrderFailureReason.ONLY_ORDER_CREATOR_CANCEL\\n            );\\n        if (order.status != OrderStatus.AWAITING_DELIVERY)\\n            revert CancelOrderFailure(CancelOrderFailureReason.INVALID_STATE);\\n\\n        orderMap[orderId].status = OrderStatus.CANCELLED;\\n        emit CancelledOrder(orderId);\\n\\n        _pushTokens(order.sender, tokens[order.tokenId], order.tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Refund an expired waiting delivery order.\\n     * Only contract owner will be able to execute the refund operation after the order timeout\\n     * @dev an order can be refunded only if it is expired and is in waiting delivery state\\n     * @param orderId order id that has to be refunded\\n     */\\n    function refund(bytes16 orderId) external onlyOwner {\\n        Order memory order = orderMap[orderId];\\n        if (block.timestamp <= order.timeoutTime)\\n            revert RefundFailure(RefundFailureReason.REFUND_ONLY_AFTER_TIMEOUT);\\n        if (order.status != OrderStatus.AWAITING_DELIVERY)\\n            revert RefundFailure(RefundFailureReason.INVALID_STATE);\\n\\n        orderMap[orderId].status = OrderStatus.REFUNDED;\\n        emit RefundedOrder(orderId);\\n\\n        _pushTokens(order.sender, tokens[order.tokenId], order.tokenAmount);\\n    }\\n\\n    /**\\n     * fetch order details by order id\\n     * @param orderId order id\\n     */\\n    function getOrder(bytes16 orderId) external view returns (Order memory) {\\n        require(orderMap[orderId].sender != address(0), \\\"invalid order id\\\");\\n        return orderMap[orderId];\\n    }\\n\\n    /**\\n     * get index of the whitelisted token address\\n     * @param token whitelisted token address\\n     */\\n    function getTokenIndex(address token) external view returns (int) {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == token) return int(i);\\n        }\\n        return -1;\\n    }\\n\\n    /**\\n     * get whitelisted token address by index\\n     * @param index whitelisted token index\\n     */\\n    function getTokenAddressByIndex(\\n        uint index\\n    ) external view returns (address) {\\n        require(index < tokensLength(), \\\"invalid index\\\");\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @notice The smart contract owner can add tokens to the contract and whitelist them\\n     * for using in executing the market order or limit order\\n     * @param inputTokens tokens that have to be whitelisted\\n     */\\n    function addTokens(address[] calldata inputTokens) external onlyOwner {\\n        for (uint i = 0; i < inputTokens.length; i++) {\\n            tokens.push(inputTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice helper function to find the total number of whitelisted\\n     * tokens in the smart contract\\n     */\\n    function tokensLength() public view returns (uint) {\\n        return tokens.length;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum P2PEscrow.CancelOrderFailureReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"CancelOrderFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum P2PEscrow.OrderFailureReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"OrderFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum P2PEscrow.RefundFailureReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"RefundFailure\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"CancelledOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"OrderDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"RefundedOrder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"swapTokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"swapTokenId\",\"type\":\"uint16\"},{\"internalType\":\"enum P2PEscrow.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum P2PEscrow.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"internalType\":\"struct P2PEscrow.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenAddressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"swapTokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"swapTokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTime\",\"type\":\"uint32\"},{\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"limitOrder\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"swapTokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"swapTokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"marketOrder\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderTimeoutDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"orderId\",\"type\":\"bytes16\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timeoutDuration\",\"type\":\"uint32\"}],\"name\":\"setOrderTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "P2PEscrow", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b320000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}