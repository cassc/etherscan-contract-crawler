{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n   \r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a / _b;\r\n        return c;\r\n    }\r\n  \r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n        return c;\r\n    }\r\n    \r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\nemit OwnershipRenounced(owner);\r\nowner = address(0);\r\n    }\r\n   \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n   \r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0)); \r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    bool public paused = false;\r\n    \r\n    modifier whenNotPaused() {\r\nrequire(!paused);\r\n        _;\r\n    }\r\n   \r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n   \r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    uint256 totalSupply_;\r\n    function totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_value <= balances[msg.sender]);\r\nrequire(_to != address(0)); \r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\n        return true; \r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true; \r\n    }\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n{\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\nrequire(_to != address(0)); \r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true; \r\n}\r\n  \r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PausableERC20Token is StandardToken, Pausable {\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract BurnablePausableERC20Token is PausableERC20Token {\r\n    mapping (address => mapping (address => uint256)) internal allowedBurn;\r\n    event Burn(address indexed burner, uint256 value);\r\n    event ApprovalBurn(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    function allowanceBurn(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowedBurn[_owner][_spender];\r\n    }\r\n    function approveBurn(address _spender, uint256 _value)\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        allowedBurn[msg.sender][_spender] = _value;\r\n        emit ApprovalBurn(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n{\r\n_burn(msg.sender, _value);\r\n}\r\n   \r\n    function burnFrom(\r\n        address _from,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    {\r\n        require(_value <= allowedBurn[_from][msg.sender]);\r\n        allowedBurn[_from][msg.sender] = allowedBurn[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n    }\r\n    function _burn(\r\n        address _who,\r\n        uint256 _value\r\n    )\r\n    internal\r\n    whenNotPaused\r\n    {\r\n        require(_value <= balances[_who]);\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n    function increaseBurnApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        allowedBurn[msg.sender][_spender] = (\r\n        allowedBurn[msg.sender][_spender].add(_addedValue));\r\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    function decreaseBurnApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowedBurn[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowedBurn[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowedBurn[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\ncontract FreezableBurnablePausableERC20Token is BurnablePausableERC20Token {\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n    function freezeAccount(\r\n        address target,\r\n        bool freeze\r\n    )\r\n    public\r\n    onlyOwner\r\n{\r\nfrozenAccount[target] = freeze;\r\n    emit FrozenFunds(target, freeze);\r\n}\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n        require(!frozenAccount[_to], \"Receiver account freezed\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Spender account freezed\");\r\n        require(!frozenAccount[_from], \"Sender account freezed\");\r\n        require(!frozenAccount[_to], \"Receiver account freezed\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    function burn(\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n{\r\nrequire(!frozenAccount[msg.sender], \"Sender account freezed\");\r\nreturn super.burn(_value);\r\n}\r\n    function burnFrom(\r\n        address _from,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Spender account freezed\");\r\n        require(!frozenAccount[_from], \"Sender account freezed\");\r\n        return super.burnFrom(_from, _value);\r\n    }\r\n}\r\n\r\ncontract EFT is FreezableBurnablePausableERC20Token {\r\n    string public constant name = \"EduFriend Token\";\r\n    string public constant symbol = \"EFT\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseBurnApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseBurnApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "EFT", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://99d3051918fa534f4d6fe836c7d4060430fbefb3fa053e8bb8d0d6845fd78960"}