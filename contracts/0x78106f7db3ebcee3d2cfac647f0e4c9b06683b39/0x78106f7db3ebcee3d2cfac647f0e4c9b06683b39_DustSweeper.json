{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private reentrancyStatus = 1;\\n\\n    modifier nonReentrant() {\\n        require(reentrancyStatus == 1, \\\"REENTRANCY\\\");\\n\\n        reentrancyStatus = 2;\\n\\n        _;\\n\\n        reentrancyStatus = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DustSweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Trustus.sol\\\";\\n\\n/// @title DustSweeper\\n/// @notice Allows users to swap small balance tokens for ETH without expensive gas transactions\\ncontract DustSweeper is Ownable, ReentrancyGuard, Trustus {\\n  using SafeTransferLib for ERC20;\\n\\n  /// @notice Events\\n  event Sweep(address indexed makerAddress, address indexed tokenAddress, uint256 tokenAmount, uint256 ethAmount);\\n  event ProtocolPayout(uint256 protocolSplit, uint256 governorSplit);\\n  /// @notice Errors\\n  error ZeroAddress();\\n  error NoBalance();\\n  error NotContract();\\n  error NoTokenPrice(address tokenAddress);\\n  error NoSweepableOrders();\\n  error InsufficientNative(uint256 sendAmount, uint256 remainingBalance);\\n  error OutOfRange(uint256 param);\\n\\n  struct Token {\\n    bool tokenSetup;\\n    uint8 decimals;\\n    uint8 takerDiscountTier;\\n  }\\n\\n  struct CurrentToken {\\n    address tokenAddress;\\n    uint8 decimals;\\n    uint256 price;\\n  }\\n\\n  struct TokenPrice {\\n    address addr;\\n    uint256 price;\\n  }\\n\\n  struct Native {\\n    uint256 balance;\\n    uint256 total;\\n    uint256 protocol;\\n  }\\n\\n  struct Order {\\n    uint256 nativeAmount;\\n    uint256 tokenAmount;\\n    uint256 distributionAmount;\\n    address payable destinationAddress;\\n  }\\n\\n  address payable public protocolWallet;\\n  address payable public governorWallet;\\n  uint256 public protocolFee;\\n  uint256 public protocolPayoutSplit;\\n\\n  mapping(address => Token) private tokens;\\n  mapping(uint8 => uint256) public takerDiscountTiers;\\n  mapping(address => address payable) public destinations;\\n\\n  /// @notice Trustus Packet Request\\n  bytes32 public constant TRUSTUS_REQUEST_VALUE = 0xfc7ecbf4f091085173dad8d1d3c2dfd218c018596a572201cd849763d1114e7a;\\n\\n  /// @notice Whitelist\\n  bool public sweepWhitelistOn;\\n  mapping(address => bool) public sweepWhitelist;\\n\\n  /// @notice Limits\\n  uint256 public constant MAX_TAKER_DISCOUNT_PCT = 10000;\\n  uint256 public constant MAX_PROTOCOL_FEE_PCT = 5000;\\n  uint256 public constant MAX_PROTOCOL_PAYOUT_SPLIT_PCT = 10000;\\n  uint256 public constant MIN_OVERAGE_RETURN_WEI = 7000;\\n  uint256 public constant MAX_SWEEP_ORDER_SIZE = 200;\\n\\n  constructor(\\n    address payable _protocolWallet,\\n    address payable _governorWallet,\\n    uint256[] memory _takerDiscountTiers,\\n    uint256 _protocolFeePercent,\\n    uint256 _protocolPayoutSplitPercent\\n  ) {\\n    // Check Input\\n    if (_protocolWallet == address(0))\\n      revert ZeroAddress();\\n    if (_governorWallet == address(0))\\n      revert ZeroAddress();\\n    if (_protocolFeePercent > MAX_PROTOCOL_FEE_PCT)\\n      revert OutOfRange(_protocolFeePercent);\\n    if (_protocolPayoutSplitPercent > MAX_PROTOCOL_PAYOUT_SPLIT_PCT)\\n      revert OutOfRange(_protocolPayoutSplitPercent);\\n    // Taker Discount Tiers\\n    uint256 _takerDiscountTierslength = _takerDiscountTiers.length;\\n    for (uint8 t = 0;t < _takerDiscountTierslength;++t) {\\n      if (_takerDiscountTiers[t] > MAX_TAKER_DISCOUNT_PCT)\\n        revert OutOfRange(_takerDiscountTiers[t]);\\n      takerDiscountTiers[t] = _takerDiscountTiers[t];\\n    }\\n    // Wallets\\n    protocolWallet = _protocolWallet;\\n    governorWallet = _governorWallet;\\n    // Protocol Fee %\\n    protocolFee = _protocolFeePercent;\\n    // Protocol Payout Split Percent\\n    protocolPayoutSplit = _protocolPayoutSplitPercent;\\n  }\\n\\n  /// @notice Method that is called by taker bots to exchange ETH for a list of ERC20 tokens at a discount\\n  /// @dev Taker bot needs to call offchain API to get packet with current price data for tokens they intend to sweep\\n  /// @dev makers & tokenAddresses are mapped and need to be the same size\\n  /// @dev tokenAddresses[0] is the ERC20 token address that will be swept from makers[0], tokenAddresses[1] corresponds with makers[1]...\\n  /// @param makers List of maker addresses that have approved an ERC20 token and taker bot intends to sweep\\n  /// @param tokenAddresses List of ERC20 tokenAddresses that correspond with makers list to be swept\\n  /// @param packet The packet that contains current prices for tokens the taker bot intends to sweep, is generated and signed offchain using API\\n  function sweepDust(\\n    address[] calldata makers,\\n    address[] calldata tokenAddresses,\\n    TrustusPacket calldata packet\\n  ) external payable nonReentrant verifyPacket(TRUSTUS_REQUEST_VALUE, packet) {\\n    // Check whitelist\\n    if (sweepWhitelistOn && !sweepWhitelist[msg.sender])\\n      revert NoSweepableOrders();\\n    TokenPrice[] memory tokenPrices = abi.decode(packet.payload, (TokenPrice[]));\\n    Native memory native = Native(msg.value, 0, 0);\\n    // Order is valid length\\n    uint256 makerLength = makers.length;\\n    if (makerLength == 0 || makerLength > MAX_SWEEP_ORDER_SIZE || makerLength != tokenAddresses.length)\\n      revert NoSweepableOrders();\\n    CurrentToken memory currentToken = CurrentToken(address(0), 0, 0);\\n    for (uint256 i = 0; i < makerLength; ++i) {\\n      Order memory order = Order(0, 0, 0, payable(address(0)));\\n      // Get tokenAmount to be swept\\n      order.tokenAmount = getTokenAmount(tokenAddresses[i], makers[i]);\\n      if (order.tokenAmount <= 0)\\n        continue;\\n\\n      if (currentToken.tokenAddress != tokenAddresses[i]) {\\n        currentToken.tokenAddress = tokenAddresses[i];\\n        // Setup Token if needed\\n        if (!tokens[tokenAddresses[i]].tokenSetup)\\n          setupToken(tokenAddresses[i]);\\n        // Get tokenDecimals\\n        currentToken.decimals = getTokenDecimals(tokenAddresses[i]);\\n        // Get tokenPrice\\n        currentToken.price = getPrice(tokenAddresses[i], tokenPrices);\\n        if (currentToken.price == 0)\\n          revert NoTokenPrice(tokenAddresses[i]);\\n      }\\n\\n      // DustSweeper sends Maker's tokens to Taker\\n      ERC20(tokenAddresses[i]).safeTransferFrom(makers[i], msg.sender, order.tokenAmount);\\n\\n      // Equivalent amount of Native Tokens\\n      order.nativeAmount = ((order.tokenAmount * currentToken.price) / (10**currentToken.decimals));\\n      native.total += order.nativeAmount;\\n\\n      // Amount of Native Tokens to transfer\\n      order.distributionAmount = (order.nativeAmount * (1e4 - takerDiscountTiers[getTokenTakerDiscountTier(tokenAddresses[i])])) / 1e4;\\n      if (order.distributionAmount > native.balance)\\n        revert InsufficientNative(order.distributionAmount, native.balance);\\n      // Subtract order.distributionAmount from native.balance amount\\n      native.balance -= order.distributionAmount;\\n\\n      // If maker has specified a destinationAddress send ETH there otherwise send to maker address\\n      order.destinationAddress = destinations[makers[i]] == address(0) ? payable(makers[i]) : destinations[makers[i]];\\n      // Taker sends Native Token to Maker\\n      SafeTransferLib.safeTransferETH(order.destinationAddress, order.distributionAmount);\\n      // Log Event\\n      emit Sweep(makers[i], tokenAddresses[i], order.tokenAmount, order.distributionAmount);\\n    }\\n    // Taker pays protocolFee % for the total amount to avoid multiple transfers\\n    native.protocol = (native.total * protocolFee) / 1e4;\\n    if (native.protocol > native.balance)\\n      revert InsufficientNative(native.protocol, native.balance);\\n    // Subtract protocolFee from native.balance and leave in contract\\n    native.balance -= native.protocol;\\n\\n    // Pay any overage back to msg.sender as long as overage > MIN_OVERAGE_RETURN_WEI\\n    if (native.balance > MIN_OVERAGE_RETURN_WEI) {\\n      SafeTransferLib.safeTransferETH(payable(msg.sender), native.balance);\\n    }\\n  }\\n\\n  /// @notice Calculates the amount of ERC20 token to be swept\\n  /// @dev If balance is lower than allowance will return balance, otherwise entire allowance is returned\\n  /// @param _tokenAddress Address of the ERC20 token\\n  /// @param _makerAddress Address of the maker to fetch allowance/balance for specified ERC20 token\\n  /// @return The amount of the specified ERC20 token that can be swept\\n  function getTokenAmount(address _tokenAddress, address _makerAddress) private view returns(uint256) {\\n    // Check Allowance\\n    uint256 allowance = ERC20(_tokenAddress).allowance(_makerAddress, address(this));\\n    if (allowance == 0)\\n      return 0;\\n    uint256 balance = ERC20(_tokenAddress).balanceOf(_makerAddress);\\n    return balance < allowance ? balance : allowance;\\n  }\\n\\n  /// @notice Fetches price for specified ERC20 token using the signed price packets\\n  /// @dev Iterates through the tokens/prices in the attached Trustus price packet, returns 0 if not found\\n  /// @param _tokenAddress Address of the ERC20 token\\n  /// @param _tokenPrices Array of TokenPrice structs generated and signed offchain\\n  /// @return Price in ETH of the specified ERC20 token\\n  function getPrice(address _tokenAddress, TokenPrice[] memory _tokenPrices) private pure returns(uint256) {\\n    uint256 tokenPricesLength = _tokenPrices.length;\\n    for (uint256 i = 0;i < tokenPricesLength;++i) {\\n      if (_tokenAddress == _tokenPrices[i].addr) {\\n        return _tokenPrices[i].price;\\n      }\\n    }\\n    return 0;\\n  }\\n\\n  /// @notice Does first time setup of specified ERC20 token including caching decimals value from token contract\\n  /// @dev Attempts to fetch and cache the decimals value using the decimals() method on token contract, defaults to 18\\n  /// @param _tokenAddress Address of the ERC20 token to set up\\n  function setupToken(address _tokenAddress) public {\\n    (bool success, bytes memory result) = _tokenAddress.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n    uint8 decimals = 18;\\n    if (success)\\n      decimals = abi.decode(result, (uint8));\\n    tokens[_tokenAddress].tokenSetup = true;\\n    tokens[_tokenAddress].decimals = decimals;\\n  }\\n\\n  /// @notice Returns the cached decimals value for the specified ERC20 token\\n  /// @dev This value is cached by calling decimals() method on ERC20 token contract during setupToken()\\n  /// @param _tokenAddress Address of the ERC20 token\\n  /// @return Decimals value for the specified ERC20 token\\n  function getTokenDecimals(address _tokenAddress) public view returns(uint8) {\\n    return tokens[_tokenAddress].decimals;\\n  }\\n\\n  /// @notice Returns the takerDiscountTier for the specified ERC20 token\\n  /// @dev Use this method in conjunction with takerDiscountTiers(tier) to get the takerDiscount percent\\n  /// @param _tokenAddress Address of the ERC20 token\\n  /// @return takerDiscountTier that the specified ERC20 belongs to\\n  function getTokenTakerDiscountTier(address _tokenAddress) public view returns(uint8) {\\n    return tokens[_tokenAddress].takerDiscountTier;\\n  }\\n\\n  /// @notice Allows makers to specify a different address for takers to send ETH to in exchange for ERC20 tokens\\n  /// @dev This needs to be called by the maker before the sweepDust of approved tokens takes place\\n  /// @param _destinationAddress The target address to receive distribution amount from taker, if not set will send to maker address\\n  function setDestinationAddress(address _destinationAddress) external {\\n    if (_destinationAddress == address(0))\\n      revert ZeroAddress();\\n    destinations[msg.sender] = payable(_destinationAddress);\\n  }\\n\\n  /// @notice Set the token decimal field for the specified ERC20 token\\n  /// @dev The decimals field should be filled via the token contract decimals() method on token setup\\n  /// @dev If the decimals field is incorrect or not filled properly this method can be used to set it\\n  /// @param _tokenAddress Address of ERC20 token to update decimals field for\\n  /// @param _decimals The decimal value for the specified ERC20 token (valid range: 0-18)\\n  function setTokenDecimals(address _tokenAddress, uint8 _decimals) external onlyOwner {\\n    if (_tokenAddress == address(0))\\n      revert ZeroAddress();\\n    tokens[_tokenAddress].decimals = _decimals;\\n  }\\n\\n  /// @notice Change the taker fee tier for the specified ERC20 token\\n  /// @dev Tokens start in the default taker fee tier (0) but tokens can be switched to low (1) or high (2) fee tiers\\n  /// @param _tokenAddress Address of the ERC20 token\\n  /// @param _tier Tier to assign to specified ERC20 token, must be a valid tier (non zero taker fee value in takerDiscountTiers)\\n  function setTokenTakerDiscountTier(address _tokenAddress, uint8 _tier) external onlyOwner {\\n    if (_tokenAddress == address(0))\\n      revert ZeroAddress();\\n    if (takerDiscountTiers[_tier] == 0)\\n      revert OutOfRange(_tier);\\n    tokens[_tokenAddress].takerDiscountTier = _tier;\\n  }\\n\\n  /// @notice Used to calculate the discount percent given to the taker bot for sweeping tokens\\n  /// @dev This method can be used to add a new taker fee tier or adjust existing tier value\\n  /// @param _takerDiscountPercent Percent * 100, 100% == 10000, 50% == 5000 (valid range: 1-10000)\\n  /// @param _tier Tier to update\\n  function setTakerDiscountPercent(uint256 _takerDiscountPercent, uint8 _tier) external onlyOwner {\\n    if (_takerDiscountPercent == 0 || _takerDiscountPercent > MAX_TAKER_DISCOUNT_PCT)\\n      revert OutOfRange(_takerDiscountPercent);\\n    takerDiscountTiers[_tier] = _takerDiscountPercent;\\n  }\\n\\n  /// @notice Set the percent that the taker bot pays out to the protocol in ETH\\n  /// @dev Protocol fee is calculated by taking the total ETH value of tokens multiplied by protocolFee\\n  /// @param _protocolFeePercent Percent * 100, 100% == 10000, 50% == 5000 (valid range: 0-5000)\\n  function setProtocolFeePercent(uint256 _protocolFeePercent) external onlyOwner {\\n    if (_protocolFeePercent > MAX_PROTOCOL_FEE_PCT)\\n      revert OutOfRange(_protocolFeePercent);\\n    protocolFee = _protocolFeePercent;\\n  }\\n\\n  /// @notice Change the address of the protocol wallet\\n  /// @dev Split for payout of protocolWallet is determined by protocolPayoutSplit value\\n  /// @param _protocolWallet Address where the contract will send protocol split of collected fees to\\n  function setProtocolWallet(address payable _protocolWallet) external onlyOwner {\\n    if (_protocolWallet == address(0))\\n      revert ZeroAddress();\\n    protocolWallet = _protocolWallet;\\n  }\\n\\n  /// @notice Change the address of the governor wallet\\n  /// @dev Split for payout of governorWallet is determined by sending balance left after protocolWallet is paid\\n  /// @param _governorWallet Address where the contract will send governor split of collected fees to\\n  function setGovernorWallet(address payable _governorWallet) external onlyOwner {\\n    if (_governorWallet == address(0))\\n      revert ZeroAddress();\\n    governorWallet = _governorWallet;\\n  }\\n\\n  /// @notice Sets the percentage of protocol fees that are sent to protocol wallet\\n  /// @dev Protocol fees are split between protocolWallet & governorWallet\\n  /// @dev Setting this to 10000 (100%) sends all fees to protocolWallet\\n  /// @dev Setting this to 0 (0%) sends all fees to governorWallet\\n  /// @param _protocolPayoutSplitPercent Percent * 100, 100% == 10000, 50% == 5000 (valid range: 0-10000)\\n  function setProtocolPayoutSplit(uint256 _protocolPayoutSplitPercent) external onlyOwner {\\n    if (_protocolPayoutSplitPercent > MAX_PROTOCOL_PAYOUT_SPLIT_PCT)\\n      revert OutOfRange(_protocolPayoutSplitPercent);\\n    protocolPayoutSplit = _protocolPayoutSplitPercent;\\n  }\\n\\n  /// @notice Adds or removes addresses from the trusted signer list\\n  /// @dev Addresses that are set to true in Trustus.isTrusted mapping are allowed to sign offchain price packets\\n  /// @param _trustedProviderAddress Address to add/remove from the isTrusted list used for offchain signing\\n  function toggleIsTrusted(address _trustedProviderAddress) external onlyOwner {\\n    if (_trustedProviderAddress == address(0))\\n      revert ZeroAddress();\\n    bool _isTrusted = isTrusted[_trustedProviderAddress] ? false : true;\\n    _setIsTrusted(_trustedProviderAddress, _isTrusted);\\n  }\\n\\n  /// @notice Checks if specified address is a trusted signer\\n  /// @dev A getter function which can be used to see if address is in the internal isTrusted mapping\\n  /// @param _trustedProviderAddress Address to check against isTrusted mapping\\n  /// @return True if address is in isTrusted mapping, false otherwise\\n  function getIsTrusted(address _trustedProviderAddress) external view returns(bool) {\\n    return isTrusted[_trustedProviderAddress];\\n  }\\n\\n  /// @notice Turns on/off the taker bot whitelist\\n  /// @dev If this is turned on only whitelisted addresses will be able to run the sweepDust method\\n  function toggleSweepWhitelist() external onlyOwner {\\n    sweepWhitelistOn = sweepWhitelistOn ? false : true;\\n  }\\n\\n  /// @notice Adds or removes addresses from taker bot whitelist\\n  /// @dev Get the status of whitelisted addresses using sweepWhitelist(address)\\n  /// @param _whitelistAddress Address of taker bot to whitelist\\n  function toggleSweepWhitelistAddress(address _whitelistAddress) external onlyOwner {\\n    if (_whitelistAddress == address(0))\\n      revert ZeroAddress();\\n    sweepWhitelist[_whitelistAddress] = sweepWhitelist[_whitelistAddress] ? false : true;\\n  }\\n\\n  /// @notice Use this method to pay out accumulated protocol fees\\n  /// @dev ETH protocol fees stored in contract are split between protocolWallet & governorWallet based on protocolPayoutSplit\\n  function payoutProtocolFees() external nonReentrant {\\n    uint256 balance = address(this).balance;\\n    if (balance <= 0)\\n      revert NoBalance();\\n    // Protocol Split\\n    uint256 protocolSplit = (balance * protocolPayoutSplit) / 1e4;\\n    if (protocolSplit > 0)\\n      SafeTransferLib.safeTransferETH(protocolWallet, protocolSplit);\\n    // Governor Split\\n    uint256 governorSplit = address(this).balance;\\n    if (governorSplit > 0)\\n      SafeTransferLib.safeTransferETH(governorWallet, governorSplit);\\n    emit ProtocolPayout(protocolSplit, governorSplit);\\n  }\\n\\n  /// @notice Used to withdraw any ERC20 tokens that have been sent to contract\\n  /// @dev No ERC20 tokens should be sent but this method prevents tokens being locked in contract\\n  /// @param _tokenAddress Address of token to be withdrawn from contract\\n  function withdrawToken(address _tokenAddress) external onlyOwner {\\n    uint256 tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\\n    if (tokenBalance <= 0)\\n      revert NoBalance();\\n    ERC20(_tokenAddress).safeTransfer(msg.sender, tokenBalance);\\n  }\\n\\n  receive() external payable {}\\n  fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/Trustus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\n/// @title Trustus\\n/// @author zefram.eth\\n/// @notice Trust-minimized method for accessing offchain data onchain\\nabstract contract Trustus {\\n    /// -----------------------------------------------------------------------\\n    /// Structs\\n    /// -----------------------------------------------------------------------\\n\\n    /// @param v Part of the ECDSA signature\\n    /// @param r Part of the ECDSA signature\\n    /// @param s Part of the ECDSA signature\\n    /// @param request Identifier for verifying the packet is what is desired\\n    /// , rather than a packet for some other function/contract\\n    /// @param deadline The Unix timestamp (in seconds) after which the packet\\n    /// should be rejected by the contract\\n    /// @param payload The payload of the packet\\n    struct TrustusPacket {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes32 request;\\n        uint256 deadline;\\n        bytes payload;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n\\n    error Trustus__InvalidPacket();\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable parameters\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The chain ID used by EIP-712\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    /// @notice The domain separator used by EIP-712\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Records whether an address is trusted as a packet provider\\n    /// @dev provider => value\\n    mapping(address => bool) internal isTrusted;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// Will revert if the packet is invalid.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    modifier verifyPacket(bytes32 request, TrustusPacket calldata packet) {\\n        if (!_verifyPacket(request, packet)) revert Trustus__InvalidPacket();\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor() {\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Packet verification\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Verifies whether a packet is valid and returns the result.\\n    /// @dev The deadline, request, and signature are verified.\\n    /// @param request The identifier for the requested payload\\n    /// @param packet The packet provided by the offchain data provider\\n    /// @return success True if the packet is valid, false otherwise\\n    function _verifyPacket(bytes32 request, TrustusPacket calldata packet)\\n    internal\\n    virtual\\n    returns (bool success)\\n    {\\n        // verify deadline\\n        if (block.timestamp > packet.deadline) return false;\\n\\n        // verify request\\n        if (request != packet.request) return false;\\n\\n        // verify signature\\n        address recoveredAddress = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            keccak256(\\n                                \\\"VerifyPacket(bytes32 request,uint256 deadline,bytes payload)\\\"\\n                            ),\\n                            packet.request,\\n                            packet.deadline,\\n                            packet.payload\\n                        )\\n                    )\\n                )\\n            ),\\n            packet.v,\\n            packet.r,\\n            packet.s\\n        );\\n        return (recoveredAddress != address(0)) && isTrusted[recoveredAddress];\\n    }\\n\\n    /// @notice Sets the trusted status of an offchain data provider.\\n    /// @param signer The data provider's ECDSA public key as an Ethereum address\\n    /// @param isTrusted_ The desired trusted status to set\\n    function _setIsTrusted(address signer, bool isTrusted_) internal virtual {\\n        isTrusted[signer] = isTrusted_;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-712 compliance\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The domain separator used by EIP-712\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n        block.chainid == INITIAL_CHAIN_ID\\n        ? INITIAL_DOMAIN_SEPARATOR\\n        : _computeDomainSeparator();\\n    }\\n\\n    /// @notice Computes the domain separator used by EIP-712\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n        keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(\\\"Trustus\\\"),\\n                keccak256(\\\"1\\\"),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_protocolWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_governorWallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_takerDiscountTiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPayoutSplitPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSweepableOrders\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NoTokenPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"name\":\"OutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Trustus__InvalidPacket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governorSplit\",\"type\":\"uint256\"}],\"name\":\"ProtocolPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_FEE_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_PAYOUT_SPLIT_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWEEP_ORDER_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAKER_DISCOUNT_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_OVERAGE_RETURN_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTUS_REQUEST_VALUE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"destinations\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedProviderAddress\",\"type\":\"address\"}],\"name\":\"getIsTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenTakerDiscountTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPayoutSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destinationAddress\",\"type\":\"address\"}],\"name\":\"setDestinationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_governorWallet\",\"type\":\"address\"}],\"name\":\"setGovernorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPayoutSplitPercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolPayoutSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_protocolWallet\",\"type\":\"address\"}],\"name\":\"setProtocolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_takerDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"setTakerDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"setTokenTakerDiscountTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setupToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"makers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct Trustus.TrustusPacket\",\"name\":\"packet\",\"type\":\"tuple\"}],\"name\":\"sweepDust\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweepWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepWhitelistOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"takerDiscountTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedProviderAddress\",\"type\":\"address\"}],\"name\":\"toggleIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSweepWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"name\":\"toggleSweepWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DustSweeper", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dfdda6cea6068c44c83b5239eb3e5b007a03f0a0000000000000000000000000dfdda6cea6068c44c83b5239eb3e5b007a03f0a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000bb8", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}