{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/dataHelpers/GovernanceDataHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PayloadsControllerUtils} from '../payloads/PayloadsControllerUtils.sol';\\nimport {IGovernanceDataHelper} from './interfaces/IGovernanceDataHelper.sol';\\nimport {IGovernanceCore} from '../../interfaces/IGovernanceCore.sol';\\nimport {VotingPortal} from '../VotingPortal.sol';\\n\\n/**\\n * @title GovernanceDataHelper\\n * @author BGD Labs\\n * @notice this contract contains the logic to get the proposals data and to retreive the voting configs.\\n */\\ncontract GovernanceDataHelper is IGovernanceDataHelper {\\n  /// @inheritdoc IGovernanceDataHelper\\n  function getProposalsData(\\n    IGovernanceCore govCore,\\n    uint256 from, // if from is 0 then uses the latest id\\n    uint256 to, // if to is 0 then will be ignored\\n    uint256 pageSize\\n  ) external view returns (Proposal[] memory) {\\n    if (from == 0) {\\n      from = govCore.getProposalsCount();\\n      if (from == 0) {\\n        return new Proposal[](0);\\n      }\\n    } else {\\n      from += 1;\\n    }\\n    require(from >= to, 'from >= to');\\n    uint256 tempTo = from > pageSize ? from - pageSize : 0;\\n    if (tempTo > to) {\\n      to = tempTo;\\n    }\\n    pageSize = from - to;\\n    Proposal[] memory proposals = new Proposal[](pageSize);\\n    IGovernanceCore.Proposal memory proposalData;\\n\\n    for (uint256 i = 0; i < pageSize; i++) {\\n      proposalData = govCore.getProposal(from - i - 1);\\n      VotingPortal votingPortal = VotingPortal(proposalData.votingPortal);\\n      proposals[i] = Proposal({\\n        id: from - i - 1,\\n        votingChainId: votingPortal.VOTING_MACHINE_CHAIN_ID(),\\n        proposalData: proposalData\\n      });\\n    }\\n\\n    return proposals;\\n  }\\n\\n  /// @inheritdoc IGovernanceDataHelper\\n  function getConstants(\\n    IGovernanceCore govCore,\\n    PayloadsControllerUtils.AccessControl[] calldata accessLevels\\n  ) external view returns (Constants memory) {\\n    VotingConfig[] memory votingConfigs = new VotingConfig[](\\n      accessLevels.length\\n    );\\n    IGovernanceCore.VotingConfig memory votingConfig;\\n\\n    for (uint256 i = 0; i < accessLevels.length; i++) {\\n      votingConfig = govCore.getVotingConfig(accessLevels[i]);\\n      votingConfigs[i] = VotingConfig({\\n        accessLevel: accessLevels[i],\\n        config: votingConfig\\n      });\\n    }\\n\\n    uint256 precisionDivider = govCore.PRECISION_DIVIDER();\\n    uint256 cooldownPeriod = govCore.COOLDOWN_PERIOD();\\n    uint256 expirationTime = govCore.PROPOSAL_EXPIRATION_TIME();\\n\\n    return\\n      Constants({\\n        votingConfigs: votingConfigs,\\n        precisionDivider: precisionDivider,\\n        cooldownPeriod: cooldownPeriod,\\n        expirationTime: expirationTime,\\n        cancellationFee: govCore.getCancellationFee()\\n      });\\n  }\\n\\n  /// @inheritdoc IGovernanceDataHelper\\n  function getRepresentationData(\\n    IGovernanceCore govCore,\\n    address wallet,\\n    uint256[] calldata chainIds\\n  ) external view returns (Representatives[] memory, Represented[] memory) {\\n    Representatives[] memory representatives = new Representatives[](\\n      chainIds.length\\n    );\\n    Represented[] memory representedVoters = new Represented[](chainIds.length);\\n\\n    for (uint256 i = 0; i < chainIds.length; i++) {\\n      representatives[i] = Representatives({\\n        chainId: chainIds[i],\\n        representative: govCore.getRepresentativeByChain(wallet, chainIds[i])\\n      });\\n      representedVoters[i] = Represented({\\n        chainId: chainIds[i],\\n        votersRepresented: govCore.getRepresentedVotersByChain(\\n          wallet,\\n          chainIds[i]\\n        )\\n      });\\n    }\\n\\n    return (representatives, representedVoters);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/payloads/PayloadsControllerUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary PayloadsControllerUtils {\\n  /// @notice enum with supported access levels\\n  enum AccessControl {\\n    Level_null, // to not use 0\\n    Level_1, // LEVEL_1 - short executor before, listing assets, changes of assets params, updates of the protocol etc\\n    Level_2 // LEVEL_2 - long executor before, payloads controller updates\\n  }\\n\\n  /**\\n   * @notice Object containing the necessary payload information.\\n   * @param chain\\n   * @param accessLevel\\n   * @param payloadsController\\n   * @param payloadId\\n   */\\n  struct Payload {\\n    uint256 chain;\\n    AccessControl accessLevel;\\n    address payloadsController; // address which holds the logic to execute after success proposal voting\\n    uint40 payloadId; // number of the payload placed to payloadsController, max is: ~10\u00b9\u00b2\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/dataHelpers/interfaces/IGovernanceDataHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PayloadsControllerUtils} from '../../payloads/PayloadsControllerUtils.sol';\\nimport {IGovernanceCore} from '../../../interfaces/IGovernanceCore.sol';\\n\\n/**\\n * @title IGovernanceDataHelper\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the GovernanceDataHelper contract\\n */\\ninterface IGovernanceDataHelper {\\n  /**\\n   * @notice object containing representative for chainId\\n   * @param chainId id of the chain to get the representative from\\n   * @param representative address that represents a voter\\n   */\\n  struct Representatives {\\n    uint256 chainId;\\n    address representative;\\n  }\\n\\n  /**\\n   * @notice object containing the represented voters\\n   * @param chainId id of the chain to get the represented voters from\\n   * @param votersRepresented array of addresses of the voters that are represented\\n   */\\n  struct Represented {\\n    uint256 chainId;\\n    address[] votersRepresented;\\n  }\\n\\n  /**\\n   * @notice object containing proposal information\\n   * @param id numeric id of a proposal\\n   * @param votingChainId id of the chain where the proposal is voted on\\n   * @param proposalData full data of the proposal\\n   */\\n  struct Proposal {\\n    uint256 id;\\n    uint256 votingChainId;\\n    IGovernanceCore.Proposal proposalData;\\n  }\\n\\n  /**\\n   * @notice Object storing the vote configuration for a specific access level\\n   * @param accessLevel access level of the configuration\\n   * @param config voting configuration\\n   */\\n  struct VotingConfig {\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    IGovernanceCore.VotingConfig config;\\n  }\\n\\n  /**\\n   * @notice Object storing the vote configuration for a specific access level\\n   * @param votingConfigs voting configuration\\n   * @param precisionDivider internal precision\\n   * @param cooldownPeriod time in seconds between proposal creation and start of voting\\n   * @param expirationTime time in seconds when proposal will be expired\\n   * @param cancellationFee amount to pay governance if proposal gets cancelled\\n   */\\n  struct Constants {\\n    VotingConfig[] votingConfigs;\\n    uint256 precisionDivider;\\n    uint256 cooldownPeriod;\\n    uint256 expirationTime;\\n    uint256 cancellationFee;\\n  }\\n\\n  /**\\n   * @notice Method to get the representation data of a wallet for a chain\\n   * @param govCore instance of the governance contract\\n   * @param wallet address to get the representation data from\\n   * @param chainIds array of ids of the chain to get the representation data from\\n   * @return array of representative by chain, array of voters represented by chain\\n   */\\n  function getRepresentationData(\\n    IGovernanceCore govCore,\\n    address wallet,\\n    uint256[] calldata chainIds\\n  ) external view returns (Representatives[] memory, Represented[] memory);\\n\\n  /**\\n   * @notice method to get proposals list\\n   * @param govCore instance of the governance contract\\n   * @param from proposal number to start fetching from\\n   * @param to proposal number to end fetching\\n   * @param pageSize size of the page to get\\n   * @return list of the proposals\\n   */\\n  function getProposalsData(\\n    IGovernanceCore govCore,\\n    uint256 from,\\n    uint256 to,\\n    uint256 pageSize\\n  ) external view returns (Proposal[] memory);\\n\\n  /**\\n   * @notice method to get voting config and governance setup constants\\n   * @param govCore instance of the governance contract\\n   * @param accessLevels list of the access levels to retrieve voting configs for\\n   * @return list of the voting configs and values of the governance constants\\n   */\\n  function getConstants(\\n    IGovernanceCore govCore,\\n    PayloadsControllerUtils.AccessControl[] calldata accessLevels\\n  ) external view returns (Constants memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernanceCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PayloadsControllerUtils} from '../contracts/payloads/PayloadsControllerUtils.sol';\\nimport {IGovernancePowerStrategy} from './IGovernancePowerStrategy.sol';\\nimport {IVotingMachineWithProofs} from '../contracts/voting/interfaces/IVotingMachineWithProofs.sol';\\nimport {EnumerableSet} from 'openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol';\\n\\n/**\\n * @title IGovernanceCore\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the GovernanceCore contract\\n */\\ninterface IGovernanceCore {\\n  /**\\n   * @notice Object with the necessary information of a representative\\n   * @param representative address that represents the voter\\n   * @param chainId id of the chain where the representative is on\\n   */\\n  struct RepresentativeInput {\\n    address representative;\\n    uint256 chainId;\\n  }\\n\\n  /**\\n   * @notice Object storing the vote configuration for a specific access level\\n   * @param coolDownBeforeVotingStart number of seconds indicating how much time should pass before proposal will be moved to vote\\n   * @param votingDuration number of seconds indicating the duration of a vote\\n   * @param yesThreshold minimum number of yes votes needed for a proposal to pass.\\n            FOR VOTES > YES THRESHOLD\\n            we consider that this param in case of AAVE don't need decimal places\\n   * @param yesNoDifferential number of for votes that need to be bigger than against votes to pass a proposal.\\n            FOR VOTES - AGAINST VOTES > YES NO DIFFERENTIAL\\n            we consider that this param in case of AAVE don't need decimal places\\n   * @param minPropositionPower the minimum needed power to create a proposal.\\n            we consider that this param in case of AAVE don't need decimal places\\n   */\\n  struct VotingConfig {\\n    uint24 coolDownBeforeVotingStart;\\n    uint24 votingDuration;\\n    uint56 yesThreshold;\\n    uint56 yesNoDifferential;\\n    uint56 minPropositionPower;\\n  }\\n\\n  /**\\n   * @notice object storing the input parameters of a voting configuration\\n   * @param accessLevel number of access level needed to execute a proposal in this settings\\n   * @param coolDownBeforeVotingStart number of seconds indicating the time that must pass from proposal creation for\\n            the voting to be activated\\n   * @param votingDuration number of seconds indicating the duration of a vote\\n   * @param yesThreshold minimum number of yes votes needed for a proposal to pass.\\n            FOR VOTES > YES THRESHOLD\\n            in normal units with 18 decimals\\n   * @param yesNoDifferential number of for votes that need to be bigger than against votes to pass a proposal.\\n            FOR VOTES - AGAINST VOTES > YES NO DIFFERENTIAL\\n            in normal units with 18 decimals\\n   * @param minPropositionPower the minimum needed power to create a proposal.\\n            in normal units with 18 decimals\\n   */\\n  struct SetVotingConfigInput {\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    uint24 coolDownBeforeVotingStart;\\n    uint24 votingDuration;\\n    uint256 yesThreshold;\\n    uint256 yesNoDifferential;\\n    uint256 minPropositionPower;\\n  }\\n\\n  /**\\n   * @notice enum storing the different states of a proposal\\n   * @dev State enum defines the state machine of a proposal so the order on which the state is defined is important.\\n          Check logic correctness if new states are added / removed\\n   */\\n  enum State {\\n    Null, // proposal does not exists\\n    Created, // created, waiting for a cooldown to initiate the balances snapshot\\n    Active, // balances snapshot set, voting in progress\\n    Queued, // voting results submitted, but proposal is under grace period when guardian can cancel it\\n    Executed, // results sent to the execution chain(s)\\n    Failed, // voting was not successful\\n    Cancelled, // got cancelled by guardian, or because proposition power of creator dropped below allowed minimum\\n    Expired\\n  }\\n\\n  /**\\n   * @notice object storing all the information of a proposal including the different states in time that can have\\n   * @param state current state of the proposal\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param votingDuration number of seconds indicating the duration of a vote. max is: 16'777'216 (ie 194.18 days)\\n   * @param creationTime timestamp in seconds of when the proposal was created. max is: 1.099511628\u00d710\u00b9\u00b2 (ie 34'865 years)\\n   * @param votingActivationTime timestamp in seconds of when the voting activates for the proposal\\n   * @param queuingTime timestamp in seconds of when the proposal was queued\\n   * @param cancelTimestamp timestamp in seconds of when the proposal was canceled\\n   * @param creator address of the creator of the proposal\\n   * @param votingPortal address of the votingPortal used to communicate with the voting chain\\n   * @param snapshotBlockHash block hash of when the proposal was created, as to be able to get the correct balances on this specific block\\n   * @param ipfsHash ipfs has containing the proposal metadata information\\n   * @param forVotes number of votes in favor of the proposal\\n   * @param againstVotes number of votes against the proposal\\n   * @param cancellationFee amount in eth that will be retained if proposal is cancelled\\n   * @param payloads list of objects containing the payload information necessary for execution\\n   */\\n  struct Proposal {\\n    State state;\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    uint40 creationTime;\\n    uint24 votingDuration;\\n    uint40 votingActivationTime;\\n    uint40 queuingTime;\\n    uint40 cancelTimestamp;\\n    address creator;\\n    address votingPortal;\\n    bytes32 snapshotBlockHash;\\n    bytes32 ipfsHash;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 cancellationFee;\\n    PayloadsControllerUtils.Payload[] payloads;\\n  }\\n\\n  /**\\n   * @notice emitted when powerStrategy got updated\\n   * @param newPowerStrategy address of the new powerStrategy\\n   */\\n  event PowerStrategyUpdated(address indexed newPowerStrategy);\\n\\n  /**\\n   * @notice emitted when one of the _votingConfigs got updated\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param votingDuration duration of the voting period in seconds\\n   * @param coolDownBeforeVotingStart time in seconds between proposal creation and voting activation\\n   * @param yesThreshold min amount of yes votes needed to pass a proposal\\n   * @param yesNoDifferential minimal difference between you and no votes for proposal to pass\\n   * @param minPropositionPower minimal proposition power of a user to be able to create proposal\\n   */\\n  event VotingConfigUpdated(\\n    PayloadsControllerUtils.AccessControl indexed accessLevel,\\n    uint24 votingDuration,\\n    uint24 coolDownBeforeVotingStart,\\n    uint256 yesThreshold,\\n    uint256 yesNoDifferential,\\n    uint256 minPropositionPower\\n  );\\n\\n  /**\\n   * @notice emitted when a proposal is created.\\n   * @param proposalId id of the proposal\\n   * @param creator address of the creator of the proposal\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param ipfsHash ipfs has containing the proposal metadata information\\n   */\\n  event ProposalCreated(\\n    uint256 indexed proposalId,\\n    address indexed creator,\\n    PayloadsControllerUtils.AccessControl indexed accessLevel,\\n    bytes32 ipfsHash\\n  );\\n  /**\\n   * @notice emitted when voting is activated. Meaning that the vote configuration will be sent to voting machine\\n   * @param proposalId id of the proposal\\n   * @param snapshotBlockHash block hash of when the proposal was created, as to be able to get the correct balances on this specific block\\n   * @param votingDuration duration of the voting period in seconds\\n   */\\n  event VotingActivated(\\n    uint256 indexed proposalId,\\n    bytes32 indexed snapshotBlockHash,\\n    uint24 votingDuration\\n  );\\n\\n  /**\\n   * @notice emitted when proposal change state to Queued\\n   * @param proposalId id of the proposal\\n   * @param votesFor votes for proposal\\n   * @param votesAgainst votes against proposal\\n   */\\n  event ProposalQueued(\\n    uint256 indexed proposalId,\\n    uint128 votesFor,\\n    uint128 votesAgainst\\n  );\\n\\n  /**\\n   * @notice emitted when proposal change state to Executed\\n   * @param proposalId id of the proposal\\n   */\\n  event ProposalExecuted(uint256 indexed proposalId);\\n\\n  /**\\n   * @notice emitted when proposal change state to Canceled\\n   * @param proposalId id of the proposal\\n   */\\n  event ProposalCanceled(uint256 indexed proposalId);\\n\\n  /**\\n   * @notice emitted when proposal change state to Failed\\n   * @param proposalId id of the proposal\\n   * @param votesFor votes for proposal\\n   * @param votesAgainst votes against proposal\\n   */\\n  event ProposalFailed(\\n    uint256 indexed proposalId,\\n    uint128 votesFor,\\n    uint128 votesAgainst\\n  );\\n\\n  /**\\n   * @notice emitted when a voting machine gets updated\\n   * @param votingPortal address of the voting portal updated\\n   * @param approved boolean indicating if a voting portal has been added or removed\\n   */\\n  event VotingPortalUpdated(\\n    address indexed votingPortal,\\n    bool indexed approved\\n  );\\n\\n  /**\\n   * @notice emitted when a payload is successfully sent to the execution chain\\n   * @param proposalId id of the proposal containing the payload sent for execution\\n   * @param payloadId id of the payload sent for execution\\n   * @param payloadsController address of the payloads controller on the execution chain\\n   * @param chainId id of the execution chain\\n   * @param payloadNumberOnProposal number of payload sent for execution, from the number of payloads contained in proposal\\n   * @param numberOfPayloadsOnProposal number of payloads that are in the proposal\\n   */\\n  event PayloadSent(\\n    uint256 indexed proposalId,\\n    uint40 payloadId,\\n    address indexed payloadsController,\\n    uint256 indexed chainId,\\n    uint256 payloadNumberOnProposal,\\n    uint256 numberOfPayloadsOnProposal\\n  );\\n\\n  /**\\n   * @notice emitted when a vote is successfully sent to voting chain\\n   * @param proposalId id of the proposal the vote is for\\n   * @param voter address that wants to vote on a proposal\\n   * @param support indicates if vote is in favor or against the proposal\\n   * @param votingAssetsWithSlot list of token addresses with the base storage slot to use for the vote\\n   */\\n  event VoteForwarded(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    bool indexed support,\\n    IVotingMachineWithProofs.VotingAssetWithSlot[] votingAssetsWithSlot\\n  );\\n\\n  /**\\n   * @notice emitted when the cancellation fee is updated\\n   * @param cancellationFee amount of the new cancellation fee\\n   */\\n  event CancellationFeeUpdated(uint256 cancellationFee);\\n\\n  /**\\n   * @notice emitted when the cancellation fee is redeemed\\n   * @param proposalId id of the proposal the fee was redeemed from\\n   * @param to address that will receive the cancellation fee\\n   * @param cancellationFee amount of the cancellation fee redeemed\\n   * @param success flag indicating if the transfer was successful or not\\n   */\\n  event CancellationFeeRedeemed(\\n    uint256 indexed proposalId,\\n    address indexed to,\\n    uint256 cancellationFee,\\n    bool indexed success\\n  );\\n\\n  /**\\n   * @notice emitted when a voter updates its representative\\n   * @param voter address of the voter that updates\\n   * @param representative address of the chosen representative\\n   * @param chainId id of the chain where representative is representing the voter on\\n   */\\n  event RepresentativeUpdated(\\n    address indexed voter,\\n    address indexed representative,\\n    uint256 indexed chainId\\n  );\\n\\n  /**\\n   * @notice method to get the Cancellation Fee Collector address\\n   * @return cancellation fee collector address\\n   */\\n  function CANCELLATION_FEE_COLLECTOR() external view returns (address);\\n\\n  /**\\n   * @notice method to update the cancellation fee\\n   * @param cancellationFee the fee amount to collateralize against a proposal cancellation\\n   */\\n  function updateCancellationFee(uint256 cancellationFee) external;\\n\\n  /**\\n   * @notice method to get the cancellation fee\\n   * @return cancellation fee amount\\n   */\\n  function getCancellationFee() external view returns (uint256);\\n\\n  /**\\n   * @notice method to redeem the cancellation fee from a proposal\\n   * @param proposalIds array of ids of the proposals to redeem the cancellation fee from\\n   */\\n  function redeemCancellationFee(uint256[] calldata proposalIds) external;\\n\\n  /**\\n   * @notice method to get the number of registered voting portals\\n   * @return number of registered voting portals\\n   */\\n  function getVotingPortalsCount() external view returns (uint256);\\n\\n  /**\\n   * @notice method to approve new voting machines\\n   * @param votingPortals array of voting portal addresses to approve\\n   */\\n  function addVotingPortals(address[] calldata votingPortals) external;\\n\\n  /**\\n   * @notice method to add a new voting portal\\n   * @param votingPortal address of the new voting portal\\n   * @dev This method is only callable by the Guardian.\\n   * @dev This method is only callable when there are no voting portals registered. Its rationale is for the Guardian\\n          to be able to \\\"rescue\\\" the system in case all voting portals were removed by mistake. This is needed because\\n          to add a new voting portal a full governance flow is required, and without the portal, the system would be bricked.\\n          To limit the Guardian's power, can only happen if there are no voting portals registered, and the guardian\\n          could only add one voting portal.\\n   */\\n  function rescueVotingPortal(address votingPortal) external;\\n\\n  /**\\n   * @notice method to remove an accepted voting portal.\\n   * @param votingPortals list of addresses of the voting machines that are no longer valid\\n   * @dev removing a voting portal effectively removes a voting machine\\n   */\\n  function removeVotingPortals(address[] calldata votingPortals) external;\\n\\n  /**\\n   * @notice creates a proposal, with configuration specified in VotingConfig corresponding to the accessLevel\\n   * @param payloads which user propose to vote for\\n   * @param votingPortal address of the contract which will bootstrap voting, and provide results in the end\\n   * @param ipfsHash ipfs hash of a document with proposal description\\n   * @return created proposal ID\\n   */\\n  function createProposal(\\n    PayloadsControllerUtils.Payload[] calldata payloads,\\n    address votingPortal,\\n    bytes32 ipfsHash\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @notice executes a proposal, can be called by anyone if proposal in Queued state\\n   * @notice and passed more then COOLDOWN_PERIOD seconds after proposal entered this state\\n   * @param proposalId id of the proposal\\n   */\\n  function executeProposal(uint256 proposalId) external;\\n\\n  /**\\n   * @notice cancels a proposal, can be initiated by guardian,\\n   * @notice or if proposition power of proposal creator will go below minPropositionPower specified in VotingConfig\\n   * @param proposalId id of the proposal\\n   */\\n  function cancelProposal(uint256 proposalId) external;\\n\\n  /**\\n   * @notice gets the state of a proposal\\n   * @param proposalId id of the proposal\\n   * @return state of the proposal\\n   */\\n  function getProposalState(uint256 proposalId) external view returns (State);\\n\\n  /**\\n   * @notice method to set a new powerStrategy contract\\n   * @param newPowerStrategy address of the new contract containing the voting a voting strategy\\n   */\\n\\n  function setPowerStrategy(IGovernancePowerStrategy newPowerStrategy) external;\\n\\n  /**\\n   * @notice method to set the voting configuration for a determined access level\\n   * @param votingConfigs object containing configuration for an access level\\n   */\\n  function setVotingConfigs(\\n    SetVotingConfigInput[] calldata votingConfigs\\n  ) external;\\n\\n  /**\\n   * @notice method to get the voting configuration from an access level\\n   * @param accessLevel level for which to get the configuration of a vote\\n   * @return the voting configuration assigned to the specified accessLevel\\n   */\\n  function getVotingConfig(\\n    PayloadsControllerUtils.AccessControl accessLevel\\n  ) external view returns (VotingConfig memory);\\n\\n  /**\\n   * @notice method to get the reasonably achievable voting participation, taking into total supply, and market situation\\n   * @return maximum voting participation in wei\\n   */\\n  function ACHIEVABLE_VOTING_PARTICIPATION() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the cool down period between queuing and execution\\n   * @return time in seconds\\n   */\\n  function COOLDOWN_PERIOD() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the minimum voting duration time in seconds\\n   * @return time in seconds\\n   */\\n  function MIN_VOTING_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the precision divider used to remove unneeded decimals\\n   * @return decimals of 1 ether (18)\\n   */\\n  function PRECISION_DIVIDER() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the the voting tokens cap\\n   * @return cap for the voting tokens\\n   * @dev This cap is used to limit the number of voting tokens, so as to not drain the bridging funds\\n          with a message too big.\\n   */\\n  function VOTING_TOKENS_CAP() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the expiration time from creation from which the proposal will be invalid\\n   * @return time in seconds\\n   */\\n  function PROPOSAL_EXPIRATION_TIME() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the name of the contract\\n   * @return name string\\n   */\\n  function NAME() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the proposal identified by passed id\\n   * @param proposalId id of the proposal to get the information of\\n   * @return proposal object containing all the information\\n   */\\n  function getProposal(\\n    uint256 proposalId\\n  ) external view returns (Proposal memory);\\n\\n  /**\\n   * @notice address of the current voting strategy to use on the governance\\n   * @return address of the voting strategy\\n   */\\n  function getPowerStrategy() external view returns (IGovernancePowerStrategy);\\n\\n  /**\\n   * @notice proposals counter.\\n   * @return the current number proposals created\\n   */\\n  function getProposalsCount() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get if a voting portal is approved by the governance\\n   * @param votingPortal address of the voting portal to check if approved\\n   * @return flag indicating the approval status of the voting portal\\n   */\\n  function isVotingPortalApproved(\\n    address votingPortal\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice method to queue a proposal for execution\\n   * @param proposalId the id of the proposal to queue\\n   * @param forVotes number of votes in favor of the proposal\\n   * @param againstVotes number of votes against of the proposal\\n   */\\n  function queueProposal(\\n    uint256 proposalId,\\n    uint128 forVotes,\\n    uint128 againstVotes\\n  ) external;\\n\\n  /**\\n   * @notice method to send proposal to votingMachine\\n   * @param proposalId id of the proposal to start the voting on\\n   */\\n  function activateVoting(uint256 proposalId) external;\\n\\n  /**\\n   * @notice method to get the representative of a voter on a chain\\n   * @param voter address of the voter\\n   * @param chainId id of the chain to get the representative from\\n   * @return address of the representative of the voter on chainId\\n   */\\n  function getRepresentativeByChain(\\n    address voter,\\n    uint256 chainId\\n  ) external view returns (address);\\n\\n  /**\\n   * @notice method to update the representative of a voter on certain chain.\\n   * @param representatives Array of objects with the representative information\\n   */\\n  function updateRepresentativesForChain(\\n    RepresentativeInput[] calldata representatives\\n  ) external;\\n\\n  /**\\n   * @notice method to get the voters a representative is representing\\n   * @param representative address of the representative\\n   * @param chainId id of the chain to search for represented voters\\n   */\\n  function getRepresentedVotersByChain(\\n    address representative,\\n    uint256 chainId\\n  ) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/contracts/VotingPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ICrossChainController} from 'aave-crosschain-infra/contracts/interfaces/ICrossChainController.sol';\\nimport {IGovernanceCore} from '../interfaces/IGovernanceCore.sol';\\nimport {IVotingPortal, IBaseReceiverPortal} from '../interfaces/IVotingPortal.sol';\\nimport {Errors} from './libraries/Errors.sol';\\nimport {IVotingMachineWithProofs} from './voting/interfaces/IVotingMachineWithProofs.sol';\\nimport {Ownable} from 'solidity-utils/contracts/oz-common/Ownable.sol';\\n\\n/**\\n * @title VotingPortal\\n * @author BGD Labs\\n * @notice Contract with the knowledge on how to initialize a proposal voting and get the votes results,\\n           from a vote that happened on a different or same chain.\\n */\\ncontract VotingPortal is Ownable, IVotingPortal {\\n  /// @inheritdoc IVotingPortal\\n  address public immutable CROSS_CHAIN_CONTROLLER;\\n\\n  /// @inheritdoc IVotingPortal\\n  address public immutable GOVERNANCE;\\n\\n  /// @inheritdoc IVotingPortal\\n  address public immutable VOTING_MACHINE;\\n\\n  /// @inheritdoc IVotingPortal\\n  uint256 public immutable VOTING_MACHINE_CHAIN_ID;\\n\\n  // stores the gas limit for start voting bridging tx\\n  uint128 internal _startVotingGasLimit;\\n\\n  // proposalId => voter => has voted  -> saves the voters of every proposal that used this voting portal to send the vote\\n  mapping(uint256 => mapping(address => bool)) internal _proposalVoters;\\n\\n  /**\\n   * @param crossChainController address of current network message controller (cross chain controller or same chain controller)\\n   * @param governance address of the linked governance contract\\n   * @param votingMachine address where the proposal votes will happen. Can be same or different chain\\n   * @param startVotingGasLimit gas limit for \\\"Start voting\\\" bridging tx\\n   */\\n  constructor(\\n    address crossChainController,\\n    address governance,\\n    address votingMachine,\\n    uint256 votingMachineChainId,\\n    uint128 startVotingGasLimit,\\n    address owner\\n  ) {\\n    require(owner != address(0), Errors.INVALID_VOTING_PORTAL_OWNER);\\n    require(\\n      crossChainController != address(0),\\n      Errors.INVALID_VOTING_PORTAL_CROSS_CHAIN_CONTROLLER\\n    );\\n    require(governance != address(0), Errors.INVALID_VOTING_PORTAL_GOVERNANCE);\\n    require(\\n      votingMachine != address(0),\\n      Errors.INVALID_VOTING_PORTAL_VOTING_MACHINE\\n    );\\n    require(votingMachineChainId > 0, Errors.INVALID_VOTING_MACHINE_CHAIN_ID);\\n    CROSS_CHAIN_CONTROLLER = crossChainController;\\n    GOVERNANCE = governance;\\n    VOTING_MACHINE = votingMachine;\\n    VOTING_MACHINE_CHAIN_ID = votingMachineChainId;\\n\\n    _updateStartVotingGasLimit(startVotingGasLimit);\\n\\n    _transferOwnership(owner);\\n  }\\n\\n  /// @inheritdoc IBaseReceiverPortal\\n  /// @dev pushes the voting result and queues the proposal identified by proposalId\\n  function receiveCrossChainMessage(\\n    address originSender,\\n    uint256 originChainId,\\n    bytes memory message\\n  ) external {\\n    require(\\n      msg.sender == CROSS_CHAIN_CONTROLLER &&\\n        originSender == VOTING_MACHINE &&\\n        originChainId == VOTING_MACHINE_CHAIN_ID,\\n      Errors.WRONG_MESSAGE_ORIGIN\\n    );\\n\\n    try this.decodeMessage(message) returns (\\n      uint256 proposalId,\\n      uint128 forVotes,\\n      uint128 againstVotes\\n    ) {\\n      IGovernanceCore(GOVERNANCE).queueProposal(\\n        proposalId,\\n        forVotes,\\n        againstVotes\\n      );\\n\\n      bytes memory empty;\\n      emit VoteMessageReceived(\\n        originSender,\\n        originChainId,\\n        true,\\n        message,\\n        empty\\n      );\\n    } catch (bytes memory decodingError) {\\n      emit VoteMessageReceived(\\n        originSender,\\n        originChainId,\\n        false,\\n        message,\\n        decodingError\\n      );\\n    }\\n  }\\n\\n  /// @inheritdoc IVotingPortal\\n  function forwardStartVotingMessage(\\n    uint256 proposalId,\\n    bytes32 blockHash,\\n    uint24 votingDuration\\n  ) external {\\n    bytes memory message = abi.encode(proposalId, blockHash, votingDuration);\\n    _sendMessage(\\n      msg.sender,\\n      MessageType.Proposal,\\n      getStartVotingGasLimit(),\\n      message\\n    );\\n  }\\n\\n  /// @inheritdoc IVotingPortal\\n  function decodeMessage(\\n    bytes memory message\\n  ) external pure returns (uint256, uint128, uint128) {\\n    return abi.decode(message, (uint256, uint128, uint128));\\n  }\\n\\n  /// @inheritdoc IVotingPortal\\n  function setStartVotingGasLimit(uint128 gasLimit) external onlyOwner {\\n    _updateStartVotingGasLimit(gasLimit);\\n  }\\n\\n  /// @inheritdoc IVotingPortal\\n  function getStartVotingGasLimit() public view returns (uint128) {\\n    return _startVotingGasLimit;\\n  }\\n\\n  function _sendMessage(\\n    address caller,\\n    MessageType messageType,\\n    uint256 gasLimit,\\n    bytes memory message\\n  ) internal {\\n    require(caller == GOVERNANCE, Errors.CALLER_NOT_GOVERNANCE);\\n    bytes memory messageWithType = abi.encode(messageType, message);\\n\\n    ICrossChainController(CROSS_CHAIN_CONTROLLER).forwardMessage(\\n      VOTING_MACHINE_CHAIN_ID,\\n      VOTING_MACHINE,\\n      gasLimit,\\n      messageWithType\\n    );\\n  }\\n\\n  /**\\n   * @notice method to update the _startVotingGasLimit\\n   * @param gasLimit the new gas limit\\n   */\\n  function _updateStartVotingGasLimit(uint128 gasLimit) internal {\\n    _startVotingGasLimit = gasLimit;\\n    emit StartVotingGasLimitUpdated(gasLimit);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernancePowerStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IGovernancePowerStrategy\\n * @author BGD Labs\\n * @notice interface containing the methods definitions of the GovernancePowerStrategy contract\\n */\\ninterface IGovernancePowerStrategy {\\n  /**\\n * @notice method to get the full voting power of an user. This method is only use for consulting purposes.\\n             As its not used for voting calculations, it is not needed to force blockNumber - 1 to protect against\\n             FlashLoan attacks.\\n   * @param user address where we want to get the power from\\n   * @return full voting power of a user\\n   */\\n  function getFullVotingPower(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the full proposal power of an user. It is not needed to protect against FlashLoan\\n             attacks because once user returns the tokens (power) the proposal will get canceled as proposal creator\\n             will loose the proposition power.\\n   * @param user address where we want to get the power from\\n   * @return full proposition power of a user\\n   */\\n  function getFullPropositionPower(\\n    address user\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/interfaces/IVotingMachineWithProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\nimport {IVotingStrategy} from './IVotingStrategy.sol';\\n\\n/**\\n * @title IVotingMachine\\n * @author BGD Labs\\n * @notice interface containing the objects, events and method definitions of the VotingMachine contract\\n */\\ninterface IVotingMachineWithProofs {\\n  /**\\n   * @notice Object containing the signature parameters to be able to vote as a representative\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  struct SignatureParams {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  /**\\n   * @notice Object to use over submitVoteBySignature and in case of bridging for protect against wrong roots inclusion\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   */\\n  struct VotingAssetWithSlot {\\n    address underlyingAsset;\\n    uint128 slot;\\n  }\\n\\n  /**\\n   * @notice object containing the information of a bridged vote\\n   * @param support indicates if vote is in favor or against the proposal\\n   * @param votingAssetsWithSlots list of token addresses with storage slots, that the voter will use for voting\\n   */\\n  struct BridgedVote {\\n    bool support;\\n    VotingAssetWithSlot[] votingAssetsWithSlot;\\n  }\\n\\n  /**\\n   * @notice enum delimiting the possible states a proposal can have on the voting machine\\n   * @dev ProposalState enum defines the state machine of a proposal being voted, so the order on which the state is\\n          defined is important. Check logic correctness if new states are added / removed\\n   */\\n  enum ProposalState {\\n    NotCreated,\\n    Active,\\n    Finished,\\n    SentToGovernance\\n  }\\n\\n  /**\\n   * @notice Object with vote information\\n   * @param support boolean indicating if the vote is in favor or against a proposal\\n   * @param votingPower the power used for voting\\n   */\\n  struct Vote {\\n    bool support;\\n    uint248 votingPower;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent to governance chain\\n   * @param votes mapping indication for every voter of the proposal the information of that vote\\n   */\\n  struct Proposal {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n    mapping(address => Vote) votes;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent back to governance chain\\n   */\\n  struct ProposalWithoutVotes {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n  }\\n\\n  /**\\n   * @notice vote configuration passed from l1\\n   * @param votingDuration duration in seconds of the vote for a proposal\\n   * @param l1BlockHash hash of the block on L1 from the block when the proposal was activated for voting (sent to voting machine)\\n            this block hash is used to delimit from when the voting power is accounted for voting\\n   */\\n  struct ProposalVoteConfiguration {\\n    uint24 votingDuration;\\n    bytes32 l1ProposalBlockHash;\\n  }\\n\\n  /**\\n   * @notice Object with the necessary information to process a vote\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   * @param proof bytes of the generated proof on L1 with the slot information of underlying asset.\\n   */\\n  struct VotingBalanceProof {\\n    address underlyingAsset;\\n    uint128 slot;\\n    bytes proof;\\n  }\\n\\n  /**\\n   * @notice emitted when a proposal is created\\n   * @param proposalId numeric id of the created proposal\\n   * @param l1BlockHash block hash from the block on l1 from when the proposal was activated for voting\\n   * @param startTime timestamp when the proposal was created and ready for voting\\n   * @param endTime timestamp of when the voting period ends. (startTime + votingDuration)\\n   */\\n  event ProposalVoteStarted(\\n    uint256 indexed proposalId,\\n    bytes32 indexed l1BlockHash,\\n    uint256 startTime,\\n    uint256 endTime\\n  );\\n\\n  /**\\n   * @notice emitted when the results of a vote on a proposal are sent to L1\\n   * @param proposalId numeric id of the proposal which results are sent to L1\\n   * @param forVotes votes cast in favor of proposal\\n   * @param againstVotes votes cast against the proposal\\n   */\\n  event ProposalResultsSent(\\n    uint256 indexed proposalId,\\n    uint256 forVotes,\\n    uint256 againstVotes\\n  );\\n\\n  /**\\n   * @notice emitted when a vote is registered\\n   * @param proposalId Id of the proposal\\n   * @param voter address of the voter\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingPower Power of the voter/vote\\n   */\\n  event VoteEmitted(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    bool indexed support,\\n    uint256 votingPower\\n  );\\n\\n  /**\\n   * @notice emitted when a voting configuration of a proposal gets received. Meaning that has been bridged successfully\\n   * @param proposalId id of the proposal bridged to start the vote on\\n   * @param blockHash hash of the block on L1 when the proposal was activated for voting\\n   * @param votingDuration duration in seconds of the vote\\n   * @param voteCreated boolean indicating if the vote has been created or not.\\n   * @dev the vote will only be created automatically if when the configuration is bridged, all necessary roots\\n          have been registered already.\\n   */\\n  event ProposalVoteConfigurationBridged(\\n    uint256 indexed proposalId,\\n    bytes32 indexed blockHash,\\n    uint24 votingDuration,\\n    bool indexed voteCreated\\n  );\\n\\n  /**\\n   * @notice method to get the representatives mapping slot in Governance contract\\n   * @return representatives slot\\n   */\\n  function REPRESENTATIVES_SLOT() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the Governance contract address\\n   * @return Governance address\\n   */\\n  function GOVERNANCE() external view returns (address);\\n\\n  /**\\n   * @notice method to get the voting asset with slot signature\\n   * @return signature of the voting asset with slot method\\n   */\\n  function VOTING_ASSET_WITH_SLOT_RAW() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the VotingStrategy contract\\n   * @return VotingStrategy contract\\n   */\\n  function VOTING_STRATEGY() external view returns (IVotingStrategy);\\n\\n  /**\\n   * @notice Get the v4 compatible domain separator\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTE_SUBMITTED_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted by representative type hash for permits digest\\n   * @return hash of vote submitted by representative string\\n   */\\n  function VOTE_SUBMITTED_BY_REPRESENTATIVE_TYPEHASH()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  /**\\n   * @notice method to get the voting asset with slot type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTING_ASSET_WITH_SLOT_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the contract name for permits digest\\n   * @return contract name string\\n   */\\n  function NAME() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get a proposal information specified by its id\\n   * @param proposalId id of the proposal to retrieve\\n   * @return the proposal information without the users vote\\n   */\\n  function getProposalById(\\n    uint256 proposalId\\n  ) external view returns (ProposalWithoutVotes memory);\\n\\n  /**\\n   * @notice method to get the state of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the state of\\n   * @return the state of the proposal\\n   */\\n  function getProposalState(\\n    uint256 proposalId\\n  ) external view returns (ProposalState);\\n\\n  /**\\n   * @notice method to get the voting configuration of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the voting configuration from\\n   * @return the proposal vote configuration object\\n   */\\n  function getProposalVoteConfiguration(\\n    uint256 proposalId\\n  ) external view returns (ProposalVoteConfiguration memory);\\n\\n  /**\\n  * @notice method to get a paginated list of proposalIds. The proposals are taken from a list of proposals that have\\n            received vote configuration from governance chain\\n  * @param skip number of proposal ids to skip. from latest in the list of proposal ids with voting configuration\\n  * @param size length of proposal ids to ask for.\\n  * @return list of proposal ids\\n  * @dev This is mainly used to get a list of proposals that require automation in some step of the proposal live cycle.\\n  */\\n  function getProposalsVoteConfigurationIds(\\n    uint256 skip,\\n    uint256 size\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice method to get the vote set by a user on a proposal specified by its id\\n   * @param user address of the user that voted\\n   * @param proposalId id of the proposal to retrieve the vote from\\n   * @return the vote (support and voting power) emitted\\n   */\\n  function getUserProposalVote(\\n    address user,\\n    uint256 proposalId\\n  ) external view returns (Vote memory);\\n\\n  /**\\n    * @notice method to start a vote on a proposal specified by its id.\\n    * @param proposalId id of the proposal to start the vote on.\\n    * @return the id of the proposal that had the vote started on.\\n    * @dev this method can be called by anyone, requiring that the appropriate conditions are met.\\n           basically that the proper roots have been registered.\\n           It can also be called internally when the bridged message is received and the the required roots\\n           have been registered\\n    */\\n  function startProposalVote(uint256 proposalId) external returns (uint256);\\n\\n  /**\\n    * @notice method to cast a vote on a proposal specified by its id\\n    * @param proposalId id of the proposal on which the vote will be cast\\n    * @param support boolean indicating if the vote is in favor or against the proposal\\n    * @param votingBalanceProofs list of objects containing the information necessary to vote using the tokens\\n             allowed on the voting strategy.\\n    * @dev A vote does not need to use all the tokens allowed, can be a subset\\n    */\\n  function submitVote(\\n    uint256 proposalId,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user that has voted offchain via signature\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  function submitVoteBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice method to close a vote on a proposal specified by its id and send the results back to governance\\n   * @param proposalId id of the proposal to close the vote on and send the voting result to governance\\n   * @dev This method will trigger the bridging flow\\n   */\\n  function closeAndSendVote(uint256 proposalId) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative\\n   * @param proposalId id of the proposal\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   */\\n  function submitVoteAsRepresentative(\\n    uint256 proposalId,\\n    bool support,\\n    address voter,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative with a signed message\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param signatureParams object containing the necessary signature parameters\\n   */\\n  function submitVoteAsRepresentativeBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    address representative,\\n    bool support,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    SignatureParams memory signatureParams\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/interfaces/ICrossChainController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IBaseCrossChainController.sol';\\n\\n/**\\n * @title ICrossChainController\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the ICrossChainControllerMainnet contract\\n */\\ninterface ICrossChainController is IBaseCrossChainController {\\n  /**\\n   * @notice method called to initialize the proxy\\n   * @param owner address of the owner of the cross chain controller\\n   * @param guardian address of the guardian of the cross chain controller\\n   * @param initialRequiredConfirmations number of confirmations the messages need to be accepted as valid\\n   * @param receiverBridgeAdaptersToAllow array of addresses of the bridge adapters that can receive messages\\n   * @param forwarderBridgeAdaptersToEnable array specifying for every bridgeAdapter, the destinations it can have\\n   * @param sendersToApprove array of addresses to allow as forwarders\\n   */\\n  function initialize(\\n    address owner,\\n    address guardian,\\n    ConfirmationInput[] memory initialRequiredConfirmations,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    address[] memory sendersToApprove\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVotingPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBaseReceiverPortal} from 'aave-crosschain-infra/contracts/interfaces/IBaseReceiverPortal.sol';\\nimport {IVotingMachineWithProofs} from '../contracts/voting/interfaces/IVotingMachineWithProofs.sol';\\n\\n/**\\n * @title IVotingPortal\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the VotingPortal contract\\n */\\ninterface IVotingPortal is IBaseReceiverPortal {\\n  /**\\n   * @notice enum containing the different type of messages that can be bridged\\n   * @param Null empty state\\n   * @param Proposal indicates that the message is to bridge a proposal configuration\\n   */\\n  enum MessageType {\\n    Null,\\n    Proposal\\n  }\\n\\n  /**\\n   * @notice emitted when \\\"Start voting\\\" gas limit gets updated\\n   * @param gasLimit the new gas limit\\n   */\\n  event StartVotingGasLimitUpdated(uint128 gasLimit);\\n\\n  /**\\n   * @notice emitted when a vote message is received\\n   * @param originSender address that sent the message on the origin chain\\n   * @param originChainId id of the chain where the message originated\\n   * @param delivered flag indicating if message has been delivered\\n   * @param message bytes containing the necessary information to queue the bridged proposal id\\n   * @param reason bytes with the revert information\\n   */\\n  event VoteMessageReceived(\\n    address indexed originSender,\\n    uint256 indexed originChainId,\\n    bool indexed delivered,\\n    bytes message,\\n    bytes reason\\n  );\\n\\n  /**\\n   * @notice get the chain id where the voting machine which is deployed\\n   * @return network id\\n   */\\n  function VOTING_MACHINE_CHAIN_ID() external view returns (uint256);\\n\\n  /**\\n   * @notice gets the address of the voting machine on the destination network\\n   * @return voting machine address\\n   */\\n  function VOTING_MACHINE() external view returns (address);\\n\\n  /**\\n   * @notice gets the address of the connected governance\\n   * @return governance address\\n   */\\n  function GOVERNANCE() external view returns (address);\\n\\n  /**\\n   * @notice gets the address of the CrossChainController deployed on current network\\n   * @return CrossChainController address\\n   */\\n  function CROSS_CHAIN_CONTROLLER() external view returns (address);\\n\\n  /**\\n   * @notice method to set the gas limit for \\\"Start voting\\\" bridging tx\\n   * @param gasLimit the new gas limit\\n   */\\n  function setStartVotingGasLimit(uint128 gasLimit) external;\\n\\n  /**\\n   * @notice method to get the gas limit for \\\"Start voting\\\" bridging tx\\n   * @return the gas limit\\n   */\\n  function getStartVotingGasLimit() external view returns (uint128);\\n\\n  /**\\n   * @notice method to bridge the vote configuration to voting chain, so a vote can be started.\\n   * @param proposalId id of the proposal bridged to start the vote on\\n   * @param blockHash hash of the block on L1 when the proposal was activated for voting\\n   * @param votingDuration duration in seconds of the vote\\n   */\\n  function forwardStartVotingMessage(\\n    uint256 proposalId,\\n    bytes32 blockHash,\\n    uint24 votingDuration\\n  ) external;\\n\\n  /**\\n   * @notice method to decode a message from from voting machine chain\\n   * @param message encoded message with message type\\n   * @return proposalId, forVotes, againstVotes from the decoded message\\n   */\\n  function decodeMessage(\\n    bytes memory message\\n  ) external pure returns (uint256, uint128, uint128);\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author BGD Labs\\n * @notice Defines the error messages emitted by the different contracts of the Aave Governance V3\\n */\\nlibrary Errors {\\n  string public constant VOTING_PORTALS_COUNT_NOT_0 = '1'; // to be able to rescue voting portals count must be 0\\n  string public constant AT_LEAST_ONE_PAYLOAD = '2'; // to create a proposal, it must have at least one payload\\n  string public constant VOTING_PORTAL_NOT_APPROVED = '3'; // the voting portal used to vote on proposal must be approved\\n  string public constant PROPOSITION_POWER_IS_TOO_LOW = '4'; // proposition power of proposal creator must be equal or higher than the specified threshold for the access level\\n  string public constant PROPOSAL_NOT_IN_CREATED_STATE = '5'; // proposal should be in the CREATED state\\n  string public constant PROPOSAL_NOT_IN_ACTIVE_STATE = '6'; // proposal must be in an ACTIVE state\\n  string public constant PROPOSAL_NOT_IN_QUEUED_STATE = '7'; // proposal must be in a QUEUED state\\n  string public constant VOTING_START_COOLDOWN_PERIOD_NOT_PASSED = '8'; // to activate a proposal vote, the cool down delay must pass\\n  string public constant CALLER_NOT_A_VALID_VOTING_PORTAL = '9'; // only an allowed voting portal can queue a proposal\\n  string public constant QUEUE_COOLDOWN_PERIOD_NOT_PASSED = '10'; // to execute a proposal a cooldown delay must pass\\n  string public constant PROPOSAL_NOT_IN_THE_CORRECT_STATE = '11'; // proposal must be created but not executed yet to be able to be canceled\\n  string public constant CALLER_NOT_GOVERNANCE = '12'; // caller must be governance\\n  string public constant VOTER_ALREADY_VOTED_ON_PROPOSAL = '13'; // voter can only vote once per proposal using voting portal\\n  string public constant WRONG_MESSAGE_ORIGIN = '14'; // received message must come from registered source address, chain id, CrossChainController\\n  string public constant NO_VOTING_ASSETS = '15'; // Strategy must have voting assets\\n  string public constant PROPOSAL_VOTE_ALREADY_CREATED = '16'; // vote on proposal can only be created once\\n  string public constant INVALID_SIGNATURE = '17'; // submitted signature is not valid\\n  string public constant PROPOSAL_VOTE_NOT_FINISHED = '18'; // proposal vote must be finished\\n  string public constant PROPOSAL_VOTE_NOT_IN_ACTIVE_STATE = '19'; // proposal vote must be in active state\\n  string public constant PROPOSAL_VOTE_ALREADY_EXISTS = '20'; // proposal vote already exists\\n  string public constant VOTE_ONCE_FOR_ASSET = '21'; // an asset can only be used once per vote\\n  string public constant USER_BALANCE_DOES_NOT_EXISTS = '22'; // to vote an user must have balance in the token the user is voting with\\n  string public constant USER_VOTING_BALANCE_IS_ZERO = '23'; // to vote an user must have some balance between all the tokens selected for voting\\n  string public constant MISSING_AAVE_ROOTS = '24'; // must have AAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_ROOTS = '25'; // must have stkAAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_SLASHING_EXCHANGE_RATE = '26'; // must have stkAAVE slashing exchange rate registered to use strategy\\n  string public constant UNPROCESSED_STORAGE_ROOT = '27'; // root must be registered beforehand\\n  string public constant NOT_ENOUGH_MSG_VALUE = '28'; // method was not called with enough value to execute the call\\n  string public constant FAILED_ACTION_EXECUTION = '29'; // action failed to execute\\n  string public constant SHOULD_BE_AT_LEAST_ONE_EXECUTOR = '30'; // at least one executor is needed\\n  string public constant INVALID_EMPTY_TARGETS = '31'; // target of the payload execution must not be empty\\n  string public constant EXECUTOR_WAS_NOT_SPECIFIED_FOR_REQUESTED_ACCESS_LEVEL =\\n    '32'; // payload executor must be registered for the specified payload access level\\n  string public constant PAYLOAD_NOT_IN_QUEUED_STATE = '33'; // payload must be en the queued state\\n  string public constant TIMELOCK_NOT_FINISHED = '34'; // delay has not passed before execution can be called\\n  string public constant PAYLOAD_NOT_IN_THE_CORRECT_STATE = '35'; // payload must be created but not executed yet to be able to be canceled\\n  string public constant PAYLOAD_NOT_IN_CREATED_STATE = '36'; // payload must be in the created state\\n  string public constant MISSING_A_AAVE_ROOTS = '37'; // must have aAAVE roots registered to use strategy\\n  string public constant MISSING_PROPOSAL_BLOCK_HASH = '38'; // block hash for this proposal was not bridged before\\n  string public constant PROPOSAL_VOTE_CONFIGURATION_ALREADY_BRIDGED = '39'; // configuration for this proposal bridged already\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS = '40'; // voting portal address can't be 0x0\\n  string public constant INVALID_POWER_STRATEGY = '41'; // 0x0 is not valid as the power strategy\\n  string public constant INVALID_EXECUTOR_ADDRESS = '42'; // executor address can't be 0x0\\n  string public constant EXECUTOR_ALREADY_SET_IN_DIFFERENT_LEVEL = '43'; // executor address already being used as executor of a different level\\n  string public constant INVALID_VOTING_DURATION = '44'; // voting duration can not be bigger than the time it takes to execute a proposal\\n  string public constant VOTING_DURATION_NOT_PASSED = '45'; // at least votingDuration should have passed since voting started for a proposal to be queued\\n  string public constant INVALID_PROPOSAL_ACCESS_LEVEL = '46'; // the bridged proposal access level does not correspond with the maximum access level required by the payload\\n  string public constant PAYLOAD_NOT_CREATED_BEFORE_PROPOSAL = '47'; // payload must be created before proposal\\n  string public constant INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '48';\\n  string public constant INVALID_MESSAGE_ORIGINATOR_ADDRESS = '49';\\n  string public constant INVALID_ORIGIN_CHAIN_ID = '50';\\n  string public constant INVALID_ACTION_TARGET = '51';\\n  string public constant INVALID_ACTION_ACCESS_LEVEL = '52';\\n  string public constant INVALID_EXECUTOR_ACCESS_LEVEL = '53';\\n  string public constant INVALID_VOTING_PORTAL_CROSS_CHAIN_CONTROLLER = '54';\\n  string public constant INVALID_VOTING_PORTAL_VOTING_MACHINE = '55';\\n  string public constant INVALID_VOTING_PORTAL_GOVERNANCE = '56';\\n  string public constant INVALID_VOTING_MACHINE_CHAIN_ID = '57';\\n  string public constant G_INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '58';\\n  string public constant G_INVALID_IPFS_HASH = '59';\\n  string public constant G_INVALID_PAYLOAD_ACCESS_LEVEL = '60';\\n  string public constant G_INVALID_PAYLOADS_CONTROLLER = '61';\\n  string public constant G_INVALID_PAYLOAD_CHAIN = '62';\\n  string public constant POWER_STRATEGY_HAS_NO_TOKENS = '63'; // power strategy should at least have\\n  string public constant INVALID_VOTING_CONFIG_ACCESS_LEVEL = '64';\\n  string public constant VOTING_DURATION_TOO_SMALL = '65';\\n  string public constant NO_BRIDGED_VOTING_ASSETS = '66';\\n  string public constant INVALID_VOTER = '67';\\n  string public constant INVALID_DATA_WAREHOUSE = '68';\\n  string public constant INVALID_VOTING_MACHINE_CROSS_CHAIN_CONTROLLER = '69';\\n  string public constant INVALID_L1_VOTING_PORTAL = '70';\\n  string public constant INVALID_VOTING_PORTAL_CHAIN_ID = '71';\\n  string public constant INVALID_VOTING_STRATEGY = '72';\\n  string public constant INVALID_VOTE_CONFIGURATION_BLOCKHASH = '73';\\n  string public constant INVALID_VOTE_CONFIGURATION_VOTING_DURATION = '74';\\n  string public constant INVALID_GAS_LIMIT = '75';\\n  string public constant INVALID_VOTING_CONFIGS = '76'; // a lvl2 voting configuration must be sent to initializer\\n  string public constant INVALID_EXECUTOR_DELAY = '77';\\n  string public constant REPEATED_STRATEGY_ASSET = '78';\\n  string public constant EMPTY_ASSET_STORAGE_SLOTS = '79';\\n  string public constant REPEATED_STRATEGY_ASSET_SLOT = '80';\\n  string public constant INVALID_EXECUTION_TARGET = '81';\\n  string public constant MISSING_VOTING_CONFIGURATIONS = '82'; // voting configurations for lvl1 and lvl2 must be included on initialization\\n  string public constant INVALID_PROPOSITION_POWER = '83';\\n  string public constant INVALID_YES_THRESHOLD = '84';\\n  string public constant INVALID_YES_NO_DIFFERENTIAL = '85';\\n  string public constant ETH_TRANSFER_FAILED = '86';\\n  string public constant INVALID_INITIAL_VOTING_CONFIGS = '87'; // initial voting configurations can not be of the same level\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS_IN_VOTING_MACHINE = '88';\\n  string public constant INVALID_VOTING_PORTAL_OWNER = '89';\\n  string public constant CANCELLATION_FEE_REDEEM_FAILED = '90'; // cancellation fee was not able to be redeemed\\n  string public constant INVALID_CANCELLATION_FEE_COLLECTOR = '91'; // collector can not be address 0\\n  string public constant INVALID_CANCELLATION_FEE_SENT = '92'; // cancellation fee sent does not match the needed amount\\n  string public constant CANCELLATION_FEE_ALREADY_REDEEMED = '93'; // cancellation fee already redeemed\\n  string public constant INVALID_STATE_TO_REDEEM_CANCELLATION_FEE = '94'; // proposal state is not a valid state to redeem cancellation fee\\n  string public constant MISSING_REPRESENTATION_ROOTS = '95'; // to represent a voter the representation roots need to be registered\\n  string public constant CALLER_IS_NOT_VOTER_REPRESENTATIVE = '96'; // to represent a voter, caller must be the stored representative\\n  string public constant VM_INVALID_GOVERNANCE_ADDRESS = '97'; // governance address can not be 0\\n  string public constant ALL_DELEGATION_ACTIONS_FAILED = '98'; // all meta delegation actions failed on MetaDelegateHelper\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/interfaces/IDataWarehouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {StateProofVerifier} from '../libs/StateProofVerifier.sol';\\n\\n/**\\n * @title IDataWarehouse\\n * @author BGD Labs\\n * @notice interface containing the methods definitions of the DataWarehouse contract\\n */\\ninterface IDataWarehouse {\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageRoot method\\n   * @param account address where the root is generated\\n   * @param blockHash hash of the block where the root was generated\\n   */\\n  event StorageRootProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash\\n  );\\n\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageSlot method\\n   * @param account address where the slot is processed\\n   * @param blockHash hash of the block where the storage proof was generated\\n   * @param slot storage location to search\\n   * @param value storage information on the specified location\\n   */\\n  event StorageSlotProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash,\\n    bytes32 slot,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @notice method to get the storage roots of an account (token) in a certain block hash\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @return state root hash of the account on the block hash specified\\n   */\\n  function getStorageRoots(\\n    address account,\\n    bytes32 blockHash\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice method to process the storage root from an account on a block hash.\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param blockHeaderRLP rlp encoded block header. At same block where the block hash was taken\\n   * @param accountStateProofRLP rlp encoded account state proof, taken in same block as block hash\\n   * @return the storage root\\n   */\\n  function processStorageRoot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes memory blockHeaderRLP,\\n    bytes memory accountStateProofRLP\\n  ) external returns (bytes32);\\n\\n  /**\\n   * @notice method to get the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   * @return an object containing the slot value at the specified storage slot\\n   */\\n  function getStorage(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes memory storageProof\\n  ) external view returns (StateProofVerifier.SlotValue memory);\\n\\n  /**\\n   * @notice method to register the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   */\\n  function processStorageSlot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes calldata storageProof\\n  ) external;\\n\\n  /**\\n   * @notice method to get the value from storage at a certain block hash, previously registered.\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param account address of the token to get the storage roots from\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @return numeric slot value of the slot. The value must be decoded to get the actual stored information\\n   */\\n  function getRegisteredSlot(\\n    bytes32 blockHash,\\n    address account,\\n    bytes32 slot\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/interfaces/IVotingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\n\\n/**\\n * @title IVotingStrategy\\n * @author BGD Labs\\n * @notice interface containing the methods definitions of the VotingStrategy contract\\n */\\ninterface IVotingStrategy {\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the exchange rate precision. Taken from stkTokenV3 contract\\n   * @return exchange rate precission\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_PRECISION()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice method to get the slot of the stkAave exchange rate in the stkAave contract\\n   * @return stkAave exchange rate slot\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_SLOT()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice method to get the power scale factor of the delegated balances\\n   * @return power scale factor\\n   */\\n  function POWER_SCALE_FACTOR() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the power of an asset\\n   * @param asset address of the token to get the power\\n   * @param storageSlot storage position of the balance mapping\\n   * @param power balance of a determined asset to be used for the vote\\n   * @param blockHash block hash of when we want to get the power. Optional parameter\\n   * @return voting power of the specified asset\\n   */\\n  function getVotingPower(\\n    address asset,\\n    uint128 storageSlot,\\n    uint256 power,\\n    bytes32 blockHash\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice method to check that the roots for all the tokens in the voting strategy have been registered. Including\\n             the registry of the stkAave exchange rate slot\\n   * @param blockHash hash of the block from where the roots have been registered.\\n   */\\n  function hasRequiredRoots(bytes32 blockHash) external view;\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/interfaces/IBaseCrossChainController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './ICrossChainForwarder.sol';\\nimport './ICrossChainReceiver.sol';\\nimport {IRescuable} from 'solidity-utils/contracts/utils/interfaces/IRescuable.sol';\\n\\n/**\\n * @title IBaseCrossChainController\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainController contract\\n */\\ninterface IBaseCrossChainController is IRescuable, ICrossChainForwarder, ICrossChainReceiver {\\n\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/interfaces/IBaseReceiverPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IBaseReceiverPortal\\n * @author BGD Labs\\n * @notice interface defining the method that needs to be implemented by all receiving portals, as its the one that\\n           will be called when a received message gets confirmed\\n */\\ninterface IBaseReceiverPortal {\\n  /**\\n   * @notice method called by CrossChainController when a message has been confirmed\\n   * @param originSender address of the sender of the bridged message\\n   * @param originChainId id of the chain where the message originated\\n   * @param message bytes bridged containing the desired information\\n   */\\n  function receiveCrossChainMessage(\\n    address originSender,\\n    uint256 originChainId,\\n    bytes memory message\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/libs/StateProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from './RLPReader.sol';\\nimport {MerklePatriciaProofVerifier} from './MerklePatriciaProofVerifier.sol';\\n\\n/**\\n * @title A helper library for verification of Merkle Patricia account and state proofs.\\n */\\nlibrary StateProofVerifier {\\n  using RLPReader for RLPReader.RLPItem;\\n  using RLPReader for bytes;\\n\\n  uint256 constant HEADER_STATE_ROOT_INDEX = 3;\\n  uint256 constant HEADER_NUMBER_INDEX = 8;\\n  uint256 constant HEADER_TIMESTAMP_INDEX = 11;\\n\\n  struct BlockHeader {\\n    bytes32 hash;\\n    bytes32 stateRootHash;\\n    uint256 number;\\n    uint256 timestamp;\\n  }\\n\\n  struct Account {\\n    bool exists;\\n    uint256 nonce;\\n    uint256 balance;\\n    bytes32 storageRoot;\\n    bytes32 codeHash;\\n  }\\n\\n  struct SlotValue {\\n    bool exists;\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Parses block header and verifies its presence onchain within the latest 256 blocks.\\n   * @param _headerRlpBytes RLP-encoded block header.\\n   */\\n  function verifyBlockHeader(\\n    bytes memory _headerRlpBytes,\\n    bytes32 _blockHash\\n  ) internal pure returns (BlockHeader memory) {\\n    BlockHeader memory header = parseBlockHeader(_headerRlpBytes);\\n    require(header.hash == _blockHash, 'blockhash mismatch');\\n    return header;\\n  }\\n\\n  /**\\n   * @notice Parses RLP-encoded block header.\\n   * @param _headerRlpBytes RLP-encoded block header.\\n   */\\n  function parseBlockHeader(\\n    bytes memory _headerRlpBytes\\n  ) internal pure returns (BlockHeader memory) {\\n    BlockHeader memory result;\\n    RLPReader.RLPItem[] memory headerFields = _headerRlpBytes\\n      .toRlpItem()\\n      .toList();\\n\\n    require(headerFields.length > HEADER_TIMESTAMP_INDEX);\\n\\n    result.stateRootHash = bytes32(\\n      headerFields[HEADER_STATE_ROOT_INDEX].toUint()\\n    );\\n    result.number = headerFields[HEADER_NUMBER_INDEX].toUint();\\n    result.timestamp = headerFields[HEADER_TIMESTAMP_INDEX].toUint();\\n    result.hash = keccak256(_headerRlpBytes);\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Verifies Merkle Patricia proof of an account and extracts the account fields.\\n   *\\n   * @param _addressHash Keccak256 hash of the address corresponding to the account.\\n   * @param _stateRootHash MPT root hash of the Ethereum state trie.\\n   */\\n  function extractAccountFromProof(\\n    bytes32 _addressHash, // keccak256(abi.encodePacked(address))\\n    bytes32 _stateRootHash,\\n    RLPReader.RLPItem[] memory _proof\\n  ) internal pure returns (Account memory) {\\n    bytes memory acctRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n      _stateRootHash,\\n      abi.encodePacked(_addressHash),\\n      _proof\\n    );\\n    Account memory account;\\n\\n    if (acctRlpBytes.length == 0) {\\n      return account;\\n    }\\n\\n    RLPReader.RLPItem[] memory acctFields = acctRlpBytes.toRlpItem().toList();\\n    require(acctFields.length == 4);\\n\\n    account.exists = true;\\n    account.nonce = acctFields[0].toUint();\\n    account.balance = acctFields[1].toUint();\\n    account.storageRoot = bytes32(acctFields[2].toUint());\\n    account.codeHash = bytes32(acctFields[3].toUint());\\n\\n    return account;\\n  }\\n\\n  /**\\n   * @notice Verifies Merkle Patricia proof of a slot and extracts the slot's value.\\n   *\\n   * @param _slotHash Keccak256 hash of the slot position.\\n   * @param _storageRootHash MPT root hash of the account's storage trie.\\n   */\\n  function extractSlotValueFromProof(\\n    bytes32 _slotHash,\\n    bytes32 _storageRootHash,\\n    RLPReader.RLPItem[] memory _proof\\n  ) internal pure returns (SlotValue memory) {\\n    bytes memory valueRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n      _storageRootHash,\\n      abi.encodePacked(_slotHash),\\n      _proof\\n    );\\n\\n    SlotValue memory value;\\n\\n    if (valueRlpBytes.length != 0) {\\n      value.exists = true;\\n      value.value = valueRlpBytes.toRlpItem().toUint();\\n    }\\n\\n    return value;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/interfaces/ICrossChainForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Transaction, Envelope} from '../libs/EncodingUtils.sol';\\n\\n/**\\n * @title ICrossChainForwarder\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainForwarder contract\\n */\\ninterface ICrossChainForwarder {\\n  /**\\n   * @notice object storing the connected pair of bridge adapters, on current and destination chain\\n   * @param destinationBridgeAdapter address of the bridge adapter on the destination chain\\n   * @param currentChainBridgeAdapter address of the bridge adapter deployed on current network\\n   */\\n  struct ChainIdBridgeConfig {\\n    address destinationBridgeAdapter;\\n    address currentChainBridgeAdapter;\\n  }\\n\\n  /**\\n   * @notice object with the necessary information to remove bridge adapters\\n   * @param bridgeAdapter address of the bridge adapter to remove\\n   * @param chainIds array of chain ids where the bridge adapter connects\\n   */\\n  struct BridgeAdapterToDisable {\\n    address bridgeAdapter;\\n    uint256[] chainIds;\\n  }\\n\\n  /**\\n   * @notice object storing the pair bridgeAdapter (current deployed chain) destination chain bridge adapter configuration\\n   * @param currentChainBridgeAdapter address of the bridge adapter deployed on current chain\\n   * @param destinationBridgeAdapter address of the bridge adapter on the destination chain\\n   * @param destinationChainId id of the destination chain using our own nomenclature\\n   */\\n  struct ForwarderBridgeAdapterConfigInput {\\n    address currentChainBridgeAdapter;\\n    address destinationBridgeAdapter;\\n    uint256 destinationChainId;\\n  }\\n\\n  /**\\n   * @notice emitted when a transaction is successfully forwarded through a bridge adapter\\n   * @param envelopeId internal id of the envelope\\n   * @param envelope the Envelope type data\\n   */\\n  event EnvelopeRegistered(bytes32 indexed envelopeId, Envelope envelope);\\n\\n  /**\\n   * @notice emitted when a transaction forwarding is attempted through a bridge adapter\\n   * @param transactionId id of the forwarded transaction\\n   * @param envelopeId internal id of the envelope\\n   * @param encodedTransaction object intended to be bridged\\n   * @param destinationChainId id of the destination chain in our notation\\n   * @param bridgeAdapter address of the bridge adapter that failed (deployed on current network)\\n   * @param destinationBridgeAdapter address of the connected bridge adapter on destination chain\\n   * @param adapterSuccessful adapter was able to forward the message\\n   * @param returnData bytes with error information\\n   */\\n  event TransactionForwardingAttempted(\\n    bytes32 transactionId,\\n    bytes32 indexed envelopeId,\\n    bytes encodedTransaction,\\n    uint256 destinationChainId,\\n    address indexed bridgeAdapter,\\n    address destinationBridgeAdapter,\\n    bool indexed adapterSuccessful,\\n    bytes returnData\\n  );\\n\\n  /**\\n   * @notice emitted when a bridge adapter has been added to the allowed list\\n   * @param destinationChainId id of the destination chain in our notation\\n   * @param bridgeAdapter address of the bridge adapter added (deployed on current network)\\n   * @param destinationBridgeAdapter address of the connected bridge adapter on destination chain\\n   * @param allowed boolean indicating if the bridge adapter is allowed or disallowed\\n   */\\n  event BridgeAdapterUpdated(\\n    uint256 indexed destinationChainId,\\n    address indexed bridgeAdapter,\\n    address destinationBridgeAdapter,\\n    bool indexed allowed\\n  );\\n\\n  /**\\n   * @notice emitted when a sender has been updated\\n   * @param sender address of the updated sender\\n   * @param isApproved boolean that indicates if the sender has been approved or removed\\n   */\\n  event SenderUpdated(address indexed sender, bool indexed isApproved);\\n\\n  /**\\n   * @notice method to get the current valid envelope nonce\\n   * @return the current valid envelope nonce\\n   */\\n  function getCurrentEnvelopeNonce() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the current valid transaction nonce\\n   * @return the current valid transaction nonce\\n   */\\n  function getCurrentTransactionNonce() external view returns (uint256);\\n\\n  /**\\n   * @notice method to check if a envelope has been previously forwarded.\\n   * @param envelope the Envelope type data\\n   * @return boolean indicating if the envelope has been registered\\n   */\\n  function isEnvelopeRegistered(Envelope memory envelope) external view returns (bool);\\n\\n  /**\\n   * @notice method to check if a envelope has been previously forwarded.\\n   * @param envelopeId the hashed id of the envelope\\n   * @return boolean indicating if the envelope has been registered\\n   */\\n  function isEnvelopeRegistered(bytes32 envelopeId) external view returns (bool);\\n\\n  /**\\n   * @notice method to get if a transaction has been forwarded\\n   * @param transaction the Transaction type data\\n   * @return flag indicating if a transaction has been forwarded\\n   */\\n  function isTransactionForwarded(Transaction memory transaction) external view returns (bool);\\n\\n  /**\\n   * @notice method to get if a transaction has been forwarded\\n   * @param transactionId hashed id of the transaction\\n   * @return flag indicating if a transaction has been forwarded\\n   */\\n  function isTransactionForwarded(bytes32 transactionId) external view returns (bool);\\n\\n  /**\\n   * @notice method called to initiate message forwarding to other networks.\\n   * @param destinationChainId id of the destination chain where the message needs to be bridged\\n   * @param destination address where the message is intended for\\n   * @param gasLimit gas cost on receiving side of the message\\n   * @param message bytes that need to be bridged\\n   * @return internal id of the envelope and transaction\\n   */\\n  function forwardMessage(\\n    uint256 destinationChainId,\\n    address destination,\\n    uint256 gasLimit,\\n    bytes memory message\\n  ) external returns (bytes32, bytes32);\\n\\n  /**\\n   * @notice method called to re forward a previously sent envelope.\\n   * @param envelope the Envelope type data\\n   * @param gasLimit gas cost on receiving side of the message\\n   * @return the transaction id that has the retried envelope\\n   * @dev This method will send an existing Envelope using a new Transaction.\\n   * @dev This method should be used when the intention is to send the Envelope as if it was a new message. This way on\\n          the Receiver side it will start from 0 to count for the required confirmations. (usual use case would be for\\n          when an envelope has been invalidated on Receiver side, and needs to be retried as a new message)\\n   */\\n  function retryEnvelope(Envelope memory envelope, uint256 gasLimit) external returns (bytes32);\\n\\n  /**\\n   * @notice method to retry forwarding an already forwarded transaction\\n   * @param encodedTransaction the encoded Transaction data\\n   * @param gasLimit limit of gas to spend on forwarding per bridge\\n   * @param bridgeAdaptersToRetry list of bridge adapters to be used for the transaction forwarding retry\\n   * @dev This method will send an existing Transaction with its Envelope to the specified adapters.\\n   * @dev Should be used when some of the bridges on the initial forwarding did not work (out of gas),\\n          and we want the Transaction with Envelope to still account for the required confirmations on the Receiver side\\n   */\\n  function retryTransaction(\\n    bytes memory encodedTransaction,\\n    uint256 gasLimit,\\n    address[] memory bridgeAdaptersToRetry\\n  ) external;\\n\\n  /**\\n   * @notice method to enable bridge adapters\\n   * @param bridgeAdapters array of new bridge adapter configurations\\n   */\\n  function enableBridgeAdapters(ForwarderBridgeAdapterConfigInput[] memory bridgeAdapters) external;\\n\\n  /**\\n   * @notice method to disable bridge adapters\\n   * @param bridgeAdapters array of bridge adapter addresses to disable\\n   */\\n  function disableBridgeAdapters(BridgeAdapterToDisable[] memory bridgeAdapters) external;\\n\\n  /**\\n   * @notice method to remove sender addresses\\n   * @param senders list of addresses to remove\\n   */\\n  function removeSenders(address[] memory senders) external;\\n\\n  /**\\n   * @notice method to approve new sender addresses\\n   * @param senders list of addresses to approve\\n   */\\n  function approveSenders(address[] memory senders) external;\\n\\n  /**\\n   * @notice method to get all the forwarder bridge adapters of a chain\\n   * @param chainId id of the chain we want to get the adapters from\\n   * @return an array of chain configurations where the bridge adapter can communicate\\n   */\\n  function getForwarderBridgeAdaptersByChain(\\n    uint256 chainId\\n  ) external view returns (ChainIdBridgeConfig[] memory);\\n\\n  /**\\n   * @notice method to get if a sender is approved\\n   * @param sender address that we want to check if approved\\n   * @return boolean indicating if the address has been approved as sender\\n   */\\n  function isSenderApproved(address sender) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/interfaces/ICrossChainReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {EnumerableSet} from 'openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol';\\nimport {Transaction, Envelope} from '../libs/EncodingUtils.sol';\\n\\n/**\\n * @title ICrossChainReceiver\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainReceiver contract\\n */\\ninterface ICrossChainReceiver {\\n  /**\\n   * @notice object with information to set new required confirmations\\n   * @param chainId id of the origin chain\\n   * @param requiredConfirmations required confirmations to set a message as confirmed\\n   */\\n  struct ConfirmationInput {\\n    uint256 chainId;\\n    uint8 requiredConfirmations;\\n  }\\n\\n  /**\\n   * @notice object with information to set new validity timestamp\\n   * @param chainId id of the origin chain\\n   * @param validityTimestamp new timestamp in seconds to set as validity point\\n   */\\n  struct ValidityTimestampInput {\\n    uint256 chainId;\\n    uint120 validityTimestamp;\\n  }\\n\\n  /**\\n   * @notice object with necessary information to configure bridge adapters\\n   * @param bridgeAdapter address of the bridge adapter to configure\\n   * @param chainIds array of ids of the chains the adapter receives messages from\\n   */\\n  struct ReceiverBridgeAdapterConfigInput {\\n    address bridgeAdapter;\\n    uint256[] chainIds;\\n  }\\n\\n  /**\\n   * @notice object containing the receiver configuration\\n   * @param requiredConfirmation number of bridges that are needed to make a bridged message valid from origin chain\\n   * @param validityTimestamp all messages originated but not finally confirmed before this timestamp per origin chain, are invalid\\n   */\\n  struct ReceiverConfiguration {\\n    uint8 requiredConfirmation;\\n    uint120 validityTimestamp;\\n  }\\n\\n  /**\\n   * @notice object with full information of the receiver configuration for a chain\\n   * @param configuration object containing the specifications of the receiver for a chain\\n   * @param allowedBridgeAdapters stores if a bridge adapter is allowed for a chain\\n   */\\n  struct ReceiverConfigurationFull {\\n    ReceiverConfiguration configuration;\\n    EnumerableSet.AddressSet allowedBridgeAdapters;\\n  }\\n\\n  /**\\n   * @notice object that stores the internal information of the transaction\\n   * @param confirmations number of times that this transaction has been bridged\\n   * @param firstBridgedAt timestamp in seconds indicating the first time a transaction was received\\n   */\\n  struct TransactionStateWithoutAdapters {\\n    uint8 confirmations;\\n    uint120 firstBridgedAt;\\n  }\\n  /**\\n   * @notice object that stores the internal information of the transaction with bridge adapters state\\n   * @param confirmations number of times that this transactions has been bridged\\n   * @param firstBridgedAt timestamp in seconds indicating the first time a transaction was received\\n   * @param bridgedByAdapter list of bridge adapters that have bridged the message\\n   */\\n  struct TransactionState {\\n    uint8 confirmations;\\n    uint120 firstBridgedAt;\\n    mapping(address => bool) bridgedByAdapter;\\n  }\\n\\n  /**\\n   * @notice object with the current state of an envelope\\n   * @param confirmed boolean indicating if the bridged message has been confirmed by the infrastructure\\n   * @param delivered boolean indicating if the bridged message has been delivered to the destination\\n   */\\n  enum EnvelopeState {\\n    None,\\n    Confirmed,\\n    Delivered\\n  }\\n\\n  /**\\n   * @notice emitted when a transaction has been received successfully\\n   * @param transactionId id of the transaction\\n   * @param envelopeId id of the envelope\\n   * @param originChainId id of the chain where the envelope originated\\n   * @param transaction the Transaction type data\\n   * @param bridgeAdapter address of the bridge adapter who received the message (deployed on current network)\\n   * @param confirmations number of current confirmations for this message\\n   */\\n  event TransactionReceived(\\n    bytes32 transactionId,\\n    bytes32 indexed envelopeId,\\n    uint256 indexed originChainId,\\n    Transaction transaction,\\n    address indexed bridgeAdapter,\\n    uint8 confirmations\\n  );\\n\\n  /**\\n   * @notice emitted when an envelope has been delivery attempted\\n   * @param envelopeId id of the envelope\\n   * @param envelope the Envelope type data\\n   * @param isDelivered flag indicating if the message has been delivered successfully\\n   */\\n  event EnvelopeDeliveryAttempted(bytes32 envelopeId, Envelope envelope, bool isDelivered);\\n\\n  /**\\n   * @notice emitted when a bridge adapter gets updated (allowed or disallowed)\\n   * @param bridgeAdapter address of the updated bridge adapter\\n   * @param allowed boolean indicating if the bridge adapter has been allowed or disallowed\\n   * @param chainId id of the chain updated\\n   */\\n  event ReceiverBridgeAdaptersUpdated(\\n    address indexed bridgeAdapter,\\n    bool indexed allowed,\\n    uint256 indexed chainId\\n  );\\n\\n  /**\\n   * @notice emitted when number of confirmations needed to validate a message changes\\n   * @param newConfirmations number of new confirmations needed for a message to be valid\\n   * @param chainId id of the chain updated\\n   */\\n  event ConfirmationsUpdated(uint8 newConfirmations, uint256 indexed chainId);\\n\\n  /**\\n   * @notice emitted when a new timestamp for invalidations gets set\\n   * @param invalidTimestamp timestamp to invalidate previous messages\\n   * @param chainId id of the chain updated\\n   */\\n  event NewInvalidation(uint256 invalidTimestamp, uint256 indexed chainId);\\n\\n  /**\\n   * @notice method to get the current allowed receiver bridge adapters for a chain\\n   * @param chainId id of the chain to get the allowed bridge adapter list\\n   * @return the list of allowed bridge adapters\\n   */\\n  function getReceiverBridgeAdaptersByChain(\\n    uint256 chainId\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @notice method to get the current supported chains (at least one allowed bridge adapter)\\n   * @return list of supported chains\\n   */\\n  function getSupportedChains() external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice method to get the current configuration of a chain\\n   * @param chainId id of the chain to get the configuration from\\n   * @return the specified chain configuration object\\n   */\\n  function getConfigurationByChain(\\n    uint256 chainId\\n  ) external view returns (ReceiverConfiguration memory);\\n\\n  /**\\n   * @notice method to get if a bridge adapter is allowed\\n   * @param bridgeAdapter address of the bridge adapter to check\\n   * @param chainId id of the chain to check\\n   * @return boolean indicating if bridge adapter is allowed\\n   */\\n  function isReceiverBridgeAdapterAllowed(\\n    address bridgeAdapter,\\n    uint256 chainId\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice  method to get the current state of a transaction\\n   * @param transactionId the id of transaction\\n   * @return number of confirmations of internal message identified by the transactionId and the updated timestamp\\n   */\\n  function getTransactionState(\\n    bytes32 transactionId\\n  ) external view returns (TransactionStateWithoutAdapters memory);\\n\\n  /**\\n   * @notice  method to get the internal transaction information\\n   * @param transaction Transaction type data\\n   * @return number of confirmations of internal message identified by internalId and the updated timestamp\\n   */\\n  function getTransactionState(\\n    Transaction memory transaction\\n  ) external view returns (TransactionStateWithoutAdapters memory);\\n\\n  /**\\n   * @notice method to get the internal state of an envelope\\n   * @param envelope the Envelope type data\\n   * @return the envelope current state, containing if it has been confirmed and delivered\\n   */\\n  function getEnvelopeState(Envelope memory envelope) external view returns (EnvelopeState);\\n\\n  /**\\n   * @notice method to get the internal state of an envelope\\n   * @param envelopeId id of the envelope\\n   * @return the envelope current state, containing if it has been confirmed and delivered\\n   */\\n  function getEnvelopeState(bytes32 envelopeId) external view returns (EnvelopeState);\\n\\n  /**\\n   * @notice method to get if transaction has been received by bridge adapter\\n   * @param transactionId id of the transaction as stored internally\\n   * @param bridgeAdapter address of the bridge adapter to check if it has bridged the message\\n   * @return boolean indicating if the message has been received\\n   */\\n  function isTransactionReceivedByAdapter(\\n    bytes32 transactionId,\\n    address bridgeAdapter\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice method to set a new timestamp from where the messages will be valid.\\n   * @param newValidityTimestamp array of objects containing the chain and timestamp where all the previous unconfirmed\\n            messages must be invalidated.\\n   */\\n  function updateMessagesValidityTimestamp(\\n    ValidityTimestampInput[] memory newValidityTimestamp\\n  ) external;\\n\\n  /**\\n   * @notice method to update the number of confirmations necessary for the messages to be accepted as valid\\n   * @param newConfirmations array of objects with the chainId and the new number of needed confirmations\\n   */\\n  function updateConfirmations(ConfirmationInput[] memory newConfirmations) external;\\n\\n  /**\\n   * @notice method that receives a bridged transaction and tries to deliver the contents to destination if possible\\n   * @param encodedTransaction bytes containing the bridged information\\n   * @param originChainId id of the chain where the transaction originated\\n   */\\n  function receiveCrossChainMessage(\\n    bytes memory encodedTransaction,\\n    uint256 originChainId\\n  ) external;\\n\\n  /**\\n   * @notice method to deliver an envelope to its destination\\n   * @param envelope the Envelope typed data\\n   * @dev to deliver an envelope, it needs to have been previously confirmed and not delivered\\n   */\\n  function deliverEnvelope(Envelope memory envelope) external;\\n\\n  /**\\n   * @notice method to add bridge adapters to the allowed list\\n   * @param bridgeAdaptersInput array of objects with the new bridge adapters and supported chains\\n   */\\n  function allowReceiverBridgeAdapters(\\n    ReceiverBridgeAdapterConfigInput[] memory bridgeAdaptersInput\\n  ) external;\\n\\n  /**\\n   * @notice method to remove bridge adapters from the allowed list\\n   * @param bridgeAdaptersInput array of objects with the bridge adapters and supported chains to disallow\\n   */\\n  function disallowReceiverBridgeAdapters(\\n    ReceiverBridgeAdapterConfigInput[] memory bridgeAdaptersInput\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/utils/interfaces/IRescuable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title IRescuable\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the Rescuable contract\\n */\\ninterface IRescuable {\\n  /**\\n   * @notice emitted when erc20 tokens get rescued\\n   * @param caller address that triggers the rescue\\n   * @param token address of the rescued token\\n   * @param to address that will receive the rescued tokens\\n   * @param amount quantity of tokens rescued\\n   */\\n  event ERC20Rescued(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @notice emitted when native tokens get rescued\\n   * @param caller address that triggers the rescue\\n   * @param to address that will receive the rescued tokens\\n   * @param amount quantity of tokens rescued\\n   */\\n  event NativeTokensRescued(address indexed caller, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice method called to rescue tokens sent erroneously to the contract. Only callable by owner\\n   * @param erc20Token address of the token to rescue\\n   * @param to address to send the tokens\\n   * @param amount of tokens to rescue\\n   */\\n  function emergencyTokenTransfer(address erc20Token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice method called to rescue ether sent erroneously to the contract. Only callable by owner\\n   * @param to address to send the eth\\n   * @param amount of eth to rescue\\n   */\\n  function emergencyEtherTransfer(address to, uint256 amount) external;\\n\\n  /**\\n   * @notice method that defines the address that is allowed to rescue tokens\\n   * @return the allowed address\\n   */\\n  function whoCanRescue() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/libs/RLPReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n * Code copied from: https://github.com/hamdiallam/Solidity-RLP/blob/master/contracts/RLPReader.sol\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n  uint8 constant STRING_SHORT_START = 0x80;\\n  uint8 constant STRING_LONG_START = 0xb8;\\n  uint8 constant LIST_SHORT_START = 0xc0;\\n  uint8 constant LIST_LONG_START = 0xf8;\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct RLPItem {\\n    uint256 len;\\n    uint256 memPtr;\\n  }\\n\\n  struct Iterator {\\n    RLPItem item; // Item that's being iterated over.\\n    uint256 nextPtr; // Position of the next item in the list.\\n  }\\n\\n  /*\\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n   * @param self The iterator.\\n   * @return The next element in the iteration.\\n   */\\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n    require(hasNext(self));\\n\\n    uint256 ptr = self.nextPtr;\\n    uint256 itemLength = _itemLength(ptr);\\n    self.nextPtr = ptr + itemLength;\\n\\n    return RLPItem(itemLength, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns true if the iteration has more elements.\\n   * @param self The iterator.\\n   * @return true if the iteration has more elements.\\n   */\\n  function hasNext(Iterator memory self) internal pure returns (bool) {\\n    RLPItem memory item = self.item;\\n    return self.nextPtr < item.memPtr + item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n    uint256 memPtr;\\n    assembly {\\n      memPtr := add(item, 0x20)\\n    }\\n\\n    return RLPItem(item.length, memPtr);\\n  }\\n\\n  /*\\n   * @dev Create an iterator. Reverts if item is not a list.\\n   * @param self The RLP item.\\n   * @return An 'Iterator' over the item.\\n   */\\n  function iterator(\\n    RLPItem memory self\\n  ) internal pure returns (Iterator memory) {\\n    require(isList(self));\\n\\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n    return Iterator(self, ptr);\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   */\\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len;\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   * @return (memPtr, len) pair: location of the item's payload in memory.\\n   */\\n  function payloadLocation(\\n    RLPItem memory item\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 memPtr = item.memPtr + offset;\\n    uint256 len = item.len - offset; // data length\\n    return (memPtr, len);\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   */\\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n    (, uint256 len) = payloadLocation(item);\\n    return len;\\n  }\\n\\n  /*\\n   * @param the RLP item containing the encoded list.\\n   */\\n  function toList(\\n    RLPItem memory item\\n  ) internal pure returns (RLPItem[] memory) {\\n    require(isList(item));\\n\\n    uint256 items = numItems(item);\\n    RLPItem[] memory result = new RLPItem[](items);\\n\\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 dataLen;\\n    for (uint256 i = 0; i < items; i++) {\\n      dataLen = _itemLength(memPtr);\\n      result[i] = RLPItem(dataLen, memPtr);\\n      memPtr = memPtr + dataLen;\\n    }\\n\\n    return result;\\n  }\\n\\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\\n  function isList(RLPItem memory item) internal pure returns (bool) {\\n    if (item.len == 0) return false;\\n\\n    uint8 byte0;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < LIST_SHORT_START) return false;\\n    return true;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of RLP encoded bytes.\\n   */\\n  function rlpBytesKeccak256(\\n    RLPItem memory item\\n  ) internal pure returns (bytes32) {\\n    uint256 ptr = item.memPtr;\\n    uint256 len = item.len;\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(ptr, len)\\n    }\\n    return result;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of the item payload.\\n   */\\n  function payloadKeccak256(\\n    RLPItem memory item\\n  ) internal pure returns (bytes32) {\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(memPtr, len)\\n    }\\n    return result;\\n  }\\n\\n  /** RLPItem conversions into data types **/\\n\\n  // @returns raw rlp encoding in bytes\\n  function toRlpBytes(\\n    RLPItem memory item\\n  ) internal pure returns (bytes memory) {\\n    bytes memory result = new bytes(item.len);\\n    if (result.length == 0) return result;\\n\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr, ptr, item.len);\\n    return result;\\n  }\\n\\n  // any non-zero byte except \\\"0x80\\\" is considered true\\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n    require(item.len == 1);\\n    uint256 result;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      result := byte(0, mload(memPtr))\\n    }\\n\\n    // SEE Github Issue #5.\\n    // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n    // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n    // here.\\n    if (result == 0 || result == STRING_SHORT_START) {\\n      return false;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  function toAddress(RLPItem memory item) internal pure returns (address) {\\n    // 1 byte for the length prefix\\n    require(item.len == 21);\\n\\n    return address(uint160(toUint(item)));\\n  }\\n\\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\\n    require(item.len > 0 && item.len <= 33);\\n\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n    uint256 result;\\n    assembly {\\n      result := mload(memPtr)\\n\\n      // shift to the correct location if neccesary\\n      if lt(len, 32) {\\n        result := div(result, exp(256, sub(32, len)))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // enforces 32 byte length\\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n    // one byte prefix\\n    require(item.len == 33);\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + 1;\\n    assembly {\\n      result := mload(memPtr)\\n    }\\n\\n    return result;\\n  }\\n\\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    require(item.len > 0);\\n\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes memory result = new bytes(len);\\n\\n    uint256 destPtr;\\n    assembly {\\n      destPtr := add(0x20, result)\\n    }\\n\\n    copy(memPtr, destPtr, len);\\n    return result;\\n  }\\n\\n  /*\\n   * Private Helpers\\n   */\\n\\n  // @return number of payload items inside an encoded list.\\n  function numItems(RLPItem memory item) private pure returns (uint256) {\\n    if (item.len == 0) return 0;\\n\\n    uint256 count = 0;\\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 endPtr = item.memPtr + item.len;\\n    while (currPtr < endPtr) {\\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n      count++;\\n    }\\n\\n    return count;\\n  }\\n\\n  // @return entire rlp item byte length\\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n    uint256 itemLen;\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) {\\n      itemLen = 1;\\n    } else if (byte0 < STRING_LONG_START) {\\n      itemLen = byte0 - STRING_SHORT_START + 1;\\n    } else if (byte0 < LIST_SHORT_START) {\\n      assembly {\\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n        memPtr := add(memPtr, 1) // skip over the first byte\\n\\n        /* 32 byte word size */\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    } else if (byte0 < LIST_LONG_START) {\\n      itemLen = byte0 - LIST_SHORT_START + 1;\\n    } else {\\n      assembly {\\n        let byteLen := sub(byte0, 0xf7)\\n        memPtr := add(memPtr, 1)\\n\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    }\\n\\n    return itemLen;\\n  }\\n\\n  // @return number of bytes until the data\\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) {\\n      return 0;\\n    } else if (\\n      byte0 < STRING_LONG_START ||\\n      (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n    ) {\\n      return 1;\\n    } else if (byte0 < LIST_SHORT_START) {\\n      // being explicit\\n      return byte0 - (STRING_LONG_START - 1) + 1;\\n    } else {\\n      return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n  }\\n\\n  /*\\n   * @param src Pointer to source\\n   * @param dest Pointer to destination\\n   * @param len Amount of memory to copy from the source\\n   */\\n  function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len > 0) {\\n      // left over bytes. Mask is used to remove unwanted bytes from the word\\n      uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask)) // zero out src\\n        let destpart := and(mload(dest), mask) // retrieve the bytes\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/voting/libs/MerklePatriciaProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Copied from https://github.com/lidofinance/curve-merkle-oracle/blob/main/contracts/MerklePatriciaProofVerifier.sol\\n */\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from './RLPReader.sol';\\n\\nlibrary MerklePatriciaProofVerifier {\\n  using RLPReader for RLPReader.RLPItem;\\n  using RLPReader for bytes;\\n\\n  /// @dev Validates a Merkle-Patricia-Trie proof.\\n  ///      If the proof proves the inclusion of some key-value pair in the\\n  ///      trie, the value is returned. Otherwise, i.e. if the proof proves\\n  ///      the exclusion of a key from the trie, an empty byte array is\\n  ///      returned.\\n  /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\\n  /// @param path is the key of the node whose inclusion/exclusion we are\\n  ///        proving.\\n  /// @param stack is the stack of MPT nodes (starting with the root) that\\n  ///        need to be traversed during verification.\\n  /// @return value whose inclusion is proved or an empty byte array for\\n  ///         a proof of exclusion\\n  function extractProofValue(\\n    bytes32 rootHash,\\n    bytes memory path,\\n    RLPReader.RLPItem[] memory stack\\n  ) internal pure returns (bytes memory value) {\\n    bytes memory mptKey = _decodeNibbles(path, 0);\\n    uint256 mptKeyOffset = 0;\\n\\n    bytes32 nodeHashHash;\\n    RLPReader.RLPItem[] memory node;\\n\\n    RLPReader.RLPItem memory rlpValue;\\n\\n    if (stack.length == 0) {\\n      // Root hash of empty Merkle-Patricia-Trie\\n      require(\\n        rootHash ==\\n          0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\n      );\\n      return new bytes(0);\\n    }\\n\\n    // Traverse stack of nodes starting at root.\\n    for (uint256 i = 0; i < stack.length; i++) {\\n      // We use the fact that an rlp encoded list consists of some\\n      // encoding of its length plus the concatenation of its\\n      // *rlp-encoded* items.\\n\\n      // The root node is hashed with Keccak-256 ...\\n      if (i == 0 && rootHash != stack[i].rlpBytesKeccak256()) {\\n        revert();\\n      }\\n      // ... whereas all other nodes are hashed with the MPT\\n      // hash function.\\n      if (i != 0 && nodeHashHash != _mptHashHash(stack[i])) {\\n        revert();\\n      }\\n      // We verified that stack[i] has the correct hash, so we\\n      // may safely decode it.\\n      node = stack[i].toList();\\n\\n      if (node.length == 2) {\\n        // Extension or Leaf node\\n\\n        bool isLeaf;\\n        bytes memory nodeKey;\\n        (isLeaf, nodeKey) = _merklePatriciaCompactDecode(node[0].toBytes());\\n\\n        uint256 prefixLength = _sharedPrefixLength(\\n          mptKeyOffset,\\n          mptKey,\\n          nodeKey\\n        );\\n        mptKeyOffset += prefixLength;\\n\\n        if (prefixLength < nodeKey.length) {\\n          // Proof claims divergent extension or leaf. (Only\\n          // relevant for proofs of exclusion.)\\n          // An Extension/Leaf node is divergent iff it \\\"skips\\\" over\\n          // the point at which a Branch node should have been had the\\n          // excluded key been included in the trie.\\n          // Example: Imagine a proof of exclusion for path [1, 4],\\n          // where the current node is a Leaf node with\\n          // path [1, 3, 3, 7]. For [1, 4] to be included, there\\n          // should have been a Branch node at [1] with a child\\n          // at 3 and a child at 4.\\n\\n          // Sanity check\\n          if (i < stack.length - 1) {\\n            // divergent node must come last in proof\\n            revert();\\n          }\\n\\n          return new bytes(0);\\n        }\\n\\n        if (isLeaf) {\\n          // Sanity check\\n          if (i < stack.length - 1) {\\n            // leaf node must come last in proof\\n            revert();\\n          }\\n\\n          if (mptKeyOffset < mptKey.length) {\\n            return new bytes(0);\\n          }\\n\\n          rlpValue = node[1];\\n          return rlpValue.toBytes();\\n        } else {\\n          // extension\\n          // Sanity check\\n          if (i == stack.length - 1) {\\n            // shouldn't be at last level\\n            revert();\\n          }\\n\\n          if (!node[1].isList()) {\\n            // rlp(child) was at least 32 bytes. node[1] contains\\n            // Keccak256(rlp(child)).\\n            nodeHashHash = node[1].payloadKeccak256();\\n          } else {\\n            // rlp(child) was less than 32 bytes. node[1] contains\\n            // rlp(child).\\n            nodeHashHash = node[1].rlpBytesKeccak256();\\n          }\\n        }\\n      } else if (node.length == 17) {\\n        // Branch node\\n\\n        if (mptKeyOffset != mptKey.length) {\\n          // we haven't consumed the entire path, so we need to look at a child\\n          uint8 nibble = uint8(mptKey[mptKeyOffset]);\\n          mptKeyOffset += 1;\\n          if (nibble >= 16) {\\n            // each element of the path has to be a nibble\\n            revert();\\n          }\\n\\n          if (_isEmptyBytesequence(node[nibble])) {\\n            // Sanity\\n            if (i != stack.length - 1) {\\n              // leaf node should be at last level\\n              revert();\\n            }\\n\\n            return new bytes(0);\\n          } else if (!node[nibble].isList()) {\\n            nodeHashHash = node[nibble].payloadKeccak256();\\n          } else {\\n            nodeHashHash = node[nibble].rlpBytesKeccak256();\\n          }\\n        } else {\\n          // we have consumed the entire mptKey, so we need to look at what's contained in this node.\\n\\n          // Sanity\\n          if (i != stack.length - 1) {\\n            // should be at last level\\n            revert();\\n          }\\n\\n          return node[16].toBytes();\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the RLP item.\\n  ///      Merkle-Patricia-Tries use a weird \\\"hash function\\\" that outputs\\n  ///      *variable-length* hashes: If the item is shorter than 32 bytes,\\n  ///      the MPT hash is the item. Otherwise, the MPT hash is the\\n  ///      Keccak-256 hash of the item.\\n  ///      The easiest way to compare variable-length byte sequences is\\n  ///      to compare their Keccak-256 hashes.\\n  /// @param item The RLP item to be hashed.\\n  /// @return Keccak-256(MPT-hash(item))\\n  function _mptHashHash(\\n    RLPReader.RLPItem memory item\\n  ) private pure returns (bytes32) {\\n    if (item.len < 32) {\\n      return item.rlpBytesKeccak256();\\n    } else {\\n      return keccak256(abi.encodePacked(item.rlpBytesKeccak256()));\\n    }\\n  }\\n\\n  function _isEmptyBytesequence(\\n    RLPReader.RLPItem memory item\\n  ) private pure returns (bool) {\\n    if (item.len != 1) {\\n      return false;\\n    }\\n    uint8 b;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      b := byte(0, mload(memPtr))\\n    }\\n    return b == 0x80 /* empty byte string */;\\n  }\\n\\n  function _merklePatriciaCompactDecode(\\n    bytes memory compact\\n  ) private pure returns (bool isLeaf, bytes memory nibbles) {\\n    require(compact.length > 0);\\n    uint256 first_nibble = (uint8(compact[0]) >> 4) & 0xF;\\n    uint256 skipNibbles;\\n    if (first_nibble == 0) {\\n      skipNibbles = 2;\\n      isLeaf = false;\\n    } else if (first_nibble == 1) {\\n      skipNibbles = 1;\\n      isLeaf = false;\\n    } else if (first_nibble == 2) {\\n      skipNibbles = 2;\\n      isLeaf = true;\\n    } else if (first_nibble == 3) {\\n      skipNibbles = 1;\\n      isLeaf = true;\\n    } else {\\n      // Not supposed to happen!\\n      revert();\\n    }\\n    return (isLeaf, _decodeNibbles(compact, skipNibbles));\\n  }\\n\\n  function _decodeNibbles(\\n    bytes memory compact,\\n    uint256 skipNibbles\\n  ) private pure returns (bytes memory nibbles) {\\n    require(compact.length > 0);\\n\\n    uint256 length = compact.length * 2;\\n    require(skipNibbles <= length);\\n    length -= skipNibbles;\\n\\n    nibbles = new bytes(length);\\n    uint256 nibblesLength = 0;\\n\\n    for (uint256 i = skipNibbles; i < skipNibbles + length; i += 1) {\\n      if (i % 2 == 0) {\\n        nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 4) & 0xF);\\n      } else {\\n        nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 0) & 0xF);\\n      }\\n      nibblesLength += 1;\\n    }\\n\\n    assert(nibblesLength == nibbles.length);\\n  }\\n\\n  function _sharedPrefixLength(\\n    uint256 xsOffset,\\n    bytes memory xs,\\n    bytes memory ys\\n  ) private pure returns (uint256) {\\n    uint256 i;\\n    for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {\\n      if (xs[i + xsOffset] != ys[i]) {\\n        return i;\\n      }\\n    }\\n    return i;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-crosschain-infra/src/contracts/libs/EncodingUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nusing EnvelopeUtils for Envelope global;\\nusing TransactionUtils for Transaction global;\\n\\n/**\\n * @notice Object with the necessary information to define a unique envelope\\n * @param nonce sequential (unique) numeric indicator of the Envelope creation\\n * @param origin address that originated the bridging of a message\\n * @param destination address where the message needs to be sent\\n * @param originChainId id of the chain where the message originated\\n * @param destinationChainId id of the chain where the message needs to be bridged\\n * @param message bytes that needs to be bridged\\n */\\nstruct Envelope {\\n  uint256 nonce;\\n  address origin;\\n  address destination;\\n  uint256 originChainId;\\n  uint256 destinationChainId;\\n  bytes message;\\n}\\n\\n/**\\n * @notice Object containing the information of an envelope for internal usage\\n * @param data bytes of the encoded envelope\\n * @param id hash of the encoded envelope\\n */\\nstruct EncodedEnvelope {\\n  bytes data;\\n  bytes32 id;\\n}\\n\\n/**\\n * @title EnvelopeUtils library\\n * @author BGD Labs\\n * @notice Defines utility functions for Envelopes\\n */\\nlibrary EnvelopeUtils {\\n  /**\\n   * @notice method that encodes an Envelope and generates its id\\n   * @param envelope object with the routing information necessary to send a message to a destination chain\\n   * @return object containing the encoded envelope and the envelope id\\n   */\\n  function encode(Envelope memory envelope) internal pure returns (EncodedEnvelope memory) {\\n    EncodedEnvelope memory encodedEnvelope;\\n    encodedEnvelope.data = abi.encode(envelope);\\n    encodedEnvelope.id = getId(encodedEnvelope.data);\\n    return encodedEnvelope;\\n  }\\n\\n  /**\\n   * @notice method to decode and encoded envelope to its raw parameters\\n   * @param envelope bytes with the encoded envelope data\\n   * @return object with the decoded envelope information\\n   */\\n  function decode(bytes memory envelope) internal pure returns (Envelope memory) {\\n    return abi.decode(envelope, (Envelope));\\n  }\\n\\n  /**\\n   * @notice method to get an envelope's id\\n   * @param envelope object with the routing information necessary to send a message to a destination chain\\n   * @return hash id of the envelope\\n   */\\n  function getId(Envelope memory envelope) internal pure returns (bytes32) {\\n    EncodedEnvelope memory encodedEnvelope = encode(envelope);\\n    return encodedEnvelope.id;\\n  }\\n\\n  /**\\n   * @notice method to get an envelope's id\\n   * @param envelope bytes with the encoded envelope data\\n   * @return hash id of the envelope\\n   */\\n  function getId(bytes memory envelope) internal pure returns (bytes32) {\\n    return keccak256(envelope);\\n  }\\n}\\n\\n/**\\n * @notice Object with the necessary information to send an envelope to a bridge\\n * @param nonce sequential (unique) numeric indicator of the Transaction creation\\n * @param encodedEnvelope bytes of an encoded envelope object\\n */\\nstruct Transaction {\\n  uint256 nonce;\\n  bytes encodedEnvelope;\\n}\\n\\n/**\\n * @notice Object containing the information of a transaction for internal usage\\n * @param data bytes of the encoded transaction\\n * @param id hash of the encoded transaction\\n */\\nstruct EncodedTransaction {\\n  bytes data;\\n  bytes32 id;\\n}\\n\\n/**\\n * @title TransactionUtils library\\n * @author BGD Labs\\n * @notice Defines utility functions for Transactions\\n */\\nlibrary TransactionUtils {\\n  /**\\n   * @notice method that encodes a Transaction and generates its id\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return object containing the encoded transaction and the transaction id\\n   */\\n  function encode(\\n    Transaction memory transaction\\n  ) internal pure returns (EncodedTransaction memory) {\\n    EncodedTransaction memory encodedTransaction;\\n    encodedTransaction.data = abi.encode(transaction);\\n    encodedTransaction.id = getId(encodedTransaction.data);\\n    return encodedTransaction;\\n  }\\n\\n  /**\\n   * @notice method that decodes an encoded transaction (bytes) into a Transaction object\\n   * @param transaction encoded transaction object\\n   * @return object containing the decoded Transaction object\\n   */\\n  function decode(bytes memory transaction) internal pure returns (Transaction memory) {\\n    return abi.decode(transaction, (Transaction));\\n  }\\n\\n  /**\\n   * @notice method to get a transaction id\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return hash id of the transaction\\n   */\\n  function getId(Transaction memory transaction) internal pure returns (bytes32) {\\n    EncodedTransaction memory encodedTransaction = encode(transaction);\\n    return encodedTransaction.id;\\n  }\\n\\n  /**\\n   * @notice method to get a transaction id\\n   * @param transaction encoded transaction object\\n   * @return hash id of the transaction\\n   */\\n  function getId(bytes memory transaction) internal pure returns (bytes32) {\\n    return keccak256(transaction);\\n  }\\n\\n  /**\\n   * @notice method to get the envelope information from the transaction object\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return object with decoded information of the envelope in the transaction\\n   */\\n  function getEnvelope(Transaction memory transaction) internal pure returns (Envelope memory) {\\n    return EnvelopeUtils.decode(transaction.encodedEnvelope);\\n  }\\n\\n  /**\\n   * @notice method to get the envelope id from the transaction object\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return hash id of the envelope on a transaction\\n   */\\n  function getEnvelopeId(Transaction memory transaction) internal pure returns (bytes32) {\\n    return EnvelopeUtils.getId(transaction.encodedEnvelope);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solidity-utils/=lib/solidity-utils/src/\",\r\n      \"aave-crosschain-infra/=lib/aave-crosschain-infra/src/\",\r\n      \"aave-token-v3/=lib/aave-token-v3/src/\",\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"@openzeppelin/=lib/aave-crosschain-infra/lib/openzeppelin-contracts/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-token-v2/=lib/aave-token-v3/lib/aave-token-v2/contracts/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hyperlane-monorepo/=lib/aave-crosschain-infra/lib/hyperlane-monorepo/\",\r\n      \"nitro-contracts/=lib/aave-crosschain-infra/lib/nitro-contracts/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solidity-examples/=lib/aave-crosschain-infra/lib/solidity-examples/contracts/\",\r\n      \"aave-crosschain-infra-scripts/=lib/aave-crosschain-infra/scripts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IGovernanceCore\",\"name\":\"govCore\",\"type\":\"address\"},{\"internalType\":\"enum PayloadsControllerUtils.AccessControl[]\",\"name\":\"accessLevels\",\"type\":\"uint8[]\"}],\"name\":\"getConstants\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum PayloadsControllerUtils.AccessControl\",\"name\":\"accessLevel\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"coolDownBeforeVotingStart\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"votingDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint56\",\"name\":\"yesThreshold\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"yesNoDifferential\",\"type\":\"uint56\"},{\"internalType\":\"uint56\",\"name\":\"minPropositionPower\",\"type\":\"uint56\"}],\"internalType\":\"struct IGovernanceCore.VotingConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct IGovernanceDataHelper.VotingConfig[]\",\"name\":\"votingConfigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"precisionDivider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancellationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IGovernanceDataHelper.Constants\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernanceCore\",\"name\":\"govCore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getProposalsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingChainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IGovernanceCore.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum PayloadsControllerUtils.AccessControl\",\"name\":\"accessLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"creationTime\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"votingDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"votingActivationTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"queuingTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cancelTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingPortal\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"snapshotBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"forVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"againstVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"cancellationFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"enum PayloadsControllerUtils.AccessControl\",\"name\":\"accessLevel\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payloadsController\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"payloadId\",\"type\":\"uint40\"}],\"internalType\":\"struct PayloadsControllerUtils.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IGovernanceCore.Proposal\",\"name\":\"proposalData\",\"type\":\"tuple\"}],\"internalType\":\"struct IGovernanceDataHelper.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernanceCore\",\"name\":\"govCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"getRepresentationData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"representative\",\"type\":\"address\"}],\"internalType\":\"struct IGovernanceDataHelper.Representatives[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"votersRepresented\",\"type\":\"address[]\"}],\"internalType\":\"struct IGovernanceDataHelper.Represented[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GovernanceDataHelper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}