{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.22;\r\n\r\n// SafeMath Functions\r\ncontract SafeMath {\r\n    // This contract provides safe mathematical operations to prevent overflow and underflow.\r\n\r\n    // Add two uint256 numbers and check for overflow\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    // Subtract two uint256 numbers and check for underflow\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    // Multiply two uint256 numbers and check for overflow\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    // Divide two uint256 numbers and check for division by zero\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n// IERC20 Interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// IUniswapV2Router and IUniswapV2Factory Interfaces\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// Main Miracle Token Contract\r\ncontract Miracle is SafeMath, IERC20 {\r\n    // Token details\r\n    string public name = \"Miracle\";\r\n    string public symbol = \"MRC\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 5000000 * 10**uint256(decimals);\r\n\r\n    // Contract owner and Uniswap router and factory addresses\r\n    address private _deployer;\r\n    address public routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router public uniswapV2Router = IUniswapV2Router(routerAddress);\r\n    address public factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    IUniswapV2Factory public uniswapV2Factory = IUniswapV2Factory(factoryAddress);\r\n\r\n    // Balances, allowances, and purchase/sale tracking\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _cumulativePurchases;\r\n    mapping(address => uint256) private _cumulativeSales;\r\n\r\n    address public liquidityPool = address(0);\r\n    uint256 public maxBuyPercent = 4;\r\n    uint256 public maxSellPercent = 60;\r\n\r\n    // Whitelisted addresses\r\n    mapping(address => bool) public whitelistedAddresses;\r\n\r\n    // Events for transfers and approvals\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Constructor\r\n    constructor() {\r\n        _deployer = msg.sender;\r\n        _balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    // Modifier to restrict access to only the contract deployer\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == _deployer, \"Only deployer can call this function\"); \r\n        _;\r\n    }\r\n\r\n    // ERC-20: Approve from the zero address should be disallowed\r\n    // Internal approve function\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: Approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: Approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        \r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // ERC-20: Transfer from the zero address should be disallowed\r\n    // Internal transfer function\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: Transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: Insufficient balance\");\r\n        \r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    // ...\r\n\r\n    // Transfer function with custom logic for handling pool and holder amounts\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        uint256 poolAmount = amount * 40 / 100; \r\n        uint256 holderAmount = amount - poolAmount; \r\n        \r\n        if (recipient != liquidityPool && !whitelistedAddresses[msg.sender]) {\r\n            require(_cumulativePurchases[msg.sender] + holderAmount <= totalSupply * maxBuyPercent / 100, \"Exceeds the max buy limit\");\r\n            _cumulativePurchases[msg.sender] += holderAmount;\r\n            _transfer(msg.sender, liquidityPool, poolAmount);\r\n        }\r\n        if (recipient == liquidityPool && !whitelistedAddresses[msg.sender]) {\r\n            require(_balances[msg.sender] * maxSellPercent / 100 >= holderAmount, \"Exceeds the max sell limit\");\r\n            _cumulativeSales[msg.sender] += holderAmount;\r\n        }\r\n        _transfer(msg.sender, recipient, holderAmount);\r\n        return true;\r\n    }\r\n    \r\n    // Approve function\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // TransferFrom function with custom logic for handling pool and holder amounts\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        uint256 poolAmount = amount * 40 / 100; \r\n        uint256 holderAmount = amount - poolAmount; \r\n\r\n        if (recipient != liquidityPool && !whitelistedAddresses[sender]) {\r\n            _transfer(sender, liquidityPool, poolAmount);\r\n        }\r\n\r\n        if (recipient == liquidityPool && !whitelistedAddresses[sender]) {\r\n            require(_balances[sender] * maxSellPercent / 100 >= holderAmount, \"Exceeds the max sell limit\");\r\n        }\r\n\r\n        _transfer(sender, recipient, holderAmount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    // Get the balance of a specific account\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Get the allowance for a specific owner and spender\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Add an address to the whitelist\r\n    function addWhitelisted(address account) external onlyDeployer {\r\n        whitelistedAddresses[account] = true;\r\n    }\r\n\r\n    // Remove an address from the whitelist\r\n    function removeWhitelisted(address account) external onlyDeployer {\r\n        whitelistedAddresses[account] = false;\r\n    }\r\n\r\n    // Check if an address is whitelisted\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return whitelistedAddresses[account];\r\n    }\r\n\r\n// Ensure liquidity can be set only once\r\nbool public isLiquiditySet = false;\r\n\r\n// Function to manually set the liquidity pool address after adding liquidity to Uniswap\r\nfunction setLiquidityPoolAddress() external onlyDeployer {\r\n    require(!isLiquiditySet, \"Liquidity is already set!\");\r\n    liquidityPool = uniswapV2Factory.getPair(address(this), uniswapV2Router.WETH());\r\n    require(liquidityPool != address(0), \"Invalid liquidity pool address\");\r\n    isLiquiditySet = true;\r\n}\r\n\r\n    // Mint new tokens (onlyDeployer modifier)\r\n    function mint(uint256 amount) external onlyDeployer {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        totalSupply = SafeMath.add(totalSupply, amount);\r\n        _balances[msg.sender] = SafeMath.add(_balances[msg.sender], amount);\r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n    // Withdraw ETH from the contract (onlyDeployer modifier)\r\n    function withdrawETH() external onlyDeployer {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Contract has no ETH balance to withdraw\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    // Receive function to accept Ether\r\nreceive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquiditySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Miracle", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19a0fba453b8e8427ddc177474270c46bc49b5047664044022ac0b85773361a8"}