{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /**\\n     * @notice Submit a Phase 0 DepositData object.\\n     * @param pubkey A BLS12-381 public key.\\n     * @param withdrawal_credentials Commitment to a public key for withdrawals.\\n     * @param signature A BLS12-381 signature.\\n     * @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n     * Used as a protection against malformed input.\\n     */\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /**\\n     * @notice Query the current deposit root hash.\\n     * @return The deposit root hash.\\n     */\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /**\\n     * @notice Query the current deposit count.\\n     * @return The deposit count encoded as a little endian 64-bit number.\\n     */\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IELReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for IELReward\\n * @notice Vault will manage methods for rewards, commissions, tax\\n */\\ninterface IELReward {\\n    /**\\n     * @notice transfer ETH\\n     * @param _amount transfer amount\\n     * @param _to transfer to address\\n     */\\n    function transfer(uint256 _amount, address _to) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IELRewardFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for IELRewardFactory\\n * @notice EL Reward factory\\n */\\n\\ninterface IELRewardFactory {\\n    /**\\n     * @notice create vault contract proxy\\n     * @param _operatorId operator id\\n     * @param _manager func manager\\n     */\\n    function create(uint256 _operatorId, address _manager) external returns (address);\\n\\n    event ELRewardProxyDeployed(address _proxyAddress);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILargeStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for LargeStaking\\n * @notice Vault factory\\n */\\n\\nimport {CLStakingExitInfo, CLStakingSlashInfo} from \\\"src/library/ConsensusStruct.sol\\\";\\n\\ninterface ILargeStaking {\\n    event SharedRewardPoolStart(uint256 _operatorId, address _elRewardPoolAddr);\\n    event LargeStake(\\n        uint256 _operatorId,\\n        uint256 _curStakingId,\\n        uint256 _amount,\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing\\n    );\\n    event MigretaStake(\\n        uint256 _operatorId,\\n        uint256 _curStakingId,\\n        uint256 _amount,\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing\\n    );\\n    event AppendStake(uint256 _stakingId, uint256 _amount);\\n    event AppendMigretaStake(uint256 _stakingId, uint256 _stakeAmounts);\\n    event ValidatorRegistered(uint256 _operatorId, uint256 _stakeingId, bytes _pubKey);\\n    event FastUnstake(uint256 _stakingId, uint256 _unstakeAmount);\\n    event LargeUnstake(uint256 _stakingId, uint256 _amount);\\n    event ELShareingRewardSettle(uint256 _operatorId, uint256 _daoReward, uint256 _operatorReward, uint256 _poolReward);\\n    event ElPrivateRewardSettle(\\n        uint256 _stakingId, uint256 _operatorId, uint256 _daoReward, uint256 _operatorReward, uint256 _poolReward\\n    );\\n    event UserRewardClaimed(uint256 _stakingId, address _beneficiary, uint256 _rewards);\\n    event OperatorRewardClaimed(uint256 _operatorId, address _rewardAddresses, uint256 _rewardAmounts);\\n    event OperatorPrivateRewardClaimed(uint256 _stakingId, uint256 _operatorId, uint256 _operatorRewards);\\n    event OperatorSharedRewardClaimed(uint256 _operatorId, uint256 _operatorRewards);\\n    event DaoPrivateRewardClaimed(uint256 _stakingId, address _daoVaultAddress, uint256 _daoRewards);\\n    event DaoSharedRewardClaimed(uint256 _operatorId, address daoVaultAddress, uint256 _daoRewards);\\n    event LargeStakingSlash(uint256 _stakingIds, uint256 _operatorIds, bytes _pubkey, uint256 _amounts);\\n    event ValidatorExitReport(uint256 _operatorId, bytes[] _pubkey);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n    event DaoVaultAddressChanged(address _oldDaoVaultAddress, address _daoVaultAddress);\\n    event DaoELCommissionRateChanged(uint256 _oldDaoElCommissionRate, uint256 _daoElCommissionRate);\\n    event NodeOperatorsRegistryChanged(address _oldNodeOperatorRegistryContract, address _nodeOperatorRegistryAddress);\\n    event ConsensusOracleChanged(address _oldLargeOracleContractAddr, address _largeOracleContractAddr);\\n    event ELRewardFactoryChanged(address _oldElRewardFactory, address _elRewardFactory);\\n    event OperatorSlashChanged(address _oldOperatorSlashContract, address _operatorSlashContract);\\n    event MinStakeAmountChanged(uint256 _oldMinStakeAmount, uint256 _minStakeAmount);\\n    event MaxSlashAmountChanged(uint256 _oldMaxSlashAmount, uint256 _maxSlashAmount);\\n    event ElRewardAddressChanged(address _oldElRewardAddr, address _elRewardAddr);\\n\\n    function getOperatorValidatorCounts(uint256 _operatorId) external view returns (uint256);\\n\\n    function reportCLStakingData(\\n        CLStakingExitInfo[] memory _clStakingExitInfo,\\n        CLStakingSlashInfo[] memory _clStakingSlashInfo\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Node Operator registry\\n *\\n * Registration and management of Node Operator\\n */\\ninterface INodeOperatorsRegistry {\\n    /**\\n     * @notice Add node operator named `name` with reward address `rewardAddress` and _owner\\n     * @param _name Human-readable name\\n     * @param _controllerAddress Ethereum 1 address for the operator's management authority\\n     * @param _owner operator owner address\\n     * @param _rewardAddresses reward addresses\\n     * @param _ratios reward ratios\\n     * @return id a unique key of the added operator\\n     */\\n    function registerOperator(\\n        string calldata _name,\\n        address _controllerAddress,\\n        address _owner,\\n        address[] calldata _rewardAddresses,\\n        uint256[] calldata _ratios\\n    ) external payable returns (uint256 id);\\n\\n    /**\\n     * @notice Set an operator as trusted\\n     * @param _id operator id\\n     */\\n    function setTrustedOperator(uint256 _id) external;\\n\\n    /**\\n     * @notice Remove an operator as trusted\\n     * @param _id operator id\\n     */\\n    function removeTrustedOperator(uint256 _id) external;\\n\\n    /**\\n     * @notice Get information about an operator\\n     * @param _id operator id\\n     * @param _fullInfo Get all information\\n     */\\n    function getNodeOperator(uint256 _id, bool _fullInfo)\\n        external\\n        view\\n        returns (\\n            bool trusted,\\n            string memory name,\\n            address owner,\\n            address controllerAddress,\\n            address vaultContractAddress\\n        );\\n\\n    /**\\n     * @notice Returns total number of node operators\\n     */\\n    function getNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get information about an operator vault contract address\\n     * @param _id operator id\\n     */\\n    function getNodeOperatorVaultContract(uint256 _id) external view returns (address vaultContractAddress);\\n\\n    /**\\n     * @notice Get operator rewardSetting\\n     * @param operatorId operator id\\n     */\\n    function getNodeOperatorRewardSetting(uint256 operatorId)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\\n     * @param _id operator id\\n     */\\n    function isTrustedOperator(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\\n     * @param _controllerAddress controller address\\n     */\\n    function isTrustedOperatorOfControllerAddress(address _controllerAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice operator pledge balance\\n     * @param _operatorId operator id\\n     */\\n    function getPledgeInfoOfOperator(uint256 _operatorId) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice get operator comission rate\\n     * @param _operatorIds operator id\\n     */\\n    function getOperatorCommissionRate(uint256[] memory _operatorIds) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice When a validator run by an operator goes seriously offline, it will be slashed\\n     * @param _slashType slashType\\n     * @param _slashIds tokenId or stakingId\\n     * @param _operatorIds operator id\\n     * @param _amounts slash amount\\n     */\\n    function slash(\\n        uint256 _slashType,\\n        uint256[] memory _slashIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    /**\\n     * @notice deposit pledge fund for operator\\n     * @param _operatorId operator Id\\n     */\\n    function deposit(uint256 _operatorId) external payable;\\n\\n    /**\\n     * @notice Returns whether an operator is Blacklist\\n     * @param _operatorId operator id\\n     */\\n    function isBlacklistOperator(uint256 _operatorId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether an operator is quit\\n     * @param _id operator id\\n     */\\n    function isQuitOperator(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Determine whether the operator meets the pledge requirements\\n     * @param _operatorId operator id\\n     */\\n    function isConformBasicPledge(uint256 _operatorId) external view returns (bool);\\n\\n    event NodeOperatorRegistered(\\n        uint256 _id,\\n        string _name,\\n        address _controllerAddress,\\n        address _vaultContractAddress,\\n        address[] _rewardAddresses,\\n        uint256[] _ratios\\n    );\\n    event OperatorWithdraw(uint256 _operatorId, uint256 _withdrawAmount, address _to);\\n    event OperatorQuit(uint256 _operatorId, uint256 _nowVault, address _to);\\n    event NodeOperatorTrustedSet(uint256 _id, string _name, bool _trusted);\\n    event NodeOperatorTrustedRemove(uint256 _id, string _name, bool _trusted);\\n    event NodeOperatorBlacklistSet(uint256 _id);\\n    event NodeOperatorBlacklistRemove(uint256 _id);\\n    event NodeOperatorNameSet(uint256 _id, string _name);\\n    event NodeOperatorRewardAddressSet(uint256 _id, address[] _rewardAddresses, uint256[] _ratios);\\n    event NodeOperatorControllerAddressSet(uint256 _id, string _name, address _controllerAddress);\\n    event NodeOperatorOwnerAddressSet(uint256 _id, string _name, address _ownerAddress);\\n    event Transferred(address _to, uint256 _amount);\\n    event Slashed(uint256 _operatorId, uint256 _amount);\\n    event PledgeDeposited(uint256 _amount, uint256 _operatorId);\\n    event Withdraw(uint256 _amount, uint256 _operatorId, address _to);\\n    event LiquidStakingChanged(address _from, address _to);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n    event DaoVaultAddressChanged(address _oldDaoVaultAddress, address _daoVaultAddress);\\n    event RegistrationFeeChanged(uint256 _oldFee, uint256 _fee);\\n    event PermissionlessBlockNumberSet(uint256 _blockNumber);\\n    event OperatorClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event DaoClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event CommissionRateChanged(uint256 _oldRate, uint256 _rate);\\n    event OperatorArrearsReduce(uint256 _operatorId, uint256 value);\\n    event OperatorArrearsIncrease(uint256 _operatorId, uint256 value);\\n    event VaultFactorContractSet(address _vaultFactoryContract, address _vaultFactoryContractAddress);\\n    event OperatorVaultContractReset(address _oldVaultContractAddress, address _vaultContractAddress);\\n    event OperatorSlashContractSet(address _oldOperatorSlashContract, address _operatorSlashContractAddress);\\n    event DefaultOperatorCommissionRateChanged(\\n        uint256 _oldDefaultOperatorCommission, uint256 _defaultOperatorCommission\\n    );\\n    event LargeStakingChanged(address _oldLargeStakingContractAddress, address _largeStakingContractAddress);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOperatorSlash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for OperatorSlash\\n * @notice OperatorSlash contract\\n */\\ninterface IOperatorSlash {\\n    /**\\n     * @notice Receive slash fund, Because the operator may have insufficient margin, _slashAmounts may be less than or equal to _requireAmounts\\n     * @param _slashType slashType\\n     * @param _slashIds exit tokenIds\\n     * @param _operatorIds operator\\n     * @param _slashAmounts slash amount\\n     * @param _requireAmounts require slas amount\\n     */\\n    function slashReceive(\\n        uint256 _slashType,\\n        uint256[] memory _slashIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _slashAmounts,\\n        uint256[] memory _requireAmounts\\n    ) external payable;\\n\\n    function claimCompensated(uint256[] memory _tokenIds, address _owner) external returns (uint256);\\n\\n    function claimCompensatedOfLargeStaking(uint256[] memory _stakingIds, address _owner) external returns (uint256);\\n    /**\\n     * @notice According to the report results of the oracle machine, the operator who has reduced nft will be punished\\n     * @param _exitTokenIds token id\\n     * @param _amounts slash amounts\\n     */\\n    function slashOperator(uint256[] memory _exitTokenIds, uint256[] memory _amounts) external;\\n    function slashOperatorOfLargeStaking(\\n        uint256[] memory _stakingIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    /**\\n     * @notice The receiving function of the penalty, used for the automatic transfer after the operator recharges the margin\\n     * @param _operatorId operator Id\\n     * @param _amount slash amount\\n     */\\n    function slashArrearsReceive(uint256 _operatorId, uint256 _amount) external payable;\\n\\n    event SlashArrearsReceive(uint256 _operatorId, uint256 _amount);\\n    event SlashArrearsReceiveOfNft(uint256 _operatorId, uint256 _tokenId, uint256 _amount);\\n    event SlashArrearsReceiveOfLargeStaking(uint256 _operatorId, uint256 stakingId, uint256 _amount);\\n    event SlashReceiveOfNft(uint256 _operatorId, uint256 tokenId, uint256 _slashAmount, uint256 _requirAmounts);\\n    event SlashReceiveOfLargeStaking(\\n        uint256 _operatorId, uint256 stakingId, uint256 _slashAmount, uint256 _requirAmounts\\n    );\\n    event SlashAmountPerBlockPerValidatorSet(\\n        uint256 _oldSlashAmountPerBlockPerValidator, uint256 _slashAmountPerBlockPerValidator\\n    );\\n\\n    event NodeOperatorRegistryContractSet(\\n        address _oldNodeOperatorRegistryContract, address _nodeOperatorRegistryContract\\n    );\\n    event VaultManagerContractSet(address _oldVaultManagerContractAddress, address _vaultManagerContract);\\n    event WithdrawalRequestContractSet(\\n        address _oldWithdrawalRequestContract, address _withdrawalRequestContractAddress\\n    );\\n    event LiquidStakingChanged(address _oldLiquidStakingContract, address _liquidStakingContractAddress);\\n    event LargeStakingChanged(address _oldLargeStakingContractAddress, address _largeStakingContractAddress);\\n    event DaoAddressChanged(address oldDao, address _dao);\\n    event CompensatedClaimedOfNft(address _owner, uint256 _tokenId, uint256 _compensated);\\n    event CompensatedClaimedOfLargeStaking(address _owner, uint256 _stakingId, uint256 _compensated);\\n}\\n\"\r\n    },\r\n    \"src/largeStaking/LargeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"src/interfaces/IELRewardFactory.sol\\\";\\nimport \\\"src/interfaces/INodeOperatorsRegistry.sol\\\";\\nimport \\\"src/interfaces/IDepositContract.sol\\\";\\nimport \\\"src/interfaces/IELReward.sol\\\";\\nimport \\\"src/interfaces/IOperatorSlash.sol\\\";\\nimport \\\"src/interfaces/ILargeStaking.sol\\\";\\nimport {CLStakingExitInfo, CLStakingSlashInfo} from \\\"src/library/ConsensusStruct.sol\\\";\\n\\n/**\\n * @title Large Staking\\n *\\n * Non-custodial large-amount pledge, supporting the migration of verifiers\\n */\\ncontract LargeStaking is\\n    ILargeStaking,\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    IOperatorSlash public operatorSlashContract;\\n    INodeOperatorsRegistry public nodeOperatorRegistryContract;\\n    address public largeOracleContractAddr;\\n    IELRewardFactory public elRewardFactory;\\n    IDepositContract public depositContract;\\n\\n    struct StakingInfo {\\n        bool isELRewardSharing; // Whether to share the execution layer reward pool\\n        uint256 stakingId; // Staking order id\\n        uint256 operatorId; // Specify which operator operates the validator\\n        uint256 stakingAmount; // The total amount of user stake\\n        uint256 alreadyUsedAmount; // Amount deposited into Eth2 or unstake\\n        uint256 unstakeRequestAmount; // The amount the user requested to withdraw\\n        uint256 unstakeAmount; // Amount the user has withdrawn\\n        address owner; // The owner of the staking order\uff0cused for claim execution layer reward\\n        address elRewardAddr; // Address to receive el rewards\\n        bytes32 withdrawCredentials; // Withdrawal certificate\\n    }\\n\\n    mapping(uint256 => StakingInfo) public largeStakings; // Staking order\\n    uint256 public totalLargeStakingCounts;\\n    mapping(uint256 => uint256) internal totalLargeStakeAmounts; // key is operatorId\\n\\n    uint256 public MIN_STAKE_AMOUNT;\\n    uint256 public MAX_SLASH_AMOUNT;\\n\\n    mapping(uint256 => bytes[]) internal validators; // key is stakingId\\n\\n    struct ValidatorInfo {\\n        uint256 stakingId;\\n        uint256 registerBlock;\\n        uint256 exitBlock;\\n        uint256 slashAmount;\\n    }\\n\\n    mapping(bytes => ValidatorInfo) public validatorInfo; // key is pubkey\\n\\n    // dao address\\n    address public dao;\\n    // dao treasury address\\n    address public daoVaultAddress;\\n    // dao el commisssionRate\\n    uint256 public daoElCommissionRate;\\n\\n    mapping(uint256 => address) public elPrivateRewardPool; // key is stakingId\\n    mapping(uint256 => address) public elSharedRewardPool; // key is operatorId\\n\\n    // share reward pool\\n    struct SettleInfo {\\n        uint256 valuePerSharePoint;\\n        uint256 rewardBalance;\\n    }\\n\\n    mapping(uint256 => SettleInfo) public eLSharedRewardSettleInfo; // key is stakingId\\n    mapping(uint256 => uint256) public unclaimedSharedRewards; // key is operatorId\\n    mapping(uint256 => uint256) public operatorSharedRewards; // key is operatorId\\n    mapping(uint256 => uint256) public daoSharedRewards; // key is operatorId\\n    mapping(uint256 => uint256) public totalShares; // key is operatorId\\n    mapping(uint256 => uint256) public valuePerShare; // key is operatorId\\n    uint256 private constant UNIT = 1e18;\\n\\n    // private reward pool\\n    mapping(uint256 => uint256) public operatorPrivateRewards; // key is stakingId\\n    mapping(uint256 => uint256) public daoPrivateRewards; // key is stakingId\\n    mapping(uint256 => uint256) public unclaimedPrivateRewards; // key is stakingId\\n\\n    error PermissionDenied();\\n    error InvalidParameter();\\n    error InvalidAddr();\\n    error InvalidAmount();\\n    error SharedRewardPoolOpened();\\n    error SharedRewardPoolNotOpened();\\n    error RequireOperatorTrusted();\\n    error InvalidWithdrawalCredentials();\\n    error InsufficientFunds();\\n    error InsufficientMargin();\\n    error InvalidRewardAddr();\\n    error DuplicatePubKey();\\n    error InvalidRewardRatio();\\n    error InvalidReport();\\n\\n    modifier onlyDao() {\\n        if (msg.sender != dao) revert PermissionDenied();\\n        _;\\n    }\\n\\n    modifier onlyLargeOracle() {\\n        if (msg.sender != largeOracleContractAddr) revert PermissionDenied();\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /**\\n     * @notice initialize LargeStaking Contract\\n     */\\n    function initialize(\\n        address _dao,\\n        address _daoVaultAddress,\\n        address _nodeOperatorRegistryAddress,\\n        address _operatorSlashContract,\\n        address _largeOracleContractAddr,\\n        address _elRewardFactory,\\n        address _depositContract\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        if (\\n            _nodeOperatorRegistryAddress == address(0) || _largeOracleContractAddr == address(0)\\n                || _elRewardFactory == address(0) || _dao == address(0) || _daoVaultAddress == address(0)\\n                || _depositContract == address(0) || _operatorSlashContract == address(0)\\n        ) {\\n            revert InvalidAddr();\\n        }\\n\\n        nodeOperatorRegistryContract = INodeOperatorsRegistry(_nodeOperatorRegistryAddress);\\n        elRewardFactory = IELRewardFactory(_elRewardFactory);\\n        depositContract = IDepositContract(_depositContract);\\n        operatorSlashContract = IOperatorSlash(_operatorSlashContract);\\n        largeOracleContractAddr = _largeOracleContractAddr;\\n        dao = _dao;\\n        daoVaultAddress = _daoVaultAddress;\\n        daoElCommissionRate = 1000;\\n        MIN_STAKE_AMOUNT = 32 ether;\\n        MAX_SLASH_AMOUNT = 2 ether;\\n    }\\n\\n    /**\\n     * @notice The operator starts the shared revenue pool. If the operator is not started,\\n     * users cannot use the shared revenue pool for pledge\\n     */\\n    function startupSharedRewardPool(uint256 _operatorId) public {\\n        (,, address owner,,) = nodeOperatorRegistryContract.getNodeOperator(_operatorId, false);\\n        if (msg.sender != owner) revert PermissionDenied();\\n\\n        address elRewardPoolAddr = elSharedRewardPool[_operatorId];\\n        if (elRewardPoolAddr != address(0)) revert SharedRewardPoolOpened();\\n\\n        elRewardPoolAddr = elRewardFactory.create(_operatorId, address(this));\\n        elSharedRewardPool[_operatorId] = elRewardPoolAddr;\\n\\n        emit SharedRewardPoolStart(_operatorId, elRewardPoolAddr);\\n    }\\n\\n    /**\\n     * @notice The user initiates a large amount of pledge,\\n     * allowing the user to set the owner, withdrawal certificate,\\n     * whether to use the shared revenue pool.\\n     * Once set, cannot be changed\\n     */\\n    function largeStake(\\n        uint256 _operatorId,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing\\n    ) public payable {\\n        if (msg.value < MIN_STAKE_AMOUNT || msg.value % 32 ether != 0) revert InvalidAmount();\\n        // operatorId must be a trusted operator\\n        if (!nodeOperatorRegistryContract.isTrustedOperator(_operatorId)) revert RequireOperatorTrusted();\\n\\n        if (_isELRewardSharing) {\\n            settleElSharedReward(_operatorId);\\n        }\\n\\n        uint256 curStakingId;\\n        address elRewardPoolAddr;\\n        (curStakingId, elRewardPoolAddr) =\\n            _stake(_operatorId, msg.sender, _elRewardAddr, _withdrawCredentials, _isELRewardSharing, msg.value, false);\\n        totalLargeStakeAmounts[_operatorId] += msg.value;\\n        emit LargeStake(\\n            _operatorId, curStakingId, msg.value, msg.sender, _elRewardAddr, _withdrawCredentials, _isELRewardSharing\\n        );\\n    }\\n\\n    /**\\n     * @notice The user adds pledge funds to an existing pledge order.\\n     * Check through the owner and withdrawal certificate to prevent pledge errors\\n     */\\n    function appendLargeStake(uint256 _stakingId, address _owner, address _withdrawCredentials) public payable {\\n        if (msg.value < 32 ether || msg.value % 32 ether != 0 || _stakingId < 1 || _stakingId > totalLargeStakingCounts)\\n        {\\n            revert InvalidAmount();\\n        }\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        bytes32 userWithdrawalCredentials = getWithdrawCredentials(_withdrawCredentials);\\n\\n        if (stakingInfo.owner != _owner || stakingInfo.withdrawCredentials != userWithdrawalCredentials) {\\n            revert InvalidParameter();\\n        }\\n\\n        if (stakingInfo.isELRewardSharing) {\\n            settleElSharedReward(stakingInfo.operatorId);\\n            _updateShare(\\n                _stakingId,\\n                stakingInfo.operatorId,\\n                stakingInfo.stakingAmount - stakingInfo.unstakeAmount,\\n                msg.value,\\n                true\\n            );\\n        }\\n\\n        largeStakings[_stakingId].stakingAmount += msg.value;\\n        totalLargeStakeAmounts[stakingInfo.operatorId] += msg.value;\\n\\n        emit AppendStake(_stakingId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Users can unstake.\\n     * If the funds have not been pledged, the funds will be withdrawn synchronously.\\n     * If the funds have been recharged to eth2, the funds will be withdrawn asynchronously and automatically to the withdrawal certificate address\\n     */\\n    function largeUnstake(uint256 _stakingId, uint256 _amount) public nonReentrant {\\n        StakingInfo storage stakingInfo = largeStakings[_stakingId];\\n        if (\\n            _amount < 32 ether || _amount % 32 ether != 0\\n                || _amount > stakingInfo.stakingAmount - stakingInfo.unstakeRequestAmount\\n        ) revert InvalidAmount();\\n\\n        if (msg.sender != stakingInfo.owner) revert PermissionDenied();\\n\\n        uint256 _unstakeAmount = 0;\\n        if (stakingInfo.stakingAmount > stakingInfo.alreadyUsedAmount) {\\n            uint256 fastAmount = stakingInfo.stakingAmount - stakingInfo.alreadyUsedAmount;\\n            if (fastAmount > _amount) {\\n                _unstakeAmount = _amount;\\n            } else {\\n                _unstakeAmount = fastAmount;\\n            }\\n\\n            if (stakingInfo.isELRewardSharing) {\\n                settleElSharedReward(stakingInfo.operatorId);\\n                _updateShare(\\n                    _stakingId,\\n                    stakingInfo.operatorId,\\n                    stakingInfo.stakingAmount - stakingInfo.unstakeAmount,\\n                    _unstakeAmount,\\n                    false\\n                );\\n            }\\n\\n            // _unstakeAmount is not equal to 0, which means that the unstake is completed synchronously\\n            stakingInfo.unstakeAmount += _unstakeAmount;\\n            stakingInfo.alreadyUsedAmount += _unstakeAmount;\\n            totalLargeStakeAmounts[stakingInfo.operatorId] -= _unstakeAmount;\\n\\n            payable(stakingInfo.owner).transfer(_unstakeAmount);\\n            emit FastUnstake(_stakingId, _unstakeAmount);\\n        }\\n\\n        stakingInfo.unstakeRequestAmount += _amount;\\n\\n        emit LargeUnstake(_stakingId, _amount);\\n    }\\n\\n    /**\\n     * @notice Allows the operator to migrate already running validators into the protocol.\\n     */\\n    function migrateStake(\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing,\\n        bytes[] calldata _pubKeys\\n    ) public {\\n        uint256 operatorId = nodeOperatorRegistryContract.isTrustedOperatorOfControllerAddress(msg.sender);\\n        if (operatorId == 0) revert RequireOperatorTrusted();\\n\\n        if (_isELRewardSharing) {\\n            settleElSharedReward(operatorId);\\n        }\\n\\n        uint256 curStakingId;\\n        address elRewardPoolAddr;\\n        uint256 stakeAmounts = _pubKeys.length * 32 ether;\\n        (curStakingId, elRewardPoolAddr) =\\n            _stake(operatorId, _owner, _elRewardAddr, _withdrawCredentials, _isELRewardSharing, stakeAmounts, true);\\n        for (uint256 i = 0; i < _pubKeys.length; ++i) {\\n            _savePubKey(curStakingId, _pubKeys[i]);\\n        }\\n        totalLargeStakeAmounts[operatorId] += stakeAmounts;\\n\\n        emit MigretaStake(\\n            operatorId, curStakingId, stakeAmounts, _owner, _elRewardAddr, _withdrawCredentials, _isELRewardSharing\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows the operator to migrate already running validators into existing stake orders.\\n     */\\n    function appendMigrateStake(\\n        uint256 _stakingId,\\n        address _owner,\\n        address _withdrawCredentials,\\n        bytes[] calldata _pubKeys\\n    ) public {\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        bytes32 userWithdrawalCredentials = getWithdrawCredentials(_withdrawCredentials);\\n\\n        if (\\n            stakingInfo.owner != _owner || stakingInfo.withdrawCredentials != userWithdrawalCredentials\\n                || _stakingId < 1 || _stakingId > totalLargeStakingCounts\\n        ) {\\n            revert InvalidParameter();\\n        }\\n\\n        uint256 stakeAmounts = _pubKeys.length * 32 ether;\\n\\n        if (stakingInfo.isELRewardSharing) {\\n            settleElSharedReward(stakingInfo.operatorId);\\n            _updateShare(\\n                _stakingId,\\n                stakingInfo.operatorId,\\n                stakingInfo.stakingAmount - stakingInfo.unstakeAmount,\\n                stakeAmounts,\\n                true\\n            );\\n        }\\n\\n        largeStakings[_stakingId].stakingAmount += stakeAmounts;\\n        largeStakings[_stakingId].alreadyUsedAmount += stakeAmounts;\\n        totalLargeStakeAmounts[stakingInfo.operatorId] += stakeAmounts;\\n\\n        for (uint256 i = 0; i < _pubKeys.length; ++i) {\\n            _savePubKey(_stakingId, _pubKeys[i]);\\n        }\\n\\n        emit AppendMigretaStake(_stakingId, stakeAmounts);\\n    }\\n\\n    function _stake(\\n        uint256 _operatorId,\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing,\\n        uint256 _stakingAmount,\\n        bool isMigrate\\n    ) internal returns (uint256, address) {\\n        if (_withdrawCredentials == address(0) || _withdrawCredentials.balance < 1 wei) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        uint256 curStakingId = totalLargeStakingCounts + 1;\\n        totalLargeStakingCounts = curStakingId;\\n\\n        bytes32 userWithdrawalCredentials = getWithdrawCredentials(_withdrawCredentials);\\n        largeStakings[totalLargeStakingCounts] = StakingInfo({\\n            isELRewardSharing: _isELRewardSharing,\\n            stakingId: curStakingId,\\n            operatorId: _operatorId,\\n            stakingAmount: _stakingAmount,\\n            alreadyUsedAmount: isMigrate ? _stakingAmount : 0,\\n            unstakeRequestAmount: 0,\\n            unstakeAmount: 0,\\n            owner: _owner,\\n            elRewardAddr: _elRewardAddr,\\n            withdrawCredentials: userWithdrawalCredentials\\n        });\\n\\n        address elRewardPoolAddr;\\n        if (!_isELRewardSharing) {\\n            elRewardPoolAddr = elRewardFactory.create(_operatorId, address(this));\\n            elPrivateRewardPool[curStakingId] = elRewardPoolAddr;\\n        } else {\\n            elRewardPoolAddr = elSharedRewardPool[_operatorId];\\n            if (address(0) == elRewardPoolAddr) revert SharedRewardPoolNotOpened();\\n\\n            _updateShare(curStakingId, _operatorId, 0, _stakingAmount, true);\\n        }\\n\\n        return (curStakingId, elRewardPoolAddr);\\n    }\\n\\n    function _updateShare(\\n        uint256 _stakingId,\\n        uint256 _operatorId,\\n        uint256 _curAmount,\\n        uint256 _updataAmount,\\n        bool _isStake\\n    ) internal {\\n        SettleInfo storage info = eLSharedRewardSettleInfo[_stakingId];\\n\\n        info.rewardBalance += (valuePerShare[_operatorId] - info.valuePerSharePoint) * (_curAmount) / UNIT;\\n        info.valuePerSharePoint = valuePerShare[_operatorId];\\n\\n        if (_isStake) {\\n            totalShares[_operatorId] += _updataAmount;\\n        } else {\\n            totalShares[_operatorId] -= _updataAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate WithdrawCredentials based on address\\n     */\\n    function getWithdrawCredentials(address _withdrawCredentials) public pure returns (bytes32) {\\n        return abi.decode(abi.encodePacked(hex\\\"010000000000000000000000\\\", _withdrawCredentials), (bytes32));\\n    }\\n\\n    /**\\n     * @notice operator registration validators\\n     */\\n    function registerValidator(\\n        uint256 _stakingId,\\n        bytes[] calldata _pubkeys,\\n        bytes[] calldata _signatures,\\n        bytes32[] calldata _depositDataRoots\\n    ) external nonReentrant {\\n        // must be a trusted operator\\n        uint256 operatorId = nodeOperatorRegistryContract.isTrustedOperatorOfControllerAddress(msg.sender);\\n        if (operatorId == 0) revert RequireOperatorTrusted();\\n\\n        uint256 depositAmount = _pubkeys.length * 32 ether;\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        if ((stakingInfo.stakingAmount - stakingInfo.alreadyUsedAmount) < depositAmount) {\\n            revert InsufficientFunds();\\n        }\\n\\n        bytes memory withdrawCredentials = abi.encodePacked(stakingInfo.withdrawCredentials);\\n\\n        for (uint256 i = 0; i < _pubkeys.length; ++i) {\\n            depositContract.deposit{value: 32 ether}(\\n                _pubkeys[i], withdrawCredentials, _signatures[i], _depositDataRoots[i]\\n            );\\n            emit ValidatorRegistered(operatorId, _stakingId, _pubkeys[i]);\\n            _savePubKey(_stakingId, _pubkeys[i]);\\n        }\\n\\n        largeStakings[_stakingId].alreadyUsedAmount += depositAmount;\\n    }\\n\\n    function _savePubKey(uint256 _stakingId, bytes memory _pubkey) internal {\\n        if (validatorInfo[_pubkey].stakingId != 0) revert DuplicatePubKey();\\n        validators[_stakingId].push(_pubkey);\\n        validatorInfo[_pubkey] =\\n            ValidatorInfo({stakingId: _stakingId, registerBlock: block.number, exitBlock: 0, slashAmount: 0});\\n    }\\n\\n    /**\\n     * @notice Get pending rewards\\n     */\\n    function reward(uint256 _stakingId) public view returns (uint256 userReward) {\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        (uint256 operatorId,, uint256 rewards) = getRewardPoolInfo(_stakingId);\\n\\n        if (stakingInfo.isELRewardSharing) {\\n            SettleInfo memory settleInfo = eLSharedRewardSettleInfo[_stakingId];\\n            userReward = settleInfo.rewardBalance;\\n\\n            if (totalShares[operatorId] == 0) {\\n                return (userReward);\\n            }\\n\\n            uint256 unsettledPoolReward;\\n            if (rewards != 0) {\\n                (,, unsettledPoolReward) = _calcElReward(rewards, operatorId);\\n            }\\n\\n            uint256 unsettledUserReward = (\\n                valuePerShare[operatorId] + unsettledPoolReward * UNIT / totalShares[operatorId]\\n                    - settleInfo.valuePerSharePoint\\n            ) * (stakingInfo.stakingAmount - stakingInfo.unstakeAmount) / UNIT;\\n            userReward += unsettledUserReward;\\n        } else {\\n            userReward =\\n                unclaimedPrivateRewards[_stakingId] - daoPrivateRewards[_stakingId] - operatorPrivateRewards[_stakingId];\\n            if (rewards != 0) {\\n                (,, uint256 unsettledPoolReward) = _calcElReward(rewards, operatorId);\\n                userReward += unsettledPoolReward;\\n            }\\n        }\\n\\n        return (userReward);\\n    }\\n\\n    /**\\n     * @notice Get reward pool information\\n     */\\n    function getRewardPoolInfo(uint256 _stakingId)\\n        public\\n        view\\n        returns (uint256 operatorId, address rewardPoolAddr, uint256 rewards)\\n    {\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        operatorId = stakingInfo.operatorId;\\n        if (stakingInfo.isELRewardSharing) {\\n            rewardPoolAddr = elSharedRewardPool[operatorId];\\n            rewards = rewardPoolAddr.balance - unclaimedSharedRewards[operatorId];\\n        } else {\\n            rewardPoolAddr = elPrivateRewardPool[_stakingId];\\n            rewards = rewardPoolAddr.balance - unclaimedPrivateRewards[_stakingId];\\n        }\\n        return (operatorId, rewardPoolAddr, rewards);\\n    }\\n\\n    /**\\n     * @notice Settle the shared reward pool. Each operator has only one shared reward pool\\n     */\\n    function settleElSharedReward(uint256 _operatorId) public {\\n        address rewardPoolAddr = elSharedRewardPool[_operatorId];\\n        if (address(0) == rewardPoolAddr) revert SharedRewardPoolNotOpened();\\n\\n        uint256 rewards = rewardPoolAddr.balance - unclaimedSharedRewards[_operatorId];\\n        if (rewards == 0) return;\\n        (uint256 daoReward, uint256 operatorReward, uint256 poolReward) = _calcElReward(rewards, _operatorId);\\n\\n        operatorSharedRewards[_operatorId] += operatorReward;\\n        daoSharedRewards[_operatorId] += daoReward;\\n        unclaimedSharedRewards[_operatorId] = rewardPoolAddr.balance;\\n\\n        valuePerShare[_operatorId] += poolReward * UNIT / totalShares[_operatorId]; // settle\\n\\n        emit ELShareingRewardSettle(_operatorId, daoReward, operatorReward, poolReward);\\n    }\\n\\n    /**\\n     * @notice Settle the private reward pool.\\n     * Each pledge sheet of a private reward pool has its own private reward pool\\n     */\\n    function settleElPrivateReward(uint256 _stakingId) public {\\n        if (_stakingId < 1 || _stakingId > totalLargeStakingCounts) revert InvalidParameter();\\n\\n        address rewardPoolAddr = elPrivateRewardPool[_stakingId];\\n        uint256 _operatorId = largeStakings[_stakingId].operatorId;\\n        uint256 rewards = rewardPoolAddr.balance - unclaimedPrivateRewards[_stakingId];\\n        if (rewards == 0) return;\\n\\n        (uint256 daoReward, uint256 operatorReward, uint256 poolReward) = _calcElReward(rewards, _operatorId);\\n        unclaimedPrivateRewards[_stakingId] = rewardPoolAddr.balance;\\n        operatorPrivateRewards[_stakingId] += operatorReward;\\n        daoPrivateRewards[_stakingId] += daoReward;\\n\\n        emit ElPrivateRewardSettle(_stakingId, _operatorId, daoReward, operatorReward, poolReward);\\n    }\\n\\n    function _calcElReward(uint256 rewards, uint256 _operatorId)\\n        internal\\n        view\\n        returns (uint256 daoReward, uint256 operatorReward, uint256 poolReward)\\n    {\\n        uint256[] memory _operatorIds = new uint256[] (1);\\n        _operatorIds[0] = _operatorId;\\n        uint256[] memory operatorElCommissionRate;\\n        operatorElCommissionRate = nodeOperatorRegistryContract.getOperatorCommissionRate(_operatorIds);\\n        operatorReward = (rewards * operatorElCommissionRate[0]) / 10000;\\n        daoReward = (rewards * daoElCommissionRate) / 10000;\\n        poolReward = rewards - operatorReward - daoReward;\\n        return (daoReward, operatorReward, poolReward);\\n    }\\n\\n    /**\\n     * @notice Users claim benefits of the execution layer\\n     */\\n    function claimRewardsOfUser(uint256 _stakingId, uint256 rewards) public nonReentrant {\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        SettleInfo storage settleInfo = eLSharedRewardSettleInfo[_stakingId];\\n\\n        address rewardPoolAddr;\\n        if (stakingInfo.isELRewardSharing) {\\n            settleElSharedReward(stakingInfo.operatorId);\\n\\n            rewardPoolAddr = elSharedRewardPool[stakingInfo.operatorId];\\n\\n            uint256 totalRewards = settleInfo.rewardBalance\\n                + (valuePerShare[stakingInfo.operatorId] - settleInfo.valuePerSharePoint)\\n                    * (stakingInfo.stakingAmount - stakingInfo.unstakeAmount) / UNIT;\\n\\n            settleInfo.valuePerSharePoint = valuePerShare[stakingInfo.operatorId];\\n\\n            settleInfo.rewardBalance = totalRewards - rewards;\\n            unclaimedSharedRewards[stakingInfo.operatorId] -= rewards;\\n        } else {\\n            settleElPrivateReward(_stakingId);\\n            rewardPoolAddr = elPrivateRewardPool[_stakingId];\\n            if (\\n                rewards + operatorPrivateRewards[_stakingId] + daoPrivateRewards[_stakingId]\\n                    > unclaimedPrivateRewards[_stakingId]\\n            ) {\\n                revert InvalidAmount();\\n            }\\n            unclaimedPrivateRewards[_stakingId] -= rewards;\\n        }\\n\\n        _transfer(rewardPoolAddr, stakingInfo.elRewardAddr, rewards);\\n        emit UserRewardClaimed(_stakingId, stakingInfo.elRewardAddr, rewards);\\n\\n        uint256[] memory _stakingIds = new uint256[] (1);\\n        _stakingIds[0] = _stakingId;\\n        operatorSlashContract.claimCompensatedOfLargeStaking(_stakingIds, stakingInfo.elRewardAddr);\\n    }\\n\\n    /**\\n     * @notice The operator claim the reward commission\\n     */\\n    function claimRewardsOfOperator(uint256 _operatorId, uint256[] memory _privatePoolStakingIds)\\n        external\\n        nonReentrant\\n    {\\n        StakingInfo memory stakingInfo;\\n        (uint256 pledgeBalance, uint256 requirBalance) =\\n            nodeOperatorRegistryContract.getPledgeInfoOfOperator(_operatorId);\\n        if (pledgeBalance < requirBalance) revert InsufficientMargin();\\n\\n        address operatorElSharedRewardPool = elSharedRewardPool[_operatorId];\\n        if (operatorElSharedRewardPool != address(0)) {\\n            settleElSharedReward(_operatorId);\\n            uint256 operatorRewards = operatorSharedRewards[_operatorId];\\n            if (operatorRewards != 0) {\\n                operatorSharedRewards[_operatorId] = 0;\\n                unclaimedSharedRewards[_operatorId] -= operatorRewards;\\n                emit OperatorSharedRewardClaimed(stakingInfo.operatorId, operatorRewards);\\n                _distributeOperatorRewards(operatorElSharedRewardPool, operatorRewards, _operatorId);\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _privatePoolStakingIds.length; ++i) {\\n            uint256 stakingId = _privatePoolStakingIds[i];\\n            stakingInfo = largeStakings[stakingId];\\n            if (stakingInfo.isELRewardSharing || stakingInfo.operatorId != _operatorId) {\\n                continue;\\n            }\\n\\n            settleElPrivateReward(stakingId);\\n\\n            uint256 operatorRewards = operatorPrivateRewards[stakingId];\\n            if (operatorRewards == 0) continue;\\n\\n            operatorPrivateRewards[stakingId] = 0;\\n            unclaimedPrivateRewards[stakingId] -= operatorRewards;\\n            emit OperatorPrivateRewardClaimed(stakingId, stakingInfo.operatorId, operatorRewards);\\n            _distributeOperatorRewards(elPrivateRewardPool[stakingId], operatorRewards, stakingInfo.operatorId);\\n        }\\n    }\\n\\n    function _distributeOperatorRewards(address _elRewardContract, uint256 _operatorRewards, uint256 _operatorId)\\n        internal\\n    {\\n        address[] memory rewardAddresses;\\n        uint256[] memory ratios;\\n        uint256 totalAmount = 0;\\n        uint256 totalRatios = 0;\\n\\n        (rewardAddresses, ratios) = nodeOperatorRegistryContract.getNodeOperatorRewardSetting(_operatorId);\\n        if (rewardAddresses.length == 0) revert InvalidRewardAddr();\\n        uint256[] memory rewardAmounts = new uint256[] (rewardAddresses.length);\\n\\n        totalAmount = 0;\\n        totalRatios = 0;\\n        for (uint256 i = 0; i < rewardAddresses.length; ++i) {\\n            uint256 ratio = ratios[i];\\n            totalRatios += ratio;\\n\\n            // If it is the last reward address, calculate by subtraction\\n            if (i == rewardAddresses.length - 1) {\\n                rewardAmounts[i] = _operatorRewards - totalAmount;\\n            } else {\\n                uint256 amount = _operatorRewards * ratio / 100;\\n                rewardAmounts[i] = amount;\\n                totalAmount += amount;\\n            }\\n        }\\n\\n        if (totalRatios != 100) revert InvalidRewardRatio();\\n\\n        for (uint256 j = 0; j < rewardAddresses.length; ++j) {\\n            _transfer(_elRewardContract, rewardAddresses[j], rewardAmounts[j]);\\n            emit OperatorRewardClaimed(_operatorId, rewardAddresses[j], rewardAmounts[j]);\\n        }\\n    }\\n\\n    /**\\n     * @notice The Dao claim the reward commission\\n     */\\n    function claimRewardsOfDao(uint256[] memory _stakingIds) external nonReentrant {\\n        StakingInfo memory stakingInfo;\\n        for (uint256 i = 0; i < _stakingIds.length; ++i) {\\n            uint256 stakingId = _stakingIds[i];\\n            stakingInfo = largeStakings[stakingId];\\n            if (stakingInfo.isELRewardSharing) {\\n                settleElSharedReward(stakingInfo.operatorId);\\n                uint256 daoRewards = daoSharedRewards[stakingInfo.operatorId];\\n                if (daoRewards == 0) continue;\\n\\n                daoSharedRewards[stakingInfo.operatorId] = 0;\\n                unclaimedSharedRewards[stakingInfo.operatorId] -= daoRewards;\\n\\n                _transfer(elSharedRewardPool[stakingInfo.operatorId], daoVaultAddress, daoRewards);\\n                emit DaoSharedRewardClaimed(stakingInfo.operatorId, daoVaultAddress, daoRewards);\\n            } else {\\n                settleElPrivateReward(stakingId);\\n                uint256 daoRewards = daoPrivateRewards[stakingId];\\n                if (daoRewards == 0) continue;\\n\\n                daoPrivateRewards[stakingId] = 0;\\n                unclaimedPrivateRewards[stakingId] -= daoRewards;\\n\\n                _transfer(elPrivateRewardPool[stakingId], daoVaultAddress, daoRewards);\\n                emit DaoPrivateRewardClaimed(stakingId, daoVaultAddress, daoRewards);\\n            }\\n        }\\n    }\\n\\n    function _transfer(address _poolAddr, address _to, uint256 _amounts) internal {\\n        IELReward(_poolAddr).transfer(_amounts, _to);\\n    }\\n\\n    /**\\n     * @notice The oracle reports the verifier's exit and slash information.\\n     */\\n    function reportCLStakingData(\\n        CLStakingExitInfo[] memory _clStakingExitInfo,\\n        CLStakingSlashInfo[] memory _clStakingSlashInfo\\n    ) external onlyLargeOracle {\\n        StakingInfo memory stakingInfo;\\n        for (uint256 i = 0; i < _clStakingExitInfo.length; ++i) {\\n            CLStakingExitInfo memory sInfo = _clStakingExitInfo[i];\\n            for (uint256 j = 0; j < sInfo.pubkeys.length; ++j) {\\n                ValidatorInfo memory vInfo = validatorInfo[sInfo.pubkeys[j]];\\n                if (vInfo.stakingId != sInfo.stakingId || vInfo.exitBlock != 0) {\\n                    revert InvalidReport();\\n                }\\n\\n                if (vInfo.stakingId != sInfo.stakingId || vInfo.exitBlock != 0) {\\n                    revert InvalidReport();\\n                }\\n                validatorInfo[sInfo.pubkeys[j]].exitBlock = block.number;\\n            }\\n\\n            stakingInfo = largeStakings[sInfo.stakingId];\\n            uint256 thisUnstakeAmount = 32 ether * sInfo.pubkeys.length;\\n            uint256 newUnstakeAmount = stakingInfo.unstakeAmount + thisUnstakeAmount;\\n            if (newUnstakeAmount > stakingInfo.stakingAmount) revert InvalidReport();\\n\\n            if (stakingInfo.isELRewardSharing) {\\n                settleElSharedReward(stakingInfo.operatorId);\\n                _updateShare(\\n                    sInfo.stakingId,\\n                    stakingInfo.operatorId,\\n                    stakingInfo.stakingAmount - stakingInfo.unstakeAmount,\\n                    thisUnstakeAmount,\\n                    false\\n                );\\n            }\\n\\n            largeStakings[sInfo.stakingId].unstakeAmount = newUnstakeAmount;\\n            // The operator actively withdraws from the validator\\n            if (newUnstakeAmount > stakingInfo.unstakeRequestAmount) {\\n                // When unstakeRequestAmount > unstakeAmount, the operator will exit the validator\\n                largeStakings[sInfo.stakingId].unstakeRequestAmount = newUnstakeAmount;\\n            }\\n\\n            totalLargeStakeAmounts[stakingInfo.operatorId] -= thisUnstakeAmount;\\n            emit ValidatorExitReport(stakingInfo.operatorId, sInfo.pubkeys);\\n        }\\n\\n        uint256[] memory _stakingIds = new uint256[] (_clStakingSlashInfo.length);\\n        uint256[] memory _operatorIds = new uint256[] (_clStakingSlashInfo.length);\\n        uint256[] memory _amounts = new uint256[] (_clStakingSlashInfo.length);\\n        for (uint256 i = 0; i < _clStakingSlashInfo.length; ++i) {\\n            CLStakingSlashInfo memory sInfo = _clStakingSlashInfo[i];\\n            ValidatorInfo memory vInfo = validatorInfo[sInfo.pubkey];\\n\\n            if (vInfo.stakingId != sInfo.stakingId || vInfo.slashAmount + sInfo.slashAmount > MAX_SLASH_AMOUNT) {\\n                revert InvalidReport();\\n            }\\n\\n            _stakingIds[i] = sInfo.stakingId;\\n            _operatorIds[i] = largeStakings[sInfo.stakingId].operatorId;\\n            _amounts[i] = sInfo.slashAmount;\\n            validatorInfo[sInfo.pubkey].slashAmount += sInfo.slashAmount;\\n            emit LargeStakingSlash(_stakingIds[i], _operatorIds[i], sInfo.pubkey, _amounts[i]);\\n        }\\n\\n        if (_clStakingSlashInfo.length != 0) {\\n            operatorSlashContract.slashOperatorOfLargeStaking(_stakingIds, _operatorIds, _amounts);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the number of verifiers of the operator,\\n     * including those who have recharged and those who are waiting for recharge\\n     */\\n    function getOperatorValidatorCounts(uint256 _operatorId) external view returns (uint256) {\\n        return totalLargeStakeAmounts[_operatorId] / 32 ether;\\n    }\\n\\n    /**\\n     * @notice Get all the pledge orders of the user\\n     */\\n    function getStakingInfoOfOwner(address _owner) public view returns (StakingInfo[] memory) {\\n        uint256 number = 0;\\n        for (uint256 i = 1; i <= totalLargeStakingCounts; ++i) {\\n            if (largeStakings[i].owner == _owner) {\\n                number += 1;\\n            }\\n        }\\n        StakingInfo[] memory userStakings = new StakingInfo[] (number);\\n        uint256 index = 0;\\n        for (uint256 i = 1; i <= totalLargeStakingCounts; ++i) {\\n            if (largeStakings[i].owner == _owner) {\\n                userStakings[index++] = largeStakings[i];\\n            }\\n        }\\n\\n        return userStakings;\\n    }\\n\\n    /**\\n     * @notice Get all validators under the pledge order\\n     */\\n    function getValidatorsOfStakingId(uint256 _stakingId) public view returns (bytes[] memory) {\\n        return validators[_stakingId];\\n    }\\n\\n    /**\\n     * @notice set staking el reward\\n     */\\n    function changeElRewardAddress(uint256 _stakingId, address _elRewardAddr) public {\\n        StakingInfo memory stakingInfo = largeStakings[_stakingId];\\n        if (stakingInfo.owner != msg.sender) {\\n            revert PermissionDenied();\\n        }\\n\\n        if (_elRewardAddr == address(0)) {\\n            revert InvalidAddr();\\n        }\\n\\n        emit ElRewardAddressChanged(stakingInfo.elRewardAddr, _elRewardAddr);\\n        largeStakings[_stakingId].elRewardAddr = _elRewardAddr;\\n    }\\n\\n    /**\\n     * @notice set contract setting\\n     */\\n    function setLargeStakingSetting(\\n        address _dao,\\n        address _daoVaultAddress,\\n        uint256 _daoElCommissionRate,\\n        uint256 _MIN_STAKE_AMOUNT,\\n        uint256 _MAX_SLASH_AMOUNT,\\n        address _nodeOperatorRegistryAddress,\\n        address _largeOracleContractAddr,\\n        address _elRewardFactory,\\n        address _operatorSlashContract\\n    ) public onlyDao {\\n        if (_dao != address(0)) {\\n            emit DaoAddressChanged(dao, _dao);\\n            dao = _dao;\\n        }\\n\\n        if (_daoVaultAddress != address(0)) {\\n            emit DaoVaultAddressChanged(daoVaultAddress, _daoVaultAddress);\\n            daoVaultAddress = _daoVaultAddress;\\n        }\\n\\n        if (_daoElCommissionRate != 0) {\\n            emit DaoELCommissionRateChanged(daoElCommissionRate, _daoElCommissionRate);\\n            daoElCommissionRate = _daoElCommissionRate;\\n        }\\n\\n        if (_MIN_STAKE_AMOUNT != 0) {\\n            emit MinStakeAmountChanged(MIN_STAKE_AMOUNT, _MIN_STAKE_AMOUNT);\\n            MIN_STAKE_AMOUNT = _MIN_STAKE_AMOUNT;\\n        }\\n\\n        if (_MAX_SLASH_AMOUNT != 0) {\\n            emit MaxSlashAmountChanged(MAX_SLASH_AMOUNT, _MAX_SLASH_AMOUNT);\\n            MAX_SLASH_AMOUNT = _MAX_SLASH_AMOUNT;\\n        }\\n\\n        if (_nodeOperatorRegistryAddress != address(0)) {\\n            emit NodeOperatorsRegistryChanged(address(nodeOperatorRegistryContract), _nodeOperatorRegistryAddress);\\n            nodeOperatorRegistryContract = INodeOperatorsRegistry(_nodeOperatorRegistryAddress);\\n        }\\n\\n        if (_largeOracleContractAddr != address(0)) {\\n            emit ConsensusOracleChanged(largeOracleContractAddr, _largeOracleContractAddr);\\n            largeOracleContractAddr = _largeOracleContractAddr;\\n        }\\n\\n        if (_elRewardFactory != address(0)) {\\n            emit ELRewardFactoryChanged(address(elRewardFactory), _elRewardFactory);\\n            elRewardFactory = IELRewardFactory(_elRewardFactory);\\n        }\\n\\n        if (_operatorSlashContract != address(0)) {\\n            emit OperatorSlashChanged(address(operatorSlashContract), _operatorSlashContract);\\n            operatorSlashContract = IOperatorSlash(_operatorSlashContract);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/library/ConsensusStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\nstruct WithdrawInfo {\\n    uint64 operatorId;\\n    // The income that should be issued by this operatorId in this settlement\\n    uint96 clReward;\\n    // For this settlement, whether operatorId has exit node, if no exit node is 0;\\n    // The value of one node exiting is 32 eth(or 32.9 ETH), and the value of two nodes exiting is 64eth (or 63 ETH).\\n    // If the value is less than 32, the corresponding amount will be punished\\n    // clCapital is the principal of nft exit held by the protocol\\n    uint96 clCapital;\\n}\\n\\nstruct ExitValidatorInfo {\\n    // Example Exit the token Id of the validator. No exit is an empty array.\\n    uint64 exitTokenId;\\n    // Height of exit block\\n    uint96 exitBlockNumber;\\n    // Amount of slash\\n    uint96 slashAmount;\\n}\\n\\n// Validator quits reporting information\\nstruct CLStakingExitInfo {\\n    uint128 stakingId;\\n    bytes[] pubkeys;\\n}\\n\\n// Verifier penalty reporting information\\nstruct CLStakingSlashInfo {\\n    uint128 stakingId;\\n    // Trigger penalty on operator if slash occurs\\n    uint128 slashAmount;\\n    bytes pubkey;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-upgrades/=lib/openzeppelin-upgrades/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DuplicatePubKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequireOperatorTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharedRewardPoolNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharedRewardPoolOpened\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmounts\",\"type\":\"uint256\"}],\"name\":\"AppendMigretaStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AppendStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldLargeOracleContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_largeOracleContractAddr\",\"type\":\"address\"}],\"name\":\"ConsensusOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"DaoAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDaoElCommissionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoElCommissionRate\",\"type\":\"uint256\"}],\"name\":\"DaoELCommissionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoRewards\",\"type\":\"uint256\"}],\"name\":\"DaoPrivateRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoVaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoRewards\",\"type\":\"uint256\"}],\"name\":\"DaoSharedRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldDaoVaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"}],\"name\":\"DaoVaultAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldElRewardFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_elRewardFactory\",\"type\":\"address\"}],\"name\":\"ELRewardFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolReward\",\"type\":\"uint256\"}],\"name\":\"ELShareingRewardSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_daoReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolReward\",\"type\":\"uint256\"}],\"name\":\"ElPrivateRewardSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldElRewardAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"}],\"name\":\"ElRewardAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unstakeAmount\",\"type\":\"uint256\"}],\"name\":\"FastUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_curStakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isELRewardSharing\",\"type\":\"bool\"}],\"name\":\"LargeStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingIds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorIds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"LargeStakingSlash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LargeUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMaxSlashAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSlashAmount\",\"type\":\"uint256\"}],\"name\":\"MaxSlashAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_curStakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isELRewardSharing\",\"type\":\"bool\"}],\"name\":\"MigretaStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldNodeOperatorRegistryContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nodeOperatorRegistryAddress\",\"type\":\"address\"}],\"name\":\"NodeOperatorsRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorRewards\",\"type\":\"uint256\"}],\"name\":\"OperatorPrivateRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddresses\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmounts\",\"type\":\"uint256\"}],\"name\":\"OperatorRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorRewards\",\"type\":\"uint256\"}],\"name\":\"OperatorSharedRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOperatorSlashContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operatorSlashContract\",\"type\":\"address\"}],\"name\":\"OperatorSlashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_elRewardPoolAddr\",\"type\":\"address\"}],\"name\":\"SharedRewardPoolStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"UserRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_pubkey\",\"type\":\"bytes[]\"}],\"name\":\"ValidatorExitReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SLASH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"}],\"name\":\"appendLargeStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"appendMigrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"}],\"name\":\"changeElRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsOfDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_privatePoolStakingIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsOfOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"claimRewardsOfUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoElCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoPrivateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoSharedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eLSharedRewardSettleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valuePerSharePoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elPrivateRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elRewardFactory\",\"outputs\":[{\"internalType\":\"contract IELRewardFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elSharedRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getOperatorValidatorCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"getRewardPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardPoolAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakingInfoOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isELRewardSharing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyUsedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeRequestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"elRewardAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawCredentials\",\"type\":\"bytes32\"}],\"internalType\":\"struct LargeStaking.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"getValidatorsOfStakingId\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"}],\"name\":\"getWithdrawCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeOperatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorSlashContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_largeOracleContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elRewardFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largeOracleContractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isELRewardSharing\",\"type\":\"bool\"}],\"name\":\"largeStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"largeStakings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isELRewardSharing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyUsedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeRequestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"elRewardAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawCredentials\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"largeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elRewardAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawCredentials\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isELRewardSharing\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"migrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeOperatorRegistryContract\",\"outputs\":[{\"internalType\":\"contract INodeOperatorsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operatorPrivateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operatorSharedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorSlashContract\",\"outputs\":[{\"internalType\":\"contract IOperatorSlash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_depositDataRoots\",\"type\":\"bytes32[]\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"stakingId\",\"type\":\"uint128\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"internalType\":\"struct CLStakingExitInfo[]\",\"name\":\"_clStakingExitInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"stakingId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"slashAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct CLStakingSlashInfo[]\",\"name\":\"_clStakingSlashInfo\",\"type\":\"tuple[]\"}],\"name\":\"reportCLStakingData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoElCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MIN_STAKE_AMOUNT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_SLASH_AMOUNT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeOperatorRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_largeOracleContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_elRewardFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorSlashContract\",\"type\":\"address\"}],\"name\":\"setLargeStakingSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"settleElPrivateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"settleElSharedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"startupSharedRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLargeStakingCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedPrivateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedSharedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"validatorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valuePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LargeStaking", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}