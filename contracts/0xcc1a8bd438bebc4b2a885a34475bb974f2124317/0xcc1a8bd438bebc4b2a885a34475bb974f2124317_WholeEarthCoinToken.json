{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/WECToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./base/ERC20.sol\\\";\\nimport \\\"./base/ERC20Burnable.sol\\\";\\nimport \\\"./base/ERC20Mintable.sol\\\";\\nimport \\\"./base/ERC20Pausable.sol\\\";\\n\\ncontract WholeEarthCoinToken is ERC20, ERC20Burnable, ERC20Mintable, ERC20Pausable {\\n  string private _name = \\\"WholeEarthCoin\\\";\\n\\tstring private _symbol = \\\"WEC\\\";\\n\\tuint8 private _decimals = 18;\\n\\n  constructor(address _initialAddress, uint256 totalSupply) public {\\n\\t\\t_mint(_initialAddress, totalSupply);\\n\\t}\\n\\n  /**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei.\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/base/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account) public view returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) public returns (bool) {\\n\\t\\t_transfer(msg.sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) public returns (bool) {\\n\\t\\t_approve(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20};\\n\\t *\\n\\t * Requirements:\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for `sender`'s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount)\\n\\t\\tpublic\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tsender,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_allowances[sender][msg.sender].sub(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"ERC20: transfer amount exceeds allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue)\\n\\t\\tpublic\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[msg.sender][spender].add(addedValue)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\\n\\t\\tpublic\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[msg.sender][spender].sub(\\n\\t\\t\\t\\tsubtractedValue,\\n\\t\\t\\t\\t\\\"ERC20: decreased allowance below zero\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves tokens `amount` from `sender` to `recipient`.\\n\\t *\\n\\t * This is internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(address sender, address recipient, uint256 amount)\\n\\t\\tinternal\\n\\t{\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_balances[sender] = _balances[sender].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: transfer amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_balances[recipient] = _balances[recipient].add(amount);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\n\\t\\t_balances[account] = _balances[account].add(amount);\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_balances[account] = _balances[account].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: burn amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n\\t *\\n\\t * This is internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n\\t * from the caller's allowance.\\n\\t *\\n\\t * See {_burn} and {_approve}.\\n\\t */\\n\\tfunction _burnFrom(address account, uint256 amount) internal {\\n\\t\\t_burn(account, amount);\\n\\t\\t_approve(\\n\\t\\t\\taccount,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_allowances[account][msg.sender].sub(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"ERC20: burn amount exceeds allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/base/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/base/ERC20Mintable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../dependencies/Ownable.sol\\\";\\n\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20, Ownable {\\n\\t/**\\n\\t * @dev See {ERC20-_mint}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have the {MinterRole}.\\n\\t */\\n\\tfunction mint(address account, uint256 amount)\\n\\t\\tpublic\\n\\t\\tonlyOwner\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_mint(account, amount);\\n\\t\\treturn true;\\n\\t}\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/base/ERC20Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../dependencies/Pausable.sol\\\";\\n\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 with pausable transfers and allowances.\\n *\\n * Useful if you want to stop trades until the end of a crowdsale, or have\\n * an emergency switch for freezing all token transfers in the event of a large\\n * bug.\\n */\\ncontract ERC20Pausable is ERC20, Pausable {\\n\\tfunction transfer(address to, uint256 value)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.transfer(to, value);\\n\\t}\\n\\n\\tfunction transferFrom(address from, address to, uint256 value)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.transferFrom(from, to, value);\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 value)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.approve(spender, value);\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.increaseAllowance(spender, addedValue);\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.decreaseAllowance(spender, subtractedValue);\\n\\t}\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/dependencies/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() internal {\\n\\t\\t_owner = msg.sender;\\n\\t\\temit OwnershipTransferred(address(0), _owner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the caller is the current owner.\\n\\t */\\n\\tfunction isOwner() public view returns (bool) {\\n\\t\\treturn msg.sender == _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t */\\n\\tfunction _transferOwnership(address newOwner) internal {\\n\\t\\trequire(\\n\\t\\t\\tnewOwner != address(0),\\n\\t\\t\\t\\\"Ownable: new owner is the zero address\\\"\\n\\t\\t);\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/dependencies/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Ownable {\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered by a pauser (`account`).\\n\\t */\\n\\tevent Paused(address account);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted by a pauser (`account`).\\n\\t */\\n\\tevent Unpaused(address account);\\n\\n\\tbool private _paused;\\n\\n\\t/**\\n\\t * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n\\t * to the deployer.\\n\\t */\\n\\tconstructor() internal {\\n\\t\\t_paused = false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the contract is paused, and false otherwise.\\n\\t */\\n\\tfunction paused() public view returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is not paused.\\n\\t */\\n\\tmodifier whenNotPaused() {\\n\\t\\trequire(!_paused, \\\"Pausable: paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is paused.\\n\\t */\\n\\tmodifier whenPaused() {\\n\\t\\trequire(_paused, \\\"Pausable: not paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Called by a pauser to pause, triggers stopped state.\\n\\t */\\n\\tfunction pause() public onlyOwner whenNotPaused {\\n\\t\\t_paused = true;\\n\\t\\temit Paused(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Called by a pauser to unpause, returns to normal state.\\n\\t */\\n\\tfunction unpause() public onlyOwner whenPaused {\\n\\t\\t_paused = false;\\n\\t\\temit Unpaused(msg.sender);\\n\\t}\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n}\"\r\n    },\r\n    \"/home/apple/Documents/Sotatek/wec-smart-contracts/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Subtraction cannot overflow.\\n\\t *\\n\\t * _Available since v2.4.0._\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\tuint256 c = a - b;\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t *\\n\\t * _Available since v2.4.0._\\n\\t */\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\tuint256 c = a / b;\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts with custom message when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t *\\n\\t * _Available since v2.4.0._\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(b != 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAddress\",\"type\":\"address\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "WholeEarthCoinToken", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000345587d91c5b7fee52178f9907660423a58116250000000000000000000000000000000000000000033b2e3c9fd0803ce8000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}