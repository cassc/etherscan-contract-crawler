{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Jigokuezu.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title ERC1155 Token\\n * @author 0xSumo @PBADAO\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(address operator_, address from_, uint256 id_, uint256 amount_, bytes calldata data_) external returns (bytes4);\\n    function onERC1155BatchReceived(address operator_, address from_, uint256[] calldata ids_, uint256[] calldata amounts_, bytes calldata data_) external returns (bytes4);\\n}\\n\\nabstract contract ERC1155Enumerable {\\n    \\n    string public name;\\n    string public symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        name = name_; \\n        symbol = symbol_; \\n    }\\n\\n    event TransferSingle(address indexed operator_, address indexed from_,  address indexed to_, uint256 id_, uint256 amount_);\\n    event TransferBatch(address indexed operator_, address indexed from_, address indexed to_, uint256[] ids_, uint256[] amounts_);\\n    event ApprovalForAll(address indexed owner_, address indexed operator_, bool approved_);\\n    event URI(string value_, uint256 indexed id_);\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    mapping(uint256 => address[]) public tokenToOwners;\\n    mapping(uint256 => mapping(address => uint256)) public tokenToOwnersToIndex;\\n\\n    struct TokenBalances {\\n        address owner;\\n        uint256 balance;\\n    }\\n\\n    function _addEnumerableData(address address_, uint256 id_) internal {\\n        if (balanceOf[address_][id_] == 0) {\\n            uint256 _nextIndex = tokenToOwners[id_].length;\\n            tokenToOwners[id_].push(address_);\\n            tokenToOwnersToIndex[id_][address_] = _nextIndex;\\n        }\\n    }\\n\\n    function _removeEnumerableData(address address_, uint256 id_) internal {\\n        if (balanceOf[address_][id_] == 0) {\\n            uint256 _userIndex = tokenToOwnersToIndex[id_][address_];\\n            uint256 _lastIndex = tokenToOwners[id_].length - 1;\\n            if (_userIndex != _lastIndex) {\\n                address _userAtLastIndex = tokenToOwners[id_][_lastIndex];\\n                tokenToOwners[id_][_userIndex] = _userAtLastIndex;\\n                tokenToOwnersToIndex[id_][_userAtLastIndex] = _userIndex;\\n            }\\n\\n            tokenToOwners[id_].pop();\\n            delete tokenToOwnersToIndex[id_][address_];\\n        }\\n    }\\n\\n    function getOwnersOfTokenId(uint256 id_) public view returns (address[] memory) {\\n        return tokenToOwners[id_];\\n    }\\n\\n    function getOwnersOfTokenIdAndBalance(uint256 id_) public view returns (TokenBalances[] memory) {\\n        address[] memory _owners = getOwnersOfTokenId(id_);\\n        uint256 _ownersLength = _owners.length;\\n        TokenBalances[] memory _TokenBalancesAll = new TokenBalances[] (_ownersLength);\\n\\n        for (uint256 i = 0; i < _ownersLength; i++) {\\n            address _currentOwner = _owners[i];\\n            _TokenBalancesAll[i] = TokenBalances(\\n                _currentOwner,\\n                balanceOf[_currentOwner][id_]\\n            );\\n        }\\n        return _TokenBalancesAll;\\n    }\\n\\n    function getTotalSupplyOfIds(uint256[] calldata ids_) public view returns (uint256) {\\n        uint256 _tokens;\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            _tokens += getOwnersOfTokenId(ids_[i]).length;\\n        }\\n        return _tokens;\\n    }\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    function _isSameLength(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    function _isApprovedOrOwner(address from_) internal view returns (bool) {\\n        return msg.sender == from_ || isApprovedForAll[from_][msg.sender];\\n    }\\n\\n    function _ERC1155Supported(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) internal {\\n        require(to_.code.length == 0 ? to_ != address(0) :\\n            ERC1155TokenReceiver(to_).onERC1155Received(\\n                msg.sender, from_, id_, amount_, data_) ==\\n            ERC1155TokenReceiver.onERC1155Received.selector,\\n                \\\"_ERC1155Supported(): Unsupported Recipient!\\\"\\n        );\\n    }\\n\\n    function _ERC1155BatchSupported(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) internal {\\n        require(to_.code.length == 0 ? to_ != address(0) :\\n            ERC1155TokenReceiver(to_).onERC1155BatchReceived(\\n                msg.sender, from_, ids_, amounts_, data_) ==\\n            ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n                \\\"_ERC1155BatchSupported(): Unsupported Recipient!\\\"\\n        );\\n    }\\n\\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\\n        isApprovedForAll[msg.sender][operator_] = approved_;\\n        emit ApprovalForAll(msg.sender, operator_, approved_);\\n    }\\n\\n    function _transfer(address from_, address to_, uint256 id_, uint256 amount_) internal {\\n        _addEnumerableData(to_, id_);\\n        balanceOf[to_][id_] += amount_;\\n        balanceOf[from_][id_] -= amount_;\\n        _removeEnumerableData(from_, id_);\\n    }\\n\\n    function safeTransferFrom(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) public virtual {\\n        require(_isApprovedOrOwner(from_));\\n        _transfer(from_, to_, id_, amount_);\\n        emit TransferSingle(msg.sender, from_, to_, id_, amount_);\\n        _ERC1155Supported(from_, to_, id_, amount_, data_);\\n    }\\n\\n    function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) public virtual {\\n        require(_isSameLength(ids_.length, amounts_.length));\\n        require(_isApprovedOrOwner(from_));\\n\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            _transfer(from_, to_, ids_[i], amounts_[i]);\\n        }\\n\\n        emit TransferBatch(msg.sender, from_, to_, ids_, amounts_);\\n\\n        _ERC1155BatchSupported(from_, to_, ids_, amounts_, data_);\\n    }\\n\\n    function _mintInternal(address to_, uint256 id_, uint256 amount_) internal {\\n        _addEnumerableData(to_, id_);\\n        balanceOf[to_][id_] += amount_;\\n    }\\n\\n    function _mint(address to_, uint256 id_, uint256 amount_, bytes memory data_) internal {\\n        _mintInternal(to_, id_, amount_);\\n\\n        emit TransferSingle(msg.sender, address(0), to_, id_, amount_);\\n\\n        _ERC1155Supported(address(0), to_, id_, amount_, data_);\\n    }\\n\\n    function _batchMint(address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) internal {\\n        require(_isSameLength(ids_.length, amounts_.length));\\n\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            _mintInternal(to_, ids_[i], amounts_[i]);\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to_, ids_, amounts_);\\n\\n        _ERC1155BatchSupported(address(0), to_, ids_, amounts_, data_);\\n    }\\n\\n    function _burnInternal(address from_, uint256 id_, uint256 amount_) internal {\\n        balanceOf[from_][id_] -= amount_;\\n        _removeEnumerableData(from_, id_);\\n    }\\n\\n    function _burn(address from_, uint256 id_, uint256 amount_) internal {\\n        _burnInternal(from_, id_, amount_);\\n        emit TransferSingle(msg.sender, from_, address(0), id_, amount_);\\n    }\\n\\n    function _batchBurn(address from_, uint256[] memory ids_, uint256[] memory amounts_) internal {\\n        require(_isSameLength(ids_.length, amounts_.length));\\n        \\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            _burnInternal(from_, ids_[i], amounts_[i]);\\n        }\\n\\n        emit TransferBatch(msg.sender, from_, address(0), ids_, amounts_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId_) public pure virtual returns (bool) {\\n        return interfaceId_ == 0x01ffc9a7 || interfaceId_ == 0xd9b67a26 || interfaceId_ == 0x0e89341c;\\n    }\\n\\n    function balanceOfBatch(address[] memory owners_, uint256[] memory ids_) public view virtual returns (uint256[] memory) {\\n        require(_isSameLength(owners_.length, ids_.length));\\n\\n        uint256[] memory _balances = new uint256[](owners_.length);\\n\\n        for (uint256 i = 0; i < owners_.length; i++) {\\n            _balances[i] = balanceOf[owners_[i]][ids_[i]];\\n        }\\n        return _balances;\\n    }\\n}\\n\\nabstract contract ERC1155URI {\\n    mapping(uint256 => string) public tokenToURI;\\n    function _setTokenToURI(uint256 tokenId_, string memory uri_) internal virtual {\\n        tokenToURI[tokenId_] = uri_;\\n    }\\n}\\n\\nabstract contract OwnControll {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AdminSet(bytes32 indexed controllerType, bytes32 indexed controllerSlot, address indexed controller, bool status);\\n    address public owner;\\n    mapping(bytes32 => mapping(address => bool)) internal admin;\\n    constructor() { owner = msg.sender; }\\n    modifier onlyOwner() { require(owner == msg.sender, \\\"only owner\\\");_; }\\n    modifier onlyAdmin(string memory type_) { require(isAdmin(type_, msg.sender), \\\"only admin\\\");_; }\\n    function transferOwnership(address newOwner) external onlyOwner { emit OwnershipTransferred(owner, newOwner); owner = newOwner; }\\n    function setAdmin(string calldata type_, address controller, bool status) external onlyOwner { bytes32 typeHash = keccak256(abi.encodePacked(type_)); admin[typeHash][controller] = status; emit AdminSet(typeHash, typeHash, controller, status); }\\n    function isAdmin(string memory type_, address controller) public view returns (bool) { bytes32 typeHash = keccak256(abi.encodePacked(type_)); return admin[typeHash][controller]; }\\n}\\n\\ninterface IMetadata {\\n    function tokenURI(uint256 tokenId_) external view returns (string memory);\\n}\\n\\ncontract JigokuEzuFourHells is ERC1155Enumerable, ERC1155URI, OwnControll {\\n\\n    address public metadata;\\n    bool public useMetadata;\\n\\n    constructor() ERC1155Enumerable(\\\"Jigoku Ezu - Four Hells -\\\", \\\"Jigoku Ezu - Four Hells -\\\") {}\\n\\n    function mint(address to_, uint256 id_, uint256 amount_, bytes memory data_) external onlyAdmin(\\\"MINTER\\\") {\\n        _mint(to_, id_, amount_, data_);\\n    }\\n\\n    function burn(address from_, uint256 id_, uint256 amount_) external onlyAdmin(\\\"BURNER\\\") {\\n        _burn(from_, id_, amount_);\\n    }\\n\\n    function setMetadata(address address_) external onlyAdmin(\\\"ADMIN\\\") { \\n        metadata = address_; \\n    }\\n\\n    function setTokenToURI(uint256 tokenId_, string memory uri_) external onlyAdmin(\\\"ADMIN\\\") { \\n        _setTokenToURI(tokenId_, uri_);\\n    }\\n\\n    function setUseMetadata(bool bool_) external onlyAdmin(\\\"ADMIN\\\") { \\n        useMetadata = bool_; \\n    }\\n\\n    function uri(uint256 id_) public view override returns (string memory) {\\n        if (!useMetadata) {\\n            return tokenToURI[id_];\\n        }\\n        else {\\n            return IMetadata(metadata).tokenURI(id_);\\n        }\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getOwnersOfTokenId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getOwnersOfTokenIdAndBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC1155Enumerable.TokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"getTotalSupplyOfIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setTokenToURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setUseMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToOwnersToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JigokuEzuFourHells", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}