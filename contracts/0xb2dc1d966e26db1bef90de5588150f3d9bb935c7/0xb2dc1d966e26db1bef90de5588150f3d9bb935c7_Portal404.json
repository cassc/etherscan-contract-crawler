{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC404/ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC404} from \\\"./interfaces/IERC404.sol\\\";\\r\\nimport {ERC721Receiver} from \\\"./lib/ERC721Receiver.sol\\\";\\r\\nimport {DoubleEndedQueue} from \\\"./lib/DoubleEndedQueue.sol\\\";\\r\\nimport {IERC165} from \\\"./lib/interfaces/IERC165.sol\\\";\\r\\n\\r\\nabstract contract ERC404 is IERC404 {\\r\\n  using DoubleEndedQueue for DoubleEndedQueue.Uint256Deque;\\r\\n\\r\\n  /// @dev The queue of ERC-721 tokens stored in the contract.\\r\\n  DoubleEndedQueue.Uint256Deque private _storedERC721Ids;\\r\\n\\r\\n  /// @dev Token name\\r\\n  string public name;\\r\\n\\r\\n  /// @dev Token symbol\\r\\n  string public symbol;\\r\\n\\r\\n  /// @dev Decimals for ERC-20 representation\\r\\n  uint8 public immutable decimals;\\r\\n\\r\\n  /// @dev Units for ERC-20 representation\\r\\n  uint256 public immutable units;\\r\\n\\r\\n  /// @dev Total supply in ERC-20 representation\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  /// @dev Current mint counter which also represents the highest\\r\\n  ///      minted id, monotonically increasing to ensure accurate ownership\\r\\n  uint256 internal _minted;\\r\\n\\r\\n  /// @dev Initial chain id for EIP-2612 support\\r\\n  uint256 internal immutable INITIAL_CHAIN_ID;\\r\\n\\r\\n  /// @dev Initial domain separator for EIP-2612 support\\r\\n  bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\r\\n\\r\\n  /// @dev Balance of user in ERC-20 representation\\r\\n  mapping(address => uint256) public balanceOf;\\r\\n\\r\\n  /// @dev Allowance of user in ERC-20 representation\\r\\n  mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n  /// @dev Approval in ERC-721 representaion\\r\\n  mapping(uint256 => address) public getApproved;\\r\\n\\r\\n  /// @dev Approval for all in ERC-721 representation\\r\\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n  /// @dev Packed representation of ownerOf and owned indices\\r\\n  mapping(uint256 => uint256) internal _ownedData;\\r\\n\\r\\n  /// @dev Array of owned ids in ERC-721 representation\\r\\n  mapping(address => uint256[]) internal _owned;\\r\\n\\r\\n  /// @dev Addresses that are exempt from ERC-721 transfer, typically for gas savings (pairs, routers, etc)\\r\\n  mapping(address => bool) public erc721TransferExempt;\\r\\n\\r\\n  /// @dev EIP-2612 nonces\\r\\n  mapping(address => uint256) public nonces;\\r\\n\\r\\n  /// @dev Address bitmask for packed ownership data\\r\\n  uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n  /// @dev Owned index bitmask for packed ownership data\\r\\n  uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\\r\\n\\r\\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n    name = name_;\\r\\n    symbol = symbol_;\\r\\n\\r\\n    if (decimals_ < 18) {\\r\\n      revert DecimalsTooLow();\\r\\n    }\\r\\n\\r\\n    decimals = decimals_;\\r\\n    units = 10 ** decimals;\\r\\n\\r\\n    // EIP-2612 initialization\\r\\n    INITIAL_CHAIN_ID = block.chainid;\\r\\n    INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\r\\n  }\\r\\n\\r\\n  /// @notice Function to find owner of a given ERC-721 token\\r\\n  function ownerOf(\\r\\n    uint256 id_\\r\\n  ) public view virtual returns (address erc721Owner) {\\r\\n    erc721Owner = _getOwnerOf(id_);\\r\\n\\r\\n    // If the id_ is beyond the range of minted tokens, is 0, or the token is not owned by anyone, revert.\\r\\n    if (id_ > _minted || id_ == 0 || erc721Owner == address(0)) {\\r\\n      revert NotFound();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function owned(\\r\\n    address owner_\\r\\n  ) public view virtual returns (uint256[] memory) {\\r\\n    return _owned[owner_];\\r\\n  }\\r\\n\\r\\n  function erc721BalanceOf(\\r\\n    address owner_\\r\\n  ) public view virtual returns (uint256) {\\r\\n    return _owned[owner_].length;\\r\\n  }\\r\\n\\r\\n  function erc20BalanceOf(\\r\\n    address owner_\\r\\n  ) public view virtual returns (uint256) {\\r\\n    return balanceOf[owner_];\\r\\n  }\\r\\n\\r\\n  function erc20TotalSupply() public view virtual returns (uint256) {\\r\\n    return totalSupply;\\r\\n  }\\r\\n\\r\\n  function erc721TotalSupply() public view virtual returns (uint256) {\\r\\n    return _minted;\\r\\n  }\\r\\n\\r\\n  function erc721TokensBankedInQueue() public view virtual returns (uint256) {\\r\\n    return _storedERC721Ids.length();\\r\\n  }\\r\\n\\r\\n  /// @notice tokenURI must be implemented by child contract\\r\\n  function tokenURI(uint256 id_) public view virtual returns (string memory);\\r\\n\\r\\n  /// @notice Function for token approvals\\r\\n  /// @dev This function assumes the operator is attempting to approve an ERC-721\\r\\n  ///      if valueOrId is less than the minted count. Note: Unlike setApprovalForAll,\\r\\n  ///      spender_ must be allowed to be 0x0 so that approval can be revoked.\\r\\n  function approve(\\r\\n    address spender_,\\r\\n    uint256 valueOrId_\\r\\n  ) public virtual returns (bool) {\\r\\n    // The ERC-721 tokens are 1-indexed, so 0 is not a valid id and indicates that\\r\\n    // operator is attempting to set the ERC-20 allowance to 0.\\r\\n    if (valueOrId_ <= _minted && valueOrId_ > 0) {\\r\\n      // Intention is to approve as ERC-721 token (id).\\r\\n      uint256 id = valueOrId_;\\r\\n      address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n      if (\\r\\n        msg.sender != erc721Owner && !isApprovedForAll[erc721Owner][msg.sender]\\r\\n      ) {\\r\\n        revert Unauthorized();\\r\\n      }\\r\\n\\r\\n      getApproved[id] = spender_;\\r\\n\\r\\n      emit ERC721Approval(erc721Owner, spender_, id);\\r\\n    } else {\\r\\n      // Prevent granting 0x0 an ERC-20 allowance.\\r\\n      if (spender_ == address(0)) {\\r\\n        revert InvalidSpender();\\r\\n      }\\r\\n\\r\\n      // Intention is to approve as ERC-20 token (value).\\r\\n      uint256 value = valueOrId_;\\r\\n      allowance[msg.sender][spender_] = value;\\r\\n\\r\\n      emit ERC20Approval(msg.sender, spender_, value);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @notice Function for ERC-721 approvals\\r\\n  function setApprovalForAll(address operator_, bool approved_) public virtual {\\r\\n    // Prevent approvals to 0x0.\\r\\n    if (operator_ == address(0)) {\\r\\n      revert InvalidOperator();\\r\\n    }\\r\\n    isApprovedForAll[msg.sender][operator_] = approved_;\\r\\n    emit ApprovalForAll(msg.sender, operator_, approved_);\\r\\n  }\\r\\n\\r\\n  /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\r\\n  /// @dev This function assumes the operator is attempting to transfer an ERC-721\\r\\n  ///      if valueOrId is less than or equal to current max id.\\r\\n  function transferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 valueOrId_\\r\\n  ) public virtual returns (bool) {\\r\\n    // Prevent transferring tokens from 0x0.\\r\\n    if (from_ == address(0)) {\\r\\n      revert InvalidSender();\\r\\n    }\\r\\n\\r\\n    // Prevent burning tokens to 0x0.\\r\\n    if (to_ == address(0)) {\\r\\n      revert InvalidRecipient();\\r\\n    }\\r\\n\\r\\n    if (valueOrId_ <= _minted) {\\r\\n      // Intention is to transfer as ERC-721 token (id).\\r\\n      uint256 id = valueOrId_;\\r\\n\\r\\n      if (from_ != _getOwnerOf(id)) {\\r\\n        revert Unauthorized();\\r\\n      }\\r\\n\\r\\n      // Check that the operator is either the sender or approved for the transfer.\\r\\n      if (\\r\\n        msg.sender != from_ &&\\r\\n        !isApprovedForAll[from_][msg.sender] &&\\r\\n        msg.sender != getApproved[id]\\r\\n      ) {\\r\\n        revert Unauthorized();\\r\\n      }\\r\\n\\r\\n      // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\r\\n      _transferERC20(from_, to_, units);\\r\\n      _transferERC721(from_, to_, id);\\r\\n    } else {\\r\\n      // Intention is to transfer as ERC-20 token (value).\\r\\n      uint256 value = valueOrId_;\\r\\n      uint256 allowed = allowance[from_][msg.sender];\\r\\n\\r\\n      // Check that the operator has sufficient allowance.\\r\\n      if (allowed != type(uint256).max) {\\r\\n        allowance[from_][msg.sender] = allowed - value;\\r\\n      }\\r\\n\\r\\n      // Transferring ERC-20s directly requires the _transfer function.\\r\\n      _transferERC20WithERC721(from_, to_, value);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @notice Function for ERC-20 transfers.\\r\\n  /// @dev This function assumes the operator is attempting to transfer as ERC-20\\r\\n  ///      given this function is only supported on the ERC-20 interface\\r\\n  function transfer(address to_, uint256 value_) public virtual returns (bool) {\\r\\n    // Prevent burning tokens to 0x0.\\r\\n    if (to_ == address(0)) {\\r\\n      revert InvalidRecipient();\\r\\n    }\\r\\n\\r\\n    // Transferring ERC-20s directly requires the _transfer function.\\r\\n    return _transferERC20WithERC721(msg.sender, to_, value_);\\r\\n  }\\r\\n\\r\\n  /// @notice Function for ERC-721 transfers with contract support.\\r\\n  function safeTransferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 id_\\r\\n  ) public virtual {\\r\\n    transferFrom(from_, to_, id_);\\r\\n\\r\\n    if (\\r\\n      to_.code.length != 0 &&\\r\\n      ERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, \\\"\\\") !=\\r\\n      ERC721Receiver.onERC721Received.selector\\r\\n    ) {\\r\\n      revert UnsafeRecipient();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Function for ERC-721 transfers with contract support and callback data.\\r\\n  function safeTransferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 id_,\\r\\n    bytes calldata data_\\r\\n  ) public virtual {\\r\\n    transferFrom(from_, to_, id_);\\r\\n\\r\\n    if (\\r\\n      to_.code.length != 0 &&\\r\\n      ERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, data_) !=\\r\\n      ERC721Receiver.onERC721Received.selector\\r\\n    ) {\\r\\n      revert UnsafeRecipient();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Function for EIP-2612 permits\\r\\n  function permit(\\r\\n    address owner_,\\r\\n    address spender_,\\r\\n    uint256 value_,\\r\\n    uint256 deadline_,\\r\\n    uint8 v_,\\r\\n    bytes32 r_,\\r\\n    bytes32 s_\\r\\n  ) public virtual {\\r\\n    if (deadline_ < block.timestamp) {\\r\\n      revert PermitDeadlineExpired();\\r\\n    }\\r\\n\\r\\n    if (value_ <= _minted && value_ > 0) {\\r\\n      revert InvalidApproval();\\r\\n    }\\r\\n\\r\\n    if (spender_ == address(0)) {\\r\\n      revert InvalidSpender();\\r\\n    }\\r\\n\\r\\n    unchecked {\\r\\n      address recoveredAddress = ecrecover(\\r\\n        keccak256(\\r\\n          abi.encodePacked(\\r\\n            \\\"\\\\x19\\\\x01\\\",\\r\\n            DOMAIN_SEPARATOR(),\\r\\n            keccak256(\\r\\n              abi.encode(\\r\\n                keccak256(\\r\\n                  \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n                ),\\r\\n                owner_,\\r\\n                spender_,\\r\\n                value_,\\r\\n                nonces[owner_]++,\\r\\n                deadline_\\r\\n              )\\r\\n            )\\r\\n          )\\r\\n        ),\\r\\n        v_,\\r\\n        r_,\\r\\n        s_\\r\\n      );\\r\\n\\r\\n      if (recoveredAddress == address(0) || recoveredAddress != owner_) {\\r\\n        revert InvalidSigner();\\r\\n      }\\r\\n\\r\\n      allowance[recoveredAddress][spender_] = value_;\\r\\n    }\\r\\n\\r\\n    emit ERC20Approval(owner_, spender_, value_);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\\r\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n    return\\r\\n      block.chainid == INITIAL_CHAIN_ID\\r\\n        ? INITIAL_DOMAIN_SEPARATOR\\r\\n        : _computeDomainSeparator();\\r\\n  }\\r\\n\\r\\n  function supportsInterface(\\r\\n    bytes4 interfaceId\\r\\n  ) public view virtual returns (bool) {\\r\\n    return\\r\\n      interfaceId == type(IERC404).interfaceId ||\\r\\n      interfaceId == type(IERC165).interfaceId;\\r\\n  }\\r\\n\\r\\n  /// @notice Internal function to compute domain separator for EIP-2612 permits\\r\\n  function _computeDomainSeparator() internal view virtual returns (bytes32) {\\r\\n    return\\r\\n      keccak256(\\r\\n        abi.encode(\\r\\n          keccak256(\\r\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n          ),\\r\\n          keccak256(bytes(name)),\\r\\n          keccak256(\\\"1\\\"),\\r\\n          block.chainid,\\r\\n          address(this)\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function calculateERC721Transfers(\\r\\n        address from_,\\r\\n        uint256 value_\\r\\n    ) public view returns (uint256[] memory tokenIds) {\\r\\n        //first check it's possible to send this value\\r\\n        uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n\\r\\n        if (!erc721TransferExempt[from_]) {\\r\\n            uint256 nftsToTransfer = value_ / units;\\r\\n            uint256 fractionalAmount = value_ % units;\\r\\n\\r\\n            //account for fractional NFT removal\\r\\n            if (\\r\\n                (erc20BalanceOfSenderBefore - fractionalAmount) / units <\\r\\n                (erc20BalanceOfSenderBefore / units)\\r\\n            ) {\\r\\n                nftsToTransfer++;\\r\\n            }\\r\\n\\r\\n            if (nftsToTransfer > 0) {\\r\\n                tokenIds = new uint256[](nftsToTransfer);\\r\\n\\r\\n                for (uint256 i = 0; i < nftsToTransfer; i++) {\\r\\n                    // Pop from sender's ERC-721 stack and transfer them (LIFO)\\r\\n                    uint256 indexOfLastToken = _owned[from_].length - (1 + i);\\r\\n                    tokenIds[i] = _owned[from_][indexOfLastToken];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n  /// @notice This is the lowest level ERC-20 transfer function, which\\r\\n  ///         should be used for both normal ERC-20 transfers as well as minting.\\r\\n  /// Note that this function allows transfers to and from 0x0.\\r\\n  function _transferERC20(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 value_\\r\\n  ) internal virtual {\\r\\n    // Minting is a special case for which we should not check the balance of\\r\\n    // the sender, and we should increase the total supply.\\r\\n    if (from_ == address(0)) {\\r\\n      totalSupply += value_;\\r\\n    } else {\\r\\n      // Deduct value from sender's balance.\\r\\n      balanceOf[from_] -= value_;\\r\\n    }\\r\\n\\r\\n    // Update the recipient's balance.\\r\\n    // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\\r\\n    unchecked {\\r\\n      balanceOf[to_] += value_;\\r\\n    }\\r\\n\\r\\n    emit ERC20Transfer(from_, to_, value_);\\r\\n  }\\r\\n\\r\\n  /// @notice Consolidated record keeping function for transferring ERC-721s.\\r\\n  /// @dev Assign the token to the new owner, and remove from the old owner.\\r\\n  /// Note that this function allows transfers to and from 0x0.\\r\\n  function _transferERC721(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 id_\\r\\n  ) internal virtual {\\r\\n    // If this is not a mint, handle record keeping for transfer from previous owner.\\r\\n    if (from_ != address(0)) {\\r\\n      // On transfer of an NFT, any previous approval is reset.\\r\\n      delete getApproved[id_];\\r\\n\\r\\n      uint256 updatedId = _owned[from_][_owned[from_].length - 1];\\r\\n      if (updatedId != id_) {\\r\\n        uint256 updatedIndex = _getOwnedIndex(id_);\\r\\n        // update _owned for sender\\r\\n        _owned[from_][updatedIndex] = updatedId;\\r\\n        // update index for the moved id\\r\\n        _setOwnedIndex(updatedId, updatedIndex);\\r\\n      }\\r\\n\\r\\n      // pop\\r\\n      _owned[from_].pop();\\r\\n    }\\r\\n\\r\\n    if (to_ != address(0)) {\\r\\n      // Update owner of the token to the new owner.\\r\\n      _setOwnerOf(id_, to_);\\r\\n      // Push token onto the new owner's stack.\\r\\n      _owned[to_].push(id_);\\r\\n      // Update index for new owner's stack.\\r\\n      _setOwnedIndex(id_, _owned[to_].length - 1);\\r\\n    } else {\\r\\n      delete _ownedData[id_];\\r\\n    }\\r\\n\\r\\n    emit ERC721Transfer(from_, to_, id_);\\r\\n    emit Transfer(from_, to_, id_);\\r\\n  }\\r\\n\\r\\n  /// @notice Internal function for ERC-20 transfers. Also handles any ERC-721 transfers that may be required.\\r\\n  function _transferERC20WithERC721(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 value_\\r\\n  ) internal virtual returns (bool) {\\r\\n    uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n    uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\\r\\n\\r\\n    _transferERC20(from_, to_, value_);\\r\\n\\r\\n    // Preload for gas savings on branches\\r\\n    bool isFromERC721TransferExempt = erc721TransferExempt[from_];\\r\\n    bool isToERC721TransferExempt = erc721TransferExempt[to_];\\r\\n\\r\\n    // Skip _withdrawAndStoreERC721 and/or _retrieveOrMintERC721 for ERC-721 transfer exempt addresses\\r\\n    // 1) to save gas\\r\\n    // 2) because ERC-721 transfer exempt addresses won't always have/need ERC-721s corresponding to their ERC20s.\\r\\n    if (isFromERC721TransferExempt && isToERC721TransferExempt) {\\r\\n      // Case 1) Both sender and recipient are ERC-721 transfer exempt. No ERC-721s need to be transferred.\\r\\n      // NOOP.\\r\\n    } else if (isFromERC721TransferExempt) {\\r\\n      // Case 2) The sender is ERC-721 transfer exempt, but the recipient is not. Contract should not attempt\\r\\n      //         to transfer ERC-721s from the sender, but the recipient should receive ERC-721s\\r\\n      //         from the bank/minted for any whole number increase in their balance.\\r\\n      // Only cares about whole number increments.\\r\\n      uint256 tokensToRetrieveOrMint = (balanceOf[to_] / units) -\\r\\n        (erc20BalanceOfReceiverBefore / units);\\r\\n      for (uint256 i = 0; i < tokensToRetrieveOrMint; i++) {\\r\\n        _retrieveOrMintERC721(to_);\\r\\n      }\\r\\n    } else if (isToERC721TransferExempt) {\\r\\n      // Case 3) The sender is not ERC-721 transfer exempt, but the recipient is. Contract should attempt\\r\\n      //         to withdraw and store ERC-721s from the sender, but the recipient should not\\r\\n      //         receive ERC-721s from the bank/minted.\\r\\n      // Only cares about whole number increments.\\r\\n      uint256 tokensToWithdrawAndStore = (erc20BalanceOfSenderBefore / units) -\\r\\n        (balanceOf[from_] / units);\\r\\n      for (uint256 i = 0; i < tokensToWithdrawAndStore; i++) {\\r\\n        _withdrawAndStoreERC721(from_);\\r\\n      }\\r\\n    } else {\\r\\n      // Case 4) Neither the sender nor the recipient are ERC-721 transfer exempt.\\r\\n      // Strategy:\\r\\n      // 1. First deal with the whole tokens. These are easy and will just be transferred.\\r\\n      // 2. Look at the fractional part of the value:\\r\\n      //   a) If it causes the sender to lose a whole token that was represented by an NFT due to a\\r\\n      //      fractional part being transferred, withdraw and store an additional NFT from the sender.\\r\\n      //   b) If it causes the receiver to gain a whole new token that should be represented by an NFT\\r\\n      //      due to receiving a fractional part that completes a whole token, retrieve or mint an NFT to the recevier.\\r\\n\\r\\n      // Whole tokens worth of ERC-20s get transferred as ERC-721s without any burning/minting.\\r\\n      uint256 nftsToTransfer = value_ / units;\\r\\n      for (uint256 i = 0; i < nftsToTransfer; i++) {\\r\\n        // Pop from sender's ERC-721 stack and transfer them (LIFO)\\r\\n        uint256 indexOfLastToken = _owned[from_].length - 1;\\r\\n        uint256 tokenId = _owned[from_][indexOfLastToken];\\r\\n        _transferERC721(from_, to_, tokenId);\\r\\n      }\\r\\n\\r\\n      // If the sender's transaction changes their holding from a fractional to a non-fractional\\r\\n      // amount (or vice versa), adjust ERC-721s.\\r\\n      //\\r\\n      // Check if the send causes the sender to lose a whole token that was represented by an ERC-721\\r\\n      // due to a fractional part being transferred.\\r\\n      //\\r\\n      // To check this, look if subtracting the fractional amount from the balance causes the balance to\\r\\n      // drop below the original balance % units, which represents the number of whole tokens they started with.\\r\\n      uint256 fractionalAmount = value_ % units;\\r\\n\\r\\n      if (\\r\\n        (erc20BalanceOfSenderBefore - fractionalAmount) / units <\\r\\n        (erc20BalanceOfSenderBefore / units)\\r\\n      ) {\\r\\n        _withdrawAndStoreERC721(from_);\\r\\n      }\\r\\n\\r\\n      // Check if the receive causes the receiver to gain a whole new token that should be represented\\r\\n      // by an NFT due to receiving a fractional part that completes a whole token.\\r\\n      if (\\r\\n        (erc20BalanceOfReceiverBefore + fractionalAmount) / units >\\r\\n        (erc20BalanceOfReceiverBefore / units)\\r\\n      ) {\\r\\n        _retrieveOrMintERC721(to_);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /// @notice Internal function for ERC20 minting\\r\\n  /// @dev This function will allow minting of new ERC20s.\\r\\n  ///      If mintCorrespondingERC721s_ is true, it will also mint the corresponding ERC721s.\\r\\n  function _mintERC20(\\r\\n    address to_,\\r\\n    uint256 value_,\\r\\n    bool mintCorrespondingERC721s_\\r\\n  ) internal virtual {\\r\\n    /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\\r\\n    if (to_ == address(0)) {\\r\\n      revert InvalidRecipient();\\r\\n    }\\r\\n\\r\\n    _transferERC20(address(0), to_, value_);\\r\\n\\r\\n    // If mintCorrespondingERC721s_ is true, mint the corresponding ERC721s.\\r\\n    if (mintCorrespondingERC721s_) {\\r\\n      uint256 nftsToRetrieveOrMint = value_ / units;\\r\\n      for (uint256 i = 0; i < nftsToRetrieveOrMint; i++) {\\r\\n        _retrieveOrMintERC721(to_);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Internal function for ERC-721 minting and retrieval from the bank.\\r\\n  /// @dev This function will allow minting of new ERC-721s up to the total fractional supply. It will\\r\\n  ///      first try to pull from the bank, and if the bank is empty, it will mint a new token.\\r\\n  function _retrieveOrMintERC721(address to_) internal virtual {\\r\\n    if (to_ == address(0)) {\\r\\n      revert InvalidRecipient();\\r\\n    }\\r\\n\\r\\n    uint256 id;\\r\\n\\r\\n    if (!DoubleEndedQueue.empty(_storedERC721Ids)) {\\r\\n      // If there are any tokens in the bank, use those first.\\r\\n      // Pop off the end of the queue (FIFO).\\r\\n      id = _storedERC721Ids.popBack();\\r\\n    } else {\\r\\n      // Otherwise, mint a new token, should not be able to go over the total fractional supply.\\r\\n      _minted++;\\r\\n      id = _minted;\\r\\n    }\\r\\n\\r\\n    address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n    // The token should not already belong to anyone besides 0x0 or this contract.\\r\\n    // If it does, something is wrong, as this should never happen.\\r\\n    if (erc721Owner != address(0)) {\\r\\n      revert AlreadyExists();\\r\\n    }\\r\\n\\r\\n    // Transfer the token to the recipient, either transferring from the contract's bank or minting.\\r\\n    _transferERC721(erc721Owner, to_, id);\\r\\n  }\\r\\n\\r\\n  /// @notice Internal function for ERC-721 deposits to bank (this contract).\\r\\n  /// @dev This function will allow depositing of ERC-721s to the bank, which can be retrieved by future minters.\\r\\n  function _withdrawAndStoreERC721(address from_) internal virtual {\\r\\n    if (from_ == address(0)) {\\r\\n      revert InvalidSender();\\r\\n    }\\r\\n\\r\\n    // Retrieve the latest token added to the owner's stack (LIFO).\\r\\n    uint256 id = _owned[from_][_owned[from_].length - 1];\\r\\n\\r\\n    // Transfer the token to the contract.\\r\\n    _transferERC721(from_, address(0), id);\\r\\n\\r\\n    // Record the token in the contract's bank queue.\\r\\n    _storedERC721Ids.pushFront(id);\\r\\n  }\\r\\n\\r\\n  /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\\r\\n  function _setERC721TransferExempt(address target_, bool state_) internal virtual {\\r\\n    // If the target has at least 1 full ERC-20 token, they should not be removed from the exempt list\\r\\n    // because if they were and then they attempted to transfer, it would revert as they would not\\r\\n    // necessarily have ehough ERC-721s to bank.\\r\\n    if (erc20BalanceOf(target_) >= units && !state_) {\\r\\n      revert CannotRemoveFromERC721TransferExempt();\\r\\n    }\\r\\n    erc721TransferExempt[target_] = state_;\\r\\n  }\\r\\n\\r\\n  function _getOwnerOf(\\r\\n    uint256 id_\\r\\n  ) internal view virtual returns (address ownerOf_) {\\r\\n    uint256 data = _ownedData[id_];\\r\\n\\r\\n    assembly {\\r\\n      ownerOf_ := and(data, _BITMASK_ADDRESS)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setOwnerOf(uint256 id_, address owner_) internal virtual {\\r\\n    uint256 data = _ownedData[id_];\\r\\n\\r\\n    assembly {\\r\\n      data := add(\\r\\n        and(data, _BITMASK_OWNED_INDEX),\\r\\n        and(owner_, _BITMASK_ADDRESS)\\r\\n      )\\r\\n    }\\r\\n\\r\\n    _ownedData[id_] = data;\\r\\n  }\\r\\n\\r\\n  function _getOwnedIndex(\\r\\n    uint256 id_\\r\\n  ) internal view virtual returns (uint256 ownedIndex_) {\\r\\n    uint256 data = _ownedData[id_];\\r\\n\\r\\n    assembly {\\r\\n      ownedIndex_ := shr(160, data)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\\r\\n    uint256 data = _ownedData[id_];\\r\\n\\r\\n    if (index_ > _BITMASK_OWNED_INDEX >> 160) {\\r\\n      revert OwnedIndexOverflow();\\r\\n    }\\r\\n\\r\\n    assembly {\\r\\n      data := add(\\r\\n        and(data, _BITMASK_ADDRESS),\\r\\n        and(shl(160, index_), _BITMASK_OWNED_INDEX)\\r\\n      )\\r\\n    }\\r\\n\\r\\n    _ownedData[id_] = data;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC404/interfaces/IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"../lib/interfaces/IERC165.sol\\\";\\r\\n\\r\\ninterface IERC404 is IERC165 {\\r\\n  event ERC20Approval(address owner, address spender, uint256 value);\\r\\n  event ApprovalForAll(\\r\\n    address indexed owner,\\r\\n    address indexed operator,\\r\\n    bool approved\\r\\n  );\\r\\n  event ERC721Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 indexed id\\r\\n  );\\r\\n  event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n  event ERC721Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 indexed id\\r\\n  );\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 indexed id\\r\\n  );\\r\\n\\r\\n  error NotFound();\\r\\n  error InvalidId();\\r\\n  error AlreadyExists();\\r\\n  error InvalidRecipient();\\r\\n  error InvalidSender();\\r\\n  error InvalidSpender();\\r\\n  error InvalidOperator();\\r\\n  error UnsafeRecipient();\\r\\n  error NotERC721TransferExempt();\\r\\n  error Unauthorized();\\r\\n  error InsufficientAllowance();\\r\\n  error DecimalsTooLow();\\r\\n  error CannotRemoveFromERC721TransferExempt();\\r\\n  error PermitDeadlineExpired();\\r\\n  error InvalidSigner();\\r\\n  error InvalidApproval();\\r\\n  error OwnedIndexOverflow();\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n  function symbol() external view returns (string memory);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function erc20TotalSupply() external view returns (uint256);\\r\\n  function erc721TotalSupply() external view returns (uint256);\\r\\n  function balanceOf(address owner_) external view returns (uint256);\\r\\n  function erc721BalanceOf(address owner_) external view returns (uint256);\\r\\n  function erc20BalanceOf(address owner_) external view returns (uint256);\\r\\n  function erc721TransferExempt(address account_) external view returns (bool);\\r\\n  function isApprovedForAll(\\r\\n    address owner_,\\r\\n    address operator_\\r\\n  ) external view returns (bool);\\r\\n  function allowance(\\r\\n    address owner_,\\r\\n    address spender_\\r\\n  ) external view returns (uint256);\\r\\n  function owned(address owner_) external view returns (uint256[] memory);\\r\\n  function ownerOf(uint256 id_) external view returns (address erc721Owner);\\r\\n  function tokenURI(uint256 id_) external view returns (string memory);\\r\\n  function approve(\\r\\n    address spender_,\\r\\n    uint256 valueOrId_\\r\\n  ) external returns (bool);\\r\\n  function setApprovalForAll(address operator_, bool approved_) external;\\r\\n  function transferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 valueOrId_\\r\\n  ) external returns (bool);\\r\\n  function transfer(address to_, uint256 amount_) external returns (bool);\\r\\n  function erc721TokensBankedInQueue() external view returns (uint256);\\r\\n  function safeTransferFrom(address from_, address to_, uint256 id_) external;\\r\\n  function safeTransferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 id_,\\r\\n    bytes calldata data_\\r\\n  ) external;\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function permit(\\r\\n    address owner_,\\r\\n    address spender_,\\r\\n    uint256 value_,\\r\\n    uint256 deadline_,\\r\\n    uint8 v_,\\r\\n    bytes32 r_,\\r\\n    bytes32 s_\\r\\n  ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/ERC404/lib/DoubleEndedQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/DoubleEndedQueue.sol)\\r\\n// Modified by Pandora Labs to support native uint256 operations\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\r\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\r\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\r\\n * the existing queue contents are left in storage.\\r\\n *\\r\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\r\\n * used in storage, and not in memory.\\r\\n * ```solidity\\r\\n * DoubleEndedQueue.Bytes32Deque queue;\\r\\n * ```\\r\\n */\\r\\nlibrary DoubleEndedQueue {\\r\\n  /**\\r\\n   * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\r\\n   */\\r\\n  error QueueEmpty();\\r\\n\\r\\n  /**\\r\\n   * @dev A push operation couldn't be completed due to the queue being full.\\r\\n   */\\r\\n  error QueueFull();\\r\\n\\r\\n  /**\\r\\n   * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\r\\n   */\\r\\n  error QueueOutOfBounds();\\r\\n\\r\\n  /**\\r\\n   * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\\r\\n   *\\r\\n   * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\r\\n   * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\r\\n   * lead to unexpected behavior.\\r\\n   *\\r\\n   * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\r\\n   */\\r\\n  struct Uint256Deque {\\r\\n    uint128 _begin;\\r\\n    uint128 _end;\\r\\n    mapping(uint128 index => uint256) _data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Inserts an item at the end of the queue.\\r\\n   *\\r\\n   * Reverts with {QueueFull} if the queue is full.\\r\\n   */\\r\\n  function pushBack(Uint256Deque storage deque, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint128 backIndex = deque._end;\\r\\n      if (backIndex + 1 == deque._begin) revert QueueFull();\\r\\n      deque._data[backIndex] = value;\\r\\n      deque._end = backIndex + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes the item at the end of the queue and returns it.\\r\\n   *\\r\\n   * Reverts with {QueueEmpty} if the queue is empty.\\r\\n   */\\r\\n  function popBack(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal returns (uint256 value) {\\r\\n    unchecked {\\r\\n      uint128 backIndex = deque._end;\\r\\n      if (backIndex == deque._begin) revert QueueEmpty();\\r\\n      --backIndex;\\r\\n      value = deque._data[backIndex];\\r\\n      delete deque._data[backIndex];\\r\\n      deque._end = backIndex;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Inserts an item at the beginning of the queue.\\r\\n   *\\r\\n   * Reverts with {QueueFull} if the queue is full.\\r\\n   */\\r\\n  function pushFront(Uint256Deque storage deque, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint128 frontIndex = deque._begin - 1;\\r\\n      if (frontIndex == deque._end) revert QueueFull();\\r\\n      deque._data[frontIndex] = value;\\r\\n      deque._begin = frontIndex;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes the item at the beginning of the queue and returns it.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function popFront(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal returns (uint256 value) {\\r\\n    unchecked {\\r\\n      uint128 frontIndex = deque._begin;\\r\\n      if (frontIndex == deque._end) revert QueueEmpty();\\r\\n      value = deque._data[frontIndex];\\r\\n      delete deque._data[frontIndex];\\r\\n      deque._begin = frontIndex + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the item at the beginning of the queue.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function front(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (empty(deque)) revert QueueEmpty();\\r\\n    return deque._data[deque._begin];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the item at the end of the queue.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function back(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (empty(deque)) revert QueueEmpty();\\r\\n    unchecked {\\r\\n      return deque._data[deque._end - 1];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\r\\n   * `length(deque) - 1`.\\r\\n   *\\r\\n   * Reverts with `QueueOutOfBounds` if the index is out of bounds.\\r\\n   */\\r\\n  function at(\\r\\n    Uint256Deque storage deque,\\r\\n    uint256 index\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (index >= length(deque)) revert QueueOutOfBounds();\\r\\n    // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\\r\\n    unchecked {\\r\\n      return deque._data[deque._begin + uint128(index)];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Resets the queue back to being empty.\\r\\n   *\\r\\n   * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\r\\n   * out on potential gas refunds.\\r\\n   */\\r\\n  function clear(Uint256Deque storage deque) internal {\\r\\n    deque._begin = 0;\\r\\n    deque._end = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of items in the queue.\\r\\n   */\\r\\n  function length(Uint256Deque storage deque) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n      return uint256(deque._end - deque._begin);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the queue is empty.\\r\\n   */\\r\\n  function empty(Uint256Deque storage deque) internal view returns (bool) {\\r\\n    return deque._end == deque._begin;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC404/lib/ERC721Receiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nabstract contract ERC721Receiver {\\r\\n  function onERC721Received(\\r\\n    address,\\r\\n    address,\\r\\n    uint256,\\r\\n    bytes calldata\\r\\n  ) external virtual returns (bytes4) {\\r\\n    return ERC721Receiver.onERC721Received.selector;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC404/lib/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/Portal404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {ERC404} from \\\"./ERC404/ERC404.sol\\\";\\r\\nimport {ERC5169} from \\\"stl-contracts/ERC/ERC5169.sol\\\";\\r\\n\\r\\ncontract Portal404 is Ownable, ERC404, ERC5169 {\\r\\n    using Strings for uint256;\\r\\n    uint8 constant _decimals = 18;\\r\\n    uint256 _mintSupply = 10000;\\r\\n\\r\\n    event BaseUriUpdate(string uri);\\r\\n    event WebsiteUrlUpdate(string uri);\\r\\n    event ContractUriUpdate(string uri);\\r\\n    event Set721TransferExempt(address txExempt);\\r\\n\\r\\n    string private constant __NAME = \\\"PORTAL404\\\";\\r\\n    string private constant __SYM = \\\"PT404\\\";\\r\\n    \\r\\n    string private _websiteUri;\\r\\n\\r\\n    string public _baseUri;\\r\\n    string private _contractUri;\\r\\n\\r\\n    constructor(\\r\\n        address initialOwner_,\\r\\n        address initialMintRecipient_\\r\\n    ) ERC404(__NAME, __SYM, _decimals) Ownable(initialOwner_) {\\r\\n        // Do not mint the ERC721s to the initial owner, as it's a waste of gas.\\r\\n        _setERC721TransferExempt(initialMintRecipient_, true);\\r\\n        _mintERC20(initialMintRecipient_, _mintSupply * units, false);\\r\\n        _baseUri = \\\"ipfs://QmaZayMhEmhKKqDHoXHMMd1SMic5wpXvJWa2KeyfEz8RM7/\\\";\\r\\n        _websiteUri = \\\"https://PORTAL404.io\\\";\\r\\n  \\r\\n        _contractUri = string(\\r\\n                abi.encodePacked('{\\\"name\\\": \\\"Portal-404\\\",\\\"description\\\": A collection of ', \\r\\n                _mintSupply.toString(), \\r\\n                ' ERC-404 Tokens enhanced with ERC-5169 + TokenScript\\\"\\\",\\\"image\\\": \\\"ipfs://Qmf8Qi6oapx8sce1kPa6aiFUMzCpm869D1RpeGYinEwtgo\\\"}'));\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return _contractUri;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 id) public override view returns (string memory) {\\r\\n        uint8 seed = uint8(bytes1(keccak256(abi.encodePacked(id))));\\r\\n        string memory image;\\r\\n        string memory color;\\r\\n\\r\\n        if (seed <= 100) {\\r\\n            image = \\\"blue.gif\\\";\\r\\n            color = \\\"Blue\\\";\\r\\n        } else if (seed <= 150) {\\r\\n            image = \\\"green.gif\\\";\\r\\n            color = \\\"Green\\\";\\r\\n        } else if (seed <= 200) {\\r\\n            image = \\\"yellow.gif\\\";\\r\\n            color = \\\"Yellow\\\";\\r\\n        } else if (seed <= 230) {\\r\\n            image = \\\"indigo.gif\\\";\\r\\n            color = \\\"Indigo\\\";\\r\\n        } else if (seed <= 248) {\\r\\n            image = \\\"red.gif\\\";\\r\\n            color = \\\"Red\\\";\\r\\n        } else {\\r\\n            image = \\\"obsidian.gif\\\";\\r\\n            color = \\\"Obsidian\\\";\\r\\n        }\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"name\\\": \\\"Portal-404 #',\\r\\n                    id.toString(),\\r\\n                    '\\\",\\\"description\\\":\\\"A collection of ',\\r\\n                    _mintSupply.toString(),\\r\\n                    ' ERC-404 Tokens enhanced with ERC-5169 & TokenScript',\\r\\n                    '\\\",\\\"external_url\\\":\\\"', _websiteUri, '\\\",\\\"image\\\":\\\"',\\r\\n                    _baseUri, image,\\r\\n                    '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Color\\\",\\\"value\\\":\\\"',\\r\\n                    color,\\r\\n                    '\\\"}]}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setTransferExempt(address account_, bool value_) external onlyOwner {\\r\\n        _setERC721TransferExempt(account_, value_);\\r\\n        emit Set721TransferExempt(account_);\\r\\n    }\\r\\n\\r\\n    function setWebsiteUrl(string memory newUri) public onlyOwner {\\r\\n        _websiteUri = newUri;\\r\\n        emit WebsiteUrlUpdate(newUri);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory newUri) public onlyOwner {\\r\\n        _baseUri = newUri;\\r\\n        emit BaseUriUpdate(newUri);\\r\\n    }\\r\\n\\r\\n    function setContractURI(string memory newUri) public onlyOwner {\\r\\n        _contractUri = newUri;\\r\\n        emit ContractUriUpdate(newUri);\\r\\n    }\\r\\n\\r\\n    // Supply ERC5159 and ERC404 type\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC5169, ERC404) returns (bool) {\\r\\n        return\\r\\n            ERC5169.supportsInterface(interfaceId) ||\\r\\n            ERC404.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // ERC-5169\\r\\n    function _authorizeSetScripts(\\r\\n        string[] memory\\r\\n    ) internal view override(ERC5169) onlyOwner {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"stl-contracts/ERC/ERC5169.sol\": {\r\n      \"content\": \"/* Attestation decode and validation */\\n/* AlphaWallet 2021 - 2022 */\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IERC5169.sol\\\";\\n\\nabstract contract ERC5169 is IERC5169 {\\n    string[] private _scriptURI;\\n\\n    function scriptURI() external view override returns (string[] memory) {\\n        return _scriptURI;\\n    }\\n\\n    function setScriptURI(string[] memory newScriptURI) external override {\\n        _authorizeSetScripts(newScriptURI);\\n\\n        _scriptURI = newScriptURI;\\n\\n        emit ScriptUpdate(newScriptURI);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC5169).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to set script URI. Called by\\n     * {setScriptURI}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeSetScripts(string[] memory) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeSetScripts(string[] memory newScriptURI) internal virtual;\\n}\\n\"\r\n    },\r\n    \"stl-contracts/ERC/IERC5169.sol\": {\r\n      \"content\": \"/* Attestation decode and validation */\\n/* AlphaWallet 2021 - 2022 */\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IERC5169 {\\n    /// @dev This event emits when the scriptURI is updated,\\n    /// so wallets implementing this interface can update a cached script\\n    event ScriptUpdate(string[]);\\n\\n    /// @notice Get the scriptURI for the contract\\n    /// @return The scriptURI\\n    function scriptURI() external view returns (string[] memory);\\n\\n    /// @notice Update the scriptURI\\n    /// emits event ScriptUpdate(string[])\\n    function setScriptURI(string[] memory) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMintRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveFromERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ContractUriUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"name\":\"ScriptUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"}],\"name\":\"Set721TransferExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"WebsiteUrlUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"calculateERC721Transfers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokensBankedInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptURI\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newScriptURI\",\"type\":\"string[]\"}],\"name\":\"setScriptURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setTransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setWebsiteUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Portal404", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000de5e166f8dafeb7d0d5a58abfe7397cad47cb17d000000000000000000000000de5e166f8dafeb7d0d5a58abfe7397cad47cb17d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}