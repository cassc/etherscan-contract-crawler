{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\n\r\n/*\r\n                                                        ,----,\r\n                            ,--,     ,----..          ,/   .`|           ____\r\n                          ,--.'|    /   /   \\       ,`   .'  :         ,'  , `.\r\n                       ,--,  | :   /   .     :    ;    ;     /      ,-+-,.' _ |\r\n                    ,---.'|  : '  .   /   ;.  \\ .'___,/    ,'    ,-+-. ;   , ||\r\n                    |   | : _' | .   ;   /  ` ; |    :     |    ,--.'|'   |  ;|\r\n                    :   : |.'  | ;   |  ; \\ ; | ;    |.';  ;   |   |  ,', |  ':t\r\n                    |   ' '  ; : |   :  | ; | ' `----'  |  |   |   | /  | |  ||\r\n                    '   |  .'. | .   |  ' ' ' :     '   :  ;   '   | :  | :  |,\r\n                    |   | :  | ' '   ;  \\; /  |     |   |  '   ;   . |  ; |--'\r\n                    '   : |  : ;  \\   \\  ',  /      '   :  |   |   : |  | ,\r\n                    |   | '  ,/    ;   :    /       ;   |.'    |   : '  |/\r\n                    ;   : ;--'      \\   \\ .'        '---'      ;   | |`-'\r\n                    |   ,/           `---`                     |   ;/\r\n                    '---'                                      '---'\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IYielder {\r\n    function ownerOf(uint256 _tokenId) external view returns(address);\r\n}\r\n\r\ninterface IBooster {\r\n    function computeAmount(uint256 amount) external view returns(uint256);\r\n    function computeAmounts(uint256[] calldata amounts, uint256[] calldata yieldingCores, uint256[] calldata tokens) external view returns(uint256);\r\n}\r\n\r\ncontract HumansOfTheMetaverseToken is ERC20(\"HOTM\", \"HOTM\"), Ownable, Pausable, ReentrancyGuard {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    struct YielderSettings {\r\n        uint256 _defaultYieldRate; // fallback for yieldingCoresAmount absence\r\n        uint256 _startTime;\r\n        uint256 _endTime;\r\n        uint256 _timeRate;\r\n        mapping(uint256 => uint256) _tokenYieldingCoresMapping; // tokenId => yieldingCoreId (i.e. job)\r\n        mapping(uint256 => uint256) _yieldingCoresAmountMapping; // yieldingCoreId => amount\r\n        mapping(uint256 => uint256) _lastClaim; // tokenId => date\r\n    }\r\n\r\n    struct BoosterSettings {\r\n        address _appliesFor; // yielder\r\n        bool _status;\r\n        EnumerableSet.UintSet _yieldingCores;\r\n        mapping(uint256 => uint256) _boosterStartDates; // tokenId => boosterStartDate\r\n    }\r\n\r\n    mapping(address => YielderSettings) yielders;\r\n\r\n    mapping(address => BoosterSettings) boosters;\r\n\r\n    address[] public boostersAddresses; // boosters should be iterable\r\n\r\n    mapping(address => mapping(address => EnumerableSet.UintSet)) tokensOwnerShip; // map econtract addrss => map owner address => yieldingToken\r\n\r\n    uint256 public allowedPublicTokensMinted = 31207865 ether; // max total supply * 0.6\r\n    uint256 public foundersAndOthersAllowedMinting = 20805244 ether;\r\n    uint256 public foundersLinearDistributionPeriod = 365 days;\r\n\r\n    uint256 public foundersAndOthersLastClaim;\r\n\r\n    constructor() {\r\n        _pause();\r\n        foundersAndOthersLastClaim = block.timestamp;\r\n    }\r\n\r\n    // YIELDERS\r\n\r\n    function setYielderSettings(\r\n        uint256 _defaultYieldRate,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _timeRate,\r\n        address _yielderAddress\r\n    ) external onlyOwner {\r\n        YielderSettings storage yielderSettings =  yielders[_yielderAddress];\r\n\r\n        yielderSettings._defaultYieldRate = _defaultYieldRate;\r\n        yielderSettings._startTime = _startTime;\r\n        yielderSettings._endTime = _endTime;\r\n        yielderSettings._timeRate = _timeRate;\r\n    }\r\n\r\n    function getYielderSettings(address _address) internal view returns (YielderSettings storage) {\r\n        YielderSettings storage yielderSettings = yielders[_address];\r\n        require(yielderSettings._startTime != uint256(0), \"There is no yielder with provided address\");\r\n\r\n        return yielderSettings;\r\n    }\r\n\r\n    function setTokenYielderMapping(\r\n        address _yielderAddress,\r\n        uint256[] calldata _tokenIds,\r\n        uint256[] calldata _yieldingCores\r\n    ) external onlyOwner {\r\n        require(_tokenIds.length == _yieldingCores.length, \"Provided arrays should have the same length\");\r\n\r\n        YielderSettings storage yielderSettings = getYielderSettings(_yielderAddress);\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; ++i) {\r\n            yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]] = _yieldingCores[i];\r\n        }\r\n    }\r\n\r\n    function setYieldingAmountMapping(\r\n        address _yielderAddress,\r\n        uint256[] calldata _yieldingCores,\r\n        uint256[] calldata _amounts\r\n    ) external onlyOwner {\r\n        require(_amounts.length == _yieldingCores.length, \"Provided arrays should have the same length\");\r\n\r\n        YielderSettings storage yielderSettings = getYielderSettings(_yielderAddress);\r\n\r\n        for(uint256 i = 0; i < _yieldingCores.length; ++i) {\r\n            yielderSettings._yieldingCoresAmountMapping[_yieldingCores[i]] = _amounts[i] * (10 ** 18); // cast to ether\r\n        }\r\n    }\r\n\r\n    function setEndDateForYielder(uint256 _endTime, address _contract) external onlyOwner {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contract);\r\n        yielderSettings._endTime = _endTime;\r\n    }\r\n\r\n    function setStartDateForYielder(uint256 _startTime, address _contract) external onlyOwner {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contract);\r\n        yielderSettings._startTime = _startTime;\r\n    }\r\n\r\n    function setDefaultYieldRateForYielder(uint256 _defaultYieldRate, address _contract) external onlyOwner {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contract);\r\n        yielderSettings._defaultYieldRate = _defaultYieldRate * (10 ** 18);\r\n    }\r\n\r\n    function setTimeRateForYielder(uint256 _timeRate, address _contract) external onlyOwner {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contract);\r\n        yielderSettings._timeRate = _timeRate;\r\n    }\r\n\r\n    // BOOSTERS\r\n\r\n    function setBoosterConfiguration(\r\n        address _appliesFor,\r\n        bool _status,\r\n        address _boosterAddress\r\n    ) external onlyOwner {\r\n        boostersAddresses.push(_boosterAddress);\r\n        BoosterSettings storage boosterSettings = boosters[_boosterAddress];\r\n        boosterSettings._appliesFor=  _appliesFor;\r\n        boosterSettings._status = _status;\r\n    }\r\n\r\n    function getBoosterSettings(address _address) internal view returns (BoosterSettings storage) {\r\n        BoosterSettings storage boosterSettings = boosters[_address];\r\n        require(boosterSettings._appliesFor != address(0), \"There is no yielder with provided address\");\r\n\r\n        return boosterSettings;\r\n    }\r\n\r\n    function setBoosterCores(address _boosterAddress, uint256[] calldata _yieldingCoresIds) external onlyOwner {\r\n        BoosterSettings storage boosterSettings = getBoosterSettings(_boosterAddress);\r\n        for (uint256 i = 0; i < _yieldingCoresIds.length; ++i) {\r\n            boosterSettings._yieldingCores.add(_yieldingCoresIds[i]);\r\n        }\r\n    }\r\n\r\n    function setBoosterStatus(address _boosterAddress, bool _status) external onlyOwner {\r\n        BoosterSettings storage boosterSettings = getBoosterSettings(_boosterAddress);\r\n        boosterSettings._status = _status;\r\n    }\r\n\r\n    function setBoosterAppliesFor(address _boosterAddress, address _appliesFor) external onlyOwner{\r\n        BoosterSettings storage boosterSettings = getBoosterSettings(_boosterAddress);\r\n        boosterSettings._appliesFor = _appliesFor;\r\n    }\r\n\r\n    function replaceBoosterCores(address _boosterAddress, uint256[] calldata _yieldingCoresIds) external onlyOwner {\r\n        BoosterSettings storage boosterSettings = getBoosterSettings(_boosterAddress);\r\n\r\n        for (uint256 i = 0; i < boosterSettings._yieldingCores.length(); ++i) {\r\n            boosterSettings._yieldingCores.remove(boosterSettings._yieldingCores.at(i));\r\n        }\r\n\r\n        for (uint256 i = 0; i < _yieldingCoresIds.length; ++i) {\r\n            boosterSettings._yieldingCores.add(_yieldingCoresIds[i]);\r\n        }\r\n    }\r\n\r\n\r\n    // TOKEN\r\n\r\n    function claimRewards(\r\n        address _contractAddress,\r\n        uint256[] calldata _tokenIds\r\n    ) external whenNotPaused nonReentrant() returns (uint256) {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contractAddress);\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            uint256 _tokenId = _tokenIds[i];\r\n            processTokenOwnerShip(_contractAddress, _tokenId);\r\n        }\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256 totalUnclaimedRewards = computeUnclaimedRewardsAndUpdate(yielderSettings, _contractAddress, _tokenIds, currentTime);\r\n\r\n        claimTokens(totalUnclaimedRewards);\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            uint256 _tokenId = _tokenIds[i];\r\n            if (currentTime > yielderSettings._endTime) {\r\n                yielderSettings._lastClaim[_tokenId] = yielderSettings._endTime;\r\n            } else {\r\n                yielderSettings._lastClaim[_tokenId] = currentTime;\r\n            }\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function checkClaimableAmount(address _contractAddress, uint256[] calldata _tokenIds) view external whenNotPaused returns(uint256) {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_contractAddress);\r\n\r\n        uint256 totalUnclaimedRewards = computeUnclaimedRewardsSafe(yielderSettings, _contractAddress, _tokenIds, block.timestamp);\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function computeUnclaimedRewardsAndUpdate(\r\n        YielderSettings storage _yielderSettings,\r\n        address _yielderAddress,\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _currentTime\r\n    ) internal returns (uint256) {\r\n        uint256 totalReward = 0;\r\n\r\n        totalReward += computeBaseAccumulatedRewards(_yielderSettings, _tokenIds, _currentTime);\r\n        totalReward += computeBoostersAccumulatedRewardsAndUpdate(_yielderAddress, _yielderSettings, _tokenIds, _currentTime);\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function computeUnclaimedRewardsSafe(\r\n        YielderSettings storage _yielderSettings,\r\n        address _yielderAddress,\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _currentTime\r\n    ) internal view returns (uint256) {\r\n        uint256 totalReward = 0;\r\n\r\n        totalReward += computeBaseAccumulatedRewards(_yielderSettings, _tokenIds, _currentTime);\r\n        totalReward += computeBoostersAccumulatedRewardsSafe(_yielderAddress, _yielderSettings, _tokenIds, _currentTime);\r\n\r\n        return totalReward;\r\n    }\r\n\r\n    function computeBaseAccumulatedRewards(\r\n        YielderSettings storage _yielderSettings,\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _currentTime\r\n    ) internal view returns (uint256) {\r\n        uint256 baseAccumulatedRewards = 0;\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\r\n            uint256 lastClaimDate = getLastClaimForYielder(_yielderSettings, _tokenIds[i]);\r\n\r\n            if (lastClaimDate != _yielderSettings._endTime) {\r\n                uint256 secondsElapsed = _currentTime - lastClaimDate;\r\n                if (_yielderSettings._defaultYieldRate != uint256(0)) {\r\n                    baseAccumulatedRewards += secondsElapsed * _yielderSettings._defaultYieldRate / _yielderSettings._timeRate;\r\n                } else {\r\n                    baseAccumulatedRewards +=\r\n                    secondsElapsed * _yielderSettings._yieldingCoresAmountMapping[_yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]]] / _yielderSettings._timeRate;\r\n                }\r\n            }\r\n        }\r\n\r\n        return baseAccumulatedRewards;\r\n    }\r\n\r\n    function computeBoostersAccumulatedRewardsAndUpdate(\r\n        address _yielderAddress,\r\n        YielderSettings storage _yielderSettings,\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _currentTime\r\n    ) internal returns (uint256) {\r\n\r\n        uint256 boosterAccumulatedRewards = 0;\r\n\r\n        for (uint256 boosterIndex = 0; boosterIndex < boostersAddresses.length; ++boosterIndex) {\r\n            BoosterSettings storage boosterSettings = getBoosterSettings(boostersAddresses[boosterIndex]);\r\n            uint256 toBeSentArraysIndex = 0;\r\n            uint256[] memory accumulatedRewardsForBooster = new uint256[](_tokenIds.length);\r\n            uint256[] memory validTokensCandidates = new uint256[](_tokenIds.length);\r\n\r\n            if (boosterSettings._appliesFor == _yielderAddress && boosterSettings._status) {\r\n                for (uint256 i = 0; i < _tokenIds.length; ++i) {\r\n                    uint256 boosterStartDate = getLastClaimForBooster(boosterSettings, _tokenIds[i]);\r\n                    if (\r\n                        (\r\n                        boosterSettings._yieldingCores.length() == 0\r\n                        || boosterSettings._yieldingCores.contains(_yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]])\r\n                        ) && getLastClaimForYielder(_yielderSettings, _tokenIds[i]) != _yielderSettings._endTime\r\n                        && boosterStartDate != uint256(0)\r\n                    ) {\r\n                        uint256 secondsElapsed = _currentTime - boosterStartDate;\r\n\r\n                        if (_yielderSettings._defaultYieldRate != uint256(0)) {\r\n                            accumulatedRewardsForBooster[toBeSentArraysIndex] =\r\n                            secondsElapsed * _yielderSettings._defaultYieldRate / _yielderSettings._timeRate;\r\n                        } else {\r\n                            uint256 tokenYieldingCoresMapping = _yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]];\r\n                            uint256 yieldingCoresAmountMapping = _yielderSettings._yieldingCoresAmountMapping[tokenYieldingCoresMapping];\r\n                            accumulatedRewardsForBooster[toBeSentArraysIndex] =\r\n                            secondsElapsed * yieldingCoresAmountMapping / _yielderSettings._timeRate;\r\n                        }\r\n                        validTokensCandidates[toBeSentArraysIndex] = _tokenIds[i];\r\n                        toBeSentArraysIndex++;\r\n                    }\r\n                }\r\n                if (boosterSettings._yieldingCores.length() != 0) {\r\n                    uint256[] memory yieldingCores = new uint256[](validTokensCandidates.length);\r\n\r\n                    for (uint256 i = 0; i < validTokensCandidates.length; ++i) {\r\n                        yieldingCores[i] = _yielderSettings._tokenYieldingCoresMapping[validTokensCandidates[i]];\r\n                    }\r\n\r\n                    boosterAccumulatedRewards +=\r\n                    IBooster(boostersAddresses[boosterIndex]).computeAmounts(accumulatedRewardsForBooster, yieldingCores, validTokensCandidates);\r\n                } else {\r\n                    uint256 summedBoosterAccumulatedRewards = 0;\r\n                    for (uint256 i = 0; i < validTokensCandidates.length; ++i) {\r\n                        summedBoosterAccumulatedRewards += accumulatedRewardsForBooster[i];\r\n                    }\r\n                    boosterAccumulatedRewards += IBooster(boostersAddresses[boosterIndex]).computeAmount(summedBoosterAccumulatedRewards);\r\n                }\r\n                for (uint256 i = 0; i < validTokensCandidates.length; ++i) {\r\n                    if (boosterSettings._boosterStartDates[validTokensCandidates[i]] != uint256(0)) {\r\n                        boosterSettings._boosterStartDates[validTokensCandidates[i]] = _currentTime;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return boosterAccumulatedRewards;\r\n    }\r\n\r\n    function computeBoostersAccumulatedRewardsSafe(\r\n        address _yielderAddress,\r\n        YielderSettings storage _yielderSettings,\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _currentTime\r\n    ) internal view returns (uint256) {\r\n\r\n        uint256 boosterAccumulatedRewards = 0;\r\n\r\n        for (uint256 boosterIndex = 0; boosterIndex < boostersAddresses.length; ++boosterIndex) {\r\n            BoosterSettings storage boosterSettings = getBoosterSettings(boostersAddresses[boosterIndex]);\r\n            uint256 toBeSentArraysIndex = 0;\r\n            uint256[] memory accumulatedRewardsForBooster = new uint256[](_tokenIds.length);\r\n            uint256[] memory validTokensCandidates = new uint256[](_tokenIds.length);\r\n\r\n            if (boosterSettings._appliesFor == _yielderAddress && boosterSettings._status) {\r\n                for (uint256 i = 0; i < _tokenIds.length; ++i) {\r\n                    uint256 boosterStartDate = getLastClaimForBooster(boosterSettings, _tokenIds[i]);\r\n                    if (\r\n                        (\r\n                        boosterSettings._yieldingCores.length() == 0\r\n                        || boosterSettings._yieldingCores.contains(_yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]])\r\n                        ) && getLastClaimForYielder(_yielderSettings, _tokenIds[i]) != _yielderSettings._endTime\r\n                        && boosterStartDate != uint256(0)\r\n                    ) {\r\n\r\n                        uint256 secondsElapsed = _currentTime - boosterStartDate;\r\n\r\n                        if (_yielderSettings._defaultYieldRate != uint256(0)) {\r\n                            accumulatedRewardsForBooster[toBeSentArraysIndex] =\r\n                            secondsElapsed * _yielderSettings._defaultYieldRate / _yielderSettings._timeRate;\r\n                        } else {\r\n                            uint256 tokenYieldingCoresMapping = _yielderSettings._tokenYieldingCoresMapping[_tokenIds[i]];\r\n                            uint256 yieldingCoresAmountMapping = _yielderSettings._yieldingCoresAmountMapping[tokenYieldingCoresMapping];\r\n                            accumulatedRewardsForBooster[toBeSentArraysIndex] =\r\n                            secondsElapsed * yieldingCoresAmountMapping / _yielderSettings._timeRate;\r\n                        }\r\n                        validTokensCandidates[toBeSentArraysIndex] = _tokenIds[i];\r\n                        toBeSentArraysIndex++;\r\n                    }\r\n                }\r\n                if (boosterSettings._yieldingCores.length() != 0) {\r\n                    uint256[] memory yieldingCores = new uint256[](validTokensCandidates.length);\r\n\r\n                    for (uint256 i = 0; i < validTokensCandidates.length; ++i) {\r\n                        yieldingCores[i] = _yielderSettings._tokenYieldingCoresMapping[validTokensCandidates[i]];\r\n                    }\r\n\r\n                    boosterAccumulatedRewards +=\r\n                    IBooster(boostersAddresses[boosterIndex]).computeAmounts(accumulatedRewardsForBooster, yieldingCores, validTokensCandidates);\r\n\r\n                } else {\r\n                    uint256 summedBoosterAccumulatedRewards = 0;\r\n                    for (uint256 i = 0; i < validTokensCandidates.length; ++i) {\r\n                        summedBoosterAccumulatedRewards += accumulatedRewardsForBooster[i];\r\n                    }\r\n                    boosterAccumulatedRewards += IBooster(boostersAddresses[boosterIndex]).computeAmount(summedBoosterAccumulatedRewards);\r\n                }\r\n            }\r\n        }\r\n\r\n        return boosterAccumulatedRewards;\r\n    }\r\n\r\n    function getLastClaimForYielder(YielderSettings storage _yielderSettings, uint256 _tokenId) internal view returns (uint256) {\r\n        uint256 lastClaimDate =  _yielderSettings._lastClaim[_tokenId];\r\n        if (lastClaimDate == uint256(0)) {\r\n            lastClaimDate = _yielderSettings._startTime;\r\n        }\r\n\r\n        return lastClaimDate;\r\n    }\r\n\r\n    function getLastClaim(address _yielderAddress, uint256 _tokenId) external whenNotPaused view returns (uint256) {\r\n        YielderSettings storage yielderSettings = getYielderSettings(_yielderAddress);\r\n\r\n        return getLastClaimForYielder(yielderSettings, _tokenId);\r\n    }\r\n\r\n    function getLastClaimForBooster(BoosterSettings storage _boosterSettings, uint256 _tokenId) view internal returns (uint256) {\r\n        uint256 lastClaimDate = _boosterSettings._boosterStartDates[_tokenId];\r\n\r\n        return lastClaimDate;\r\n    }\r\n\r\n\r\n    // UTILS\r\n\r\n    function watchTransfer(address _from, address _to, uint256 _tokenId) external {\r\n        getYielderSettings(msg.sender);\r\n\r\n        if (_from == address(0)) {\r\n            tokensOwnerShip[msg.sender][_to].add(_tokenId);\r\n        } else {\r\n            tokensOwnerShip[msg.sender][_to].add(_tokenId);\r\n            if (tokensOwnerShip[msg.sender][_from].contains(_tokenId)) {\r\n                tokensOwnerShip[msg.sender][_from].remove(_tokenId);\r\n                if (tokensOwnerShip[msg.sender][_from].length() == 0) {\r\n                    delete tokensOwnerShip[msg.sender][_from];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function watchBooster(address _collection, uint256[] calldata _tokenIds, uint256[] calldata _startDates) external {\r\n        // boster shall send uint256(0) as start if removed\r\n        BoosterSettings storage boosterSettings = getBoosterSettings(msg.sender);\r\n\r\n        if (boosterSettings._appliesFor == _collection) {\r\n            for (uint32 i = 0; i < _tokenIds.length; ++i) {\r\n                boosterSettings._boosterStartDates[_tokenIds[i]] = _startDates[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimTokens(uint256 _amount) internal {\r\n        if (allowedPublicTokensMinted - _amount >= 0) {\r\n            _mint(msg.sender, _amount);\r\n            allowedPublicTokensMinted -= _amount;\r\n        } else {\r\n            IERC20(address(this)).transfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function processTokenOwnerShip(address _contractAddress, uint256 _tokenId) internal {\r\n        if (!tokensOwnerShip[_contractAddress][msg.sender].contains(_tokenId)) {\r\n            address owner = IYielder(_contractAddress).ownerOf(_tokenId);\r\n            if (owner == msg.sender) {\r\n                tokensOwnerShip[_contractAddress][msg.sender].add(_tokenId);\r\n            }\r\n        }\r\n        require(tokensOwnerShip[_contractAddress][msg.sender].contains(_tokenId), \"Not the owner of the token\");\r\n\r\n    }\r\n\r\n    function reserveTeamTokens() external onlyOwner {\r\n        uint256 currentDate = block.timestamp;\r\n        _mint(msg.sender, foundersAndOthersAllowedMinting * (currentDate - foundersAndOthersLastClaim) / foundersLinearDistributionPeriod);\r\n\r\n        foundersAndOthersLastClaim = block.timestamp;\r\n    }\r\n\r\n    function withdrawContractAdditionalTokens() external onlyOwner {\r\n        IERC20(address(this)).transfer(msg.sender, IERC20(address(this)).balanceOf(address(this)));\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function setPublicAllowedTokensToBeMinted(uint256 _amount) external onlyOwner {\r\n        allowedPublicTokensMinted = _amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedPublicTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersAndOthersAllowedMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersAndOthersLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersLinearDistributionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yielderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_yieldingCoresIds\",\"type\":\"uint256[]\"}],\"name\":\"replaceBoosterCores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_appliesFor\",\"type\":\"address\"}],\"name\":\"setBoosterAppliesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_appliesFor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_boosterAddress\",\"type\":\"address\"}],\"name\":\"setBoosterConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_yieldingCoresIds\",\"type\":\"uint256[]\"}],\"name\":\"setBoosterCores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBoosterStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultYieldRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setDefaultYieldRateForYielder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setEndDateForYielder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPublicAllowedTokensToBeMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setStartDateForYielder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTimeRateForYielder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yielderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_yieldingCores\",\"type\":\"uint256[]\"}],\"name\":\"setTokenYielderMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultYieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yielderAddress\",\"type\":\"address\"}],\"name\":\"setYielderSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yielderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_yieldingCores\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setYieldingAmountMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startDates\",\"type\":\"uint256[]\"}],\"name\":\"watchBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"watchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawContractAdditionalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HumansOfTheMetaverseToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41b7ccfca971685acbc29a15aaf0b79b6c92a1202db4b6eedf8a4833b7377645"}