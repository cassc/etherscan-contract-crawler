{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: bag.sol\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n}\r\n\r\ninterface IV3SwapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\r\n    function factory() external view returns (address);\r\n\tfunction positionManager() external view returns (address);\r\n\tfunction WETH9() external view returns (address);\r\n}\r\n\r\ninterface IV3Factory {\r\n\tfunction createPool(address _tokenA, address _tokenB, uint24 _fee) external returns (address);\r\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\r\n\r\n}\r\n\r\ninterface IV3Pool {\r\n\tfunction initialize(uint160 _sqrtPriceX96) external;\r\n    function slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint32 feeProtocol, bool unlocked);\r\n    }\r\n\r\ninterface IV3NonfungiblePositionManager {\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n     struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    function positions(uint256 tokenId)external view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1);\r\n    function mint(MintParams calldata params) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    function createAndInitializePoolIfNecessary(address token0, address token1, uint24 fee, uint160 sqrtPriceX96) external payable returns (address pool);\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n    function burn(uint256 tokenId) external payable;\r\n\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract XBC_Cock_Coup is  Ownable, ReentrancyGuard{\r\n\r\n    IV3NonfungiblePositionManager public immutable nonfungiblePositionManager;\r\n    IV3Factory public immutable V3Factory;\r\n    IFactoryV2 public immutable V2Factory;\r\n    IV3SwapRouter public immutable V3swapRouter;  \r\n    IRouter02 public immutable V2swapRouter;\r\n\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;  // Weth 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public constant Dead = 0x000000000000000000000000000000000000dEaD; \r\n    IERC20 public XBCToken; \r\n    \r\n    uint256 private tokenId;\r\n    uint256 private amount0;\r\n    uint256 private amount1;\r\n    bool public isCockSet;\r\n    \r\n\r\n    mapping(uint256 => Position) public positions;\r\n    uint256[] public allTokenIds;\r\n\r\n    address[] public claimableTokens;\r\n    mapping(address => bool) public tokenIsActive;\r\n\r\n    mapping(address => bool) private _authorizedAccounts;\r\n    event AccountAuthorized(address indexed account);\r\n    event AccountDeauthorized(address indexed account);\r\n\r\n    modifier onlyAuthorized() {\r\n        require(_authorizedAccounts[msg.sender] || msg.sender == owner(), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    \r\n\r\n    struct Position {\r\n        address owner;\r\n        uint256 tokenId;\r\n        address token0;\r\n        address token1;\r\n        uint24 mintFee;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        bool useV2;\r\n    }\r\n\r\n    constructor(\r\n        address _nonfungiblePositionManager,\r\n        address _V3Factory,\r\n        address _V3swapRouter,\r\n        address _V2Factory,\r\n        address _V2swapRouter    \r\n\r\n    ) {\r\n        nonfungiblePositionManager = IV3NonfungiblePositionManager(_nonfungiblePositionManager);\r\n        V3Factory = IV3Factory(_V3Factory);\r\n        V3swapRouter = IV3SwapRouter(_V3swapRouter);\r\n        V2Factory = IFactoryV2 (_V2Factory);\r\n        V2swapRouter = IRouter02(_V2swapRouter);\r\n        \r\n        \r\n        \r\n       \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function authorizeAccount(address account) external onlyOwner {\r\n        require(account != address(0), \"Zero address cannot be authorized\");\r\n        require(!_authorizedAccounts[account], \"Account already authorized\");\r\n\r\n        _authorizedAccounts[account] = true;\r\n\r\n        emit AccountAuthorized(account);\r\n    }\r\n\r\n//  function to deauthorize an account, callable only by the owner\r\n    function deauthorizeAccount(address account) external onlyOwner {\r\n        require(account != address(0), \"Zero address cannot be deauthorized\");\r\n        require(_authorizedAccounts[account], \"Account is not authorized\");\r\n\r\n        _authorizedAccounts[account] = false;\r\n\r\n        emit AccountDeauthorized(account);\r\n    }\r\n\r\n//  function to check if an account is authorized\r\n    function isAccountAuthorized(address account) external view returns (bool) {\r\n        return _authorizedAccounts[account];\r\n    }\r\n\r\n\r\n     function getAllTokenIds() public view returns (uint256[] memory) {\r\n        return allTokenIds;\r\n    }\r\n\r\n    // Wrap Specified Amount of Contract's ETH to WETH\r\n    function wrapETH(uint256 amount) external onlyAuthorized {\r\n        require(amount <= address(this).balance, \"Insufficient ETH balance\");\r\n        \r\n        IWETH(WETH).deposit{value: amount}();\r\n    }\r\n\r\n    // Unwrap Specified Amount of Contract's WETH to ETH\r\n    function unwrapWETH(uint256 amount) external onlyAuthorized {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        IERC20 weth = IERC20(WETH);\r\n        require(weth.balanceOf(address(this)) >= amount, \"Insufficient WETH balance\");\r\n\r\n        // Ensure that the contract is approved to spend its own WETH\r\n        if (weth.allowance(address(this), address(WETH)) < amount) {\r\n            weth.approve(address(WETH), amount);\r\n        }\r\n\r\n        IWETH(WETH).withdraw(amount);\r\n    }\r\n\r\n    function createAndInitializePoolIfNecessary(\r\n        address _tokenA, \r\n        address _tokenB, \r\n        uint24 _fee, \r\n        uint160 _sqrtPriceX96\r\n    ) external onlyAuthorized returns (address pool) {\r\n        pool = V3Factory.getPool(_tokenA, _tokenB, _fee);\r\n        \r\n        // Create the pool if it doesn't exist\r\n        if (pool == address(0)) {\r\n            pool = V3Factory.createPool(_tokenA, _tokenB, _fee);\r\n            require(pool != address(0), \"Failed to create pool\");\r\n            IV3Pool(pool).initialize(_sqrtPriceX96);\r\n        } else {\r\n            // Check if the pool is already initialized\r\n            (uint160 sqrtPriceX96,,,,,,) = IV3Pool(pool).slot0();\r\n            if (sqrtPriceX96 == 0) {\r\n                IV3Pool(pool).initialize(_sqrtPriceX96);\r\n            }\r\n        }\r\n\r\n        require(pool != address(0), \"Pool creation failed\");\r\n        return pool;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setCock(address _Cock) external onlyOwner {\r\n        require(!isCockSet, \"Cock can only be set once\");\r\n        require(_Cock != address(0), \"Cock address cannot be zero\");\r\n\r\n       XBCToken = IERC20(_Cock);\r\n        isCockSet = true;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256 _tokenId,\r\n        bytes memory\r\n     ) public virtual  returns (bytes4) {\r\n        \r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function getV3poolAddress (address token0, address token1, uint24 poolFee) public view returns (address) {\r\n        address poolAddress = V3Factory.getPool(token0, token1, poolFee);\r\n        return poolAddress;\r\n    }\r\n\r\n\r\n    function getAmountsOut(address inputToken, address outputToken, uint256 amountIn) public view returns (uint256) {\r\n      address[] memory path = new address[](2);\r\n      path[0] = inputToken;\r\n      path[1] = outputToken;\r\n      uint256[] memory amounts = V2swapRouter.getAmountsOut(amountIn, path);\r\n      return amounts[1];\r\n    }\r\n\r\n    function getLiquidity(uint256 __tokenId) public view returns (uint128 liquidity) {\r\n        (, , , , , , , liquidity, , , , ) = nonfungiblePositionManager.positions(__tokenId);\r\n    }\r\n\r\n \r\n    function getCurrentTick(address token0, address token1, uint24 poolFee) public view returns (int24) {\r\n        address poolAddress = V3Factory.getPool(token0, token1, poolFee);\r\n\r\n        IV3Pool pool = IV3Pool(poolAddress);\r\n\r\n        (, int24 currentTick, , , , , ) = pool.slot0();\r\n\r\n        return currentTick;\r\n    }\r\n\r\n    function _getCurrentTickByTokenId(uint256 tokenIDS) public view returns (int24) {\r\n        Position memory position = positions[tokenIDS];\r\n        address token0 = position.token0;\r\n        address token1 = position.token1;\r\n        uint24 poolFee = position.mintFee;\r\n\r\n        address poolAddress = V3Factory.getPool(token0, token1, poolFee);\r\n        IV3Pool pool = IV3Pool(poolAddress);\r\n        (, int24 currentTick, , , , , ) = pool.slot0();\r\n\r\n        return currentTick;\r\n    }\r\n\r\n    \r\n\r\n     function SwapV2(address inputTokens, address outputToken, uint256 amountIn) external onlyAuthorized {\r\n      _swapV2(inputTokens, outputToken, amountIn);\r\n    }\r\n\r\n    function SwapV3(address inputToken, address outputToken, uint24 swapFee, uint256 amountIn) external onlyAuthorized {\r\n      _swapV3(inputToken, outputToken, swapFee, amountIn);\r\n    }\r\n\r\n    function _swapV2(address inputToken, address outputToken, uint256 amountIn) internal returns (uint256 amountOut) {\r\n               require(address(inputToken) != address(XBCToken), \"Selling COCK token is not allowed\");\r\n\r\n\r\n        if (amountIn == 0) {\r\n        return 0;\r\n        }\r\n        IERC20(inputToken).approve(address(V2swapRouter), amountIn);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = inputToken;\r\n        path[1] = outputToken;\r\n\r\n        uint256 balanceBefore = IERC20(outputToken).balanceOf(address(this));\r\n\r\n   \r\n        V2swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 60\r\n        );\r\n\r\n    \r\n        amountOut = IERC20(outputToken).balanceOf(address(this)) - balanceBefore;\r\n\r\n        return amountOut;\r\n    }\r\n\r\n\r\n    function _swapV3(address inputToken, address outputToken, uint24 swapFee, uint256 amountIn) internal returns (uint256 amountOut) {\r\n\r\n        require(address(inputToken) != address(XBCToken), \"Selling COCK token is not allowed\");\r\n\r\n        if (amountIn == 0) {\r\n        return 0;\r\n        }\r\n        \r\n          \r\n            IERC20(inputToken).approve(address(V3swapRouter), amountIn);\r\n\r\n            IV3SwapRouter.ExactInputSingleParams memory swapParams = IV3SwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: inputToken,\r\n                tokenOut: outputToken,\r\n                fee: swapFee,\r\n                recipient: address(this),\r\n                deadline: block.timestamp + 600,  // Deadline\r\n                amountIn: amountIn,\r\n                amountOutMinimum: 0,// amountsOut - amountsOut / slippage,  \r\n                sqrtPriceLimitX96: 0  \r\n            });\r\n\r\n            \r\n            amountOut = V3swapRouter.exactInputSingle(swapParams);\r\n    \r\n        return amountOut;\r\n    }\r\n\r\n    \r\n    function CollectEggs(uint256 tokenID) external nonReentrant{\r\n      _collect(tokenID);\r\n    }\r\n\r\n    \r\n\r\n    function _decreaseLiquidity(uint256 _tokenId) internal returns (uint256 _amount0, uint256 _amount1){\r\n        (, , , , , , , uint128 _liquidityt, , , , ) = nonfungiblePositionManager.positions(_tokenId);\r\n\r\n        // Execute the decrease liquidity operation\r\n        (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(\r\n            IV3NonfungiblePositionManager.DecreaseLiquidityParams({\r\n                tokenId: _tokenId,\r\n                liquidity: _liquidityt,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                deadline: block.timestamp + 600 // 10 minutes from the current block time\r\n            })\r\n        );\r\n        \r\n        return (amount0, amount1);\r\n    }\r\n\r\n    function _collect(uint256 _tokenId) internal returns (uint256 collectedAmount0, uint256 collectedAmount1) {\r\n         (collectedAmount0, collectedAmount1) = nonfungiblePositionManager.collect(\r\n            IV3NonfungiblePositionManager.CollectParams({\r\n                tokenId: _tokenId,\r\n                recipient: address(this),\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            })\r\n        );\r\n        return (collectedAmount0, collectedAmount1);\r\n    }\r\n\r\n    function increaseLiquidity(uint256 _tokenId, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external onlyAuthorized {\r\n         // Get the position details\r\n        Position storage position = positions[_tokenId];\r\n\r\n        // Approve the position manager to pull tokens\r\n        IERC20(position.token0).approve(address(nonfungiblePositionManager), amount0Desired);\r\n        IERC20(position.token1).approve(address(nonfungiblePositionManager), amount1Desired);\r\n\r\n         // Set the parameters for the increase liquidity operation\r\n        IV3NonfungiblePositionManager.IncreaseLiquidityParams memory params = IV3NonfungiblePositionManager.IncreaseLiquidityParams({\r\n         tokenId: _tokenId,\r\n         amount0Desired: amount0Desired,\r\n          amount1Desired: amount1Desired,\r\n            amount0Min: amount0Min,\r\n            amount1Min: amount1Min,\r\n            deadline: block.timestamp + 600 // 10 minutes from the current block time\r\n        });\r\n\r\n            // Execute the increase liquidity operation\r\n        (, amount0, amount1) = nonfungiblePositionManager.increaseLiquidity(params);\r\n\r\n    \r\n    }\r\n\r\n\r\n    function mintPosition(address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint256 amount0Desired, uint256 amount1Desired, bool useV2) external onlyAuthorized {\r\n        // Approve the position manager to pull tokens\r\n        IERC20(token0).approve(address(nonfungiblePositionManager), amount0Desired);\r\n        IERC20(token1).approve(address(nonfungiblePositionManager), amount1Desired);\r\n\r\n        IV3NonfungiblePositionManager.MintParams memory params = IV3NonfungiblePositionManager.MintParams({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: fee,\r\n         tickLower: tickLower,\r\n         tickUpper: tickUpper,\r\n         amount0Desired: amount0Desired,\r\n         amount1Desired: amount1Desired,\r\n         amount0Min: 0,\r\n         amount1Min: 0,\r\n         recipient: address(this),\r\n         deadline: block.timestamp + 600 // 10 minutes from the current block time\r\n        });\r\n\r\n        (tokenId,, amount0, amount1) = nonfungiblePositionManager.mint(params);\r\n\r\n        positions[tokenId] = Position({\r\n        owner: address(this),\r\n        tokenId: tokenId,\r\n        token0: token0,\r\n        token1: token1,\r\n        mintFee: fee,\r\n        lowerTick: tickLower,\r\n        upperTick: tickUpper,\r\n        useV2: useV2\r\n        });\r\n    \r\n        allTokenIds.push(tokenId);\r\n    }\r\n\r\n    function enterPositionSwap(address token0, address token1, uint24 mintFee, int24 lowerTick, int24 upperTick, uint256 swapAmountInEth, bool useV2, uint256 mintSlippage) external onlyAuthorized {\r\n        \r\n        address tokenIn = WETH;  \r\n        address tokenOut = token0 == WETH ? token1 : token0; \r\n        \r\n\r\n        if (useV2) {\r\n\r\n            _swapV2(tokenIn, tokenOut, swapAmountInEth);\r\n\r\n        } else {\r\n           \r\n           _swapV3(tokenIn, tokenOut, mintFee, swapAmountInEth);\r\n\r\n        }\r\n\r\n        uint256 maxAmount0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 maxAmount1 = IERC20(token1).balanceOf(address(this));\r\n        TransferHelper.safeApprove(token0, address(nonfungiblePositionManager), maxAmount0);\r\n        TransferHelper.safeApprove(token1, address(nonfungiblePositionManager), maxAmount1);\r\n\r\n\r\n        IV3NonfungiblePositionManager.MintParams\r\n            memory mintParams = IV3NonfungiblePositionManager.MintParams({\r\n                token0: token0,\r\n                token1: token1,\r\n                fee: mintFee,\r\n                tickLower: lowerTick,\r\n                tickUpper: upperTick,\r\n                amount0Desired: maxAmount0,\r\n                amount1Desired: maxAmount1,\r\n                amount0Min: maxAmount0 - maxAmount0 / mintSlippage,\r\n                amount1Min: maxAmount1 - maxAmount1 / mintSlippage,\r\n                recipient: address(this),\r\n                deadline: block.timestamp + 600\r\n            });\r\n\r\n        (tokenId, , amount0, amount1) = nonfungiblePositionManager.mint(mintParams);\r\n\r\n        positions[tokenId] = Position({\r\n        owner: address(this),\r\n        tokenId: tokenId,\r\n        token0: token0,\r\n        token1: token1,\r\n        mintFee: mintFee,\r\n        lowerTick: lowerTick,\r\n        upperTick: upperTick,\r\n        useV2: useV2\r\n    });\r\n\r\n        allTokenIds.push(tokenId);\r\n\r\n    }\r\n\r\n    function exitPosition(uint256 _tokenId) external onlyAuthorized{\r\n       \r\n\r\n         \r\n            nonfungiblePositionManager.collect(\r\n            IV3NonfungiblePositionManager.CollectParams({\r\n                tokenId: _tokenId,\r\n                recipient: address(this),\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            })\r\n        );\r\n          \r\n\r\n\r\n\r\n        (, , , , , , , uint128 liquidity, , , , ) = nonfungiblePositionManager\r\n            .positions(_tokenId);\r\n\r\n        nonfungiblePositionManager.decreaseLiquidity(\r\n            IV3NonfungiblePositionManager.DecreaseLiquidityParams({\r\n                tokenId: _tokenId,\r\n                liquidity: liquidity,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                deadline: block.timestamp + 600\r\n            })\r\n        );\r\n\r\n        nonfungiblePositionManager.collect(\r\n            IV3NonfungiblePositionManager.CollectParams({\r\n                tokenId: _tokenId,\r\n                recipient: address(this),\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            })\r\n        );\r\n\r\n        nonfungiblePositionManager.burn(_tokenId);\r\n\r\n        for (uint256 i = 0; i < allTokenIds.length; i++) {\r\n        if (allTokenIds[i] == _tokenId) {\r\n            allTokenIds[i] = allTokenIds[allTokenIds.length - 1];\r\n            allTokenIds.pop();\r\n            break;\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n     // Function to add a token to the claimable list\r\n    function addTokenToClaimable(address _token) external onlyAuthorized {\r\n        require(!tokenIsActive[_token], \"Token already claimable\");\r\n        claimableTokens.push(_token);\r\n        tokenIsActive[_token] = true;\r\n    }\r\n\r\n    // Function to remove a token from the claimable list\r\n    function removeTokenFromClaimable(address _token) external onlyAuthorized {\r\n        require(tokenIsActive[_token], \"Token not claimable\");\r\n        tokenIsActive[_token] = false;\r\n        // This is a gas-intensive operation because it requires shifting array elements\r\n        for (uint256 i = 0; i < claimableTokens.length; i++) {\r\n            if (claimableTokens[i] == _token) {\r\n                claimableTokens[i] = claimableTokens[claimableTokens.length - 1];\r\n                claimableTokens.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimFunds(uint256 amountOfXBC) external nonReentrant{\r\n        require(amountOfXBC > 0, \"Amount must be greater than 0\");\r\n        uint256 userBalance = XBCToken.balanceOf(msg.sender);\r\n        require(userBalance >= amountOfXBC, \"Insufficient XBC balance\");\r\n\r\n            XBCToken.transferFrom(msg.sender, Dead, amountOfXBC);\r\n\r\n\r\n        // Calculate the user's share percentage based on the specified amount of COCK\r\n        uint256 userSharePercentage = (amountOfXBC * 1e18) / getCirculatingSupply();\r\n\r\n        for (uint256 i = 0; i < claimableTokens.length; i++) {\r\n            address token = claimableTokens[i];\r\n            if (!tokenIsActive[token]) continue; // Skip inactive tokens\r\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n            if (tokenBalance == 0) continue; // Skip if no balance\r\n\r\n           \r\n            \r\n            // Calculate claimable amount based on the user's share percentage\r\n            uint256 claimableAmount = (tokenBalance * userSharePercentage) / 1e18;\r\n            if (claimableAmount > 0) {\r\n                IERC20(token).transfer(msg.sender, claimableAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        uint256 totalSupply = XBCToken.totalSupply();\r\n        uint256 burnedAmount = XBCToken.balanceOf(address(Dead)); // Assuming address(0) is the burn address\r\n        uint256 contractBalance = XBCToken.balanceOf(address(this));\r\n        return totalSupply - burnedAmount - contractBalance;\r\n    }\r\n\r\n    struct ClaimableToken {\r\n    address tokenAddress;\r\n    uint256 claimableAmount;\r\n    }\r\n\r\n    function getClaimableAmounts(address userAddress) public view returns (ClaimableToken[] memory) {\r\n    uint256 userBalance = XBCToken.balanceOf(userAddress);\r\n    uint256 userSharePercentage = (userBalance * 1e18) / getCirculatingSupply();\r\n\r\n    ClaimableToken[] memory claimableAmounts = new ClaimableToken[](claimableTokens.length);\r\n\r\n    for (uint256 i = 0; i < claimableTokens.length; i++) {\r\n        address token = claimableTokens[i];\r\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n        \r\n        // Calculate claimable amount based on the user's share percentage\r\n        uint256 claimableAmount = (tokenBalance * userSharePercentage) / 1e18;\r\n        \r\n        claimableAmounts[i] = ClaimableToken({\r\n            tokenAddress: token,\r\n            claimableAmount: claimableAmount\r\n        });\r\n    }\r\n\r\n    return claimableAmounts;\r\n   }\r\n\r\n    function WithdrawERC20( address _contract, address _to) external onlyOwner {\r\n        require(!isCockSet, \"No withdraw once Cock is set\");\r\n        uint256 amount = IERC20(_contract).balanceOf(address(this));\r\n        IERC20(_contract).transfer(_to, amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_V3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_V3swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_V2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_V2swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountDeauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"CollectEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"SwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"swapFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"SwapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2Factory\",\"outputs\":[{\"internalType\":\"contract IFactoryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V3Factory\",\"outputs\":[{\"internalType\":\"contract IV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V3swapRouter\",\"outputs\":[{\"internalType\":\"contract IV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XBCToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIDS\",\"type\":\"uint256\"}],\"name\":\"_getCurrentTickByTokenId\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addTokenToClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorizeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfXBC\",\"type\":\"uint256\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deauthorizeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"mintFee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountInEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useV2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mintSlippage\",\"type\":\"uint256\"}],\"name\":\"enterPositionSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getClaimableAmounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct XBC_Cock_Coup.ClaimableToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"name\":\"getCurrentTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"name\":\"getV3poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCockSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useV2\",\"type\":\"bool\"}],\"name\":\"mintPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract IV3NonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"mintFee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"useV2\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeTokenFromClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Cock\",\"type\":\"address\"}],\"name\":\"setCock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XBC_Cock_Coup", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe880000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e65e89c6a397554b980dc77ccb027e32b134f9a7425b2d5213630d1f7ef45b1"}