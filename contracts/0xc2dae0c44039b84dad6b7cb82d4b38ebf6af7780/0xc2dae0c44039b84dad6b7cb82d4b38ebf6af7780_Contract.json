{"SourceCode": "pragma solidity 0.5.13;\r\n\r\n//CHADs, if you cloned it, don't be BADASS and send some tokens here: 0x21eb0E524B7f68D8B8B1d8b670df182b797faAF0\r\n\r\n//Happy CODING!!!\r\n\r\ncontract Contract {\r\n\r\n\tuint256 constant private TOKEN_PRECISION = 1e6;\r\n\tuint256 constant private PRECISION = 1e12;\r\n\t\r\n\tuint256 constant private initial_supply = 6 * TOKEN_PRECISION;\r\n\tuint256 constant private max_supply = 3000 * TOKEN_PRECISION;\r\n\t    \r\n\tstring constant public name = \"TIM3\";\r\n\tstring constant public symbol = \"TIM3\";\r\n\t\r\n\tuint8 constant public decimals = 6;\r\n\t\r\n    uint256 constant private round = 60 seconds;\r\n    uint256 constant private partOfToken = 60;\r\n  \r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tuint256 appliedTokenCirculation;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\taddress admin;\r\n        uint256 coinWorkingTime;\r\n        uint256 coinCreationTime;\r\n        address uniswapV2PairAddress;\r\n        bool initialSetup;\r\n        uint256 maxSupply;\r\n\t}\r\n\r\n\tInfo private info;\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\t\r\n\tconstructor() public {\r\n\t    info.coinWorkingTime = now;\r\n\t    info.coinCreationTime = now;\r\n\t    info.uniswapV2PairAddress = address(0);\r\n\t     \r\n\t\tinfo.admin = msg.sender;\r\n\t\tinfo.totalSupply = initial_supply;\r\n\t\tinfo.maxSupply = initial_supply;\r\n\t\t \r\n\t\tinfo.users[msg.sender].balance = initial_supply;\r\n\t\tinfo.users[msg.sender].appliedTokenCirculation = initial_supply;\r\n\t\t\r\n\t\tinfo.initialSetup = false;\r\n\t}\r\n\t\r\n\t// start once during initialization\r\n    function setUniswapAddress (address _uniswapV2PairAddress) public {\r\n        require(msg.sender == info.admin);\r\n        require(!info.initialSetup);\r\n        info.uniswapV2PairAddress = _uniswapV2PairAddress;\r\n        info.initialSetup = true; // close system\r\n        info.maxSupply = max_supply; // change max supply and start rebase system\r\n        info.coinWorkingTime = now;\r\n\t    info.coinCreationTime = now;\r\n\t\tinfo.users[_uniswapV2PairAddress].appliedTokenCirculation = info.totalSupply;\r\n\t\tinfo.users[address(this)].appliedTokenCirculation = info.totalSupply;\r\n    }\r\n    \r\n\tfunction uniswapAddress() public view returns (address) {\r\n\t    return info.uniswapV2PairAddress;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t    uint256 countOfCoinsToAdd = ((now - info.coinCreationTime) / round);\r\n        uint256 realTotalSupply = initial_supply + (((countOfCoinsToAdd) * TOKEN_PRECISION) / partOfToken);\r\n        \r\n        if(realTotalSupply >= info.maxSupply)\r\n        {\r\n            realTotalSupply = info.maxSupply;\r\n        }\r\n        \r\n\t\treturn realTotalSupply;\r\n\t}\r\n\t\r\n\tfunction balanceOfTokenCirculation(address _user) private view returns (uint256) {\r\n\t\treturn info.users[_user].appliedTokenCirculation;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction allUserBalances(address _user) public view returns (uint256 totalTokenSupply, uint256 userTokenCirculation, uint256 userBalance, uint256 realUserBalance) {\r\n\t\treturn (totalSupply(), balanceOfTokenCirculation(_user), balanceOf(_user), realUserTokenBalance(_user));\r\n\t}\r\n\t\r\n\tfunction realUserTokenBalance(address _user)  private view returns (uint256 totalTokenSupply)\r\n\t{\r\n\t    uint256 countOfCoinsToAdd = ((now - info.coinCreationTime) / round);\r\n        uint256 realTotalSupply = initial_supply + (((countOfCoinsToAdd) * TOKEN_PRECISION) / partOfToken);\r\n        \r\n        if(realTotalSupply >= info.maxSupply)\r\n        {\r\n            realTotalSupply = info.maxSupply;\r\n        }\r\n        \r\n\t    uint256 AppliedTokenCirculation = info.users[_user].appliedTokenCirculation; \r\n        uint256 addressBalance = info.users[_user].balance;\r\n       \r\n        uint256 adjustedAddressBalance = ((((addressBalance * PRECISION)) / AppliedTokenCirculation) * realTotalSupply) / PRECISION;\r\n  \r\n        return (adjustedAddressBalance);\r\n\t}\r\n\t\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\r\n\t \trequire(balanceOf(_from) >= _tokens && balanceOf(_from) >= 1);\r\n\t \t\r\n\t \tuint256 _transferred = 0;\r\n\t \t\r\n        bool isNewUser = info.users[_to].balance == 0;\r\n        \t\t\r\n        if(isNewUser)\r\n        {\r\n            info.users[_to].appliedTokenCirculation = info.totalSupply;\r\n        }\r\n        \r\n        if(info.coinWorkingTime + round < now)\r\n        {\r\n            uint256 countOfCoinsToAdd = ((now - info.coinCreationTime) / round); \r\n            info.coinWorkingTime = now;\r\n          \r\n            info.totalSupply = initial_supply + (((countOfCoinsToAdd) * TOKEN_PRECISION) / partOfToken);\r\n            \r\n            if(info.totalSupply >= info.maxSupply)\r\n            {\r\n                info.totalSupply = info.maxSupply;\r\n            }\r\n        }\r\n        \r\n        info.users[_from].balance = ((((info.users[_from].balance * PRECISION) / info.users[_from].appliedTokenCirculation) * info.totalSupply)) / PRECISION;\r\n        info.users[_to].balance = ((((info.users[_to].balance * PRECISION) / info.users[_to].appliedTokenCirculation) * info.totalSupply)) / PRECISION;\r\n        \r\n        uint256 adjustedTokens = (((((_tokens * PRECISION) / info.users[_from].appliedTokenCirculation) * info.totalSupply)) / PRECISION);\r\n        \r\n        if(info.uniswapV2PairAddress != address(0)){\r\n\t\t\tinfo.users[info.uniswapV2PairAddress].balance = ((((info.users[info.uniswapV2PairAddress].balance * PRECISION) / info.users[info.uniswapV2PairAddress].appliedTokenCirculation) * info.totalSupply)) / PRECISION;\r\n\t\t\tinfo.users[address(this)].balance = ((((info.users[address(this)].balance * PRECISION) / info.users[address(this)].appliedTokenCirculation) * info.totalSupply)) / PRECISION;\r\n            \r\n\t\t\tinfo.users[_from].balance -= adjustedTokens;\r\n            _transferred = adjustedTokens;\r\n            \r\n            uint256 burnToLP = ((adjustedTokens * 4) / 100); // 4% transaction fee\r\n            uint256 burnToHell = ((adjustedTokens * 2) / 100); // 2% transaction fee\r\n            info.users[_to].balance += ((_transferred - burnToLP) - burnToHell);\r\n            \r\n            info.users[info.uniswapV2PairAddress].balance += (burnToLP);\r\n            info.users[address(this)].balance += (burnToHell);\r\n\r\n\t\t\tinfo.users[info.uniswapV2PairAddress].appliedTokenCirculation = info.totalSupply;\r\n        \tinfo.users[address(this)].appliedTokenCirculation = info.totalSupply;\r\n        }else{\r\n            info.users[_from].balance -= adjustedTokens;\r\n            _transferred = adjustedTokens;\r\n            info.users[_to].balance += _transferred;\r\n        }\r\n        \r\n        info.users[_from].appliedTokenCirculation = info.totalSupply;\r\n        info.users[_to].appliedTokenCirculation = info.totalSupply;\r\n\r\n\t\temit Transfer(_from, _to, _transferred);\r\n\t\r\n\t\treturn _transferred;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTokenCirculation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realUserBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2PairAddress\",\"type\":\"address\"}],\"name\":\"setUniswapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Contract", "CompilerVersion": "v0.5.13+commit.5b0b510c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a68c1318b336a677117cc05bddc56d9ec84f10a63d3b31d4cd648a272cb74f69"}