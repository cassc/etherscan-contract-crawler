{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/ERC4626/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/IERC20Metadata.sol\\\";\\n\\n// Copy from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/IERC4626.sol\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n   *\\n   * - MUST be an ERC-20 token contract.\\n   * - MUST NOT revert.\\n   */\\n  function asset() external view returns (address assetTokenAddress);\\n\\n  /**\\n   * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n   *\\n   * - SHOULD include any compounding that occurs from yield.\\n   * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n   * - MUST NOT revert.\\n   */\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n  /**\\n   * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n   * scenario where all the conditions are met.\\n   *\\n   * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n   * - MUST NOT show any variations depending on the caller.\\n   * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n   * scenario where all the conditions are met.\\n   *\\n   * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n   * - MUST NOT show any variations depending on the caller.\\n   * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n   * through a deposit call.\\n   *\\n   * - MUST return a limited value if receiver is subject to some deposit limit.\\n   * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n   * - MUST NOT revert.\\n   */\\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n   * current on-chain conditions.\\n   *\\n   * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n   *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n   *   in the same transaction.\\n   * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n   *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n   * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n   * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n   */\\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n   *\\n   * - MUST emit the Deposit event.\\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n   *   deposit execution, and are accounted for during deposit.\\n   * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n   *   approving enough underlying tokens to the Vault contract, etc).\\n   *\\n   * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n   */\\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n   * - MUST return a limited value if receiver is subject to some mint limit.\\n   * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n   * - MUST NOT revert.\\n   */\\n  function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n   * current on-chain conditions.\\n   *\\n   * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n   *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n   *   same transaction.\\n   * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n   *   would be accepted, regardless if the user has enough tokens approved, etc.\\n   * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n   * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n   */\\n  function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n   *\\n   * - MUST emit the Deposit event.\\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n   *   execution, and are accounted for during mint.\\n   * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n   *   approving enough underlying tokens to the Vault contract, etc).\\n   *\\n   * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n   */\\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n   * Vault, through a withdraw call.\\n   *\\n   * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n   * - MUST NOT revert.\\n   */\\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n   * given current on-chain conditions.\\n   *\\n   * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n   *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n   *   called\\n   *   in the same transaction.\\n   * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n   *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n   * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n   * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n   */\\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n   *\\n   * - MUST emit the Withdraw event.\\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n   *   withdraw execution, and are accounted for during withdraw.\\n   * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n   *   not having enough shares, etc).\\n   *\\n   * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n   * Those methods should be performed separately.\\n   */\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n   * through a redeem call.\\n   *\\n   * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n   * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n   * - MUST NOT revert.\\n   */\\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n   * given current on-chain conditions.\\n   *\\n   * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n   *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n   *   same transaction.\\n   * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n   *   redemption would be accepted, regardless if the user has enough shares, etc.\\n   * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n   * - MUST NOT revert.\\n   *\\n   * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n   * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n   */\\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n   *\\n   * - MUST emit the Withdraw event.\\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n   *   redeem execution, and are accounted for during redeem.\\n   * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n   *   not having enough shares, etc).\\n   *\\n   * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n   * Those methods should be performed separately.\\n   */\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ConverterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IWETH } from \\\"../../interfaces/IWETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nabstract contract ConverterBase is ITokenConverter {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc ITokenConverter\\n  address public immutable override registry;\\n\\n  /// @dev The address of ETH which is commonly used.\\n  address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /// @dev The address of WETH token.\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) {\\n    registry = _registry;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function withdrawFund(address _token, address _recipient) external override {\\n    require(msg.sender == registry, \\\"only registry\\\");\\n\\n    if (_token == address(0)) {\\n      (bool success, ) = _recipient.call{ value: address(this).balance }(\\\"\\\");\\n      require(success, \\\"withdraw ETH failed\\\");\\n    } else {\\n      IERC20(_token).safeTransfer(_recipient, IERC20(_token).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to get the pool type of the route.\\n  /// @param encoding The route encoding.\\n  function _getPoolType(uint256 encoding) internal pure returns (uint256) {\\n    return encoding & 255;\\n  }\\n\\n  /// @dev Internal function to get the action of the route.\\n  /// @param encoding The route encoding.\\n  function _getAction(uint256 encoding) internal pure returns (uint256) {\\n    return (encoding >> 8) & 3;\\n  }\\n\\n  function _isETH(address _token) internal pure returns (bool) {\\n    return _token == ETH || _token == address(0);\\n  }\\n\\n  function _wrapTokenIfNeeded(address _token, uint256 _amount) internal {\\n    if (_token == WETH && IERC20(_token).balanceOf(address(this)) < _amount) {\\n      IWETH(_token).deposit{ value: _amount }();\\n    }\\n  }\\n\\n  function _unwrapIfNeeded(uint256 _amount) internal {\\n    if (address(this).balance < _amount) {\\n      IWETH(WETH).withdraw(_amount);\\n    }\\n  }\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    if (!_isETH(_token) && IERC20(_token).allowance(address(this), _spender) < _amount) {\\n      // hBTC cannot approve 0\\n      if (_token != 0x0316EB71485b0Ab14103307bf65a021042c6d380) {\\n        IERC20(_token).safeApprove(_spender, 0);\\n      }\\n      IERC20(_token).safeApprove(_spender, uint256(-1));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/GeneralTokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IConverterRegistry } from \\\"./IConverterRegistry.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nimport { IERC4626 } from \\\"../../common/ERC4626/IERC4626.sol\\\";\\nimport { IBalancerPool } from \\\"../../interfaces/IBalancerPool.sol\\\";\\nimport { IBalancerV1Pool } from \\\"../../interfaces/IBalancerV1Pool.sol\\\";\\nimport { IBalancerVault } from \\\"../../interfaces/IBalancerVault.sol\\\";\\nimport { ICurveAPool } from \\\"../../interfaces/ICurveAPool.sol\\\";\\nimport { ICurvePlainPool } from \\\"../../interfaces/ICurvePlainPool.sol\\\";\\nimport { ICurveYPoolSwap, ICurveYPoolDeposit } from \\\"../../interfaces/ICurveYPool.sol\\\";\\nimport { ICurveMetaPoolSwap } from \\\"../../interfaces/ICurveMetaPool.sol\\\";\\nimport { ICurveCryptoPool } from \\\"../../interfaces/ICurveCryptoPool.sol\\\";\\nimport { ICurveTriCryptoPool } from \\\"../../interfaces/ICurveCryptoPool.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../../interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV3Pool } from \\\"../../interfaces/IUniswapV3Pool.sol\\\";\\nimport { IUniswapV3Router } from \\\"../../interfaces/IUniswapV3Router.sol\\\";\\nimport { IUniswapV3Quoter } from \\\"../../interfaces/IUniswapV3Quoter.sol\\\";\\nimport { IWETH } from \\\"../../interfaces/IWETH.sol\\\";\\n\\nimport { ConverterBase } from \\\"./ConverterBase.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n// solhint-disable var-name-mixedcase\\n\\n/// @title GeneralTokenConverter\\n/// @notice This implements token converting for `pool_type` from 0 to 9 (both inclusive).\\n/// For other types, it will retrieve the implementation from\\n/// `ConverterRegistry` contract and delegate call.\\ncontract GeneralTokenConverter is Ownable, ConverterBase {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of Balancer V2 Vault\\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n  /// @dev The address of Uniswap V3 Router\\n  address private constant UNISWAP_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 private constant MIN_SQRT_RATIO = 4295128739;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The mask of supported pool types.\\n  /// @dev If the `i`-th bit is `1`, the `i`-th pool type is supported in this contract.\\n  uint256 public supportedPoolTypes;\\n\\n  /// @notice Mapping from token address to token minter.\\n  /// @dev It is used to determine the pool address for lp token address.\\n  mapping(address => address) public tokenMinter;\\n\\n  /// @dev Execution context used in fallback function.\\n  uint256 private context;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) ConverterBase(_registry) {\\n    supportedPoolTypes = 1023;\\n\\n    // setup 3pool, compound, susd\\n    tokenMinter[0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490] = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    tokenMinter[0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2] = 0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56;\\n    tokenMinter[0xC25a3A3b969415c80451098fa907EC722572917F] = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function getTokenPair(uint256 _route) external view override returns (address, address) {\\n    uint256 _poolType = _route & 255;\\n    uint256 _action = (_route >> 8) & 3;\\n\\n    return _getTokenPair(_poolType, _action, _route >> 10);\\n  }\\n\\n  /// @inheritdoc ITokenConverter\\n  function queryConvert(uint256 _encoding, uint256 _amountIn) external override returns (uint256 _amountOut) {\\n    uint256 _poolType = _encoding & 255;\\n    uint256 _action = (_encoding >> 8) & 3;\\n\\n    if (((supportedPoolTypes >> _poolType) & 1) == 1) {\\n      _encoding = _encoding >> 10;\\n      if (_action == 0) _amountOut = _querySwap(_poolType, _encoding, _amountIn);\\n      else if (_action == 1) _amountOut = _queryWrap(_poolType, _encoding, _amountIn);\\n      else if (_action == 2) _amountOut = _queryUnwrap(_poolType, _encoding, _amountIn);\\n      else revert(\\\"invalid action\\\");\\n    } else {\\n      address _converter = IConverterRegistry(registry).getConverter(_poolType);\\n      _amountOut = ITokenConverter(_converter).queryConvert(_encoding, _amountIn);\\n    }\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback() external payable {\\n    uint256 _context = context;\\n    if (address(_context) == _msgSender() || _context == 1) {\\n      // handle uniswap v3 swap callback or uniswap v3 quote callback\\n      // | 4 bytes |   32 bytes   |   32 bytes   |   32 bytes  |   32 bytes  | 32 bytes |\\n      // |   sig   | amount0Delta | amount1Delta | data.offset | data.length |  tokenIn |\\n      int256 amount0Delta;\\n      int256 amount1Delta;\\n      address tokenIn;\\n      assembly {\\n        amount0Delta := calldataload(4)\\n        amount1Delta := calldataload(36)\\n        tokenIn := calldataload(132)\\n      }\\n      (uint256 amountToPay, uint256 amountReceived) = amount0Delta > 0\\n        ? (uint256(amount0Delta), uint256(-amount1Delta))\\n        : (uint256(amount1Delta), uint256(-amount0Delta));\\n      if (_context == 1) {\\n        assembly {\\n          let ptr := mload(0x40)\\n          mstore(ptr, amountReceived)\\n          revert(ptr, 32)\\n        }\\n      } else {\\n        IERC20(tokenIn).safeTransfer(address(_context), amountToPay);\\n      }\\n    } else {\\n      revert(\\\"invalid call\\\");\\n    }\\n  }\\n\\n  /// @inheritdoc ITokenConverter\\n  function convert(\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) external payable override returns (uint256 _amountOut) {\\n    uint256 _poolType = _encoding & 255;\\n    uint256 _action = (_encoding >> 8) & 3;\\n\\n    if (((supportedPoolTypes >> _poolType) & 1) == 1) {\\n      _encoding = _encoding >> 10;\\n      if (_action == 0) _amountOut = _swap(_poolType, _encoding, _amountIn, _recipient);\\n      else if (_action == 1) _amountOut = _wrap(_poolType, _encoding, _amountIn, _recipient);\\n      else if (_action == 2) _amountOut = _unwrap(_poolType, _encoding, _amountIn, _recipient);\\n      else revert(\\\"invalid action\\\");\\n    } else {\\n      address _converter = IConverterRegistry(registry).getConverter(_poolType);\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool _success, bytes memory _result) = _converter.delegatecall(\\n        abi.encodeWithSelector(ITokenConverter.convert.selector, _encoding, _amountIn, _recipient)\\n      );\\n      // below lines will propagate inner error up\\n      if (!_success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let ptr := mload(0x40)\\n          let size := returndatasize()\\n          returndatacopy(ptr, 0, size)\\n          revert(ptr, size)\\n        }\\n      }\\n      _amountOut = abi.decode(_result, (uint256));\\n    }\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the pool types supported by this contract by default.\\n  /// @param _supportedPoolTypes The mask of pool types supported.\\n  function updateSupportedPoolTypes(uint256 _supportedPoolTypes) external onlyOwner {\\n    supportedPoolTypes = _supportedPoolTypes;\\n  }\\n\\n  /// @notice Update the token minter mapping.\\n  /// @param _tokens The address list of tokens to update.\\n  /// @param _minters The address list of corresponding minters.\\n  function updateTokenMinter(address[] memory _tokens, address[] memory _minters) external onlyOwner {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      tokenMinter[_tokens[i]] = _minters[i];\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to find token pair based on route encoding.\\n  /// @param _poolType The type of the route.\\n  /// @param _action The action of the route.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @return _tokenIn The address of input token.\\n  /// @return _tokenOut The address of output token.\\n  function _getTokenPair(\\n    uint256 _poolType,\\n    uint256 _action,\\n    uint256 _encoding\\n  ) internal view returns (address _tokenIn, address _tokenOut) {\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n\\n    if (_action == 0) {\\n      // swap\\n      if (_poolType <= 1) {\\n        // UniswapV2 or UniswapV3\\n        _tokenIn = IUniswapV2Pair(_pool).token0();\\n        _tokenOut = IUniswapV2Pair(_pool).token1();\\n        uint256 zero_for_one = (_encoding >> 184) & 1;\\n        if (zero_for_one == 0) {\\n          (_tokenIn, _tokenOut) = (_tokenOut, _tokenIn);\\n        }\\n      } else if (_poolType == 2) {\\n        // BalancerV1\\n        address[] memory _tokens = IBalancerV1Pool(_pool).getCurrentTokens();\\n        _tokenIn = _tokens[(_encoding >> 163) & 7];\\n        _tokenOut = _tokens[(_encoding >> 166) & 7];\\n      } else if (_poolType == 3) {\\n        // BalancerV2\\n        bytes32 _poolId = IBalancerPool(_pool).getPoolId();\\n        (address[] memory _tokens, , ) = IBalancerVault(BALANCER_VAULT).getPoolTokens(_poolId);\\n        _tokenIn = _tokens[(_encoding >> 163) & 7];\\n        _tokenOut = _tokens[(_encoding >> 166) & 7];\\n      } else if (_poolType <= 8) {\\n        // Curve\\n        _tokenIn = _getCurveTokenByIndex(_pool, _poolType, (_encoding >> 163) & 7, _encoding);\\n        _tokenOut = _getCurveTokenByIndex(_pool, _poolType, (_encoding >> 166) & 7, _encoding);\\n      }\\n    } else if (_action == 1) {\\n      _tokenOut = _pool;\\n      if (4 <= _poolType && _poolType <= 8) {\\n        if (_poolType == 6 && (((_encoding >> 169) & 1) == 1)) {\\n          _tokenOut = ICurveYPoolDeposit(_pool).token();\\n        } else {\\n          _pool = _getTokenMinter(_pool);\\n        }\\n        _tokenIn = _getCurveTokenByIndex(_pool, _poolType, (_encoding >> 163) & 7, _encoding);\\n      } else if (_poolType == 9) {\\n        _tokenIn = IERC4626(_pool).asset();\\n      } else {\\n        _tokenOut = address(0);\\n      }\\n    } else if (_action == 2) {\\n      _tokenIn = _pool;\\n      if (4 <= _poolType && _poolType <= 8) {\\n        if (_poolType == 6 && (((_encoding >> 169) & 1) == 1)) {\\n          _tokenIn = ICurveYPoolDeposit(_pool).token();\\n        } else {\\n          _pool = _getTokenMinter(_pool);\\n        }\\n        _tokenOut = _getCurveTokenByIndex(_pool, _poolType, (_encoding >> 166) & 7, _encoding);\\n      } else if (_poolType == 9) {\\n        _tokenOut = IERC4626(_pool).asset();\\n      } else {\\n        _tokenIn = address(0);\\n      }\\n    }\\n    if (_tokenIn == ETH) _tokenIn = WETH;\\n    if (_tokenOut == ETH) _tokenOut = WETH;\\n  }\\n\\n  /// @dev Internal function to return the minter for curve lp token.\\n  /// @param _token The address of token.\\n  /// @return _minter The address of minter for the token.\\n  function _getTokenMinter(address _token) internal view returns (address _minter) {\\n    _minter = tokenMinter[_token];\\n    if (_minter == address(0)) {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        // keccack(\\\"minter()\\\")\\n        mstore(0x00, 0x0754617200000000000000000000000000000000000000000000000000000000)\\n        let success := staticcall(gas(), _token, 0x00, 0x04, 0x00, 0x20)\\n        if success {\\n          _minter := and(mload(0x00), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        if iszero(_minter) {\\n          _minter := _token\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to get the curve token by index.\\n  /// @param _poolType The pool type.\\n  /// @param _index The index of the token.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @return _token The address of the token.\\n  function _getCurveTokenByIndex(\\n    address _pool,\\n    uint256 _poolType,\\n    uint256 _index,\\n    uint256 _encoding\\n  ) internal view returns (address _token) {\\n    if ((_poolType == 5 || _poolType == 6) && (((_encoding >> 169) & 1) == 1)) {\\n      if (_poolType == 5) {\\n        _token = ICurveAPool(_pool).underlying_coins(_index);\\n      } else {\\n        _token = ICurveYPoolSwap(_pool).underlying_coins(int128(_index));\\n      }\\n    } else {\\n      try ICurvePlainPool(_pool).coins(_index) returns (address result) {\\n        _token = result;\\n      } catch {\\n        _token = ICurvePlainPool(_pool).coins(int128(_index));\\n      }\\n    }\\n  }\\n\\n  /*************************************\\n   * Internal Functions for Token Swap *\\n   *************************************/\\n\\n  /// @dev Query the amount of output token by swapping.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @return _amountOut The amount of output token.\\n  function _querySwap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn\\n  ) internal returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = _getTokenPair(_poolType, 0, _encoding);\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n    if (_poolType == 0) {\\n      if (((_encoding >> 185) & 1) == 1) {\\n        IUniswapV2Pair(_pool).executeVirtualOrders(block.timestamp);\\n      }\\n      uint256 zero_for_one = (_encoding >> 184) & 1;\\n      (uint256 rIn, uint256 rOut, ) = IUniswapV2Pair(_pool).getReserves();\\n      if (zero_for_one == 0) {\\n        (rIn, rOut) = (rOut, rIn);\\n      }\\n      // We won't handle fee on transfer token here.\\n      _amountOut = _amountIn * ((_encoding >> 160) & 16777215);\\n      _amountOut = (_amountOut * rOut) / (rIn * 1000000 + _amountOut);\\n    } else if (_poolType == 1) {\\n      bool zeroForOne = _tokenIn < _tokenOut;\\n      context = 1;\\n      try\\n        IUniswapV3Pool(_pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(_amountIn),\\n          (zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1),\\n          new bytes(0)\\n        )\\n      {} catch (bytes memory reason) {\\n        _amountOut = abi.decode(reason, (uint256));\\n      }\\n      context = 0;\\n    } else if (_poolType == 2) {\\n      _amountOut = IBalancerV1Pool(_pool).calcOutGivenIn(\\n        IBalancerV1Pool(_pool).getBalance(_tokenIn),\\n        IBalancerV1Pool(_pool).getDenormalizedWeight(_tokenIn),\\n        IBalancerV1Pool(_pool).getBalance(_tokenOut),\\n        IBalancerV1Pool(_pool).getDenormalizedWeight(_tokenOut),\\n        _amountIn,\\n        IBalancerV1Pool(_pool).getSwapFee()\\n      );\\n    } else if (_poolType == 3) {\\n      address[] memory _assets = new address[](2);\\n      _assets[0] = _tokenIn;\\n      _assets[1] = _tokenOut;\\n      IBalancerVault.BatchSwapStep[] memory _swaps = new IBalancerVault.BatchSwapStep[](1);\\n      _swaps[0] = IBalancerVault.BatchSwapStep({\\n        poolId: IBalancerPool(_pool).getPoolId(),\\n        assetInIndex: 0,\\n        assetOutIndex: 1,\\n        amount: _amountIn,\\n        userData: new bytes(0)\\n      });\\n      int256[] memory _deltas = IBalancerVault(BALANCER_VAULT).queryBatchSwap(\\n        IBalancerVault.SwapKind.GIVEN_IN,\\n        _swaps,\\n        _assets,\\n        IBalancerVault.FundManagement({\\n          sender: address(this),\\n          fromInternalBalance: false,\\n          recipient: payable(address(this)),\\n          toInternalBalance: false\\n        })\\n      );\\n      _amountOut = uint256(-_deltas[1]);\\n    } else if (_poolType <= 8) {\\n      uint256 indexIn = (_encoding >> 163) & 7;\\n      uint256 indexOut = (_encoding >> 166) & 7;\\n      if (_poolType == 8) {\\n        _amountOut = ICurveCryptoPool(_pool).get_dy(indexIn, indexOut, _amountIn);\\n      } else if (_poolType == 5 && ((_encoding >> 169) & 1) == 1) {\\n        _amountOut = ICurveAPool(_pool).get_dy_underlying(int128(indexIn), int128(indexOut), _amountIn);\\n      } else if (_poolType == 6 && ((_encoding >> 169) & 1) == 1) {\\n        _pool = ICurveYPoolDeposit(_pool).curve();\\n        _amountOut = ICurveYPoolSwap(_pool).get_dy_underlying(int128(indexIn), int128(indexOut), _amountIn);\\n      } else {\\n        _amountOut = ICurvePlainPool(_pool).get_dy(int128(indexIn), int128(indexOut), _amountIn);\\n      }\\n    }\\n  }\\n\\n  /// @dev Swap from one token to another token.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @param _recipient The address of output token receiver.\\n  /// @return _amountOut The amount of output token.\\n  function _swap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = _getTokenPair(_poolType, 0, _encoding);\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n\\n    if ((_poolType == 4 || _poolType == 8) && ((_encoding >> 169) & 1) == 1) {\\n      // tokenIn is (W)ETH and we are going to use ETH.\\n      _unwrapIfNeeded(_amountIn);\\n    } else {\\n      _wrapTokenIfNeeded(_tokenIn, _amountIn);\\n    }\\n\\n    if (_poolType == 0) {\\n      // Uniswap V2\\n      if (((_encoding >> 185) & 1) == 1) {\\n        IUniswapV2Pair(_pool).executeVirtualOrders(block.timestamp);\\n      }\\n      uint256 zero_for_one = (_encoding >> 184) & 1;\\n      (uint256 rIn, uint256 rOut, ) = IUniswapV2Pair(_pool).getReserves();\\n      if (zero_for_one == 0) {\\n        (rIn, rOut) = (rOut, rIn);\\n      }\\n\\n      // We won't handle fee on transfer token here.\\n      _amountOut = _amountIn * ((_encoding >> 160) & 16777215);\\n      _amountOut = (_amountOut * rOut) / (rIn * 1000000 + _amountOut);\\n\\n      IERC20(_tokenIn).safeTransfer(_pool, _amountIn);\\n      if (zero_for_one == 1) {\\n        IUniswapV2Pair(_pool).swap(0, _amountOut, _recipient, new bytes(0));\\n      } else {\\n        IUniswapV2Pair(_pool).swap(_amountOut, 0, _recipient, new bytes(0));\\n      }\\n      return _amountOut;\\n    } else if (_poolType == 1) {\\n      // UniswapV3\\n      bool zeroForOne = _tokenIn < _tokenOut;\\n      bytes memory _data = new bytes(32);\\n      assembly {\\n        mstore(add(_data, 0x20), _tokenIn)\\n      }\\n      context = uint256(_pool);\\n      (int256 amount0, int256 amount1) = IUniswapV3Pool(_pool).swap(\\n        _recipient,\\n        zeroForOne,\\n        int256(_amountIn),\\n        (zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1),\\n        _data\\n      );\\n      context = 0;\\n      return zeroForOne ? uint256(-amount1) : uint256(amount0);\\n    } else if (_poolType == 2) {\\n      // BalancerV1\\n      _approve(_tokenIn, _pool, _amountIn);\\n      (_amountOut, ) = IBalancerV1Pool(_pool).swapExactAmountIn(_tokenIn, _amountIn, _tokenOut, 0, uint256(-1));\\n    } else if (_poolType == 3) {\\n      bytes32 _poolId = IBalancerPool(_pool).getPoolId();\\n      _wrapTokenIfNeeded(_tokenIn, _amountIn);\\n      _approve(_tokenIn, BALANCER_VAULT, _amountIn);\\n      return\\n        IBalancerVault(BALANCER_VAULT).swap(\\n          IBalancerVault.SingleSwap({\\n            poolId: _poolId,\\n            kind: IBalancerVault.SwapKind.GIVEN_IN,\\n            assetIn: _tokenIn,\\n            assetOut: _tokenOut,\\n            amount: _amountIn,\\n            userData: new bytes(0)\\n          }),\\n          IBalancerVault.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(_recipient),\\n            toInternalBalance: false\\n          }),\\n          0,\\n          // solhint-disable-next-line not-rely-on-time\\n          block.timestamp\\n        );\\n    } else if (_poolType <= 8) {\\n      uint256 indexIn = (_encoding >> 163) & 7;\\n      uint256 indexOut = (_encoding >> 166) & 7;\\n      _approve(_tokenIn, _pool, _amountIn);\\n      if (_poolType == 4) {\\n        if (((_encoding >> 169) & 1) == 0) {\\n          _approve(_tokenIn, _pool, _amountIn);\\n          ICurvePlainPool(_pool).exchange(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        } else {\\n          ICurvePlainPool(_pool).exchange{ value: _amountIn }(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        }\\n      } else if (_poolType == 5) {\\n        _approve(_tokenIn, _pool, _amountIn);\\n        if (((_encoding >> 169) & 1) == 0) {\\n          ICurveAPool(_pool).exchange(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        } else {\\n          ICurveAPool(_pool).exchange_underlying(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        }\\n      } else if (_poolType == 6) {\\n        if (((_encoding >> 169) & 1) == 1) {\\n          _pool = ICurveYPoolDeposit(_pool).curve();\\n        }\\n        _approve(_tokenIn, _pool, _amountIn);\\n        if (((_encoding >> 169) & 1) == 0) {\\n          ICurveYPoolSwap(_pool).exchange(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        } else {\\n          ICurveYPoolSwap(_pool).exchange_underlying(int128(indexIn), int128(indexOut), _amountIn, 0);\\n        }\\n      } else if (_poolType == 7) {\\n        _approve(_tokenIn, _pool, _amountIn);\\n        ICurveMetaPoolSwap(_pool).exchange(int128(indexIn), int128(indexOut), _amountIn, 0);\\n      } else if (_poolType == 8) {\\n        if (((_encoding >> 169) & 1) == 0) {\\n          _approve(_tokenIn, _pool, _amountIn);\\n          ICurveCryptoPool(_pool).exchange(indexIn, indexOut, _amountIn, 0);\\n        } else {\\n          ICurveCryptoPool(_pool).exchange{ value: _amountIn }(indexIn, indexOut, _amountIn, 0, true);\\n        }\\n      }\\n    } else {\\n      revert(\\\"invalid poolType\\\");\\n    }\\n\\n    if (_tokenOut == WETH) {\\n      _wrapTokenIfNeeded(_tokenOut, address(this).balance);\\n    }\\n    if (_amountOut == 0) {\\n      _amountOut = IERC20(_tokenOut).balanceOf(address(this));\\n    }\\n    if (_recipient != address(this)) {\\n      IERC20(_tokenOut).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n\\n  /*****************************************\\n   * Internal Functions for Token Wrapping *\\n   *****************************************/\\n\\n  /// @dev Query the amount of output token by wrapping.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @return _amountOut The amount of output token.\\n  function _queryWrap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn\\n  ) internal view returns (uint256 _amountOut) {\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n    if (4 <= _poolType && _poolType <= 8) {\\n      uint256 _tokens = ((_encoding >> 160) & 7) + 1;\\n      uint256 _indexIn = (_encoding >> 166) & 7;\\n      require(2 <= _tokens && _tokens <= 4, \\\"invalid tokens\\\");\\n\\n      // compute actual token amount and actual pool\\n      if (_poolType == 6 && ((_encoding >> 169) & 1) == 1) {\\n        address _token = ICurveYPoolDeposit(_pool).coins(int128(_indexIn));\\n        address _underlying = ICurveYPoolDeposit(_pool).underlying_coins(int128(_indexIn));\\n        if (_token != _underlying) {\\n          assembly {\\n            // keccack(\\\"exchangeRateStored()\\\")\\n            mstore(0x00, 0x182df0f500000000000000000000000000000000000000000000000000000000)\\n            let success := staticcall(gas(), _token, 0x00, 0x04, 0x00, 0x20)\\n            if success {\\n              _amountIn := div(mul(_amountIn, 1000000000000000000), mload(0x00))\\n            }\\n          }\\n        }\\n        _pool = ICurveYPoolDeposit(_pool).curve();\\n      } else {\\n        _pool = _getTokenMinter(_pool);\\n      }\\n\\n      if (_tokens == 2) {\\n        uint256[2] memory _amounts;\\n        _amounts[_indexIn] = _amountIn;\\n        // some old pools are using `calc_token_amount(uint256[2])`\\n        // we use `calc_token_amount(uint256[2],bool)` first and then try `calc_token_amount(uint256[2])`\\n        assembly {\\n          // keccack(\\\"calc_token_amount(uint256[2],bool)\\\")\\n          let p := mload(0x40)\\n          mstore(p, 0xed8e84f300000000000000000000000000000000000000000000000000000000)\\n          switch _indexIn\\n          case 0 {\\n            mstore(add(p, 0x04), _amountIn)\\n            mstore(add(p, 0x24), 0)\\n          }\\n          default {\\n            mstore(add(p, 0x04), 0)\\n            mstore(add(p, 0x24), _amountIn)\\n          }\\n          mstore(add(p, 0x44), 1)\\n          mstore(0x00, 0)\\n          let success := staticcall(gas(), _pool, p, 0x64, 0x00, 0x20)\\n          if success {\\n            _amountOut := mload(0x00)\\n          }\\n        }\\n        if (_amountOut == 0) {\\n          _amountOut = ICurvePlainPool(_pool).calc_token_amount(_amounts);\\n        }\\n      } else if (_tokens == 3) {\\n        uint256[3] memory _amounts;\\n        _amounts[_indexIn] = _amountIn;\\n        _amountOut = ICurvePlainPool(_pool).calc_token_amount(_amounts, true);\\n      } else {\\n        uint256[4] memory _amounts;\\n        _amounts[_indexIn] = _amountIn;\\n        _amountOut = ICurvePlainPool(_pool).calc_token_amount(_amounts, true);\\n      }\\n    } else if (_poolType == 9) {\\n      _amountOut = IERC4626(_pool).previewDeposit(_amountIn);\\n    }\\n  }\\n\\n  /// @dev Wrap from one token to another token.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @param _recipient The address of output token receiver.\\n  /// @return _amountOut The amount of output token.\\n  function _wrap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = _getTokenPair(_poolType, 1, _encoding);\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n\\n    if ((_poolType == 4 || _poolType == 8) && ((_encoding >> 169) & 1) == 1) {\\n      // tokenIn is (W)ETH and we are going to use ETH.\\n      _unwrapIfNeeded(_amountIn);\\n    } else {\\n      _wrapTokenIfNeeded(_tokenIn, _amountIn);\\n    }\\n\\n    if (4 <= _poolType && _poolType <= 8) {\\n      _pool = _getTokenMinter(_pool);\\n      uint256 _tokens = ((_encoding >> 160) & 7) + 1;\\n      uint256 _indexIn = (_encoding >> 163) & 7;\\n      require(2 <= _tokens && _tokens <= 4, \\\"invalid tokens\\\");\\n\\n      if (_poolType == 5) {\\n        bool _use_underlying = ((_encoding >> 169) & 1) == 1;\\n        _approve(_tokenIn, _pool, _amountIn);\\n        if (_tokens == 2) {\\n          uint256[2] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          ICurveAPool(_pool).add_liquidity(_amounts, 0, _use_underlying);\\n        } else if (_tokens == 3) {\\n          uint256[3] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          ICurveAPool(_pool).add_liquidity(_amounts, 0, _use_underlying);\\n        } else {\\n          uint256[4] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          ICurveAPool(_pool).add_liquidity(_amounts, 0, _use_underlying);\\n        }\\n      } else {\\n        bool _use_eth = (_poolType == 4 || _poolType == 8) && (((_encoding >> 169) & 1) == 1);\\n        if (!_use_eth) {\\n          _approve(_tokenIn, _pool, _amountIn);\\n        }\\n        if (_tokens == 2) {\\n          uint256[2] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          if (_use_eth) {\\n            if (_poolType == 8) {\\n              ICurveCryptoPool(_pool).add_liquidity{ value: _amountIn }(_amounts, 0, true);\\n            } else {\\n              ICurvePlainPool(_pool).add_liquidity{ value: _amountIn }(_amounts, 0);\\n            }\\n          } else {\\n            ICurvePlainPool(_pool).add_liquidity(_amounts, 0);\\n          }\\n        } else if (_tokens == 3) {\\n          uint256[3] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          if (_use_eth) {\\n            if (_poolType == 8) {\\n              ICurveTriCryptoPool(_pool).add_liquidity{ value: _amountIn }(_amounts, 0, true);\\n            } else {\\n              ICurvePlainPool(_pool).add_liquidity{ value: _amountIn }(_amounts, 0);\\n            }\\n          } else {\\n            ICurvePlainPool(_pool).add_liquidity(_amounts, 0);\\n          }\\n        } else {\\n          uint256[4] memory _amounts;\\n          _amounts[_indexIn] = _amountIn;\\n          if (_use_eth) {\\n            ICurvePlainPool(_pool).add_liquidity{ value: _amountIn }(_amounts, 0);\\n          } else {\\n            ICurvePlainPool(_pool).add_liquidity(_amounts, 0);\\n          }\\n        }\\n      }\\n    } else if (_poolType == 9) {\\n      _approve(_tokenIn, _pool, _amountIn);\\n      _amountOut = IERC4626(_pool).deposit(_amountIn, _recipient);\\n      return _amountOut;\\n    } else {\\n      revert(\\\"invalid poolType\\\");\\n    }\\n\\n    _amountOut = IERC20(_tokenOut).balanceOf(address(this));\\n    if (_recipient != address(this)) {\\n      IERC20(_tokenOut).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n\\n  /*******************************************\\n   * Internal Functions for Token Unwrapping *\\n   *******************************************/\\n\\n  /// @dev Query the amount of output token by unwrapping.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @return _amountOut The amount of output token.\\n  function _queryUnwrap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn\\n  ) internal view returns (uint256 _amountOut) {\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n\\n    if (4 <= _poolType && _poolType <= 8) {\\n      if (_poolType != 6) {\\n        _pool = _getTokenMinter(_pool);\\n      }\\n      uint256 _indexOut = (_encoding >> 166) & 7;\\n      if (_poolType == 8) {\\n        _amountOut = ICurveCryptoPool(_pool).calc_withdraw_one_coin(_amountIn, _indexOut);\\n      } else {\\n        _amountOut = ICurvePlainPool(_pool).calc_withdraw_one_coin(_amountIn, int128(_indexOut));\\n      }\\n    } else if (_poolType == 9) {\\n      _amountOut = IERC4626(_pool).previewRedeem(_amountIn);\\n    }\\n  }\\n\\n  /// @dev Unwrap from one token to another token.\\n  /// @param _poolType The pool type.\\n  /// @param _encoding The customized encoding of the route.\\n  /// @param _amountIn The amount of input token.\\n  /// @param _recipient The address of output token receiver.\\n  /// @return _amountOut The amount of output token.\\n  function _unwrap(\\n    uint256 _poolType,\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = _getTokenPair(_poolType, 2, _encoding);\\n    address _pool = address(_encoding & 1461501637330902918203684832716283019655932542975);\\n\\n    if (4 <= _poolType && _poolType <= 8) {\\n      if (_poolType != 6) {\\n        _pool = _getTokenMinter(_pool);\\n      }\\n      uint256 _tokens = ((_encoding >> 160) & 7) + 1;\\n      uint256 _indexOut = (_encoding >> 166) & 7;\\n      require(2 <= _tokens && _tokens <= 4, \\\"invalid tokens\\\");\\n\\n      if (_poolType == 4) {\\n        ICurvePlainPool(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0);\\n      } else if (_poolType == 5) {\\n        bool _use_underlying = ((_encoding >> 169) & 1) == 1;\\n        ICurveAPool(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0, _use_underlying);\\n      } else if (_poolType == 6) {\\n        _approve(_tokenIn, _pool, _amountIn);\\n        ICurveYPoolDeposit(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0, true);\\n      } else if (_poolType == 7) {\\n        ICurveMetaPoolSwap(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0);\\n      } else {\\n        ICurveCryptoPool(_pool).remove_liquidity_one_coin(_amountIn, _indexOut, 0);\\n      }\\n    } else if (_poolType == 9) {\\n      _amountOut = IERC4626(_pool).redeem(_amountIn, _recipient, address(this));\\n      return _amountOut;\\n    } else {\\n      revert(\\\"invalid poolType\\\");\\n    }\\n\\n    if (_tokenOut == WETH) {\\n      _wrapTokenIfNeeded(_tokenOut, address(this).balance);\\n    }\\n\\n    _amountOut = IERC20(_tokenOut).balanceOf(address(this));\\n    if (_recipient != address(this)) {\\n      IERC20(_tokenOut).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/IConverterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConverterRegistry {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Return the address of converter for a specific pool type.\\n  /// @param poolType The type of converter.\\n  /// @return converter The address of converter.\\n  function getConverter(uint256 poolType) external view returns (address converter);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBalancerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IBalancerPool {\\n  function getPoolId() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBalancerV1Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IBalancerV1Pool {\\n  function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n  function swapExactAmountIn(\\n    address tokenIn,\\n    uint256 tokenAmountIn,\\n    address tokenOut,\\n    uint256 minAmountOut,\\n    uint256 maxPrice\\n  ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n  function swapExactAmountOut(\\n    address tokenIn,\\n    uint256 maxAmountIn,\\n    address tokenOut,\\n    uint256 tokenAmountOut,\\n    uint256 maxPrice\\n  ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n  function joinswapExternAmountIn(\\n    address tokenIn,\\n    uint256 tokenAmountIn,\\n    uint256 minPoolAmountOut\\n  ) external returns (uint256 poolAmountOut);\\n\\n  function joinswapPoolAmountOut(\\n    address tokenIn,\\n    uint256 poolAmountOut,\\n    uint256 maxAmountIn\\n  ) external returns (uint256 tokenAmountIn);\\n\\n  function exitswapPoolAmountIn(\\n    address tokenOut,\\n    uint256 poolAmountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256 tokenAmountOut);\\n\\n  function exitswapExternAmountOut(\\n    address tokenOut,\\n    uint256 tokenAmountOut,\\n    uint256 maxPoolAmountIn\\n  ) external returns (uint256 poolAmountIn);\\n\\n  function getBalance(address token) external view returns (uint256);\\n\\n  function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n  function getSwapFee() external view returns (uint256);\\n\\n  /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n  function calcOutGivenIn(\\n    uint256 tokenBalanceIn,\\n    uint256 tokenWeightIn,\\n    uint256 tokenBalanceOut,\\n    uint256 tokenWeightOut,\\n    uint256 tokenAmountIn,\\n    uint256 swapFee\\n  ) external view returns (uint256 tokenAmountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IBalancerVault {\\n  enum JoinKind {\\n    INIT,\\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\\n    TOKEN_IN_FOR_EXACT_BPT_OUT,\\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n  }\\n\\n  enum ExitKind {\\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\\n    BPT_IN_FOR_EXACT_TOKENS_OUT\\n  }\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    address assetIn;\\n    address assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n      address[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 lastChangeBlock\\n    );\\n\\n  function swap(\\n    SingleSwap memory singleSwap,\\n    FundManagement memory funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256 amountCalculated);\\n\\n  struct JoinPoolRequest {\\n    address[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest memory request\\n  ) external payable;\\n\\n  struct ExitPoolRequest {\\n    address[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest memory request\\n  ) external;\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n   * `assets` array passed to that function, and ETH assets are converted to WETH.\\n   *\\n   * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n   * from the previous swap, depending on the swap kind.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  // This function is not marked as `nonReentrant` because the underlying mechanism relies on reentrancy\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    address[] memory assets,\\n    FundManagement memory funds\\n  ) external returns (int256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveAPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\n\\ninterface ICurveAPool {\\n  function remove_liquidity_one_coin(\\n    uint256 _token_amount,\\n    int128 i,\\n    uint256 _min_amount,\\n    bool _use_underlying\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] memory _amounts,\\n    uint256 _min_mint_amount,\\n    bool _use_underlying\\n  ) external returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[3] memory _amounts,\\n    uint256 _min_mint_amount,\\n    bool _use_underlying\\n  ) external returns (uint256);\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool is_deposit) external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[4] memory _amounts,\\n    uint256 _min_mint_amount,\\n    bool _use_underlying\\n  ) external returns (uint256);\\n\\n  function calc_token_amount(uint256[4] memory amounts, bool is_deposit) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function lp_token() external view returns (address);\\n}\\n\\n/// @dev This is the interface of Curve aave-style Pool with 2 tokens, examples:\\n/// + saave: https://curve.fi/saave\\ninterface ICurveA2Pool is ICurveAPool {\\n\\n}\\n\\n/// @dev This is the interface of Curve aave-style Pool with 3 tokens, examples:\\n/// aave: https://curve.fi/aave\\n/// ironbank: https://curve.fi/ib\\ninterface ICurveA3Pool is ICurveAPool {\\n\\n}\\n\\n/// @dev This is the interface of Curve aave-style Pool with 3 tokens, examples:\\ninterface ICurveA4Pool is ICurveAPool {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveCryptoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\n\\n/// @dev This is the interface of Curve Crypto Pools (including Factory Pool), examples:\\n/// + cvxeth: https://curve.fi/cvxeth\\n/// + crveth: https://curve.fi/crveth\\n/// + eursusd: https://curve.fi/eursusd\\n/// + teth: https://curve.fi/teth\\n/// + spelleth: https://curve.fi/spelleth\\n\\n/// + FXS/ETH: https://curve.fi/factory-crypto/3\\n/// + YFI/ETH: https://curve.fi/factory-crypto/8\\n/// + AAVE/palStkAAVE: https://curve.fi/factory-crypto/9\\n/// + DYDX/ETH: https://curve.fi/factory-crypto/10\\n/// + SDT/ETH: https://curve.fi/factory-crypto/11\\n/// + BTRFLY/ETH: https://curve.fi/factory-crypto/17\\n/// + cvxFXS/FXS: https://curve.fi/factory-crypto/18\\ninterface ICurveCryptoPool {\\n  function lp_price() external view returns (uint256);\\n\\n  function price_oracle() external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] memory amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth\\n  ) external payable returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable;\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external payable;\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth,\\n    address receiver\\n  ) external payable;\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    address receiver\\n  ) external payable returns (uint256);\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function token() external view returns (address);\\n}\\n\\n/// @dev This is the interface of Zap Contract for Curve Meta Crypto Pools, examples:\\n/// + eurtusd: https://curve.fi/eurtusd\\n/// + xautusd: https://curve.fi/xautusd\\ninterface IZapCurveMetaCryptoPool {\\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[4] memory amounts) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function get_dy_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function base_pool() external view returns (address);\\n\\n  function pool() external view returns (address);\\n}\\n\\n/// @dev This is the interface of Curve Tri Crypto Pools, examples:\\n/// + tricrypto2: https://curve.fi/tricrypto2\\n/// + tricrypto: https://curve.fi/tricrypto\\ninterface ICurveTriCryptoPool {\\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\n\\n  function add_liquidity(\\n    uint256[3] memory amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth\\n  ) external payable;\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external;\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function coins(uint256 index) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveMetaPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\n\\n/// @dev This is the interface of Curve Meta Pool with (3pool or sbtc), examples:\\n/// + ust: https://curve.fi/ust\\n/// + dusd: https://www.curve.fi/dusd\\n/// + gusd: https://curve.fi/gusd\\n/// + husd: https://curve.fi/husd\\n/// + rai: https://curve.fi/rai\\n/// + musd: https://curve.fi/musd\\n///\\n/// + bbtc: https://curve.fi/bbtc\\n/// + obtc: https://www.curve.fi/obtc\\n/// + pbtc: https://www.curve.fi/pbtc\\n/// + tbtc: https://www.curve.fi/tbtc\\ninterface ICurveMetaPoolSwap {\\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function base_pool() external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function token() external view returns (address);\\n}\\n\\ninterface ICurveMetaPoolDeposit {\\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[4] memory amounts, bool is_deposit) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function base_pool() external view returns (address);\\n\\n  function pool() external view returns (address);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurvePlainPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\n\\ninterface ICurvePlainPool {\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable;\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\n\\n  function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external payable;\\n\\n  function calc_token_amount(uint256[4] memory amounts, bool deposit) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 _token_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function balances(uint256 index) external view returns (uint256);\\n\\n  // ren and sbtc pool\\n  function coins(int128 index) external view returns (address);\\n\\n  // ren and sbtc pool\\n  function balances(int128 index) external view returns (uint256);\\n\\n  function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveYPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\n\\ninterface ICurveYPoolSwap {\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external;\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external;\\n\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function coins(int128 index) external view returns (address);\\n\\n  function underlying_coins(int128 index) external view returns (address);\\n}\\n\\ninterface ICurveYPoolDeposit {\\n  function remove_liquidity_one_coin(\\n    uint256 _token_amount,\\n    int128 i,\\n    uint256 _min_amount,\\n    bool donate_dust\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n  function token() external view returns (address);\\n\\n  function curve() external view returns (address);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function coins(int128 index) external view returns (address);\\n\\n  function underlying_coins(int128 index) external view returns (address);\\n}\\n\\n// solhint-disable var-name-mixedcase, func-name-mixedcase\\n/// @dev This is the interface of Curve yearn-style Pool with 2 tokens, examples:\\n/// + compound: https://curve.fi/compound\\ninterface ICurveY2PoolDeposit is ICurveYPoolDeposit {\\n\\n}\\n\\ninterface ICurveY2PoolSwap is ICurveYPoolSwap {}\\n\\n/// @dev This is the interface of Curve yearn-style Pool with 3 tokens, examples:\\n/// usdt: https://curve.fi/usdt\\ninterface ICurveY3PoolDeposit is ICurveYPoolDeposit {\\n\\n}\\n\\ninterface ICurveY3PoolSwap is ICurveYPoolSwap {}\\n\\n/// @dev This is the interface of Curve yearn-style Pool with 4 tokens, examples:\\n/// + pax: https://curve.fi/pax\\n/// + y: https://curve.fi/iearn\\n/// + busd: https://curve.fi/busd\\n/// + susd v2: https://curve.fi/susdv2\\ninterface ICurveY4PoolDeposit is ICurveYPoolDeposit {\\n\\n}\\n\\ninterface ICurveY4PoolSwap is ICurveYPoolSwap {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IERC20Metadata {\\n  function decimals() external view returns (uint8);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function name() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV2Pair {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    );\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  // fraxswap\\n  function executeVirtualOrders(uint256 blockTimestamp) external;\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV3Pool {\\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Quoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IUniswapV3Quoter {\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\n  /// @param amountIn The amount of the first token to swap\\n  /// @return amountOut The amount of the last token that would be received\\n  function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountIn The desired input amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountOut The amount of `tokenOut` that would be received\\n  function quoteExactInputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountIn,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\n  /// @param amountOut The amount of the last token to receive\\n  /// @return amountIn The amount of first token required to be paid\\n  function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountOut The desired output amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n  function quoteExactOutputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountOut,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapV3Router {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"queryConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedPoolTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supportedPoolTypes\",\"type\":\"uint256\"}],\"name\":\"updateSupportedPoolTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"updateTokenMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GeneralTokenConverter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a617206663343b6353acf27566586ee9b53dfb2b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}