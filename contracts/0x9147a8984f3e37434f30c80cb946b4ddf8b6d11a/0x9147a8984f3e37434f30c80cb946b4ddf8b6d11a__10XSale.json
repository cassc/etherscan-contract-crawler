{"SourceCode": "{\"10XSale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract _10XSale\\r\\n{\\r\\n    mapping(address=\\u003euint) public tokensBought;\\r\\n    mapping(address=\\u003euint) public ethCommitted;\\r\\n    mapping(address=\\u003euint) public buyCount;\\r\\n    mapping(address=\\u003euint) public claimedAmount;\\r\\n    uint public contributors;\\r\\n    uint public totalRaise;\\r\\n    IERC20 token;\\r\\n    IERC20 rescueToken;\\r\\n    uint public tokenDecimal;\\r\\n    address payable public owner;\\r\\n    address public contractAddress;\\r\\n    address payable saleAddress;\\r\\n    uint public hCap;\\r\\n    uint public sCap;\\r\\n    uint public maxAllocation;\\r\\n    bool public saleStatus;\\r\\n    uint public tokensPerETH;\\r\\n    event purchased(bool);\\r\\n\\r\\n    constructor() public \\r\\n    {\\r\\n        owner=payable(msg.sender);\\r\\n        saleAddress=payable(0x2bA0794A47BA75FD40DC3d6e5CB4f747B6AA9f34);\\r\\n        contractAddress=address(this);\\r\\n        saleStatus=true;\\r\\n        hCap=2000; //Value in Wei\\r\\n        sCap=1000;\\r\\n        maxAllocation=200; //0.2 ETH per wallet\\r\\n        tokensPerETH=1000000;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner()\\r\\n    {\\r\\n        require(msg.sender==owner,\\\"Address not Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function BuySale() public payable \\r\\n    {\\r\\n        require(saleStatus,\\\"Sale not started yet\\\");\\r\\n        uint weiValue=msg.value/10**15; //In terms of 1000\\r\\n        require(ethCommitted[msg.sender]+weiValue\\u003c=maxAllocation,\\\"Wallet exceeds the Max Amount\\\");\\r\\n        saleAddress.transfer(msg.value);\\r\\n        totalRaise+=weiValue;\\r\\n        uint tokenAllocation=(weiValue*tokensPerETH)/1000;\\r\\n        tokensBought[msg.sender]+=tokenAllocation;\\r\\n        ethCommitted[msg.sender]+=weiValue;\\r\\n        buyCount[msg.sender]++;\\r\\n        //Transfer the tokens\\r\\n        token.transfer(msg.sender,tokenAllocation*10**tokenDecimal);\\r\\n        emit purchased(true);\\r\\n    }\\r\\n\\r\\n    function setTokenDetails(address tAddress, uint tDecimal) public onlyOwner\\r\\n    {\\r\\n        token=IERC20(tAddress);\\r\\n        tokenDecimal=tDecimal;\\r\\n    }\\r\\n\\r\\n    function setSaleDetails(uint h_Cap, uint s_Cap, uint max, uint tPerETH) public onlyOwner\\r\\n    {\\r\\n        hCap=h_Cap;\\r\\n        sCap=s_Cap;\\r\\n        maxAllocation=max;\\r\\n        tokensPerETH=tPerETH;\\r\\n    }\\r\\n\\r\\n    function setStatus(bool s_Status) public onlyOwner\\r\\n    {\\r\\n        saleStatus=s_Status;\\r\\n    }\\r\\n\\r\\n    function rescueERC(address cAddress, uint amount, uint tDecimals) public onlyOwner\\r\\n    {\\r\\n        rescueToken=IERC20(cAddress);\\r\\n        rescueToken.transfer(saleAddress, amount*10**tDecimals);\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        require(saleStatus,\\\"Sale not started yet\\\");\\r\\n        uint weiValue=msg.value/10**15; //In terms of 1000\\r\\n        require(ethCommitted[msg.sender]+weiValue\\u003c=maxAllocation,\\\"Wallet exceeds the Max Amount\\\");\\r\\n        saleAddress.transfer(msg.value);\\r\\n        totalRaise+=weiValue;\\r\\n        uint tokenAllocation=(weiValue*tokensPerETH)/1000;\\r\\n        tokensBought[msg.sender]+=tokenAllocation;\\r\\n        ethCommitted[msg.sender]+=weiValue;\\r\\n        buyCount[msg.sender]++;\\r\\n        //Transfer the tokens\\r\\n        token.transfer(msg.sender,tokenAllocation*10**tokenDecimal);\\r\\n        emit purchased(true);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"purchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuySale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethCommitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tDecimals\",\"type\":\"uint256\"}],\"name\":\"rescueERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"h_Cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_Cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tPerETH\",\"type\":\"uint256\"}],\"name\":\"setSaleDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s_Status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tDecimal\",\"type\":\"uint256\"}],\"name\":\"setTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "_10XSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47e6ca8b22e2314a44dc6fb9ad7b9c8619af16102b5f1228205a2f739835f407"}