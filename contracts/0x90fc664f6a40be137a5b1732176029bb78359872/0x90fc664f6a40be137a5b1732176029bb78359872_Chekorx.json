{"SourceCode": "pragma solidity ^0.8.23;\r\n// SPDX-License-Identifier: MIT\r\n\r\n// ChekorX\r\n\r\n// contract code starts on line 1300\r\n\r\n// apologies for the monolithic single file.\r\n// gotta figure out how to do multi file verification.\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/// @notice Library to encode strings in Base64.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\r\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\r\nlibrary Base64 {\r\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\r\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\r\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\r\n    /// @param noPadding Whether to strip away the padding.\r\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let dataLength := mload(data)\r\n\r\n            if dataLength {\r\n                // Multiply by 4/3 rounded up.\r\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\r\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\r\n\r\n                // Set `result` to point to the start of the free memory.\r\n                result := mload(0x40)\r\n\r\n                // Store the table into the scratch space.\r\n                // Offsetted by -1 byte so that the `mload` will load the character.\r\n                // We will rewrite the free memory pointer at `0x40` later with\r\n                // the allocated size.\r\n                // The magic constant 0x0230 will translate \"-_\" + \"+/\".\r\n                mstore(0x1f, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\r\n                mstore(0x3f, sub(\"ghijklmnopqrstuvwxyz0123456789-_\", mul(iszero(fileSafe), 0x0230)))\r\n\r\n                // Skip the first slot, which stores the length.\r\n                let ptr := add(result, 0x20)\r\n                let end := add(ptr, encodedLength)\r\n\r\n                // Run over the input, 3 bytes at a time.\r\n                for {} 1 {} {\r\n                    data := add(data, 3) // Advance 3 bytes.\r\n                    let input := mload(data)\r\n\r\n                    // Write 4 bytes. Optimized for fewer stack operations.\r\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\r\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\r\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\r\n                    mstore8(3, mload(and(input, 0x3F)))\r\n                    mstore(ptr, mload(0x00))\r\n\r\n                    ptr := add(ptr, 4) // Advance 4 bytes.\r\n                    if iszero(lt(ptr, end)) { break }\r\n                }\r\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\r\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\r\n                let o := div(2, mod(dataLength, 3))\r\n                // Offset `ptr` and pad with '='. We can simply write over the end.\r\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\r\n                // Set `o` to zero if there is padding.\r\n                o := mul(iszero(iszero(noPadding)), o)\r\n                mstore(sub(ptr, o), 0) // Zeroize the slot after the string.\r\n                mstore(result, sub(encodedLength, o)) // Store the length.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\r\n    /// Equivalent to `encode(data, false, false)`.\r\n    function encode(bytes memory data) internal pure returns (string memory result) {\r\n        result = encode(data, false, false);\r\n    }\r\n\r\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\r\n    /// Equivalent to `encode(data, fileSafe, false)`.\r\n    function encode(bytes memory data, bool fileSafe)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        result = encode(data, fileSafe, false);\r\n    }\r\n\r\n    /// @dev Decodes base64 encoded `data`.\r\n    ///\r\n    /// Supports:\r\n    /// - RFC 4648 (both standard and file-safe mode).\r\n    /// - RFC 3501 (63: ',').\r\n    ///\r\n    /// Does not support:\r\n    /// - Line breaks.\r\n    ///\r\n    /// Note: For performance reasons,\r\n    /// this function will NOT revert on invalid `data` inputs.\r\n    /// Outputs for invalid inputs will simply be undefined behaviour.\r\n    /// It is the user's responsibility to ensure that the `data`\r\n    /// is a valid base64 encoded string.\r\n    function decode(string memory data) internal pure returns (bytes memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let dataLength := mload(data)\r\n\r\n            if dataLength {\r\n                let decodedLength := mul(shr(2, dataLength), 3)\r\n\r\n                for {} 1 {} {\r\n                    // If padded.\r\n                    if iszero(and(dataLength, 3)) {\r\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\r\n                        // forgefmt: disable-next-item\r\n                        decodedLength := sub(\r\n                            decodedLength,\r\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\r\n                        )\r\n                        break\r\n                    }\r\n                    // If non-padded.\r\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\r\n                    break\r\n                }\r\n                result := mload(0x40)\r\n\r\n                // Write the length of the bytes.\r\n                mstore(result, decodedLength)\r\n\r\n                // Skip the first slot, which stores the length.\r\n                let ptr := add(result, 0x20)\r\n                let end := add(ptr, decodedLength)\r\n\r\n                // Load the table into the scratch space.\r\n                // Constants are optimized for smaller bytecode with zero gas overhead.\r\n                // `m` also doubles as the mask of the upper 6 bits.\r\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\r\n                mstore(0x5b, m)\r\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\r\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\r\n\r\n                for {} 1 {} {\r\n                    // Read 4 bytes.\r\n                    data := add(data, 4)\r\n                    let input := mload(data)\r\n\r\n                    // Write 3 bytes.\r\n                    // forgefmt: disable-next-item\r\n                    mstore(ptr, or(\r\n                        and(m, mload(byte(28, input))),\r\n                        shr(6, or(\r\n                            and(m, mload(byte(29, input))),\r\n                            shr(6, or(\r\n                                and(m, mload(byte(30, input))),\r\n                                shr(6, mload(byte(31, input)))\r\n                            ))\r\n                        ))\r\n                    ))\r\n                    ptr := add(ptr, 3)\r\n                    if iszero(lt(ptr, end)) { break }\r\n                }\r\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\r\n                mstore(end, 0) // Zeroize the slot after the bytes.\r\n                mstore(0x60, 0) // Restore the zero slot.\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// from: https://eips.ethereum.org/EIPS/eip-2981#simple-summary\r\n///\r\n/// @dev Interface for the NFT Royalty Standard\r\n///\r\ninterface IERC2981 is IERC165 {\r\n    /// ERC165 bytes to add to interface array - set in parent contract\r\n    /// implementing this standard\r\n    ///\r\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n    /// @return receiver - address of who should be sent the royalty payment\r\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice\r\n    ) external view returns (\r\n        address receiver,\r\n        uint256 royaltyAmount\r\n    );\r\n}\r\n\r\n// from: https://eips.ethereum.org/EIPS/eip-4906\r\n// interface id for IERC4906: '0x49064906'\r\n/// @title EIP-721 Metadata Update Extension\r\ninterface IERC4906 is IERC165, IERC721 {\r\n    /// @dev This event emits when the metadata of a token is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFT.\r\n    event MetadataUpdate(uint256 _tokenId);\r\n\r\n    /// @dev This event emits when the metadata of a range of tokens is changed.\r\n    /// So that the third-party platforms such as NFT market could\r\n    /// timely update the images and related attributes of the NFTs.\r\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\r\n}\r\n\r\n//===============================================\r\n// ChekorX\r\n\r\ninterface efficaxInterface{\r\n  function tokenURI(address, uint256) external view returns (string memory);\r\n}\r\n\r\ninterface checksInterface{\r\n  function svg(uint256) external view returns (string memory);\r\n}\r\n\r\ncontract Chekorx is ERC721, IERC2981, IERC4906, Ownable {\r\n  using Counters for Counters.Counter;\r\n\r\n  struct Token {\r\n    bytes18 salt;\r\n    uint72 charity;\r\n    uint16 flips;\r\n    bool locked;\r\n  }\r\n\r\n  mapping(uint256 => Token) internal token;\r\n  mapping(address => uint256) public mintsBy;\r\n\r\n  Counters.Counter private supply;\r\n  uint256 internal constant smileMod = 25;\r\n  uint256 internal constant maxMints = 3;\r\n  uint256 internal constant ownerMaxMints = 10;\r\n  uint256 public mintFee = 0.01 ether;\r\n  uint256 public mintCharity = 0.001 ether;\r\n  uint256 public minFlipFee = 0.0002 ether;\r\n  uint256 public constant maxSupply = 1000;\r\n  bool public mintEnabled;\r\n  bool public mintLocked;\r\n  uint256 internal constant royaltyPercent = 5;\r\n  string public externalURL = \"https://nometa.online/chekorx\";\r\n  string public constant description =\r\n    \"An on-chain hack of FRESH HELL #1, ALGO BRO by XCOPY. Not to be used for making important life decisions. CC0\";\r\n  string internal constant nameStart = \"ChekorX #\";\r\n  uint256 internal start;\r\n  uint256 internal duration;\r\n  bool public isLocked;\r\n  /// @notice this address may send from charityBank via sendCharity()\r\n  address public charityDelegate;\r\n  /// @notice the current value of this contract earmarked for charity\r\n  uint256 public charityBank;\r\n  /// @notice the sum of all values withdrawn from this contract via sendCharity()\r\n  uint256 public charityWithdrawn;\r\n  address internal constant efficaxAddress = 0x323d8d9aB29731849345b97758eD4C1323A1e487;\r\n  address internal constant checksAddress = 0x036721e5A769Cc48B3189EFbb9ccE4471E8A48B1;\r\n  address internal constant freshHellAddress = 0xbB6EefD83DaaB02Fa1a697EB9D8495eEc9f9B384;\r\n\r\n  constructor() payable ERC721('ChekorX','CoX') {\r\n    charityDelegate = msg.sender;\r\n  }\r\n\r\n  efficaxInterface EfficaxContract = efficaxInterface(efficaxAddress);\r\n  checksInterface ChecksContract = checksInterface(checksAddress);\r\n\r\n  modifier tokenExists(uint256 _tokenId) {\r\n    require(_exists(_tokenId), \"token does not exist\");\r\n    _;\r\n  }\r\n\r\n  // interface id for IERC2981: '0x2a55205a'\r\n  // interface id for IERC4906: '0x49064906'\r\n  function supportsInterface(bytes4 interfaceId)\r\n        public view override(IERC165, ERC721) returns (bool) {\r\n    return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        interfaceId == type(IERC2981).interfaceId ||\r\n        interfaceId == bytes4(0x49064906) ||\r\n        super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  /// @notice Locks the minting state. This cannot be undone.\r\n  function lockMint() external onlyOwner {\r\n    mintLocked = true;\r\n  }\r\n\r\n  /// @notice Toggles bool mintEnabled\r\n  function toggleMint() external onlyOwner {\r\n    require(!mintLocked, \"minting has been locked\");\r\n    mintEnabled = !mintEnabled;\r\n  }\r\n\r\n  function safeIterate(uint256 _number) internal pure returns(uint256) {\r\n    unchecked {\r\n      return _number + 1;\r\n    }\r\n  }\r\n\r\n  /// @notice mint given number of tokens\r\n  /// @param _mints the number of tokens to mint. Limit 5 per address.\r\n  function mint(uint256 _mints) external payable {\r\n    require(mintEnabled, \"minting has been disabled\");\r\n    address msgSender = msg.sender;\r\n    uint256 mints = _mints;\r\n    uint256 charity = mintCharity;\r\n    unchecked {\r\n      require((mintsBy[msgSender] + mints) <= maxMints, \"mint limit of 3\");\r\n      require((supply.current() + mints) <= maxSupply, \"exceeds max supply\");\r\n      require(msg.value == mints * mintFee, \"invald value for tranasction\");\r\n      charityBank += mints * charity;\r\n      mintsBy[msgSender] += mints;\r\n    }\r\n    for (uint256 count = 1; count <= mints; count = safeIterate(count)) {\r\n      supply.increment();\r\n      uint256 tokenId = supply.current();\r\n      Token storage thisToken = token[tokenId];\r\n      bytes32 salt = keccak256(abi.encodePacked(\r\n                                          block.prevrandao,\r\n                                          msgSender,\r\n                                          tokenId,\r\n                                          block.number,\r\n                                          count\r\n                                          ));\r\n      thisToken.salt = bytes18(salt);\r\n      thisToken.charity = uint72(charity);\r\n      _safeMint(msgSender, tokenId);\r\n    }\r\n  }\r\n\r\n  function ownerMint(uint256 _mints) external payable onlyOwner {\r\n    // can mint when disabled\r\n    address msgSender = owner();\r\n    uint256 mints = _mints;\r\n    uint256 charity = mintCharity;\r\n    unchecked {\r\n      require((mintsBy[msgSender] + mints) <= ownerMaxMints, \"mint limit of 5\");\r\n      require((supply.current() + mints) <= maxSupply, \"exceeds max supply\");\r\n      uint256 charityRequired = mints * charity;\r\n      require(msg.value == charityRequired, \"invald value for tranasction\");\r\n      charityBank += charityRequired;\r\n      mintsBy[msgSender] += mints;\r\n    }\r\n    for (uint256 count = 1; count <= mints; count = safeIterate(count)) {\r\n      supply.increment();\r\n      uint256 tokenId = supply.current();\r\n      Token storage thisToken = token[tokenId];\r\n      bytes32 salt = keccak256(abi.encodePacked(\r\n                                          block.prevrandao,\r\n                                          msgSender,\r\n                                          tokenId,\r\n                                          block.number,\r\n                                          count\r\n                                          ));\r\n      thisToken.salt = bytes18(salt);\r\n      thisToken.charity = uint72(charity);\r\n      _safeMint(msgSender, tokenId);\r\n    }\r\n  }\r\n\r\n  /// @notice flip your token. Who knows what you'll get\r\n  /// @param _tokenId the id of the token to be flipped\r\n  function flip(uint256 _tokenId) external payable tokenExists(_tokenId) {\r\n    address msgSender = msg.sender;\r\n    uint256 tokenId = _tokenId;\r\n    uint256 msgValue = msg.value;\r\n    // testing minFlipFee cost - i don't think there's a difference\r\n    require(msgValue >= minFlipFee, \"incorrect value sent\");\r\n    require(msgSender == ownerOf(tokenId), \"not token owner\");\r\n    require(!flipped(), \"flip is broken. please stand by\");\r\n    Token storage thisToken = token[tokenId];\r\n    require(!thisToken.locked, \"token has been locked\");\r\n    bytes32 salt = keccak256(abi.encodePacked(\r\n                                        block.prevrandao,\r\n                                        msgSender,\r\n                                        block.number,\r\n                                        tokenId\r\n                                        ));\r\n    thisToken.salt = bytes18(salt);\r\n    unchecked {\r\n      thisToken.flips += 1;\r\n      thisToken.charity += uint72(msgValue);\r\n      charityBank += msgValue;\r\n    }\r\n\r\n    emit MetadataUpdate(tokenId);\r\n  }\r\n\r\n  /// @notice permanently lock a token from being flipped again.\r\n  /// @param _tokenId the id of the token to be locked\r\n  function lockFlip(uint256 _tokenId) external tokenExists(_tokenId) {\r\n    uint256 tokenId = _tokenId;\r\n    require(msg.sender == ownerOf(tokenId), \"not token owner\");\r\n    token[tokenId].locked = true;\r\n  }\r\n\r\n  /// @notice called with the sale price to determine how much royalty is owed and to whom.\r\n  /// @param _tokenId the NFT asset queried for royalty information\r\n  /// @param _salePrice the sale price of the NFT asset specified by _tokenId\r\n  /// @return receiver address of who should be sent the royalty payment\r\n  /// @return royaltyAmount the royalty payment amount for _salePrice\r\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n                external view tokenExists(_tokenId)\r\n                returns(address receiver, uint256 royaltyAmount) {\r\n    return (owner(), _salePrice * royaltyPercent / 100);\r\n  }\r\n\r\n  function setIt(uint256 _start, uint256 _duration) external onlyOwner {\r\n    require(!isLocked, \"not fooling anyone\");\r\n    require(_duration <= 432000, \"over max duration\");\r\n    start = _start;\r\n    duration = _duration;\r\n  }\r\n\r\n  function lockIt() external onlyOwner {\r\n    start = 0;\r\n    isLocked = true;\r\n  }\r\n\r\n  function flipped() internal view returns(bool) {\r\n    if (start == 0) {return false;}\r\n    if (isLocked) {return false;}\r\n    uint256 time = block.timestamp;\r\n    uint256 end;\r\n    unchecked{end = start + duration;}\r\n    return (time > start && time < end);\r\n  }\r\n\r\n  function emitUpdate() external onlyOwner {\r\n    emit BatchMetadataUpdate(1, supply.current());\r\n  }\r\n\r\n//======================================================================\r\n// artwork\r\n\r\n  /// @notice this is external only for calldata slicing.\r\n  function decodeAlgoBro(bytes calldata _bstring)\r\n                  external pure returns(string memory) {\r\n    string memory svg64 = string(_bstring[107:57067]);\r\n    return string(Base64.decode(svg64));\r\n  }\r\n\r\n  /// @notice get the metadata string of ALGO BRO from 0xdiid's Efficax contract\r\n  function getAlgoBro() internal view returns(string memory) {\r\n    return this.decodeAlgoBro(abi.encodePacked(\r\n                                EfficaxContract.tokenURI(freshHellAddress, 1)\r\n                                ));\r\n  }\r\n\r\n  /// @notice get the svg string for checks #1\r\n  function getChecks() internal view returns(string memory) {\r\n    return ChecksContract.svg(1);\r\n  }\r\n\r\n  function generateColours(bytes calldata _salt)\r\n              pure external returns(string memory, string memory) {\r\n    return (string.concat(\r\n                'rgb(',\r\n                Strings.toString(uint8(_salt[31])), ',',\r\n                Strings.toString(uint8(_salt[30])), ',',\r\n                Strings.toString(uint8(_salt[29])), ')'\r\n                ),\r\n            string.concat(\r\n                'rgb(',\r\n                Strings.toString(uint8(_salt[28])), ',',\r\n                Strings.toString(uint8(_salt[27])), ',',\r\n                Strings.toString(uint8(_salt[26])), ')'\r\n                ));\r\n  }\r\n\r\n  /// @notice this will determine your fate.\r\n  function getResult(uint256 _tokenId) internal view\r\n              returns(uint256, string memory, string memory) {\r\n      uint256 salt = uint144(token[_tokenId].salt);\r\n      uint256 result;\r\n      if (salt % smileMod == 0) {\r\n        result = 2;\r\n      } else {\r\n        result = salt % 2;\r\n      }\r\n      (string memory colour1, string memory colour2) = this.generateColours(abi.encodePacked(salt));\r\n      return (result, colour1, colour2);\r\n    }\r\n\r\n  /// @notice builds and returns the svg as a string\r\n  /// @param _tokenId If you've come this far, you know what this means.\r\n  function generateSVG(uint256 _tokenId)\r\n                public view tokenExists(_tokenId) returns(string memory) {\r\n    (uint256 result, string memory colour1, string memory colour2) = getResult(_tokenId);\r\n    string memory class;\r\n    string memory groupBlock;\r\n    string memory groups;\r\n    string memory extraStyle;\r\n    string memory checks;\r\n    if (flipped()) {\r\n      result = 2;\r\n    }\r\n    if (result == 1) {\r\n      class = 'mouth';\r\n      groupBlock = string.concat(\r\n              '<use class=\"tick1\" href=\"#Tick1\"/>',\r\n              '<use class=\"tick2\" href=\"#Tick2\"/>',\r\n              '<use class=\"tick3\" href=\"#Tick3\"/>',\r\n              '<use class=\"tick4\" href=\"#Tick4\"/>',\r\n            '</g>'\r\n            );\r\n      groups = string.concat(\r\n            '<g transform=\"scale(6) translate(-1250 -1450)\">',\r\n            groupBlock,\r\n            '<g transform=\"scale(3) translate(-2330 -1200)\">',\r\n            groupBlock\r\n            );\r\n      extraStyle = string.concat(\r\n            '.mouth{fill:',colour1,'}',\r\n            '.tick1{fill:',colour1,';animation-delay:0.5s}',\r\n            '.tick2{fill:#4fc7f9}',\r\n            '.tick3{fill:#51ff82}',\r\n            '.tick4{fill:',colour2,'}'\r\n            );\r\n    } else {\r\n      class = 'teeth';\r\n      groupBlock = string.concat(\r\n              '<use class=\"frame1\" href=\"#X1\"/>',\r\n              '<use class=\"frame2\" href=\"#X2\"/>',\r\n              '<use class=\"frame3\" href=\"#X3\"/>',\r\n              '<use class=\"frame4\" href=\"#X4\"/>',\r\n            '</g>'\r\n            );\r\n      groups = string.concat(\r\n            '<g transform=\"scale(5) translate(-1868 -920)\">',\r\n            groupBlock,\r\n            '<g transform=\"scale(1) translate(-1068 -120)\">',\r\n            groupBlock\r\n            );\r\n\r\n      extraStyle = string.concat(\r\n            '.teeth{fill:',colour1,'}',\r\n            '.frame1{fill:',colour1,';animation-delay:0.5s}',\r\n            '.frame2{fill:#ff42d5}',\r\n            '.frame3{fill:#ff0c0c}',\r\n            '.frame4{fill:',colour2,'}'\r\n            );\r\n    }\r\n    if (result == 2) {\r\n      groups = string.concat(\r\n            '<g transform=\"scale(1) translate(-800 -1000)\">',\r\n              '<use href=\"#MOUTH\"/>',\r\n              '<use class=\"frame1\" transform=\"scale(1 0.8) translate(0 560)\" href=\"#MOUTH\"/>',\r\n              '<use href=\"#TEETH\"/>',\r\n              '<use class=\"tick3\" transform=\"translate(5 10)\" href=\"#TEETH\"/>',\r\n            '</g>',\r\n            '<g transform=\"scale(1.5) rotate(20) translate(-1000 -1120)\">',\r\n            groupBlock,\r\n            '<g transform=\"scale(2) rotate(-15) translate(-1768 -820)\">',\r\n            groupBlock,\r\n            '<use class=\"tick1\" transform=\"scale(3) translate(220 130)\" href=\"#check\"/>',\r\n            '<use class=\"tick2\" transform=\"scale(3) translate(223 132)\" href=\"#check\"/>',\r\n            '<use class=\"tick3\" transform=\"scale(2) rotate(20) translate(778 -15)\" href=\"#check\"/>',\r\n            '<use class=\"tick4\" transform=\"scale(2) rotate(20) translate(780 -13)\" href=\"#check\"/>'\r\n            );\r\n      checks = getChecks();\r\n    }\r\n    string memory style = string.concat(\r\n            '<style type=\"text/css\">',\r\n            '.border { fill:', colour2, '; animation: borderAnimation 0.16s infinite alternate;}',\r\n            extraStyle,\r\n            '@keyframes borderAnimation {0%,50%{fill:', colour1, ';}51%,100%{fill:', colour2, ';}}',\r\n            '</style>'\r\n            );\r\n    return string.concat(\r\n            '<svg style=\"background-color:#111111\" ',\r\n                'viewBox=\"0 0 800 800\" xmlns=\"http://www.w3.org/2000/svg\">',\r\n              '<svg class=\"inner\" width=\"100%\" height=\"100%\" viewBox=\"0 0 2000 2000\">',\r\n                '<defs>',\r\n                  getAlgoBro(),\r\n                  checks,\r\n                '</defs>',\r\n                '<rect width=\"100%\" height=\"100%\" fill=\"#0c1b2c\"/>',\r\n                '<rect x=\"4%\" y=\"4%\" class=\"border\" width=\"92%\" height=\"92%\"/>',\r\n                '<rect x=\"8%\" y=\"8%\" class=\"',class, '\" width=\"84%\" height=\"84%\"/>',\r\n                '<rect x=\"10%\" y=\"10%\" class=\"head\" width=\"80%\" height=\"80%\"/>',\r\n                groups,\r\n                style,\r\n              '</svg>',\r\n            '</svg>'\r\n            );\r\n  }\r\n\r\n  /// @notice returns the token svg image as a data uri\r\n  /// @param _tokenId the id of the token\r\n  function imageURI(uint256 _tokenId) public view tokenExists(_tokenId) returns(string memory) {\r\n    return string.concat(\r\n              \"data:image/svg+xml;base64,\",\r\n              Base64.encode(bytes(generateSVG(_tokenId)))\r\n              );\r\n  }\r\n\r\n  function genMetaData(uint256 _tokenId) internal view returns(string memory) {\r\n    uint256 tokenId = _tokenId;\r\n    return string.concat(\r\n            'data:application/json;base64,',\r\n            Base64.encode(abi.encodePacked(\r\n                        '{\"name\":\"',\r\n                        nameStart,\r\n                        Strings.toString(tokenId),\r\n                        '\",\"description\":\"',\r\n                        description,\r\n                        '\",',\r\n                        '\"external_url\":\"',\r\n                        externalURL,\r\n                        '\",\"attributes\":',\r\n                        genAttribs(tokenId),\r\n                        ',\"image\":\"',\r\n                        imageURI(tokenId),\r\n                        '\"}'\r\n                        )));\r\n  }\r\n\r\n\r\n  function genAttribs(uint256 _tokenId) internal view returns(string memory) {\r\n    uint256 tokenId = _tokenId;\r\n    Token memory thisToken = token[tokenId];\r\n    (uint256 result, string memory colour1, string memory colour2) = getResult(tokenId);\r\n    string memory _flip;\r\n    if (result == 0) {\r\n      _flip = \"x\";\r\n    } else if (result == 1) {\r\n      _flip = \"check\";\r\n    } else {\r\n      _flip = \"smile\";\r\n    }\r\n    string memory lock;\r\n    if (thisToken.locked) {\r\n      lock = \"locked\";\r\n      } else {\r\n        lock = \"unlocked\";\r\n      }\r\n    string memory started;\r\n    if (flipped()) {\r\n      started = '\"},{\"trait_type\":\"IPittyTheFoo\",\"value\":\"you';\r\n      lock = \"locked\";\r\n    }\r\n    string memory flips = Strings.toString(thisToken.flips);\r\n    string memory charity;\r\n    unchecked {\r\n      charity = string.concat(\r\n                    '},{\"trait_type\":\"charityGwei)\",\"value\":',\r\n                    Strings.toString(thisToken.charity / 1e9)\r\n                    );\r\n    }\r\n    return string.concat(\r\n                    '[{\"trait_type\":\"flip\",\"value\":\"',\r\n                    _flip,\r\n                    '\"},{\"trait_type\":\"colour1\",\"value\":\"',\r\n                    colour1,\r\n                    '\"},{\"trait_type\":\"colour2\",\"value\":\"',\r\n                    colour2,\r\n                    '\"},{\"trait_type\":\"flips\",\"value\":',\r\n                    flips,\r\n                    charity,\r\n                    '},{\"trait_type\":\"state\",\"value\":\"',\r\n                    lock,\r\n                    started,\r\n                    '\"}]'\r\n                    );\r\n  }\r\n\r\n  // @notice returns the number of tokens in the collection\r\n  function totalSupply() external view returns (uint256) {\r\n      return supply.current();\r\n  }\r\n\r\n  /// @notice returns metadata for the token\r\n  /// @param _tokenId the id of the token\r\n  function tokenURI(uint256 _tokenId)\r\n        public view virtual override tokenExists(_tokenId) returns (string memory) {\r\n  return genMetaData(_tokenId);\r\n  }\r\n\r\n  /// @notice Set the external address for metadata. onlyOwner\r\n  /// @param _url The new external url.\r\n  function setExternalURL(string calldata _url) external onlyOwner {\r\n      externalURL = _url;\r\n  }\r\n\r\n  /// @notice update the minimum fee required for flipping a token\r\n  function setFlipFee(uint256 _fee) external onlyOwner {\r\n    minFlipFee = _fee;\r\n  }\r\n\r\n  /// @notice set an address as the charity delegate\r\n  // only the charity delegate can send the funds from charityBank\r\n  function setCharityDelegate(address _delegate) external onlyOwner {\r\n    charityDelegate = _delegate;\r\n  }\r\n\r\n  /// @notice withdraw contract balance minus charityBank\r\n  function withdraw() external onlyOwner {\r\n    uint256 withdrawValue = address(this).balance - charityBank;\r\n    (bool success, ) = payable(msg.sender).call{value: withdrawValue}(\"\");\r\n    require(success);\r\n  }\r\n\r\n  /// @notice send funds from the charityBank to an address\r\n  /// @param _charity the address to send funds to\r\n  /// @param _amount the value to send. 0 will send the full value of charityBank\r\n  function sendCharity(address _charity, uint256 _amount) external {\r\n    require(msg.sender == charityDelegate, \"sender not delegated\");\r\n    uint256 bank = charityBank;\r\n    uint256 amount = _amount;\r\n    require(amount <= bank, \"not enough funds in bank\");\r\n    if (amount == 0) {\r\n      amount = bank;\r\n    }\r\n    unchecked {\r\n      charityWithdrawn += amount;\r\n      charityBank -= amount;\r\n    }\r\n   (bool success, ) = payable(_charity).call{value: amount}(\"\");\r\n   require(success);\r\n  }\r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bstring\",\"type\":\"bytes\"}],\"name\":\"decodeAlgoBro\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"flip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_salt\",\"type\":\"bytes\"}],\"name\":\"generateColours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockFlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFlipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mints\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCharity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintsBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mints\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setCharityDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setExternalURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFlipFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Chekorx", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5bcda8aa133bdcc8dc00ab313fbfb322ea8618c6231865adc441e3bb6ab6ce9d"}