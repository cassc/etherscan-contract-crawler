{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TimelockVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./TwoStepOwnable.sol\\\";\\n\\n/**\\n * @title TimelockVesting\\n * @notice A token holder contract that can release its token balance gradually like a\\n *         typical vesting scheme, with a cliff and vesting period. Owner has the power\\n *         to change the beneficiary who receives the vested tokens.\\n * @author Hourglass Foundation\\n */\\ncontract TimelockVesting is TwoStepOwnable {\\n    using SafeERC20 for IERC20;\\n\\n    error InvalidTotalAmount();\\n    error InvalidAmount();\\n    error InvalidBeneficiary();\\n    error InvalidStartTimestamp();\\n    error InvalidCliffStart(uint256 cliffDate, uint256 paramTimestamp);\\n    error InvalidDuration();\\n    error InvalidReleaseAmount();\\n\\n    /// @notice The vesting token\\n    address internal _vestingToken;\\n\\n    /// @notice Vesting schedule parameters\\n    /// @param amount amount of tokens to be vested\\n    /// @param startTimestamp unix timestamp of the start of vesting\\n    /// @param cliff unix timestamp of the cliff, before which no vesting counts\\n    /// @param duration duration in seconds of the period in which the tokens will vest\\n    /// @param released amount of tokens released\\n    struct VestingSchedule {\\n        uint256 amount;\\n        uint256 startTimestamp;\\n        uint256 cliff;\\n        uint256 duration;\\n        uint256 released;\\n    }\\n\\n    /// @notice Internal storage of beneficiary address --> vesting schedule array\\n    mapping(address => VestingSchedule[]) internal _schedules;\\n\\n\\n    /// @param __vestingToken address of the token that is subject to vesting\\n    constructor(address __vestingToken) {\\n        _setInitialOwner(msg.sender);\\n        require(__vestingToken != address(0));\\n        _vestingToken = __vestingToken;\\n    }\\n\\n    /// @notice Allows for adding multiple vests with a single call.\\n    /// @param _beneficiaries array of addresses of the beneficiaries to whom vested tokens are transferred\\n    /// @param _amounts array of amounts of tokens to be vested\\n    /// @param _startTimestamps array of unix timestamps of the start of vesting\\n    /// @param _cliffDates array of unix timestamps of the cliff, before which no vesting counts\\n    /// @param _durationInSeconds array of durations in seconds of the period in which the tokens will vest\\n    /// @param _totalBatchTokenAmount total amount of tokens to be vested across all beneficiaries (sanity check)\\n    /// @dev Call this with a script that validates that all arrays are equal length & that\\n    ///      all addresses, amounts, timestamps & durations != 0\\n    function addBatchBeneficiaries(\\n        address[] calldata _beneficiaries,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _startTimestamps,\\n        uint256[] calldata _cliffDates,\\n        uint256[] calldata _durationInSeconds,\\n        uint256 _totalBatchTokenAmount\\n    ) external onlyOwner {\\n        // pull in the tokens for this batch\\n        IERC20(_vestingToken).safeTransferFrom(msg.sender, address(this), _totalBatchTokenAmount);\\n\\n        uint256 totalVestingAmount;\\n\\n        // add each vesting schedule\\n        uint256 numVests = _beneficiaries.length;\\n        for (uint256 i; i < numVests;) {\\n            _addBeneficiary(\\n                _beneficiaries[i],\\n                _amounts[i],\\n                _startTimestamps[i],\\n                _cliffDates[i],\\n                _durationInSeconds[i]\\n            );\\n\\n            totalVestingAmount += _amounts[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        \\n        if (totalVestingAmount != _totalBatchTokenAmount) {\\n            revert InvalidTotalAmount();\\n        }\\n    }\\n\\n    /// @notice Initializes a vesting contract that vests its balance of any ERC20 token to the\\n    ///    _beneficiary in a linear fashion until duration has passed. By then all\\n    ///    of the balance will have vested.\\n    /// @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n    /// @param _amount amount of tokens to be vested\\n    /// @param _startTimestamp unix timestamp of the start of vesting\\n    /// @param _cliffDate unix timestamp of the cliff, before which no vesting counts\\n    /// @param _durationInSeconds duration in seconds of the period in which the tokens will vest\\n    function addBeneficiary(\\n        address _beneficiary,\\n        uint256 _amount,\\n        uint256 _startTimestamp,\\n        uint256 _cliffDate,\\n        uint256 _durationInSeconds\\n    ) public onlyOwner {\\n        // pull in the tokens for this beneficiary\\n        IERC20(_vestingToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _addBeneficiary(_beneficiary, _amount, _startTimestamp, _cliffDate, _durationInSeconds);\\n    }\\n\\n    function _addBeneficiary(\\n        address _beneficiary,\\n        uint256 _amount,\\n        uint256 _startTimestamp,\\n        uint256 _cliffDate,\\n        uint256 _durationInSeconds\\n    ) internal {\\n        // sanity checks\\n        if (_amount == 0) revert InvalidAmount();\\n        if (_beneficiary == address(0)) revert InvalidBeneficiary();\\n        if (_startTimestamp == 0) revert InvalidStartTimestamp();\\n        if (_durationInSeconds == 0) revert InvalidDuration();\\n        if (_cliffDate <= _startTimestamp) revert InvalidCliffStart(_cliffDate, _startTimestamp);\\n        if (_cliffDate > _startTimestamp + _durationInSeconds) revert InvalidCliffStart(_cliffDate, _startTimestamp + _durationInSeconds);\\n\\n        // add the vesting schedule\\n        _schedules[_beneficiary].push(VestingSchedule(\\n            _amount,\\n            _startTimestamp,\\n            _cliffDate,\\n            _durationInSeconds,\\n            0\\n        ));\\n\\n        emit VestingInitialized(\\n            _beneficiary,\\n            _amount,\\n            _startTimestamp,\\n            _cliffDate,\\n            _durationInSeconds\\n        );\\n    }\\n\\n    /// @notice Transfers vested tokens to beneficiary.\\n    /// @dev This won't revert if nothing is claimable, but nothing will be claimed.\\n    /// @param _beneficiary Address of beneficiary to claim tokens for.\\n    /// @param _scheduleId Id of schedule to claim tokens for.\\n    function release(address _beneficiary, uint256 _scheduleId) external {\\n        if (_beneficiary == address(0)) revert InvalidBeneficiary();\\n\\n        // Transfer vested tokens to beneficiary\\n        IERC20(_vestingToken).safeTransfer(_beneficiary, _release(_beneficiary, _scheduleId));//releasedAmt);\\n    }\\n\\n    /// @notice Allows beneficiary to claim vested tokens across multiple schedules.\\n    /// @dev This won't revert if nothing is claimable, but nothing will be transferred.\\n    /// @param _beneficiary Address of beneficiary to claim tokens for.\\n    /// @param _scheduleIds Array of schedule ids to claim tokens for.\\n    function releaseMultiple(address _beneficiary, uint256[] calldata _scheduleIds) external {\\n        uint256 numSchedules = _scheduleIds.length;\\n        uint256 releasedAmt;\\n        for (uint256 i; i < numSchedules; i++) {\\n            releasedAmt += _release(_beneficiary, _scheduleIds[i]);\\n        }\\n\\n        // transfer vested tokens to beneficiary\\n        IERC20(_vestingToken).safeTransfer(_beneficiary, releasedAmt);\\n    }\\n\\n    /// @notice Updates the amount released & returns the amount to distribute for this `_scheduleId`.\\n    function _release(address _beneficiary, uint256 _scheduleId) internal returns (uint256 vested) {\\n        VestingSchedule memory schedule = _schedules[_beneficiary][_scheduleId];\\n\\n        vested = _vestedAmount(schedule);\\n\\n        // instead of reverting, return 0 if nothing is due so multiple schedules can be checked\\n        if (vested == 0) {\\n            return 0;\\n        }\\n\\n        // otherwise updated released amount\\n        _schedules[_beneficiary][_scheduleId].released += vested;\\n\\n        // sanity check\\n        if (schedule.released > schedule.amount) revert InvalidReleaseAmount();\\n\\n        emit Released(_beneficiary, _scheduleId, vested);\\n    }\\n\\n    /// @notice Calculates the amount that has already vested but hasn't been released yet.\\n    function _vestedAmount(VestingSchedule memory schedule) internal view returns (uint256) {\\n        // cliff hasn't passed yet neither has start time, so 0 vested\\n        if (block.timestamp < schedule.cliff) {\\n            return 0;\\n        }\\n\\n        uint256 elapsedTime = block.timestamp - schedule.startTimestamp;\\n\\n        // If over vesting duration, all tokens vested\\n        if (elapsedTime >= schedule.duration) {\\n            // deduct already released tokens\\n            return schedule.amount - schedule.released; \\n        } else {\\n            // if 75 seconds have passed of the 100 seconds, then 3/4 of the amount should be released.\\n            uint256 vested = schedule.amount * elapsedTime / schedule.duration;\\n            return (vested - schedule.released); \\n        }\\n    }\\n\\n    /// @notice Changes beneficiary who receives the vested token.\\n    /// @dev Only governance can call this function. This is to be used in case the target address\\n    ///   needs to be updated. If the previous beneficiary has any unclaimed tokens, the new beneficiary\\n    ///   will be able to claim them and the rest of the vested tokens.\\n    /// @param oldBeneficiary address of the previous beneficiary\\n    /// @param newBeneficiary new address to become the beneficiary\\n    /// @param scheduleIds array of schedule ids to migrate to the new beneficiary\\n    function changeBeneficiary(address oldBeneficiary, address newBeneficiary, uint256[] calldata scheduleIds) external onlyOwner {\\n        if (newBeneficiary == address(0)) revert InvalidBeneficiary();\\n        if (newBeneficiary == oldBeneficiary) revert InvalidBeneficiary();\\n\\n        uint256 numSchedules = scheduleIds.length;\\n        // iterate from the end to avoid having to delete & move every schedule element each iteration\\n        for (uint256 i; i < numSchedules; i++) {\\n            VestingSchedule memory schedule = _schedules[oldBeneficiary][scheduleIds[i]];\\n\\n            // migrate the schedule to the new beneficiary\\n            _schedules[newBeneficiary].push(schedule);\\n\\n            // rather than deleting, set amount to the amount released  & duration to 0\\n            //   to avoid having to delete & move every schedule element each iteration\\n            //   and to avoid breaking the amount released logic in _vestedAmount()\\n            _schedules[oldBeneficiary][scheduleIds[i]].amount = schedule.released;\\n            _schedules[oldBeneficiary][scheduleIds[i]].duration = 0;\\n            emit SetBeneficiary(oldBeneficiary, scheduleIds[i], newBeneficiary, _schedules[newBeneficiary].length - 1);\\n        }\\n    }\\n\\n    /// @notice Allows the owner to terminate a vesting schedule and recover the unvested tokens.\\n    /// @param _beneficiary Address of beneficiary to terminate vesting for.\\n    /// @param _scheduleId Id of schedule to terminate.\\n    function terminateVest(address _beneficiary, uint256 _scheduleId) external onlyOwner {\\n        // _release(_beneficiary, _scheduleId);\\n\\n        VestingSchedule memory schedule = _schedules[_beneficiary][_scheduleId];\\n        // calculate the amount accrued to date\\n        uint256 vested = _vestedAmount(schedule);// - schedule.released;\\n        uint256 unreleased = schedule.amount - (schedule.released + vested);\\n\\n        // delete the vest\\n        delete _schedules[_beneficiary][_scheduleId];\\n\\n        // transfer out the tokens\\n        IERC20(_vestingToken).safeTransfer(msg.sender, unreleased);\\n        IERC20(_vestingToken).safeTransfer(_beneficiary, vested);\\n    }\\n\\n\\n    ////////// Getter Functions //////////\\n\\n    /// @notice Checks the amount of currently vested tokens available for release.\\n    /// @dev Note that this will return a value > 0 if there are any tokens available to claim,\\n    /// @param _beneficiary The address of the beneficiary.\\n    /// @param _scheduleId The index of the schedule array.\\n    /// @return The number of tokens that are vested and available to claim.\\n    function getClaimableAmount(address _beneficiary, uint256 _scheduleId) external view returns (uint256) {\\n        VestingSchedule memory schedule = _schedules[_beneficiary][_scheduleId];\\n        return _vestedAmount(schedule);\\n    }\\n\\n    /// @notice Obtain a specific schedule for a user.\\n    /// @dev Note that this will return a schedule even if it has been transferred.\\n    /// @param _beneficiary The address of the beneficiary.\\n    /// @param _scheduleId The index of the schedule array.\\n    /// @return The vesting schedule.\\n    function getSchedule(address _beneficiary, uint256 _scheduleId) external view returns (VestingSchedule memory) {\\n        return _schedules[_beneficiary][_scheduleId];\\n    }\\n\\n    /// @notice Obtain the length of a user's schedule array.\\n    /// @dev Note that this will return a length that includes deleted schedules.\\n    /// @param _beneficiary The address of the beneficiary.\\n    /// @return The length of the schedule array.\\n    function getNumberSchedules(address _beneficiary) external view returns (uint256) {\\n        return _schedules[_beneficiary].length;\\n    }\\n\\n    /// @notice Obtain the total amount of tokens released to a user thus far.\\n    /// @param _beneficiary The address of the beneficiary.\\n    /// @return The total amount of tokens released.\\n    function getTotalAmountReleased(address _beneficiary) external view returns (uint256) {\\n        uint256 numSchedules = _schedules[_beneficiary].length;\\n        uint256 totalReleased;\\n        for (uint256 i; i < numSchedules; i++) {\\n            totalReleased += _schedules[_beneficiary][i].released;\\n        }\\n        return totalReleased;\\n    }\\n\\n    /// @notice Get the token being vested.\\n    /// @return The token address.\\n    function vestingToken() public view returns (address) {\\n        return _vestingToken;\\n    }\\n\\n    \\n    ////////// EVENTS //////////\\n    /// @notice Emitted when a beneficiary claims vested tokens.\\n    event Released(address indexed beneficiary, uint256 scheduleId, uint256 amount);\\n    /// @notice Emitted when a new vesting schedule is created.\\n    event VestingInitialized(\\n        address indexed beneficiary, \\n        uint256 amount,\\n        uint256 startTimestamp,\\n        uint256 cliff,\\n        uint256 duration\\n    );\\n    /// @notice Emitted when a beneficiary is changed.\\n    event SetBeneficiary(address indexed oldBeneficiary, uint256 oldBeneficiaryScheduleIndex, address indexed newBeneficiary, uint256 newBeneficiaryScheduleIndex);\\n    /// @notice Emitted when whether votes can be counted is changed.\\n    event BeneficiaryVotes(bool voting);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TwoStepOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./TwoStepOwnableInterface.sol\\\";\\n\\n/**\\n * @title   TwoStepOwnable\\n * @author  OpenSea Protocol Team\\n * @notice  TwoStepOwnable provides access control for inheriting contracts,\\n *          where the ownership of the contract can be exchanged via a two step\\n *          process. A potential owner is set by the current owner by calling\\n *          `transferOwnership`, then accepted by the new potential owner by\\n *          calling `acceptOwnership`.\\n */\\nabstract contract TwoStepOwnable is TwoStepOwnableInterface {\\n    // The address of the owner.\\n    address private _owner;\\n\\n    // The address of the new potential owner.\\n    address private _potentialOwner;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // Ensure that the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n\\n        // Continue with function execution.\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initiate ownership transfer by assigning a new potential owner\\n     *         to this contract. Once set, the new potential owner may call\\n     *         `acceptOwnership` to claim ownership. Only the owner may call\\n     *         this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // Ensure the new potential owner is not an invalid address.\\n        if (newPotentialOwner == address(0)) {\\n            revert NewPotentialOwnerIsNullAddress();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been updated.\\n        emit PotentialOwnerUpdated(newPotentialOwner);\\n\\n        // Set the new potential owner as the potential owner.\\n        _potentialOwner = newPotentialOwner;\\n    }\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any. Only the owner\\n     *         of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external override onlyOwner {\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner.\\n        delete _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external override {\\n        // Ensure the caller is the potential owner.\\n        if (msg.sender != _potentialOwner) {\\n            // Revert, indicating that caller is not current potential owner.\\n            revert CallerIsNotNewPotentialOwner();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner.\\n        delete _potentialOwner;\\n\\n        // Set the caller as the owner of this contract.\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @notice An external view function that returns the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view override returns (address) {\\n        return _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice A public view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Internal function that sets the inital owner of the base\\n     *         contract. The initial owner must not already be set.\\n     *         To be called in the constructor or when initializing a proxy.\\n     *\\n     * @param initialOwner The address to set for initial ownership.\\n     */\\n    function _setInitialOwner(address initialOwner) internal {\\n        // Ensure that an initial owner has been supplied.\\n        if (initialOwner == address(0)) {\\n            revert InitialOwnerIsNullAddress();\\n        }\\n\\n        // Ensure that the owner has not already been set.\\n        if (_owner != address(0)) {\\n            revert OwnerAlreadySet(_owner);\\n        }\\n\\n        // Set the initial owner.\\n        _setOwner(initialOwner);\\n    }\\n\\n    /**\\n     * @notice Private function that sets a new owner and emits a corresponding\\n     *         event.\\n     *\\n     * @param newOwner The address to assign as the new owner.\\n     */\\n    function _setOwner(address newOwner) private {\\n        // Emit an event indicating that the new owner has been set.\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        // Set the new owner.\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TwoStepOwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title   TwoStepOwnableInterface\\n * @author  OpenSea Protocol\\n * @notice  TwoStepOwnableInterface contains all external function interfaces,\\n *          events and errors for the TwoStepOwnable contract.\\n */\\n\\ninterface TwoStepOwnableInterface {\\n    /**\\n     * @dev Emit an event whenever the contract owner registers a new potential\\n     *      owner.\\n     *\\n     * @param newPotentialOwner The new potential owner of the contract.\\n     */\\n    event PotentialOwnerUpdated(address newPotentialOwner);\\n\\n    /**\\n     * @dev Emit an event whenever contract ownership is transferred.\\n     *\\n     * @param previousOwner The previous owner of the contract.\\n     * @param newOwner      The new owner of the contract.\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to set an initial owner when\\n     *      one has already been set.\\n     */\\n    error OwnerAlreadySet(address currentOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to call a function with the\\n     *      onlyOwner modifier from an account other than that of the owner.\\n     */\\n    error CallerIsNotOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to register an initial owner\\n     *      and supplying the null address.\\n     */\\n    error InitialOwnerIsNullAddress();\\n\\n    /**\\n     * @dev Revert with an error when attempting to register a new potential\\n     *      owner and supplying the null address.\\n     */\\n    error NewPotentialOwnerIsNullAddress();\\n\\n    /**\\n     * @dev Revert with an error when attempting to claim ownership of the\\n     *      contract with a caller that is not the current potential owner.\\n     */\\n    error CallerIsNotNewPotentialOwner();\\n\\n    /**\\n     * @notice Initiate ownership transfer by assigning a new potential owner\\n     *         to this contract. Once set, the new potential owner may call\\n     *         `acceptOwnership` to claim ownership. Only the owner may call\\n     *         this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner) external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any. Only the owner\\n     *         of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external;\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @notice An external view function that returns the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view returns (address);\\n\\n    /**\\n     * @notice An external view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@interfaces/=src/interfaces/\",\r\n      \"@mocks/=src/mocks/\",\r\n      \"@script/=script/\",\r\n      \"@libraries/=src/libraries/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000,\r\n      \"details\": {\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__vestingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBeneficiary\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cliffDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paramTimestamp\",\"type\":\"uint256\"}],\"name\":\"InvalidCliffStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReleaseAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voting\",\"type\":\"bool\"}],\"name\":\"BeneficiaryVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBeneficiaryScheduleIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBeneficiaryScheduleIndex\",\"type\":\"uint256\"}],\"name\":\"SetBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"VestingInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cliffDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_durationInSeconds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalBatchTokenAmount\",\"type\":\"uint256\"}],\"name\":\"addBatchBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInSeconds\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleIds\",\"type\":\"uint256[]\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleId\",\"type\":\"uint256\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getNumberSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleId\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TimelockVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTotalAmountReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_scheduleIds\",\"type\":\"uint256[]\"}],\"name\":\"releaseMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleId\",\"type\":\"uint256\"}],\"name\":\"terminateVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TimelockVesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "0000000000000000000000009c4ac8cacb116a65bac5ea6f236709b2d11c0c7e", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}