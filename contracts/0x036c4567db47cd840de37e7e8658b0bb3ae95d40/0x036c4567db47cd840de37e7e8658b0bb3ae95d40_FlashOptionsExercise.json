{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/peripheral/FlashOptionsExerciser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IBooster } from \\\"../interfaces/IBooster.sol\\\";\\nimport { ILiqLocker } from \\\"../interfaces/ILiqLocker.sol\\\";\\nimport { IBaseRewardPool } from \\\"../interfaces/IBaseRewardPool.sol\\\";\\nimport { IRewardPool4626 } from \\\"../interfaces/IRewardPool4626.sol\\\";\\nimport { ILitDepositorHelper } from \\\"../interfaces/ILitDepositorHelper.sol\\\";\\nimport { IBalancerVault, IAsset, IBalancerTwapOracle } from \\\"../interfaces/balancer/BalancerV2.sol\\\";\\n\\n// Note Oracle 0x9d43ccb1aD7E0081cC8A8F1fd54D16E54A637E30\\ninterface IOracle {\\n    /**\\n     * @notice Computes the current strike price of the option\\n     * @return price The strike price in terms of the payment token, scaled by 18 decimals.\\n     * For example, if the payment token is $2 and the strike price is $4, the return value\\n     * would be 2e18.\\n     */\\n    function getPrice() external view returns (uint256 price);\\n}\\n\\n// Note oLIT 0x627fee87d0D9D2c55098A06ac805Db8F98B158Aa\\ninterface IOLit {\\n    /**\\n     * @notice Exercises options tokens to purchase the underlying tokens.\\n     * @dev The options tokens are not burnt but sent to address(0) to avoid messing up the\\n     * inflation schedule.\\n     * The oracle may revert if it cannot give a secure result.\\n     * @param amount The amount of options tokens to exercise\\n     * @param maxPaymentAmount The maximum acceptable amount to pay. Used for slippage protection.\\n     * @param recipient The recipient of the purchased underlying tokens\\n     * @param deadline The Unix timestamp (in seconds) after which the call will revert\\n     * @return paymentAmount The amount paid to the treasury to purchase the underlying tokens\\n     */\\n    function exercise(\\n        uint256 amount,\\n        uint256 maxPaymentAmount,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 paymentAmount);\\n}\\n\\ninterface IFlashLoanSimpleReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed asset\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has approved the Pool to pull the total amount\\n     * @param asset The address of the flash-borrowed asset\\n     * @param amount The amount of the flash-borrowed asset\\n     * @param premium The fee of the flash-borrowed asset\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @notice Allows smart contracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     * 0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n}\\n\\n/**\\n * @title   FlashOptionsExerciser\\n * @author  LiquisFinance\\n * @notice  Allows for claiming oLIT from RewardPools, exercise it and lock LIT received.\\n * @dev     Implements AaveFlashloan in order to facilitate the conversion in one step.\\n */\\ncontract FlashOptionsExerciser is IFlashLoanSimpleReceiver {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public owner;\\n    address public immutable operator;\\n    address public immutable liqLit;\\n    address public immutable litDepositorHelper;\\n    address public immutable lockerRewards;\\n    address public immutable liqLocker;\\n\\n    address public immutable balVault = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    address public immutable lit = 0xfd0205066521550D7d7AB19DA8F72bb004b4C341;\\n    address public immutable olit = 0x627fee87d0D9D2c55098A06ac805Db8F98B158Aa;\\n    address public immutable olitOracle = 0x9d43ccb1aD7E0081cC8A8F1fd54D16E54A637E30;\\n    address public immutable weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public immutable aavePool = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n\\n    uint16 internal referralCode; // Aave referral code\\n\\n    uint256 public constant basisOne = 10000;\\n    bytes32 internal constant balancerPoolId = 0x9232a548dd9e81bac65500b5e0d918f8ba93675c000200000000000000000423;\\n\\n    struct LocalVariablesFlashLoan {\\n        uint256 olitAmount;\\n        uint256 amountToRepay;\\n        uint256 price;\\n        uint256 amountIn;\\n        uint256 maxAmountIn;\\n        uint256 amountNeeded;\\n        uint256 wethBal;\\n        uint256 maxGrossSlippage;\\n    }\\n\\n    event OwnerUpdated(address newOwner);\\n    event SetReferralCode(uint16 referralCode);\\n\\n    /**\\n     * @param _liqLit ERC20 token minted when locking LIT to veLIT in VoterProxy through crvDepositor.\\n     * @param _operator Booster main deposit contract; keeps track of pool info & user deposits; distributes rewards.\\n     * @param _litDepositorHelper Converts LIT -> balBPT and then wraps to liqLIT via the crvDepositor.\\n     * @param _lockerRewards BaseRewardPool where staking token is liqLIT\\n     * @param _liqLocker LiqLocker contract address\\n     */\\n    constructor(\\n        address _liqLit,\\n        address _operator,\\n        address _litDepositorHelper,\\n        address _lockerRewards,\\n        address _liqLocker\\n    ) {\\n        liqLit = _liqLit;\\n        operator = _operator;\\n        litDepositorHelper = _litDepositorHelper;\\n        lockerRewards = _lockerRewards;\\n        liqLocker = _liqLocker;\\n\\n        owner = msg.sender;\\n\\n        IERC20(weth).safeApprove(olit, type(uint256).max);\\n        IERC20(lit).safeApprove(balVault, type(uint256).max);\\n\\n        IERC20(lit).safeApprove(litDepositorHelper, type(uint256).max);\\n\\n        emit OwnerUpdated(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Update the contract owner\\n     * @param _owner the new owner\\n     * @dev Owner is responsible for setting initial config and updating operational params\\n     */\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        owner = _owner;\\n\\n        emit OwnerUpdated(_owner);\\n    }\\n\\n    /**\\n     * @notice User converts their olit into liqLit, sends it back to the user or stakes it in liqLit staking\\n     * @param _amount The amount of oLIT to exercise and lock\\n     * @param _stake Stake liqLit into the liqLit staking rewards pool\\n     * @param _minExchangeRate The minimal accepted oLIT to BAL-20WETH-80LIT exchange rate\\n     * @return claimed The amount of BAL-20WETH-80LIT claimed and locked\\n     */\\n    function exerciseAndLock(\\n        uint256 _amount,\\n        bool _stake,\\n        uint256 _minExchangeRate\\n    ) external returns (uint256 claimed) {\\n        IERC20(olit).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // convert oLIT to LIT by exercising the option\\n        _exerciseOptions(_amount);\\n\\n        // convert lit to liqLit, send it to sender or stake it in liqLit staking\\n        claimed = _convertLitToLiqLit(_amount, _minExchangeRate, _stake);\\n    }\\n\\n    /**\\n     * @notice User claims their olit from different pools, converts into lit and sends it back to the user\\n     * @param _pids Booster pools ids array to claim rewards from\\n     * @param _locker Boolean that indicates if the user is staking in lockerRewards (BaseRewardPool)\\n     * @param _liqLocker Boolean that indicates if the user is locking Liq in LiqLocker\\n     * @param _minExchangeRate The minimal accepted oLIT to BAL-20WETH-80LIT exchange rate\\n     * @return claimed The amount of LIT claimed and sent to caller\\n     */\\n    function claimAndExercise(\\n        uint256[] memory _pids,\\n        bool _locker,\\n        bool _liqLocker,\\n        uint256 _minExchangeRate\\n    ) external returns (uint256 claimed) {\\n        uint256 olitAmount = 0;\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            IBooster.PoolInfo memory pool = IBooster(operator).poolInfo(_pids[i]);\\n            // claim all the rewards, only olit is sent here, the rest directly to sender\\n            olitAmount += IBaseRewardPool(pool.crvRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_locker) {\\n            olitAmount += IBaseRewardPool(lockerRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_liqLocker) {\\n            olitAmount += ILiqLocker(liqLocker).getRewardFor(msg.sender);\\n        }\\n\\n        // convert oLIT to LIT by exercising the option\\n        _exerciseOptions(olitAmount);\\n\\n        // send lit to sender\\n        claimed = _transferLitToSender(olitAmount, _minExchangeRate);\\n    }\\n\\n    /**\\n     * @notice User claims their olit from pool, converts into liqLit and sends it back to the user\\n     * @param _pids Booster pools ids array to claim rewards from\\n     * @param _locker Boolean that indicates if the user is staking in lockerRewards (BaseRewardPool)\\n     * @param _liqLocker Boolean that indicates if the user is locking Liq in LiqLocker\\n     * @param _stake Stake liqLit into the liqLit staking rewards pool\\n     * @param _minExchangeRate The minimal accepted oLIT to BAL-20WETH-80LIT exchange rate\\n     * @return claimed The amount of BAL-20WETH-80LIT rewards claimed and locked\\n     */\\n    function claimAndLock(\\n        uint256[] memory _pids,\\n        bool _locker,\\n        bool _liqLocker,\\n        bool _stake,\\n        uint256 _minExchangeRate\\n    ) external returns (uint256 claimed) {\\n        uint256 olitAmount = 0;\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            IBooster.PoolInfo memory pool = IBooster(operator).poolInfo(_pids[i]);\\n            // claim all the rewards, only olit is sent here, the rest directly to sender\\n            olitAmount += IBaseRewardPool(pool.crvRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_locker) {\\n            olitAmount += IBaseRewardPool(lockerRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_liqLocker) {\\n            olitAmount += ILiqLocker(liqLocker).getRewardFor(msg.sender);\\n        }\\n\\n        // convert oLIT to LIT by exercising the option\\n        _exerciseOptions(olitAmount);\\n\\n        // convert lit to liqLit, send it to sender or stake it in liqLit staking\\n        claimed = _convertLitToLiqLit(olitAmount, _minExchangeRate, _stake);\\n    }\\n\\n    /**\\n     * @notice Withdraw Bunni LpTokens, claim oLIT, convert into liqLit and sends it back to the user\\n     * @param _pids Booster pools ids array to claim rewards from\\n     * @param _locker Boolean that indicates if the user is staking in lockerRewards (BaseRewardPool)\\n     * @param _liqLocker Boolean that indicates if the user is locking Liq in LiqLocker\\n     * @param _stake Stake liqLit into the liqLit staking rewards pool\\n     * @param _minExchangeRate The minimal accepted oLIT to BAL-20WETH-80LIT exchange rate\\n     * @return claimed The amount of BAL-20WETH-80LIT rewards claimed and locked\\n     * @dev owner needs to first approve this contract as spender on the rewards pool\\n     */\\n    function withdrawAndLock(\\n        uint256[] memory _pids,\\n        uint256[] memory _amounts,\\n        bool _locker,\\n        bool _liqLocker,\\n        bool _stake,\\n        uint256 _minExchangeRate\\n    ) external returns (uint256 claimed) {\\n        require(_pids.length == _amounts.length, \\\"array length missmatch\\\");\\n\\n        uint256 olitAmount = 0;\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            IBooster.PoolInfo memory pool = IBooster(operator).poolInfo(_pids[i]);\\n            // sender will receive the Bunni LpTokens, already unwrapped\\n            IRewardPool4626(pool.crvRewards).withdraw(_amounts[i], msg.sender, msg.sender);\\n            // claim all the rewards, only oLIT is sent here, the rest directly to sender\\n            olitAmount += IBaseRewardPool(pool.crvRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_locker) {\\n            olitAmount += IBaseRewardPool(lockerRewards).getRewardFor(msg.sender, true);\\n        }\\n\\n        if (_liqLocker) {\\n            olitAmount += ILiqLocker(liqLocker).getRewardFor(msg.sender);\\n        }\\n\\n        // convert oLIT to LIT by exercising the option\\n        _exerciseOptions(olitAmount);\\n\\n        // convert lit to liqLit, send it to sender or stake it in liqLit staking\\n        claimed = _convertLitToLiqLit(olitAmount, _minExchangeRate, _stake);\\n    }\\n\\n    /**\\n     * @notice User claims their olit from pool, converts into liqLit and sends it back to the user\\n     * @param account The account for which to query earned rewards\\n     * @param _pids Booster pools ids array to claim rewards from\\n     * @param _locker Boolean that indicates if the user is staking in lockerRewards (BaseRewardPool)\\n     * @param _liqLocker Boolean that indicates if the user is locking Liq in LiqLocker\\n     * @return earned_ The amount of oLIT earned\\n     * @dev Can be used to compute _minExchangeRate among other things\\n     */\\n    function earned(\\n        address account,\\n        uint256[] memory _pids,\\n        bool _locker,\\n        bool _liqLocker\\n    ) external view returns (uint256 earned_) {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            IBooster.PoolInfo memory pool = IBooster(operator).poolInfo(_pids[i]);\\n            earned_ += IBaseRewardPool(pool.crvRewards).earned(account);\\n        }\\n\\n        if (_locker) {\\n            earned_ += IBaseRewardPool(lockerRewards).earned(account);\\n        }\\n\\n        if (_liqLocker) {\\n            earned_ += ILiqLocker(liqLocker).earned(account, olit);\\n        }\\n    }\\n\\n    function _transferLitToSender(uint256 _olitAmount, uint256 _minExchangeRate) internal returns (uint256 litOut) {\\n        uint256 minOut = (_minExchangeRate * _olitAmount) / 1e18;\\n        litOut = IERC20(lit).balanceOf(address(this));\\n        require(litOut >= minOut, \\\"slipped\\\");\\n        if (litOut > 0) {\\n            IERC20(lit).safeTransfer(msg.sender, litOut);\\n        }\\n    }\\n\\n    function _convertLitToLiqLit(\\n        uint256 _olitAmount,\\n        uint256 _minExchangeRate,\\n        bool _stake\\n    ) internal returns (uint256 bptOut) {\\n        uint256 minOut = (_minExchangeRate * _olitAmount) / 1e18;\\n        uint256 claimed = IERC20(lit).balanceOf(address(this));\\n\\n        if (claimed > 0) {\\n            bptOut = _stake == true\\n                ? ILitDepositorHelper(litDepositorHelper).depositFor(\\n                    msg.sender,\\n                    claimed,\\n                    minOut,\\n                    true,\\n                    lockerRewards,\\n                    lit\\n                )\\n                : ILitDepositorHelper(litDepositorHelper).depositFor(\\n                    msg.sender,\\n                    claimed,\\n                    minOut,\\n                    true,\\n                    address(0),\\n                    lit\\n                );\\n        } // otherwise bptBalance = 0\\n    }\\n\\n    function _balancerSwap(\\n        uint256 _amountOutDesired,\\n        uint256 _maxAmountIn,\\n        IAsset _assetIn,\\n        IAsset _assetOut\\n    ) internal returns (uint256 tokensIn) {\\n        IBalancerVault.SingleSwap memory singleSwap = IBalancerVault.SingleSwap(\\n            balancerPoolId,\\n            IBalancerVault.SwapKind.GIVEN_OUT,\\n            _assetIn,\\n            _assetOut,\\n            _amountOutDesired, // amount of assetOut desired from the trade\\n            abi.encode(0)\\n        );\\n\\n        tokensIn = IBalancerVault(balVault).swap(\\n            singleSwap,\\n            IBalancerVault.FundManagement(address(this), false, payable(address(this)), false),\\n            _maxAmountIn, // limit amountIn we are willing to swap\\n            block.timestamp\\n        );\\n    }\\n\\n    function _exerciseOptions(uint256 _olitAmount) internal {\\n        if (_olitAmount == 0) return;\\n\\n        // amount of weth needed to process the olit, rounded up\\n        uint256 amount = (_olitAmount * IOracle(olitOracle).getPrice()) / 1e18 + 1;\\n\\n        // encode _olitAmount to avoid an extra balanceOf call in next function\\n        bytes memory userData = abi.encode(_olitAmount);\\n\\n        IPool(aavePool).flashLoanSimple(address(this), weth, amount, userData, referralCode);\\n    }\\n\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        require(msg.sender == aavePool, \\\"untrusted lender\\\");\\n        require(initiator == address(this), \\\"untrusted initiator\\\");\\n\\n        LocalVariablesFlashLoan memory vars;\\n\\n        vars.olitAmount = abi.decode(params, (uint256));\\n\\n        // exercise oLit option burns olitAmount of oLIT and mints olitAmount of LIT\\n        IOLit(olit).exercise(vars.olitAmount, amount, address(this), block.timestamp);\\n\\n        // currently flashloan fee = 5, but that could vary\\n        vars.amountToRepay = amount.add(premium);\\n\\n        vars.wethBal = IERC20(weth).balanceOf(address(this));\\n        if (vars.wethBal < vars.amountToRepay) {\\n            vars.amountNeeded = vars.amountToRepay.sub(vars.wethBal);\\n\\n            // it is fine to max by balance because we control for slippage with _minExchangeRate\\n            vars.maxAmountIn = vars.olitAmount;\\n\\n            // swap the necessary lit into weth, swap must start with a non-zero amount in\\n            _balancerSwap(vars.amountNeeded, vars.maxAmountIn, IAsset(lit), IAsset(weth));\\n        }\\n\\n        // repay the flashloan, aavePool will pull the tokens from the contract\\n        IERC20(asset).safeIncreaseAllowance(aavePool, vars.amountToRepay);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @param _referralCode The referral code for Aave Protocol.\\n     */\\n    function setReferralCode(uint16 _referralCode) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        referralCode = _referralCode;\\n        emit SetReferralCode(_referralCode);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBooster {\\n    struct FeeDistro {\\n        address distro;\\n        address rewards;\\n        bool active;\\n    }\\n\\n    function feeTokens(address _token) external returns (FeeDistro memory);\\n\\n    function earmarkFees(address _feeToken) external returns (bool);\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory poolInfo);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function lockRewards() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiqLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ILiqLocker {\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getRewardFor(address _account) external returns (uint256 rewardAmount);\\n\\n    function earned(address _account, address token) external view returns (uint256 userRewards);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IBaseRewardPool {\\n    function pid() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address _for, uint256 _amount) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function getRewardFor(address _account, bool _claimExtras) external returns (uint256 rewardAmount);\\n\\n    function processIdleRewards() external;\\n\\n    function queueNewRewards(uint256 _rewards) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardPool4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IRewardPool4626 {\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    function asset() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function processIdleRewards() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILitDepositorHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ILitDepositorHelper {\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minOut,\\n        bool _lock,\\n        address _stakeAddress,\\n        address _asset\\n    ) external payable returns (uint256 bptOut);\\n\\n    function depositFor(\\n        address _for,\\n        uint256 _amount,\\n        uint256 _minOut,\\n        bool _lock,\\n        address _stakeAddress,\\n        address _asset\\n    ) external payable returns (uint256 bptOut);\\n\\n    function convertLitToBpt(uint256 _amount, uint256 _minOut) external returns (uint256 bptOut);\\n\\n    function convertWethToBpt(uint256 _amount, uint256 _minOut) external returns (uint256 bptOut);\\n\\n    function convertEthToBpt(uint256 _minOut) external payable returns (uint256 bptOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/balancer/BalancerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalancerPool is IERC20 {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SwapRequest {\\n        SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    function getPoolId() external view returns (bytes32 poolId);\\n\\n    function symbol() external view returns (string memory s);\\n\\n    /**\\n     * @dev This function returns the appreciation of one BPT relative to the\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time.\\n     * Because of pre minted BPT, it uses `getVirtualSupply` instead of `totalSupply`.\\n     */\\n\\n    function getRate() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token rate for token. All token rates are fixed-point values with 18 decimals.\\n     * In case there is no rate provider for the provided token it returns 1e18.\\n     */\\n    function getTokenRate(IERC20 token) external view returns (uint256);\\n\\n    function getScalingFactor(IERC20 token) external view returns (uint256);\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getSwapEnabled() external view returns (bool);\\n\\n    function getOwner() external view returns (address);\\n}\\n\\ninterface IBalancerVault {\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT\\n    }\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    // encoding formats https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/balancer-js/src/pool-weighted/encoder.ts\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest calldata request\\n    ) external;\\n\\n    function getPool(bytes32 poolId) external view returns (address poolAddress, PoolSpecialization);\\n\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] calldata tokens,\\n            uint256[] calldata balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external returns (uint256 amountCalculated);\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IBalancerVaultHelper {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IBalancerVault.JoinPoolRequest memory request\\n    ) external view returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IBalancerVault.ExitPoolRequest memory request\\n    ) external view returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\\n/**\\n * @dev Interface for querying historical data from a Pool that can be used as a Price Oracle.\\n *\\n * This lets third parties retrieve average prices of tokens held by a Pool over a given period of time, as well as the\\n * price of the Pool share token (BPT) and invariant. Since the invariant is a sensible measure of Pool liquidity, it\\n * can be used to compare two different price sources, and choose the most liquid one.\\n *\\n * Once the oracle is fully initialized, all queries are guaranteed to succeed as long as they require no data that\\n * is not older than the largest safe query window.\\n */\\ninterface IBalancerTwapOracle {\\n    // The three values that can be queried:\\n    //\\n    // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\\n    //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\\n    //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\\n    //\\n    // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\\n    //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\\n    //\\n    // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\\n     * decimal fixed point values.\\n     */\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    /**\\n     * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\\n     */\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    /**\\n     * @dev Information for a Time Weighted Average query.\\n     *\\n     * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\\n     * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\\n     * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\\n     */\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    /**\\n     * @dev Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be\\n     * able to produce a result and not revert.\\n     *\\n     * If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this\\n     * value for 'safe' queries.\\n     */\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the accumulators corresponding to each of `queries`.\\n     */\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        returns (int256[] memory results);\\n\\n    /**\\n     * @dev Information for an Accumulator query.\\n     *\\n     * Each query estimates the accumulator at a time `ago` seconds ago.\\n     */\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n}\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liqLit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_litDepositorHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockerRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liqLocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"SetReferralCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_locker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liqLocker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"}],\"name\":\"claimAndExercise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_locker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liqLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"}],\"name\":\"claimAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_locker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liqLocker\",\"type\":\"bool\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"}],\"name\":\"exerciseAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqLit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"litDepositorHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olitOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_referralCode\",\"type\":\"uint16\"}],\"name\":\"setReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_locker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liqLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"}],\"name\":\"withdrawAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlashOptionsExerciser", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000003c6f0ca0363652398abfb08d154f114e61c4ad8000000000000000000000000631e58246a88c3957763e1469cb52f93bc1ddcf20000000000000000000000004512c81c2a88ea83539b535988cbe2f454d373b50000000000000000000000007ea6930a9487ce8d039f7cc89432435e6d5acb23000000000000000000000000748a0f458b9e71061ca0ac543b984473f203e1cb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}