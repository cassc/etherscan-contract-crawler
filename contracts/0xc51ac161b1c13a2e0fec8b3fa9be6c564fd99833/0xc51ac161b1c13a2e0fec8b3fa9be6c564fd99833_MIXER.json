{"SourceCode": "/*\r\n\r\n   \u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584    \u2584\u2588  \u2580\u2588\u2588\u2588\u2588    \u2590\u2588\u2588\u2588\u2588\u2580    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \r\n \u2584\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588\u258c   \u2588\u2588\u2588\u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \r\n \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2588\u2588\u2588  \u2590\u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588 \r\n \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2580\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2580     \u2584\u2588\u2588\u2588\u2584\u2584\u2584      \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2580 \r\n \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2584     \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580     \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580   \r\n \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588    \u2590\u2588\u2588\u2588  \u2580\u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \r\n \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588   \u2584\u2588\u2588\u2588     \u2588\u2588\u2588\u2584    \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \r\n  \u2580\u2588   \u2588\u2588\u2588   \u2588\u2580  \u2588\u2580   \u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \r\n                                                     \u2588\u2588\u2588    \u2588\u2588\u2588 \r\n                   \r\n    \u2022 Telegram - https://t.me/MixerChain\r\n    \u2022 Twitter - https://twitter.com/MixerChain\r\n    \u2022 Website - https://mixerchain.site/\r\n    \u2022 Mixer - https://mixerchain.app/\r\n\r\n*/\r\n \r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n \r\n/**\r\n * ERC20 standard interface\r\n */\r\n \r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * Basic access control mechanism\r\n */\r\n \r\nabstract contract Ownable {\r\n    address internal owner;\r\n    address private _previousOwner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!YOU ARE NOT THE OWNER\"); _;\r\n    }\r\n \r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n \r\n/**\r\n * Router Interfaces\r\n */\r\n \r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n \r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\n/**\r\n * Token Contract Code\r\n */\r\n \r\ncontract MIXER is ERC20, Ownable {\r\n    // -- Mappings --\r\n    mapping(address => bool) public _blacklisted;\r\n    mapping(address => bool) private _whitelisted;\r\n    mapping(address => bool) public _automatedMarketMakers;\r\n    mapping(address => bool) private _isLimitless;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    // -- Basic Token Information --\r\n    string constant _name = \"Mixer Chain\";\r\n    string constant _symbol = \"MIXER\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 private _totalSupply = 1_000_000 * 10 ** _decimals;\r\n \r\n \r\n    // -- Transaction & Wallet Limits --\r\n    uint256 public maxBuyPercentage;\r\n    uint256 public maxSellPercentage;\r\n    uint256 public maxWalletPercentage;\r\n \r\n    uint256 private maxBuyAmount;\r\n    uint256 private maxSellAmount;\r\n    uint256 private maxWalletAmount;\r\n \r\n    // -- Contract Variables --\r\n    address[] private sniperList;\r\n    uint256 tokenTax;\r\n    uint256 transferFee;\r\n    uint256 private targetLiquidity = 50;\r\n \r\n    // -- Fee Structs --\r\n    struct BuyFee {\r\n        uint256 liquidityFee;\r\n        uint256 developerFee;\r\n        uint256 marketingFee;\r\n        uint256 total;\r\n    }\r\n \r\n    struct SellFee {\r\n        uint256 liquidityFee;\r\n        uint256 developerFee;\r\n        uint256 marketingFee;\r\n        uint256 total;\r\n    }\r\n \r\n    BuyFee public buyFee;\r\n    SellFee public sellFee;\r\n \r\n    // -- Addresses --\r\n    address public _exchangeRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n \r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n \r\n    address public developerReceiver = (msg.sender);\r\n    address public marketingReceiver = (msg.sender);\r\n \r\n    IDEXRouter public router;\r\n    address public pair;\r\n \r\n    // -- Misc Variables --\r\n    bool public antiSniperMode = true;  // AntiSniper active at launch by default\r\n    bool private _addingLP;\r\n    bool private inSwap;\r\n    bool private _initialDistributionFinished;\r\n \r\n    // -- Swap Variables --\r\n    bool public swapEnabled = true;\r\n    uint256 private swapThreshold = _totalSupply / 1000;\r\n \r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    constructor () Ownable(msg.sender) {\r\n \r\n        // Initialize Uniswap Pair\r\n        router = IDEXRouter(_exchangeRouterAddress);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _automatedMarketMakers[pair]=true;\r\n \r\n        // Set Initial Buy Fees -- Base 1000 Set 10 for 1%\r\n        buyFee.liquidityFee = 0; \r\n        buyFee.developerFee = 50; \r\n        buyFee.marketingFee = 0;\r\n\r\n        buyFee.total = buyFee.liquidityFee + buyFee.developerFee + buyFee.marketingFee;\r\n \r\n        // Set Initial Sell Fees -- Base 1000 Set 10 for 1%\r\n        sellFee.liquidityFee = 0; \r\n        sellFee.developerFee = 250; \r\n        sellFee.marketingFee = 0;\r\n\r\n        sellFee.total = sellFee.liquidityFee + sellFee.developerFee + sellFee.marketingFee;\r\n \r\n        // Set Initial Buy, Sell & Wallet Limits -- Base 1000 Set 10 for 1%\r\n        maxBuyPercentage = 10; \r\n        maxBuyAmount = _totalSupply /1000 * maxBuyPercentage;\r\n\r\n        maxSellPercentage = 5; \r\n        maxSellAmount = _totalSupply /1000 * maxSellPercentage;\r\n\r\n        maxWalletPercentage = 10; \r\n        maxWalletAmount = _totalSupply /1000 * maxWalletPercentage;\r\n \r\n        // Exclude from fees & limits\r\n        _isLimitless[owner] = _isLimitless[address(this)] = true;\r\n \r\n        // Mint _totalSupply to owner address\r\n        _balances[owner] = _totalSupply;\r\n        emit Transfer(address(0x0), owner, _totalSupply);\r\n    }\r\n \r\n \r\n    ///////////////////////////////////////// -- Setter Functions -- /////////////////////////////////////////\r\n \r\n        // Use 10 to set 1% -- Base 1000 for easier fine adjust\r\n    function ownerSetLimits(uint256 _maxBuyPercentage, uint256 _maxSellPercentage, uint256 _maxWalletPercentage) external onlyOwner {\r\n        maxBuyPercentage = _maxBuyPercentage;           \r\n        maxBuyAmount = _totalSupply /1000 * maxBuyPercentage;\r\n\r\n        maxSellPercentage = _maxSellPercentage;         \r\n        maxSellAmount = _totalSupply /1000 * maxSellPercentage;\r\n\r\n        maxWalletPercentage= _maxWalletPercentage;      \r\n        maxWalletAmount = _totalSupply /1000 * maxWalletPercentage;\r\n    }\r\n \r\n    function ownerSetInitialDistributionFinished() external onlyOwner {\r\n        _initialDistributionFinished = true;\r\n    }\r\n \r\n    function ownerSetLimitlessAddress(address _addr, bool _status) external onlyOwner {\r\n        _isLimitless[_addr] = _status;\r\n    }\r\n \r\n    function ownerSetSwapBackSettings(bool _enabled, uint256 _percentageBase1000) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _totalSupply / 1000 * _percentageBase1000;\r\n    }\r\n \r\n    function ownerSetTargetLiquidity(uint256 target) external onlyOwner {\r\n        targetLiquidity = target;\r\n    }\r\n       // Use 10 to set 1% -- Base 1000 for easier fine adjust\r\n    function ownerUpdateBuyFees (uint256 _liquidityFee, uint256 _developerFee, uint256 _marketingFee) external onlyOwner {\r\n        buyFee.liquidityFee = _liquidityFee;\r\n        buyFee.developerFee = _developerFee;\r\n        buyFee.marketingFee = _marketingFee;\r\n        buyFee.total = buyFee.liquidityFee + buyFee.developerFee + buyFee.marketingFee;\r\n    }\r\n        // Use 10 to set 1% -- Base 1000 for easier fine adjust\r\n    function ownerUpdateSellFees (uint256 _liquidityFee, uint256 _developerFee, uint256 _marketingFee) external onlyOwner {\r\n        sellFee.liquidityFee = _liquidityFee;\r\n        sellFee.developerFee = _developerFee;\r\n        sellFee.marketingFee = _marketingFee;\r\n        sellFee.total = sellFee.liquidityFee + sellFee.developerFee + sellFee.marketingFee;\r\n    }\r\n        // Use 10 to set 1% -- Base 1000 for easier fine adjust\r\n    function ownerUpdateTransferFee (uint256 _transferFee) external onlyOwner {\r\n        transferFee = _transferFee;\r\n    }\r\n \r\n    function setReceivers (address _developer, address _marketing) external onlyOwner {\r\n        developerReceiver = _developer;\r\n        marketingReceiver = _marketing;\r\n    }\r\n \r\n    function ownerAirDropWallets(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner{\r\n        require(airdropWallets.length < 100, \"Can only airdrop 100 wallets per txn due to gas limits\");\r\n        for(uint256 i = 0; i < airdropWallets.length; i++){\r\n            address wallet = airdropWallets[i];\r\n            uint256 amount = (amounts[i] * 10**_decimals);\r\n            _transfer(msg.sender, wallet, amount);\r\n        }\r\n    }\r\n \r\n    function manageBlacklistedAccounts(address sniper) external onlyOwner {\r\n        _blacklisted[sniper] = false;\r\n    }\r\n \r\n    function addNewMarketMaker(address newAMM) external onlyOwner {\r\n        _automatedMarketMakers[newAMM]=true;\r\n        _isLimitless[newAMM]=true;\r\n    }\r\n \r\n    function setAntiSniperMode(bool value) external onlyOwner {\r\n        antiSniperMode = value;\r\n    }\r\n \r\n    function clearStuckBalance() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(owner).transfer(contractETHBalance);\r\n    }\r\n \r\n    function clearStuckToken(address _token) public onlyOwner {\r\n        uint256 _contractBalance = ERC20(_token).balanceOf(address(this));\r\n        payable(developerReceiver).transfer(_contractBalance);\r\n    }\r\n    ///////////////////////////////////////// -- Getter Functions -- /////////////////////////////////////////\r\n \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n \r\n    function showSniperList() public view returns(address[] memory){\r\n        return sniperList;\r\n    }\r\n \r\n    function showSniperListLength() public view returns(uint256){\r\n        return sniperList.length;\r\n    }\r\n \r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy * (balanceOf(pair) * (2)) / (getCirculatingSupply());\r\n    }\r\n \r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n \r\n    ///////////////////////////////////////// -- Internal Functions -- /////////////////////////////////////////\r\n \r\n    function _transfer(address sender,address recipient,uint256 amount) private {\r\n        require(sender!=address(0)&&recipient!=address(0),\"Cannot be address(0).\");\r\n        bool isBuy=_automatedMarketMakers[sender];\r\n        bool isSell=_automatedMarketMakers[recipient];\r\n        bool isExcluded=_isLimitless[sender]||_isLimitless[recipient]||_addingLP;\r\n \r\n        if(isExcluded)_transferExcluded(sender,recipient,amount);\r\n        else { require(_initialDistributionFinished);\r\n            // Punish for Snipers\r\n            if(antiSniperMode)_punishSnipers(sender,recipient,amount);\r\n            // Buy Tokens\r\n            else if(isBuy)_buyTokens(sender,recipient,amount);\r\n            // Sell Tokens\r\n            else if(isSell) {\r\n                // Swap & Liquify\r\n                if (shouldSwapBack()) {swapBack();}\r\n                _sellTokens(sender,recipient,amount);\r\n            } else {\r\n                // P2P Transfer\r\n                require(!_blacklisted[sender]&&!_blacklisted[recipient]);\r\n                require(balanceOf(recipient)+amount<=maxWalletAmount, \"Total amount exceed wallet limit\");\r\n                _P2PTransfer(sender,recipient,amount);\r\n            }\r\n        }\r\n    }\r\n \r\n    function _punishSnipers(address sender,address recipient,uint256 amount) private {\r\n        require(!_blacklisted[recipient]);\r\n        require(amount <= maxBuyAmount, \"Buy exceeds limit\");\r\n        tokenTax = amount*20/100;\r\n        _blacklisted[recipient]=true;\r\n        sniperList.push(address(recipient));\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n \r\n    function _buyTokens(address sender,address recipient,uint256 amount) private {\r\n        require(!_blacklisted[recipient]);\r\n        require(amount <= maxBuyAmount, \"Buy exceeds limit\");\r\n        require(balanceOf(recipient)+amount<=maxWalletAmount, \"Total amount exceed wallet limit\");\r\n        if(!_whitelisted[recipient]){\r\n        tokenTax = amount*buyFee.total/1000;}\r\n        else tokenTax = 0;\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n    function _sellTokens(address sender,address recipient,uint256 amount) private {\r\n        require(!_blacklisted[sender]);\r\n        require(amount <= maxSellAmount);\r\n        if(!_whitelisted[sender]){\r\n        tokenTax = amount*sellFee.total/1000;}\r\n        else tokenTax = 0;\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n \r\n    function _P2PTransfer(address sender,address recipient,uint256 amount) private {\r\n        tokenTax = amount * transferFee/1000;\r\n        if( tokenTax > 0) {_transferIncluded(sender,recipient,amount,tokenTax);}\r\n        else {_transferExcluded(sender,recipient,amount);}\r\n    }\r\n \r\n    function _transferExcluded(address sender,address recipient,uint256 amount) private {\r\n        _updateBalance(sender,_balances[sender]-amount);\r\n        _updateBalance(recipient,_balances[recipient]+amount);\r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n \r\n    function _transferIncluded(address sender,address recipient,uint256 amount,uint256 taxAmount) private {\r\n        uint256 newAmount = amount-tokenTax;\r\n        _updateBalance(sender,_balances[sender]-amount);\r\n        _updateBalance(address(this),_balances[address(this)]+taxAmount);\r\n        _updateBalance(recipient,_balances[recipient]+newAmount);\r\n        emit Transfer(sender,recipient,newAmount);\r\n        emit Transfer(sender,address(this),taxAmount);\r\n    }\r\n \r\n    function _updateBalance(address account,uint256 newBalance) private {\r\n        _balances[account] = newBalance;\r\n    }\r\n \r\n    function shouldSwapBack() private view returns (bool) {\r\n        return\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }   \r\n \r\n    function swapBack() private swapping {\r\n        uint256 toSwap = balanceOf(address(this));\r\n \r\n        uint256 totalLPTokens=toSwap*(sellFee.liquidityFee + buyFee.liquidityFee)/(sellFee.total + buyFee.total);\r\n        uint256 tokensLeft=toSwap-totalLPTokens;\r\n        uint256 LPTokens=totalLPTokens/2;\r\n        uint256 LPETHTokens=totalLPTokens-LPTokens;\r\n        toSwap=tokensLeft+LPETHTokens;\r\n        uint256 oldETH=address(this).balance;\r\n        _swapTokensForETH(toSwap);\r\n        uint256 newETH=address(this).balance-oldETH;\r\n        uint256 LPETH=(newETH*LPETHTokens)/toSwap;\r\n        _addLiquidity(LPTokens,LPETH);\r\n        uint256 remainingETH=address(this).balance-oldETH;\r\n        _distributeETH(remainingETH);\r\n    }\r\n \r\n    function _distributeETH(uint256 remainingETH) private {\r\n        uint256 marketingFee = (buyFee.marketingFee + sellFee.marketingFee);\r\n        uint256 developerFee = (buyFee.developerFee + sellFee.developerFee);\r\n        uint256 totalFee = (marketingFee + developerFee);\r\n \r\n        uint256 amountETHmarketing = remainingETH * (marketingFee) / (totalFee);\r\n        uint256 amountETHdeveloper = remainingETH * (developerFee) / (totalFee);\r\n \r\n        if(amountETHdeveloper > 0){\r\n        (bool developerSuccess, /* bytes memory data */) = payable(developerReceiver).call{value: amountETHdeveloper, gas: 30000}(\"\");\r\n        require(developerSuccess, \"receiver rejected ETH transfer\"); }\r\n \r\n        if(amountETHmarketing > 0){\r\n        (bool marketingSuccess, /* bytes memory data */) = payable(marketingReceiver).call{value: amountETHmarketing, gas: 30000}(\"\");\r\n        require(marketingSuccess, \"receiver rejected ETH transfer\"); }\r\n    }\r\n \r\n    function _swapTokensForETH(uint256 amount) private {\r\n        address[] memory path=new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function _addLiquidity(uint256 amountTokens,uint256 amountETH) private {\r\n        _addingLP=true;\r\n        router.addLiquidityETH{value: amountETH}(\r\n            address(this),\r\n            amountTokens,\r\n            0,\r\n            0,\r\n            developerReceiver,\r\n            block.timestamp\r\n        );\r\n        _addingLP=false;\r\n    }\r\n \r\n/**\r\n * IERC20\r\n */\r\n \r\n    receive() external payable { }\r\n \r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account];}\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender];}\r\n \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 allowance_ = _allowances[sender][msg.sender];\r\n        require(allowance_ >= amount);\r\n \r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_automatedMarketMakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_exchangeRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAMM\",\"type\":\"address\"}],\"name\":\"addNewMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSniperMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"manageBlacklistedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ownerAirDropWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerSetInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ownerSetLimitlessAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWalletPercentage\",\"type\":\"uint256\"}],\"name\":\"ownerSetLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBase1000\",\"type\":\"uint256\"}],\"name\":\"ownerSetSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"ownerSetTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAntiSniperMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSniperList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSniperListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MIXER", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://775b398760c47e96f9f62c822a41ef62f0ef0fa2d45e439704079375f97712b9"}