{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: yoooooooooooo.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n    /* \r\n                                                YOOOOOOOOOOOOOOOOO\r\n    \t\ttelegram: t.me/yooooooooo000000000\r\n\t    website: yoooooooooooooooooo.wtf\r\n   twitter: https://twitter.com/ELONMUSK\r\n   \r\n7777777777777777777777777777YJJJJJJJJJJJJJJJJJJJJJJJJJJJJ555555555555555555555555555555555555Y777777\r\n7777777777777777777777777777YJJJJJJJJJJJJJJJJJJJJJJJJJJJJ555555555555555555555555555555555555Y777777\r\n7777777777777777777777777777YJJJJJJJJJJJJJJJJJJJJJJJJJJJJ555555555555555555555555555555555555Y777777\r\n7777777777777777777777777777YJJJJJJJJJJJJJJJJJJJJJJJJJJJJ555555555555555555555555555555555555Y777777\r\n77777!~~!77777~^~!77!~~^~~!?YYJ?7!!!7?JJJJ?7!!!7?JJJJ?7!!7?J5555YJ?77?J55555J?77?JY5555Y?777?J777777\r\n7777:^YY^:!7~.!Y?.::!?Y5J!:^J!:~?Y5Y7^^?7^^7Y5Y?^^??^^7J5Y?~^?Y~^!JY5J!:7Y!^!?Y5J7^!Y7^~?Y5Y7^:!7777\r\n7777.^&@&7.^ J@@P ~B@@BG&@B^ ^P@@BG&@#! .5@@#G#@&? .J&@&GB@@Y..7#@&GG@@G:.~B@@GG&@B^.:P@@BG#@&!.!777\r\n77777::G@@J Y@@P :&@#^:.^@@P B@&!:^.#@# 5@@?.^ G@@:?@@5.^ Y@@!~@@G:~.7@@J:&@#^^:^&@P B@&!:^.#@#.^777\r\n777777^.5@@B@@5. ~@@P ^.^&@5.&@B ^^.#@B.B@&::~ P@&:5@@! ! J@@~7@@J 7.!@@?^@@P !:^&@P.&@# ~~.B@#.^777\r\n7777777~ Y@@@5 ~~.5@@GY5&@B: ?@@BYY#@#~ !&@#YYB@&7 ^B@&5YG@@Y .G@@PYP@@P. Y@@GY5&@B: ?@@BYY#@#~.!777\r\n7777777~ J@@5 ~77~:~YGGG57:~?^^JPGG5?:~?^^?PGGP?^^?~:75GGPJ~^J7:!YGGGY!:??^~YPGG57:!J^~JPGG5?^:77777\r\n777777! ?@@5 ~?????!~~~~~!7?YY?!~~~!7?JJJ?7!~~~!?JJJJ7!~~!7J5555J7!!!7J5555J7!!!7?Y555J7!!!!?J777777\r\n777777::&@G.^JJJYJJYYYYYYYYYYYJYYJJJJJJJJJYYYYYYJJJJJJJJY555555555555555555555555555555555555Y777777\r\n777777~:~!:^7?JJJJJJJJJJJJJJJJJJJJJJJJJJJYYYYYYYYYYYYYYYY555555555555555555555555555555555555Y777777\r\n77777777!!777?JJJJJJJJJJJJJJJJJJJJJJJJYYYYYYYYY55555YYYY55PPPPPPPPP55555PPPPPPPPPP55555555555Y777777\r\n7777777777777?JJJJJJJJJJJJJJJJJJJJJJYYYYYY555555YYJ777777777777777777777777777777777777777?JJJ777777\r\n7777777777777?JJYYJJJJJJJJJJJJJJJJYYYYYYY55555YYJJJ7777777777!!!!!!!!!!!!!!!!!!!!!!!!!!777?JJJ777777\r\n7777777777777?JJYYJYYYYYYYYJYYYYYYYYYYYY5555555YYJJ777777777777777777777!!!7777777!!!77777?JJJ777777\r\n77777!^^!777?7!!7JYJ?7!!!7JYYYY?7!!!7J5555Y?7777?JJ77!~^^^~!7777!~^^^^~!777!~~^^^~!7777!~~~!7?777777\r\n7777:^YY^:!?!.75?.^^!J55Y7:~J7^~J55Y?^^Y?^~?Y55?~:7!:^7Y55J~.~!::7Y55Y!:^!^:!J55Y7::!^:~J555?^:!7777\r\n7777:^#@&7.^ Y@@P ~B@@GP&@#^ ^G@@GP#@&! :5@@BPB@@J .Y&@#PG@@5. ?#@&PG@@G: !B@@GP&@#^ ^G@@BP#@&!.!777\r\n77777::G@@Y Y@@5 ^&@B:^:^&@P.B@&~:^.#@# P@@7.~ P@@:?@@Y.: J@@!~@@P.: !@@J:&@#::.^&@P B@&~.:.#@#.^777\r\n777777^.5@@B@@5. ~@@P ~:^&@5.&@B ^^.#@B.B@&:.^ P@&:5@@! ^ Y@@~7@@J ^ 7@@?^@@P :.^&@5.&@#.::.#@B !YYY\r\n7777777~ J@@@Y 7! Y@@GYP&@G: ?&@B55#@#~ ~#@#55B@&7 ^B@&PYG@@J .P@@GYG@@5. Y@@BYP&@G: ?&@#55#@#~:Y555\r\n7777777~ Y@@Y !YJ7:~JPGPY!:!7^^?5GG57:^!::75GG5?^^?^:7YGGPJ^:~~:!YPGPJ~.~~:~JPGPY!:^!:^?5GG57^!Y5555\r\n777777! J@@5 !JJJJJ7!~~~!7?JJJ?!~~~!~!777!~^^^^~7JY7!~^^^^~!7777~^^^^^~7777!^^^^^~77??7!~~!7JP555555\r\n777777::&@G.^?JJYYYYYYYYYYYYYYYYYYYY7!!!!77777777JJ77777777777777777777777777777777????JJYYPPG555555\r\n777777!:~!:^7?JJY55555555555555555557!!!!777!!7777777777777777777777777777777777??JYY55555Y?JG555555\r\n77777777!!777?JJY55555555555555555557!!!!7777777777777777777777777777777777777777?JYY5Y555J7?G555555\r\n7777777777777?JJY55555555555555555557!!!!7777777777777777777777777777777777777777?JYY55555Y?YG555555\r\n7777777777777?JJY55555555555555555557!!!77777777777777777777777777777777777777777?JY5555PPGGGG555555\r\n7777777777777?JJ55555555555555555555?!!777777777777777777777777777777777777777777?JY5PPPGBBBBG555555\r\n77777!^^~777?7!~7Y5YJ77!7?Y5555J77!77?YYYYJ7!!!7?YYYYJ7!!!!?YYYYJ7!!!!7JYYYY7^^^~!J5PPP5J??JYP555555\r\n7777:^55~.!?~.7PJ.^^7YPP5?^~Y7^!J5P5?^^J?^~J5PPJ~^JJ^~?5PPY!:?J~^7YPPY7:!Y!^7YPP5?^~5?^!J5P5?^^J5555\r\n!!!!:^#@@?.: Y@@5 !#@&PP&@#~ ^B@@G5#@&7 :P@@B5B@@J .Y@@B5G@@P. ?&@#PP&@B: !#@&P5#@#~ ^B@@G5B@&7.!7!!\r\n!!!!!:.P@@Y.5@@5 ^@@B:~::&@P.#@&~^~.#@#.P@@7:! P@@:J@@J.! J@@!!@@P.~.!@@J:&@B:!~:&@G.B@&~.:.B@#.:!!!\r\n!!!!!7^.Y@@#@@Y  ~@@P !:~@@5.&@#.^^:#@B B@&^:!.G@&.5@@!.! Y@@~7@@J !.7@@?^@@P 7^^&@5.&@#..::#@B ^!!!\r\n!!!!!!7~ J@@@Y ~!.J@@B5G@@P: 7&@#5P&@B^ ~#@&P5#@#! :G@@G5B@&? .5@@G5G@@Y..J@@B5P@@G: 7&@#PP&@B^.!!!!\r\n!!!!!!7~ Y@@Y ~7YJ^~?5PPJ!^7Y~^?5PPY!^!Y!^7YPP57^~Y7^!YPP5?^^J?^~J5P5J~^Y5~~?5PPJ!:^~:^75PPY!::!!!!!\r\n!!!!!!~ J@@Y ~77J55Y?777?J5555Y?7777JY555YJ7777?Y5555J7777?Y5555Y?77?J5GGGBPYJJJ~~!!!!!^^^^^~!!!!!!!\r\n!!!!!!::&@P ^777J55555555555555555555555555555555555555555555555PPPPGGGGGGGBB##B?!!!!!!!!!!!!!!!!!!!\r\n!!!!!!~:^~:^7777J55555555555555555555555555555555555555555555555PPPPPGGGGGGGBBBG7!!!!!!!!!!!!!!!!!!!\r\n!!!!!!!!!!!77777J5555555555555555555555555555555555555555555555PPPPPGGGGGGGBBBGJ7!!!!!!!!!!!!!!!!!!!\r\n!!!!!!!!!!!!7777J555555555555555555555555555555555555555555555PPPPPPGGGGGGGGB#GJ7!!!!!!!!!!!!!!!!!!!\r\n!!!!!!!!!!!!7777J5555555555555555555555555555555555555555555PPPPPPPGGGGGGGGGB#GJ7!!!!!!!!!!!!!!!!!!!\r\n7777777777777777J5555555555555555555555555555555555555PPPPPPPPPPGGGGGGGGGGGBB#BY7777!!!!!!!!!!!!!!!!\r\n\r\n    */\r\n    \r\ncontract CustomToken is ERC20 {\r\n    address public owner;\r\n    address public taxAddress; \r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => bool) public antiWhaleWhitelist;\r\n    uint256 public taxPercentage;\r\n    uint256 public whaleLimit; \r\n    address public uniswapPair; \r\n    bool public restrictContracts; \r\n    bool public tradingEnabled = false;\r\n\r\n    constructor() ERC20(\"yoooooooooooooooooo\", \"YOOOOOOOOO\") {\r\n        owner = msg.sender;\r\n        _mint(msg.sender, 1_000_000 * 10 ** 18); \r\n        whaleLimit = totalSupply() / 100; \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    modifier tradingRestriction() {\r\n        require(tradingEnabled || msg.sender == owner, \"Trading is not enabled\");\r\n        _;\r\n    }\r\n\r\n    modifier contractRestrictions() {\r\n        if (restrictContracts) {\r\n            require(msg.sender == tx.origin || msg.sender == uniswapPair, \"Smart contracts are restricted\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function setTaxAddress(address _taxAddress) external onlyOwner {\r\n        taxAddress = _taxAddress;\r\n    }\r\n\r\n    function setUniswapPair(address _pair) external onlyOwner {\r\n        uniswapPair = _pair;\r\n    }\r\n\r\n    function addToBlacklist(address _address) external onlyOwner {\r\n        blacklist[_address] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address _address) external onlyOwner {\r\n        blacklist[_address] = false;\r\n    }\r\n\r\n    function addToWhitelist(address _address) external onlyOwner {\r\n        antiWhaleWhitelist[_address] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _address) external onlyOwner {\r\n        antiWhaleWhitelist[_address] = false;\r\n    }\r\n\r\n    function setWhaleLimit(uint256 _limit) external onlyOwner {\r\n        whaleLimit = _limit;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 _percentage) external onlyOwner {\r\n        taxPercentage = _percentage;\r\n    }\r\n\r\n    function batchAddToBlacklist(address[] memory _addresses) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            blacklist[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function toggleContractRestrictions() external onlyOwner {\r\n        restrictContracts = !restrictContracts;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override contractRestrictions tradingRestriction returns (bool) {\r\n        require(!blacklist[msg.sender] && !blacklist[recipient], \"Address is blacklisted\");\r\n        require(balanceOf(recipient) + amount <= whaleLimit || antiWhaleWhitelist[recipient], \"Recipient would exceed the whale limit\");\r\n\r\n        uint256 tax = 0;\r\n        if ((msg.sender == uniswapPair || recipient == uniswapPair) && !antiWhaleWhitelist[msg.sender] && !antiWhaleWhitelist[recipient]) {\r\n            tax = (amount * taxPercentage) / 100;\r\n            super.transfer(taxAddress, tax);\r\n        }\r\n\r\n        super.transfer(recipient, amount - tax);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiWhaleWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchAddToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setWhaleLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CustomToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0da76c1eebeeb96acbaf1546fc5a3adf19d3c6de0ccc991762c120dc3d78e85"}