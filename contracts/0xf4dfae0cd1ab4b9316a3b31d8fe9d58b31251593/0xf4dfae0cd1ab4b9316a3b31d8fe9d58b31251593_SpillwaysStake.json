{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.20;\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract SpillwaysStake is Ownable(msg.sender) {\r\n\r\n    IERC20 public spillToken;\r\n    IERC20 public rewardToken;\r\n\r\n    uint256 public currentEpoch;\r\n    uint256 public totalStaked;\r\n    uint256 public totalRewardsClaimed;\r\n\r\n    uint256 private _antibottime;\r\n    bool private _paused;\r\n\r\n    struct Staker {\r\n        uint256 lastClaimedEpoch;\r\n        uint256 totalStakedAmount;\r\n        mapping(uint256 => StakeHistory[]) stakeHistory; // Mapping epoch to StakeHistory array\r\n    }\r\n\r\n    struct EpochData {\r\n        uint256 epochStart;\r\n        uint256 epochEnd;\r\n        uint256 epochRewardRate;\r\n    }\r\n\r\n    struct StakeHistory {\r\n        uint256 stakedAmount;\r\n        uint256 timeofStaking;\r\n    }\r\n\r\n    mapping(address => Staker) public stakers;\r\n    mapping(uint256 => EpochData) public epochData;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event Claimed(address indexed user, uint256 amount);\r\n    event Epoch(uint256 indexed epoch, uint256 epochStart, uint256 epochEnd, uint256 epochRewardRate);\r\n\r\n    constructor(address _spilAddress, address _rewardToken) {\r\n        spillToken = IERC20(_spilAddress);\r\n        rewardToken = IERC20(_rewardToken);\r\n        currentEpoch = 0;\r\n        epochData[currentEpoch] = EpochData(block.timestamp, block.timestamp, 0);\r\n        _antibottime = 2 days;\r\n        _paused = true;\r\n    }\r\n\r\n    modifier Active() {\r\n        require(!_paused, \"Contract is paused\");\r\n        require(currentEpoch > 0, \"Initial epoch not started\");\r\n        _;\r\n    }\r\n\r\n    function startInitial() external onlyOwner {\r\n        require(epochData[currentEpoch].epochEnd == epochData[currentEpoch].epochStart, \"Initial epoch already started\");\r\n        currentEpoch++;\r\n        epochData[currentEpoch] = EpochData(block.timestamp, block.timestamp, 0);\r\n        _paused = false;\r\n    }\r\n\r\n    function startNewEpoch(uint256 _rewards) external onlyOwner {\r\n        require(_rewards > 0, \"Rewards must be greater than 0\");\r\n        epochData[currentEpoch].epochEnd = block.timestamp;\r\n        if (totalStaked>0){\r\n            epochData[currentEpoch].epochRewardRate = (_rewards * 1e18)/totalStaked;\r\n        }else{\r\n            epochData[currentEpoch].epochRewardRate = 0;\r\n            emit Epoch(currentEpoch, epochData[currentEpoch].epochStart, epochData[currentEpoch].epochEnd, epochData[currentEpoch].epochRewardRate);\r\n            currentEpoch++;\r\n            epochData[currentEpoch] = EpochData(block.timestamp, block.timestamp, 0);\r\n            return;\r\n        }\r\n        emit Epoch(currentEpoch, epochData[currentEpoch].epochStart, epochData[currentEpoch].epochEnd, epochData[currentEpoch].epochRewardRate);\r\n        currentEpoch++;\r\n        require(rewardToken.transferFrom(msg.sender, address(this), _rewards), \"Reward transfer failed\");\r\n        epochData[currentEpoch] = EpochData(block.timestamp, block.timestamp, 0);\r\n    }\r\n\r\n    function balanceOf(address user) external view returns (uint256) {\r\n        return stakers[user].totalStakedAmount;\r\n    }\r\n\r\n    function setPaused(bool _paused_) external onlyOwner {\r\n        _paused = _paused_;\r\n    }\r\n\r\n    function setAntibotTime(uint256 _antibottime_) external onlyOwner {\r\n        _antibottime = _antibottime_;\r\n    }\r\n\r\n    function stakersInfo(address[] calldata users) external view returns (uint[][] memory) {\r\n        uint[][] memory stakersInfo_ = new uint[][](users.length);\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            stakersInfo_[i] = new uint[](2);\r\n            stakersInfo_[i][0] = stakers[users[i]].totalStakedAmount;\r\n            stakersInfo_[i][1] = stakers[users[i]].lastClaimedEpoch;\r\n        }\r\n        return stakersInfo_;\r\n    }\r\n\r\n    function stake(uint256 amount) external Active {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(spillToken.transferFrom(msg.sender, address(this), amount), \"Staking transfer failed\");\r\n        Staker storage staker = stakers[msg.sender];\r\n        uint256 lastClaimedEpoch = staker.lastClaimedEpoch;\r\n\r\n        if (staker.totalStakedAmount == 0) {\r\n            lastClaimedEpoch = currentEpoch - 1;\r\n        }else{\r\n            claim();\r\n        }\r\n        staker.stakeHistory[currentEpoch].push(StakeHistory(amount, block.timestamp));\r\n        staker.totalStakedAmount = staker.totalStakedAmount+amount;\r\n        staker.lastClaimedEpoch = currentEpoch - 1;\r\n        totalStaked = totalStaked+amount;\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) external Active {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        Staker storage staker = stakers[msg.sender];\r\n        require(staker.totalStakedAmount >= amount, \"Insufficient staked amount\");\r\n        claim();\r\n        staker.totalStakedAmount = staker.totalStakedAmount - amount;\r\n        staker.lastClaimedEpoch = currentEpoch - 1;\r\n        totalStaked = totalStaked - amount;\r\n\r\n        if (staker.totalStakedAmount == 0) {\r\n            staker.lastClaimedEpoch = 0;\r\n            delete staker.stakeHistory[currentEpoch - 1];\r\n        }\r\n        require(spillToken.transfer(msg.sender, amount), \"Unstaking transfer failed\");\r\n\r\n        emit Unstaked(msg.sender, amount);\r\n    }\r\n\r\n    function claim() public Active {\r\n        Staker storage staker = stakers[msg.sender];\r\n        uint256 lastClaimedEpoch = staker.lastClaimedEpoch;\r\n\r\n        if (lastClaimedEpoch == currentEpoch - 1 || staker.totalStakedAmount == 0) {\r\n            return;\r\n        }\r\n        uint256 rewards = _calculateRewards(msg.sender, lastClaimedEpoch, currentEpoch - 1);\r\n\r\n        if (rewards > 0) {  \r\n            require(rewardToken.transfer(msg.sender, rewards), \"Reward transfer failed\");\r\n            totalRewardsClaimed = totalRewardsClaimed+rewards;\r\n        }\r\n        staker.lastClaimedEpoch = currentEpoch - 1;\r\n        emit Claimed(msg.sender, rewards);\r\n    }\r\n\r\n    function _calculateRewards(address user, uint256 startEpoch, uint256 endEpoch) private returns (uint256 rewards) {\r\n        Staker storage staker = stakers[user];\r\n        rewards = 0;\r\n\r\n        if (staker.lastClaimedEpoch != 0) {startEpoch = startEpoch+1;}\r\n\r\n        uint256 stakedAmount = staker.totalStakedAmount;\r\n        \r\n        uint128 thresholdTimestamp = uint128(epochData[endEpoch].epochEnd - _antibottime);\r\n        \r\n        if (staker.stakeHistory[endEpoch].length > 0 && currentEpoch != 2) {\r\n            for (uint256 i = staker.stakeHistory[endEpoch].length - 1; i >= 0; i--) {\r\n                if (staker.stakeHistory[endEpoch][i].timeofStaking < thresholdTimestamp) {\r\n                    break;\r\n                }\r\n                if (staker.stakeHistory[endEpoch][i].stakedAmount > stakedAmount) {\r\n                    stakedAmount = 0;\r\n                    break;\r\n                }\r\n                stakedAmount = stakedAmount - staker.stakeHistory[endEpoch][i].stakedAmount;\r\n                if (i == 0) {break;}\r\n            }\r\n        }\r\n\r\n        for (uint256 epoch = startEpoch; epoch <= endEpoch; epoch++) {\r\n            if (epochData[epoch].epochStart == 0 || epochData[epoch].epochEnd == 0) {\r\n                continue;\r\n            }\r\n            uint256 epochRewardRate = epochData[epoch].epochRewardRate;\r\n            uint256 epochStartTime = epochData[epoch].epochStart;\r\n            uint256 epochEndTime = epochData[epoch].epochEnd;\r\n\r\n            if (block.timestamp < epochStartTime) {\r\n                continue;\r\n            }\r\n            if (block.timestamp >= epochEndTime) {\r\n                rewards = rewards + ((epochRewardRate * stakedAmount) / 1e18);\r\n            }\r\n            delete staker.stakeHistory[epoch];\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    function emergencyWithdraw(address token, uint256 amount, address _to) external onlyOwner {\r\n        require(IERC20(token).transfer(_to, amount), \"Emergency withdraw failed\");\r\n    }\r\n\r\n    function emergencyWithdrawETH(uint256 amount, address _to) external onlyOwner {\r\n        (bool success, ) = _to.call{value: amount}(\"\");\r\n        require(success, \"Emergency withdraw failed\");\r\n    }\r\n\r\n    function calculateRewards(address user) public view returns (uint256 rewards) {\r\n        Staker storage staker = stakers[user];\r\n        rewards = 0;\r\n\r\n        uint256 stakedAmount = staker.totalStakedAmount;\r\n        \r\n        uint128 thresholdTimestamp = uint128(epochData[currentEpoch - 1].epochEnd - _antibottime);\r\n        if (staker.stakeHistory[currentEpoch - 1].length > 0 && currentEpoch != 2) {\r\n            for (uint256 i = staker.stakeHistory[currentEpoch - 1].length - 1; i >= 0; i--) {\r\n                if (staker.stakeHistory[currentEpoch - 1][i].timeofStaking < thresholdTimestamp) {\r\n                    break;\r\n                }\r\n                stakedAmount = stakedAmount - staker.stakeHistory[currentEpoch - 1][i].stakedAmount;\r\n                if (i == 0) {break;}\r\n            }\r\n        }\r\n\r\n        for (uint256 epoch = staker.lastClaimedEpoch+1; epoch <= currentEpoch - 1; epoch++) {\r\n            if (epochData[epoch].epochStart == 0 || epochData[epoch].epochEnd == 0) {\r\n                continue;\r\n            }\r\n            uint256 epochRewardRate = epochData[epoch].epochRewardRate;\r\n            uint256 epochStartTime = epochData[epoch].epochStart;\r\n            uint256 epochEndTime = epochData[epoch].epochEnd;\r\n\r\n            if (block.timestamp < epochStartTime) {\r\n                continue;\r\n            }\r\n            if (block.timestamp >= epochEndTime) {\r\n                rewards = rewards + ((epochRewardRate * stakedAmount) / 1e18);\r\n            }\r\n        }\r\n        return rewards;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spilAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochRewardRate\",\"type\":\"uint256\"}],\"name\":\"Epoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epochStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochRewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antibottime_\",\"type\":\"uint256\"}],\"name\":\"setAntibotTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spillToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaimedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"stakersInfo\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpillwaysStake", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008790f2fc7ca2e7db841307fb3f4e72a03baf7b47000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed1915b143a37ab2091e88bf45d1561c4e567aa95a16bdddb6e53e0361c1fcbe"}