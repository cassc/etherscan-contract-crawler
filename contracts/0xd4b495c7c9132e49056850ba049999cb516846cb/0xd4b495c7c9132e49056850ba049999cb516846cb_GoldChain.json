{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/GoldChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nlibrary GoldChain {\\n\\n    struct Node {\\n        uint32 prev;\\n        uint32 next;\\n        uint32 seqOfShare;\\n        uint64 paid;\\n        uint32 price;\\n        uint48 expireDate;\\n        uint16 votingWeight;\\n    }\\n\\n    struct NodeWrap {\\n        uint32 seq;\\n        Node node;\\n    }\\n\\n    /* nodes[0] {\\n        prev: tail;\\n        next: head;\\n        seqOfShare: counter;\\n        price: length;\\n    } */\\n\\n    struct Chain {\\n        mapping (uint => Node) nodes;\\n    }\\n\\n    //#################\\n    //##  Modifier   ##\\n    //#################\\n\\n    modifier nodeExist(\\n        Chain storage chain,\\n        uint seq\\n    ) {\\n        require(isNode(chain, seq),\\n            \\\"GC.nodeExist: not\\\");\\n        _;\\n    }\\n\\n    //#################\\n    //##  Write I/O  ##\\n    //#################\\n\\n    function parseSn(\\n        bytes32 sn\\n    ) public pure returns(Node memory node) {\\n\\n        uint _sn = uint(sn);\\n\\n        node.prev = uint32(_sn >> 224);\\n        node.next = uint32(_sn >> 192);\\n        node.seqOfShare = uint32(_sn >> 160);\\n        node.paid = uint64(_sn >> 96);\\n        node.price = uint32(_sn >> 64);\\n        node.expireDate = uint48(_sn >> 16);\\n        node.votingWeight = uint16(_sn);\\n    }\\n\\n    function codifyNode(\\n        Node memory node\\n    ) public pure returns(bytes32 sn) {\\n\\n        bytes memory _sn = \\n            abi.encodePacked(\\n                node.prev,\\n                node.next,\\n                node.seqOfShare,\\n                node.paid,\\n                node.price,\\n                node.expireDate,\\n                node.votingWeight\\n            );\\n\\n        assembly {\\n            sn := mload(add(_sn, 0x20))\\n        }                \\n    }\\n\\n    function createNode(\\n        Chain storage chain,\\n        uint seqOfShare,\\n        uint votingWeight,\\n        uint paid,\\n        uint price,\\n        uint execHours,\\n        bool sortFromHead\\n    ) public returns (bytes32 sn) {\\n\\n        require (uint64(paid) > 0, 'GC.createOffer: zero paid');\\n\\n        uint32 seq = _increaseCounter(chain);\\n\\n        Node memory node = Node({\\n            prev: 0,\\n            next: 0,\\n            seqOfShare: uint32(seqOfShare),\\n            paid: uint64(paid),\\n            price: uint32(price),\\n            expireDate: uint48(block.timestamp) + uint48(execHours) * 3600,\\n            votingWeight: uint16(votingWeight)\\n        });\\n\\n        _increaseLength(chain);\\n\\n        chain.nodes[seq] = node;\\n\\n        _upChain(chain, seq, sortFromHead);\\n\\n        sn = codifyNode(node);\\n    }\\n\\n    function _upChain(\\n        Chain storage chain,\\n        uint32 seq,\\n        bool sortFromHead\\n    ) private {\\n\\n        Node storage n = chain.nodes[seq];\\n\\n        (uint prev, uint next) = \\n            _getPos(\\n                chain, \\n                n.price, \\n                sortFromHead ? 0 : tail(chain), \\n                sortFromHead ? head(chain) : 0, \\n                sortFromHead\\n            );\\n\\n        n.prev = uint32(prev);\\n        n.next = uint32(next);\\n\\n        chain.nodes[prev].next = seq;\\n        chain.nodes[next].prev = seq;\\n    }\\n\\n    function _getPos(\\n        Chain storage chain,\\n        uint price,\\n        uint prev,\\n        uint next,\\n        bool sortFromHead\\n    ) public view returns(uint, uint) {\\n        if (sortFromHead) {\\n            while(next > 0 && chain.nodes[next].price <= price) {\\n                prev = next;\\n                next = chain.nodes[next].next;\\n            }\\n        } else {\\n            while(prev > 0 && chain.nodes[prev].price > price) {\\n                next = prev;\\n                prev = chain.nodes[prev].prev;\\n            }\\n        }\\n        return (prev, next);\\n    }\\n    \\n    function offChain(\\n        Chain storage chain,\\n        uint seq\\n    ) public nodeExist(chain, seq) returns(Node memory node) {\\n\\n        node = chain.nodes[seq];\\n\\n        chain.nodes[node.prev].next = node.next;\\n        chain.nodes[node.next].prev = node.prev;\\n\\n        delete chain.nodes[seq];\\n        _decreaseLength(chain);\\n    }\\n\\n    function _increaseCounter(\\n        Chain storage chain\\n    ) private returns (uint32) {\\n\\n        Node storage n = chain.nodes[0];\\n\\n        do {\\n            unchecked {\\n                n.seqOfShare++;        \\n            }\\n        } while(isNode(chain, n.seqOfShare) ||\\n            n.seqOfShare == 0);\\n\\n        return n.seqOfShare;\\n    }\\n\\n    function _increaseLength(\\n        Chain storage chain\\n    ) private {\\n        chain.nodes[0].price++;\\n    }\\n\\n    function _decreaseLength(\\n        Chain storage chain\\n    ) private {\\n        chain.nodes[0].price--;\\n    }\\n\\n    //#################\\n    //##  Read I/O  ##\\n    //#################\\n\\n    // ==== Node[0] ====\\n\\n    function counter(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].seqOfShare;\\n    }\\n\\n    function length(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].price;\\n    }\\n\\n    function head(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].next;\\n    }\\n\\n    function tail(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].prev;\\n    }\\n\\n    // ==== Node ====\\n    \\n    function isNode(\\n        Chain storage chain,\\n        uint seq\\n    ) public view returns(bool) {\\n        return chain.nodes[seq].expireDate > 0;\\n    } \\n\\n    function getNode(\\n        Chain storage chain,\\n        uint seq\\n    ) public view nodeExist(chain, seq) returns(\\n        Node memory \\n    ) {\\n        return chain.nodes[seq];\\n    }\\n\\n    // ==== Chain ====\\n\\n    function getSeqList(\\n        Chain storage chain\\n    ) public view returns (uint[] memory) {\\n        uint len = length(chain);\\n        uint[] memory list = new uint[](len);\\n\\n        Node memory node = chain.nodes[0];\\n\\n        while (len > 0) {\\n            list[len-1] = node.prev;\\n            node = chain.nodes[node.prev];\\n            len--;\\n        }\\n\\n        return list;\\n    }\\n\\n    function getChain(\\n        Chain storage chain\\n    ) public view returns (NodeWrap[] memory) {\\n        uint len = length(chain);\\n        NodeWrap[] memory list = new NodeWrap[](len);\\n\\n        Node memory node = chain.nodes[0];\\n\\n        while (len > 0) {\\n            list[len-1].seq = node.prev;\\n            node = chain.nodes[node.prev];\\n            list[len-1].node = node;\\n            len--;\\n        }\\n\\n        return list;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"prev\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"next\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"expireDate\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"votingWeight\",\"type\":\"uint16\"}],\"internalType\":\"struct GoldChain.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"name\":\"codifyNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"parseSn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"prev\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"next\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"expireDate\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"votingWeight\",\"type\":\"uint16\"}],\"internalType\":\"struct GoldChain.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GoldChain", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}