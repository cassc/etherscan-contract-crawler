{"SourceCode": "pragma solidity ^0.8.17;\r\n\r\ncontract JRLottery {\r\n    address public Admin;\r\n    address private houseAddress = 0xEf257E9Fe8016ceFD7D5352EF082d153007880b6;\r\n    uint256 houseCut = 4;\r\n    uint256 winnerCut = 96;\r\n\r\n    // lotteries\r\n\r\n    address payable[] public playersSilverLottery;\r\n    uint256 public silverLotteryEntryPrice = 0.01 ether;\r\n    uint256 public silverLotteryPotMaxAmount = 0.1 ether;\r\n    uint256 public silverLotteryMaxEntries = 10;\r\n    bool public silverLotteryIsLive = true;\r\n\r\n    address payable[] public playersGoldLottery;\r\n    uint256 public goldLotteryEntryPrice = 0.05 ether;\r\n    uint256 public goldLotteryPotMaxAmount = 0.5 ether;\r\n    uint256 public goldLotteryMaxEntries = 10;\r\n    bool public goldLotteryIsLive = true;\r\n\r\n    address payable[] public playersDiamondLottery;\r\n    uint256 public diamondLotteryEntryPrice = 0.1 ether;\r\n    uint256 public diamondLotteryPotMaxAmount = 1 ether;\r\n    uint256 public diamondLotteryMaxEntries = 10;\r\n    bool public diamondLotteryIsLive = true;\r\n\r\n    event EntrySilverLottery(address indexed _from, uint256 _value);\r\n    event WinnerSilverLottery(address indexed _from, uint256 _value);\r\n    event FinalPlayersSilverLottery(address payable[] playersSilverLottery);\r\n\r\n    event EntryGoldLottery(address indexed _from, uint256 _value);\r\n    event WinnerGoldLottery(address indexed _from, uint256 _value);\r\n    event FinalPlayersGoldLottery(address payable[] playersGoldLottery);\r\n\r\n    event EntryDiamondLottery(address indexed _from, uint256 _value);\r\n    event WinnerDiamondLottery(address indexed _from, uint256 _value);\r\n    event FinalPlayersDiamondLottery(address payable[] playersDiamondLottery);\r\n\r\n    // battles\r\n\r\n    address payable[] public playersSilverBattle;\r\n    uint256 public silverBattleEntryPrice = 0.01 ether;\r\n    uint256 public silverBattlePotMaxAmount = 0.02 ether;\r\n    uint256 public silverBattleMaxEntries = 2;\r\n    bool public silverBattleIsLive = true;\r\n\r\n    address payable[] public playersGoldBattle;\r\n    uint256 public goldBattleEntryPrice = 0.05 ether;\r\n    uint256 public goldBattlePotMaxAmount = 0.1 ether;\r\n    uint256 public goldBattleMaxEntries = 2;\r\n    bool public goldBattleIsLive = true;\r\n\r\n    address payable[] public playersDiamondBattle;\r\n    uint256 public diamondBattleEntryPrice = 0.1 ether;\r\n    uint256 public diamondBattlePotMaxAmount = 0.2 ether;\r\n    uint256 public diamondBattleMaxEntries = 2;\r\n    bool public diamondBattleIsLive = true;\r\n\r\n    event EntrySilverBattle(address indexed _from, uint256 _value);\r\n    event WinnerSilverBattle(address indexed _from, uint256 _value);\r\n\r\n    event EntryGoldBattle(address indexed _from, uint256 _value);\r\n    event WinnerGoldBattle(address indexed _from, uint256 _value);\r\n\r\n    event EntryDiamondBattle(address indexed _from, uint256 _value);\r\n    event WinnerDiamondBattle(address indexed _from, uint256 _value);\r\n\r\n    constructor() {\r\n        Admin = msg.sender;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == Admin, \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isSilverLotteryPotFull() {\r\n        require(\r\n            silverLotteryMaxEntries == playersSilverLottery.length,\r\n            \"silverLottery pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isGoldLotteryPotFull() {\r\n        require(\r\n            goldLotteryMaxEntries == playersGoldLottery.length,\r\n            \"goldLottery pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isDiamondLotteryPotFull() {\r\n        require(\r\n            diamondLotteryMaxEntries == playersDiamondLottery.length,\r\n            \"diamondLottery pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isSilverBattlePotFull() {\r\n        require(\r\n            silverBattleMaxEntries == playersSilverBattle.length,\r\n            \"silverBattle pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isGoldBattlePotFull() {\r\n        require(\r\n            goldBattleMaxEntries == playersGoldBattle.length,\r\n            \"goldBattle pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isDiamondBattlePotFull() {\r\n        require(\r\n            diamondBattleMaxEntries == playersDiamondBattle.length,\r\n            \"diamondBattle pot is not full\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* silverLottery */\r\n\r\n    function enterSilverLottery(uint256 _count) public payable {\r\n        require(silverLotteryIsLive, \"silver lottery is not live\");\r\n        require(\r\n            msg.value == silverLotteryEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersSilverLottery.length + _count <= silverLotteryMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersSilverLottery.push(payable(msg.sender));\r\n        }\r\n        if (silverLotteryMaxEntries == playersSilverLottery.length) {\r\n            pickSilverLotteryWinner();\r\n        }\r\n        emit EntrySilverLottery(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickSilverLotteryWinner() public isSilverLotteryPotFull {\r\n        uint256 index = randomSilverLottery() % playersSilverLottery.length;\r\n        address payable winningAddress = playersSilverLottery[index];\r\n        uint256 winningAmount = (silverLotteryPotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (silverLotteryPotMaxAmount * houseCut) / 100\r\n        );\r\n        emit FinalPlayersSilverLottery(playersSilverLottery);\r\n        emit WinnerSilverLottery(winningAddress, winningAmount);\r\n        delete playersSilverLottery;\r\n    }\r\n\r\n    function setSilverLotteryEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        silverLotteryEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setSilverLotteryMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        silverLotteryMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomSilverLottery() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersSilverLottery\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersSilverLottery()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersSilverLottery;\r\n    }\r\n\r\n    /* goldLottery */\r\n\r\n    function enterGoldLottery(uint256 _count) public payable {\r\n        require(goldLotteryIsLive, \"gold lottery is not live\");\r\n        require(\r\n            msg.value == goldLotteryEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersGoldLottery.length + _count <= goldLotteryMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersGoldLottery.push(payable(msg.sender));\r\n        }\r\n        if (goldLotteryMaxEntries == playersGoldLottery.length) {\r\n            pickGoldLotteryWinner();\r\n        }\r\n        emit EntryGoldLottery(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickGoldLotteryWinner() public isGoldLotteryPotFull {\r\n        uint256 index = randomGoldLottery() % playersGoldLottery.length;\r\n        address payable winningAddress = playersGoldLottery[index];\r\n        uint256 winningAmount = (goldLotteryPotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (goldLotteryPotMaxAmount * houseCut) / 100\r\n        );\r\n        emit FinalPlayersGoldLottery(playersGoldLottery);\r\n        emit WinnerGoldLottery(winningAddress, winningAmount);\r\n        delete playersGoldLottery;\r\n    }\r\n\r\n    function setGoldLotteryEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        goldLotteryEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setGoldLotteryMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        goldLotteryMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomGoldLottery() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersGoldLottery\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersGoldLottery()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersGoldLottery;\r\n    }\r\n\r\n    /* diamondLottery */\r\n\r\n    function enterDiamondLottery(uint256 _count) public payable {\r\n        require(diamondLotteryIsLive, \"diamond lottery is not live\");\r\n        require(\r\n            msg.value == diamondLotteryEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersDiamondLottery.length + _count <= diamondLotteryMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersDiamondLottery.push(payable(msg.sender));\r\n        }\r\n        if (diamondLotteryMaxEntries == playersDiamondLottery.length) {\r\n            pickDiamondLotteryWinner();\r\n        }\r\n        emit EntryDiamondLottery(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickDiamondLotteryWinner() public isDiamondLotteryPotFull {\r\n        uint256 index = randomDiamondLottery() % playersDiamondLottery.length;\r\n        address payable winningAddress = playersDiamondLottery[index];\r\n        uint256 winningAmount = (diamondLotteryPotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (diamondLotteryPotMaxAmount * houseCut) / 100\r\n        );\r\n        emit FinalPlayersDiamondLottery(playersDiamondLottery);\r\n        emit WinnerDiamondLottery(winningAddress, winningAmount);\r\n        delete playersDiamondLottery;\r\n    }\r\n\r\n    function setDiamondLotteryEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        diamondLotteryEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setDiamondLotteryMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        diamondLotteryMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomDiamondLottery() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersDiamondLottery\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersDiamondLottery()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersDiamondLottery;\r\n    }\r\n\r\n    /* silverBattle */\r\n\r\n    function enterSilverBattle(uint256 _count) public payable {\r\n        require(silverBattleIsLive, \"silver battle is not live\");\r\n        require(\r\n            msg.value == silverBattleEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersSilverBattle.length + _count <= silverBattleMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersSilverBattle.push(payable(msg.sender));\r\n        }\r\n        if (silverBattleMaxEntries == playersSilverBattle.length) {\r\n            pickSilverBattleWinner();\r\n        }\r\n\r\n        emit EntrySilverBattle(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickSilverBattleWinner() public isSilverBattlePotFull {\r\n        uint256 index = randomSilverBattle() % playersSilverBattle.length;\r\n        address payable winningAddress = playersSilverBattle[index];\r\n        uint256 winningAmount = (silverBattlePotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (silverBattlePotMaxAmount * houseCut) / 100\r\n        );\r\n        delete playersSilverBattle;\r\n\r\n        emit WinnerSilverBattle(winningAddress, winningAmount);\r\n    }\r\n\r\n    function setSilverBattleEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        silverBattleEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setSilverBattleMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        silverBattleMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomSilverBattle() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersSilverBattle\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersSilverBattle()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersSilverBattle;\r\n    }\r\n\r\n    /* goldBattle */\r\n\r\n    function enterGoldBattle(uint256 _count) public payable {\r\n        require(goldBattleIsLive, \"gold battle is not live\");\r\n        require(\r\n            msg.value == goldBattleEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersGoldBattle.length + _count <= goldBattleMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersGoldBattle.push(payable(msg.sender));\r\n        }\r\n        if (goldBattleMaxEntries == playersGoldBattle.length) {\r\n            pickGoldBattleWinner();\r\n        }\r\n\r\n        emit EntryGoldBattle(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickGoldBattleWinner() public isGoldBattlePotFull {\r\n        uint256 index = randomGoldBattle() % playersGoldBattle.length;\r\n        address payable winningAddress = playersGoldBattle[index];\r\n        uint256 winningAmount = (goldBattlePotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (goldBattlePotMaxAmount * houseCut) / 100\r\n        );\r\n        delete playersGoldBattle;\r\n\r\n        emit WinnerGoldBattle(winningAddress, winningAmount);\r\n    }\r\n\r\n    function setGoldBattleEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        goldBattleEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setGoldBattleMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        goldBattleMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomGoldBattle() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersGoldBattle\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersGoldBattle()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersGoldBattle;\r\n    }\r\n\r\n    /* diamondBattle */\r\n\r\n    function enterDiamondBattle(uint256 _count) public payable {\r\n        require(diamondBattleIsLive, \"diamond battle is not live\");\r\n        require(\r\n            msg.value == diamondBattleEntryPrice * _count,\r\n            \"incorrent value sent to contract\"\r\n        );\r\n        require(\r\n            playersDiamondBattle.length + _count <= diamondBattleMaxEntries,\r\n            \"maximum entries reached\"\r\n        );\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            playersDiamondBattle.push(payable(msg.sender));\r\n        }\r\n        if (diamondBattleMaxEntries == playersDiamondBattle.length) {\r\n            pickDiamondBattleWinner();\r\n        }\r\n\r\n        emit EntryDiamondBattle(msg.sender, msg.value);\r\n    }\r\n\r\n    function pickDiamondBattleWinner() public isDiamondBattlePotFull {\r\n        uint256 index = randomDiamondBattle() % playersDiamondBattle.length;\r\n        address payable winningAddress = playersDiamondBattle[index];\r\n        uint256 winningAmount = (diamondBattlePotMaxAmount * winnerCut) / 100;\r\n        winningAddress.transfer(winningAmount);\r\n        payable(houseAddress).transfer(\r\n            (diamondBattlePotMaxAmount * houseCut) / 100\r\n        );\r\n        delete playersDiamondBattle;\r\n\r\n        emit WinnerDiamondBattle(winningAddress, winningAmount);\r\n    }\r\n\r\n    function setDiamondBattleEntryPrice(uint256 _newEntryPrice)\r\n        external\r\n        restricted\r\n    {\r\n        diamondBattleEntryPrice = _newEntryPrice;\r\n    }\r\n\r\n    function setDiamondBattleMaxEntries(uint256 _newMaxEntries)\r\n        external\r\n        restricted\r\n    {\r\n        diamondBattleMaxEntries = _newMaxEntries;\r\n    }\r\n\r\n    function randomDiamondBattle() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.difficulty,\r\n                        block.timestamp,\r\n                        playersDiamondBattle\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function getPlayersDiamondBattle()\r\n        public\r\n        view\r\n        returns (address payable[] memory)\r\n    {\r\n        return playersDiamondBattle;\r\n    }\r\n\r\n    /* admin */\r\n\r\n    function setSilverLotteryIsLive(bool _state) external restricted {\r\n        silverLotteryIsLive = _state;\r\n    }\r\n\r\n    function setGoldLotteryIsLive(bool _state) external restricted {\r\n        goldLotteryIsLive = _state;\r\n    }\r\n\r\n    function setDiamondLotteryIsLive(bool _state) external restricted {\r\n        silverLotteryIsLive = _state;\r\n    }\r\n\r\n    function setSilverBattleIsLive(bool _state) external restricted {\r\n        silverBattleIsLive = _state;\r\n    }\r\n\r\n    function setGoldBattleIsLive(bool _state) external restricted {\r\n        goldBattleIsLive = _state;\r\n    }\r\n\r\n    function setDiamondBattleIsLive(bool _state) external restricted {\r\n        diamondBattleIsLive = _state;\r\n    }\r\n\r\n    function setWinnerCut(uint256 _newWinnerCut) external restricted {\r\n        winnerCut = _newWinnerCut;\r\n    }\r\n\r\n    function setHouseCut(uint256 _newHouseCut) external restricted {\r\n        houseCut = _newHouseCut;\r\n    }\r\n\r\n    function setHouseAddress(address _newAddress) external restricted {\r\n        houseAddress = _newAddress;\r\n    }\r\n\r\n    function withdrawFallback() external payable restricted {\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntryDiamondBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntryDiamondLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntryGoldBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntryGoldLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntrySilverBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EntrySilverLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"playersDiamondLottery\",\"type\":\"address[]\"}],\"name\":\"FinalPlayersDiamondLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"playersGoldLottery\",\"type\":\"address[]\"}],\"name\":\"FinalPlayersGoldLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"playersSilverLottery\",\"type\":\"address[]\"}],\"name\":\"FinalPlayersSilverLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerDiamondBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerDiamondLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerGoldBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerGoldLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerSilverBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WinnerSilverLottery\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondBattleEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondBattleIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondBattleMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondBattlePotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondLotteryEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondLotteryIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondLotteryMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondLotteryPotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterDiamondBattle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterDiamondLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterGoldBattle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterGoldLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterSilverBattle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterSilverLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersDiamondBattle\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersDiamondLottery\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersGoldBattle\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersGoldLottery\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersSilverBattle\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersSilverLottery\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldBattleEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldBattleIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldBattleMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldBattlePotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldLotteryEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldLotteryIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldLotteryMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldLotteryPotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickDiamondBattleWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickDiamondLotteryWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickGoldBattleWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickGoldLotteryWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickSilverBattleWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickSilverLotteryWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersDiamondBattle\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersDiamondLottery\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersGoldBattle\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersGoldLottery\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersSilverBattle\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersSilverLottery\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setDiamondBattleEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDiamondBattleIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setDiamondBattleMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setDiamondLotteryEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDiamondLotteryIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setDiamondLotteryMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setGoldBattleEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setGoldBattleIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setGoldBattleMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setGoldLotteryEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setGoldLotteryIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setGoldLotteryMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newHouseCut\",\"type\":\"uint256\"}],\"name\":\"setHouseCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setSilverBattleEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSilverBattleIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setSilverBattleMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEntryPrice\",\"type\":\"uint256\"}],\"name\":\"setSilverLotteryEntryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSilverLotteryIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxEntries\",\"type\":\"uint256\"}],\"name\":\"setSilverLotteryMaxEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWinnerCut\",\"type\":\"uint256\"}],\"name\":\"setWinnerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverBattleEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverBattleIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverBattleMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverBattlePotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverLotteryEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverLotteryIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverLotteryMaxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverLotteryPotMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "JRLottery", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eabf89fd70d03ec2d4351c77a87f396b6d6db673dad9ee93d53d655eff97fb8c"}