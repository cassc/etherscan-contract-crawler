{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n// Sends the new tokens after proving that you hold the previous tokens\r\ncontract TokenConverter {\r\n    address public owner;\r\n    address public oldToken;\r\n    address public newToken;\r\n    mapping (address => uint256) public claimants; // People that don't hold tokens but can claim them for an airdrop or whatever\r\n    mapping (address => bool) public claimed; // People that don't hold tokens but can claim them for an airdrop or whatever\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _oldToken, address _newToken) {\r\n        owner = msg.sender;\r\n        oldToken = _oldToken;\r\n        newToken = _newToken;\r\n    }\r\n\r\n    function claim() external {\r\n        uint256 tokenBalance = IERC20(oldToken).balanceOf(msg.sender);\r\n        require(tokenBalance > 0, \"You don't hold the old token\");\r\n        require(IERC20(oldToken).transferFrom(msg.sender, address(this), tokenBalance), \"Transfer from failed\");\r\n        IERC20(newToken).transfer(msg.sender, tokenBalance);\r\n    }\r\n\r\n    function rescueEth() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner).transfer(balance);\r\n    }\r\n\r\n    function rescueTokens(address _token) external onlyOwner {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenConverter", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000c6a350dcb31bffb52d8a34e364b806e1f0e8ce83000000000000000000000000648de8a5576a42d6790d3a28f70cc2957dbe7cee", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54546904393be7a3d93392a643ff86d31101de09a6f0636e96cb64a1b093914e"}