{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/ControllerBallotV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../utils/CoreUtility.sol\\\";\\nimport \\\"../utils/SafeDecimalMath.sol\\\";\\n\\nimport \\\"../governance/VotingEscrowCheckpoint.sol\\\";\\nimport \\\"../interfaces/IControllerBallotV2.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\ncontract ControllerBallotV2 is\\n    IControllerBallotV2,\\n    IVotingEscrowCallback,\\n    Ownable,\\n    CoreUtility,\\n    VotingEscrowCheckpoint\\n{\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    event PoolAdded(address pool);\\n    event PoolToggled(address indexed pool, bool isDisabled);\\n    event Voted(\\n        address indexed account,\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256[] oldWeights,\\n        uint256 amount,\\n        uint256 unlockTime,\\n        uint256[] weights\\n    );\\n\\n    IVotingEscrow public immutable votingEscrow;\\n\\n    address[65535] private _pools;\\n    uint256 public poolSize;\\n    uint256 public disabledPoolSize;\\n\\n    /// @notice Locked balance of an account, which is synchronized with `VotingEscrow` when\\n    ///         `syncWithVotingEscrow()` is called\\n    mapping(address => IVotingEscrow.LockedBalance) public userLockedBalances;\\n\\n    /// @notice Mapping of account => pool => fraction of the user's veCHESS voted to the pool\\n    mapping(address => mapping(address => uint256)) public userWeights;\\n\\n    /// @notice Mapping of pool => unlockTime => CHESS amount voted to the pool that will be\\n    ///         unlocked at unlockTime\\n    mapping(address => mapping(uint256 => uint256)) public poolScheduledUnlock;\\n\\n    mapping(address => mapping(uint256 => uint256)) public poolVeSupplyPerWeek;\\n    mapping(address => uint256) public poolTotalLocked;\\n    mapping(address => uint256) public poolNextWeekSupply;\\n    uint256 public checkpointWeek;\\n\\n    /// @notice Mapping of pool => status of the pool\\n    mapping(uint256 => bool) public disabledPools;\\n\\n    constructor(address votingEscrow_)\\n        public\\n        VotingEscrowCheckpoint(IVotingEscrow(votingEscrow_).maxTime())\\n    {\\n        votingEscrow = IVotingEscrow(votingEscrow_);\\n        checkpointWeek = _endOfWeek(block.timestamp) - 1 weeks;\\n    }\\n\\n    function getPools() external view returns (address[] memory) {\\n        uint256 size = poolSize;\\n        address[] memory pools = new address[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            pools[i] = _pools[i];\\n        }\\n        return pools;\\n    }\\n\\n    function addPool(address newPool) external onlyOwner {\\n        uint256 size = poolSize;\\n        _pools[size] = newPool;\\n        poolSize = size + 1;\\n        emit PoolAdded(newPool);\\n    }\\n\\n    function togglePool(uint256 index) external onlyOwner {\\n        require(index < poolSize, \\\"Invalid index\\\");\\n        if (disabledPools[index]) {\\n            disabledPools[index] = false;\\n            disabledPoolSize--;\\n        } else {\\n            disabledPools[index] = true;\\n            disabledPoolSize++;\\n        }\\n        emit PoolToggled(_pools[index], disabledPools[index]);\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balanceOfAtTimestamp(account, block.timestamp);\\n    }\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(timestamp >= block.timestamp, \\\"Must be current or future time\\\");\\n        IVotingEscrow.LockedBalance memory locked = userLockedBalances[account];\\n        if (timestamp >= locked.unlockTime) {\\n            return 0;\\n        }\\n        return locked.amount.mul(locked.unlockTime - timestamp) / _maxTime;\\n    }\\n\\n    function totalSupplyAtWeek(uint256 week) public view override returns (uint256) {\\n        uint256 size = poolSize;\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < size; i++) {\\n            if (!disabledPools[i]) {\\n                total = total.add(sumAtWeek(_pools[i], week));\\n            }\\n        }\\n        return total;\\n    }\\n\\n    function sumAtWeek(address pool, uint256 week) public view override returns (uint256) {\\n        return\\n            week <= checkpointWeek\\n                ? poolVeSupplyPerWeek[pool][week]\\n                : _veTotalSupplyAtWeek(\\n                    week,\\n                    poolScheduledUnlock[pool],\\n                    checkpointWeek,\\n                    poolNextWeekSupply[pool],\\n                    poolTotalLocked[pool]\\n                );\\n    }\\n\\n    function count(uint256 week)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory sums, address[] memory pools)\\n    {\\n        uint256 poolSize_ = poolSize;\\n        uint256 size = poolSize_ - disabledPoolSize;\\n        pools = new address[](size);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < poolSize_ && j < size; i++) {\\n            address pool = _pools[i];\\n            if (!disabledPools[i]) pools[j++] = pool;\\n        }\\n\\n        sums = new uint256[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            uint256 sum = sumAtWeek(pools[i], week);\\n            sums[i] = sum;\\n        }\\n    }\\n\\n    function cast(uint256[] memory weights) external override {\\n        uint256 size = poolSize;\\n        require(weights.length == size, \\\"Invalid number of weights\\\");\\n        uint256 totalWeight;\\n        for (uint256 i = 0; i < size; i++) {\\n            totalWeight = totalWeight.add(weights[i]);\\n        }\\n        require(totalWeight == 1e18, \\\"Invalid weights\\\");\\n\\n        uint256[] memory oldWeights = new uint256[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            oldWeights[i] = userWeights[msg.sender][_pools[i]];\\n        }\\n\\n        IVotingEscrow.LockedBalance memory oldLockedBalance = userLockedBalances[msg.sender];\\n        IVotingEscrow.LockedBalance memory lockedBalance =\\n            votingEscrow.getLockedBalance(msg.sender);\\n        require(\\n            lockedBalance.amount > 0 && lockedBalance.unlockTime > block.timestamp,\\n            \\\"No veCHESS\\\"\\n        );\\n\\n        _updateVoteStatus(msg.sender, size, oldWeights, weights, oldLockedBalance, lockedBalance);\\n    }\\n\\n    function syncWithVotingEscrow(address account) external override {\\n        IVotingEscrow.LockedBalance memory oldLockedBalance = userLockedBalances[account];\\n        if (oldLockedBalance.amount == 0) {\\n            return; // The account did not vote before\\n        }\\n        IVotingEscrow.LockedBalance memory lockedBalance = votingEscrow.getLockedBalance(account);\\n        if (lockedBalance.unlockTime <= block.timestamp) {\\n            return;\\n        }\\n\\n        uint256 size = poolSize;\\n        uint256[] memory weights = new uint256[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            weights[i] = userWeights[account][_pools[i]];\\n        }\\n\\n        _updateVoteStatus(account, size, weights, weights, oldLockedBalance, lockedBalance);\\n    }\\n\\n    function _updateVoteStatus(\\n        address account,\\n        uint256 size,\\n        uint256[] memory oldWeights,\\n        uint256[] memory weights,\\n        IVotingEscrow.LockedBalance memory oldLockedBalance,\\n        IVotingEscrow.LockedBalance memory lockedBalance\\n    ) private {\\n        uint256 oldCheckpointWeek = checkpointWeek;\\n        uint256 newCheckpointWeek;\\n        for (uint256 i = 0; i < size; i++) {\\n            address pool = _pools[i];\\n            uint256 newNextWeekSupply;\\n            uint256 newTotalLocked;\\n            (newCheckpointWeek, newNextWeekSupply, newTotalLocked) = _veCheckpoint(\\n                poolScheduledUnlock[pool],\\n                oldCheckpointWeek,\\n                poolNextWeekSupply[pool],\\n                poolTotalLocked[pool],\\n                poolVeSupplyPerWeek[pool]\\n            );\\n            (poolNextWeekSupply[pool], poolTotalLocked[pool]) = _veUpdateLock(\\n                newNextWeekSupply,\\n                newTotalLocked,\\n                oldLockedBalance.amount.multiplyDecimal(oldWeights[i]),\\n                oldLockedBalance.unlockTime,\\n                lockedBalance.amount.multiplyDecimal(weights[i]),\\n                lockedBalance.unlockTime,\\n                poolScheduledUnlock[pool]\\n            );\\n            userWeights[account][pool] = weights[i];\\n        }\\n        checkpointWeek = newCheckpointWeek;\\n        userLockedBalances[account] = lockedBalance;\\n        emit Voted(\\n            account,\\n            oldLockedBalance.amount,\\n            oldLockedBalance.unlockTime,\\n            oldWeights,\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            weights\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CoreUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CoreUtility {\\n    using SafeMath for uint256;\\n\\n    /// @dev UTC time of a day when the fund settles.\\n    uint256 internal constant SETTLEMENT_TIME = 14 hours;\\n\\n    /// @dev Return end timestamp of the trading week containing a given timestamp.\\n    ///\\n    ///      A trading week starts at UTC time `SETTLEMENT_TIME` on a Thursday (inclusive)\\n    ///      and ends at the same time of the next Thursday (exclusive).\\n    /// @param timestamp The given timestamp\\n    /// @return End timestamp of the trading week.\\n    function _endOfWeek(uint256 timestamp) internal pure returns (uint256) {\\n        return ((timestamp.add(1 weeks) - SETTLEMENT_TIME) / 1 weeks) * 1 weeks + SETTLEMENT_TIME;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n// Copyright (c) 2019 Synthetix\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint256 private constant decimals = 18;\\n    uint256 private constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 private constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 private constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(UNIT);\\n    }\\n\\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(PRECISE_UNIT).div(y);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen = quotientTimesTen.add(10);\\n        }\\n\\n        return quotientTimesTen.div(10);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\\n     * uint256 on overflow.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        return c / a != b ? type(uint256).max : c;\\n    }\\n\\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return saturatingMul(x, y).div(UNIT);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/VotingEscrowCheckpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../utils/CoreUtility.sol\\\";\\n\\n/// @dev This abstract contract incrementally calculates the total amount of veCHESS in each week.\\n///      A derived contract should maintain the following state variables:\\n///\\n///      * `mapping(uint256 => uint256) scheduledUnlock`, amount of CHESS that will be\\n///        unlocked in each week in the future.\\n///      * `mapping(uint256 => uint256) veSupplyPerWeek`, total veCHESS in each week in the past.\\n///      * `uint256 checkpointWeek`, start timestamp of the week when the checkpoint was updated\\n///         the last time.\\n///      * `uint256 nextWeekSupply`, total veCHESS at the end of the last checkpoint's week.\\n///      * `uint256 totalLocked`, amount of CHESS locked now.\\nabstract contract VotingEscrowCheckpoint is CoreUtility {\\n    using SafeMath for uint256;\\n\\n    uint256 internal immutable _maxTime;\\n\\n    constructor(uint256 maxTime_) internal {\\n        _maxTime = maxTime_;\\n    }\\n\\n    /// @dev Update checkpoint to the given week and record weekly supply in the past.\\n    ///      This function should be called before any update to `scheduledUnlock`.\\n    ///      It writes new values to the `veSupplyPerWeek` mapping. Caller is responsible for\\n    ///      setting `checkpointWeek`, `nextWeekSupply` and `totalLocked` to the return values.\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the old checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @param veSupplyPerWeek total veCHESS in each week, written by this function\\n    /// @return newCheckpointWeek the new checkpoint timestamp\\n    /// @return newNextWeekSupply total veCHESS at the end of this trading week\\n    /// @return newTotalLocked amount of CHESS locked now\\n    function _veCheckpoint(\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked,\\n        mapping(uint256 => uint256) storage veSupplyPerWeek\\n    )\\n        internal\\n        returns (\\n            uint256 newCheckpointWeek,\\n            uint256 newNextWeekSupply,\\n            uint256 newTotalLocked\\n        )\\n    {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        for (uint256 w = checkpointWeek + 1 weeks; w < nextWeek; w += 1 weeks) {\\n            veSupplyPerWeek[w] = nextWeekSupply;\\n            // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n            totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n            // Calculate supply at the end of the next week.\\n            nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n        }\\n        newCheckpointWeek = nextWeek - 1 weeks;\\n        newNextWeekSupply = nextWeekSupply;\\n        newTotalLocked = totalLocked;\\n    }\\n\\n    /// @dev Update `scheduledUnlock` and the checkpoint according to the change of a user's locked CHESS.\\n    ///      This function should be called after the checkpoint is updated by `veCheckpoint()`.\\n    ///      It updates the `scheduledUnlock` mapping. Caller is responsible for setting\\n    ///      `nextWeekSupply` and `totalLocked` to the return values.\\n    /// @param nextWeekSupply total veCHESS at the end of this trading week before this change\\n    /// @param totalLocked amount of CHESS locked before this change\\n    /// @param oldAmount old amount of locked CHESS\\n    /// @param oldUnlockTime old unlock timestamp\\n    /// @param newAmount new amount of locked CHESS\\n    /// @param newUnlockTime new unlock timestamp\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week, updated by this function\\n    /// @return newNextWeekSupply total veCHESS at at the end of this trading week after this change\\n    /// @return newTotalLocked amount of CHESS locked after this change\\n    function _veUpdateLock(\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked,\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256 newAmount,\\n        uint256 newUnlockTime,\\n        mapping(uint256 => uint256) storage scheduledUnlock\\n    ) internal returns (uint256 newNextWeekSupply, uint256 newTotalLocked) {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        newTotalLocked = totalLocked;\\n        newNextWeekSupply = nextWeekSupply;\\n        // Remove the old schedule if there is one\\n        if (oldAmount > 0 && oldUnlockTime >= nextWeek) {\\n            newTotalLocked = newTotalLocked.sub(oldAmount);\\n            newNextWeekSupply = newNextWeekSupply.sub(\\n                oldAmount.mul(oldUnlockTime - nextWeek) / _maxTime\\n            );\\n        }\\n        newTotalLocked = newTotalLocked.add(newAmount);\\n        // Round up on division when added to the total supply, so that the total supply is never\\n        // smaller than the sum of all accounts' veCHESS balance.\\n        newNextWeekSupply = newNextWeekSupply.add(\\n            newAmount.mul(newUnlockTime - nextWeek).add(_maxTime - 1) / _maxTime\\n        );\\n\\n        if (oldUnlockTime == newUnlockTime) {\\n            scheduledUnlock[oldUnlockTime] = scheduledUnlock[oldUnlockTime].sub(oldAmount).add(\\n                newAmount\\n            );\\n        } else {\\n            if (oldUnlockTime >= nextWeek) {\\n                scheduledUnlock[oldUnlockTime] = scheduledUnlock[oldUnlockTime].sub(oldAmount);\\n            }\\n            scheduledUnlock[newUnlockTime] = scheduledUnlock[newUnlockTime].add(newAmount);\\n        }\\n    }\\n\\n    /// @dev Calculate the current total veCHESS amount from the last checkpoint.\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the last checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @return Current total veCHESS amount\\n    function _veTotalSupply(\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked\\n    ) internal view returns (uint256) {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        uint256 thisWeek = nextWeek - 1 weeks;\\n        if (checkpointWeek + 1 weeks < nextWeek) {\\n            for (uint256 w = checkpointWeek + 1 weeks; w < thisWeek; w += 1 weeks) {\\n                // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n                totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n                // Calculate supply at the end of the next week.\\n                nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n            }\\n            totalLocked = totalLocked.sub(scheduledUnlock[thisWeek]);\\n            return nextWeekSupply.sub(totalLocked.mul(block.timestamp - thisWeek) / _maxTime);\\n        } else {\\n            return nextWeekSupply.add(totalLocked.mul(nextWeek - block.timestamp) / _maxTime);\\n        }\\n    }\\n\\n    /// @dev Calculate the total veCHESS amount at a given trading week boundary. The given week\\n    ///      start timestamp must be later than the last checkpoint. For older weeks,\\n    ///      derived contract should read from the `veSupplyPerWeek` mapping instead.\\n    /// @param week Start timestamp of a trading week, must be greater than `checkpointWeek`\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the last checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @return Total veCHESS amount at `week`\\n    function _veTotalSupplyAtWeek(\\n        uint256 week,\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked\\n    ) internal view returns (uint256) {\\n        if (checkpointWeek + 1 weeks < week) {\\n            for (uint256 w = checkpointWeek + 1 weeks; w < week; w += 1 weeks) {\\n                // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n                totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n                // Calculate supply at the end of the next week.\\n                nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n            }\\n        }\\n        return nextWeekSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IControllerBallotV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface IControllerBallotV2 {\\n    function totalSupplyAtWeek(uint256 week) external view returns (uint256);\\n\\n    function sumAtWeek(address pool, uint256 week) external view returns (uint256);\\n\\n    function count(uint256 week)\\n        external\\n        view\\n        returns (uint256[] memory sums, address[] memory funds);\\n\\n    function cast(uint256[] memory weights) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAddressWhitelist {\\n    function check(address account) external view returns (bool);\\n}\\n\\ninterface IVotingEscrowCallback {\\n    function syncWithVotingEscrow(address account) external;\\n}\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampDropBelow(address account, uint256 threshold)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address account) external view returns (LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingEscrow_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDisabled\",\"type\":\"bool\"}],\"name\":\"PoolToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldWeights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sums\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabledPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disabledPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolNextWeekSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolScheduledUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTotalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVeSupplyPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"sumAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncWithVotingEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"togglePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ControllerBallotV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003fadadf8f443a6dc1e091f14ddf8d5046b6cf95e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}