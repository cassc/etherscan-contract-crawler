{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LoveHateInuPoll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\n/**\\n * @title LoveHatePoll Internal Contract for LoveHate Voting System\\n * @notice You can use this contract for creation and ending of a poll, voters can claim their poll reward\\n * @dev All function calls are currently implemented without side effects\\n */\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the LoveHatePoll Contract for LoveHate Voting System.\\n */\\ninterface LoveHatePollInterface {\\n    /**\\n     * @dev Emitted when polls are created, along with created poll ids.\\n     */\\n    event PollsCreated(uint256[] pollIds);\\n\\n    /**\\n     * @dev Emitted when polls are ended, along with ended poll ids.\\n     */\\n    event PollsEnded(uint256[] pollIds);\\n\\n    /**\\n     * @dev Emitted when claim is transfered for the poll ids.\\n     */\\n    event ClaimTransferSuccessful(uint256[] pollIds);\\n\\n    /**\\n     * @dev Emitted when NFT is transfered for the poll ids\\n     */\\n    event NFTTransferSuccessful(uint256[] pollIds, uint256[] tokenIds);\\n\\n    /**\\n     * @dev Emitted when the poll fee is updated, along with updated poll fee.\\n     */\\n    event PollFeeUpdated(uint256 fee);\\n\\n    /**\\n     * @dev Emitted when the burn fee is updated, along with updated burn fee.\\n     */\\n    event BurnFeeUpdated(uint256 fee);\\n\\n    /**\\n     * @dev Emitted when the tranfer percent is updated, along with updated percent for transfer.\\n     */\\n    event TranferPercentUpdated(uint256 percentForPlatform);\\n\\n    /**\\n     * @dev Emitted when the LHINU contract is updated, along with updated LHINU contract address.\\n     */\\n    event LHINUContractUpdated(address lhinuContract);\\n\\n    /**\\n     * @dev Emitted when the POAP contract is updated, along with updated POAP contract address.\\n     */\\n    event POAPContractUpdated(address POAPContract);\\n\\n    /**\\n     * @dev Emitted when the treasury address is updated, along with updated treasury address.\\n     */\\n    event TreasuryAddressUpdated(address POAPContract);\\n\\n    /**\\n     * @dev Emitted when the admin address is added, along with added admin address.\\n     */\\n    event AdminAdded(address adminAddress);\\n\\n    /**\\n     * @dev Emitted when the admin address is removed, along with removed admin address.\\n     */\\n    event AdminRemoved(address adminAddress);\\n\\n    /**\\n     * @dev Emitted when the competition amount is transferred successfully, along with to addresses.\\n     */\\n    event CompetitionsEnded(uint256[] competitionIds);\\n\\n    /**\\n     * @dev Emitted when competition reward is transfered for the competition ids.\\n     */\\n    event ClaimCompetitionRewardSuccessful(uint256[] competitionIds);\\n\\n    /**\\n     * @dev Emitted when the LHINU is withdraw, along with to address.\\n     */\\n    event LHINUWithdrawSuccessful(address toAddress);\\n\\n    /**\\n     * @dev Struct containing details about a poll at creation.\\n     */\\n    struct PollCreateDetails {\\n        string title;\\n        string[] choices;\\n        uint256 pollId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address creator;\\n    }\\n\\n    /**\\n     * @dev Struct containing details about a poll when it is ended.\\n     */\\n    struct PollEndDetails {\\n        string winningChoice;\\n        string pollMetadata;\\n        uint256 pollId;\\n        uint256 fee;\\n        bytes32 winnersMerkle;\\n        bytes32 votersMerkle;\\n        bool isPollEnded;\\n    }\\n\\n    /**\\n     * @dev Struct containing details about claim for a poll reward.\\n     */\\n    struct PollClaimReward {\\n        uint256 amount;\\n        uint256 pollId;\\n        bytes32[] merkleProof;\\n    }\\n\\n    /**\\n     * @dev Struct containing details about claim for a poll NFT.\\n     */\\n    struct PollClaimNFT {\\n        uint256 pollId;\\n        bytes32[] merkleProof;\\n    }\\n\\n    /**\\n     * @dev Struct containing competition winning details.\\n     */\\n    struct EndCompetitionDetails {\\n        uint256 amount;\\n        uint256 competitionId;\\n        address[] toAddress;\\n    }\\n\\n    /**\\n     * @dev Struct containing poll details.\\n     */\\n    struct PollDetails {\\n        PollCreateDetails createPollDetails;\\n        PollEndDetails endPollDetails;\\n    }\\n\\n    /**\\n     * @dev Creates a new poll with the specified parameters.\\n     * @dev Only owner or admin can call this function.\\n     * @param polls An array of data for the new polls to be created.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function createPolls(\\n        PollCreateDetails[] calldata polls,\\n        uint256 timestamp\\n    ) external;\\n\\n    /**\\n     * @dev Concludes the specified polls by providing the necessary information.\\n     * @dev Only owner or admin can call this function.\\n     * @param polls An array of polls to be concluded.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function endPolls(\\n        PollEndDetails[] calldata polls,\\n        uint256 timestamp\\n    ) external;\\n\\n    /**\\n     * @dev Enables a user to claim multiple rewards if the user's choice is the winning one.\\n     * @param pollsReward An array of eligible poll rewards.\\n     */\\n    function claimAllRewards(PollClaimReward[] calldata pollsReward) external;\\n\\n    /**\\n     * @dev Allows a user to claim multiple NFTs.\\n     * @param pollsClaimNFT An array of poll details for claiming its NFTs.\\n     */\\n    function claimAllNFTs(PollClaimNFT[] calldata pollsClaimNFT) external;\\n\\n    /**\\n     * @dev Enables a user to claim multiple rewards and claim NFTs if the user's choice is the winning one.\\n     * @param pollsReward An array of eligible poll rewards.\\n     * @param pollsClaimNFT An array of poll details for claiming its NFTs.\\n     */\\n    function claimAllRewardsAndNFTs(\\n        PollClaimReward[] calldata pollsReward,\\n        PollClaimNFT[] calldata pollsClaimNFT\\n    ) external;\\n\\n    /**\\n     * @notice This function utilizes the verifyEndCompetition\\n     * function to authenticate the information of the competition winner.\\n     * @dev Only owner or admin can call this function.\\n     * @param endCompetitionDetails Contains end competition details.\\n     */\\n    function endCompetition(\\n        EndCompetitionDetails[] calldata endCompetitionDetails\\n    ) external;\\n\\n    /**\\n     * @dev Allows a user to claim multiple competition reward.\\n     * @param competitonIds An array of competition ids.\\n     */\\n    function claimCompetitionReward(uint256[] memory competitonIds) external;\\n\\n    /**\\n     * @notice This function will withdraw to treasury address of the contract.\\n     * @dev Withdraw the LHINU from the contract.\\n     * @dev Only owner can call this function.\\n     * @param amount Sending LHINU amount.\\n     */\\n    function LHINUWithdraw(uint256 amount) external;\\n\\n    /**\\n     * @dev Only owner or admin can call this function.\\n     * @param endCompetitionDetails Contains competition winning details.\\n     */\\n    // function transferCompetitionWinnings(\\n    //     EndCompetitionDetails[] calldata endCompetitionDetails\\n    // ) external;\\n\\n    /**\\n     * @dev Updates the poll fee with the specified amount.\\n     * @dev Only owner or admin can call this function.\\n     * @param fee The new amount of fee for creation of a poll.\\n     */\\n    function updatePollFee(uint256 fee) external;\\n\\n    /**\\n     * @dev Updates the LHINU contract address with the specified address.\\n     * @dev Only owner or admin can call this function.\\n     * @param lhinuContractAddress The new address of the LHINU contract.\\n     */\\n    function updateLHINUContract(address lhinuContractAddress) external;\\n\\n    /**\\n     * @dev Updates the POAP contract address with the specified address.\\n     * @dev Only owner or admin can call this function.\\n     * @param POAPContractAddress The new address of the POAP contract.\\n     */\\n    function updatePOAPContract(address POAPContractAddress) external;\\n\\n    /**\\n     * @dev Updates the burn percentage for the contract.\\n     * @dev Only owner or admin can call this function.\\n     * @param percentForBurn The new burn percent for the token.\\n     */\\n    function updateBurnPercent(uint16 percentForBurn) external;\\n\\n    /**\\n     * @dev Updates the treasury address of the contract.\\n     * @dev Only owner can call this function.\\n     * @param treasuryWalletAddress Address of the treasury for handling funds.\\n     */\\n    function updateTreasuryAddress(address treasuryWalletAddress) external;\\n\\n    /**\\n     * @dev Updates the transfer percent.\\n     * @dev Only owner can call this function.\\n     * @param percentForPlatform Percent of the token tranfer to treasury.\\n     */\\n    function updateTransferPercent(uint256 percentForPlatform) external;\\n\\n    /**\\n     * @dev Adds a new admin address for the contract.\\n     * @dev Only owner can call this function.\\n     * @param addressOfAdmin The new admin address for the contract.\\n     */\\n    function addAdmin(address addressOfAdmin) external;\\n\\n    /**\\n     * @dev Remove the admin address for the contract.\\n     * @dev Only owner can call this function.\\n     * @param addressOfAdmin The admin address to be removed from the contract.\\n     */\\n    function removeAdmin(address addressOfAdmin) external;\\n\\n    /**\\n     * @dev Retrieves the poll detail.\\n     * @param id Poll id to fetch the poll details.\\n     * @return PollDetail The poll detail.\\n     */\\n    function getPollDetail(\\n        uint256 id\\n    ) external view returns (PollDetails memory);\\n\\n    /**\\n     * @dev Retrieves the poll fee.\\n     * @return pollFee The poll fee.\\n     */\\n    function getPollFee() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the burn percent of the LHINU.\\n     * @return burnPercent The burn percent.\\n     */\\n    function getBurnPercent() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the platform percent.\\n     * @return platformPercent The plaform percent.\\n     */\\n    function getPlatformPercent() external view returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the address of the treasury.\\n     * @return treasuryAddress The address of the treasury.\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the LHINU contract.\\n     * @return lhinuContract The address of the LHINU contract.\\n     */\\n    function getLHINUAddress() external view returns (address);\\n\\n    /**\\n     * @dev Retrieves the address of the POAP contract.\\n     * @return POAPContract The address of the POAP contract.\\n     */\\n    function getPOAPAddress() external view returns (address);\\n\\n    /**\\n     * @dev Checks if the given address is admin.\\n     * @return isAdmin admin or not.\\n     */\\n    function verifyAdminAddress(\\n        address adminAddress\\n    ) external view returns (bool);\\n}\\n\\ninterface POAPInterface {\\n    /**\\n     * @dev Emitted when NFT is minted.\\n     */\\n    event NewNFTMinted(uint256[], uint256[]);\\n\\n    /**\\n     * @dev Emitted when the lovehatePoll contract is updated, along with updated lovehatePoll contract address.\\n     */\\n    event LoveHatePollContractUpdated(address lovehatePollContract);\\n\\n    /**\\n     * @dev Mints a new NFT for the poll response.\\n     * @dev Only the lovehatePoll contract can call this function.\\n     * @param pollId The poll id for the NFT to be minted.\\n     * @param tokenUri The metadata uri for the poll data.\\n     * @param to The address to mint the NFT.\\n     */\\n    function mint(\\n        uint256 pollId,\\n        string calldata tokenUri,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Updates the lovehatePoll contract's address.\\n     * @dev Only owner can call this function.\\n     * @param newLoveHatePollContract The new address of the lovehatePoll contract.\\n     */\\n    function updateLoveHatePollContract(\\n        address newLoveHatePollContract\\n    ) external;\\n\\n    /**\\n     * @notice getTokenUri, function is used to check uri of specific token by giving pollId and tokenId.\\n     * @dev getTokenUri, function returns the token uri by giving pollId and tokenId.\\n     * @param pollId, pollId is given to the function to get corresponding uri.\\n     * @param tokenId, tokenId is given to the function to get corresponding uri.\\n     */\\n    function getTokenUri(\\n        uint256 pollId,\\n        uint tokenId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @dev return the lovehatePoll contract's address\\n     */\\n    function getLoveHatePollContract() external returns (address);\\n\\n    /**\\n     * @dev Pauses the contract, preventing certain functions from being executed.\\n     * @dev Only owner can call this function.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract, allowing the execution of all functions.\\n     * @dev Only owner can call this function.\\n     */\\n    function unpause() external;\\n}\\n\\nabstract contract LoveHatePollVerifiable is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    LoveHatePollInterface\\n{\\n    /**\\n     * @dev Default static value for percent\\n     * @notice here 10000 represents 100%\\n     */\\n    uint32 constant MAX_PERCENTAGE = 10000;\\n\\n    /**\\n     *  @dev Zero Address\\n     */\\n    address internal constant ZERO_ADDRESS = address(0);\\n\\n    /**\\n     * @dev Zero Bytes\\n     */\\n    bytes32 internal constant ZERO_BYTES_32 = bytes32(0);\\n\\n    /**\\n     * @dev Minimum poll fee for the contract\\n     */\\n    uint256 public minPollFee;\\n\\n    /**\\n     * @dev User pay this poll fee for creating polls\\n     */\\n    uint256 internal pollFee;\\n\\n    /**\\n     * @dev Burn percentage of the token at the time of end poll\\n     */\\n    uint256 internal burnPercent;\\n\\n    /**\\n     * @dev Tranfer percentage of the token at the time of end poll to treasury address\\n     */\\n    uint256 internal platformPercent;\\n\\n    /**\\n     * @dev Address of the treasury for handling funds.\\n     */\\n    address internal treasuryAddress;\\n\\n    /**\\n     * @dev Burnable LHINU contract address\\n     */\\n    ERC20BurnableUpgradeable internal lhinuContract;\\n\\n    /**\\n     * @dev POAP NFT contract address\\n     */\\n    POAPInterface internal POAPContract;\\n\\n    /**\\n     * @dev mapping to store lovehatePoll details at the time of poll creation\\n     */\\n    mapping(uint256 => PollCreateDetails) internal createPollsDetail;\\n\\n    /**\\n     * @dev mapping to store lovehatePoll details at the time of poll end\\n     */\\n    mapping(uint256 => PollEndDetails) internal endPollsDetail;\\n\\n    /**\\n     * @dev mapping to store if the voter has claimed the POAP NFT\\n     */\\n    mapping(uint256 => mapping(address => bool)) public isVoterNFTClaimed;\\n\\n    /**\\n     * @dev mapping to store if the winner voter claimed the poll reward\\n     */\\n    mapping(uint256 => mapping(address => bool)) public isPollRewardClaimed;\\n\\n    /**\\n     * @dev mapping to store if the competition winner winnings\\n     */\\n    mapping(uint256 => mapping(address => uint256)) public competitionWinnings;\\n\\n    /**\\n     * @dev mapping to store if address is an admin\\n     */\\n    mapping(address => bool) internal isAdmin;\\n\\n    /**\\n     * @dev Verify the poll creation data is valid or not.\\n     * @param polls An array of data which needs to be verified.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function verifyCreatePollDetails(\\n        PollCreateDetails[] calldata polls,\\n        uint256 timestamp\\n    )\\n        public\\n        view\\n        returns (string memory errorMessage, uint256 pollId, bool isPollValid)\\n    {\\n        if (polls.length < 1) return (\\\"Polls length is zero\\\", 0, false);\\n        if (timestamp < 1) return (\\\"Timestamp is zero\\\", 0, false);\\n\\n        for (uint8 index = 0; index < polls.length; index++) {\\n            PollCreateDetails calldata pollCreateDetail = polls[index];\\n            if (bytes(pollCreateDetail.title).length < 1)\\n                return (\\\"Poll title is empty\\\", pollCreateDetail.pollId, false);\\n            if (pollCreateDetail.choices.length < 1)\\n                return (\\n                    \\\"Poll choices is empty\\\",\\n                    pollCreateDetail.pollId,\\n                    false\\n                );\\n            if (timestamp > pollCreateDetail.startTime)\\n                return (\\\"Invalid start time\\\", pollCreateDetail.pollId, false);\\n            if (pollCreateDetail.startTime > pollCreateDetail.endTime)\\n                return (\\\"Invalid end time\\\", pollCreateDetail.pollId, false);\\n            if (pollCreateDetail.pollId < 1)\\n                return (\\\"Invalid poll Id\\\", pollCreateDetail.pollId, false);\\n            if (pollCreateDetail.creator == ZERO_ADDRESS)\\n                return (\\n                    \\\"Poll creator address is zero\\\",\\n                    pollCreateDetail.pollId,\\n                    false\\n                );\\n            if (createPollsDetail[pollCreateDetail.pollId].startTime > 0)\\n                return (\\n                    \\\"Poll id already exists\\\",\\n                    pollCreateDetail.pollId,\\n                    false\\n                );\\n        }\\n\\n        return (\\\"Valid create poll details\\\", polls[0].pollId, true);\\n    }\\n\\n    /**\\n     * @dev Verify the poll end data is valid or not.\\n     * @param polls An array of data which needs to be verified.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function verifyEndPollDetails(\\n        PollEndDetails[] calldata polls,\\n        uint256 timestamp\\n    )\\n        public\\n        view\\n        returns (string memory errorMessage, uint256 pollId, bool isPollValid)\\n    {\\n        if (polls.length < 1) return (\\\"Polls length is zero\\\", 0, false);\\n        if (timestamp < 1) return (\\\"Timestamp is zero\\\", 0, false);\\n\\n        for (uint8 index = 0; index < polls.length; index++) {\\n            PollEndDetails calldata pollEndDetail = polls[index];\\n            if (createPollsDetail[pollEndDetail.pollId].startTime < 1)\\n                return (\\\"Poll is not created\\\", pollEndDetail.pollId, false);\\n            if (endPollsDetail[pollEndDetail.pollId].isPollEnded)\\n                return (\\\"Poll is already ended\\\", pollEndDetail.pollId, false);\\n            if (timestamp < (createPollsDetail[pollEndDetail.pollId].endTime))\\n                return (\\n                    \\\"The provided timestamp is earlier than the end time\\\",\\n                    pollEndDetail.pollId,\\n                    false\\n                );\\n            if (bytes(pollEndDetail.pollMetadata).length < 1)\\n                return (\\\"Empty poll meta data\\\", pollEndDetail.pollId, false);\\n            if (bytes(pollEndDetail.winningChoice).length < 1)\\n                return (\\\"Empty winning choice\\\", pollEndDetail.pollId, false);\\n            if (pollEndDetail.fee < 1)\\n                return (\\\"Fee for poll is zero\\\", pollEndDetail.pollId, false);\\n            if (\\n                !((pollEndDetail.winnersMerkle != bytes32(0) &&\\n                    pollEndDetail.votersMerkle != bytes32(0)) ||\\n                    (pollEndDetail.winnersMerkle == bytes32(0) &&\\n                        pollEndDetail.votersMerkle == bytes32(0)))\\n            ) return (\\\"invalid merkle\\\", pollEndDetail.pollId, false);\\n            if (!pollEndDetail.isPollEnded)\\n                return (\\n                    \\\"Poll ended should be true\\\",\\n                    pollEndDetail.pollId,\\n                    false\\n                );\\n        }\\n\\n        return (\\\"Valid end poll details\\\", polls[0].pollId, true);\\n    }\\n\\n    /**\\n     * @dev Verify the claim reward data is valid or not.\\n     * @param pollsReward The data which needs to be verified.\\n     */\\n    function verifyClaimAllRewardDetails(\\n        PollClaimReward[] calldata pollsReward\\n    )\\n        public\\n        view\\n        returns (\\n            string memory errorMessage,\\n            uint256 pollId,\\n            bool isClaimRewardValid\\n        )\\n    {\\n        if (pollsReward.length < 1)\\n            return (\\\"Poll reward length is zero\\\", 0, false);\\n\\n        for (uint8 index = 0; index < pollsReward.length; index++) {\\n            PollClaimReward calldata pollClaimRewardDetail = pollsReward[index];\\n            if (pollClaimRewardDetail.pollId < 1)\\n                return (\\\"Poll id is zero\\\", pollClaimRewardDetail.pollId, false);\\n            if (isPollRewardClaimed[pollClaimRewardDetail.pollId][msg.sender])\\n                return (\\n                    \\\"Reward is already claimed for this poll id\\\",\\n                    pollClaimRewardDetail.pollId,\\n                    false\\n                );\\n            if (!endPollsDetail[pollClaimRewardDetail.pollId].isPollEnded)\\n                return (\\n                    \\\"Poll is not ended\\\",\\n                    pollClaimRewardDetail.pollId,\\n                    false\\n                );\\n            bytes32 encodedLeaf = keccak256(\\n                abi.encode(msg.sender, pollClaimRewardDetail.amount)\\n            );\\n            bool isValid = MerkleProofUpgradeable.verify(\\n                pollClaimRewardDetail.merkleProof,\\n                endPollsDetail[pollClaimRewardDetail.pollId].winnersMerkle,\\n                encodedLeaf\\n            );\\n            if (!isValid) {\\n                return (\\n                    \\\"Invalid merkle proof\\\",\\n                    pollClaimRewardDetail.pollId,\\n                    false\\n                );\\n            }\\n        }\\n        return (\\\"Valid reward claim details\\\", pollsReward[0].pollId, true);\\n    }\\n\\n    /**\\n     * @dev Verify the claim NFT data is valid or not.\\n     * @param pollsClaimNFT The data which needs to be verified.\\n     */\\n    function verifyClaimAllNFTDetails(\\n        PollClaimNFT[] calldata pollsClaimNFT\\n    )\\n        public\\n        view\\n        returns (\\n            string memory errorMessage,\\n            uint256 pollId,\\n            bool isClaimNFTValid\\n        )\\n    {\\n        if (pollsClaimNFT.length < 1) return (\\\"Poll length is zero\\\", 0, false);\\n        for (uint8 index = 0; index < pollsClaimNFT.length; index++) {\\n            PollClaimNFT calldata pollClaimAllNFTDetail = pollsClaimNFT[index];\\n            if (pollClaimAllNFTDetail.pollId < 1)\\n                return (\\\"Poll id is zero\\\", pollClaimAllNFTDetail.pollId, false);\\n            if (isVoterNFTClaimed[pollClaimAllNFTDetail.pollId][msg.sender])\\n                return (\\n                    \\\"NFT is already claimed for this poll id\\\",\\n                    pollClaimAllNFTDetail.pollId,\\n                    false\\n                );\\n            if (!endPollsDetail[pollClaimAllNFTDetail.pollId].isPollEnded)\\n                return (\\n                    \\\"Poll is not ended\\\",\\n                    pollClaimAllNFTDetail.pollId,\\n                    false\\n                );\\n            bytes32 encodedLeaf = keccak256(abi.encode(msg.sender));\\n            bool isValid = MerkleProofUpgradeable.verify(\\n                pollClaimAllNFTDetail.merkleProof,\\n                endPollsDetail[pollClaimAllNFTDetail.pollId].votersMerkle,\\n                encodedLeaf\\n            );\\n            if (!isValid) {\\n                return (\\n                    \\\"Invalid merkle proof\\\",\\n                    pollClaimAllNFTDetail.pollId,\\n                    false\\n                );\\n            }\\n        }\\n        return (\\\"Valid NFT claim details\\\", pollsClaimNFT[0].pollId, true);\\n    }\\n\\n    /**\\n     * @dev Verify the transfer competition winning is valid or not.\\n     * @param endCompetitionDetails The data which needs to be verified.\\n     * @param balanceOfContract The balance of the smart contract.\\n     */\\n    function verifyEndCompetition(\\n        EndCompetitionDetails[] calldata endCompetitionDetails,\\n        uint256 balanceOfContract\\n    )\\n        public\\n        pure\\n        returns (string memory errorMessage, bool isCompetitionValid)\\n    {\\n        if (endCompetitionDetails.length < 1)\\n            return (\\\"Competition details length is zero\\\", false);\\n\\n        for (uint8 index = 0; index < endCompetitionDetails.length; index++) {\\n            EndCompetitionDetails\\n                calldata endCompetitionDetail = endCompetitionDetails[index];\\n            for (\\n                uint256 winnerIndex = 0;\\n                winnerIndex < endCompetitionDetail.toAddress.length;\\n                winnerIndex++\\n            ) {\\n                if (endCompetitionDetail.toAddress[winnerIndex] == ZERO_ADDRESS)\\n                    return (\\\"to address is zero address\\\", false);\\n            }\\n            if (endCompetitionDetail.amount < 1)\\n                return (\\\"Transfer amount is zero\\\", false);\\n            if (endCompetitionDetail.amount > balanceOfContract)\\n                return (\\\"Contract does not have sufficient balance\\\", false);\\n            balanceOfContract -= endCompetitionDetail.amount;\\n        }\\n        return (\\\"Valid transfer competition winning details\\\", true);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract, preventing certain functions from being executed.\\n     * @dev Only owner can call this function.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract, allowing the execution of all functions.\\n     * @dev Only owner can call this function.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\ncontract LoveHatePoll is LoveHatePollVerifiable {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev The initialize function sets the owner of the contract at the time of deployment\\n     * @param minFee - Minimum fee for the contract.\\n     * @param percentForBurn - Percent for burning the token.\\n     * @param percentForPlatform - Percent for transfer the token to treasury wallet address.\\n     * @param feeForPoll - Fee for the poll creation, User pays this fee at the time of poll creation.\\n     * @param lhinuContractAddress - Address of the LHINU contract used for paying the poll fee and reward transfer.\\n     * @param poapContractAddress - Address of the POAP contract used for minting the NFT to voter.\\n     * @param adminWalletAddress - Address of the admin of the contract.\\n     * @param treasuryWalletAddress - Address of the treasury for handling funds.\\n     */\\n\\n    function initialize(\\n        uint256 minFee,\\n        uint256 percentForBurn,\\n        uint256 percentForPlatform,\\n        uint256 feeForPoll,\\n        address lhinuContractAddress,\\n        address poapContractAddress,\\n        address adminWalletAddress,\\n        address treasuryWalletAddress\\n    ) public initializer {\\n        require(minFee > 0, \\\"LoveHatePoll: Minimum Fee is zero\\\");\\n        require(\\n            (minFee - 1) < feeForPoll,\\n            \\\"LoveHatePoll: Fee should be greater than minimum fee\\\"\\n        );\\n        require(percentForBurn > 0, \\\"LoveHatePoll: Burn percent is zero\\\");\\n        require(\\n            percentForPlatform > 0,\\n            \\\"LoveHatePoll: Tranfer percent is zero\\\"\\n        );\\n        require(\\n            lhinuContractAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: LHINU address is the zero address\\\"\\n        );\\n        require(\\n            poapContractAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: POAP address is the zero address\\\"\\n        );\\n        require(\\n            adminWalletAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: Admin address is the zero address\\\"\\n        );\\n        require(\\n            treasuryWalletAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: Treasury address is the zero address\\\"\\n        );\\n        burnPercent = percentForBurn;\\n        platformPercent = percentForPlatform;\\n        pollFee = feeForPoll;\\n        minPollFee = minFee;\\n        lhinuContract = ERC20BurnableUpgradeable(lhinuContractAddress);\\n        POAPContract = POAPInterface(poapContractAddress);\\n        isAdmin[adminWalletAddress] = true;\\n        treasuryAddress = treasuryWalletAddress;\\n        __Pausable_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyCreatePollDetails function\\n     * to authenticate the details of the polls.\\n     * @dev Creates a new poll with the specified parameters.\\n     * @dev Only owner or admin can call this function.\\n     * @param polls An array of data for the new polls to be created.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function createPolls(\\n        PollCreateDetails[] calldata polls,\\n        uint256 timestamp\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        (, , bool isPollValid) = verifyCreatePollDetails(polls, timestamp);\\n        require(isPollValid, \\\"LoveHatePoll: Invalid polls detail\\\");\\n        uint256[] memory successPollIds = new uint256[](polls.length);\\n\\n        for (uint8 index = 0; index < polls.length; index++) {\\n            uint256 pollId = polls[index].pollId;\\n            createPollsDetail[pollId] = polls[index];\\n            successPollIds[index] = pollId;\\n        }\\n        emit PollsCreated(successPollIds);\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyEndPollDetails function\\n     * to authenticate the details of the polls.\\n     * @dev Concludes the specified polls by providing the necessary information.\\n     * @dev Only owner or admin can call this function.\\n     * @param polls An array of polls to be concluded.\\n     * @param timestamp A timestamp from the server.\\n     */\\n    function endPolls(\\n        PollEndDetails[] calldata polls,\\n        uint256 timestamp\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        (, , bool isPollValid) = verifyEndPollDetails(polls, timestamp);\\n        require(isPollValid, \\\"LoveHatePoll: Invalid polls detail\\\");\\n        uint256[] memory successPollIds = new uint256[](polls.length);\\n        uint256 totalBurnAmount = 0;\\n        uint256 totalPlatformFee = 0;\\n        for (uint8 index = 0; index < polls.length; index++) {\\n            PollEndDetails calldata pollDetail = polls[index];\\n            endPollsDetail[pollDetail.pollId] = pollDetail;\\n            totalBurnAmount += (pollDetail.fee * burnPercent) / MAX_PERCENTAGE;\\n            if (pollDetail.winnersMerkle == ZERO_BYTES_32) {\\n                totalPlatformFee +=\\n                    (pollDetail.fee * (MAX_PERCENTAGE - burnPercent)) /\\n                    MAX_PERCENTAGE;\\n            } else {\\n                totalPlatformFee +=\\n                    (pollDetail.fee * platformPercent) /\\n                    MAX_PERCENTAGE;\\n            }\\n            successPollIds[index] = pollDetail.pollId;\\n        }\\n        lhinuContract.burn(totalBurnAmount);\\n        require(\\n            lhinuContract.transfer(treasuryAddress, totalPlatformFee),\\n            \\\"LoveHatePoll: Transfer token error\\\"\\n        );\\n        emit PollsEnded(successPollIds);\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyClaimAllRewardDetails function\\n     * to authenticate the reward details.\\n     * @dev Enables a user to claim multiple rewards if the user's choice is the winning one.\\n     * @param pollsReward An array of eligible poll rewards.\\n     */\\n    function claimAllRewards(\\n        PollClaimReward[] calldata pollsReward\\n    ) public override whenNotPaused nonReentrant {\\n        (, , bool isClaimRewardValid) = verifyClaimAllRewardDetails(\\n            pollsReward\\n        );\\n        require(\\n            isClaimRewardValid,\\n            \\\"LoveHatePoll: Invalid reward claims detail\\\"\\n        );\\n        uint256[] memory successPollIds = new uint256[](pollsReward.length);\\n        uint256 totalTransferAmount = 0;\\n        for (uint8 index = 0; index < pollsReward.length; index++) {\\n            PollClaimReward calldata pollRewardDetail = pollsReward[index];\\n            totalTransferAmount += pollRewardDetail.amount;\\n            isPollRewardClaimed[pollRewardDetail.pollId][_msgSender()] = true;\\n            successPollIds[index] = pollRewardDetail.pollId;\\n        }\\n        if (totalTransferAmount > 0) {\\n            uint256 balanceOfContract = lhinuContract.balanceOf(address(this));\\n            require(\\n                balanceOfContract > totalTransferAmount,\\n                \\\"LoveHatePoll: Contract does not have sufficient balance\\\"\\n            );\\n            require(\\n                lhinuContract.transfer(_msgSender(), totalTransferAmount),\\n                \\\"LoveHatePoll: Transfer token error\\\"\\n            );\\n            emit ClaimTransferSuccessful(successPollIds);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyClaimAllNFTDetails function\\n     * to authenticate the details of the NFT reward.\\n     * @dev Allows a user to claim multiple NFTs.\\n     * @param pollsClaimNFT An array of poll details for claiming its NFTs.\\n     */\\n    function claimAllNFTs(\\n        PollClaimNFT[] calldata pollsClaimNFT\\n    ) public override whenNotPaused nonReentrant {\\n        (, , bool isClaimNFTValid) = verifyClaimAllNFTDetails(pollsClaimNFT);\\n        require(isClaimNFTValid, \\\"LoveHatePoll: Invalid NFT claims detail\\\");\\n        uint256[] memory successPollIds = new uint256[](pollsClaimNFT.length);\\n        uint256[] memory successTokenIds = new uint256[](pollsClaimNFT.length);\\n        for (uint8 index = 0; index < pollsClaimNFT.length; index++) {\\n            PollClaimNFT calldata pollNFTDetail = pollsClaimNFT[index];\\n            isVoterNFTClaimed[pollNFTDetail.pollId][_msgSender()] = true;\\n            uint256 tokenId = POAPContract.mint(\\n                pollNFTDetail.pollId,\\n                endPollsDetail[pollNFTDetail.pollId].pollMetadata,\\n                _msgSender()\\n            );\\n            successPollIds[index] = pollNFTDetail.pollId;\\n            successTokenIds[index] = tokenId;\\n        }\\n        emit NFTTransferSuccessful(successPollIds, successTokenIds);\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyClaimAllRewardDetails function\\n     * to authenticate the reward details.\\n     * @notice This function utilizes the verifyClaimAllNFTDetails function\\n     * to authenticate the details of the NFT reward.\\n     * @dev Enables a user to claim multiple rewards and claim NFTs if the user's choice is the winning one.\\n     * @param pollsReward An array of eligible poll rewards.\\n     * @param pollsClaimNFT An array of poll details for claiming its NFTs.\\n     */\\n    function claimAllRewardsAndNFTs(\\n        PollClaimReward[] calldata pollsReward,\\n        PollClaimNFT[] calldata pollsClaimNFT\\n    ) external override whenNotPaused {\\n        claimAllRewards(pollsReward);\\n        claimAllNFTs(pollsClaimNFT);\\n    }\\n\\n    /**\\n     * @notice This function utilizes the verifyEndCompetition\\n     * function to authenticate the information of the competition winner.\\n     * @dev Only owner or admin can call this function.\\n     * @param endCompetitionDetails Contains end competition details.\\n     */\\n    function endCompetition(\\n        EndCompetitionDetails[] calldata endCompetitionDetails\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        (, bool isValid) = verifyEndCompetition(\\n            endCompetitionDetails,\\n            lhinuContract.balanceOf(address(this))\\n        );\\n        require(isValid, \\\"LoveHatePoll: Invalid winning competitions detail\\\");\\n        uint256 totalBurnAmount = 0;\\n        uint256 totalPlatformFee = 0;\\n        uint256[] memory successCompetitionIds = new uint256[](\\n            endCompetitionDetails.length\\n        );\\n        for (uint8 index = 0; index < endCompetitionDetails.length; index++) {\\n            EndCompetitionDetails\\n                calldata endCompetitionDetail = endCompetitionDetails[index];\\n            uint256 burnAmount = (endCompetitionDetail.amount * burnPercent) /\\n                MAX_PERCENTAGE;\\n            uint256 platformFee = (endCompetitionDetail.amount *\\n                platformPercent) / MAX_PERCENTAGE;\\n            uint256 competitionWinningAmount = endCompetitionDetail.amount -\\n                platformFee -\\n                burnAmount;\\n            totalBurnAmount += burnAmount;\\n            totalPlatformFee += platformFee;\\n            uint256 individualWinnngAmount = competitionWinningAmount /\\n                endCompetitionDetail.toAddress.length;\\n            for (\\n                uint256 winnerIndex = 0;\\n                winnerIndex < endCompetitionDetail.toAddress.length;\\n                winnerIndex++\\n            ) {\\n                competitionWinnings[endCompetitionDetail.competitionId][\\n                    endCompetitionDetail.toAddress[winnerIndex]\\n                ] = individualWinnngAmount;\\n                competitionWinningAmount -= individualWinnngAmount;\\n            }\\n\\n            totalPlatformFee += competitionWinningAmount;\\n\\n            successCompetitionIds[index] = endCompetitionDetail.competitionId;\\n        }\\n        lhinuContract.burn(totalBurnAmount);\\n        require(\\n            lhinuContract.transfer(treasuryAddress, totalPlatformFee),\\n            \\\"LoveHatePoll: Transfer token error\\\"\\n        );\\n        emit CompetitionsEnded(successCompetitionIds);\\n    }\\n\\n    /**\\n     * @dev Allows a user to claim multiple competition reward.\\n     * @param competitonIds An array of competition ids.\\n     */\\n    function claimCompetitionReward(\\n        uint256[] memory competitonIds\\n    ) external override whenNotPaused nonReentrant {\\n        require(\\n            competitonIds.length > 0,\\n            \\\"LoveHatePoll: Competition Ids length is zero\\\"\\n        );\\n        uint256 totalWinning = 0;\\n        for (uint256 index = 0; index < competitonIds.length; index++) {\\n            require(\\n                competitionWinnings[competitonIds[index]][_msgSender()] > 0,\\n                \\\"LoveHatePoll: Not eligible for competition reward\\\"\\n            );\\n            totalWinning += competitionWinnings[competitonIds[index]][\\n                _msgSender()\\n            ];\\n            competitionWinnings[competitonIds[index]][_msgSender()] = 0;\\n        }\\n        require(\\n            lhinuContract.transfer(_msgSender(), totalWinning),\\n            \\\"LoveHatePoll: Transfer token error\\\"\\n        );\\n        emit ClaimCompetitionRewardSuccessful(competitonIds);\\n    }\\n\\n    /**\\n     * @notice This function will withdraw to treasury address of the contract.\\n     * @dev Withdraw the LHINU from the contract.\\n     * @dev Only owner can call this function.\\n     * @param amount Sending LHINU amount.\\n     */\\n    function LHINUWithdraw(\\n        uint256 amount\\n    ) external override onlyOwner whenNotPaused nonReentrant {\\n        uint256 balanceOfContract = lhinuContract.balanceOf(address(this));\\n        require(amount > 0, \\\"LoveHatePoll: Amount is zero\\\");\\n        require(\\n            balanceOfContract > (amount - 1),\\n            \\\"LoveHatePoll: Contract does not have sufficient balance\\\"\\n        );\\n        require(\\n            lhinuContract.transfer(treasuryAddress, amount),\\n            \\\"LoveHatePoll: Transfer token error\\\"\\n        );\\n        emit LHINUWithdrawSuccessful(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Updates the poll fee with the specified amount.\\n     * @dev Only owner or admin can call this function.\\n     * @param fee The new amount of fee for creation of a poll.\\n     */\\n    function updatePollFee(\\n        uint256 fee\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        require(\\n            (minPollFee - 1) < fee,\\n            \\\"LoveHatePoll: Fee should be greater than minimum fee\\\"\\n        );\\n        require(\\n            fee != pollFee,\\n            \\\"LoveHatePoll: Fee shouldn't be same as previous\\\"\\n        );\\n        pollFee = fee;\\n        emit PollFeeUpdated(pollFee);\\n    }\\n\\n    /**\\n     * @dev Updates the LHINU contract address with the specified address.\\n     * @dev Only owner or admin can call this function.\\n     * @param lhinuContractAddress The new address of the LHINU contract.\\n     */\\n    function updateLHINUContract(\\n        address lhinuContractAddress\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        require(\\n            lhinuContractAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: LHINU address is the zero address\\\"\\n        );\\n        require(\\n            lhinuContractAddress != address(lhinuContract),\\n            \\\"LoveHatePoll: Same as pervious address\\\"\\n        );\\n        lhinuContract = ERC20BurnableUpgradeable(lhinuContractAddress);\\n        emit LHINUContractUpdated(address(lhinuContract));\\n    }\\n\\n    /**\\n     * @dev Updates the POAP contract address with the specified address.\\n     * @dev Only owner or admin can call this function.\\n     * @param POAPContractAddress The new address of the POAP contract.\\n     */\\n    function updatePOAPContract(\\n        address POAPContractAddress\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        require(\\n            POAPContractAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: POAP address is the zero address\\\"\\n        );\\n        require(\\n            POAPContractAddress != address(POAPContract),\\n            \\\"LoveHatePoll: Same as pervious address\\\"\\n        );\\n        POAPContract = POAPInterface(POAPContractAddress);\\n        emit POAPContractUpdated(address(POAPContract));\\n    }\\n\\n    /**\\n     * @dev Updates the burn percentage for the contract.\\n     * @dev Only owner or admin can call this function.\\n     * @param percentForBurn The new burn percent for the token.\\n     */\\n    function updateBurnPercent(\\n        uint16 percentForBurn\\n    ) external override onlyAdminOrOwner whenNotPaused nonReentrant {\\n        require(percentForBurn > 0, \\\"LoveHatePoll: Burn percent is zero\\\");\\n        require(\\n            percentForBurn != burnPercent,\\n            \\\"LoveHatePoll: Burn percent shouldn't be same as previous\\\"\\n        );\\n        burnPercent = percentForBurn;\\n        emit BurnFeeUpdated(burnPercent);\\n    }\\n\\n    /**\\n     * @dev Updates the treasury address of the contract.\\n     * @dev Only owner can call this function.\\n     * @param treasuryWalletAddress Address of the treasury for handling funds.\\n     */\\n    function updateTreasuryAddress(\\n        address treasuryWalletAddress\\n    ) external override onlyOwner whenNotPaused nonReentrant {\\n        require(\\n            treasuryWalletAddress != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: Treasury address is the zero address\\\"\\n        );\\n        require(\\n            treasuryWalletAddress != treasuryAddress,\\n            \\\"LoveHatePoll: Same as pervious address\\\"\\n        );\\n        treasuryAddress = treasuryWalletAddress;\\n        emit TreasuryAddressUpdated(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Updates the transfer percent.\\n     * @dev Only owner can call this function.\\n     * @param percentForPlatform Percent of the token tranfer to treasury.\\n     */\\n    function updateTransferPercent(\\n        uint256 percentForPlatform\\n    ) external override onlyOwner whenNotPaused nonReentrant {\\n        require(\\n            percentForPlatform > 0,\\n            \\\"LoveHatePoll: Tranfer percent is zero\\\"\\n        );\\n        require(\\n            platformPercent != percentForPlatform,\\n            \\\"LoveHatePoll: Tranfer percent shouldn't be same as previous\\\"\\n        );\\n        platformPercent = percentForPlatform;\\n        emit TranferPercentUpdated(platformPercent);\\n    }\\n\\n    /**\\n     * @dev Adds a new admin address for the contract.\\n     * @dev Only owner can call this function.\\n     * @param addressOfAdmin The new admin address for the contract.\\n     */\\n    function addAdmin(\\n        address addressOfAdmin\\n    ) external override onlyOwner whenNotPaused nonReentrant {\\n        require(\\n            !isAdmin[addressOfAdmin],\\n            \\\"LoveHatePoll: Address already admin\\\"\\n        );\\n        require(\\n            addressOfAdmin != ZERO_ADDRESS,\\n            \\\"LoveHatePoll: Admin address is the zero address\\\"\\n        );\\n        isAdmin[addressOfAdmin] = true;\\n        emit AdminAdded(addressOfAdmin);\\n    }\\n\\n    /**\\n     * @dev Remove the admin address for the contract.\\n     * @dev Only owner can call this function.\\n     * @param addressOfAdmin The admin address to be removed from the contract.\\n     */\\n    function removeAdmin(\\n        address addressOfAdmin\\n    ) external override onlyOwner whenNotPaused nonReentrant {\\n        require(isAdmin[addressOfAdmin], \\\"LoveHatePoll: Address not admin\\\");\\n        isAdmin[addressOfAdmin] = false;\\n        emit AdminRemoved(addressOfAdmin);\\n    }\\n\\n    /**\\n     * @dev Retrieves the poll detail.\\n     * @param id Poll id to fetch the poll details.\\n     * @return PollDetail The poll detail.\\n     */\\n    function getPollDetail(\\n        uint256 id\\n    ) external view override returns (PollDetails memory) {\\n        return\\n            PollDetails({\\n                createPollDetails: createPollsDetail[id],\\n                endPollDetails: endPollsDetail[id]\\n            });\\n    }\\n\\n    /**\\n     * @dev Retrieves the poll fee.\\n     * @return pollFee The poll fee.\\n     */\\n    function getPollFee() external view override returns (uint256) {\\n        return pollFee;\\n    }\\n\\n    /**\\n     * @dev Retrieves the burn percent of the LHINU.\\n     * @return burnPercent The burn percent.\\n     */\\n    function getBurnPercent() external view override returns (uint256) {\\n        return burnPercent;\\n    }\\n\\n    /**\\n     * @dev Retrieves the platform percent.\\n     * @return platformPercent The plaform percent.\\n     */\\n    function getPlatformPercent() external view override returns (uint256) {\\n        return platformPercent;\\n    }\\n\\n    /**\\n     * @dev Retrieves the address of the treasury.\\n     * @return treasuryAddress The address of the treasury.\\n     */\\n    function getTreasuryAddress() external view override returns (address) {\\n        return address(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Retrieves the address of the LHINU contract.\\n     * @return lhinuContract The address of the LHINU contract.\\n     */\\n    function getLHINUAddress() external view override returns (address) {\\n        return address(lhinuContract);\\n    }\\n\\n    /**\\n     * @dev Retrieves the address of the POAP contract.\\n     * @return POAPContract The address of the POAP contract.\\n     */\\n    function getPOAPAddress() external view override returns (address) {\\n        return address(POAPContract);\\n    }\\n\\n    /**\\n     * @dev Checks if the given address is admin.\\n     * @return isAdmin admin or not.\\n     */\\n    function verifyAdminAddress(\\n        address adminAddress\\n    ) external view override returns (bool) {\\n        return isAdmin[adminAddress];\\n    }\\n\\n    /**\\n     * @notice OnlyAdminOrOwner modifer allows only admin address or owner address to execute the funtions.\\n     */\\n    modifier onlyAdminOrOwner() {\\n        require(\\n            (_msgSender() == owner() || isAdmin[_msgSender()]),\\n            \\\"LoveHatePoll: Caller not admin or owner\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BurnFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"competitionIds\",\"type\":\"uint256[]\"}],\"name\":\"ClaimCompetitionRewardSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pollIds\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"competitionIds\",\"type\":\"uint256[]\"}],\"name\":\"CompetitionsEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lhinuContract\",\"type\":\"address\"}],\"name\":\"LHINUContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"LHINUWithdrawSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pollIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"NFTTransferSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"POAPContract\",\"type\":\"address\"}],\"name\":\"POAPContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PollFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pollIds\",\"type\":\"uint256[]\"}],\"name\":\"PollsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pollIds\",\"type\":\"uint256[]\"}],\"name\":\"PollsEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentForPlatform\",\"type\":\"uint256\"}],\"name\":\"TranferPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"POAPContract\",\"type\":\"address\"}],\"name\":\"TreasuryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LHINUWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOfAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimNFT[]\",\"name\":\"pollsClaimNFT\",\"type\":\"tuple[]\"}],\"name\":\"claimAllNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimReward[]\",\"name\":\"pollsReward\",\"type\":\"tuple[]\"}],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimReward[]\",\"name\":\"pollsReward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimNFT[]\",\"name\":\"pollsClaimNFT\",\"type\":\"tuple[]\"}],\"name\":\"claimAllRewardsAndNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"competitonIds\",\"type\":\"uint256[]\"}],\"name\":\"claimCompetitionReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"competitionWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"choices\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct LoveHatePollInterface.PollCreateDetails[]\",\"name\":\"polls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"createPolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"competitionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toAddress\",\"type\":\"address[]\"}],\"internalType\":\"struct LoveHatePollInterface.EndCompetitionDetails[]\",\"name\":\"endCompetitionDetails\",\"type\":\"tuple[]\"}],\"name\":\"endCompetition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"winningChoice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pollMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winnersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"votersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isPollEnded\",\"type\":\"bool\"}],\"internalType\":\"struct LoveHatePollInterface.PollEndDetails[]\",\"name\":\"polls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"endPolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLHINUAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPOAPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPollDetail\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"choices\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct LoveHatePollInterface.PollCreateDetails\",\"name\":\"createPollDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"winningChoice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pollMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winnersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"votersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isPollEnded\",\"type\":\"bool\"}],\"internalType\":\"struct LoveHatePollInterface.PollEndDetails\",\"name\":\"endPollDetails\",\"type\":\"tuple\"}],\"internalType\":\"struct LoveHatePollInterface.PollDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPollFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentForPlatform\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForPoll\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lhinuContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poapContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryWalletAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPollRewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVoterNFTClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPollFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOfAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percentForBurn\",\"type\":\"uint16\"}],\"name\":\"updateBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lhinuContractAddress\",\"type\":\"address\"}],\"name\":\"updateLHINUContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"POAPContractAddress\",\"type\":\"address\"}],\"name\":\"updatePOAPContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updatePollFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentForPlatform\",\"type\":\"uint256\"}],\"name\":\"updateTransferPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryWalletAddress\",\"type\":\"address\"}],\"name\":\"updateTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"verifyAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimNFT[]\",\"name\":\"pollsClaimNFT\",\"type\":\"tuple[]\"}],\"name\":\"verifyClaimAllNFTDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimNFTValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoveHatePollInterface.PollClaimReward[]\",\"name\":\"pollsReward\",\"type\":\"tuple[]\"}],\"name\":\"verifyClaimAllRewardDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimRewardValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"choices\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct LoveHatePollInterface.PollCreateDetails[]\",\"name\":\"polls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"verifyCreatePollDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPollValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"competitionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toAddress\",\"type\":\"address[]\"}],\"internalType\":\"struct LoveHatePollInterface.EndCompetitionDetails[]\",\"name\":\"endCompetitionDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfContract\",\"type\":\"uint256\"}],\"name\":\"verifyEndCompetition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCompetitionValid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"winningChoice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pollMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winnersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"votersMerkle\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isPollEnded\",\"type\":\"bool\"}],\"internalType\":\"struct LoveHatePollInterface.PollEndDetails[]\",\"name\":\"polls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"verifyEndPollDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPollValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LoveHatePoll", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}