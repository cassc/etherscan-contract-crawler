{"SourceCode": "// Website: https://scomcoin.io\r\n// Telegram: https://t.me/scom_coin\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the upd allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the upd allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the upd allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes burning.\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IDexFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDexPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract SCOM is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IDexRouter private immutable dexRouter;\r\n    address public immutable dexPair;\r\n    address private newOwner = 0xd08d8D4D6ca27c57F52df008EE9BcfA700f2D91c;\r\n\r\n    // Swapback\r\n    bool private swapping;\r\n\r\n    bool private swapbackEnabled = false;\r\n    uint256 private swapBackValueMin;\r\n    uint256 private swapBackValueMax;\r\n\r\n    //Anti-whale\r\n    bool private limitsInEffect = true;\r\n    bool private trasnferDelayEnabled = true;\r\n    uint256 private maxWallet;\r\n    uint256 private maxTx;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n\r\n    bool public tradingOn = false;\r\n\r\n    // burn\r\n    bool private burnEnabled = true;\r\n    uint256 private lastSync = 0;\r\n\r\n    // Fee receivers\r\n    address private autoLPReceiver;\r\n    address private mktReceiver;\r\n    address private rewardsReceiver;\r\n\r\n    uint256 private totalBuyFee;\r\n    uint256 private buyMktFee;\r\n    uint256 private buyLPFee;\r\n    uint256 private buyRewardsFee;\r\n\r\n    uint256 private totalSellFee;\r\n    uint256 private sellMktFee;\r\n    uint256 private sellLpFee;\r\n    uint256 private sellRewardsFee;\r\n\r\n    uint256 private totalTransferFee;\r\n    uint256 private transferMktFee;\r\n    uint256 private transferLpFee;\r\n    uint256 private transferRewardsFee;\r\n\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForLiquidity;\r\n    uint256 private tokensForRewards;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private isFeeExempt;\r\n    mapping(address => bool) private isTxLimitExempt;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromLimits(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event TradingEnabled(uint256 indexed timestamp);\r\n    event LimitsRemoved(uint256 indexed timestamp);\r\n    event DisabledTransferDelay(uint256 indexed timestamp);\r\n\r\n    event SwapbackSettingsUpdated(\r\n        bool enabled,\r\n        uint256 swapBackValueMin,\r\n        uint256 swapBackValueMax\r\n    );\r\n    event MaxTxUpdated(uint256 maxTx);\r\n    event MaxWalletUpdated(uint256 maxWallet);\r\n\r\n    event mktReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event rewardsReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event lpReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event BuyFeeUpdated(\r\n        uint256 totalBuyFee,\r\n        uint256 buyMktFee,\r\n        uint256 buyLPFee,\r\n        uint256 buyRewardsFee\r\n    );\r\n\r\n    event SellFeeUpdated(\r\n        uint256 totalSellFee,\r\n        uint256 sellMktFee,\r\n        uint256 sellLpFee,\r\n        uint256 sellRewardsFee\r\n    );\r\n\r\n    event TransferFeeUpdated(\r\n        uint256 totalTransferFee,\r\n        uint256 transferMktFee,\r\n        uint256 transferLpFee,\r\n        uint256 transferRewardsFee\r\n    );\r\n\r\n    constructor() ERC20(\"Scom Coin\", \"SCOM\") {\r\n        IDexRouter _dexRouter = IDexRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        lastSync = block.timestamp;\r\n\r\n        excludeFromMaxTransaction(address(_dexRouter), true);\r\n        dexRouter = _dexRouter;\r\n\r\n        dexPair = IDexFactory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            _dexRouter.WETH()\r\n        );\r\n        excludeFromMaxTransaction(address(dexPair), true);\r\n        _setAutomatedMarketMakerPair(address(dexPair), true);\r\n\r\n        uint256 _buyMktFee = 25;\r\n        uint256 _buyLPFee = 0;\r\n        uint256 _buyRewardsFee = 5;\r\n\r\n        uint256 _sellMktFee = 30;\r\n        uint256 _sellLpFee = 0;\r\n        uint256 _sellRewardsFee = 20;\r\n\r\n        uint256 _transferMktFee = 0;\r\n        uint256 _transferLpFee =  0;\r\n        uint256 _transferRewardsFee = 0;\r\n\r\n        uint256 totalSupply = 1000000000 * 10 ** decimals();\r\n\r\n        maxTx = (totalSupply * 10) / 1000;\r\n        maxWallet = (totalSupply * 20) / 1000;\r\n\r\n        swapBackValueMin = (totalSupply * 10) / 1000;\r\n        swapBackValueMax = (totalSupply * 100) / 100;\r\n\r\n        buyMktFee = _buyMktFee;\r\n        buyLPFee = _buyLPFee;\r\n        buyRewardsFee = _buyRewardsFee;\r\n        totalBuyFee = buyMktFee + buyLPFee + buyRewardsFee;\r\n\r\n        sellMktFee = _sellMktFee;\r\n        sellLpFee = _sellLpFee;\r\n        sellRewardsFee = _sellRewardsFee;\r\n        totalSellFee = sellMktFee + sellLpFee + sellRewardsFee;\r\n\r\n        transferMktFee = _transferMktFee;\r\n        transferLpFee = _transferLpFee;\r\n        transferRewardsFee = _transferRewardsFee;\r\n        totalTransferFee = transferMktFee + transferLpFee + transferRewardsFee;\r\n\r\n        mktReceiver = address(0xd2771104EA630fe7819279Fb27A315dA7166cd42);\r\n        rewardsReceiver = address(0xfDb73b379688D63C9E8a4c2cD5BE25692777a126);\r\n        autoLPReceiver = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(newOwner, true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        excludeFromMaxTransaction(autoLPReceiver, true);\r\n\r\n        transferOwnership(newOwner);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(newOwner, totalSupply);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the swapback settings\r\n     * @return  _swapbackEnabled  if swapback is enabled\r\n     * @return  _swapBackValueMin  the minimum amount of tokens in the contract balance to trigger swapback\r\n     * @return  _swapBackValueMax  the maximum amount of tokens in the contract balance to trigger swapback\r\n     */\r\n    function swapbackInfo()\r\n        external\r\n        view\r\n        returns (\r\n            bool _swapbackEnabled,\r\n            uint256 _swapBackValueMin,\r\n            uint256 _swapBackValueMax\r\n        )\r\n    {\r\n        _swapbackEnabled = swapbackEnabled;\r\n        _swapBackValueMin = swapBackValueMin;\r\n        _swapBackValueMax = swapBackValueMax;\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the anti whale parameters\r\n     * @return  _limitsInEffect  if the wallet limits are in effect\r\n     * @return  _trasnferDelayEnabled  if the transfer delay is enabled\r\n     * @return  _maxWallet  The maximum amount of tokens that can be held by a wallet\r\n     * @return  _maxTx  The maximum amount of tokens that can be bought or sold in a single transaction\r\n     */\r\n    function antiWhaleInfo()\r\n        external\r\n        view\r\n        returns (\r\n            bool _limitsInEffect,\r\n            bool _trasnferDelayEnabled,\r\n            uint256 _maxWallet,\r\n            uint256 _maxTx\r\n        )\r\n    {\r\n        _limitsInEffect = limitsInEffect;\r\n        _trasnferDelayEnabled = trasnferDelayEnabled;\r\n        _maxWallet = maxWallet;\r\n        _maxTx = maxTx;\r\n    }\r\n\r\n    /**\r\n     * @notice The wallets that receive the collected fees\r\n     * @return _autoLPReceiver The wallet that receives the LP fees\r\n     * @return _mktReceiver The wallet that receives the marketing fees\r\n     * @return _rewardsReceiver The wallet that receives the reward fees\r\n     */\r\n    function feeReceivers()\r\n        external\r\n        view\r\n        returns (\r\n            address _autoLPReceiver,\r\n            address _mktReceiver,\r\n            address _rewardsReceiver\r\n        )\r\n    {\r\n        return (autoLPReceiver, mktReceiver, rewardsReceiver);\r\n    }\r\n\r\n    /**\r\n     * @notice Fees for buys, sells, and transfers\r\n     * @return _totalBuyFee The total fee for buys\r\n     * @return _buyMktFee The fee for buys that gets sent to marketing\r\n     * @return _buyLPFee The fee for buys that gets sent to LP\r\n     * @return _buyRewardsFee The fee for buys that gets sent to rewards\r\n     * @return _totalSellFee The total fee for sells\r\n     * @return _sellMktFee The fee for sells that gets sent to marketing\r\n     * @return _sellLpFee The fee for sells that gets sent to LP\r\n     * @return _sellRewardsFee The fee for sells that gets sent to rewards\r\n     * @return _totalTransferFee The total fee for transfers\r\n     * @return _transferMktFee The fee for transfers that gets sent to marketing\r\n     * @return _transferLpFee The fee for transfers that gets sent to LP\r\n     * @return _transferRewardsFee The fee for transfers that gets sent to rewards\r\n     */\r\n    function feeRates()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _totalBuyFee,\r\n            uint256 _buyMktFee,\r\n            uint256 _buyLPFee,\r\n            uint256 _buyRewardsFee,\r\n            uint256 _totalSellFee,\r\n            uint256 _sellMktFee,\r\n            uint256 _sellLpFee,\r\n            uint256 _sellRewardsFee,\r\n            uint256 _totalTransferFee,\r\n            uint256 _transferMktFee,\r\n            uint256 _transferLpFee,\r\n            uint256 _transferRewardsFee\r\n        )\r\n    {\r\n        _totalBuyFee = totalBuyFee;\r\n        _buyMktFee = buyMktFee;\r\n        _buyLPFee = buyLPFee;\r\n        _buyRewardsFee = buyRewardsFee;\r\n        _totalSellFee = totalSellFee;\r\n        _sellMktFee = sellMktFee;\r\n        _sellLpFee = sellLpFee;\r\n        _sellRewardsFee = sellRewardsFee;\r\n        _totalTransferFee = totalTransferFee;\r\n        _transferMktFee = transferMktFee;\r\n        _transferLpFee = transferLpFee;\r\n        _transferRewardsFee = transferRewardsFee;\r\n    }\r\n\r\n    /**\r\n     * @notice  If the wallet is excluded from fees and max transaction amount and if the wallet is a automated market maker pair\r\n     * @param   _target  The wallet to check\r\n     * @return  _isFeeExempt  If the wallet is excluded from fees\r\n     * @return  _isTxLimitExempt  If the wallet is excluded from max transaction amount\r\n     * @return  _automatedMarketMakerPairs If the wallet is a automated market maker pair\r\n     */\r\n    function checkAddressPermissions(\r\n        address _target\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool _isFeeExempt,\r\n            bool _isTxLimitExempt,\r\n            bool _automatedMarketMakerPairs\r\n        )\r\n    {\r\n        _isFeeExempt = isFeeExempt[_target];\r\n        _isTxLimitExempt = isTxLimitExempt[_target];\r\n        _automatedMarketMakerPairs = automatedMarketMakerPairs[_target];\r\n    }\r\n\r\n    /**\r\n     * @notice Information related to the burn function\r\n     * @return _burnEnabled If burn is enabled\r\n     * @return _lastSync The last time burn was called\r\n     */\r\n    function burnInfo() external view returns (bool _burnEnabled, uint256 _lastSync) {\r\n        _burnEnabled = burnEnabled;\r\n        _lastSync = lastSync;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice  Opens public trading for the token\r\n     * @dev     onlyOwner.\r\n     */\r\n    function enableTrading() external onlyOwner {\r\n        tradingOn = true;\r\n        swapbackEnabled = true;\r\n        emit TradingEnabled(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the max wallet and max transaction limits\r\n     * @dev onlyOwner.\r\n     * Emits an {LimitsRemoved} event\r\n     */\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        emit LimitsRemoved(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the transfer delay\r\n     * @dev onlyOwner.\r\n     * Emits an {DisabledTransferDelay} event\r\n     */\r\n    function disableTransferDelay() external onlyOwner {\r\n        trasnferDelayEnabled = false;\r\n        emit DisabledTransferDelay(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice sets if swapback is enabled and sets the minimum and maximum amounts\r\n     * @dev onlyOwner.\r\n     * Emits an {SwapbackSettingsUpdated} event\r\n     * @param _enabled If swapback is enabled\r\n     * @param _min The minimum amount of tokens the contract must have before swapping tokens for ETH. Base 10000, so 1% = 100.\r\n     * @param _max The maximum amount of tokens the contract can swap for ETH. Base 10000, so 1% = 100.\r\n     */\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _min,\r\n        uint256 _max\r\n    ) external onlyOwner {\r\n        require(\r\n            _min >= 1,\r\n            \"Swap amount cannot be lower than 0.01% total supply.\"\r\n        );\r\n        require(_max >= _min, \"maximum amount cant be higher than minimum\");\r\n\r\n        swapbackEnabled = _enabled;\r\n        swapBackValueMin = (totalSupply() * _min) / 10000;\r\n        swapBackValueMax = (totalSupply() * _max) / 10000;\r\n        emit SwapbackSettingsUpdated(_enabled, _min, _max);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the maximum amount of tokens that can be bought or sold in a single transaction\r\n     * @dev onlyOwner.\r\n     * Emits an {MaxTxUpdated} event\r\n     * @param newNum Base 1000, so 1% = 10\r\n     */\r\n    function setTxLimit(uint256 newNum) external onlyOwner {\r\n        require(newNum >= 1, \"Cannot set maxTx lower than 0.1%\");\r\n        maxTx = (newNum * totalSupply()) / 1000;\r\n        emit MaxTxUpdated(maxTx);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the maximum amount of tokens a wallet can hold\r\n     * @dev onlyOwner.\r\n     * Emits an {MaxWalletUpdated} event\r\n     * @param newNum Base 1000, so 1% = 10\r\n     */\r\n    function setWalletLimit(uint256 newNum) external onlyOwner {\r\n        require(newNum >= 5, \"Cannot set maxWallet lower than 0.5%\");\r\n        maxWallet = (newNum * totalSupply()) / 1000;\r\n        emit MaxWalletUpdated(maxWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets if a wallet is excluded from the max wallet and tx limits\r\n     * @dev onlyOwner.\r\n     * Emits an {ExcludeFromLimits} event\r\n     * @param updAds The wallet to update\r\n     * @param isEx If the wallet is excluded or not\r\n     */\r\n    function excludeFromMaxTransaction(\r\n        address updAds,\r\n        bool isEx\r\n    ) public onlyOwner {\r\n        isTxLimitExempt[updAds] = isEx;\r\n        emit ExcludeFromLimits(updAds, isEx);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fees for buys\r\n     * @dev onlyOwner.\r\n     * Emits a {BuyFeeUpdated} event\r\n     * All fees added up must be less than 70\r\n     * @param _marketingFee The fee for the marketing wallet\r\n     * @param _liquidityFee The fee for the liquidity pool\r\n     * @param _RewardsFee The fee for the Rewards wallet\r\n     */\r\n    function setBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _RewardsFee\r\n    ) external onlyOwner {\r\n        buyMktFee = _marketingFee;\r\n        buyLPFee = _liquidityFee;\r\n        buyRewardsFee = _RewardsFee;\r\n        totalBuyFee = buyMktFee + buyLPFee + buyRewardsFee;\r\n        require(totalBuyFee <= 50, \"Total buy fee cannot be higher than 70%\");\r\n        emit BuyFeeUpdated(totalBuyFee, buyMktFee, buyLPFee, buyRewardsFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fees for sells\r\n     * @dev onlyOwner.\r\n     * Emits a {SellFeeUpdated} event\r\n     * All fees added up must be less than 70\r\n     * @param _marketingFee The fee for the marketing wallet\r\n     * @param _liquidityFee The fee for the liquidity pool\r\n     * @param _RewardsFee The fee for the Rewards wallet\r\n     */\r\n    function setSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _RewardsFee\r\n    ) external onlyOwner {\r\n        sellMktFee = _marketingFee;\r\n        sellLpFee = _liquidityFee;\r\n        sellRewardsFee = _RewardsFee;\r\n        totalSellFee = sellMktFee + sellLpFee + sellRewardsFee;\r\n        require(\r\n            totalSellFee <= 80,\r\n            \"Total sell fee cannot be higher than 70%\"\r\n        );\r\n        emit SellFeeUpdated(totalSellFee, sellMktFee, sellLpFee, sellRewardsFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fees for transfers\r\n     * @dev onlyOwner.\r\n     * Emits a {TransferFeeUpdated} event\r\n     * All fees added up must be less than 70\r\n     * @param _marketingFee The fee for the marketing wallet\r\n     * @param _liquidityFee The fee for the liquidity pool\r\n     * @param _RewardsFee The fee for the Rewards wallet\r\n     */\r\n    function setTransferFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _RewardsFee\r\n    ) external onlyOwner {\r\n        transferMktFee = _marketingFee;\r\n        transferLpFee = _liquidityFee;\r\n        transferRewardsFee = _RewardsFee;\r\n        totalTransferFee = transferMktFee + transferLpFee + transferRewardsFee;\r\n        require(\r\n            totalTransferFee <= 10,\r\n            \"Total transfer fee cannot be higher than 70%\"\r\n        );\r\n        emit TransferFeeUpdated(\r\n            totalTransferFee,\r\n            transferMktFee,\r\n            transferLpFee,\r\n            transferRewardsFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets if an address is excluded from fees\r\n     * @dev onlyOwner.\r\n     * Emits an {ExcludeFromFees} event\r\n     * @param account The wallet to update\r\n     * @param excluded If the wallet is excluded or not\r\n     */\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        isFeeExempt[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets an address as a new liquidity pair. You probably dont want to do this.\r\n     * @dev onlyOwner.\r\n     * Emits a {SetAutomatedMarketMakerPair} event\r\n     * @param pair the address of the pair\r\n     * @param value If the pair is a automated market maker pair or not\r\n     */\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(\r\n            pair != dexPair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the marketing wallet\r\n     * @dev onlyOwner.\r\n     * Emits an {mktReceiverUpdated} event\r\n     * @param newWallet The new marketing wallet\r\n     */\r\n    function setMarketingWallet(address newWallet) external onlyOwner {\r\n        emit mktReceiverUpdated(newWallet, mktReceiver);\r\n        mktReceiver = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the LP receiver\r\n     * @dev onlyOwner.\r\n     * Emits an {lpReceiverUpdated} event\r\n     * @param newWallet The new Rewards wallet\r\n     */\r\n    function setLPWallet(address newWallet) external onlyOwner {\r\n        emit lpReceiverUpdated(newWallet, autoLPReceiver);\r\n        autoLPReceiver = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the Rewards wallet\r\n     * @dev onlyOwner.\r\n     * Emits an {rewardsReceiverUpdated} event\r\n     * @param newWallet The new Rewards wallet\r\n     */\r\n    function setRewardsWallet(address newWallet) external onlyOwner {\r\n        emit rewardsReceiverUpdated(newWallet, rewardsReceiver);\r\n        rewardsReceiver = newWallet;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingOn) {\r\n                    require(\r\n                        isFeeExempt[from] || isFeeExempt[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (trasnferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(dexRouter) &&\r\n                        to != address(dexPair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !isTxLimitExempt[to]) {\r\n                    require(\r\n                        amount <= maxTx,\r\n                        \"Buy transfer amount exceeds the maxTx.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] && !isTxLimitExempt[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTx,\r\n                        \"Sell transfer amount exceeds the maxTx.\"\r\n                    );\r\n                } else if (!isTxLimitExempt[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapBackValueMin;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapbackEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !isFeeExempt[from] &&\r\n            !isFeeExempt[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (isFeeExempt[from] || isFeeExempt[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && totalSellFee > 0) {\r\n                fees = amount.mul(totalSellFee).div(100);\r\n                tokensForLiquidity += (fees * sellLpFee) / totalSellFee;\r\n                tokensForRewards += (fees * sellRewardsFee) / totalSellFee;\r\n                tokensForMarketing += (fees * sellMktFee) / totalSellFee;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && totalBuyFee > 0) {\r\n                fees = amount.mul(totalBuyFee).div(100);\r\n                tokensForLiquidity += (fees * buyLPFee) / totalBuyFee;\r\n                tokensForRewards += (fees * buyRewardsFee) / totalBuyFee;\r\n                tokensForMarketing += (fees * buyMktFee) / totalBuyFee;\r\n            }\r\n            // on transfer\r\n            else if (totalTransferFee > 0) {\r\n                fees = amount.mul(totalTransferFee).div(100);\r\n                tokensForLiquidity += (fees * transferLpFee) / totalTransferFee;\r\n                tokensForRewards += (fees * transferRewardsFee) / totalTransferFee;\r\n                tokensForMarketing +=\r\n                    (fees * transferMktFee) /\r\n                    totalTransferFee;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            autoLPReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForRewards;\r\n        bool success;\r\n\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapBackValueMax) {\r\n            contractBalance = swapBackValueMax;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n        uint256 ethForRewards = ethBalance.mul(tokensForRewards).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForRewards;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForRewards = 0;\r\n\r\n        (success, ) = address(rewardsReceiver).call{value: ethForRewards}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(mktReceiver).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMktFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLPFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyRewardsFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisabledTransferDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"MaxTxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMktFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellRewardsFee\",\"type\":\"uint256\"}],\"name\":\"SellFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapBackValueMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapBackValueMax\",\"type\":\"uint256\"}],\"name\":\"SwapbackSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTransferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferMktFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferRewardsFee\",\"type\":\"uint256\"}],\"name\":\"TransferFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"lpReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"mktReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"rewardsReceiverUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_limitsInEffect\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_trasnferDelayEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_burnEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastSync\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"checkAddressPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isTxLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_automatedMarketMakerPairs\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyRewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferRewardsFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_autoLPReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mktReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RewardsFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setLPWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RewardsFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RewardsFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapbackInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_swapbackEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapBackValueMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapBackValueMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SCOM", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52e37dfdf71c26a0016cd6b930ed32c5b6e37e800ec54869caf0783eb511e708"}