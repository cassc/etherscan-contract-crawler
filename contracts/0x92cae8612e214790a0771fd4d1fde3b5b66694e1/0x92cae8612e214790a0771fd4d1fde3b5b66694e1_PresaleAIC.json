{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/ICrowdsale.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Import this file to use console.log\r\n\r\ninterface ICrowdsale {\r\n    // Amount in CAI\r\n    event TokenSold(address indexed beneficiary, uint256 indexed amount);\r\n    event TokenTransferred(address indexed receiver, uint256 indexed amount);\r\n\r\n    // Price (USDT) per  CAI\r\n    function price() external view returns (uint256);\r\n\r\n    // Max. amount in USDT\r\n    function maxAmountUsd() external view returns (uint256);\r\n\r\n    // Max. amount in ETH\r\n    function maxAmountETH() external view returns (uint256);\r\n\r\n    // The beneficiary vesting wallet address\r\n    function vestingWallet(address) external view returns (address);\r\n\r\n    function startTimestamp() external view returns (uint256);\r\n\r\n    function endTimestamp() external view returns (uint256);\r\n\r\n    function soldToken() external view returns (uint256);\r\n\r\n    function setPrice(uint256) external;\r\n\r\n    function usdtAddress() external view returns (address);\r\n\r\n    function caiAddress() external view returns (address);\r\n\r\n    function RouterAddress() external view returns (address);\r\n\r\n    function vestingManagerAddress() external view returns (address);\r\n\r\n    function setStartTimestamp(uint256) external;\r\n\r\n    function setRound(uint8) external;\r\n\r\n    function setEndTimestamp(uint256) external;\r\n\r\n    function setMaxAmountUsd(uint256) external;\r\n\r\n    function setMaxAmountETH(uint256) external;\r\n\r\n    function buyTokenETH() external payable;\r\n\r\n    function buyTokenUSDT(uint256) external;\r\n\r\n    function withdrawToken(address) external;\r\n\r\n    function transferTokenOwnership(address) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20_USDT {\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(\r\n            nonceAfter == nonceBefore + 1,\r\n            \"SafeERC20: permit did not succeed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.7.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`.\r\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\r\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\r\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\r\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1;\r\n        uint256 x = a;\r\n        if (x >> 128 > 0) {\r\n            x >>= 128;\r\n            result <<= 64;\r\n        }\r\n        if (x >> 64 > 0) {\r\n            x >>= 64;\r\n            result <<= 32;\r\n        }\r\n        if (x >> 32 > 0) {\r\n            x >>= 32;\r\n            result <<= 16;\r\n        }\r\n        if (x >> 16 > 0) {\r\n            x >>= 16;\r\n            result <<= 8;\r\n        }\r\n        if (x >> 8 > 0) {\r\n            x >>= 8;\r\n            result <<= 4;\r\n        }\r\n        if (x >> 4 > 0) {\r\n            x >>= 4;\r\n            result <<= 2;\r\n        }\r\n        if (x >> 2 > 0) {\r\n            result <<= 1;\r\n        }\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(\r\n        uint256 a,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = sqrt(a);\r\n        if (rounding == Rounding.Up && result * result < a) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/IVestingManager.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Import this file to use console.log\r\n\r\ninterface IVestingManager {\r\n    function startTimestamp() external view returns (uint256);\r\n\r\n    function durationSAFT() external view returns (uint256);\r\n\r\n    function durationOne() external view returns (uint256);\r\n\r\n    function durationTwo() external view returns (uint256);\r\n\r\n    function durationThree() external view returns (uint256);\r\n\r\n    function durationFour() external view returns (uint256);\r\n\r\n    function durationFive() external view returns (uint256);\r\n\r\n    function durationSix() external view returns (uint256);\r\n\r\n    function cliffoffSAFT() external view returns (uint256);\r\n\r\n    function cliffoffOne() external view returns (uint256);\r\n\r\n    function cliffoffTwo() external view returns (uint256);\r\n\r\n    function tgeThree() external view returns (uint256);\r\n\r\n    function tgeFour() external view returns (uint256);\r\n\r\n    function tgeFive() external view returns (uint256);\r\n\r\n    function tgeSix() external view returns (uint256);\r\n\r\n    function setStartTimestamp(uint256) external;\r\n\r\n    function setDurationSAFT(uint256) external;\r\n\r\n    function setDurationOne(uint256) external;\r\n\r\n    function setDurationTwo(uint256) external;\r\n\r\n    function setDurationThree(uint256) external;\r\n\r\n    function setDurationFour(uint256) external;\r\n\r\n    function setDurationFive(uint256) external;\r\n\r\n    function setDurationSix(uint256) external;\r\n\r\n    function setCliffoffSAFT(uint256) external;\r\n\r\n    function setCliffoffOne(uint256) external;\r\n\r\n    function setCliffoffTwo(uint256) external;\r\n\r\n    function setTgeThree(uint256) external;\r\n\r\n    function setTgeFour(uint256) external;\r\n\r\n    function setTgeFive(uint256) external;\r\n\r\n    function setTgeSix(uint256) external;\r\n}\r\n\r\n// File contracts/VestingWallet.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (finance/VestingWallet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Import this file to use console.log\r\n\r\n/**\r\n * @title VestingWallet\r\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\r\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\r\n * The vesting schedule is customizable through the {vestedAmount} function.\r\n *\r\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\r\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\r\n * be immediately releasable.\r\n */\r\ncontract VestingWallet is Context {\r\n    using SafeMath for uint256;\r\n    event EtherReleased(uint256 amount);\r\n    event ERC20Released(address indexed token, uint256 amount);\r\n\r\n    uint256 private _released;\r\n    mapping(address => uint256) public _erc20Released;\r\n    mapping(address => uint256) public _erc20Initial;\r\n    mapping(address => bool) private _initial;\r\n    address private immutable _beneficiary;\r\n\r\n    uint8 private immutable _round;\r\n\r\n    address private immutable _vestingManagerAddress;\r\n\r\n    /**\r\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\r\n     */\r\n    constructor(\r\n        address beneficiaryAddress,\r\n        address vestingManagerAddress,\r\n        uint8 roundn\r\n    ) {\r\n        require(\r\n            beneficiaryAddress != address(0),\r\n            \"VestingWallet: beneficiary is zero address\"\r\n        );\r\n        _beneficiary = beneficiaryAddress;\r\n\r\n        require(\r\n            vestingManagerAddress != address(0),\r\n            \"VestingWallet: vesting manager is zero address\"\r\n        );\r\n        _vestingManagerAddress = vestingManagerAddress;\r\n\r\n        _round = roundn;\r\n        _initial[address(this)] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev The contract should be able to receive Eth.\r\n     */\r\n    receive() external payable virtual {}\r\n\r\n    /**\r\n     * @dev Getter for the beneficiary address.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the start timestamp.\r\n     */\r\n    function start() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).startTimestamp();\r\n    }\r\n\r\n    function round() public view virtual returns (uint256) {\r\n        return _round;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the vesting duration.\r\n     */\r\n    function durationSAFT() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationSAFT();\r\n    }\r\n\r\n    function durationOne() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationOne();\r\n    }\r\n\r\n    function durationTwo() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationTwo();\r\n    }\r\n\r\n    function durationThree() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationThree();\r\n    }\r\n\r\n    function durationFour() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationFour();\r\n    }\r\n\r\n    function durationFive() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationFive();\r\n    }\r\n\r\n    function durationSix() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).durationSix();\r\n    }\r\n\r\n    function cliffoffSAFT() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).cliffoffSAFT();\r\n    }\r\n\r\n    function cliffoffOne() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).cliffoffOne();\r\n    }\r\n\r\n    function cliffoffTwo() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).cliffoffTwo();\r\n    }\r\n\r\n    function tgeThree() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).tgeThree();\r\n    }\r\n\r\n    function tgeFour() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).tgeFour();\r\n    }\r\n\r\n    function tgeFive() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).tgeFive();\r\n    }\r\n\r\n    function tgeSix() public view virtual returns (uint256) {\r\n        return IVestingManager(_vestingManagerAddress).tgeSix();\r\n    }\r\n\r\n    /**\r\n     * @dev Amount of token already released\r\n     */\r\n    function released() public view virtual returns (uint256) {\r\n        address token = 0x4534b9De0a5CD0940a1f73B827b721eCb791DAe3;\r\n        return _erc20Released[token];\r\n    }\r\n\r\n    /**\r\n     * @dev Release the tokens that have already vested.\r\n     *\r\n     * Emits a {ERC20Released} event.\r\n     */\r\n    function release() public virtual {\r\n        address token = 0x4534b9De0a5CD0940a1f73B827b721eCb791DAe3;\r\n\r\n        uint256 releasable;\r\n\r\n        require(block.timestamp > start(), \"Vesting not started yet\");\r\n\r\n        releasable = vestedAmount(token, uint64(block.timestamp)) - released();\r\n\r\n        if (_initial[address(this)] == true) {\r\n            _erc20Released[token] += releasable;\r\n        } else {\r\n            _erc20Initial[token] += releasable;\r\n        }\r\n\r\n        emit ERC20Released(token, releasable);\r\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), releasable);\r\n        _initial[address(this)] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\r\n     */\r\n    function vestedAmount(\r\n        address token,\r\n        uint64 timestamp\r\n    ) public view virtual returns (uint256) {\r\n        return\r\n            _vestingSchedule(\r\n                IERC20(token).balanceOf(address(this)) + released(),\r\n                timestamp\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\r\n     * an asset given its total historical allocation.\r\n     */\r\n    function _vestingSchedule(\r\n        uint256 totalAllocation,\r\n        uint64 timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        if (timestamp < start()) {\r\n            return 0;\r\n        } else {\r\n            uint init = 0;\r\n\r\n            if (_round == 1) {\r\n                require(\r\n                    (start() + cliffoffOne()) < timestamp,\r\n                    \"You still have to wait, sorry.\"\r\n                );\r\n\r\n                if (timestamp > (start() + durationOne())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation *\r\n                        (timestamp - (start() + cliffoffOne()))) /\r\n                    durationOne();\r\n            } else if (_round == 2) {\r\n                require(\r\n                    (start() + cliffoffTwo()) < timestamp,\r\n                    \"You still have to wait, sorry.\"\r\n                );\r\n\r\n                if (timestamp > (start() + durationTwo())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation *\r\n                        (timestamp - (start() + cliffoffTwo()))) /\r\n                    durationTwo();\r\n            } else if (_round == 3) {\r\n                if (_initial[address(this)] == false) {\r\n                    init = ((totalAllocation / 100) * tgeThree()) / 100;\r\n                    return\r\n                        ((totalAllocation * (timestamp - start())) /\r\n                            durationThree()) + init;\r\n                }\r\n\r\n                if (timestamp > (start() + durationThree())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation * (timestamp - start())) / durationThree();\r\n            } else if (_round == 4) {\r\n                if (_initial[address(this)] == false) {\r\n                    init = ((totalAllocation / 100) * tgeFour()) / 100;\r\n                    return\r\n                        ((totalAllocation * (timestamp - start())) /\r\n                            durationFour()) + init;\r\n                }\r\n\r\n                if (timestamp > (start() + durationFour())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation * (timestamp - start())) / durationFour();\r\n            } else if (_round == 5) {\r\n                if (_initial[address(this)] == false) {\r\n                    init = ((totalAllocation / 100) * tgeFive()) / 100;\r\n                    return\r\n                        ((totalAllocation * (timestamp - start())) /\r\n                            durationFive()) + init;\r\n                }\r\n\r\n                if (timestamp > (start() + durationFive())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation * (timestamp - start())) / durationFive();\r\n            } else if (_round == 6) {\r\n                if (_initial[address(this)] == false) {\r\n                    init = ((totalAllocation / 100) * tgeSix()) / 100;\r\n                    return\r\n                        ((totalAllocation * (timestamp - start())) /\r\n                            durationSix()) + init;\r\n                }\r\n\r\n                if (timestamp > (start() + durationSix())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation * (timestamp - start())) / durationSix();\r\n            } else if (_round == 0) {\r\n                require(\r\n                    (start() + cliffoffSAFT()) < timestamp,\r\n                    \"You still have to wait, sorry.\"\r\n                );\r\n\r\n                if (timestamp > (start() + durationSAFT())) {\r\n                    return totalAllocation;\r\n                }\r\n\r\n                return\r\n                    (totalAllocation *\r\n                        (timestamp - (start() + cliffoffSAFT()))) /\r\n                    durationSAFT();\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n            // return totalAllocation/100;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract PresaleAIC is ICrowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private _price;\r\n    uint256 private _maxAmountUsd;\r\n    uint256 private _maxAmountETH;\r\n    mapping(address => address) private _vestingWallets;\r\n    mapping(address => uint8) private _bought;\r\n    mapping(address => uint256) public whitelistSAFT;\r\n    mapping(address => bool) public whitelistSEED;\r\n    mapping(uint8 => uint256) public tokensCollected;\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    uint256 private _startTimestamp;\r\n    uint256 private _endTimestamp;\r\n    uint256 public percent_dominator = 1000;\r\n\r\n    uint256 private _soldToken;\r\n\r\n    address private immutable _usdtAddress;\r\n    uint8 public _round;\r\n    address private immutable _caiAddress;\r\n    address private immutable _RouterAddress;\r\n    address private immutable _vestingManagerAddress;\r\n\r\n    constructor(\r\n        address addressUsdt,\r\n        address addressCai,\r\n        address addressRouter,\r\n        address addressVestingManager\r\n    ) {\r\n        _price = 2000; // 0.02 USDT\r\n        _maxAmountUsd = 15000 ether;\r\n        _maxAmountETH = 100 ether;\r\n        _usdtAddress = addressUsdt;\r\n        _round = 1;\r\n        _caiAddress = addressCai;\r\n        _RouterAddress = addressRouter;\r\n        _vestingManagerAddress = addressVestingManager;\r\n        priceFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n    }\r\n\r\n    function price() public view virtual override returns (uint256) {\r\n        return _price;\r\n    }\r\n\r\n    function maxAmountUsd() public view virtual override returns (uint256) {\r\n        return _maxAmountUsd;\r\n    }\r\n\r\n    function maxAmountETH() public view virtual override returns (uint256) {\r\n        return _maxAmountETH;\r\n    }\r\n\r\n    function vestingWallet(\r\n        address beneficiary\r\n    ) public view virtual override returns (address) {\r\n        return _vestingWallets[beneficiary];\r\n    }\r\n\r\n    function startTimestamp() public view virtual override returns (uint256) {\r\n        return _startTimestamp;\r\n    }\r\n\r\n    function endTimestamp() public view virtual override returns (uint256) {\r\n        return _endTimestamp;\r\n    }\r\n\r\n    function soldToken() public view virtual override returns (uint256) {\r\n        return _soldToken;\r\n    }\r\n\r\n    function currentRound() public view virtual returns (uint8) {\r\n        return _round;\r\n    }\r\n\r\n    function usdtAddress() public view virtual override returns (address) {\r\n        return _usdtAddress;\r\n    }\r\n\r\n    function caiAddress() public view virtual override returns (address) {\r\n        return _caiAddress;\r\n    }\r\n\r\n    function RouterAddress() public view virtual override returns (address) {\r\n        return _RouterAddress;\r\n    }\r\n\r\n    function vestingManagerAddress()\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _vestingManagerAddress;\r\n    }\r\n\r\n    function setWhitelistForSAFT(\r\n        address _addr,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        whitelistSAFT[_addr] = amount;\r\n    }\r\n\r\n    function setWhitelistForSEED(address _addr) external onlyOwner {\r\n        whitelistSEED[_addr] = true;\r\n    }\r\n\r\n    function setStartTimestamp(\r\n        uint256 value\r\n    ) public virtual override onlyOwner {\r\n        require(\r\n            value > block.timestamp,\r\n            \"Start timestamp must be in the future.\"\r\n        );\r\n\r\n        _startTimestamp = value;\r\n    }\r\n\r\n    function setEndTimestamp(uint256 value) public virtual override onlyOwner {\r\n        require(\r\n            value > block.timestamp,\r\n            \"End timestamp must be in the future.\"\r\n        );\r\n\r\n        _endTimestamp = value;\r\n    }\r\n\r\n    function setRound(uint8 value) public virtual override onlyOwner {\r\n        require(value > 0, \"Round must be greather than 1\");\r\n\r\n        _round = value;\r\n    }\r\n\r\n    function setMaxAmountUsd(uint256 value) public virtual override onlyOwner {\r\n        _maxAmountUsd = value;\r\n    }\r\n\r\n    function setPrice(uint256 value) public virtual override onlyOwner {\r\n        _price = value;\r\n    }\r\n\r\n    function setMaxAmountETH(uint256 value) public virtual override onlyOwner {\r\n        _maxAmountETH = value;\r\n    }\r\n\r\n    function setPercentDominator(uint256 value) public onlyOwner {\r\n        percent_dominator = value;\r\n    }\r\n\r\n    /**\r\n     * Buying\r\n     */\r\n    function buyTokenETH() public payable virtual override {\r\n        require(_round > 0, \"ICO not started\");\r\n        _preValidate();\r\n        _validateAmountETH();\r\n\r\n        if (_round == 1) {\r\n            require(\r\n                whitelistSEED[msg.sender],\r\n                \"You are not whitelisted for the SEED Round\"\r\n            );\r\n        }\r\n\r\n        uint256 tokenAmount = (uint256(msg.value) * uint256(getLatestPrice())) /\r\n            (price());\r\n\r\n        uint256 amountCai = tokenAmount / percent_dominator;\r\n\r\n        _execute(msg.sender, amountCai);\r\n    }\r\n\r\n    function SAFTClaim() public virtual {\r\n        require(\r\n            whitelistSAFT[msg.sender] > 0,\r\n            \"You are not in the SAFT Whitelist\"\r\n        );\r\n        uint256 amountCai = whitelistSAFT[msg.sender];\r\n\r\n        _execute(msg.sender, amountCai);\r\n        whitelistSAFT[msg.sender] = 0;\r\n    }\r\n\r\n    function buyTokenUSDT(uint256 amountUsdt) public virtual override {\r\n        require(_round > 0, \"ICO not started\");\r\n        if (_round == 1) {\r\n            require(\r\n                whitelistSEED[msg.sender],\r\n                \"You are not whitelisted for the SEED Round\"\r\n            );\r\n        }\r\n        _buyTokenErc20(amountUsdt);\r\n    }\r\n\r\n    function _buyTokenErc20(uint256 usdtAmount) private {\r\n        _preValidate();\r\n        _validateAmountUsd(usdtAmount);\r\n\r\n        IERC20 usdt = IERC20(usdtAddress());\r\n\r\n        uint8 tokenDecimals = 18;\r\n        uint8 usdtDecimals = 6;\r\n\r\n        uint256 tokenAmount = ((usdtAmount *\r\n            (10 ** (tokenDecimals - usdtDecimals))) / _price) *\r\n            percent_dominator;\r\n\r\n        require(\r\n            usdt.allowance(msg.sender, address(this)) >= usdtAmount,\r\n            \"Insufficient USDT allowance\"\r\n        );\r\n\r\n        IERC20(usdtAddress()).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            usdtAmount\r\n        );\r\n\r\n        _execute(msg.sender, tokenAmount.mul(100));\r\n    }\r\n\r\n    function _execute(address beneficiary, uint256 amountCai) private {\r\n        address walletAddress = _getVestingWalletAddress(beneficiary);\r\n        require(\r\n            _bought[beneficiary] == _round,\r\n            \"You already bought in a previous round\"\r\n        );\r\n        tokensCollected[_round] += amountCai;\r\n        _soldToken = _soldToken.add(amountCai);\r\n        emit TokenTransferred(walletAddress, amountCai);\r\n        emit TokenSold(beneficiary, amountCai);\r\n\r\n        IERC20 cai = IERC20(caiAddress());\r\n        require(\r\n            cai.transfer(walletAddress, amountCai),\r\n            \"Crowdsale: CAI transfer failed\"\r\n        );\r\n    }\r\n\r\n    function _getVestingWalletAddress(\r\n        address beneficiary\r\n    ) private returns (address) {\r\n        address existingWallet = _vestingWallets[beneficiary];\r\n\r\n        if (existingWallet == address(0x0)) {\r\n            VestingWallet wallet = new VestingWallet(\r\n                beneficiary,\r\n                vestingManagerAddress(),\r\n                _round\r\n            );\r\n\r\n            address walletAddress = address(wallet);\r\n            _vestingWallets[beneficiary] = walletAddress;\r\n            _bought[beneficiary] = _round;\r\n            return walletAddress;\r\n        } else {\r\n            return existingWallet;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw\r\n     */\r\n    function withdrawToken(\r\n        address tokenAddress\r\n    ) public virtual override onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(\r\n            token.transfer(msg.sender, token.balanceOf(address(this))),\r\n            \"Crowdsale: token transfer failed\"\r\n        );\r\n    }\r\n\r\n    function withdrawUSDT() public onlyOwner {\r\n        IERC20 usdt = IERC20(usdtAddress());\r\n        usdt.safeTransfer(msg.sender, usdt.balanceOf(address(this)));\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(msg.sender).transfer((amountETH * amountPercentage) / 100);\r\n    }\r\n\r\n    function transferTokenOwnership(\r\n        address tokenAddress\r\n    ) public virtual override onlyOwner {\r\n        Ownable cai = Ownable(tokenAddress);\r\n        cai.transferOwnership(msg.sender);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (int) {\r\n        (\r\n            uint80 roundID,\r\n            int pricex,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return pricex;\r\n    }\r\n\r\n    /**\r\n     * Validation\r\n     */\r\n    function _preValidate() private view {\r\n        require(\r\n            block.timestamp >= startTimestamp(),\r\n            \"Crowdsale: Sale isn't running yet\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp < endTimestamp(),\r\n            \"Crowdsale: Sale was already finished\"\r\n        );\r\n    }\r\n\r\n    function _validateAmountETH() private view {\r\n        require(msg.value > 0, \"Crowdsale: Amount must be greater than 0\");\r\n\r\n        require(\r\n            msg.value <= maxAmountETH(),\r\n            \"Crowdsale: Amount exceeds max. amount\"\r\n        );\r\n    }\r\n\r\n    function _validateAmountUsd(uint256 amountUsd) private view {\r\n        require(amountUsd > 0, \"Crowdsale: Amount must be greater than 0\");\r\n\r\n        require(\r\n            amountUsd <= maxAmountUsd(),\r\n            \"Crowdsale: Amount exceeds max. amount\"\r\n        );\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract VestingManager is IVestingManager, Ownable {\r\n    uint256 private _startTimestamp;\r\n    uint256 private _durationSAFT;\r\n    uint256 private _durationOne;\r\n    uint256 private _durationTwo;\r\n    uint256 private _durationThree;\r\n    uint256 private _durationFour;\r\n    uint256 private _durationFive;\r\n    uint256 private _durationSix;\r\n    uint256 private _cliffoffSAFT;\r\n    uint256 private _cliffoffOne;\r\n    uint256 private _cliffoffTwo;\r\n\r\n    uint256 private _tgeThree;\r\n    uint256 private _tgeFour;\r\n    uint256 private _tgeFive;\r\n    uint256 private _tgeSix;\r\n\r\n    constructor() {\r\n        _startTimestamp = type(uint256).max;\r\n        _durationSAFT = 31536000;\r\n        _durationOne = 31536000;\r\n        _durationTwo = 26280000;\r\n        _durationThree = 31536000;\r\n        _durationFour = 26280000;\r\n        _durationFive = 15768000;\r\n        _durationSix = 15768000;\r\n        _cliffoffSAFT = 7884000;\r\n        _cliffoffOne = 2628000;\r\n        _cliffoffTwo = 2628000;\r\n        _tgeThree = 83;\r\n        _tgeFour = 120;\r\n        _tgeFive = 500;\r\n        _tgeSix = 1000;\r\n    }\r\n\r\n    function startTimestamp() public view virtual override returns (uint256) {\r\n        return _startTimestamp;\r\n    }\r\n\r\n    function cliffoffSAFT() public view virtual override returns (uint256) {\r\n        return _cliffoffSAFT;\r\n    }\r\n\r\n    function cliffoffOne() public view virtual override returns (uint256) {\r\n        return _cliffoffOne;\r\n    }\r\n\r\n    function cliffoffTwo() public view virtual override returns (uint256) {\r\n        return _cliffoffTwo;\r\n    }\r\n\r\n    function durationSAFT() public view virtual override returns (uint256) {\r\n        return _durationSAFT;\r\n    }\r\n\r\n    function durationOne() public view virtual override returns (uint256) {\r\n        return _durationOne;\r\n    }\r\n\r\n    function durationTwo() public view virtual override returns (uint256) {\r\n        return _durationTwo;\r\n    }\r\n\r\n    function durationThree() public view virtual override returns (uint256) {\r\n        return _durationThree;\r\n    }\r\n\r\n    function durationFour() public view virtual override returns (uint256) {\r\n        return _durationFour;\r\n    }\r\n\r\n    function durationFive() public view virtual override returns (uint256) {\r\n        return _durationFive;\r\n    }\r\n\r\n    function durationSix() public view virtual override returns (uint256) {\r\n        return _durationSix;\r\n    }\r\n\r\n    function tgeThree() public view virtual override returns (uint256) {\r\n        return _tgeThree;\r\n    }\r\n\r\n    function tgeFour() public view virtual override returns (uint256) {\r\n        return _tgeFour;\r\n    }\r\n\r\n    function tgeFive() public view virtual override returns (uint256) {\r\n        return _tgeFive;\r\n    }\r\n\r\n    function tgeSix() public view virtual override returns (uint256) {\r\n        return _tgeSix;\r\n    }\r\n\r\n    function setStartTimestamp(\r\n        uint256 value\r\n    ) public virtual override onlyOwner {\r\n        require(\r\n            value > block.timestamp,\r\n            \"VestingManager: Start timestamp must be in the future\"\r\n        );\r\n\r\n        _startTimestamp = value;\r\n    }\r\n\r\n    function setCliffoffSAFT(uint256 value) public virtual override onlyOwner {\r\n        _cliffoffSAFT = value;\r\n    }\r\n\r\n    function setCliffoffOne(uint256 value) public virtual override onlyOwner {\r\n        _cliffoffOne = value;\r\n    }\r\n\r\n    function setCliffoffTwo(uint256 value) public virtual override onlyOwner {\r\n        _cliffoffTwo = value;\r\n    }\r\n\r\n    function setDurationSAFT(uint256 value) public virtual override onlyOwner {\r\n        _durationSAFT = value;\r\n    }\r\n\r\n    function setDurationOne(uint256 value) public virtual override onlyOwner {\r\n        _durationOne = value;\r\n    }\r\n\r\n    function setDurationTwo(uint256 value) public virtual override onlyOwner {\r\n        _durationTwo = value;\r\n    }\r\n\r\n    function setDurationThree(uint256 value) public virtual override onlyOwner {\r\n        _durationThree = value;\r\n    }\r\n\r\n    function setDurationFour(uint256 value) public virtual override onlyOwner {\r\n        _durationFour = value;\r\n    }\r\n\r\n    function setDurationFive(uint256 value) public virtual override onlyOwner {\r\n        _durationFive = value;\r\n    }\r\n\r\n    function setDurationSix(uint256 value) public virtual override onlyOwner {\r\n        _durationSix = value;\r\n    }\r\n\r\n    function setTgeThree(uint256 value) public virtual override onlyOwner {\r\n        _tgeThree = value;\r\n    }\r\n\r\n    function setTgeFour(uint256 value) public virtual override onlyOwner {\r\n        _tgeFour = value;\r\n    }\r\n\r\n    function setTgeFive(uint256 value) public virtual override onlyOwner {\r\n        _tgeFive = value;\r\n    }\r\n\r\n    function setTgeSix(uint256 value) public virtual override onlyOwner {\r\n        _tgeSix = value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressCai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressVestingManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFTClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_round\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsdt\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent_dominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercentDominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelistForSAFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelistForSEED\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokensCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistSAFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistSEED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresaleAIC", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004534b9de0a5cd0940a1f73b827b721ecb791dae30000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000356e2bc8dca02c0479a65c5825ffd3b68bf4e0fb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4ad87d1967d3ca8877766127a48bad64420b4ed8e061c499926e7d595029814"}