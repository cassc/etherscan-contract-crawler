{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IERC20_Extended {\r\n    function name() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface AggregatorV3Interface_EXT {\r\n    function latestAnswer() external view returns (uint256);\r\n}\r\n\r\ncontract MMPUBLICPRESALE is Pausable, Ownable {\r\n    uint256 private _priceInUSD;\r\n    address[] private _supportedTokensList;\r\n    address private _treasaryWallet;\r\n\r\n    uint256 private _totalTokensSold;\r\n    uint256 private _totalETHCollected;\r\n    uint256 private _totalUSDCollected;\r\n\r\n    uint256 private _minContributionInUSD;\r\n\r\n    bool private _isTransacting;\r\n\r\n    address private _priceOracleAddressNative;\r\n\r\n    address private _presaleTokenContract;\r\n\r\n    mapping(address => bool) private _mappingSupportedTokens;\r\n\r\n    constructor(\r\n        uint256 priceInUSD_,\r\n        address treasaryWallet_,\r\n        address nativePriceOracle_,\r\n        address presaleTokenContract_\r\n    ) {\r\n        _priceInUSD = priceInUSD_;\r\n        _treasaryWallet = treasaryWallet_;\r\n        _minContributionInUSD = 10 * 1 ether;\r\n        _priceOracleAddressNative = nativePriceOracle_;\r\n        _presaleTokenContract = presaleTokenContract_;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    event BuyWithNative(\r\n        address userAddress,\r\n        uint256 valueInWei,\r\n        uint256 tokenSold,\r\n        uint256 priceInUSD\r\n    );\r\n    event BuyWithToken(\r\n        address userAddress,\r\n        address tokenContract,\r\n        uint256 valueInWei,\r\n        uint256 tokenSold,\r\n        uint256 priceInUSD\r\n    );\r\n\r\n    modifier noReetency() {\r\n        require(!_isTransacting, \"Transaction in progress\");\r\n        _isTransacting = true;\r\n        _;\r\n        _isTransacting = false;\r\n    }\r\n\r\n    function getPresaleAnalytics()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalTokensSold,\r\n            uint256 totalETHCollected,\r\n            uint256 totalUSDValue\r\n        )\r\n    {\r\n        totalTokensSold = _totalTokensSold;\r\n        totalETHCollected = _totalETHCollected;\r\n        totalUSDValue = _totalUSDCollected;\r\n    }\r\n\r\n    function getPresaleTokenContract() external view returns (address) {\r\n        return _presaleTokenContract;\r\n    }\r\n\r\n    function setPresaleTokenContract(address _contractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _presaleTokenContract = _contractAddress;\r\n    }\r\n\r\n    function getPriceOracleNative() external view returns (address) {\r\n        return _priceOracleAddressNative;\r\n    }\r\n\r\n    function setPriceOracleNative(address _contractAddress) external onlyOwner {\r\n        _priceOracleAddressNative = _contractAddress;\r\n    }\r\n\r\n    function getMinContributionUSD() external view returns (uint256) {\r\n        return _minContributionInUSD;\r\n    }\r\n\r\n    function setMinContributionUSD(uint256 _valueInWei) external onlyOwner {\r\n        _minContributionInUSD = _valueInWei;\r\n    }\r\n\r\n    function getPresalePricePerUSD() external view returns (uint256) {\r\n        return _priceInUSD;\r\n    }\r\n\r\n    function setPricePerUSD(uint256 priceInUSD_) external onlyOwner {\r\n        _priceInUSD = priceInUSD_;\r\n    }\r\n\r\n    function getTreasaryWallet() external view returns (address) {\r\n        return _treasaryWallet;\r\n    }\r\n\r\n    function setTreasaryWallet(address treasaryWallet_) external onlyOwner {\r\n        _treasaryWallet = treasaryWallet_;\r\n    }\r\n\r\n    function getSupportedTokensList() external view returns (address[] memory) {\r\n        return _supportedTokensList;\r\n    }\r\n\r\n    function addSupportedToken(address tokenContract_) external onlyOwner {\r\n        bool isTokenSupported = _mappingSupportedTokens[tokenContract_];\r\n        require(\r\n            !isTokenSupported,\r\n            \"Token already added in supported tokens list\"\r\n        );\r\n\r\n        _mappingSupportedTokens[tokenContract_] = true;\r\n        _supportedTokensList.push(tokenContract_);\r\n    }\r\n\r\n    function removeSupportedToken(address tokenContract_) external onlyOwner {\r\n        bool isTokenSupported = _mappingSupportedTokens[tokenContract_];\r\n        require(\r\n            isTokenSupported,\r\n            \"Token already removed or not added in supported tokens list\"\r\n        );\r\n\r\n        _mappingSupportedTokens[tokenContract_] = false;\r\n\r\n        address[] memory supportedTokensList = _supportedTokensList;\r\n\r\n        for (uint256 i; i < supportedTokensList.length; ++i) {\r\n            if (_supportedTokensList[i] == tokenContract_) {\r\n                _supportedTokensList[i] = _supportedTokensList[\r\n                    _supportedTokensList.length - 1\r\n                ];\r\n                _supportedTokensList.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getPriceFromOracle(address oracleAddress_)\r\n        private\r\n        view\r\n        returns (uint256 valueInUSD)\r\n    {\r\n        (\r\n            ,\r\n            /* uint80 roundID */\r\n            int256 answer, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\r\n            ,\r\n            ,\r\n\r\n        ) = AggregatorV3Interface(oracleAddress_).latestRoundData();\r\n\r\n        valueInUSD = _toWeiFromDecimals(\r\n            uint256(answer),\r\n            AggregatorV3Interface(oracleAddress_).decimals()\r\n        );\r\n    }\r\n\r\n    function getETHPrice() external view returns (uint256) {\r\n        return _getPriceFromOracle(_priceOracleAddressNative);\r\n    }\r\n\r\n    function getTokenByETH(uint256 _msgValue)\r\n        external\r\n        view\r\n        returns (uint256 valueInTokens)\r\n    {\r\n        uint256 msgValueUSD = (_getPriceFromOracle(_priceOracleAddressNative) *\r\n            _msgValue) / 1 ether;\r\n        valueInTokens = (msgValueUSD / _priceInUSD) * 1 ether;\r\n    }\r\n\r\n    function buyWithToken(address tokenContract_, uint256 valueInWei_)\r\n        external\r\n        noReetency\r\n        whenNotPaused\r\n    {\r\n        address msgSender = msg.sender;\r\n\r\n        require(\r\n            _mappingSupportedTokens[tokenContract_],\r\n            \"Token is not supported\"\r\n        );\r\n        uint256 msgValueInWei = _toWei(tokenContract_, valueInWei_);\r\n        require(\r\n            msgValueInWei >= _minContributionInUSD,\r\n            \"Value less then min contribution\"\r\n        );\r\n\r\n        IERC20(tokenContract_).transferFrom(\r\n            msgSender,\r\n            _treasaryWallet,\r\n            valueInWei_\r\n        );\r\n\r\n        uint256 valueInTokens = ((msgValueInWei * 1 ether) / _priceInUSD);\r\n\r\n        IERC20(_presaleTokenContract).transfer(\r\n            msgSender,\r\n            _toWei(_presaleTokenContract, valueInTokens)\r\n        );\r\n\r\n        _totalTokensSold += valueInTokens;\r\n        _totalUSDCollected += msgValueInWei;\r\n\r\n        emit BuyWithToken(\r\n            msgSender,\r\n            tokenContract_,\r\n            valueInWei_,\r\n            valueInTokens,\r\n            _priceInUSD\r\n        );\r\n    }\r\n\r\n    function buyWithNative() external payable noReetency whenNotPaused {\r\n        address msgSender = msg.sender;\r\n        uint256 msgValue = msg.value;\r\n        uint256 msgValueUSD = (_getPriceFromOracle(_priceOracleAddressNative) *\r\n            msgValue) / 1 ether;\r\n\r\n        require(\r\n            msgValueUSD >= _minContributionInUSD,\r\n            \"Value less then min contribution\"\r\n        );\r\n\r\n        payable(_treasaryWallet).transfer(address(this).balance);\r\n\r\n        uint256 valueInTokens = ((msgValueUSD * 1 ether) / _priceInUSD);\r\n\r\n        IERC20(_presaleTokenContract).transfer(\r\n            msgSender,\r\n            _toWei(_presaleTokenContract, valueInTokens)\r\n        );\r\n\r\n        _totalTokensSold += valueInTokens;\r\n        _totalUSDCollected += msgValueUSD;\r\n        _totalETHCollected += msgValue;\r\n\r\n        emit BuyWithNative(msgSender, msgValue, valueInTokens, _priceInUSD);\r\n    }\r\n\r\n    function _toWeiFromDecimals(uint256 valueInTokens_, uint256 from_)\r\n        private\r\n        pure\r\n        returns (uint256 valueInWei)\r\n    {\r\n        valueInWei = (valueInTokens_ * 1 ether) / 10**from_;\r\n    }\r\n\r\n    function _toWei(address tokenContract_, uint256 valueInTokens_)\r\n        private\r\n        view\r\n        returns (uint256 valueInWei)\r\n    {\r\n        valueInWei = ((valueInTokens_ * 1 ether) /\r\n            10**IERC20_Extended(tokenContract_).decimals());\r\n    }\r\n\r\n    function _toTokenDecimals(address tokenContract_, uint256 valueInWei_)\r\n        private\r\n        view\r\n        returns (uint256 valueInToken)\r\n    {\r\n        valueInToken =\r\n            (valueInWei_ * 10**IERC20_Extended(tokenContract_).decimals()) /\r\n            1 ether;\r\n    }\r\n\r\n    function withdrawTokens(address _tokenContract, uint256 _valueInWei)\r\n        external\r\n        noReetency\r\n        onlyOwner\r\n    {\r\n        IERC20(_tokenContract).transfer(owner(), _valueInWei);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInUSD_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasaryWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativePriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presaleTokenContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BuyWithNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BuyWithToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueInWei_\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinContributionUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleAnalytics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalETHCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresalePricePerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_msgValue\",\"type\":\"uint256\"}],\"name\":\"getTokenByETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasaryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueInWei\",\"type\":\"uint256\"}],\"name\":\"setMinContributionUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setPresaleTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setPriceOracleNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInUSD_\",\"type\":\"uint256\"}],\"name\":\"setPricePerUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasaryWallet_\",\"type\":\"address\"}],\"name\":\"setTreasaryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueInWei\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MMPUBLICPRESALE", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000a34f63dcc152325357aff4f517b771ce355a60810000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000007d4a7be025652995364e0e232063abd9e8d65e6e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0669964ed5a4ce7458a496320a55fe115d107bf8a55cce76d01390a326dda1ed"}