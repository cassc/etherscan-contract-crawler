{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0;\r\n\r\ncontract Ownable\r\n{\t\r\n// Variable that maintains\r\n// owner address\r\naddress private _owner;\r\n//user address that can call notarization methods\r\naddress private _user;\r\n// Sets the original owner of\r\n// contract when it is deployed\r\nconstructor()\r\n{\r\n\t_owner = msg.sender;\r\n    _user = msg.sender;\r\n}\r\n\r\n// Publicly exposes who is the\r\n// owner of this contract\r\nfunction owner() public view returns(address)\r\n{\r\n\treturn _owner;\r\n}\r\n\r\nfunction user() public view returns(address)\r\n{\r\n\treturn _user;\r\n}\r\n// onlyOwner modifier that validates only\r\n// if caller of function is contract owner,\r\n// otherwise not\r\nmodifier onlyOwner()\r\n{\r\n\trequire(isOwner(),\r\n\t\"Function accessible only by the owner !!\");\r\n\t_;\r\n}\r\n\r\nmodifier onlyUser()\r\n{\r\n\trequire(isUser(),\r\n\t\"Function accessible only by the permissioned user !!\");\r\n\t_;\r\n}\r\n\r\n// function for owners to verify their ownership.\r\n// Returns true for owners otherwise false\r\nfunction isOwner() public view returns(bool)\r\n{\r\n\treturn msg.sender == _owner;\r\n}\r\n\r\n// Returns true for user otherwise false\r\nfunction isUser() public view returns(bool)\r\n{\r\n\treturn msg.sender == _user;\r\n}\r\nfunction transferOwnership(address newOwner) public  onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _owner = newOwner;\r\n    }\r\n\r\nfunction setUser(address newUser) public  onlyOwner {\r\n    require(newUser != address(0), \"Ownable: new user is the zero address\");\r\n    _user = newUser;\r\n    }\r\n}\r\n\r\n\r\ncontract Notarizer is Ownable\r\n{\r\n    uint256 public prevBlock;\r\n    event Hash(bytes32 hash, uint256 indexed prevBlock);\r\n    event SignedHash(bytes32 hash, bytes32 signature, uint256 indexed prevBlock);    \r\n\r\n    //Store proof and emit event  \r\n    function storeHash(bytes32 _hash) onlyUser external {\r\n        emit Hash(_hash, prevBlock);\r\n        prevBlock = block.number;\r\n    }\r\n\r\n    //Store proof and corresponding signature and emit event  \r\n    function storeSignedHash(bytes32 _hash, bytes32 _signature) onlyUser external {\r\n        emit SignedHash(_hash, _signature, prevBlock);\r\n        prevBlock = block.number;\r\n    }\r\n\r\n    function verify(bytes32 root, bytes32 leaf, bytes32[] memory proof) external pure returns (bool) {\r\n    bytes32 computedHash = leaf;\r\n    for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n        if (computedHash < proofElement) {\r\n            // Hash(current computed hash + current element of the proof)\r\n            computedHash = keccak256(\r\n                abi.encodePacked(computedHash, proofElement)\r\n            );\r\n        } else {\r\n            // Hash(current element of the proof + current computed hash)\r\n            computedHash = keccak256(\r\n                abi.encodePacked(proofElement, computedHash)\r\n            );\r\n        }\r\n    }\r\n    // Check if the computed hash (root) is equal to the provided root\r\n    return computedHash == root;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevBlock\",\"type\":\"uint256\"}],\"name\":\"Hash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevBlock\",\"type\":\"uint256\"}],\"name\":\"SignedHash\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"storeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"storeSignedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Notarizer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab8e2922a0d1f7e458d9bc05c7d6144f809efaa10169bc7887f0a4c1bed29388"}