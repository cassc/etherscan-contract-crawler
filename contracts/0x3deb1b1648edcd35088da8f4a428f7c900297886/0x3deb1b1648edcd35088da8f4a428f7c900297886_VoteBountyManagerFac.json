{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity 0.8.19;\r\n\r\ninterface IPlatform {\r\n    struct Bounty {\r\n        address gauge;\r\n        address manager;\r\n        address rewardToken;\r\n        uint8 numberOfPeriods;\r\n        uint256 endTimestamp;\r\n        uint256 maxRewardPerVote;\r\n        uint256 totalRewardAmount;\r\n    }\r\n    struct Upgrade {\r\n        uint8 numberOfPeriods;\r\n        uint256 totalRewardAmount;\r\n        uint256 maxRewardPerVote;\r\n        uint256 endTimestamp;\r\n    }\r\n    function createBounty(\r\n        address gauge,\r\n        address manager,\r\n        address rewardToken,\r\n        uint8 numberOfPeriods,\r\n        uint256 maxRewardPerVote,\r\n        uint256 totalRewardAmount,\r\n        address[] calldata blacklist,\r\n        bool upgradeable\r\n    ) external returns (uint256 bountyId);\r\n    function increaseBountyDuration(\r\n        uint256 bountyId,\r\n        uint8 additionalPeriod,\r\n        uint256 increasedAmount,\r\n        uint256 newMaxPricePerVote\r\n    ) external;\r\n    function closeBounty(uint256 bountyId) external;\r\n    function getActivePeriodPerBounty(uint256 bountyId) external returns(uint8);\r\n    function bounties(uint256 bountyId) external returns(Bounty memory);\r\n    function updateBountyPeriod(uint256 bountyId) external;\r\n    function upgradeBountyQueue(uint256 bountyId) external returns(Upgrade memory);\r\n    function rewardPerVote(uint256 bountyId) external returns(uint256);\r\n}\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\ncontract VoteBountyManager is Owned {\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- ERRORS\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    error BOUNTY_EXPIRED();\r\n    error BOUNTY_NOT_CLOSED();\r\n    error BOUNTY_NOT_UPGRADEABLE();\r\n    error NO_ONGOING_BOUNTY();\r\n    error NO_UPDATE_TO_DO();\r\n    error ONGOING_BOUNTY();\r\n\r\n    /// @notice Bounty data struct\r\n    struct BountyData {\r\n        address gauge;\r\n        address rewardToken;\r\n        uint8 numberOfPeriods;\r\n        uint8 targetDuration;\r\n        uint256 maxRewardPerVote;\r\n        address[] blacklist;\r\n    }\r\n\r\n    // the number of periods won't be updated during the bounty update\r\n    // when it creates a new one the initial parameter will be used\r\n    /// @notice bounty data\r\n    BountyData public bountyData;\r\n    /// @notice vm platform\r\n    IPlatform public platform;\r\n    /// @notice current bounty id\r\n    uint256 public bountyId;\r\n\r\n    /// @notice Emitted when a new bounty is created.\r\n    /// @param bountyId Bounty ID.\r\n    event BountyCreated(uint256 bountyId);\r\n\r\n    /// @notice Emitted when a bounty is updated.\r\n    /// @param bountyId Bounty ID.\r\n    /// @param additionalPeriod Extra period to add\r\n    /// @param amountIncreased Amount to add\r\n    event BountyUpdated(uint256 bountyId, uint256 additionalPeriod, uint256 amountIncreased);\r\n\r\n    /// @notice Emitted when a bounty is closed.\r\n    /// @param bountyId Bounty ID.\r\n    event BountyClosed(uint256 bountyId);\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- CONSTRUCTOR\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    constructor(BountyData memory _bountyData, address _owner, address _platform) Owned(_owner) {\r\n        bountyData = _bountyData;\r\n        platform = IPlatform(_platform);\r\n        ERC20(bountyData.rewardToken).approve(_platform, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Creates a new bounty\r\n    function createBounty() external {\r\n        if (bountyId != 0) revert ONGOING_BOUNTY(); \r\n        bountyId = platform.createBounty(\r\n            bountyData.gauge,\r\n            address(this),\r\n            bountyData.rewardToken,\r\n            bountyData.numberOfPeriods,\r\n            bountyData.maxRewardPerVote,\r\n            ERC20(bountyData.rewardToken).balanceOf(address(this)),\r\n            bountyData.blacklist,\r\n            true\r\n        );\r\n        emit BountyCreated(bountyId);\r\n    }\r\n\r\n    /// @notice Update an ongoing bounty if not expired  \r\n    function updateBounty() external {\r\n        if (bountyId == 0) revert NO_ONGOING_BOUNTY();\r\n        if (bountyData.targetDuration == 0) revert BOUNTY_NOT_UPGRADEABLE();\r\n        // check if there is any upgrade in queue\r\n        IPlatform.Upgrade memory upgrade = platform.upgradeBountyQueue(bountyId);\r\n        uint8 bountyDuration;\r\n        // no upgrade in queue\r\n        if (upgrade.numberOfPeriods == 0) {\r\n            IPlatform.Bounty memory bounty = platform.bounties(bountyId);\r\n            bountyDuration = bounty.numberOfPeriods;\r\n        } else {\r\n            bountyDuration = upgrade.numberOfPeriods;\r\n        }\r\n        // calculate additional period based on the voting period elapsed \r\n        uint8 activePeriod = platform.getActivePeriodPerBounty(bountyId);\r\n        // if it isn't the first voting period\r\n        if (!(activePeriod == 0 && platform.rewardPerVote(bountyId) == 0)) {\r\n            activePeriod++;\r\n        }\r\n        if (activePeriod > bountyDuration) revert BOUNTY_EXPIRED();\r\n        if (bountyData.targetDuration <= bountyDuration - activePeriod) revert NO_UPDATE_TO_DO();\r\n        uint8 additionalPeriods = bountyData.targetDuration - (bountyDuration - activePeriod);\r\n        uint256 amount = ERC20(bountyData.rewardToken).balanceOf(address(this));\r\n        platform.increaseBountyDuration(\r\n            bountyId,\r\n            additionalPeriods,\r\n            amount,\r\n            bountyData.maxRewardPerVote\r\n        );\r\n        emit BountyUpdated(bountyId, additionalPeriods, amount);\r\n    }\r\n\r\n    /// @notice Close a bounty\r\n    /// @notice After this action a new bounty can be opened.\r\n    function closeBounty() external {\r\n        if (bountyId == 0) revert NO_ONGOING_BOUNTY();\r\n        // if manager is zero it has been closed directly via platform\r\n        if (platform.bounties(bountyId).manager != address(0)) {\r\n            platform.closeBounty(bountyId);\r\n            if (platform.bounties(bountyId).manager != address(0)) revert BOUNTY_NOT_CLOSED();\r\n        }\r\n        bountyId = 0;\r\n        emit BountyClosed(bountyId);\r\n    }\r\n\r\n    /// @notice Rescue any ERC20\r\n    /// @param _token Token to rescue.\r\n    /// @param _recipient Address to send the token\r\n    /// @param _amount Amount to rescue\r\n    function rescueERC20(address _token, address _recipient, uint256 _amount) external onlyOwner {\r\n        ERC20(_token).transfer(_recipient, _amount);\r\n    }\r\n\r\n    /// @notice Set a target duration \r\n    /// @param _targetDuration Target duration.\r\n    function setTargetDuration(uint8 _targetDuration) external onlyOwner {\r\n        bountyData.targetDuration = _targetDuration;\r\n    }\r\n\r\n    /// @notice Set a max reward per vote\r\n    /// @param _maxRewardPerVote Max reward per vote.\r\n    function setMaxRewardPerVote(uint256 _maxRewardPerVote) external onlyOwner {\r\n        bountyData.maxRewardPerVote = _maxRewardPerVote;\r\n    }\r\n}\r\n\r\ncontract VoteBountyManagerFactoryCommon {\r\n\r\n    /// @notice Emitted when a new vote bounty manager is deployed.\r\n    event VoteBountyManagerDeployed(address depositor, address owner, address platform);\r\n\r\n    /// @notice Deploy a new VoteBounty\r\n    /// @param _platform The vote market platform \r\n    /// @param _bounty The bounty datas.\r\n    /// @param _owner The depositor owner.\r\n    /// @param _amount The amount to reserve for the bounnty.\r\n    function deployVoteBountyManager(\r\n        address _platform,\r\n        VoteBountyManager.BountyData memory _bounty,\r\n        address _owner, \r\n        uint256 _amount\r\n    ) external returns (VoteBountyManager manager) {\r\n        // Deploy the votesBountyManager.\r\n        manager = new VoteBountyManager(_bounty, _owner, _platform);\r\n        // transfer funds to the manager \r\n        ERC20(_bounty.rewardToken).transferFrom(msg.sender, address(manager), _amount);\r\n        // create the bounty\r\n        manager.createBounty();\r\n\r\n        emit VoteBountyManagerDeployed(address(manager), _owner, _platform);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"VoteBountyManagerDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numberOfPeriods\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"targetDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"}],\"internalType\":\"struct VoteBountyManager.BountyData\",\"name\":\"_bounty\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployVoteBountyManager\",\"outputs\":[{\"internalType\":\"contract VoteBountyManager\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VoteBountyManagerFactoryCommon", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://030e998a6f90da3a160a3d92016bedca1e4a2f9b489176e9362e813c86c59e97"}