{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"},\"token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract MerleToken is IERC20 {\\n    \\n    mapping(address =\\u003e uint) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) public allowance;\\n    string public constant name = \\\"Merle\\\";\\n    string public constant symbol = \\\"MRL\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    address public taxAddress;\\n    uint256 public taxFeeMultiplier; // Fee multiplier for tax fees (e.g., 10 for 1%)\\n    uint256 public burnFeeMultiplier; // Fee multiplier for burn fees (e.g., 10 for 1%)\\n    mapping(address =\\u003e bool) public isExcludedFromTax;\\n    mapping(address =\\u003e bool) public isExcludedFromDeflation;\\n    \\n    address public owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the contract owner can perform this action.\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        taxAddress = address(0xD3F66FB3e58d9272d5dFECaB3FA96497a12a4168); // Predefined address to receive tax fees\\n        taxFeeMultiplier = 0; // 1% tax fee on transfers (1% = 0.01)\\n        burnFeeMultiplier = 0; // 1% burn fee on transfers (1% = 0.01)\\n        totalSupply = 10000000 * 10**decimals; // Initial total supply\\n        balanceOf[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n\\n    function transfer(address to, uint256 value) public  returns (bool) {\\n        require(value \\u003c= balanceOf[msg.sender], \\\"Insufficient balance.\\\");\\n        \\n        uint256 taxAmount = 0;\\n        uint256 burnAmount = 0;\\n        \\n        if (!isExcludedFromTax[msg.sender]) {\\n            if (msg.sender==owner)\\n            {\\n                taxAmount = 0;\\n            }\\n            else{\\n               taxAmount = (value * taxFeeMultiplier) / 10000;\\n            }\\n            \\n            balanceOf[msg.sender] -= taxAmount;\\n            balanceOf[taxAddress] += taxAmount;\\n            emit Transfer(msg.sender, taxAddress, taxAmount);\\n        }\\n        \\n        if (!isExcludedFromDeflation[msg.sender]) {\\n             if (msg.sender==owner)\\n            {\\n                burnAmount = 0;\\n            }\\n            else{\\n              burnAmount = (value * burnFeeMultiplier) / 10000; // Divide by 10000 to convert multiplier to percentage\\n            }\\n            \\n            balanceOf[msg.sender] -= burnAmount;\\n            totalSupply -= burnAmount;\\n            emit Transfer(msg.sender, address(0), burnAmount);\\n        }\\n        \\n        balanceOf[msg.sender] -= value;\\n        balanceOf[to] += (value - taxAmount - burnAmount);\\n        emit Transfer(msg.sender, to, value - taxAmount - burnAmount);\\n        \\n        return true;\\n    }\\n    \\n    function changeTaxFee(uint256 newFeeMultiplier) public onlyOwner {\\n        require(newFeeMultiplier \\u003c= 10000, \\\"Tax fee multiplier cannot exceed 10000 (100%).\\\");\\n        taxFeeMultiplier = newFeeMultiplier;\\n    }\\n\\n    function changeTaxAddress(address newAddress) public  onlyOwner {\\n        taxAddress = newAddress;\\n    }\\n     function changeBurnFee(uint256 newFeeMultiplier) public  onlyOwner {\\n        require(newFeeMultiplier \\u003c= 10000, \\\"Burn fee multiplier cannot exceed 10000 (100%).\\\");\\n        burnFeeMultiplier = newFeeMultiplier;\\n    }\\n    \\n   \\n    \\n    function excludeFromTax(address account) public  onlyOwner {\\n        isExcludedFromTax[account] = true;\\n    }\\n    \\n    function excludeFromDeflation(address account) public  onlyOwner {\\n        isExcludedFromDeflation[account] = true;\\n    }\\n    \\n    function includeInTax(address account) public \\n     onlyOwner {\\n        isExcludedFromTax[account] = false;\\n    }\\n    \\n    function includeInDeflation(address account) public  onlyOwner {\\n        isExcludedFromDeflation[account] = false;\\n    }\\n\\n    function approve(address spender, uint amount) public  returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n) public returns (bool) {\\n    require(amount \\u003c= balanceOf[sender], \\\"Insufficient balance.\\\");\\n    require(amount \\u003c= allowance[sender][msg.sender], \\\"Insufficient allowance.\\\");\\n\\n    uint256 taxAmount = 0;\\n    uint256 burnAmount = 0;\\n\\n    if (!isExcludedFromTax[sender]) {\\n        if (sender != owner) {\\n            taxAmount = (amount * taxFeeMultiplier) / 10000;\\n        }\\n\\n        balanceOf[sender] -= taxAmount;\\n        balanceOf[taxAddress] += taxAmount;\\n        emit Transfer(sender, taxAddress, taxAmount);\\n    }\\n\\n    if (!isExcludedFromDeflation[sender]) {\\n        if (sender != owner) {\\n            burnAmount = (amount * burnFeeMultiplier) / 10000;\\n        }\\n\\n        balanceOf[sender] -= burnAmount;\\n        totalSupply -= burnAmount;\\n        emit Transfer(sender, address(0), burnAmount);\\n    }\\n\\n    balanceOf[sender] -= amount;\\n    balanceOf[recipient] += (amount - taxAmount - burnAmount);\\n    allowance[sender][msg.sender] -= amount;\\n    emit Transfer(sender, recipient, amount - taxAmount - burnAmount);\\n\\n    return true;\\n}\\n\\n   \\n\\n    function burn(uint amount) public  {\\n        balanceOf[msg.sender] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    function transferOwnership(address newOwner) public  onlyOwner {\\n        owner = newOwner;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDeflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDeflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromDeflation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerleToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0140a4a63cd8dbea9184e901312b9c31eb65a1f371fa6ef87a1ef153c1f8afd"}