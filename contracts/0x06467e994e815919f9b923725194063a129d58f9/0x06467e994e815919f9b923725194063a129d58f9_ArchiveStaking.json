{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"project:/contracts/ArchiveStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract ArchiveStaking is Ownable {\\r\\n    struct Staking {\\r\\n        uint256 lastReward;\\r\\n        uint256 amount;\\r\\n        uint256 rewarded;\\r\\n        uint256 pendingReward;\\r\\n        bool isUnstaked;\\r\\n        bool isInitialized;\\r\\n    }\\r\\n\\r\\n    mapping(address => Staking) public stakers;\\r\\n\\r\\n    uint256 public maxApr = 1000000;\\r\\n    uint256 public minStaking = 1 * 10 ** 18;\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public totalEth;\\r\\n\\r\\n    uint256 public rewardPeriod = 300;\\r\\n    uint256 private rewardPeriodsPerYear = 365 days / rewardPeriod;\\r\\n\\r\\n    bool public stakingEnabled = true;\\r\\n    bool public claimEnabled = true;\\r\\n\\r\\n    IERC20 private token;\\r\\n\\r\\n    event Stake(address indexed staker, uint256 amount, uint totalStaked);\\r\\n    event Reward(address indexed staker, uint256 amount);\\r\\n    event UnStake(address indexed staker, uint256 amount);\\r\\n\\r\\n    constructor(address _token) {\\r\\n        token = IERC20(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Starts a new staking or adds tokens to the active staking.\\r\\n    * @param amount Amount of Archive tokens to stake.\\r\\n    */\\r\\n    function stake(uint256 amount) external {\\r\\n        require(stakingEnabled, \\\"disabled\\\");\\r\\n        require(amount >= minStaking, \\\"less than minimum\\\");\\r\\n\\r\\n        address staker = _msgSender();\\r\\n\\r\\n        require(token.balanceOf(staker) >= amount, \\\"insufficient token\\\");\\r\\n        require(token.allowance(staker, address(this)) >= amount, \\\"not allowed\\\");\\r\\n\\r\\n        if (stakers[staker].isInitialized && !stakers[staker].isUnstaked) {\\r\\n            stakers[staker].pendingReward = _getStakingReward(stakers[staker]);\\r\\n            stakers[staker].amount += amount;\\r\\n            stakers[staker].lastReward = block.timestamp;\\r\\n        } else {\\r\\n            stakers[staker] = Staking(block.timestamp, amount, 0, 0, false, true);\\r\\n        }\\r\\n\\r\\n        totalStaked += amount;\\r\\n        token.transferFrom(staker, address(this), amount);\\r\\n\\r\\n        emit Stake(staker, amount, stakers[staker].amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Claim rewards and withdraw the amount of tokens from staking.\\r\\n    * @param amount Amount of tokens to unstake.\\r\\n    */\\r\\n    function unstake(uint256 amount) external {\\r\\n        address staker = _msgSender();\\r\\n\\r\\n        Staking storage staking = stakers[staker];\\r\\n        require(amount <= staking.amount, \\\"insufficient token\\\");\\r\\n\\r\\n        _claim(staker);\\r\\n\\r\\n        if (staking.amount == amount) {\\r\\n            staking.isUnstaked = true;\\r\\n            staking.amount = 0;\\r\\n        } else {\\r\\n            staking.amount -= amount;\\r\\n        }\\r\\n\\r\\n        totalStaked -= amount;\\r\\n        token.transfer(staker, amount);\\r\\n\\r\\n        emit UnStake(staker, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Claim rewards to staker account.\\r\\n    */\\r\\n    function claim() external {\\r\\n        _claim(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Handle deposit of eth amount to smart contract account.\\r\\n    */\\r\\n    receive() external payable {\\r\\n        if (msg.value > 0) {\\r\\n            totalEth += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Handle deposit of eth amount to smart contract account.\\r\\n    */\\r\\n    fallback() external payable {\\r\\n        if (msg.value > 0) {\\r\\n            totalEth += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Withdraw ETH from smart contract account.\\r\\n    * @param to Address to withdraw.\\r\\n    * @param amount Amount of ETH to withdraw.\\r\\n    */\\r\\n    function withdrawEth(address to, uint256 amount) external onlyOwner {\\r\\n        _withdrawEth(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set the rewards period in seconds for charge rewards.\\r\\n    * @param _rewardPeriod Period each {_rewardPeriod} seconds charge rewards.\\r\\n    */\\r\\n    function setRewardPeriod(uint256 _rewardPeriod) external onlyOwner {\\r\\n        require(_rewardPeriod > 0, \\\"less than one\\\");\\r\\n        rewardPeriod = _rewardPeriod;\\r\\n        rewardPeriodsPerYear = 365 days / _rewardPeriod;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set the maximum of APR (Annual Percentage Rate).\\r\\n    * @param _maxApr Maximum Annual Percentage Rate.\\r\\n    */\\r\\n    function setMaxApr(uint256 _maxApr) external onlyOwner {\\r\\n        maxApr = _maxApr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Turn on or off staking operation.\\r\\n    * @param _stakingEnabled Flag to set true or false.\\r\\n    */\\r\\n    function setStakingEnabled(bool _stakingEnabled) external onlyOwner {\\r\\n        stakingEnabled = _stakingEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Turn on or off claiming rewards operation.\\r\\n    * @param _claimEnabled Flag to set true or false.\\r\\n    */\\r\\n    function setClaimEnabled(bool _claimEnabled) external onlyOwner {\\r\\n        claimEnabled = _claimEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Get the rewards amount for the staker account.\\r\\n    * @param staker Address of the staker account.\\r\\n    */\\r\\n    function getStakingReward(address staker) public view returns (uint256) {\\r\\n        return _getStakingReward(stakers[staker]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns APR for staker based on staked amount and total ETH on smart contract balance.\\r\\n    */\\r\\n    function getApr(address staker) public view returns (uint256) {\\r\\n        return _getApr(stakers[staker]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Withdraw ETH from smart contract account.\\r\\n    * @param to Address to withdraw.\\r\\n    * @param amount Amount of ETH to withdraw.\\r\\n    */\\r\\n    function _withdrawEth(address to, uint256 amount) private {\\r\\n        require(totalEth >= amount, \\\"insufficient eth\\\");\\r\\n        payable(to).transfer(amount);\\r\\n        totalEth -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Rewards calculation and withdraw to staker account.\\r\\n    * @param staker Staker account address.\\r\\n    */\\r\\n    function _claim(address staker) private {\\r\\n        require(claimEnabled, \\\"disabled\\\");\\r\\n\\r\\n        Staking storage staking = stakers[staker];\\r\\n        uint256 reward = _getStakingReward(staking);\\r\\n\\r\\n        staking.lastReward = block.timestamp;\\r\\n        staking.rewarded += reward;\\r\\n        staking.pendingReward = 0;\\r\\n\\r\\n        _withdrawEth(staker, reward);\\r\\n\\r\\n        emit Reward(staker, reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Rewards calculation for staking\\r\\n    * @param staking Staking record\\r\\n    */\\r\\n    function _getStakingReward(Staking storage staking) private view returns (uint256) {\\r\\n        require(staking.isInitialized && !staking.isUnstaked, \\\"no staking\\\");\\r\\n\\r\\n        uint256 apr = _getApr(staking);\\r\\n        uint256 rewardsTime = block.timestamp - staking.lastReward;\\r\\n\\r\\n        uint256 periods = rewardsTime / rewardPeriod;\\r\\n        uint256 reward = totalEth * apr * periods / 1000000 / rewardPeriodsPerYear;\\r\\n\\r\\n        return staking.pendingReward + reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Returns APR for staker based on staked amount and total ETH on smart contract balance.\\r\\n    */\\r\\n    function _getApr(Staking storage staker) private view returns (uint256) {\\r\\n        if (staker.amount == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 apr = (staker.amount * 1000000) / totalStaked;\\r\\n            if (apr > maxApr) {\\r\\n                return maxApr;\\r\\n            } else {\\r\\n                return apr;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimEnabled\",\"type\":\"bool\"}],\"name\":\"setClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxApr\",\"type\":\"uint256\"}],\"name\":\"setMaxApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingEnabled\",\"type\":\"bool\"}],\"name\":\"setStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnstaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArchiveStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c7f950271d118a5bdf250dffc39128dcced8472c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50429bd65d09de8ea1ece4980972d6f14909dc692a271b7111da095857ae6e86"}