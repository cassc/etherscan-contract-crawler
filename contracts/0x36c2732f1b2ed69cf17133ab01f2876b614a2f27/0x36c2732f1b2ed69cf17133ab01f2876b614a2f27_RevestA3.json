{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RevestA3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\\nimport \\\"./interfaces/IRevest.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./interfaces/IInterestHandler.sol\\\";\\nimport \\\"./interfaces/ITokenVault.sol\\\";\\nimport \\\"./interfaces/IRewardsHandler.sol\\\";\\nimport \\\"./interfaces/IOutputReceiver.sol\\\";\\nimport \\\"./interfaces/IOutputReceiverV2.sol\\\";\\nimport \\\"./interfaces/IOutputReceiverV3.sol\\\";\\nimport \\\"./interfaces/IAddressLock.sol\\\";\\nimport \\\"./utils/RevestAccessControl.sol\\\";\\nimport \\\"./utils/RevestReentrancyGuard.sol\\\";\\nimport \\\"./lib/IWETH.sol\\\";\\n\\n/**\\n * This is the entrypoint for the frontend, as well as third-party Revest integrations.\\n * Solidity style guide ordering: receive, fallback, external, public, internal, private - within a grouping, view and pure go last - https://docs.soliditylang.org/en/latest/style-guide.html\\n */\\ncontract RevestA3 is IRevest, RevestAccessControl, RevestReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n\\n    bytes4 public constant ADDRESS_LOCK_INTERFACE_ID = type(IAddressLock).interfaceId;\\n    bytes4 public constant OUTPUT_RECEIVER_INTERFACE_V2_ID = type(IOutputReceiverV2).interfaceId;\\n    bytes4 public constant OUTPUT_RECEIVER_INTERFACE_V3_ID = type(IOutputReceiverV3).interfaceId;\\n\\n    address immutable WETH;\\n\\n    uint public erc20Fee; // out of 1000\\n    uint private constant erc20multiplierPrecision = 1000;\\n    uint public flatWeiFee;\\n    uint private constant MAX_INT = 2**256 - 1;\\n\\n    mapping(address => bool) private approved;\\n\\n    mapping(address => bool) public whitelisted;\\n\\n    /**\\n     * @dev Primary constructor to create the Revest controller contract\\n     */\\n    constructor(address provider, address weth) RevestAccessControl(provider) {\\n        WETH = weth;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev creates a single time-locked NFT with <quantity> number of copies with <amount> of <asset> stored for each copy\\n     * asset - the address of the underlying ERC20 token for this bond\\n     * amount - the amount to store per NFT if multiple NFTs of this variety are being created\\n     * unlockTime - the timestamp at which this will unlock\\n     * quantity \u2013 the number of FNFTs to create with this operation     \\n     */\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override nonReentrant returns (uint) {\\n        // Get the next id\\n        uint fnftId = getFNFTHandler().getNextId();\\n        // Get or create lock based on time, assign lock to ID\\n        {\\n            IRevest.LockParam memory timeLock;\\n            timeLock.lockType = IRevest.LockType.TimeLock;\\n            timeLock.timeLockExpiry = endTime;\\n            getLockManager().createLock(fnftId, timeLock);\\n        }\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTTimeLockMinted(fnftConfig.asset, _msgSender(), fnftId, endTime, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override nonReentrant returns (uint) {\\n        // copy the fnftId\\n        uint fnftId = getFNFTHandler().getNextId();\\n        // Initialize the lock structure\\n        {\\n            IRevest.LockParam memory valueLock;\\n            valueLock.lockType = IRevest.LockType.ValueLock;\\n            valueLock.valueLock.unlockRisingEdge = unlockRisingEdge;\\n            valueLock.valueLock.unlockValue = unlockValue;\\n            valueLock.valueLock.asset = primaryAsset;\\n            valueLock.valueLock.compareTo = compareTo;\\n            valueLock.valueLock.oracle = oracleDispatch;\\n\\n            getLockManager().createLock(fnftId, valueLock);\\n        }\\n\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTValueLockMinted(fnftConfig.asset,  _msgSender(), fnftId, compareTo, oracleDispatch, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override nonReentrant returns (uint) {\\n        uint fnftId = getFNFTHandler().getNextId();\\n\\n        {\\n            IRevest.LockParam memory addressLock;\\n            addressLock.addressLock = trigger;\\n            addressLock.lockType = IRevest.LockType.AddressLock;\\n            // Get or create lock based on address which can trigger unlock, assign lock to ID\\n            uint lockId = getLockManager().createLock(fnftId, addressLock);\\n\\n            // The lock ID is already incremented prior to calling a method that could allow for reentry\\n            if(trigger.supportsInterface(ADDRESS_LOCK_INTERFACE_ID)) {\\n                IAddressLock(trigger).createLock(fnftId, lockId, arguments);\\n            }\\n        }\\n        // This is a public call to a third-party contract. Must be done after everything else.\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTAddressLockMinted(fnftConfig.asset, _msgSender(), fnftId, trigger, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function withdrawFNFT(uint fnftId, uint quantity) external override nonReentrant {\\n        _withdrawFNFT(fnftId, quantity);\\n    }\\n\\n    /// Advanced FNFT withdrawals removed for the time being \u2013 no active implementations\\n    /// Represents slightly increased surface area \u2013 may be utilized in Resolve\\n\\n    function unlockFNFT(uint fnftId) external override nonReentrant  {\\n        // Works for value locks or time locks\\n        IRevest.LockType lock = getLockManager().lockTypes(fnftId);\\n        require(lock == IRevest.LockType.AddressLock || lock == IRevest.LockType.ValueLock, \\\"E008\\\");\\n        require(getLockManager().unlockFNFT(fnftId, _msgSender()), \\\"E056\\\");\\n\\n        emit FNFTUnlocked(_msgSender(), fnftId);\\n    }\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external override nonReentrant returns (uint[] memory) {\\n        // Splitting is entirely disabled for the time being\\n        revert(\\\"TMP_BRK\\\");\\n    }\\n\\n    /// @return the FNFT ID\\n    function extendFNFTMaturity(\\n        uint fnftId,\\n        uint endTime\\n    ) external override nonReentrant returns (uint) {\\n        IFNFTHandler fnftHandler = getFNFTHandler();\\n        uint supply = fnftHandler.getSupply(fnftId);\\n        uint balance = fnftHandler.getBalance(_msgSender(), fnftId);\\n\\n        require(endTime > block.timestamp, 'E002');\\n        require(fnftId < fnftHandler.getNextId(), \\\"E007\\\");\\n        require(balance == supply , \\\"E022\\\");\\n        \\n        IRevest.FNFTConfig memory config = getTokenVault().getFNFT(fnftId);\\n        ILockManager manager = getLockManager();\\n        // If it can't have its maturity extended, revert\\n        // Will also return false on non-time lock locks\\n        require(config.maturityExtension &&\\n            manager.lockTypes(fnftId) == IRevest.LockType.TimeLock, \\\"E029\\\");\\n        // If desired maturity is below existing date, reject operation\\n        require(manager.fnftIdToLock(fnftId).timeLockExpiry < endTime, \\\"E030\\\");\\n\\n        // Update the lock\\n        IRevest.LockParam memory lock;\\n        lock.lockType = IRevest.LockType.TimeLock;\\n        lock.timeLockExpiry = endTime;\\n\\n        manager.createLock(fnftId, lock);\\n\\n        // Callback to IOutputReceiverV3\\n        if(config.pipeToContract != address(0) && config.pipeToContract.supportsInterface(OUTPUT_RECEIVER_INTERFACE_V3_ID)) {\\n            IOutputReceiverV3(config.pipeToContract).handleTimelockExtensions(fnftId, endTime, msg.sender);\\n        }\\n\\n        emit FNFTMaturityExtended(_msgSender(), fnftId, endTime);\\n\\n        return fnftId;\\n    }\\n\\n    /**\\n     * Amount will be per FNFT. So total ERC20s needed is amount * quantity.\\n     * We don't charge an ETH fee on depositAdditional, but do take the erc20 percentage.\\n     * Users can deposit additional into their own\\n     * Otherwise, if not an owner, they must distribute to all FNFTs equally\\n     */\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external override nonReentrant returns (uint) {\\n        address vault = addressesProvider.getTokenVault();\\n        IRevest.FNFTConfig memory fnft = ITokenVault(vault).getFNFT(fnftId);\\n        require(fnftId < getFNFTHandler().getNextId(), \\\"E007\\\");\\n        require(fnft.isMulti, \\\"E034\\\");\\n        require(fnft.depositStopTime < block.timestamp || fnft.depositStopTime == 0, \\\"E035\\\");\\n        require(quantity > 0, \\\"E070\\\");\\n\\n        address handler = addressesProvider.getRevestFNFT();\\n        uint supply = IFNFTHandler(handler).getSupply(fnftId);\\n\\n        // Future versions may reintroduce series splitting, if it is ever in demand\\n        require(quantity == supply, 'E083');\\n\\n        require(fnft.asset == address(0), 'TMP_BRK');\\n        \\n        // For now, ERC-20 deposits to TokenVault are disabled\\n        // This breaks adding additional tokens to an RVST stake\\n        // Functionality for this will be restored in the near future\\n               \\n        // Trigger copying any data on the output receiver here\\n        // May not be as simple as just copy-pasting data, and it will be left up to devs\\n        // To determine how to (and if) to implement this method\\n        // Performed last to give outputRecevier acccess to all new state data\\n        // We only allow this for things where thre is no real asset stored here, to ensure ERC20 interactions with TokenVault are not expected\\n        if(fnft.asset == address(0) && fnft.pipeToContract != address(0) && fnft.pipeToContract.supportsInterface(OUTPUT_RECEIVER_INTERFACE_V2_ID)) {\\n            if(fnft.pipeToContract.supportsInterface(OUTPUT_RECEIVER_INTERFACE_V3_ID)) {\\n                IOutputReceiverV3(fnft.pipeToContract).handleAdditionalDeposit(fnftId, amount, quantity, msg.sender);\\n            }\\n        }\\n        emit FNFTAddionalDeposited(_msgSender(), 0, quantity, amount);\\n\\n        return 0;\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n\\n    // Private function for use in withdrawing FNFTs, allow us to make universal use of reentrancy guard \\n    function _withdrawFNFT(uint fnftId, uint quantity) private {\\n        address fnftHandler = addressesProvider.getRevestFNFT();\\n\\n        // Check if this many FNFTs exist in the first place for the given ID\\n        require(quantity > 0, \\\"E003\\\");\\n        // Burn the FNFTs being exchanged\\n        IFNFTHandler(fnftHandler).burn(_msgSender(), fnftId, quantity);\\n        require(getLockManager().unlockFNFT(fnftId, _msgSender()), 'E082');\\n        \\n        getTokenVault().withdrawToken(fnftId, quantity, _msgSender());\\n        emit FNFTWithdrawn(_msgSender(), fnftId, quantity);\\n    }\\n\\n    function doMint(\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint weiValue\\n    ) internal {\\n        bool isSingular;\\n        uint totalQuantity = quantities[0];\\n        {\\n            uint rec = recipients.length;\\n            uint quant = quantities.length;\\n            require(rec == quant, \\\"recipients and quantities arrays must match\\\");\\n            // Calculate total quantity\\n            isSingular = rec == 1;\\n            if(!isSingular) {\\n                for(uint i = 1; i < quant; i++) {\\n                    totalQuantity += quantities[i];\\n                }\\n            }\\n            require(totalQuantity > 0, \\\"E003\\\");\\n        }\\n\\n        // Gas optimization\\n        address vault = addressesProvider.getTokenVault();\\n\\n        // Take fees\\n        if(weiValue > 0) {\\n            // Immediately convert all ETH to WETH\\n            IWETH(WETH).deposit{value: weiValue}();\\n        }\\n\\n        // For multi-chain deployments, will relay through RewardsHandlerSimplified to end up in admin wallet\\n        // Whitelist system will charge fees on all but approved parties, who may charge them using negotiated\\n        // values with the Revest Protocol\\n        if(!whitelisted[_msgSender()]) {\\n            if(flatWeiFee > 0) {\\n                require(weiValue >= flatWeiFee, \\\"E005\\\");\\n                address reward = addressesProvider.getRewardsHandler();\\n                if(!approved[reward]) {\\n                    IERC20(WETH).approve(reward, MAX_INT);\\n                    approved[reward] = true;\\n                }\\n                IRewardsHandler(reward).receiveFee(WETH, flatWeiFee);\\n            }\\n            \\n            // If we aren't depositing any value, no point running this\\n            if(fnftConfig.depositAmount > 0) {\\n                uint totalERC20Fee = erc20Fee * totalQuantity * fnftConfig.depositAmount / erc20multiplierPrecision;\\n                if(totalERC20Fee > 0) {\\n                    IERC20(fnftConfig.asset).safeTransferFrom(_msgSender(), addressesProvider.getAdmin(), totalERC20Fee);\\n                }\\n            }\\n\\n            // If there's any leftover ETH after the flat fee, convert it to WETH\\n            weiValue -= flatWeiFee;\\n        }\\n        \\n        // Convert ETH to WETH if necessary\\n        if(weiValue > 0) {\\n            // If the asset is WETH, we also enable sending ETH to pay for the tx fee. Not required though\\n            require(fnftConfig.asset == WETH, \\\"E053\\\");\\n            require(weiValue >= fnftConfig.depositAmount, \\\"E015\\\");\\n        }\\n        \\n\\n        // Create the FNFT and update accounting within TokenVault\\n        ITokenVault(vault).createFNFT(fnftId, fnftConfig, totalQuantity, _msgSender());\\n\\n        // Now, we move the funds to token vault from the message sender\\n        if(fnftConfig.asset != address(0)){\\n            IERC20(fnftConfig.asset).safeTransferFrom(_msgSender(), vault, totalQuantity * fnftConfig.depositAmount);\\n        }\\n        // Mint NFT\\n        // Gas optimization\\n        if(!isSingular) {\\n            getFNFTHandler().mintBatchRec(recipients, quantities, fnftId, totalQuantity, '');\\n        } else {\\n            getFNFTHandler().mint(recipients[0], fnftId, quantities[0], '');\\n        }\\n\\n    }\\n\\n    function burn(\\n        address account,\\n        uint id,\\n        uint amount\\n    ) internal {\\n        address fnftHandler = addressesProvider.getRevestFNFT();\\n        require(IFNFTHandler(fnftHandler).getSupply(id) - amount >= 0, \\\"E025\\\");\\n        IFNFTHandler(fnftHandler).burn(account, id, amount);\\n    }\\n\\n    function setFlatWeiFee(uint wethFee) external override onlyOwner {\\n        flatWeiFee = wethFee;\\n    }\\n\\n    function setERC20Fee(uint erc20) external override onlyOwner {\\n        erc20Fee = erc20;\\n    }\\n\\n    function getFlatWeiFee() external view override returns (uint) {\\n        return flatWeiFee;\\n    }\\n\\n    function getERC20Fee() external view override returns (uint) {\\n        return erc20Fee;\\n    }\\n\\n    /**\\n     * @dev Returns the cached IAddressRegistry connected to this contract\\n     **/\\n    function getAddressesProvider() external view returns (IAddressRegistry) {\\n        return addressesProvider;\\n    }\\n\\n\\n    // Used to whitelist a contract for custom fee behavior\\n    function modifyWhitelist(address contra, bool listed) external onlyOwner {\\n        whitelisted[contra] = listed;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRevest {\\n    event FNFTTimeLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint endTime,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTValueLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address compareTo,\\n        address oracleDispatch,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTAddressLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address trigger,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTWithdrawn(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed quantity\\n    );\\n\\n    event FNFTSplit(\\n        address indexed from,\\n        uint[] indexed newFNFTId,\\n        uint[] indexed proportions,\\n        uint quantity\\n    );\\n\\n    event FNFTUnlocked(\\n        address indexed from,\\n        uint indexed fnftId\\n    );\\n\\n    event FNFTMaturityExtended(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed newExtendedTime\\n    );\\n\\n    event FNFTAddionalDeposited(\\n        address indexed from,\\n        uint indexed newFNFTId,\\n        uint indexed quantity,\\n        uint amount\\n    );\\n\\n    struct FNFTConfig {\\n        address asset; // The token being stored\\n        address pipeToContract; // Indicates if FNFT will pipe to another contract\\n        uint depositAmount; // How many tokens\\n        uint depositMul; // Deposit multiplier\\n        uint split; // Number of splits remaining\\n        uint depositStopTime; //\\n        bool maturityExtension; // Maturity extensions remaining\\n        bool isMulti; //\\n        bool nontransferrable; // False by default (transferrable) //\\n    }\\n\\n    // Refers to the global balance for an ERC20, encompassing possibly many FNFTs\\n    struct TokenTracker {\\n        uint lastBalance;\\n        uint lastMul;\\n    }\\n\\n    enum LockType {\\n        DoesNotExist,\\n        TimeLock,\\n        ValueLock,\\n        AddressLock\\n    }\\n\\n    struct LockParam {\\n        address addressLock;\\n        uint timeLockExpiry;\\n        LockType lockType;\\n        ValueLock valueLock;\\n    }\\n\\n    struct Lock {\\n        address addressLock;\\n        LockType lockType;\\n        ValueLock valueLock;\\n        uint timeLockExpiry;\\n        uint creationTime;\\n        bool unlocked;\\n    }\\n\\n    struct ValueLock {\\n        address asset;\\n        address compareTo;\\n        address oracle;\\n        uint unlockValue;\\n        bool unlockRisingEdge;\\n    }\\n\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function withdrawFNFT(uint tokenUID, uint quantity) external;\\n\\n    function unlockFNFT(uint tokenUID) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external returns (uint[] memory newFNFTIds);\\n\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external returns (uint);\\n\\n    function extendFNFTMaturity(\\n        uint fnftId,\\n        uint endTime\\n    ) external returns (uint);\\n\\n    function setFlatWeiFee(uint wethFee) external;\\n\\n    function setERC20Fee(uint erc20) external;\\n\\n    function getFlatWeiFee() external view returns (uint);\\n\\n    function getERC20Fee() external view returns (uint);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev\\n *\\n */\\ninterface IAddressRegistry {\\n\\n    function initialize(\\n        address lock_manager_,\\n        address liquidity_,\\n        address revest_token_,\\n        address token_vault_,\\n        address revest_,\\n        address fnft_,\\n        address metadata_,\\n        address admin_,\\n        address rewards_\\n    ) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setAdmin(address admin) external;\\n\\n    function getLockManager() external view returns (address);\\n\\n    function setLockManager(address manager) external;\\n\\n    function getTokenVault() external view returns (address);\\n\\n    function setTokenVault(address vault) external;\\n\\n    function getRevestFNFT() external view returns (address);\\n\\n    function setRevestFNFT(address fnft) external;\\n\\n    function getMetadataHandler() external view returns (address);\\n\\n    function setMetadataHandler(address metadata) external;\\n\\n    function getRevest() external view returns (address);\\n\\n    function setRevest(address revest) external;\\n\\n    function getDEX(uint index) external view returns (address);\\n\\n    function setDex(address dex) external;\\n\\n    function getRevestToken() external view returns (address);\\n\\n    function setRevestToken(address token) external;\\n\\n    function getRewardsHandler() external view returns(address);\\n\\n    function setRewardsHandler(address esc) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLPs() external view returns (address);\\n\\n    function setLPs(address liquidToken) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ILockManager {\\n\\n    function createLock(uint fnftId, IRevest.LockParam memory lock) external returns (uint);\\n\\n    function getLock(uint lockId) external view returns (IRevest.Lock memory);\\n\\n    function fnftIdToLockId(uint fnftId) external view returns (uint);\\n\\n    function fnftIdToLock(uint fnftId) external view returns (IRevest.Lock memory);\\n\\n    function pointFNFTToLock(uint fnftId, uint lockId) external;\\n\\n    function lockTypes(uint tokenId) external view returns (IRevest.LockType);\\n\\n    function unlockFNFT(uint fnftId, address sender) external returns (bool);\\n\\n    function getLockMaturity(uint fnftId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInterestHandler  {\\n\\n    function registerDeposit(uint fnftId) external;\\n\\n    function getPrincipal(uint fnftId) external view returns (uint);\\n\\n    function getInterest(uint fnftId) external view returns (uint);\\n\\n    function getAmountToWithdraw(uint fnftId) external view returns (uint);\\n\\n    function getUnderlyingToken(uint fnftId) external view returns (address);\\n\\n    function getUnderlyingValue(uint fnftId) external view returns (uint);\\n\\n    //These methods exist for external operations\\n    function getPrincipalDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getInterestDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getUnderlyingTokenDetail(address asset) external view returns (address);\\n\\n    function getInterestRate(address asset) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ITokenVault {\\n\\n    function createFNFT(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint quantity,\\n        address from\\n    ) external;\\n\\n    function withdrawToken(\\n        uint fnftId,\\n        uint quantity,\\n        address user\\n    ) external;\\n\\n    function depositToken(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external;\\n\\n    function cloneFNFTConfig(IRevest.FNFTConfig memory old) external returns (IRevest.FNFTConfig memory);\\n\\n    function mapFNFTToToken(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external;\\n\\n    function handleMultipleDeposits(\\n        uint fnftId,\\n        uint newFNFTId,\\n        uint amount\\n    ) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory newFNFTIds,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external;\\n\\n    function getFNFT(uint fnftId) external view returns (IRevest.FNFTConfig memory);\\n    function getFNFTCurrentValue(uint fnftId) external view returns (uint);\\n    function getNontransferable(uint fnftId) external view returns (bool);\\n    function getSplitsRemaining(uint fnftId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRewardsHandler {\\n\\n    struct UserBalance {\\n        uint allocPoint; // Allocation points\\n        uint lastMul;\\n    }\\n\\n    function receiveFee(address token, uint amount) external;\\n\\n    function updateLPShares(uint fnftId, uint newShares) external;\\n\\n    function updateBasicShares(uint fnftId, uint newShares) external;\\n\\n    function getAllocPoint(uint fnftId, address token, bool isBasic) external view returns (uint);\\n\\n    function claimRewards(uint fnftId, address caller) external returns (uint);\\n\\n    function setStakingContract(address stake) external;\\n\\n    function getRewards(uint fnftId, address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOutputReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n */\\ninterface IOutputReceiver is IRegistryProvider, IERC165 {\\n\\n    function receiveRevestOutput(\\n        uint fnftId,\\n        address asset,\\n        address payable owner,\\n        uint quantity\\n    ) external;\\n\\n    function getCustomMetadata(uint fnftId) external view returns (string memory);\\n\\n    function getValue(uint fnftId) external view returns (uint);\\n\\n    function getAsset(uint fnftId) external view returns (address);\\n\\n    function getOutputDisplayValues(uint fnftId) external view returns (bytes memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOutputReceiverV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IOutputReceiver.sol\\\";\\nimport \\\"./IRevest.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n */\\ninterface IOutputReceiverV2 is IOutputReceiver {\\n\\n    // Future proofing for secondary callbacks during withdrawal\\n    // Could just use triggerOutputReceiverUpdate and call withdrawal function\\n    // But deliberately using reentry is poor form and reminds me too much of OAuth 2.0 \\n    function receiveSecondaryCallback(\\n        uint fnftId,\\n        address payable owner,\\n        uint quantity,\\n        IRevest.FNFTConfig memory config,\\n        bytes memory args\\n    ) external payable;\\n\\n    // Allows for similar function to address lock, updating state while still locked\\n    // Called by the user directly\\n    function triggerOutputReceiverUpdate(\\n        uint fnftId,\\n        bytes memory args\\n    ) external;\\n\\n    // This function should only ever be called when a split or additional deposit has occurred \\n    function handleFNFTRemaps(uint fnftId, uint[] memory newFNFTIds, address caller, bool cleanup) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOutputReceiverV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IOutputReceiverV2.sol\\\";\\n\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n */\\ninterface IOutputReceiverV3 is IOutputReceiverV2 {\\n\\n    event DepositERC20OutputReceiver(address indexed mintTo, address indexed token, uint amountTokens, uint indexed fnftId, bytes extraData);\\n\\n    event DepositERC721OutputReceiver(address indexed mintTo, address indexed token, uint[] tokenIds, uint indexed fnftId, bytes extraData);\\n\\n    event DepositERC1155OutputReceiver(address indexed mintTo, address indexed token, uint tokenId, uint amountTokens, uint indexed fnftId, bytes extraData);\\n\\n    event WithdrawERC20OutputReceiver(address indexed caller, address indexed token, uint amountTokens, uint indexed fnftId, bytes extraData);\\n\\n    event WithdrawERC721OutputReceiver(address indexed caller, address indexed token, uint[] tokenIds, uint indexed fnftId, bytes extraData);\\n\\n    event WithdrawERC1155OutputReceiver(address indexed caller, address indexed token, uint tokenId, uint amountTokens, uint indexed fnftId, bytes extraData);\\n\\n    function handleTimelockExtensions(uint fnftId, uint expiration, address caller) external;\\n\\n    function handleAdditionalDeposit(uint fnftId, uint amountToDeposit, uint quantity, address caller) external;\\n\\n    function handleSplitOperation(uint fnftId, uint[] memory proportions, uint quantity, address caller) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev Address locks MUST be non-upgradeable to be considered for trusted status\\n * @author Revest\\n */\\ninterface IAddressLock is IRegistryProvider, IERC165{\\n\\n    /// Creates a lock to the specified lockID\\n    /// @param fnftId the fnftId to map this lock to. Not recommended for typical locks, as it will break on splitting\\n    /// @param lockId the lockId to map this lock to. Recommended uint for storing references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev creates a lock for the specified lockId. Will be called during the creation process for address locks when the address\\n    ///      of a contract implementing this interface is passed in as the \\\"trigger\\\" address for minting an address lock. The bytes\\n    ///      representing any parameters this lock requires are passed through to this method, where abi.decode must be call on them\\n    function createLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Updates a lock at the specified lockId\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev updates a lock for the specified lockId. Will be called by the frontend from the information section if an update is requested\\n    ///      can further accept and decode parameters to use in modifying the lock's config or triggering other actions\\n    ///      such as triggering an on-chain oracle to update\\n    function updateLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Whether or not the lock can be unlocked\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev this method is called during the unlocking and withdrawal processes by the Revest contract - it is also used by the frontend\\n    ///      if this method is returning true and someone attempts to unlock or withdraw from an FNFT attached to the requested lock, the request will succeed\\n    /// @return whether or not this lock may be unlocked\\n    function isUnlockable(uint fnftId, uint lockId) external view returns (bool);\\n\\n    /// Provides an encoded bytes arary that represents values this lock wants to display on the info screen\\n    /// Info to decode these values is provided in the metadata file\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev used by the frontend to fetch on-chain data on the state of any given lock\\n    /// @return a bytes array that represents the result of calling abi.encode on values which the developer wants to appear on the frontend\\n    function getDisplayValues(uint fnftId, uint lockId) external view returns (bytes memory);\\n\\n    /// Maps to a URL, typically IPFS-based, that contains information on how to encode and decode paramters sent to and from this lock\\n    /// Please see additional documentation for JSON config info\\n    /// @dev this method will be called by the frontend only but is crucial to properly implement for proper minting and information workflows\\n    /// @return a URL to the JSON file containing this lock's metadata schema\\n    function getMetadata() external view returns (string memory);\\n\\n    /// Whether or not this lock will need updates and should display the option for them\\n    /// @dev this will be called by the frontend to determine if update inputs and buttons should be displayed\\n    /// @return whether or not the locks created by this contract will need updates\\n    function needsUpdate() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevestAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\nimport \\\"../interfaces/IRewardsHandler.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../interfaces/IRevestToken.sol\\\";\\nimport \\\"../interfaces/IFNFTHandler.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IInterestHandler.sol\\\";\\n\\n\\ncontract RevestAccessControl is Ownable {\\n    IAddressRegistry internal addressesProvider;\\n\\n    constructor(address provider) Ownable() {\\n        addressesProvider = IAddressRegistry(provider);\\n    }\\n\\n    modifier onlyRevest() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(\\n                _msgSender() == addressesProvider.getLockManager() ||\\n                _msgSender() == addressesProvider.getRewardsHandler() ||\\n                _msgSender() == addressesProvider.getTokenVault() ||\\n                _msgSender() == addressesProvider.getRevest() ||\\n                _msgSender() == addressesProvider.getRevestToken(),\\n            \\\"E016\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRevestController() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getRevest(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenVault() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getTokenVault(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    function setAddressRegistry(address registry) external onlyOwner {\\n        addressesProvider = IAddressRegistry(registry);\\n    }\\n\\n    function getAdmin() internal view returns (address) {\\n        return addressesProvider.getAdmin();\\n    }\\n\\n    function getRevest() internal view returns (IRevest) {\\n        return IRevest(addressesProvider.getRevest());\\n    }\\n\\n    function getRevestToken() internal view returns (IRevestToken) {\\n        return IRevestToken(addressesProvider.getRevestToken());\\n    }\\n\\n    function getLockManager() internal view returns (ILockManager) {\\n        return ILockManager(addressesProvider.getLockManager());\\n    }\\n\\n    function getTokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(addressesProvider.getTokenVault());\\n    }\\n\\n    function getUniswapV2() internal view returns (IUniswapV2Factory) {\\n        return IUniswapV2Factory(addressesProvider.getDEX(0));\\n    }\\n\\n    function getFNFTHandler() internal view returns (IFNFTHandler) {\\n        return IFNFTHandler(addressesProvider.getRevestFNFT());\\n    }\\n\\n    function getRewardsHandler() internal view returns (IRewardsHandler) {\\n        return IRewardsHandler(addressesProvider.getRewardsHandler());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevestReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract RevestReentrancyGuard is ReentrancyGuard {\\n\\n    // Used to avoid reentrancy\\n    uint private constant MAX_INT = 0xFFFFFFFFFFFFFFFF;\\n    uint private currentId = MAX_INT;\\n\\n    modifier revestNonReentrant(uint fnftId) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(fnftId != currentId, \\\"E052\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        currentId = fnftId;\\n\\n        _;\\n\\n        currentId = MAX_INT;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\n    function deposit() external payable;\\n    // Introduced later in development\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistryProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\n\\ninterface IRegistryProvider {\\n    function setAddressRegistry(address revest) external;\\n\\n    function getAddressRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevestToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRevestToken is IERC20 {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNFTHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n\\ninterface IFNFTHandler  {\\n    function mint(address account, uint id, uint amount, bytes memory data) external;\\n\\n    function mintBatchRec(address[] memory recipients, uint[] memory quantities, uint id, uint newSupply, bytes memory data) external;\\n\\n    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external;\\n\\n    function setURI(string memory newuri) external;\\n\\n    function burn(address account, uint id, uint amount) external;\\n\\n    function burnBatch(address account, uint[] memory ids, uint[] memory amounts) external;\\n\\n    function getBalance(address tokenHolder, uint id) external view returns (uint);\\n\\n    function getSupply(uint fnftId) external view returns (uint);\\n\\n    function getNextId() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFNFTId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FNFTAddionalDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTAddressLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newExtendedTime\",\"type\":\"uint256\"}],\"name\":\"FNFTMaturityExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"newFNFTId\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"FNFTSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTTimeLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"FNFTUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleDispatch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTValueLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"FNFTWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_LOCK_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTPUT_RECEIVER_INTERFACE_V2_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTPUT_RECEIVER_INTERFACE_V3_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"depositAdditionalToFNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"extendFNFTMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatWeiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvider\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlatWeiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintAddressLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primaryAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlockRisingEdge\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"oracleDispatch\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintValueLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contra\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"name\":\"modifyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"erc20\",\"type\":\"uint256\"}],\"name\":\"setERC20Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethFee\",\"type\":\"uint256\"}],\"name\":\"setFlatWeiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"splitFNFT\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"unlockFNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawFNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevestA3", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000d721a90dd7e010c8c5e022cc0100c55ac78e0fc4000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}