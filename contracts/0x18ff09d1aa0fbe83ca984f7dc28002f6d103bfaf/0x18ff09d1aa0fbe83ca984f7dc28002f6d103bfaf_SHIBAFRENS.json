{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"shibafrens.sol\": {\r\n      \"content\": \"\\n// Website: https://www.shibafrens.com\\n// Twitter: https://twitter.com/Shiba0xFrens\\n// Telegram: https://t.me/ShibaFrensArmy\\n\\n/*\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285c\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28f7\u28e6\u2804\u2812\u2802\u28c5\u2800\u2809\u2808\u281f\u2880\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u280b\u2800\u2860\u2814\u28d2\u28d2\u289b\u28e4\u28d0\u285f\u28c1\u28fd\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2809\u2809\u2818\u283b\u28ff\u2844\u2800\u28e0\u287e\u2809\u2801\u281b\u283f\u28df\u28e8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f6\u28ff\u28ff\u28ff\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u287f\u281b\u2809\u2800\u2864\u281b\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2809\u2800\u2800\u2800\u2880\u28c0\u28e7\u2866\u2812\u280b\u2809\u2800\u2800\u2800\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28e6\u28e4\u2800\u2800\u28a0\u28e4\u28e4\u28e4\u28e4\u28e4\u2800\u2800\u2800\u2800\u2800\u28e4\u28e4\u28e4\u28f6\u28ff\u28c4\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28e4\u28e6\u28e6\u28e6\u28e6\u28e6\u28e4\u28e4\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2889\u28d2\u2824\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u28b8\u284f\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2840\u28b8\u2847\u28ff\u28ff\u28ff\u28ff\u28f7\u2800\u2800\u2800\u2800\u28ff\u2800\u28ff\u28ff\u28ff\u28ff\u2808\u28f7\u28b3\u28e4\u28e4\u28c0\u28c0\u28c0\u28e0\u28e4\u2816\u28f7\u2809\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28ff\u28e7\u2800\u2800\u28f0\u28ff\u289b\u28db\u28db\u28db\u28db\u28c1\u28ff\u28ff\u28ff\u28d3\u28d2\u28d2\u28d2\u28d2\u28f2\u2800\u2800\\n\u28ff\u28f6\u28ff\u287f\u281b\u28ff\u28ed\u28ed\u28ed\u28ed\u28cd\u28ff\u28ff\u28ff\u28ff\u28ff\u28f8\u2847\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u28ff\u2800\u28ff\u28ff\u28ff\u28ff\u2800\u28ff\u28fe\u28ed\u28ed\u287f\u281b\u28ff\u28ed\u28ff\u2800\u28ff\u28f6\u285f\u28ff\u28ff\u28ff\u28ed\u28ed\u28ed\u28ed\u28bb\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28ff\u285f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\\n\u2818\u28ff\u28e4\u28fe\u28ff\u28ff\u2809\u281b\u28ff\u283f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28bf\u28e7\u28e4\u28e4\u28e4\u28e4\u28ff\u2800\u28ff\u28ff\u28ff\u28ff\u28c4\u283f\u283f\u284f\u28b0\u28ff\u28ff\u28ff\u285f\u281f\u2800\u281b\u28bf\u284f\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28fc\u28ff\u28ff\u28fd\u2803\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u28ff\u28ff\u28ff\u28cf\u28ff\u28ff\u28ff\u28bb\u2800\u2808\u2800\u2800\u2800\\n\u2800\u2800\u283b\u28ff\u2849\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\u28b8\u2847\u28ff\u28ff\u28ff\u28f7\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28ff\u28ff\u28ff\u28ff\u28fe\u28ff\u2800\u2800\u284f\u28b8\u28ff\u28ff\u28ff\u2847\u2800\u2800\u28ff\u2809\u28ed\u28ff\u28ff\u28ff\u28e4\u28f4\u28f6\u28ff\u28ff\u28ff\u28ed\u28ed\u28db\u28f6\u2800\u2809\u2809\u2809\u28fd\u280f\u28fc\u28ff\u28ff\u28f9\u28ff\u284c\u28ff\u28ff\u28ff\u28f7\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2819\u28ff\u28cd\u28ff\u28ff\u28ff\u28ff\u2809\u28f7\u28c4\u2800\u2800\u28b8\u2847\u28ff\u28ff\u28ff\u28bf\u28f7\u28fd\u28cd\u28cd\u28cd\u28cd\u287f\u28ff\u28ff\u28ff\u28c9\u28ff\u2800\u2800\u284f\u28b8\u28ff\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28e4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28d9\u28d9\u2859\u28bf\u28ff\u28ff\u28b9\u2800\u2800\u2800\u28f4\u281f\u28fc\u28ff\u28ff\u28b9\u283b\u28ff\u28ff\u2859\u28ff\u28ff\u28ff\u28f7\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u28c0\u2840\u2819\u28ff\u28ef\u28ff\u28ff\u28ff\u28ff\u2809\u28ff\u28c4\u28b8\u2847\u28ff\u28ff\u28ff\u28bf\u287f\u283f\u283f\u283f\u283f\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u283f\u2800\u2800\u284f\u28b8\u28ff\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28b8\u28ff\u28ff\u28ff\u2800\u2800\u28f0\u285f\u28f0\u28ff\u28ff\u28b9\u2803\u2800\u28ff\u28ff\u28ff\u28b9\u28ff\u28ff\u2809\u28c6\u2800\u2800\\n\u28f6\u287e\u281b\u28c9\u28fd\u283f\u28e6\u28e4\u28fc\u283f\u281f\u28bb\u28ff\u28ff\u28ff\u28ff\u28fe\u2847\u28ff\u28ff\u28ff\u28bf\u284f\u2800\u2800\u2800\u28c0\u28ff\u2803\u28ff\u28ff\u28ff\u28ff\u2800\u28e4\u28e4\u284f\u28b8\u28ff\u28ff\u28ff\u28e7\u28e4\u2800\u28c0\u28ff\u2800\u28ff\u28ff\u28ff\u28e7\u28e4\u28c0\u2800\u28b8\u285f\u28f8\u28ff\u28ff\u28ff\u2800\u28a0\u285f\u28f0\u28ff\u28ff\u28ff\u280b\u28f4\u281f\u2881\u28ff\u283b\u28f7\u28bf\u28ff\u28ff\u2819\u2844\u2800\\n\u2808\u28ff\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28bf\u284f\u2800\u2800\u2808\u284f\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u28ff\u28b0\u28f6\u28fe\u28ff\u28ff\u28ff\u28f6\u28ff\u2800\u28ff\u2800\u28ff\u28ff\u28ff\u28fd\u285f\u28a0\u28f6\u28ec\u28ed\u28f4\u28ff\u28ff\u28ff\u28fd\u28a0\u287f\u28b0\u28ff\u28ff\u28ff\u28ff\u285f\u28e0\u28fe\u28ff\u28d9\u28ff\u28ff\u28e7\u28ff\u28ff\u28ff\u283b\u2840\\n\u2800\u2800\u28bf\u28fd\u28ed\u28ed\u28ed\u28ed\u28ed\u28ed\u28ed\u28ed\u28ed\u28fd\u28ff\u28ff\u28bf\u28c7\u28ff\u28d9\u28ed\u28ff\u284f\u2800\u2800\u2800\u28cf\u28fd\u28d9\u28ed\u28ed\u28f7\u28ff\u2800\u28ff\u28fc\u28ed\u28ed\u28ed\u28ed\u28ed\u28ed\u28ff\u2800\u28ff\u28e4\u28ed\u28ed\u28ff\u28ff\u28e6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ed\u28f7\u2883\u28ff\u28f7\u28ff\u28c9\u28ff\u283f\u28ff\u28ff\u28ef\u28ed\u287f\u2809\u2808\u28ff\u28ff\u28cc\u28ff\u28ed\u28fd\u287f\\n\u2800\u2800\u2800\u2809\u283b\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281f\u280b\u2800\u2800\u2800\u28ff\u28ff\u283f\u283f\u281b\u280b\u2800\u2800\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u2800\u283f\u283f\u283f\u281b\u2808\u281b\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u28bb\u28ff\u2809\u2819\u281b\u283f\u28ff\u285f\u2800\u2800\u28bb\u28ff\u2801\u2800\u2800\u2800\u2839\u28ff\u287f\u281f\u280b\u2809\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f6\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u28f6\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28e0\u28f6\u28ff\u28ff\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2809\u2800\u28e4\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u287f\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2844\u2800\u2800\u2800\u28fe\u28ff\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u281f\u2809\u2800\u2800\u2800\u28c4\u2800\u28a0\u28ff\u284f\u28f4\u28ff\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u280b\u2800\u28e0\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28e6\u2800\u28b0\u28ff\u2807\u2800\u2800\u28e0\u2800\u2808\u283f\u283f\u28ff\u283f\u283f\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u287f\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28e4\u2800\u2800\u28bf\u287f\u2800\u2800\u28ff\u28ff\u287f\u2809\u2800\u2800\u2880\u2800\u2800\u283f\u280b\u2800\u28fc\u28ff\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2808\u28ff\u2801\u2800\u2800\u2800\u28e0\u28f6\u28ff\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2801\u2800\u2800\u2800\u2809\u2819\u281b\u280b\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28fe\u28ff\u28ff\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u28ff\u284f\u2800\u2800\u2800\u2819\u28bf\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u281b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800*/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address from) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ninterface IFren {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\ncontract SHIBAFRENS is ERC20, Ownable, ReentrancyGuard {\\n    // TOKENOMICS START ==========================================================>\\n    string private _name = \\\"Shiba Frens\\\";\\n    string private _symbol = \\\"sFRENS\\\";\\n    uint8 private _decimals = 18;\\n    uint256 private _supply = 69420;\\n    uint256 private _liqSupply = 42069;\\n    uint256 public taxForLiquidity = 37; //sniper protection, to be lowered to 1% after launch\\n    uint256 public taxForMarketing = 37; //sniper protection, to be lowered to 2% after launch\\n    uint256 public taxForShort = 10;\\n    uint256 public maxTxAmount = 6900 * 10 ** _decimals;\\n    uint256 public maxWalletAmount = 690 * 10 ** _decimals;\\n    address public _treasuryWallet = 0x10875c46c5e7a45b062F8fEd17694799144D5008;\\n    address public ShibaFrensERC721;\\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public _treasuryReserves = 0;\\n    uint256 public minShort = 0.01 ether;\\n    uint256 public minTax = 69 ether;\\n    uint256 public maxShort = 100 ether;\\n    uint256 public maxShorters = 108;\\n    uint256 public maxLoanTime = 3 days;\\n    uint256 public margin = 95;\\n    uint256 public minNFT = 1;\\n    bool public autoLiquidate = true;\\n    bool public swapLiquidations = false;\\n    bool public liqAdded = false;\\n    bool public canShort = false;\\n    mapping(address => bool) public _isExcludedFromFee;\\n\\n    uint256 public numTokensSellToAddToLiquidity = 333 * 10 ** _decimals;\\n    uint256 public numTokensSellToAddToETH = 333 * 10 ** _decimals;\\n    mapping(address => ShortPosition) public shortPositions;\\n    mapping(address => uint256) public addressIndex;\\n    address[] public shortHolders;\\n\\n    function postLaunch() external onlyOwner {\\n        taxForLiquidity = 3;\\n        taxForMarketing = 3;\\n        maxTxAmount = 420 * 10 ** _decimals;\\n        maxWalletAmount = 69000 * 10 ** _decimals;\\n    }\\n\\n    event ShortOpened(address _address, uint256 CollateralAmount, uint256 borrowedTokens, uint256 liqPrice);\\n    event ShortClosed(address _address, uint256 profit, uint256 ETHbuyBack);\\n    event Liquidated(address _address, uint256 CollateralAmount, uint256 liqPrice);\\n    event ExcludedFromFeeUpdated(address _address, bool _status);\\n    event PairUpdated(address _address);\\n\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    bool inSwapAndLiquify;\\n\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n    struct ShortPosition {\\n        uint256 amountBorrowed;\\n        uint256 collateralValue;\\n        uint256 openTime;\\n        uint256 tokenPrice;\\n        uint256 liquidationPrice;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() ERC20(_name, _symbol) {\\n        _mint(address(this), (_supply * 10 ** _decimals));\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //eth mainnet\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n            address(this),\\n            _uniswapV2Router.WETH()\\n        );\\n        ShibaFrensERC721 = address(this);\\n        uniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(uniswapV2Router), _supply * 10 ** _decimals);\\n\\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\\n        _isExcludedFromFee[msg.sender] = true;\\n        _isExcludedFromFee[treasuryWallet] = true;\\n    }\\n\\n    function updatePair(address _pair) external onlyOwner {\\n        require(_pair != DEAD, \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        require(_pair != address(0), \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        uniswapV2Pair = _pair;\\n        emit PairUpdated(_pair);\\n    }\\n\\n    function updateRouter(address _router) external onlyOwner {\\n        require(_router != DEAD, \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        require(_router != address(0), \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\n        emit PairUpdated(_router);\\n    }\\n\\n    function excludeFromFee(address _address, bool _status) external onlyOwner {\\n        _isExcludedFromFee[_address] = _status;\\n        emit ExcludedFromFeeUpdated(_address, _status);\\n    }\\n\\n    function updateNFT(address _address, uint256 _minAmount) external onlyOwner {\\n        ShibaFrensERC721 = _address;\\n        minNFT = _minAmount;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(balanceOf(from) >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        if (autoLiquidate) liquidateAll();\\n\\n        if ((from == uniswapV2Pair || to == uniswapV2Pair) && !inSwapAndLiquify && liqAdded) {\\n            if (from != uniswapV2Pair) {\\n                uint256 contractLiquidityBalance = balanceOf(address(this)) - _treasuryReserves;\\n                if (\\n                    contractLiquidityBalance >= numTokensSellToAddToLiquidity && amount >= numTokensSellToAddToLiquidity\\n                ) {\\n                    if (amount > minTax) _swapAndLiquify(numTokensSellToAddToLiquidity);\\n                }\\n                if ((_treasuryReserves) >= numTokensSellToAddToETH && amount >= numTokensSellToAddToETH) {\\n                    uint256 initialBalance = address(this).balance;\\n                    _swapTokensForEth(numTokensSellToAddToETH);\\n                    _treasuryReserves -= numTokensSellToAddToETH;\\n                    uint256 newBalance = (address(this).balance - initialBalance);\\n                    bool sent = payable(treasuryWallet).send(newBalance);\\n                    require(sent, \\\"Failed to send ETH\\\");\\n                }\\n            }\\n\\n            uint256 transferAmount;\\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || (from != uniswapV2Pair && to != uniswapV2Pair)) {\\n                transferAmount = amount;\\n            } else {\\n                require(amount <= maxTxAmount, \\\"ERC20: transfer amount exceeds the max transaction amount\\\");\\n                if (from == uniswapV2Pair) {\\n                    require(\\n                        (amount + balanceOf(to)) <= maxWalletAmount,\\n                        \\\"ERC20: balance amount exceeded max wallet amount limit\\\"\\n                    );\\n                }\\n\\n                uint256 marketingShare = ((amount * taxForMarketing) / 100);\\n                uint256 liquidityShare = ((amount * taxForLiquidity) / 100);\\n                transferAmount = amount - (marketingShare + liquidityShare);\\n                _treasuryReserves += marketingShare;\\n\\n                super._transfer(from, address(this), (marketingShare + liquidityShare));\\n            }\\n            super._transfer(from, to, transferAmount);\\n        } else {\\n            super._transfer(from, to, amount);\\n        }\\n    }\\n\\n    function _swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n        uint256 half = (contractTokenBalance / 2);\\n        uint256 otherHalf = (contractTokenBalance - half);\\n\\n        uint256 initialBalance = address(this).balance;\\n\\n        _swapTokensForEth(half);\\n\\n        uint256 newBalance = (address(this).balance - initialBalance);\\n\\n        _addLiquidity(otherHalf, newBalance);\\n\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n\\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _swapEthForTokens(uint256 ETHAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ETHAmount}(\\n            0,\\n            path,\\n            treasuryWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private lockTheSwap {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            treasuryWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function changemarketingWallet(address newWallet) public onlyOwner returns (bool) {\\n        require(newWallet != DEAD, \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        require(newWallet != address(0), \\\"LP Pair cannot be the Dead wallet, or 0!\\\");\\n        treasuryWallet = newWallet;\\n        return true;\\n    }\\n\\n    function gottagofast() external onlyOwner {\\n        uint256 LiqTokenAmount = _liqSupply * 10 ** _decimals;\\n        _approve(address(this), address(uniswapV2Router), _supply * 10 ** _decimals);\\n\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            LiqTokenAmount,\\n            0,\\n            0,\\n            owner(),\\n            type(uint).max\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        liqAdded = true;\\n    }\\n\\n    function changeTaxForLiquidityAndMarketing(\\n        uint256 _taxForLiquidity,\\n        uint256 _taxForMarketing,\\n        uint256 _taxForShort\\n    ) public onlyOwner returns (bool) {\\n        require((_taxForLiquidity + _taxForMarketing) <= 10, \\\"ERC20: total tax must not be greater than 10%\\\");\\n        taxForLiquidity = _taxForLiquidity;\\n        taxForMarketing = _taxForMarketing;\\n        taxForShort = _taxForShort;\\n\\n        return true;\\n    }\\n\\n    function changeSwapThresholds(\\n        uint256 _numTokensSellToAddToLiquidity,\\n        uint256 _numTokensSellToAddToETH\\n    ) public onlyOwner returns (bool) {\\n        require(_numTokensSellToAddToLiquidity < _supply / 98, \\\"Cannot liquidate more than 2% of the supply at once!\\\");\\n        require(_numTokensSellToAddToETH < _supply / 98, \\\"Cannot liquidate more than 2% of the supply at once!\\\");\\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity * 10 ** _decimals;\\n        numTokensSellToAddToETH = _numTokensSellToAddToETH * 10 ** _decimals;\\n\\n        return true;\\n    }\\n\\n    function changeMaxTxAmount(uint256 _maxTxAmount) public onlyOwner returns (bool) {\\n        require(_maxTxAmount > 69, \\\"Bad DEV,Not Allowed\\\");\\n        maxTxAmount = _maxTxAmount;\\n\\n        return true;\\n    }\\n\\n    function changeAutoLiquidate(bool _autoliq, bool _swapLiquidations) public onlyOwner returns (bool) {\\n        autoLiquidate = _autoliq;\\n        swapLiquidations = _swapLiquidations;\\n\\n        return true;\\n    }\\n\\n    function openFutures(bool _canShort) public onlyOwner returns (bool) {\\n        canShort = _canShort;\\n\\n        return true;\\n    }\\n\\n    function changeMaxWalletAmount(uint256 _maxWalletAmount) public onlyOwner returns (bool) {\\n        maxWalletAmount = _maxWalletAmount;\\n\\n        return true;\\n    }\\n\\n    function changeShortConstants(\\n        uint256 _minShort,\\n        uint256 _maxShort,\\n        uint256 _maxShorters,\\n        uint256 _maxLoanTime,\\n        uint256 _margin\\n    ) public onlyOwner returns (bool) {\\n        minShort = _minShort;\\n        maxShort = _maxShort;\\n        maxShorters = _maxShorters;\\n        maxLoanTime = _maxLoanTime;\\n        margin = _margin;\\n        return true;\\n    }\\n\\n    function TokenPrice() public view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        uint256 zeroUsd = 0;\\n\\n        path[0] = address(this);\\n\\n        path[1] = uniswapV2Router.WETH();\\n\\n        try uniswapV2Router.getAmountsOut(1 * 10 ** 18, path) returns (uint[] memory amounts) {\\n            return amounts[1];\\n        } catch {\\n            return zeroUsd;\\n        }\\n    }\\n\\n    function TokensForETH(uint256 ETHamount) public view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        uint256 zeroUsd = 0;\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n\\n        try uniswapV2Router.getAmountsOut(ETHamount, path) returns (uint[] memory amounts) {\\n            return amounts[1];\\n        } catch {\\n            return zeroUsd;\\n        }\\n    }\\n\\n    function openShort() public payable nonReentrant {\\n        uint256 tokenPrice = TokenPrice();\\n        uint256 collateralValue = msg.value;\\n        uint256 amountBorrowed = TokensForETH(collateralValue);\\n        uint256 amountSold = (amountBorrowed * margin) / 100;\\n        uint256 NftBalance = IFren(ShibaFrensERC721).balanceOf(msg.sender);\\n        require(canShort, \\\"Shorting not Opened\\\");\\n        require(NftBalance > minNFT, \\\"You dont own Shiba Frens NFTs\\\");\\n        require(amountBorrowed <= balanceOf(address(this)), \\\"No more tokens to lend\\\");\\n        require(shortHolders.length < maxShorters, \\\"No more shorting spaces\\\");\\n        require(shortPositions[msg.sender].collateralValue == 0, \\\"Address has Open Short\\\");\\n        require(msg.value >= minShort, \\\"minimum Short not met\\\");\\n        require(msg.value <= maxShort, \\\"maximum Short exceded\\\");\\n\\n        // _addLiquidity(amountBorrowed, collateralValue);\\n\\n        _swapTokensForEth(amountBorrowed);\\n        tokenPrice = TokenPrice();\\n        uint256 liquidationPrice = (tokenPrice * (100 + margin)) / 100;\\n        // Insert the new address into the shortHolders array in sorted order\\n\\n        uint256 i = shortHolders.length;\\n        shortHolders.push(msg.sender);\\n\\n        while (i > 0 && shortPositions[shortHolders[i - 1]].liquidationPrice > liquidationPrice) {\\n            shortHolders[i] = shortHolders[i - 1];\\n            addressIndex[shortHolders[i]] = i;\\n            i--;\\n        }\\n        shortHolders[i] = msg.sender;\\n        addressIndex[msg.sender] = i;\\n        shortPositions[msg.sender] = ShortPosition(\\n            amountBorrowed,\\n            collateralValue,\\n            block.timestamp,\\n            tokenPrice,\\n            liquidationPrice\\n        );\\n        emit ShortOpened(msg.sender, collateralValue, amountBorrowed, liquidationPrice);\\n    }\\n\\n    function calcProfit(address user) public view returns (uint256) {\\n        uint256 currTokenPrice = TokenPrice();\\n        uint256 opentokenPrice = shortPositions[user].tokenPrice;\\n        uint256 collateralValue = shortPositions[user].collateralValue;\\n\\n        uint256 profitRatio = (100 * opentokenPrice) / currTokenPrice;\\n        uint256 remainingCollateral = (collateralValue * profitRatio) / 100;\\n\\n        return remainingCollateral;\\n    }\\n\\n    function calcInterest(address user) public view returns (uint256) {\\n        uint256 currTimeStamp = block.timestamp;\\n        uint256 openTime = shortPositions[user].openTime;\\n        uint256 duration = currTimeStamp - openTime;\\n        uint256 interest = (100 * duration) / maxLoanTime;\\n\\n        return interest;\\n    }\\n\\n    function calcDuration(address user) public view returns (uint256) {\\n        uint256 currTimeStamp = block.timestamp;\\n        uint256 openTime = shortPositions[user].openTime;\\n        uint256 duration = currTimeStamp - openTime;\\n\\n        return duration;\\n    }\\n\\n    address public treasuryWallet = 0xc81b7F012f1bdD97211c9627cDe726cc7e1B28Ab;\\n\\n    function triggerTreasuryBuyback(uint256 amount) external onlyOwner {\\n        _swapEthForTokens(amount);\\n    }\\n\\n    function closeShort() public nonReentrant {\\n        uint256 closeTokenPrice = TokenPrice();\\n        uint256 liqPrice = shortPositions[msg.sender].liquidationPrice;\\n        require(shortPositions[msg.sender].collateralValue > 0, \\\"No Open Short\\\");\\n        require(closeTokenPrice < liqPrice, \\\"YOU BEEN LIQUIDATED\\\");\\n\\n        uint256 amountBorrowed = shortPositions[msg.sender].amountBorrowed;\\n        uint256 loanDuration = calcDuration(msg.sender);\\n        //    uint buybackmargin= (100+ slipage)/100;\\n\\n        uint256 amountETHrepay = (closeTokenPrice * amountBorrowed) / (10 ** _decimals);\\n        uint256 profit = calcProfit(msg.sender);\\n\\n        uint256 interestFee = (taxForShort * profit * loanDuration) / (100 * maxLoanTime);\\n        uint256 userFunds = profit - interestFee;\\n\\n        _swapEthForTokens(amountETHrepay);\\n\\n        if (userFunds > 0 && userFunds < address(this).balance) {\\n            bool sentuser = payable(msg.sender).send(userFunds);\\n            require(sentuser, \\\"Failed to send ETH\\\");\\n        }\\n        if (interestFee > 0 && interestFee < address(this).balance) {\\n            bool sent = payable(treasuryWallet).send(interestFee);\\n\\n            require(sent, \\\"Failed to send ETH\\\");\\n        }\\n        emit ShortClosed(msg.sender, userFunds, amountETHrepay);\\n        delete shortPositions[msg.sender];\\n\\n        //  Remove the address from the shortHolders array\\n        for (uint j = addressIndex[msg.sender]; j < shortHolders.length - 1; j++) {\\n            shortHolders[j] = shortHolders[j + 1];\\n        }\\n        shortHolders.pop();\\n        delete addressIndex[msg.sender];\\n    }\\n\\n    function liquidateAll() public {\\n        uint256 currentTokenPrice = TokenPrice();\\n        uint256 length = shortHolders.length;\\n        if (length == 0) return;\\n\\n        // Iterate over shortHolders array\\n        for (uint256 i = 0; i < length; i++) {\\n            // Get the short position for the current holder\\n            ShortPosition storage position = shortPositions[shortHolders[0]];\\n\\n            // If the current token price is above the liquidation price, liquidate the position\\n            if (currentTokenPrice > position.liquidationPrice) {\\n                uint256 amountETHrepay = (position.collateralValue * margin) / 100;\\n                // Add any necessary liquidation logic here, such as transferring the collateral\\n                if (swapLiquidations) _swapEthForTokens(amountETHrepay);\\n\\n                emit Liquidated(shortHolders[0], position.collateralValue, position.liquidationPrice);\\n                // Remove the position from the shortPositions mapping\\n                delete shortPositions[shortHolders[0]];\\n\\n                // Remove the address from the shortHolders array\\n                if (shortHolders.length > 1)\\n                    for (uint j = i; j < shortHolders.length - 1; j++) {\\n                        shortHolders[j] = shortHolders[j + 1];\\n                    }\\n                shortHolders.pop();\\n\\n                length--;\\n            } else {\\n                // As the array is sorted, we can stop the loop once we find a position that doesn't meet the criteria\\n                break;\\n            }\\n        }\\n    }\\n\\n    function liquidateUser(address user) public {\\n        uint256 currentTokenPrice = TokenPrice();\\n        uint256 index = addressIndex[user];\\n\\n        // Iterate over shortHolders array\\n\\n        // Get the short position for the current holder\\n        ShortPosition storage position = shortPositions[user];\\n\\n        // If the current token price is above the liquidation price, liquidate the position\\n        if (currentTokenPrice > position.liquidationPrice) {\\n            uint256 amountETHrepay = (position.collateralValue * margin) / 100;\\n            // Add any necessary liquidation logic here, such as transferring the collateral\\n\\n            if (swapLiquidations) _swapEthForTokens(amountETHrepay);\\n\\n            emit Liquidated(shortHolders[index], position.collateralValue, position.liquidationPrice);\\n            // Remove the position from the shortPositions mapping\\n            delete shortPositions[shortHolders[index]];\\n\\n            // Remove the address from the shortHolders array\\n            for (uint j = index; j < shortHolders.length - 1; j++) {\\n                shortHolders[j] = shortHolders[j + 1];\\n            }\\n            shortHolders.pop();\\n        }\\n    }\\n\\n    function somethingAboutTokens(address token) external onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(msg.sender, balance);\\n    }\\n\\n    function EmergencyFundRecovery() public payable onlyOwner {\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqPrice\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHbuyBack\",\"type\":\"uint256\"}],\"name\":\"ShortClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqPrice\",\"type\":\"uint256\"}],\"name\":\"ShortOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EmergencyFundRecovery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ShibaFrensERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ETHamount\",\"type\":\"uint256\"}],\"name\":\"TokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canShort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoliq\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_swapLiquidations\",\"type\":\"bool\"}],\"name\":\"changeAutoLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"changeMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minShort\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxShort\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxShorters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"}],\"name\":\"changeShortConstants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToETH\",\"type\":\"uint256\"}],\"name\":\"changeSwapThresholds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxForLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxForMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxForShort\",\"type\":\"uint256\"}],\"name\":\"changeTaxForLiquidityAndMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changemarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeShort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gottagofast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"margin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoanTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShorters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canShort\",\"type\":\"bool\"}],\"name\":\"openFutures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openShort\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shortPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"somethingAboutTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxForShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerTreasuryBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"updateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIBAFRENS", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}