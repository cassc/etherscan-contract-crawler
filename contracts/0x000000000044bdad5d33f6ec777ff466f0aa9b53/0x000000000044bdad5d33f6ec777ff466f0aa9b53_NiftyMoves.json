{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NIFTYMOVES/contracts/NiftyMoves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\n/**\\n *\\n * @title NiftyMoves.sol. Convenient and gas efficient protocol for sending multiple\\n * ERC721s from multiple contracts to multiple recipients, or the burn address.\\n *\\n * v4.0.0\\n *\\n * @author niftymoves https://niftymoves.io/\\n * @author omnus      https://omn.us/\\n *\\n */\\n\\npragma solidity 0.8.21;\\n\\nimport {IENSReverseRegistrar} from \\\"./ENS/IENSReverseRegistrar.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721, ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {INiftyMoves} from \\\"./INiftyMoves.sol\\\";\\nimport {IWETH} from \\\"./WETH/IWETH.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract NiftyMoves is INiftyMoves, IERC721Receiver, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 private constant DENOMINATOR_BASIS_POINTS = 10000;\\n  uint256 private constant BONUS_RATE_IN_BASIS_POINTS = 5000;\\n\\n  // ETH fee for transfers, if any:\\n  uint88 public transferFee;\\n\\n  // Boolean to control service availability:\\n  bool public enabled = true;\\n\\n  // WETH:\\n  IWETH public wethContract;\\n\\n  // Treasury to receive any ETH fees, if any:\\n  address public treasury;\\n\\n  // Address of the ENS reverse registrar to allow assignment of an ENS\\n  // name to this contract:\\n  IENSReverseRegistrar public ensReverseRegistrar;\\n\\n  // The merkleroot for referralls / discounts\\n  bytes32 public discountRoot;\\n\\n  // Version codename:\\n  string public version = \\\"Dugong\\\";\\n\\n  /**\\n   *\\n   * @dev constructor\\n   *\\n   */\\n  constructor() {\\n    // Initialise the treasury and owner to the deployer:\\n    treasury = tx.origin;\\n    _transferOwnership(tx.origin);\\n  }\\n\\n  /**\\n   * @dev whenEnabled: Modifier to make a function callable only when the contract is enabled.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be enabled.\\n   */\\n  modifier whenEnabled() {\\n    require(enabled, \\\"niftymoves: not currently enabled\\\");\\n    _;\\n  }\\n\\n  /**\\n   *\\n   * @dev enableService: enable niftymoves (onlyOwner)\\n   *\\n   */\\n  function enableService() external onlyOwner {\\n    enabled = true;\\n  }\\n\\n  /**\\n   *\\n   * @dev disableService: disable niftymoves (onlyOwner)\\n   *\\n   */\\n  function disableService() external onlyOwner {\\n    enabled = false;\\n  }\\n\\n  /**\\n   *\\n   * @dev setENSReverseRegistrar: set the ENS register address (onlyOwner)\\n   *\\n   * @param ensRegistrar_: ENS Reverse Registrar address\\n   *\\n   */\\n  function setENSReverseRegistrar(address ensRegistrar_) external onlyOwner {\\n    ensReverseRegistrar = IENSReverseRegistrar(ensRegistrar_);\\n    emit ENSReverseRegistrarUpdated(ensRegistrar_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setENSName: used to set reverse record so interactions with this contract\\n   * are easy to identify (onlyOwner)\\n   *\\n   * @param ensName_: string ENS name\\n   *\\n   */\\n  function setENSName(string memory ensName_) external onlyOwner {\\n    bytes32 reverseRecordHash = ensReverseRegistrar.setName(ensName_);\\n    emit ENSNameSet(ensName_, reverseRecordHash);\\n  }\\n\\n  /**\\n   *\\n   * @dev setTransferFee: set a fee per transfer (onlyOwner)\\n   *\\n   * @param transferFee_: the new fee\\n   *\\n   */\\n  function setTransferFee(uint88 transferFee_) external onlyOwner {\\n    transferFee = transferFee_;\\n    emit TransferFeeUpdated(transferFee_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setWETH: set the WETH address for this chain (onlyOwner)\\n   *\\n   * @param wethAddress_: the new WETH address\\n   *\\n   */\\n  function setWETH(address wethAddress_) external onlyOwner {\\n    wethContract = IWETH(wethAddress_);\\n    emit WETHAddressUpdated(wethAddress_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setDiscountRoot: set the discount merkle root (onlyOwner)\\n   *\\n   * @param discountRoot_: the new root\\n   *\\n   */\\n  function setDiscountRoot(bytes32 discountRoot_) external onlyOwner {\\n    discountRoot = discountRoot_;\\n    emit DiscountRootUpdated(discountRoot_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setTreasury: set a new treasury address (onlyOwner)\\n   *\\n   * @param treasury_: the new treasury address\\n   *\\n   */\\n  function setTreasury(address treasury_) external onlyOwner {\\n    require(treasury_ != address(0), \\\"niftymoves: cannot set to zero address\\\");\\n    treasury = treasury_;\\n    emit TreasuryUpdated(treasury_);\\n  }\\n\\n  /**\\n   *\\n   * @dev withdrawETH: withdraw to the treasury address (onlyOwner)\\n   *\\n   * @param amount_: amount to withdraw\\n   *\\n   */\\n  function withdrawETH(uint256 amount_) external onlyOwner {\\n    (bool success, ) = treasury.call{value: amount_}(\\\"\\\");\\n    require(success, \\\"niftymoves: fransfer failed\\\");\\n  }\\n\\n  /**\\n   *\\n   * @dev withdrawERC721: Retrieve ERC721s, likely only the ENS associated\\n   * with this contract (onlyOwner)\\n   *\\n   * @param erc721Address_: The token contract for the withdrawal\\n   * @param tokenIDs_: the list of tokenIDs for the withdrawal\\n   *\\n   */\\n  function withdrawERC721(\\n    address erc721Address_,\\n    uint256[] memory tokenIDs_\\n  ) external onlyOwner {\\n    for (uint256 i = 0; i < tokenIDs_.length; ) {\\n      IERC721(erc721Address_).transferFrom(\\n        address(this),\\n        owner(),\\n        tokenIDs_[i]\\n      );\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      **WITHOUT**\\n   *    Trusted provider bonus    **WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_\\n  ) external payable whenEnabled {\\n    require(\\n      msg.value == transferFee * transferCount_,\\n      \\\"niftymoves: incorrect payment\\\"\\n    );\\n\\n    // Perform transfers:\\n    uint256 transferCount = _performMoves(\\n      _msgSender(),\\n      transfers_,\\n      standardTransferGas_\\n    );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    **WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_\\n  ) external payable whenEnabled {\\n    // Perform fee processing:\\n    _processFees(\\n      msg.value,\\n      transferCount_,\\n      discountDetails_,\\n      gasLimit_,\\n      proof_\\n    );\\n\\n    // Perform transfers:\\n    uint256 transferCount = _performMoves(\\n      _msgSender(),\\n      transfers_,\\n      standardTransferGas_\\n    );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITH  **\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   * @param trustedProviderCollectionCount_: Number of trusted provider collections\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_,\\n    uint256 trustedProviderCollectionCount_\\n  ) external payable whenEnabled {\\n    // Perform fee processing:\\n    uint256 referrerPayment = _processFees(\\n      msg.value,\\n      transferCount_,\\n      discountDetails_,\\n      gasLimit_,\\n      proof_\\n    );\\n\\n    // Perform transfers:\\n    (\\n      uint256 transferCount,\\n      TrustedProviderBonuses[] memory bonuses\\n    ) = _performMovesAsTrustedProvider(\\n        _msgSender(),\\n        transfers_,\\n        standardTransferGas_,\\n        trustedProviderCollectionCount_\\n      );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n\\n    // Handle trusted provider bonuses, if any:\\n    if (bonuses.length > 0) {\\n      _remitBonuses(\\n        bonuses,\\n        (((msg.value - referrerPayment) / transferCount_) *\\n          BONUS_RATE_IN_BASIS_POINTS) / DENOMINATOR_BASIS_POINTS,\\n        gasLimit_\\n      );\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITHOUT**\\n   *    Trusted provider bonus    ** WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_\\n  ) external payable whenEnabled {\\n    require(\\n      msg.value == transferFee * transferCount_,\\n      \\\"niftymoves: incorrect payment\\\"\\n    );\\n\\n    // Perform burns:\\n    uint256 transferCount = _performBurns(\\n      _msgSender(),\\n      transfers_,\\n      standardTransferGas_\\n    );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_\\n  ) external payable whenEnabled {\\n    // Perform fee processing:\\n    _processFees(\\n      msg.value,\\n      transferCount_,\\n      discountDetails_,\\n      gasLimit_,\\n      proof_\\n    );\\n\\n    // Perform burns:\\n    uint256 transferCount = _performBurns(\\n      _msgSender(),\\n      transfers_,\\n      standardTransferGas_\\n    );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITH  **\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   * @param trustedProviderCollectionCount_: Number of trusted provider collections\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_,\\n    uint256 trustedProviderCollectionCount_\\n  ) external payable whenEnabled {\\n    // Perform fee processing:\\n    uint256 referrerPayment = _processFees(\\n      msg.value,\\n      transferCount_,\\n      discountDetails_,\\n      gasLimit_,\\n      proof_\\n    );\\n\\n    // Perform burns:\\n    (\\n      uint256 transferCount,\\n      TrustedProviderBonuses[] memory bonuses\\n    ) = _performBurnsAsTrustedProvider(\\n        _msgSender(),\\n        transfers_,\\n        standardTransferGas_,\\n        trustedProviderCollectionCount_\\n      );\\n\\n    // Validate transfer count received:\\n    require(\\n      (transferCount_ == transferCount),\\n      \\\"niftymoves: transfer count mismatch\\\"\\n    );\\n\\n    // Handle trusted provider bonuses, if any:\\n    if (bonuses.length > 0) {\\n      _remitBonuses(\\n        bonuses,\\n        (((msg.value - referrerPayment) / transferCount_) *\\n          BONUS_RATE_IN_BASIS_POINTS) / DENOMINATOR_BASIS_POINTS,\\n        gasLimit_\\n      );\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev _remitBonuses: send bonus payments to collections that have added\\n   * niftymoves as a trusted provider.\\n   *\\n   */\\n  function _remitBonuses(\\n    TrustedProviderBonuses[] memory bonuses_,\\n    uint256 bonusFeePerTokenTransfered_,\\n    uint256 gasLimit_\\n  ) internal returns (bool) {\\n    uint256 payment;\\n    bool success;\\n    for (uint256 i = 0; i < bonuses_.length; ) {\\n      payment = bonusFeePerTokenTransfered_ * bonuses_[i].transferCount;\\n\\n      if (payment > 0) {\\n        // If gas limit is zero or greater than gas left, use the remaining gas.\\n        uint256 gas = (gasLimit_ == 0 || gasLimit_ > gasleft())\\n          ? gasleft()\\n          : gasLimit_;\\n\\n        (success, ) = bonuses_[i].collection.call{value: payment, gas: gas}(\\\"\\\");\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return (success);\\n  }\\n\\n  /**\\n   *\\n   * @dev _isTrustedProvider: form a random address for checking trusted provider implementation\\n   *\\n   * @return isTrustedProvider_ : this is / isn't a trusted provider\\n   *\\n   */\\n  function _isTrustedProvider(\\n    address contract_\\n  ) internal view returns (bool isTrustedProvider_) {\\n    return (\\n      IERC721(contract_).isApprovedForAll(\\n        address(uint160(uint256(keccak256(abi.encodePacked(block.timestamp))))),\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev _performMoves: move items on-chain.\\n   *\\n   * @param sender_: the calling address for this transaction\\n   * @param transfers_: the struct object containing the transfers\\n   *\\n   * @return transferCount_ : a count of the number of transfer transactions\\n   *\\n   */\\n  function _performMoves(\\n    address sender_,\\n    Transfer[] calldata transfers_,\\n    uint256\\n  ) internal returns (uint256 transferCount_) {\\n    // Iterate through the list of transfer objects. There is one transfer\\n    // object per 'to' address:\\n    for (uint256 transfer = 0; transfer < transfers_.length; ) {\\n      // Check that the addresses and tokenId lists for this transfer match length:\\n      require(\\n        transfers_[transfer].contractAddresses.length ==\\n          transfers_[transfer].tokenIDs.length,\\n        \\\"niftymoves: length mismatch, contracts and tokens lists\\\"\\n      );\\n\\n      // Iterate through the list of collections for this \\\"to\\\" address:\\n      for (\\n        uint256 collection = 0;\\n        collection < transfers_[transfer].contractAddresses.length;\\n\\n      ) {\\n        uint256 item;\\n        for (\\n          item = 0;\\n          item < transfers_[transfer].tokenIDs[collection].length;\\n\\n        ) {\\n          _efficient721Transfer(\\n            sender_,\\n            transfers_[transfer].toAddress,\\n            transfers_[transfer].contractAddresses[collection],\\n            transfers_[transfer].tokenIDs[collection][item]\\n          );\\n          unchecked {\\n            item++;\\n          }\\n        }\\n        unchecked {\\n          transferCount_ += item;\\n          collection++;\\n        }\\n      }\\n      unchecked {\\n        transfer++;\\n      }\\n    }\\n\\n    return (transferCount_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _performMovesAsTrustedProvider: move items on-chain.\\n   *\\n   * @param sender_: the calling address for this transaction\\n   * @param transfers_: the struct object containing the transfers\\n   * @param trustedProviderCollectionCount_: A count of collections in this\\n   * niftymove IF the UI has identified that one or more collections has\\n   * niftymoves as a trusted provider, and therefore qualifies for the bonus.\\n   *\\n   * @return transferCount_ : a count of the number of transfer transactions\\n   * @return bonuses_ : an array of bonus data structs\\n   *\\n   */\\n  function _performMovesAsTrustedProvider(\\n    address sender_,\\n    Transfer[] calldata transfers_,\\n    uint256,\\n    uint256 trustedProviderCollectionCount_\\n  )\\n    internal\\n    returns (uint256 transferCount_, TrustedProviderBonuses[] memory bonuses_)\\n  {\\n    bonuses_ = new TrustedProviderBonuses[](trustedProviderCollectionCount_);\\n    uint256 bonusCount;\\n\\n    // Iterate through the list of transfer objects. There is one transfer\\n    // object per 'to' address:\\n    for (uint256 transfer = 0; transfer < transfers_.length; ) {\\n      // Check that the addresses and tokenId lists for this transfer match length:\\n      require(\\n        transfers_[transfer].contractAddresses.length ==\\n          transfers_[transfer].tokenIDs.length,\\n        \\\"niftymoves: length mismatch, contracts and tokens lists\\\"\\n      );\\n\\n      // Iterate through the list of collections for this \\\"to\\\" address:\\n      for (\\n        uint256 collection = 0;\\n        collection < transfers_[transfer].contractAddresses.length;\\n\\n      ) {\\n        uint256 item;\\n        for (\\n          item = 0;\\n          item < transfers_[transfer].tokenIDs[collection].length;\\n\\n        ) {\\n          _efficient721Transfer(\\n            sender_,\\n            transfers_[transfer].toAddress,\\n            transfers_[transfer].contractAddresses[collection],\\n            transfers_[transfer].tokenIDs[collection][item]\\n          );\\n          unchecked {\\n            item++;\\n          }\\n        }\\n        unchecked {\\n          // See if we have a collection wide discount through niftymoves\\n          // being included as a trusted service provider:\\n          if (\\n            trustedProviderCollectionCount_ != 0 &&\\n            _isTrustedProvider(\\n              transfers_[transfer].contractAddresses[collection]\\n            )\\n          ) {\\n            // Collection has loaded niftymoves as a trusted provider.\u00a0Record bonuses for distribution:\\n            bonuses_[bonusCount] = TrustedProviderBonuses(\\n              transfers_[transfer].contractAddresses[collection],\\n              item\\n            );\\n            bonusCount++;\\n          }\\n          transferCount_ += item;\\n          collection++;\\n        }\\n      }\\n      unchecked {\\n        transfer++;\\n      }\\n    }\\n\\n    if (bonusCount != 0) {\\n      // Trim the list if is has more entries than we needed:\\n      if (trustedProviderCollectionCount_ > bonusCount) {\\n        assembly {\\n          let decrease := sub(trustedProviderCollectionCount_, bonusCount)\\n          mstore(bonuses_, sub(mload(bonuses_), decrease))\\n        }\\n      }\\n    }\\n\\n    return (transferCount_, bonuses_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _efficient721Transfer: transfer items\\n   *\\n   * @param from_: the calling address for this transaction\\n   * @param to_: the address to which items are being transferred\\n   * @param contract_: the contract for the items being transferred\\n   * @param tokenId_: the tokenId being transferred\\n   *\\n   */\\n  function _efficient721Transfer(\\n    address from_,\\n    address to_,\\n    address contract_,\\n    uint256 tokenId_\\n  ) internal {\\n    bool success;\\n\\n    assembly {\\n      let transferFromData := add(0x20, mload(0x40))\\n      // 0x23b872dd is the selector of {transferFrom}.\\n      mstore(\\n        transferFromData,\\n        0x23b872dd00000000000000000000000000000000000000000000000000000000\\n      )\\n\\n      mstore(add(transferFromData, 0x04), from_)\\n      mstore(add(transferFromData, 0x24), to_)\\n      mstore(add(transferFromData, 0x44), tokenId_)\\n\\n      success := call(gas(), contract_, 0, transferFromData, 0x64, 0, 0)\\n\\n      // This has failed. Failures are not bubbled up the call stack (for example in the case of\\n      // the caller not being the owner of the token). We could pass back a custom error saying\\n      // the transfer has failed as follows. We won't (see below), but code provided here in\\n      // comments for anyone wishing to see the approach.\\n      // 0x90b8ec18 is the selector of {TransferFailed}.\\n      // if iszero(success) {\\n      //   mstore(\\n      //     0x00,\\n      //     0x1c43b97600000000000000000000000000000000000000000000000000000000\\n      //   )\\n      //   // Store the tokenContract address at the beginning of the error data\\n      //   mstore(0x04, contract_)\\n      //   // Store the tokenId immediately after the tokenContract address\\n      //   mstore(0x24, tokenId_)\\n      //   revert(0x00, 0x44)\\n      // }\\n    }\\n    if (!success) {\\n      // Contract call to return reason up call stack. This will cost a bit more gas\\n      // than handling the error in assembly and returning an error (e.g. TransferFailed)\\n      // directly from this contract. But that would remove all detail from the returned error\\n      // message, making it far harder for the end user to understand the reason for the\\n      // failure. Note in all cases the app should apply pre-call validation to avoid such\\n      // errors costing *any* gas.\\n      IERC721(contract_).transferFrom(from_, to_, tokenId_);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev _performBurns: burn items on-chain.\\n   *\\n   * @param sender_: the calling address for this transaction\\n   * @param transfers_: the struct object containing the transfers\\n   *\\n   * @return transferCount_ : a count of the number of transfer transactions\\n   *\\n   */\\n  function _performBurns(\\n    address sender_,\\n    Transfer[] calldata transfers_,\\n    uint256\\n  ) internal returns (uint256 transferCount_) {\\n    require(\\n      transfers_.length == 1,\\n      \\\"niftymoves: can only burn in a single transfer\\\"\\n    );\\n\\n    require(\\n      (transfers_[0].contractAddresses.length == transfers_[0].tokenIDs.length),\\n      \\\"niftymoves: length mismatch, contracts and tokens lists\\\"\\n    );\\n\\n    for (\\n      uint256 collection = 0;\\n      collection < transfers_[0].contractAddresses.length;\\n\\n    ) {\\n      uint256 item;\\n\\n      // Collection is burnable. We burn by calling burn:\\n      for (item = 0; item < transfers_[0].tokenIDs[collection].length; ) {\\n        _efficient721Burn(\\n          sender_,\\n          transfers_[0].toAddress,\\n          transfers_[0].contractAddresses[collection],\\n          transfers_[0].tokenIDs[collection][item]\\n        );\\n        unchecked {\\n          item++;\\n        }\\n      }\\n\\n      unchecked {\\n        transferCount_ += item;\\n        collection++;\\n      }\\n    }\\n\\n    return (transferCount_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _performBurnsAsTrustedProvider: burn items on-chain.\\n   *\\n   * @param sender_: the calling address for this transaction\\n   * @param transfers_: the struct object containing the transfers\\n   * @param trustedProviderCollectionCount_: A count of collections in this\\n   * niftymove IF the UI has identified that one or more collections has\\n   * niftymoves as a trusted provider, and therefore qualifies for the bonus.\\n   *\\n   * @return transferCount_ : a count of the number of transfer transactions\\n   * @return bonuses_ : an array of bonus data structs\\n   *\\n   */\\n  function _performBurnsAsTrustedProvider(\\n    address sender_,\\n    Transfer[] calldata transfers_,\\n    uint256,\\n    uint256 trustedProviderCollectionCount_\\n  )\\n    internal\\n    returns (uint256 transferCount_, TrustedProviderBonuses[] memory bonuses_)\\n  {\\n    require(\\n      transfers_.length == 1,\\n      \\\"niftymoves: can only burn in a single transfer\\\"\\n    );\\n\\n    require(\\n      (transfers_[0].contractAddresses.length == transfers_[0].tokenIDs.length),\\n      \\\"niftymoves: length mismatch, contracts and tokens lists\\\"\\n    );\\n\\n    bonuses_ = new TrustedProviderBonuses[](trustedProviderCollectionCount_);\\n    uint256 bonusCount;\\n\\n    for (\\n      uint256 collection = 0;\\n      collection < transfers_[0].contractAddresses.length;\\n\\n    ) {\\n      uint256 item;\\n\\n      // Collection is burnable. We burn by calling burn:\\n      for (item = 0; item < transfers_[0].tokenIDs[collection].length; ) {\\n        _efficient721Burn(\\n          sender_,\\n          transfers_[0].toAddress,\\n          transfers_[0].contractAddresses[collection],\\n          transfers_[0].tokenIDs[collection][item]\\n        );\\n        unchecked {\\n          item++;\\n        }\\n      }\\n\\n      unchecked {\\n        // See if we have a collection wide discount through niftymoves\\n        // being included as a trusted service provider:\\n        if (\\n          trustedProviderCollectionCount_ != 0 &&\\n          _isTrustedProvider(transfers_[0].contractAddresses[collection])\\n        ) {\\n          // Collection has loaded niftymoves as a trusted provider.\u00a0Record bonuses for distribution:\\n          bonuses_[bonusCount] = TrustedProviderBonuses(\\n            transfers_[0].contractAddresses[collection],\\n            item\\n          );\\n          bonusCount++;\\n        }\\n        transferCount_ += item;\\n        collection++;\\n      }\\n    }\\n\\n    if (bonusCount != 0) {\\n      // Trim the list if is has more entries than we needed:\\n      if (trustedProviderCollectionCount_ > bonusCount) {\\n        assembly {\\n          let decrease := sub(trustedProviderCollectionCount_, bonusCount)\\n          mstore(bonuses_, sub(mload(bonuses_), decrease))\\n        }\\n      }\\n    }\\n\\n    return (transferCount_, bonuses_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _efficient721Burn: burn items to the zero address\\n   *\\n   * @param from_: the calling address for this transaction\\n   * @param to_: the address to which items are being transferred\\n   * @param contract_: the contract for the items being transferred\\n   * @param tokenId_: the tokenId being transferred\\n   *\\n   */\\n  function _efficient721Burn(\\n    address from_,\\n    address to_,\\n    address contract_,\\n    uint256 tokenId_\\n  ) internal {\\n    // Check burning to address(0):\\n    require(to_ == address(0), \\\"niftymoves: can only burn to zero address\\\");\\n\\n    // Check ownership:\\n    require(\\n      IERC721(contract_).ownerOf(tokenId_) == from_,\\n      \\\"niftymoves: burn call from non owner\\\"\\n    );\\n\\n    // Perform burn:\\n    bool success;\\n    assembly {\\n      let burnData := add(0x20, mload(0x40))\\n      mstore(\\n        burnData,\\n        0x42966c6800000000000000000000000000000000000000000000000000000000\\n      )\\n      mstore(add(burnData, 0x04), tokenId_)\\n      success := call(gas(), contract_, 0, burnData, 0x24, 0, 0)\\n      // This has failed. Failures are not bubbled up the call stack (for example in the case of\\n      // the caller not being the owner of the token). We could pass back a custom error saying\\n      // the burn has failed as follows. We won't (see below), but code provided here in\\n      // comments for anyone wishing to see the approach.\\n      // 0x016f84a1 is the selector of {BurnFailed}.\\n      // if iszero(success) {\\n      //   mstore(\\n      //     0x00,\\n      //     0x016f84a100000000000000000000000000000000000000000000000000000000\\n      //   )\\n      //   // Store the tokenContract address at the beginning of the error data\\n      //   mstore(0x04, contract_)\\n      //   // Store the tokenId immediately after the tokenContract address\\n      //   mstore(0x24, tokenId_)\\n      //   revert(0x00, 0x44)\\n      // }\\n    }\\n\\n    if (!success) {\\n      // Contract call to return reason up call stack. This will cost a bit more gas\\n      // than handling the error in assembly and returning an error (e.g. BurnFailed)\\n      // directly from this contract. But that would remove all detail from the returned error\\n      // message, making it far harder for the end user to understand the reason for the\\n      // failure. Note in all cases the app should apply pre-call validation to avoid such\\n      // errors costing *any* gas.\\n      ERC721Burnable(contract_).burn(tokenId_);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev _processFees: process fees (if any)\\n   *\\n   * @param value_: the ETH sent with this call\\n   * @param transferCount_: the number of transfers made\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param gasLimit_: The gas limit, if any, on referrer payments\\n   * @param proof_: proof for discount checks\\n   *\\n   */\\n  function _processFees(\\n    uint256 value_,\\n    uint256 transferCount_,\\n    DiscountParameters calldata discountDetails_,\\n    uint256 gasLimit_,\\n    bytes32[] calldata proof_\\n  ) internal returns (uint256 referrerPayment_) {\\n    // Calculate the base fee required:\\n    uint256 baseFee = transferFee * transferCount_;\\n    uint256 feeToPay;\\n\\n    // See if we have a referral ID or a discount to apply based on holding.\\n    // In both cases the contractOrPayee will be non-zero:\\n    if (discountDetails_.contractOrPayee == address(0)) {\\n      // If we are here there is no discount to be applied.\\n      feeToPay = baseFee;\\n      referrerPayment_ = 0;\\n    } else {\\n      (feeToPay, referrerPayment_) = _processDiscountOrReferral(\\n        baseFee,\\n        discountDetails_,\\n        gasLimit_,\\n        proof_\\n      );\\n    }\\n    require(value_ == feeToPay, \\\"niftymoves: incorrect payment\\\");\\n\\n    return (referrerPayment_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _processDiscountOrReferral: process details for either a referral or a discount\\n   *\\n   * @param baseFee_: the ETH required for this call before discounts\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param gasLimit_: The gas limit, if any, on referrer payments\\n   * @param proof_: The merkle proof\\n   *\\n   * @return feePaid_ : the total fee to pay\\n   * @return referrerPayment_ : any referrer payment for the transaction\\n   *\\n   */\\n  function _processDiscountOrReferral(\\n    uint256 baseFee_,\\n    DiscountParameters calldata discountDetails_,\\n    uint256 gasLimit_,\\n    bytes32[] calldata proof_\\n  ) internal returns (uint256 feePaid_, uint256 referrerPayment_) {\\n    // Validate the provided details against the root:\\n    require(\\n      rootIsValid(proof_, discountDetails_),\\n      \\\"niftymoves: invalid discount details for root\\\"\\n    );\\n\\n    // Check for a referral ID:\\n    if (discountDetails_.referralID != bytes12(0)) {\\n      // We have a referralID. Perform referral processing:\\n      (feePaid_, referrerPayment_) = _processReferral(\\n        baseFee_,\\n        discountDetails_,\\n        gasLimit_\\n      );\\n    } else {\\n      // If we reach here we must be processing a discount based on holding:\\n      (feePaid_) = _processDiscount(baseFee_, discountDetails_);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev rootIsValid: check the passed details against the root\\n   *\\n   * @param proof_: the proof used to check passed details\\n   * @param discountDetails_: struct object for the claimed discount\\n   *\\n   * @return valid_ :  if this set of data is valid (or not)\\n   *\\n   */\\n  function rootIsValid(\\n    bytes32[] calldata proof_,\\n    DiscountParameters calldata discountDetails_\\n  ) public view returns (bool valid_) {\\n    bytes32 leaf = keccak256(\\n      abi.encodePacked(\\n        discountDetails_.contractOrPayee,\\n        discountDetails_.referralID,\\n        discountDetails_.tokenID1155,\\n        discountDetails_.minimumBalance,\\n        discountDetails_.discountBasisPoints,\\n        discountDetails_.referrerBasisPoints\\n      )\\n    );\\n\\n    return (MerkleProof.verify(proof_, discountRoot, leaf));\\n  }\\n\\n  /**\\n   *\\n   * @dev _processReferral: process fees associated with a referral\\n   *\\n   * @param baseFee_: the ETH required for this call before discounts\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param gasLimit_: The gas limit, if any, on referrer payments\\n   *\\n   * @return feePaid_ : the total fee to pay\\n   * @return referrerPayment_ : any referrer payment for the transaction\\n   *\\n   */\\n  function _processReferral(\\n    uint256 baseFee_,\\n    DiscountParameters calldata discountDetails_,\\n    uint256 gasLimit_\\n  ) internal returns (uint256 feePaid_, uint256 referrerPayment_) {\\n    // Calculate the discount:\\n    (feePaid_) = _calculateDiscount(\\n      baseFee_,\\n      discountDetails_.discountBasisPoints\\n    );\\n\\n    // Calculate the referral payment as a percentage of the discounted payment:\\n    referrerPayment_ = ((feePaid_ * discountDetails_.referrerBasisPoints) /\\n      DENOMINATOR_BASIS_POINTS);\\n\\n    if (referrerPayment_ > 0) {\\n      // If gas limit is zero or greater than gas left, use the remaining gas.\\n      uint256 gas = (gasLimit_ == 0 || gasLimit_ > gasleft())\\n        ? gasleft()\\n        : gasLimit_;\\n\\n      (bool success, ) = discountDetails_.contractOrPayee.call{\\n        value: referrerPayment_,\\n        gas: gas\\n      }(\\\"\\\");\\n      // If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n      if (!success) {\\n        wethContract.deposit{value: referrerPayment_}();\\n        IERC20(address(wethContract)).safeTransfer(\\n          discountDetails_.contractOrPayee,\\n          referrerPayment_\\n        );\\n      }\\n    }\\n\\n    return (feePaid_, referrerPayment_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _processDiscount: process fees associated with a holding discount\\n   *\\n   * @param baseFee_: the ETH required for this call before discounts\\n   * @param discountDetails_: details of the discount being claimed\\n   *\\n   * @return feePaid_ : the total fee to pay\\n   *\\n   */\\n  function _processDiscount(\\n    uint256 baseFee_,\\n    DiscountParameters calldata discountDetails_\\n  ) internal view returns (uint256 feePaid_) {\\n    // Check they hold the required balance:\\n    require(\\n      _hasSufficientBalance(\\n        discountDetails_.contractOrPayee,\\n        discountDetails_.tokenID1155,\\n        discountDetails_.minimumBalance\\n      ),\\n      \\\"niftymoves: insufficient holding for discount\\\"\\n    );\\n\\n    // Calculate the discount:\\n    feePaid_ = _calculateDiscount(\\n      baseFee_,\\n      discountDetails_.discountBasisPoints\\n    );\\n\\n    return (feePaid_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _calculateDiscount: calculate the discount and therefore fee required\\n   *\\n   * @param baseFee_: the ETH required for this call before discounts\\n   * @param discountBasisPoints_: basis points of the discount\\n   *\\n   * @return feePaid_ : the total fee to pay\\n   *\\n   */\\n  function _calculateDiscount(\\n    uint256 baseFee_,\\n    uint256 discountBasisPoints_\\n  ) internal pure returns (uint256 feePaid_) {\\n    // Calculate the fee required given the discount:\\n    feePaid_ = (baseFee_ -\\n      ((baseFee_ * discountBasisPoints_) / DENOMINATOR_BASIS_POINTS));\\n\\n    return (feePaid_);\\n  }\\n\\n  /**\\n   *\\n   * @dev _hasSufficientBalance: check the caller holds a sufficient balance for the discount\\n   *\\n   * @param contractAddress_: the contract on which to check the holder's balance\\n   * @param tokenID1155_: this is populated if we need to check an 1155 balance\\n   * @param minimumBalance_: the minimum balance requirement for this discount\\n   *\\n   * @return hasBalance_ : if the holder has sufficient balance (or not)\\n   *\\n   */\\n  function _hasSufficientBalance(\\n    address contractAddress_,\\n    uint256 tokenID1155_,\\n    uint256 minimumBalance_\\n  ) internal view returns (bool hasBalance_) {\\n    if (tokenID1155_ != 0) {\\n      // Perform 1155 balance check\\n      return _balanceCheck1155(contractAddress_, tokenID1155_, minimumBalance_);\\n    } else {\\n      // Perform ERC721 / 20 / 777 check\\n      return (IERC721(contractAddress_).balanceOf(_msgSender()) >=\\n        minimumBalance_);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev _balanceCheck1155: check the caller holds a sufficient balance for the discount\\n   *\\n   * @param contractAddress_: the contract on which to check the holder's balance\\n   * @param tokenID1155_: this is populated if we need to check an 1155 balance\\n   * @param minimumBalance_: the minimum balance requirement for this discount\\n   *\\n   * @return hasBalance_ : if the holder has sufficient balance (or not)\\n   *\\n   */\\n  function _balanceCheck1155(\\n    address contractAddress_,\\n    uint256 tokenID1155_,\\n    uint256 minimumBalance_\\n  ) internal view returns (bool hasBalance_) {\\n    // Perform 1155 check:\\n    uint256 tokenIDToCheck;\\n    if (tokenID1155_ == type(uint256).max) {\\n      tokenIDToCheck = 0;\\n    } else {\\n      tokenIDToCheck = tokenID1155_;\\n    }\\n    return (IERC1155(contractAddress_).balanceOf(\\n      _msgSender(),\\n      tokenIDToCheck\\n    ) >= minimumBalance_);\\n  }\\n\\n  /**\\n   *\\n   * @dev onERC721Received: allow transfer from owner (for the ENS token).\\n   *\\n   * @param from_: used to check this is only from the contract owner\\n   *\\n   */\\n  function onERC721Received(\\n    address,\\n    address from_,\\n    uint256,\\n    bytes memory\\n  ) external view override returns (bytes4) {\\n    if (from_ == owner()) {\\n      return this.onERC721Received.selector;\\n    } else {\\n      return (\\\"\\\");\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev Revert unexpected ETH\\n   *\\n   */\\n  receive() external payable {\\n    require(\\n      _msgSender() == owner(),\\n      \\\"niftymoves: only owner can fund contract\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev Revert unexpected function calls\\n   *\\n   */\\n  fallback() external payable {\\n    revert();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NIFTYMOVES/contracts/WETH/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NIFTYMOVES/contracts/INiftyMoves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n *\\n * @title NiftyMoves.sol. Convenient and gas efficient protocol for sending multiple\\n * ERC721s from multiple contracts to multiple recipients, or the burn address.\\n *\\n * v4.0.0\\n *\\n * @author niftymoves https://niftymoves.io/\\n * @author omnus      https://omn.us/\\n *\\n */\\n\\npragma solidity 0.8.21;\\n\\ninterface INiftyMoves {\\n  // Struct object that represents a single transfer request.\\n  // This has one 'to' address with 1 to n collections and 1 to n\\n  // tokens / quantities within each collection:\\n  struct Transfer {\\n    address toAddress;\\n    address[] contractAddresses;\\n    uint256[][] tokenIDs;\\n  }\\n\\n  // Struct for discount parameters:\\n  struct DiscountParameters {\\n    address contractOrPayee;\\n    bytes12 referralID;\\n    uint256 tokenID1155;\\n    uint256 minimumBalance;\\n    uint256 discountBasisPoints;\\n    uint256 referrerBasisPoints;\\n  }\\n\\n  // Struct for trusted provider bonuses\\n  struct TrustedProviderBonuses {\\n    address collection;\\n    uint256 transferCount;\\n  }\\n\\n  event TransferFeeUpdated(uint256 newEthFee);\\n  event TreasuryUpdated(address newTreasury);\\n  event WETHAddressUpdated(address newWETH);\\n  event DiscountRootUpdated(bytes32 newDiscountRoot);\\n  event ENSReverseRegistrarUpdated(address newENSReverseRegistrar);\\n  event ENSNameSet(string name, bytes32 reverseRecordHash);\\n\\n  /**\\n   *\\n   * @dev enableService: enable niftymoves (onlyOwner)\\n   *\\n   */\\n  function enableService() external;\\n\\n  /**\\n   *\\n   * @dev disableService: disable niftymoves (onlyOwner)\\n   *\\n   */\\n  function disableService() external;\\n\\n  /**\\n   *\\n   * @dev setENSReverseRegistrar: set the ENS register address (onlyOwner)\\n   *\\n   * @param ensRegistrar_: ENS Reverse Registrar address\\n   *\\n   */\\n  function setENSReverseRegistrar(address ensRegistrar_) external;\\n\\n  /**\\n   *\\n   * @dev setENSName: used to set reverse record so interactions with this contract\\n   * are easy to identify (onlyOwner)\\n   *\\n   * @param ensName_: string ENS name\\n   *\\n   */\\n  function setENSName(string memory ensName_) external;\\n\\n  /**\\n   *\\n   * @dev setTransferFee: set a fee per transfer (onlyOwner)\\n   *\\n   * @param transferFee_: the new fee\\n   *\\n   */\\n  function setTransferFee(uint88 transferFee_) external;\\n\\n  /**\\n   *\\n   * @dev setWETH: set the WETH address for this chain (onlyOwner)\\n   *\\n   * @param wethAddress_: the new WETH address\\n   *\\n   */\\n  function setWETH(address wethAddress_) external;\\n\\n  /**\\n   *\\n   * @dev setDiscountRoot: set the discount merkle root (onlyOwner)\\n   *\\n   * @param discountRoot_: the new root\\n   *\\n   */\\n  function setDiscountRoot(bytes32 discountRoot_) external;\\n\\n  /**\\n   *\\n   * @dev setTreasury: set a new treasury address (onlyOwner)\\n   *\\n   * @param treasury_: the new treasury address\\n   *\\n   */\\n  function setTreasury(address treasury_) external;\\n\\n  /**\\n   *\\n   * @dev withdrawETH: withdraw to the treasury address (onlyOwner)\\n   *\\n   * @param amount_: amount to withdraw\\n   *\\n   */\\n  function withdrawETH(uint256 amount_) external;\\n\\n  /**\\n   *\\n   * @dev withdrawERC721: Retrieve ERC721s, likely only the ENS associated\\n   * with this contract (onlyOwner)\\n   *\\n   * @param erc721Address_: The token contract for the withdrawal\\n   * @param tokenIDs_: the list of tokenIDs for the withdrawal\\n   *\\n   */\\n  function withdrawERC721(\\n    address erc721Address_,\\n    uint256[] memory tokenIDs_\\n  ) external;\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      **WITHOUT**\\n   *    Trusted provider bonus    **WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    **WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev niftyMove: perform multiple ERC-721 transfers in a single transaction\\n   *\\n   * niftyMove is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITH  **\\n   *\\n   * @param transfers_: struct object containing an array of transfers\\n   * @param transferCount_: count of transfers\\n   * @param standardTransferGas_: gas cost of standard transfer\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   * @param trustedProviderCollectionCount_: Number of trusted provider collections\\n   *\\n   */\\n  function niftyMove(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_,\\n    uint256 trustedProviderCollectionCount_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITHOUT**\\n   *    Trusted provider bonus    ** WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITHOUT**\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev niftyBurn: function to perform multiple burns\\n   *\\n   * niftyBurn is an overloaded function providing the following implementations:\\n   * 1) Move WITHOUT a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 2) Move WITH a discount or referral and WITHOUT trusted provider bonus(es)\\n   * 3) Move WITH a discount or referral and WITH trusted provider bonus(es)\\n   *\\n   * Overloading in this way allows us to avoid IF statements in the code, keeping\\n   * gas costs to a minimum. It does so at the cost of reduced code reuse.\\n   *\\n   * This instance of the overloaded method is for the following:\\n   *\\n   *    Discount or Referral      ** WITH  **\\n   *    Trusted provider bonus    ** WITH  **\\n   *\\n   * @param transfers_: struct object containing an array of burns\\n   * @param transferCount_: count of burns\\n   * @param standardTransferGas_: gas cost of standard burns\\n   * @param gasLimit_: gas limit for ETH transfers\\n   * @param discountDetails_: details of the discount being claimed\\n   * @param proof_: proof for validating discount / referral details\\n   * @param trustedProviderCollectionCount_: Number of trusted provider collections\\n   *\\n   */\\n  function niftyBurn(\\n    Transfer[] calldata transfers_,\\n    uint256 transferCount_,\\n    uint256 standardTransferGas_,\\n    uint256 gasLimit_,\\n    DiscountParameters calldata discountDetails_,\\n    bytes32[] calldata proof_,\\n    uint256 trustedProviderCollectionCount_\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @dev rootIsValid: check the passed details against the root\\n   *\\n   * @param proof_: the proof used to check passed details\\n   * @param discountDetails_: struct object for the claimed discount\\n   *\\n   * @return valid_ :  if this set of data is valid (or not)\\n   *\\n   */\\n  function rootIsValid(\\n    bytes32[] calldata proof_,\\n    DiscountParameters calldata discountDetails_\\n  ) external view returns (bool valid_);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NIFTYMOVES/contracts/ENS/IENSReverseRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n// Included to allow setting of ENS reverse register for contract:\\ninterface IENSReverseRegistrar {\\n  function setName(string memory name) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newDiscountRoot\",\"type\":\"bytes32\"}],\"name\":\"DiscountRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reverseRecordHash\",\"type\":\"bytes32\"}],\"name\":\"ENSNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newENSReverseRegistrar\",\"type\":\"address\"}],\"name\":\"ENSReverseRegistrarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEthFee\",\"type\":\"uint256\"}],\"name\":\"TransferFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWETH\",\"type\":\"address\"}],\"name\":\"WETHAddressUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"disableService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensReverseRegistrar\",\"outputs\":[{\"internalType\":\"contract IENSReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"}],\"name\":\"niftyBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractOrPayee\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"referralID\",\"type\":\"bytes12\"},{\"internalType\":\"uint256\",\"name\":\"tokenID1155\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct INiftyMoves.DiscountParameters\",\"name\":\"discountDetails_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"niftyBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractOrPayee\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"referralID\",\"type\":\"bytes12\"},{\"internalType\":\"uint256\",\"name\":\"tokenID1155\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct INiftyMoves.DiscountParameters\",\"name\":\"discountDetails_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"trustedProviderCollectionCount_\",\"type\":\"uint256\"}],\"name\":\"niftyBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractOrPayee\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"referralID\",\"type\":\"bytes12\"},{\"internalType\":\"uint256\",\"name\":\"tokenID1155\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct INiftyMoves.DiscountParameters\",\"name\":\"discountDetails_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"niftyMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"}],\"name\":\"niftyMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIDs\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct INiftyMoves.Transfer[]\",\"name\":\"transfers_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"transferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"standardTransferGas_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractOrPayee\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"referralID\",\"type\":\"bytes12\"},{\"internalType\":\"uint256\",\"name\":\"tokenID1155\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct INiftyMoves.DiscountParameters\",\"name\":\"discountDetails_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"trustedProviderCollectionCount_\",\"type\":\"uint256\"}],\"name\":\"niftyMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractOrPayee\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"referralID\",\"type\":\"bytes12\"},{\"internalType\":\"uint256\",\"name\":\"tokenID1155\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct INiftyMoves.DiscountParameters\",\"name\":\"discountDetails_\",\"type\":\"tuple\"}],\"name\":\"rootIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"discountRoot_\",\"type\":\"bytes32\"}],\"name\":\"setDiscountRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName_\",\"type\":\"string\"}],\"name\":\"setENSName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistrar_\",\"type\":\"address\"}],\"name\":\"setENSReverseRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"transferFee_\",\"type\":\"uint88\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress_\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs_\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NiftyMoves", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}