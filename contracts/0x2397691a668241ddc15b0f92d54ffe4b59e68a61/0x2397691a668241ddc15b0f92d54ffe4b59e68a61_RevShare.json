{"SourceCode": "/**\r\n*/\r\n\r\n//  SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: BetPool.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint _totalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract RevShare is Ownable {\r\n    event RewardAdded(uint256 _amount);\r\n    event CalculateDividends();\r\n\r\n    uint256 public totalEarnings;\r\n    uint256 public totalBalance;\r\n    mapping (address => uint256) public userBalances;\r\n    mapping (address => uint256) public userDividends;\r\n    mapping (address => uint256) public lastDepositTime;\r\n    mapping (address => bool) public whitelist;\r\n    address[] public userAddresses;\r\n    IERC20 public tokenPlay;\r\n    IERC20 public tokenCheck;\r\n    uint256 public MINIMUM_TIME_FRAME = 7 days;\r\n    uint public maxAmountInToken;\r\n    uint public minAmountInToken;\r\n    uint public cantPlayers;\r\n    uint public maxPlayers;\r\n    uint public qtyOfBBUD;\r\n\r\n    constructor(address _tokenPlay, address _tokenCheck) {\r\n        tokenPlay = IERC20(_tokenPlay);\r\n        tokenCheck = IERC20(_tokenCheck);\r\n        minAmountInToken = 100000000;\r\n        maxAmountInToken = 500000000;\r\n        maxPlayers = 500;\r\n        cantPlayers = 0;\r\n        qtyOfBBUD = 1000000000000000;\r\n        whitelist[msg.sender] = true;\r\n    }\r\n\r\n    function deposit(uint256 _amount) public {\r\n        require(_amount > 0, \"Deposit amount must be greater than 0\");\r\n        require(_amount <= maxAmountInToken, \"Deposit amount must be less than max\");\r\n        require(_amount >= minAmountInToken, \"Deposit amount must be more than min\");\r\n        require(cantPlayers < maxPlayers, \"Max Players\");\r\n        require(tokenPlay.balanceOf(msg.sender) >= _amount, \"You dont have enough tokens\");\r\n        require(whitelist[msg.sender] || tokenCheck.balanceOf(msg.sender) >= qtyOfBBUD, \"You dont have enough BBUD\");\r\n\r\n        userBalances[msg.sender] += _amount;\r\n        tokenPlay.transferFrom(msg.sender, address(this), _amount);\r\n        totalBalance += _amount;\r\n        lastDepositTime[msg.sender] = block.timestamp;\r\n        userAddresses.push(msg.sender);\r\n        cantPlayers++;\r\n    }\r\n\r\n    function depositOwner(uint256 _amount, address _addy) onlyOwner public  {\r\n        require(_amount > 0, \"Deposit amount must be greater than 0\");\r\n        require(_amount <= maxAmountInToken, \"Deposit amount must be less than max\");\r\n        require(_amount >= minAmountInToken, \"Deposit amount must be more than min\");\r\n        require(cantPlayers < maxPlayers, \"Max Players\");\r\n\r\n        userBalances[_addy] += _amount;\r\n        tokenPlay.transferFrom(msg.sender, address(this), _amount);\r\n        totalBalance += _amount;\r\n        lastDepositTime[_addy] = block.timestamp;\r\n        userAddresses.push(_addy);\r\n        cantPlayers++;\r\n    }\r\n\r\n    function addRewards(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"Rewards amount must be greater than 0\");\r\n        totalEarnings += _amount;\r\n        emit RewardAdded(_amount);\r\n    }\r\n\r\n    function calculateDividends() public onlyOwner {\r\n        require(totalEarnings > 0, \"No earnings to distribute\");\r\n        uint256 walletCount = userAddresses.length;\r\n\r\n        for (uint256 i = 0; i < walletCount; i++) {\r\n            address user = userAddresses[i];\r\n            uint256 userBalance = userBalances[user];\r\n            uint userDividensDivident = userBalance * totalEarnings;\r\n            userDividends[user] = userDividensDivident / totalBalance ;\r\n        }\r\n        totalEarnings = 0;\r\n        emit CalculateDividends();\r\n    }\r\n\r\n    function claimDividends() public {\r\n        uint256 claimedAmount = userDividends[msg.sender];\r\n        require(claimedAmount > 0, \"No dividends to claim\");\r\n        bool approve_done = tokenPlay.approve(address(this), claimedAmount);\r\n        require(approve_done, \"CA cannot approve tokens\");\r\n        tokenPlay.transferFrom(address(this), msg.sender, claimedAmount);\r\n        userDividends[msg.sender] = 0;\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint amount = userBalances[msg.sender];\r\n        require(amount > 0, \"Withdraw amount must be greater than 0\");\r\n        require(block.timestamp >= lastDepositTime[msg.sender] + MINIMUM_TIME_FRAME, \"Withdrawal must wait 7 days from your last deposit\");\r\n        bool approve_done = tokenPlay.approve(address(this), amount);\r\n        require(approve_done, \"CA cannot approve tokens\");\r\n\r\n        tokenPlay.transferFrom(address(this), msg.sender, amount);\r\n\r\n        totalBalance -= amount;\r\n        userBalances[msg.sender] = 0;\r\n        cantPlayers--;\r\n    }\r\n\r\n    function setOptions(uint _maxAmountInToken, uint _minAmountInToken, uint _maxPlayers, uint _cantPlayers, uint _qtyOfBBUD) onlyOwner public {\r\n        maxAmountInToken = _maxAmountInToken;\r\n        minAmountInToken = _minAmountInToken;\r\n        maxPlayers = _maxPlayers;\r\n        cantPlayers = _cantPlayers;\r\n        qtyOfBBUD = _qtyOfBBUD;\r\n    }\r\n\r\n    function setWhitelist(address _addy, bool _option) onlyOwner public {\r\n        whitelist[_addy] = _option;\r\n    }\r\n\r\n    function setFrameDays(uint _days) onlyOwner public {\r\n        MINIMUM_TIME_FRAME = _days * 24 * 60 * 60;\r\n    }\r\n\r\n    function unstuck(uint256 _amount, address _addy) onlyOwner public {\r\n        if (_addy == address(0)) {\r\n            (bool sent,) = address(msg.sender).call{value: _amount}(\"\");\r\n            require(sent, \"funds has to be sent\");\r\n        } else {\r\n            bool approve_done = IERC20(_addy).approve(address(this), IERC20(_addy).balanceOf(address(this)));\r\n            require(approve_done, \"CA cannot approve tokens\");\r\n            require(IERC20(_addy).balanceOf(address(this)) > 0, \"No tokens\");\r\n            IERC20(_addy).transfer(msg.sender, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPlay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenCheck\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CalculateDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_TIME_FRAME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cantPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"depositOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qtyOfBBUD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setFrameDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountInToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountInToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cantPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qtyOfBBUD\",\"type\":\"uint256\"}],\"name\":\"setOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_option\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCheck\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPlay\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"unstuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevShare", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000001945e1245e66c3eae3e5799099cf2ea97c66a379", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c15ce4b68362c226d123fa920dbb71d02b18afa5f6e5c045dea8b1b7538fcaaa"}