{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for Chainlink Aggregator V3\\ninterface AggregatorV3Interface {\\n    /// @notice Returns the number of decimals used by the price feed\\n    /// @return The number of decimals\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Returns a description of the price feed\\n    /// @return The description of the price feed\\n    function description() external view returns (string memory);\\n\\n    /// @notice Returns the version number of the price feed\\n    /// @return The version number\\n    function version() external view returns (uint256);\\n\\n    /// @notice Returns the latest answer from the price feed\\n    /// @return The latest answer\\n    function latestAnswer() external view returns (int256);\\n\\n    /// @notice Returns the data for the latest round of the price feed\\n    /// @return roundId The ID of the latest round\\n    /// @return answer The latest answer\\n    /// @return startedAt The timestamp when the latest round started\\n    /// @return updatedAt The timestamp when the latest round was last updated\\n    /// @return answeredInRound The ID of the round when the latest answer was computed\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @notice Interface for the ERC20 token contract\\ninterface IERC20 is IERC20Upgradeable {\\n    /// @notice Returns the number of decimals used by the token\\n    /// @return The number of decimals\\n    function decimals() external view returns (uint8);\\n\\n    /// dev Returns the name of the Wrapped Ether token.\\n    /// return A string representing the token name.\\n    function name() external view returns (string memory);\\n\\n    /// dev Returns the symbol of the Wrapped Ether token.\\n    /// return A string representing the token symbol.\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IUniswapRouterV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the Uniswap V3 Router contract\\ninterface IUniswapRouterV3 {\\n    /// @notice Parameters for single-token exact input swaps\\n    struct ExactInputSingleParams {\\n        address tokenIn; // The address of the input token\\n        address tokenOut; // The address of the output token\\n        uint24 fee; // The fee level of the pool\\n        address recipient; // The address to receive the output tokens\\n        uint256 amountIn; // The exact amount of input tokens to swap\\n        uint256 amountOutMinimum; // The minimum acceptable amount of output tokens to receive\\n        uint160 sqrtPriceLimitX96; // The square root of the price limit in the Uniswap pool\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Parameters for multi-hop exact input swaps\\n    struct ExactInputParams {\\n        bytes path; // The path of tokens to swap\\n        address recipient; // The address to receive the output tokens\\n        uint256 amountIn; // The exact amount of input tokens to swap\\n        uint256 amountOutMinimum; // The minimum acceptable amount of output tokens to receive\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn; // The address of the input token\\n        address tokenOut; // The address of the output token\\n        uint24 fee; // The fee level of the pool\\n        address recipient; // The address to receive the input tokens\\n        uint256 amountOut; // The exact amount of output tokens to receive\\n        uint256 amountInMaximum; // The maximum acceptable amount of input tokens to swap\\n        uint160 sqrtPriceLimitX96; // The square root of the price limit in the Uniswap pool\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path; // The path of tokens to swap (reversed)\\n        address recipient; // The address to receive the input tokens\\n        uint256 amountOut; // The exact amount of output tokens to receive\\n        uint256 amountInMaximum; // The maximum acceptable amount of input tokens to swap\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IUniswapRouterV3WithDeadline.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Interface for the Uniswap V3 Router contract with deadline support\\ninterface IUniswapRouterV3WithDeadline {\\n    /// @notice Parameters for single-token exact input swaps\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn; // The address of the input token\\n        address tokenOut; // The address of the output token\\n        uint24 fee; // The fee level of the pool\\n        address recipient; // The address to receive the output tokens\\n        uint256 deadline; // The deadline for the swap\\n        uint256 amountIn; // The exact amount of input tokens to swap\\n        uint256 amountOutMinimum; // The minimum acceptable amount of output tokens to receive\\n        uint160 sqrtPriceLimitX96; // The square root of the price limit in the Uniswap pool\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path; // The path of tokens to swap\\n        address recipient; // The address to receive the output tokens\\n        uint256 deadline; // The deadline for the swap\\n        uint256 amountIn; // The exact amount of input tokens to swap\\n        uint256 amountOutMinimum; // The minimum acceptable amount of output tokens to receive\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn; // The address of the input token\\n        address tokenOut; // The address of the output token\\n        uint24 fee; // The fee level of the pool\\n        address recipient; // The address to receive the input tokens\\n        uint256 deadline; // The deadline for the swap\\n        uint256 amountOut; // The exact amount of output tokens to receive\\n        uint256 amountInMaximum; // The maximum acceptable amount of input tokens to swap\\n        uint160 sqrtPriceLimitX96; // The square root of the price limit in the Uniswap pool\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path; // The path of tokens to swap (reversed)\\n        address recipient; // The address to receive the input tokens\\n        uint256 deadline; // The deadline for the swap\\n        uint256 amountOut; // The exact amount of output tokens to receive\\n        uint256 amountInMaximum; // The maximum acceptable amount of input tokens to swap\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title Wrapped Ether (WETH) Interface\\n * @dev This interface defines the functions and events for interacting with the Wrapped Ether (WETH) contract.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @dev Emitted when Ether is deposited and WETH is minted.\\n     * @param dst The address that received the WETH tokens.\\n     * @param wad The amount of Ether deposited, represented in wei.\\n     */\\n    event Deposit(address indexed dst, uint wad);\\n\\n    /**\\n     * @dev Emitted when WETH is burned and Ether is withdrawn.\\n     * @param src The address that initiated the withdrawal.\\n     * @param wad The amount of WETH burned, represented in wei.\\n     */\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    /**\\n     * @dev Deposits Ether to mint WETH tokens.\\n     * @notice This function is payable, and the amount of Ether sent will be converted to WETH.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraws WETH and receives Ether.\\n     * @param wad The amount of WETH to burn, represented in wei.\\n     */\\n    function withdraw(uint wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the Convex Booster contract\\ninterface IConvexBoosterL1 {\\n    /// @notice Deposits funds into the booster\\n    /// @param pid The pool ID\\n    /// @param amount The amount to deposit\\n    /// @param stake Flag indicating whether to stake the deposited funds\\n    /// @return True if the deposit was successful\\n    function deposit(uint256 pid, uint256 amount, bool stake) external returns (bool);\\n\\n    /// @notice Returns the address of the CVX token\\n    function minter() external view returns (address);\\n\\n    /// @notice Earmarks rewards for the specified pool\\n    /// @param _pid The pool ID\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Retrieves information about a pool\\n    /// @param pid The pool ID\\n    /// @return lptoken The LP token address\\n    /// @return token The token address\\n    /// @return gauge The gauge address\\n    /// @return crvRewards The CRV rewards address\\n    /// @return stash The stash address\\n    /// @return shutdown Flag indicating if the pool is shutdown\\n    function poolInfo(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (\\n            address lptoken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n}\\n\\n/// @notice Interface for the Convex Booster L2 contract\\ninterface IConvexBoosterL2 {\\n    /// @notice Deposits funds into the L2 booster\\n    /// @param _pid The pool ID\\n    /// @param _amount The amount to deposit\\n    /// @return True if the deposit was successful\\n    function deposit(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    /// @notice Deposits all available funds into the L2 booster\\n    /// @param _pid The pool ID\\n    /// @return True if the deposit was successful\\n    function depositAll(uint256 _pid) external returns (bool);\\n\\n    /// @notice Retrieves information about a pool\\n    /// @param pid The pool ID\\n    /// @return lptoken The LP token address\\n    /// @return gauge The gauge address\\n    /// @return rewards The rewards address\\n    /// @return shutdown Flag indicating if the pool is shutdown\\n    /// @return factory The curve factory address used to create the pool\\n    function poolInfo(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (\\n            address lptoken, //the curve lp token\\n            address gauge, //the curve gauge\\n            address rewards, //the main reward/staking contract\\n            bool shutdown, //is this pool shutdown?\\n            address factory //a reference to the curve factory used to create this pool (needed for minting crv)\\n        );\\n}\\n\\ninterface IConvexRewardPoolL1 {\\n    /// @notice Retrieves the balance of the specified account\\n    /// @param account The account address\\n    /// @return The account balance\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Retrieves the claimable rewards for the specified account\\n    /// @param _account The account address\\n    /// @return the amount representing the claimable rewards\\n    function earned(address _account) external view returns (uint256);\\n\\n    /// @dev Calculates the reward in CVX based on the reward of CRV\\n    /// @dev Used for mock purposes only\\n    /// @param _crvAmount The amount of CRV amount.\\n    /// @return returns the amount of cvx rewards to get\\n    function getCVXAmount(uint256 _crvAmount) external view returns (uint256);\\n\\n    /// @notice Retrieves the period finish timestamp\\n    /// @return The period finish timestamp\\n    function periodFinish() external view returns (uint256);\\n\\n    /// @notice Claims the available rewards for the caller\\n    function getReward() external;\\n\\n    /// @notice Gets the address of the reward token\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice Withdraws and unwraps the specified amount of tokens\\n    /// @param _amount The amount to withdraw and unwrap\\n    /// @param claim Flag indicating whether to claim rewards\\n    function withdrawAndUnwrap(uint256 _amount, bool claim) external;\\n\\n    /// @notice Withdraws all funds and unwraps the tokens\\n    /// @param claim Flag indicating whether to claim rewards\\n    function withdrawAllAndUnwrap(bool claim) external;\\n}\\n\\n/// @notice Interface for the Convex Reward Pool L2 contract\\ninterface IConvexRewardPoolL2 {\\n    /// @notice Struct containing information about an earned reward\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Retrieves the balance of the specified account\\n    /// @param account The account address\\n    /// @return The account balance\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Retrieves the claimable rewards for the specified account\\n    /// @param _account The account address\\n    /// @return claimable An array of EarnedData representing the claimable rewards\\n    function earned(address _account) external returns (EarnedData[] memory claimable);\\n\\n    /// @notice Retrieves the period finish timestamp\\n    /// @return The period finish timestamp\\n    function periodFinish() external view returns (uint256);\\n\\n    /// @notice Claims the available rewards for the specified account\\n    /// @param _account The account address\\n    function getReward(address _account) external;\\n\\n    /// @notice Withdraws the specified amount of tokens\\n    /// @param _amount The amount to withdraw\\n    /// @param _claim Flag indicating whether to claim rewards\\n    function withdraw(uint256 _amount, bool _claim) external;\\n\\n    /// @notice Withdraws all funds\\n    /// @param claim Flag indicating whether to claim rewards\\n    function withdrawAll(bool claim) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/ICurveSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the CurveSwap contract\\ninterface ICurveSwap {\\n    /// @notice Retrieves the fee applied by the CurveSwap contract\\n    /// @return The fee amount\\n    function fee() external view returns (uint256);\\n\\n    /// @notice Retrieves the balance of a token at a specific index within the CurveSwap contract\\n    /// @param index The index of the token\\n    /// @return The balance of the token\\n    function balances(uint256 index) external view returns (uint256);\\n\\n    /// @notice Retrieves the total supply of LP (Liquidity Provider) tokens in the CurveSwap contract\\n    /// @return The total supply of LP tokens\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieves the admin fee applied by the CurveSwap contract\\n    /// @return The admin fee amount\\n    function admin_fee() external view returns (uint256);\\n\\n    /// @notice Calculates the amount of LP tokens to mint or burn for a given token input or output amounts\\n    /// @param amounts The token input or output amounts\\n    /// @param is_deposit Boolean indicating if it's a deposit or withdrawal operation\\n    /// @return The calculated amount of LP tokens\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculates the amount of LP tokens to mint or burn for a given token input or output amounts\\n    /// @param amounts The token input or output amounts\\n    /// @param is_deposit Boolean indicating if it's a deposit or withdrawal operation\\n    /// @return The calculated amount of LP tokens\\n    function calc_token_amount(\\n        uint256[3] memory amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    /// @notice Removes liquidity from the CurveSwap contract\\n    /// @param _burn_amount The amount of LP tokens to burn\\n    /// @param _min_amounts The minimum acceptable token amounts to receive\\n    /// @return The actual amounts received after removing liquidity\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    /// @notice Removes liquidity from the CurveSwap contract for a single token\\n    /// @param token_amount The amount of the token to remove\\n    /// @param i The index of the token in the pool\\n    /// @param min_amount The minimum acceptable token amount to receive\\n    function remove_liquidity_one_coin(uint256 token_amount, int128 i, uint256 min_amount) external;\\n\\n    /// @notice Removes liquidity from the CurveSwap contract for a single token\\n    /// @param token_amount The amount of the token to remove\\n    /// @param i The index of the token in the pool\\n    /// @param min_amount The minimum acceptable token amount to receive\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    /// @notice Calculates the amount of tokens to receive when withdrawing a single token from the CurveSwap contract\\n    /// @param tokenAmount The LP amount to withdraw\\n    /// @param i The index of the token in the pool\\n    /// @return The calculated amount of tokens to receive\\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\\n\\n    /// @notice Calculates the amount of tokens to receive when withdrawing a single token from the CurveSwap contract\\n    /// @param tokenAmount The LP amount to withdraw\\n    /// @param i The index of the token in the pool\\n    /// @return The calculated amount of tokens to receive\\n    function calc_withdraw_one_coin(uint256 tokenAmount, uint256 i) external view returns (uint256);\\n\\n    /// @notice Retrieves the address of a token in the CurveSwap pool by its index\\n    /// @param arg0 The index of the token in the pool\\n    /// @return The address of the token\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    /// @notice Retrieves the virtual price of the CurveSwap pool\\n    /// @return The virtual price\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /// @notice Adds liquidity to the CurveSwap contract\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract with an option to use underlying tokens\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    /// @param _use_underlying Boolean indicating whether to use underlying tokens\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract for a specific pool\\n    /// @param _pool The address of the pool to add liquidity to\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(\\n        address _pool,\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract with an option to use underlying tokens\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    /// @param _use_underlying Boolean indicating whether to use underlying tokens\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract for a specific pool\\n    /// @param _pool The address of the pool to add liquidity to\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(\\n        address _pool,\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract for a specific pool\\n    /// @param _pool The address of the pool to add liquidity to\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(uint256[5] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract for a specific pool\\n    /// @param _pool The address of the pool to add liquidity to\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(\\n        address _pool,\\n        uint256[5] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(uint256[6] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    /// @notice Adds liquidity to the CurveSwap contract for a specific pool\\n    /// @param _pool The address of the pool to add liquidity to\\n    /// @param amounts The amounts of tokens to add as liquidity\\n    /// @param min_mint_amount The minimum acceptable amount of LP tokens to mint\\n    function add_liquidity(\\n        address _pool,\\n        uint256[6] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    /// @notice Exchanges tokens on the CurveSwap contract\\n    /// @param i The index of the input token in the pool\\n    /// @param j The index of the output token in the pool\\n    /// @param dx The amount of the input token to exchange\\n    /// @param min_dy The minimum acceptable amount of the output token to receive\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/IGaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the Gauge Factory\\ninterface IGaugeFactory {\\n    /// @notice Mints a gauge token\\n    /// @param _gauge The address of the gauge to be minted\\n    function mint(address _gauge) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IAdminStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @dev Interface for managing the super admin role.\\ninterface ISuperAdmin {\\n    /// @notice Returns the address of the super admin.\\n    /// @return The address of the super admin.\\n    function superAdmin() external view returns (address);\\n\\n    /// @notice Returns the address of the potential super admin.\\n    /// @return The address of the potential super admin.\\n    function potentialSuperAdmin() external view returns (address);\\n\\n    /// @notice Transfers the super admin role to a potential super admin address using pull-over-push pattern.\\n    /// @param _potentialSuperAdmin An address of a potential super admin.\\n    function transferSuperAdmin(address _potentialSuperAdmin) external;\\n\\n    /// @notice Accepts the super admin role by a potential super admin.\\n    function acceptSuperAdmin() external;\\n\\n    /// @notice Checks if the caller is a valid super admin.\\n    /// @param caller The address to check.\\n    function isValidSuperAdmin(address caller) external view;\\n}\\n\\n/// @dev Interface for managing admin roles.\\ninterface IAdminStructure is ISuperAdmin {\\n    /// @dev Emitted when an admin is added.\\n    /// @param admin The address of the added admin.\\n    event AddedAdmin(address admin);\\n\\n    /// @dev Emitted when an admin is removed.\\n    /// @param admin The address of the removed admin.\\n    event RemovedAdmin(address admin);\\n\\n    /// @notice Checks if the caller is a valid admin.\\n    /// @param caller The address to check.\\n    function isValidAdmin(address caller) external view;\\n\\n    /// @notice Checks if an account is an admin.\\n    /// @param account The address to check.\\n    /// @return A boolean indicating if the account is an admin.\\n    function isAdmin(address account) external view returns (bool);\\n\\n    /// @notice Adds multiple addresses as admins.\\n    /// @param _admins The addresses to add as admins.\\n    function addAdmins(address[] calldata _admins) external;\\n\\n    /// @notice Removes multiple addresses from admins.\\n    /// @param _admins The addresses to remove from admins.\\n    function removeAdmins(address[] calldata _admins) external;\\n\\n    /// @notice Returns all the admin addresses.\\n    /// @return An array of admin addresses.\\n    function getAllAdmins() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IStrategyCalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the Strategy Calculations contract\\n/// @dev This interface provides functions for performing various calculations related to the strategy.\\ninterface IStrategyCalculations {\\n    /// @return The address of the Admin Structure contract\\n    function adminStructure() external view returns (address);\\n\\n    /// @return The address of the Strategy contract\\n    function strategy() external view returns (address);\\n\\n    /// @return The address of the Quoter contract\\n    function quoter() external view returns (address);\\n\\n    /// @dev Constant for representing 100 (100%)\\n    /// @return The value of 100\\n    function ONE_HUNDRED() external pure returns (uint256);\\n\\n    /// @notice Calculates the minimum amount of tokens to receive from Curve for a specific token and maximum amount\\n    /// @param _token The address of the token to withdraw\\n    /// @param _maxAmount The maximum amount of tokens to withdraw\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The minimum amount of tokens to receive from Curve\\n    function calculateCurveMinWithdrawal(\\n        address _token,\\n        uint256 _maxAmount,\\n        uint256 _slippage\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculates the amount of LP tokens to get on curve deposit\\n    /// @param _token The token to estimate the deposit\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The amount of LP tokens to get\\n    function calculateCurveDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256);\\n\\n    /// @notice Estimates the amount of tokens to swap from one token to another\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @param _amount The amount of tokens to swap\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return estimate The estimated amount of tokens to receive after the swap\\n    function estimateSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external returns (uint256 estimate);\\n\\n    /// @notice Estimates the deposit details for a specific token and amount\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return amountWant The minimum amount of tokens to get on the curve deposit\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 amountWant);\\n\\n    /// @notice Estimates the withdrawal details for a specific user, token, maximum amount, and slippage\\n    /// @param _user The address of the user\\n    /// @param _token The address of the token to withdraw\\n    /// @param _maxAmount The maximum amount of tokens to withdraw\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return minCurveOutput The minimum amount of tokens to get from the curve withdrawal\\n    /// @return withdrawable The minimum amount of tokens to get after the withdrawal\\n    function estimateWithdrawal(\\n        address _user,\\n        address _token,\\n        uint256 _maxAmount,\\n        uint256 _slippage\\n    ) external view returns (uint256 minCurveOutput, uint256 withdrawable);\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return rewardAmounts rewards the amount representing the pending rewards\\n    /// @return rewardTokens addresses of the reward tokens\\n    /// @return enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvestView()\\n        external\\n        view\\n        returns (\\n            uint256[] memory rewardAmounts,\\n            address[] memory rewardTokens,\\n            bool[] memory enoughRewards,\\n            bool atLeastOne\\n        );\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return rewardAmounts rewards the amount representing the pending rewards\\n    /// @return rewardTokens addresses of the reward tokens\\n    /// @return enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvest()\\n        external\\n        returns (\\n            uint256[] memory rewardAmounts,\\n            address[] memory rewardTokens,\\n            bool[] memory enoughRewards,\\n            bool atLeastOne\\n        );\\n\\n    /// @notice Estimates the rewards details for a specific user, token, amount, and slippage\\n    /// @param _user The address of the user\\n    /// @param _token The address of the token to calculate rewards for\\n    /// @param _amount The amount of tokens\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return minCurveOutput The minimum amount of tokens to get from the curve withdrawal\\n    /// @return claimable The minimum amount of tokens to get after the claim of rewards\\n    function estimateRewards(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 minCurveOutput, uint256 claimable);\\n\\n    /// @notice Estimates the total claimable rewards for all users using a specific token and slippage\\n    /// @param _token The address of the token to calculate rewards for\\n    /// @param _amount The amount of tokens\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return claimable The total claimable amount of tokens\\n    function estimateAllUsersRewards(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 claimable);\\n\\n    /// @dev Returns the amount of tokens deposited by a specific user in the indicated token\\n    /// @param _user The address of the user.\\n    /// @param _token The address of the token.\\n    /// @return The amount of tokens deposited by the user.\\n    function userDeposit(address _user, address _token) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of tokens deposited in the strategy in the indicated token\\n    /// @param _token The address of the token.\\n    /// @return The total amount of tokens deposited.\\n    function totalDeposits(address _token) external view returns (uint256);\\n\\n    /// @notice Retrieves the minimum amount of tokens to swap from a specific fromToken to toToken\\n    /// @param _fromToken The address of the token to swap from\\n    /// @param _toToken The address of the token to swap to\\n    /// @return The minimum amount of tokens to swap\\n    function getAutomaticSwapMin(address _fromToken, address _toToken) external returns (uint256);\\n\\n    /// @notice Retrieves the minimum amount of LP tokens to obtained from a curve deposit\\n    /// @param _depositAmount The amount to deposit\\n    /// @return The minimum amount of LP tokens to obtained from the deposit on curve\\n    function getAutomaticCurveMinLp(uint256 _depositAmount) external returns (uint256);\\n\\n    /// @notice Retrieves the balance of a specific token held by the Strategy\\n    /// @param _token The address of the token\\n    /// @return The token balance\\n    function _getTokenBalance(address _token) external view returns (uint256);\\n\\n    /// @notice Retrieves the minimum value between a specific amount and a slippage percentage\\n    /// @param _amount The amount\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The minimum value\\n    function _getMinimum(uint256 _amount, uint256 _slippage) external pure returns (uint256);\\n\\n    /// @notice Estimates the want balance after a harvest\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return Returns the new want amount\\n    function estimateWantAfterHarvest(uint256 _slippage) external returns (uint256);\\n}\\n\\ninterface IStrategyCalculationsTwocrypto is IStrategyCalculations {\\n    /// @notice Formats the array input for curve\\n    /// @param _depositToken The address of the deposit token\\n    /// @param _amount The amount to deposit\\n    /// @return amounts An array of token amounts to use in curve\\n    function getCurveAmounts(\\n        address _depositToken,\\n        uint256 _amount\\n    ) external view returns (uint256[2] memory amounts);\\n}\\n\\ninterface IStrategyCalculationsTricryptoL1 is IStrategyCalculations {\\n    /// @notice Formats the array input for curve\\n    /// @param _depositToken The address of the deposit token\\n    /// @param _amount The amount to deposit\\n    /// @return amounts An array of token amounts to use in curve\\n    function getCurveAmounts(\\n        address _depositToken,\\n        uint256 _amount\\n    ) external view returns (uint256[3] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IStrategyConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport { IStrategyCalculations } from \\\"./IStrategyCalculations.sol\\\";\\n\\n/// @notice Interface for the Convex Strategy contract\\ninterface IStrategyConvex {\\n    /// @dev Struct representing a pool token\\n    struct PoolToken {\\n        bool isAllowed; /// Flag indicating if the token is allowed\\n        uint8 index; /// Index of the token\\n    }\\n\\n    /// @dev Struct representing an oracle\\n    struct Oracle {\\n        address token; /// Token address\\n        address oracle; /// Oracle address\\n    }\\n\\n    /// @dev Struct representing default slippages\\n    struct DefaultSlippages {\\n        uint256 curve; /// Default slippage for Curve swaps\\n        uint256 uniswap; /// Default slippage for Uniswap swaps\\n    }\\n\\n    /// @dev Struct representing reward information\\n    struct RewardInfo {\\n        address[] tokens; /// Array of reward tokens\\n        uint256[] minAmount; /// Array of minimum reward amounts\\n    }\\n\\n    /// @dev Enum representing fee types\\n    enum FeeType {\\n        MANAGEMENT, /// Management fee\\n        PERFORMANCE /// Performance fee\\n    }\\n\\n    /// @dev Event emitted when stucked tokens have been withdrawn\\n    /// @param caller Address of the caller of the transaction\\n    /// @param token Address of the token withdrawn\\n    /// @param amount Withdrawn amount\\n    event WithdrawStuckTokens(address caller, address token, uint256 amount);\\n\\n    /// @dev Event emitted when a harvest is executed\\n    /// @param harvester The address of the harvester\\n    /// @param amount The amount harvested\\n    /// @param wantBal The balance of the want token after the harvest\\n    event Harvested(address indexed harvester, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when a deposit is made\\n    /// @param user The address of the user\\n    /// @param token The address of the token deposited\\n    /// @param wantBal The balance of the want token generated with the deposit\\n    event Deposit(address user, address token, uint256 wantBal);\\n\\n    /// @dev Event emitted when a withdrawal is made\\n    /// @param user The address of the user\\n    /// @param token The address of the token being withdrawn\\n    /// @param amount The amount withdrawn\\n    /// @param wantBal The balance of the want token after the withdrawal\\n    event Withdraw(address user, address token, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when rewards are claimed\\n    /// @param user The address of the user\\n    /// @param token The address of the reward token\\n    /// @param amount The amount of rewards claimed\\n    /// @param wantBal The balance of the want token after claiming rewards\\n    event ClaimedRewards(address user, address token, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when fees are charged\\n    /// @param feeType The type of fee (Management or Performance)\\n    /// @param amount The amount of fees charged\\n    /// @param feeRecipient The address of the fee recipient\\n    event ChargedFees(FeeType indexed feeType, uint256 amount, address feeRecipient);\\n\\n    /// @dev Event emitted when allowed tokens are edited\\n    /// @param token The address of the token\\n    /// @param status The new status (true or false)\\n    event EditedAllowedTokens(address token, bool status);\\n\\n    /// @dev Event emitted when the pause status is changed\\n    /// @param status The new pause status (true or false)\\n    event PauseStatusChanged(bool status);\\n\\n    /// @dev Event emitted when a swap path is set\\n    /// @param from The address of the token to swap from\\n    /// @param to The address of the token to swap to\\n    /// @param path The swap path\\n    event SetPath(address from, address to, bytes path);\\n\\n    /// @dev Event emitted when a swap route is set\\n    /// @param from The address of the token to swap from\\n    /// @param to The address of the token to swap to\\n    /// @param route The swap route\\n    event SetRoute(address from, address to, address[] route);\\n\\n    /// @dev Event emitted when an oracle is set\\n    /// @param token The address of the token\\n    /// @param oracle The address of the oracle\\n    event SetOracle(address token, address oracle);\\n\\n    /// @dev Event emitted when the slippage value is set\\n    /// @param oldValue The old slippage value\\n    /// @param newValue The new slippage value\\n    /// @param kind The kind of slippage (Curve or Uniswap)\\n    event SetSlippage(uint256 oldValue, uint256 newValue, string kind);\\n\\n    /// @dev Event emitted when the minimum amount to harvest is changed\\n    /// @param token The address of the token\\n    /// @param minimum The new minimum amount to harvest\\n    event MinimumToHarvestChanged(address token, uint256 minimum);\\n\\n    /// @dev Event emitted when a reward token is added\\n    /// @param token The address of the reward token\\n    /// @param minimum The minimum amount of the reward token\\n    event AddedRewardToken(address token, uint256 minimum);\\n\\n    /// @dev Event emitted when a panic is executed\\n    event PanicExecuted();\\n}\\n\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexExtended is IStrategyConvex {\\n    /// @dev Returns the address of the pool contract\\n    /// @return The address of the pool contract\\n    function pool() external view returns (address);\\n\\n    /// @dev Returns how many tokens the pool accepts\\n    /// @return The number of tokens the pool accepts\\n    function POOL_SIZE() external view returns (uint256);\\n\\n    /// @dev Returns the address of the calculations contract\\n    /// @return The address of the calculations contract\\n    function calculations() external view returns (IStrategyCalculations);\\n\\n    /// @dev Returns the address of the admin structure contract\\n    /// @return The address of the admin structure contract\\n    function adminStructure() external view returns (address);\\n\\n    /// @dev Minimum amount to execute reinvestment in harvest\\n    function minimumToHarvest(address _token) external view returns (uint256);\\n\\n    /// @dev Executes the harvest operation, it is also the function compound, reinvests rewards\\n    function harvest() external;\\n\\n    /// @dev Executes the harvest operation on deposits, it is also the function compound, reinvests rewards\\n    function harvestOnDeposit() external;\\n\\n    /// @dev Handles the case where tokens get stuck in the Strategy. Allows the admin to send the tokens to the\\n    ///      SuperAdmin\\n    /// @param _token The address of the stuck token\\n    function inCaseTokensGetStuck(address _token) external;\\n\\n    /// @dev Executes a panic operation, withdraws all the rewards from convex\\n    function panic() external;\\n\\n    /// @dev Pauses the strategy, pauses deposits\\n    function pause() external;\\n\\n    /// @dev Unpauses the strategy\\n    function unpause() external;\\n\\n    /// @dev Withdraws tokens from the strategy\\n    /// @param _user The address of the user\\n    /// @param _amount The amount of tokens to withdraw\\n    /// @param _token The address of the token to withdraw\\n    /// @param _minCurveOutput The minimum LP output from Curve\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function withdraw(\\n        address _user,\\n        uint256 _amount,\\n        address _token,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external;\\n\\n    /// @dev Claims rewards for the user\\n    /// @param _user The address of the user\\n    /// @param _token The address of the reward token\\n    /// @param _amount The amount of rewards to claim\\n    /// @param _minCurveOutput The minimum LP token output from Curve swap\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function claimRewards(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external;\\n\\n    /// @dev Returns the address of the reward pool contract\\n    /// @return The address of the reward pool contract\\n    function rewardPool() external view returns (address);\\n\\n    /// @dev Returns the address of the deposit token\\n    /// @return The address of the deposit token\\n    function depositToken() external view returns (address);\\n\\n    /// @dev Checks if a token is allowed for deposit\\n    /// @param token The address of the token\\n    /// @return isAllowed True if the token is allowed, false otherwise\\n    /// @return index The index of the token\\n    function allowedDepositTokens(address token) external view returns (bool, uint8);\\n\\n    /// @dev Returns the swap path for a token pair\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @return The swap path\\n    function paths(address _from, address _to) external view returns (bytes memory);\\n\\n    /// @dev Returns the want deposit amount of a user in the deposit token\\n    /// @param _user The address of the user\\n    /// @return The deposit amount for the user\\n    function userWantDeposit(address _user) external view returns (uint256);\\n\\n    /// @dev Returns the total want deposits in the strategy\\n    /// @return The total deposits in the strategy\\n    function totalWantDeposits() external view returns (uint256);\\n\\n    /// @dev Returns the oracle address for a token\\n    /// @param _token The address of the token\\n    /// @return The oracle address\\n    function oracle(address _token) external view returns (address);\\n\\n    /// @dev Returns the default slippage for Curve swaps used in harvest\\n    /// @return The default slippage for Curve swaps\\n    function defaultSlippageCurve() external view returns (uint256);\\n\\n    /// @dev Returns the default slippage for Uniswap swaps used in harvest\\n    /// @return The default slippage for Uniswap swaps\\n    function defaultSlippageUniswap() external view returns (uint256);\\n\\n    /// @dev Returns the want token\\n    /// @return The want token\\n    function want() external view returns (IERC20Upgradeable);\\n\\n    /// @dev Returns the balance of the strategy held in the strategy\\n    /// @return The balance of the strategy\\n    function balanceOf() external view returns (uint256);\\n\\n    /// @dev Returns the balance of the want token held in the strategy\\n    /// @return The balance of the want token\\n    function balanceOfWant() external view returns (uint256);\\n\\n    /// @dev Returns the balance of want in the strategy\\n    /// @return The balance of the pool\\n    function balanceOfPool() external view returns (uint256);\\n\\n    /// @dev Returns the pause status of the strategy\\n    /// @return True if the strategy is paused, false otherwise\\n    function paused() external view returns (bool);\\n\\n    /// @dev Returns the address of the weth token\\n    /// @return The address of the weth router\\n    function weth() external view returns (address);\\n\\n    /// @dev Returns the address of the Uniswap router\\n    /// @return The address of the Uniswap router\\n    function unirouter() external view returns (address);\\n\\n    /// @dev Returns the address of the vault contract\\n    /// @return The address of the vault contract\\n    function vault() external view returns (address);\\n\\n    /// @dev Returns the address of Convex booster\\n    /// @return The address of the Convex booster\\n    function booster() external view returns (address);\\n\\n    /// @dev Returns the address of Uniswap V2 router\\n    /// @return The address of Uniswap V2 router\\n    function unirouterV2() external view returns (address);\\n\\n    /// @dev Returns the address of Uniswap V3 router\\n    /// @return The address of Uniswap V3 router\\n    function unirouterV3() external view returns (address);\\n\\n    /// @dev Returns the performance fee\\n    /// @return The performance fee\\n    function performanceFee() external view returns (uint256);\\n\\n    /// @dev Returns the management fee\\n    /// @return The management fee\\n    function managementFee() external view returns (uint256);\\n\\n    /// @dev Returns the performance fee recipient\\n    /// @return The performance fee recipient\\n    function performanceFeeRecipient() external view returns (address);\\n\\n    /// @dev Returns the management fee recipient\\n    /// @return The management fee recipient\\n    function managementFeeRecipient() external view returns (address);\\n\\n    /// @dev Returns the fee cap\\n    /// @return The fee cap\\n    function FEE_CAP() external view returns (uint256);\\n\\n    /// @dev Returns the constant value of 100\\n    /// @return The constant value of 100\\n    function ONE_HUNDRED() external view returns (uint256);\\n\\n    /// @dev Sets the performance fee\\n    /// @param _fee The new performance fee\\n    function setPerformanceFee(uint256 _fee) external;\\n\\n    /// @dev Sets the management fee\\n    /// @param _fee The new management fee\\n    function setManagementFee(uint256 _fee) external;\\n\\n    /// @dev Sets the performance fee recipient\\n    /// @param recipient The new performance fee recipient\\n    function setPerformanceFeeRecipient(address recipient) external;\\n\\n    /// @dev Sets the management fee recipient\\n    /// @param recipient The new management fee recipient\\n    function setManagementFeeRecipient(address recipient) external;\\n\\n    /// @dev Sets the vault contract\\n    /// @param _vault The address of the vault contract\\n    function setVault(address _vault) external;\\n\\n    /// @dev Sets the Uniswap V2 router address\\n    /// @param _unirouterV2 The address of the Uniswap V2 router\\n    function setUnirouterV2(address _unirouterV2) external;\\n\\n    /// @dev Sets the Uniswap V3 router address\\n    /// @param _unirouterV3 The address of the Uniswap V3 router\\n    function setUnirouterV3(address _unirouterV3) external;\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return _rewardAmounts rewards the amount representing the pending rewards\\n    /// @return _rewardTokens addresses of the reward tokens\\n    /// @return _enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return _atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvest()\\n        external\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            address[] memory _rewardTokens,\\n            bool[] memory _enoughRewards,\\n            bool _atLeastOne\\n        );\\n\\n    // List of the reward tokens\\n    function getRewardTokens() external view returns (address[] memory);\\n}\\n\\n/// @title IStrategyConvexNonPayable\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexNonPayable is IStrategyConvexExtended {\\n    /// @dev Deposits tokens into the strategy\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _user The address of the user\\n    /// @param _minWant The minimum amount of want tokens to get from curve\\n    function deposit(address _token, uint256 _amount, address _user, uint256 _minWant) external;\\n}\\n\\n/// @title IStrategyConvexPayable\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexPayable is IStrategyConvexExtended {\\n    /// @dev Deposits tokens into the strategy\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _user The address of the user\\n    /// @param _minWant The minimum amount of want tokens to get from curve\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _user,\\n        uint256 _minWant\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/common/StratFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { IAdminStructure } from \\\"../../interfaces/dollet/IAdminStructure.sol\\\";\\n\\n/// @title Handles fees and admin validations\\n/// @dev Contract that manages the fees for a strategy.\\nabstract contract StratFeeManager is PausableUpgradeable {\\n    // Address of contract that stores the information of the admins.\\n    IAdminStructure public adminStructure;\\n    /// @notice Address of the vault contract.\\n    address public vault;\\n    /// @notice Address of the Uniswap V3 router.\\n    address public unirouterV3;\\n    /// @notice Performance fee for the strategy.\\n    uint256 public performanceFee;\\n    /// @notice Management fee for the strategy.\\n    uint256 public managementFee;\\n    /// @notice Address of the performance fee recipient.\\n    address public performanceFeeRecipient;\\n    /// @notice Address of the management fee recipient.\\n    address public managementFeeRecipient;\\n\\n    /// @dev Cap for performance and management fees.\\n    uint256 public constant FEE_CAP = 35 ether;\\n    /// @dev Value representing 100%.\\n    uint256 public constant ONE_HUNDRED = 100 ether;\\n\\n    /// @dev Struct for common addresses used in initialization.\\n    struct CommonAddresses {\\n        IAdminStructure adminStructure;\\n        address vault;\\n        address unirouterV3;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        address performanceFeeRecipient;\\n        address managementFeeRecipient;\\n    }\\n\\n    /// @notice Emitted when the vault address is set.\\n    event SetVault(address vault);\\n    /// @notice Emitted when the Uniswap V3 router address is set.\\n    event SetUnirouterV3(address unirouter);\\n    /// @notice Emitted when the performance fee is set.\\n    event SetPerformanceFee(uint256 feeAmount);\\n    /// @notice Emitted when the management fee is set.\\n    event SetManagementFee(uint256 feeAmount);\\n    /// @notice Emitted when the performance fee recipient is set.\\n    event SetPerformanceFeeRecipient(address recipient);\\n    /// @notice Emitted when the management fee recipient is set.\\n    event SetManagementFeeRecipient(address recipient);\\n\\n    /// @dev Initializes the contract.\\n    /// @param _commonAddresses Struct containing common addresses for initialization.\\n    function __StratFeeManager_init(\\n        CommonAddresses calldata _commonAddresses\\n    ) internal onlyInitializing {\\n        require(address(_commonAddresses.adminStructure) != address(0), \\\"ZeroAdminStructure\\\");\\n        adminStructure = _commonAddresses.adminStructure;\\n\\n        vault = _commonAddresses.vault;\\n\\n        require(_commonAddresses.unirouterV3 != address(0), \\\"ZeroRouter\\\");\\n        unirouterV3 = _commonAddresses.unirouterV3;\\n\\n        require(_commonAddresses.performanceFeeRecipient != address(0), \\\"ZeroRecipient\\\");\\n        performanceFeeRecipient = _commonAddresses.performanceFeeRecipient;\\n\\n        require(_commonAddresses.managementFeeRecipient != address(0), \\\"ZeroRecipient\\\");\\n        managementFeeRecipient = _commonAddresses.managementFeeRecipient;\\n\\n        require(_commonAddresses.performanceFee <= FEE_CAP, \\\"PerformanceFeeCap\\\");\\n        performanceFee = _commonAddresses.performanceFee;\\n\\n        require(_commonAddresses.managementFee <= FEE_CAP, \\\"ManagementFeeCap\\\");\\n        managementFee = _commonAddresses.managementFee;\\n    }\\n\\n    /// @dev Modifier to restrict access to super admin only.\\n    modifier onlySuperAdmin() {\\n        adminStructure.isValidSuperAdmin(msg.sender);\\n        _;\\n    }\\n    /// @dev Modifier to restrict access to admins and super admins only.\\n    modifier onlyAdmin() {\\n        adminStructure.isValidAdmin(msg.sender);\\n        _;\\n    }\\n\\n    /// @dev Sets the performance fee for the strategy.\\n    /// @param _fee The new performance fee\\n    function setPerformanceFee(uint256 _fee) external onlyAdmin {\\n        require(_fee <= FEE_CAP, \\\"PerformanceFeeCap\\\");\\n\\n        performanceFee = _fee;\\n\\n        emit SetPerformanceFee(_fee);\\n    }\\n\\n    /// @dev Sets the management fee for the strategy.\\n    /// @param _fee The new management fee\\n    function setManagementFee(uint256 _fee) external onlyAdmin {\\n        require(_fee <= FEE_CAP, \\\"ManagementFeeCap\\\");\\n\\n        managementFee = _fee;\\n\\n        emit SetManagementFee(_fee);\\n    }\\n\\n    /// @dev Sets the performance fee recipient address.\\n    /// @param recipient The new performance fee recipient address\\n    function setPerformanceFeeRecipient(address recipient) external onlySuperAdmin {\\n        require(recipient != address(0), \\\"ZeroRecipient\\\");\\n\\n        performanceFeeRecipient = recipient;\\n\\n        emit SetPerformanceFeeRecipient(recipient);\\n    }\\n\\n    /// @dev Sets the management fee recipient address.\\n    /// @param recipient The new management fee recipient address\\n    function setManagementFeeRecipient(address recipient) external onlySuperAdmin {\\n        require(recipient != address(0), \\\"ZeroRecipient\\\");\\n\\n        managementFeeRecipient = recipient;\\n\\n        emit SetManagementFeeRecipient(recipient);\\n    }\\n\\n    /// @dev Sets the vault address.\\n    /// @param _vault The new vault address\\n    function setVault(address _vault) external onlySuperAdmin {\\n        require(_vault != address(0), \\\"ZeroVault\\\");\\n\\n        vault = _vault;\\n\\n        emit SetVault(_vault);\\n    }\\n\\n    /// @dev Sets the Uniswap V3 router address.\\n    /// @param _unirouterV3 The new Uniswap V3 router address\\n    function setUnirouterV3(address _unirouterV3) external onlySuperAdmin {\\n        require(_unirouterV3 != address(0), \\\"ZeroRouter\\\");\\n\\n        unirouterV3 = _unirouterV3;\\n\\n        emit SetUnirouterV3(_unirouterV3);\\n    }\\n\\n    uint256[60] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/curve/StrategyConvexTricryptoNativeL1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { IStrategyCalculationsTricryptoL1 as IStrategyCalculations } from \\\"../../interfaces/dollet/IStrategyCalculations.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"../../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IConvexBoosterL1, IConvexRewardPoolL1 } from \\\"../../interfaces/convex/IConvex.sol\\\";\\nimport { IStrategyConvex } from \\\"../../interfaces/dollet/IStrategyConvex.sol\\\";\\nimport { IGaugeFactory } from \\\"../../interfaces/curve/IGaugeFactory.sol\\\";\\nimport { ICurveSwap } from \\\"../../interfaces/curve/ICurveSwap.sol\\\";\\nimport { StratFeeManager } from \\\"../common/StratFeeManager.sol\\\";\\nimport { IQuoter } from \\\"../../interfaces/common/IQuoter.sol\\\";\\nimport { IERC20 } from \\\"../../interfaces/common/IERC20.sol\\\";\\nimport { UniV3Actions } from \\\"../../utils/UniV3Actions.sol\\\";\\nimport { IWETH } from \\\"../../interfaces/common/IWETH.sol\\\";\\n\\n/// @title StrategyConvexTricryptoNativeL1\\n/// @notice The StrategyConvexBicryptoL2 contract is a crucial component of a project focused on optimizing\\n/// yield farming on Convex Finance. It facilitates the management of a strategy by interacting with\\n/// external contracts, such as a Convex booster, a calculations contract, and a Curve swap pool. The contract\\n/// allows users to deposit funds, claim rewards, and perform harvesting operations. It supports multiple tokens\\n/// for deposit and incorporates checks and validations to ensure secure operations. With features like token\\n/// swapping and reinvestment strategies, the contract helps users maximize their yields and earn rewards effectively.\\ncontract StrategyConvexTricryptoNativeL1 is IStrategyConvex, StratFeeManager {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 public constant POOL_SIZE = 3; // Curve's pool size\\n\\n    /// @notice Address of the booster contract\\n    IConvexBoosterL1 public booster;\\n    /// @notice Address of the calculations contract\\n    IStrategyCalculations public calculations;\\n    bool public isPanicActive; // True if panic is active\\n    address public want; // Curve LP Token\\n    address public pool; // Curve swap pool\\n    address public depositToken; // Token used to reinvest in harvest\\n    address public weth; //  Wrapped Ether token\\n    address public rewardPool; // Convex base reward pool\\n    uint256 public pid; // Convex booster poolId\\n    uint256 public depositIndex; // Index of depositToken in pool\\n    uint256 public lastHarvest; // Last timestamp when the harvest occurred\\n    uint256 public totalWantDeposits; // Total of deposits in Curve LP\\n    uint256 public defaultSlippageCurve; // Curve slippage used in harvest\\n    uint256 public defaultSlippageUniswap; // Uniswap slippage used in harvest\\n    mapping(address => uint256) public userWantDeposit; // Total user deposited in Curve LP\\n    mapping(address => uint256) public minimumToHarvest; // Minimum amount to execute reinvestment in harvest\\n    mapping(address => mapping(address => bytes)) public paths; // From => To returns path for Uniswap\\n    mapping(address => AggregatorV3Interface) public oracle; // Price oracle for a token\\n    mapping(address => PoolToken) public allowedDepositTokens; // Indicates what token is allowed\\n    address[] private rewardTokens; // List of the reward tokens\\n    address[] public listAllowedDepositTokens; // List of the allowed tokens\\n\\n    /// @param want The address of the curve lpToken\\n    /// @param pool The address of the curve swap pool\\n    /// @param booster The address of the Convex booster contract\\n    /// @param pid The pool ID of the Convex booster\\n    /// @param depositToken The token sent to the pool to receive want\\n    /// @param oracles The array of oracle token and oracle address pairs\\n    /// @param depositIndex Deposit index parameter\\n    /// @param defaultSlippages The default slippages for curve and Uniswap\\n    /// @param rewardInfo The reward token addresses and minimum amounts for rewards\\n    /// @param commonAddresses The addresses of common contracts\\n    struct InitParams {\\n        address want;\\n        address pool;\\n        address booster;\\n        uint256 pid;\\n        address depositToken;\\n        address weth;\\n        Oracle[] oracles;\\n        uint256 depositIndex;\\n        DefaultSlippages defaultSlippages;\\n        RewardInfo rewardInfo;\\n        CommonAddresses commonAddresses;\\n    }\\n\\n    /// @dev Modifier to restrict access to vault only.\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"InvalidCaller\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializes the contract\\n    /// @param _initParams Initialization parameters\\n    function initialize(InitParams calldata _initParams) public initializer {\\n        __StratFeeManager_init(_initParams.commonAddresses);\\n\\n        require(_initParams.want != address(0), \\\"ZeroWant\\\");\\n        require(_initParams.pool != address(0), \\\"ZeroPool\\\");\\n        require(_initParams.booster != address(0), \\\"ZeroBooster\\\");\\n        require(_initParams.depositToken != address(0), \\\"ZeroDeposit\\\");\\n        require(_initParams.weth != address(0), \\\"ZeroWeth\\\");\\n        require(ONE_HUNDRED >= _initParams.defaultSlippages.curve, \\\"InvalidDefaultSlippageCurve\\\");\\n        require(\\n            ONE_HUNDRED >= _initParams.defaultSlippages.uniswap,\\n            \\\"InvalidDefaultSlippageUniswap\\\"\\n        );\\n\\n        for (uint256 i; i < _initParams.oracles.length; i++) {\\n            require(_initParams.oracles[i].token != address(0), \\\"ZeroOracleToken\\\");\\n            require(_initParams.oracles[i].oracle != address(0), \\\"ZeroOracleOracle\\\");\\n\\n            oracle[_initParams.oracles[i].token] = AggregatorV3Interface(\\n                _initParams.oracles[i].oracle\\n            );\\n        }\\n\\n        defaultSlippageCurve = _initParams.defaultSlippages.curve;\\n        defaultSlippageUniswap = _initParams.defaultSlippages.uniswap;\\n        (want, pool, pid, depositToken, weth) = (\\n            _initParams.want,\\n            _initParams.pool,\\n            _initParams.pid,\\n            _initParams.depositToken,\\n            _initParams.weth\\n        );\\n        booster = IConvexBoosterL1(_initParams.booster);\\n        depositIndex = _initParams.depositIndex;\\n        (, , , rewardPool, , ) = booster.poolInfo(_initParams.pid);\\n\\n        _addRewardToken(_initParams.rewardInfo.tokens, _initParams.rewardInfo.minAmount);\\n\\n        // Adding valid tokens\\n        for (uint256 i; i < POOL_SIZE; i++) {\\n            address coin = ICurveSwap(_initParams.pool).coins(i);\\n            allowedDepositTokens[coin] = PoolToken(true, uint8(i));\\n            listAllowedDepositTokens.push(coin);\\n        }\\n\\n        _modifyAllowances(type(uint).max);\\n    }\\n\\n    /// @dev Allows this contract to receive native token\\n    receive() external payable {}\\n\\n    /// @notice Deposits funds into the strategy\\n    /// @dev Only the vault contract can call this function\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _user The address of the user making the deposit\\n    /// @param _minWant The minimum amount of want tokens to get from the curve deposit\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _user,\\n        uint256 _minWant\\n    ) external payable whenNotPaused onlyVault {\\n        require(allowedDepositTokens[_token].isAllowed, \\\"TokenNotAllowed\\\");\\n        uint256 wantBefore = balanceOfWant();\\n        _addLiquidityCurve(_token, _amount, _minWant);\\n        uint256 depositedWant = balanceOfWant() - wantBefore;\\n        userWantDeposit[_user] += depositedWant;\\n        totalWantDeposits += depositedWant;\\n        _addLiquidityConvex();\\n        emit Deposit(_user, _token, depositedWant);\\n    }\\n\\n    /// @notice Withdraws funds from the strategy\\n    /// @dev Only the vault contract can call this function\\n    /// @param _user The address of the user making the withdrawal\\n    /// @param _amount The amount to withdraw\\n    /// @param _token The address of the token to withdraw\\n    /// @param _minCurveOutput The minimum amount of tokens to receive from Curve\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function withdraw(\\n        address _user,\\n        uint256 _amount,\\n        address _token,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external onlyVault {\\n        PoolToken memory poolToken = allowedDepositTokens[_token];\\n        require(poolToken.isAllowed, \\\"TokenNotAllowed\\\");\\n        uint256 wantBal = balanceOfWant();\\n        if (wantBal < _amount) {\\n            IConvexRewardPoolL1(rewardPool).withdrawAndUnwrap(_amount - wantBal, false);\\n            wantBal = balanceOfWant();\\n        }\\n        if (wantBal > _amount) wantBal = _amount;\\n\\n        uint256 beforeTokenBal = _getTokenBalance(_token);\\n        ICurveSwap(pool).remove_liquidity_one_coin(wantBal, poolToken.index, _minCurveOutput);\\n        // Subtracts to the user deposit\\n        uint256 tokenBal = _getTokenBalance(_token) - beforeTokenBal;\\n        uint256 _userDeposit = userWantDeposit[_user];\\n        userWantDeposit[_user] = 0;\\n        totalWantDeposits -= _userDeposit;\\n        // Calculates percentage of fees\\n        uint256 _rewards = 0;\\n        if (_userDeposit < wantBal) {\\n            uint256 rewardsPercentage = ((wantBal - _userDeposit) * 1e18) / wantBal;\\n            _rewards = (tokenBal * rewardsPercentage) / 1e18;\\n        }\\n\\n        uint256 _depositMinusRewards = tokenBal - _rewards;\\n\\n        tokenBal -= chargeFees(FeeType.PERFORMANCE, _token, _rewards);\\n        tokenBal -= chargeFees(FeeType.MANAGEMENT, _token, _depositMinusRewards);\\n\\n        // Sends tokens\\n        if (_useEth) {\\n            IWETH(_token).withdraw(tokenBal);\\n\\n            (bool _sucess, ) = payable(_user).call{ value: tokenBal }(\\\"\\\");\\n\\n            if (!_sucess) revert(\\\"TransferFailed\\\");\\n        } else {\\n            IERC20Upgradeable(_token).safeTransfer(_user, tokenBal);\\n        }\\n\\n        emit Withdraw(_user, _token, tokenBal, balanceOf());\\n    }\\n\\n    /// @notice Claims rewards for a user\\n    /// @dev Only the vault contract can call this function\\n    /// @param _user The address of the user claiming rewards\\n    /// @param _token The address of the token to receive rewards\\n    /// @param _amount The amount of tokens to claim as rewards\\n    /// @param _minCurveOutput The minimum amount of tokens to receive from Curve\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function claimRewards(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external onlyVault {\\n        PoolToken memory poolToken = allowedDepositTokens[_token];\\n        require(poolToken.isAllowed, \\\"TokenNotAllowed\\\");\\n        uint256 _userDeposit = userWantDeposit[_user];\\n        require(_userDeposit > 0, \\\"InsufficientDeposit\\\");\\n        require(_amount > _userDeposit, \\\"ZeroRewards\\\");\\n        uint256 rewardAmount = _amount - _userDeposit;\\n        uint256 wantBal = balanceOfWant();\\n        if (wantBal < rewardAmount) {\\n            IConvexRewardPoolL1(rewardPool).withdrawAndUnwrap(rewardAmount - wantBal, false);\\n            wantBal = balanceOfWant();\\n        }\\n        if (wantBal > rewardAmount) wantBal = rewardAmount;\\n\\n        uint256 _beforeTokenBal = _getTokenBalance(_token);\\n\\n        ICurveSwap(pool).remove_liquidity_one_coin(wantBal, poolToken.index, _minCurveOutput);\\n\\n        uint256 _totalRewards = _getTokenBalance(_token) - _beforeTokenBal;\\n\\n        _totalRewards -= chargeFees(FeeType.PERFORMANCE, _token, _totalRewards);\\n\\n        if (_useEth) {\\n            IWETH(_token).withdraw(_totalRewards);\\n\\n            (bool _sucess, ) = payable(_user).call{ value: _totalRewards }(\\\"\\\");\\n\\n            if (!_sucess) revert(\\\"TransferFailed\\\");\\n        } else {\\n            IERC20Upgradeable(_token).safeTransfer(_user, _totalRewards);\\n        }\\n\\n        emit ClaimedRewards(_user, _token, _totalRewards, balanceOf());\\n    }\\n\\n    /// @notice Harvests rewards without convex deposit\\n    function harvestOnDeposit() external whenNotPaused onlyVault {\\n        _harvest(false);\\n    }\\n\\n    /// @notice Harvests earnings (compounds rewards) and charges performance fee\\n    function harvest() external {\\n        _harvest(true);\\n    }\\n\\n    /// @notice Harvests earnings (compounds rewards) and charges performance fee\\n    function _harvest(bool _depositConvex) private {\\n        (, , , bool atLeastOneToHarvest) = getPendingToHarvest();\\n        if (!atLeastOneToHarvest) return;\\n        IConvexRewardPoolL1(rewardPool).getReward();\\n        address _depositToken = depositToken;\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        uint256 _amount = 0;\\n        for (uint256 i = 0; i < rewardTokensLength; i++) {\\n            _amount += _exchangeAllToken(\\n                rewardTokens[i],\\n                _depositToken,\\n                calculations.getAutomaticSwapMin(rewardTokens[i], _depositToken)\\n            );\\n        }\\n        uint256 depositBal = _getTokenBalance(_depositToken);\\n        _addLiquidityCurve(_depositToken, _amount, calculations.getAutomaticCurveMinLp(depositBal));\\n        if (_depositConvex && !paused()) _addLiquidityConvex();\\n        lastHarvest = block.timestamp;\\n        emit Harvested(msg.sender, depositBal, balanceOf());\\n    }\\n\\n    /// @dev Handles the case where tokens get stuck in the Strategy. Allows the admin to send the tokens to the\\n    ///      SuperAdmin\\n    /// @param _token The address of the stuck token\\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\\n        require(_token != want, \\\"WrongToken\\\");\\n\\n        uint256 _amount = IERC20Upgradeable(_token).balanceOf(address(this));\\n\\n        IERC20Upgradeable(_token).safeTransfer(adminStructure.superAdmin(), _amount);\\n\\n        emit WithdrawStuckTokens(msg.sender, _token, _amount);\\n    }\\n\\n    /// @notice Edits the \\\"isAllowed\\\" status of the deposit tokens\\n    /// @dev Only the admin and super admin can call this function\\n    /// @param _token The address of the token to edit\\n    /// @param _status The new status of the token (allowed=true or not allowed=false)\\n    function editAllowedDepositTokens(address _token, bool _status) external onlyAdmin {\\n        PoolToken memory poolToken = allowedDepositTokens[_token];\\n        require(poolToken.isAllowed != _status, \\\"TokenWontChange\\\");\\n        require(ICurveSwap(pool).coins(poolToken.index) == _token, \\\"TokenNotValid\\\");\\n        allowedDepositTokens[_token].isAllowed = _status;\\n        // Excluded because it is needed to harvest (compound)\\n        if (depositToken != _token) {\\n            uint256 approvalAmount = _status ? type(uint).max : 0;\\n            IERC20Upgradeable(_token).safeApprove(pool, approvalAmount);\\n        }\\n        uint256 allowedLength = listAllowedDepositTokens.length;\\n        bool atLeastOne;\\n        for (uint256 i; i < allowedLength; i++) {\\n            if (allowedDepositTokens[listAllowedDepositTokens[i]].isAllowed) {\\n                atLeastOne = true;\\n                continue;\\n            }\\n        }\\n        require(atLeastOne, \\\"CantDisableAllTokens\\\");\\n        emit EditedAllowedTokens(_token, _status);\\n    }\\n\\n    /// @notice Edits the minimum token harvest amounts\\n    /// @dev Only the admin and super admin can call this function\\n    /// @param _tokens An array of token addresses to edit\\n    /// @param _minAmounts An array of minimum harvest amounts corresponding to the tokens\\n    function editMinimumTokenHarvest(\\n        address[] calldata _tokens,\\n        uint256[] calldata _minAmounts\\n    ) external onlyAdmin {\\n        require(_tokens.length == _minAmounts.length, \\\"LengthsMismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            minimumToHarvest[_tokens[i]] = _minAmounts[i];\\n            emit MinimumToHarvestChanged(_tokens[i], _minAmounts[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the path for token swaps\\n    /// @dev Only the admin and super admin can call this function\\n    /// @param _from An array of source token addresses\\n    /// @param _to An array of target token addresses\\n    /// @param _path An array of encoded swap paths for each token pair\\n    function setPath(\\n        address[] calldata _from,\\n        address[] calldata _to,\\n        bytes[] calldata _path\\n    ) external onlyAdmin {\\n        uint256 inputsLength = _from.length;\\n        require(inputsLength == _to.length && inputsLength == _path.length, \\\"LengthsMismatch\\\");\\n        for (uint256 i = 0; i < inputsLength; i++) {\\n            paths[_from[i]][_to[i]] = _path[i];\\n            emit SetPath(_from[i], _to[i], _path[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the strategy calculations contract\\n    /// @dev Only the super admin can call this function\\n    /// @param _calculations The address of the strategy calculations contract\\n    function setStrategyCalculations(IStrategyCalculations _calculations) external onlySuperAdmin {\\n        require(address(_calculations) != address(0), \\\"ZeroCalculations\\\");\\n        calculations = _calculations;\\n    }\\n\\n    /// @notice Sets the oracles for token price feeds\\n    /// @dev Only the super admin can call this function\\n    /// @param _oracles An array of Oracle structs containing token and oracle addresses\\n    function setOracles(Oracle[] calldata _oracles) external onlySuperAdmin {\\n        for (uint256 i; i < _oracles.length; i++) {\\n            require(_oracles[i].token != address(0), \\\"ZeroOracleToken\\\");\\n            require(_oracles[i].oracle != address(0), \\\"ZeroOracleOracle\\\");\\n            oracle[_oracles[i].token] = AggregatorV3Interface(_oracles[i].oracle);\\n            emit SetOracle(_oracles[i].token, _oracles[i].oracle);\\n        }\\n    }\\n\\n    /// @notice Sets the default slippage for Curve swaps used during harvest\\n    /// @dev Only the admin and super admin can call this function\\n    /// @param _defaultSlippage The default slippage percentage (0-100)\\n    function setDefaultSlippageCurve(uint256 _defaultSlippage) external onlyAdmin {\\n        require(ONE_HUNDRED >= _defaultSlippage, \\\"InvalidDefaultSlippage\\\");\\n        emit SetSlippage(defaultSlippageCurve, _defaultSlippage, \\\"Curve\\\");\\n        defaultSlippageCurve = _defaultSlippage;\\n    }\\n\\n    /// @notice Sets the default slippage for Uniswap swaps\\n    /// @dev Only the admin and super admin can call this function\\n    /// @param _defaultSlippage The default slippage percentage (0-100)\\n    function setDefaultSlippageUniswap(uint256 _defaultSlippage) external onlyAdmin {\\n        require(ONE_HUNDRED >= _defaultSlippage, \\\"InvalidDefaultSlippage\\\");\\n        emit SetSlippage(defaultSlippageUniswap, _defaultSlippage, \\\"Uniswap\\\");\\n        defaultSlippageUniswap = _defaultSlippage;\\n    }\\n\\n    /// @notice Deletes the reward tokens array\\n    /// @dev Only the super admin can call this function\\n    function deleteRewards() external onlySuperAdmin {\\n        delete rewardTokens;\\n    }\\n\\n    /// @notice Unpauses the contract deposits and increases the token allowances\\n    /// @dev Only the admin and super admin can call this function\\n    /// @dev This function also reactivates everything after a panic\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n        _modifyAllowances(type(uint).max);\\n        _addLiquidityConvex();\\n        isPanicActive = false;\\n        emit PauseStatusChanged(false);\\n    }\\n\\n    /// @notice Adds reward tokens to the strategy\\n    /// @notice New reward tokens need to add an oracle and swap path to be reinvested\\n    /// @dev Only the super admin can call this function\\n    /// @param tokens An array of token addresses to add as reward tokens\\n    /// @param minAmounts An array of minimum harvest amounts corresponding to the reward tokens\\n    function addRewardToken(\\n        address[] calldata tokens,\\n        uint256[] calldata minAmounts\\n    ) external onlySuperAdmin {\\n        _addRewardToken(tokens, minAmounts);\\n    }\\n\\n    /// @notice Retrieves the reward tokens array\\n    /// @return An array of reward token addresses\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @notice Retrieves the allowed deposit tokens array\\n    /// @return An array of allowed deposit token addresses\\n    function getAllowedDepositTokens() external view returns (address[] memory) {\\n        return listAllowedDepositTokens;\\n    }\\n\\n    /// @notice Pauses deposits, and withdraws all funds from the convex pool\\n    /// @dev Only the super admin can call this function\\n    /// @dev Users can still withdraw their deposit tokens\\n    function panic() public onlySuperAdmin {\\n        pause();\\n        isPanicActive = true;\\n        IConvexRewardPoolL1(rewardPool).withdrawAllAndUnwrap(false);\\n        emit PanicExecuted();\\n    }\\n\\n    /// @notice Pauses deposits and modifies token allowances\\n    /// @dev Only the admin and super admin can call this function\\n    /// @dev Users can still withdraw their deposit tokens\\n    function pause() public onlyAdmin {\\n        _pause();\\n        _modifyAllowances(0);\\n        emit PauseStatusChanged(true);\\n    }\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return _rewardAmounts rewards the amount representing the pending rewards\\n    /// @return _rewardTokens addresses of the reward tokens\\n    /// @return _enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return _atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvest()\\n        public\\n        view\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            address[] memory _rewardTokens,\\n            bool[] memory _enoughRewards,\\n            bool _atLeastOne\\n        )\\n    {\\n        return calculations.getPendingToHarvestView();\\n    }\\n\\n    /// @notice Calculates the total balance of the strategy\\n    /// @return The total balance of the strategy\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant() + balanceOfPool();\\n    }\\n\\n    /// @notice Calculates the balance of the 'want' token held by the strategy\\n    /// @return The balance of the 'want' token\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20Upgradeable(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Calculates the balance of the 'want' token in the convex pool\\n    /// @return The balance of the 'want' token in the convex pool\\n    function balanceOfPool() public view returns (uint256) {\\n        return IConvexRewardPoolL1(rewardPool).balanceOf(address(this));\\n    }\\n\\n    /// @notice Charges fees (performance or management) in the specified token\\n    /// @param feeType The type of fee to charge (performance or management)\\n    /// @param token The token in which to charge the fees\\n    /// @param amount The amount of tokens to charge fees on\\n    /// @return Charged fee amount.\\n    function chargeFees(FeeType feeType, address token, uint256 amount) internal returns (uint256) {\\n        (uint256 percentage, address feeRecipient) = feeType == FeeType.PERFORMANCE\\n            ? (performanceFee, performanceFeeRecipient)\\n            : (managementFee, managementFeeRecipient);\\n\\n        if (percentage > 0) {\\n            uint256 feeAmount = (amount * percentage) / ONE_HUNDRED;\\n            IERC20Upgradeable(token).safeTransfer(feeRecipient, feeAmount);\\n            emit ChargedFees(feeType, feeAmount, feeRecipient);\\n            return feeAmount;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice Adds liquidity to the convex pool using the 'want' token\\n    /// @dev This function is private and used internally\\n    function _addLiquidityConvex() private {\\n        uint256 wantBal = balanceOfWant();\\n        if (wantBal > 0) {\\n            booster.deposit(pid, wantBal, true);\\n        }\\n    }\\n\\n    /// @notice Adds liquidity to the Curve pool using the deposit token\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _minWant The minimum amount of 'want' tokens to obtain from the Curve pool\\n    /// @dev This function is private and used internally\\n    function _addLiquidityCurve(address _token, uint256 _amount, uint256 _minWant) private {\\n        uint256[POOL_SIZE] memory _amounts = calculations.getCurveAmounts(_token, _amount);\\n        if (paused()) IERC20Upgradeable(_token).safeApprove(pool, _amount);\\n        ICurveSwap(pool).add_liquidity(_amounts, _minWant, false);\\n    }\\n\\n    /// @notice Modifies token allowances for the strategy\\n    /// @param _amount The new allowance amount\\n    /// @dev This function is private and used internally\\n    function _modifyAllowances(uint256 _amount) private {\\n        IERC20Upgradeable(want).safeApprove(address(booster), _amount);\\n        address[] memory allowedTokens = listAllowedDepositTokens;\\n        uint256 tokensLength = allowedTokens.length;\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            IERC20Upgradeable(allowedTokens[i]).safeApprove(pool, _amount);\\n        }\\n    }\\n\\n    /// @notice Swaps all of the given token for another token\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @param _minSwap The minimum amount of tokens to receive from the swap\\n    /// @return amountOut The amount of tokens received from the swap\\n    /// @dev This function is private and used internally\\n    function _exchangeAllToken(\\n        address _from,\\n        address _to,\\n        uint256 _minSwap\\n    ) private returns (uint256 amountOut) {\\n        return _exchangeTokenAmount(_from, _to, _getTokenBalance(_from), _minSwap);\\n    }\\n\\n    /// @notice Swaps the specified amount of tokens from one token to another\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @param _amount The amount of tokens to swap\\n    /// @param _minSwap The minimum amount of tokens to receive from the swap\\n    /// @return amountOut The amount of tokens received from the swap\\n    /// @dev This function is private and used internally\\n    function _exchangeTokenAmount(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _minSwap\\n    ) private returns (uint256 amountOut) {\\n        if (_amount < minimumToHarvest[_from]) return 0;\\n        bytes memory path = paths[_from][_to];\\n        require(path.length > 0, \\\"Nonexistent Path\\\");\\n        return UniV3Actions.swapV3WithDeadline(unirouterV3, path, _amount, _minSwap);\\n    }\\n\\n    /// @notice Adds reward tokens to the strategy\\n    /// @notice New reward tokens need to add an oracle and swap path to be reinvested\\n    /// @param tokens An array of token addresses to add as reward tokens\\n    /// @param minAmounts An array of minimum harvest amounts corresponding to the reward tokens\\n    function _addRewardToken(address[] calldata tokens, uint256[] calldata minAmounts) private {\\n        uint256 tokensLength = tokens.length;\\n        require(tokensLength == minAmounts.length, \\\"LengthsMismatch\\\");\\n        for (uint256 i; i < tokensLength; i++) {\\n            address token = tokens[i];\\n            require(token != address(0), \\\"ZeroRewardToken\\\");\\n            require(token != want, \\\"CannotUseWant\\\");\\n            require(token != rewardPool, \\\"CannotUseRewardPool\\\");\\n            uint256 rewardTokensLength = rewardTokens.length;\\n            for (uint256 j; j < rewardTokensLength; j++) {\\n                require(token != rewardTokens[j], \\\"TokenAlreadyExists\\\");\\n            }\\n            rewardTokens.push(token);\\n            minimumToHarvest[token] = minAmounts[i];\\n            IERC20Upgradeable(token).safeApprove(unirouterV3, 0);\\n            IERC20Upgradeable(token).safeApprove(unirouterV3, type(uint).max);\\n            emit AddedRewardToken(token, minAmounts[i]);\\n        }\\n    }\\n\\n    /// @notice Retrieves the balance of the specified token held by the strategy\\n    /// @param _token The address of the token\\n    /// @return The balance of the token\\n    /// @dev This function is private and used internally\\n    function _getTokenBalance(address _token) private view returns (uint256) {\\n        return IERC20Upgradeable(_token).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/UniV3Actions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { IUniswapRouterV3WithDeadline } from \\\"../interfaces/common/IUniswapRouterV3WithDeadline.sol\\\";\\nimport { IUniswapRouterV3 } from \\\"../interfaces/common/IUniswapRouterV3.sol\\\";\\n\\n/// @title Library to interact with uniswap v3\\n/// @dev Library for Uniswap V3 actions.\\nlibrary UniV3Actions {\\n    /// @dev Performs a Uniswap V3 swap with a deadline.\\n    /// @param _router The address of the Uniswap V3 router.\\n    /// @param _path The path of tokens for the swap.\\n    /// @param _amount The input amount for the swap.\\n    /// @param _amountOutMinimum The minimum amount of output tokens expected from the swap.\\n    /// @return amountOut The amount of output tokens received from the swap.\\n    function swapV3WithDeadline(\\n        address _router,\\n        bytes memory _path,\\n        uint256 _amount,\\n        uint256 _amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n        IUniswapRouterV3WithDeadline.ExactInputParams\\n            memory swapParams = IUniswapRouterV3WithDeadline.ExactInputParams({\\n                path: _path,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: _amount,\\n                amountOutMinimum: _amountOutMinimum\\n            });\\n        return IUniswapRouterV3WithDeadline(_router).exactInput(swapParams);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"AddedRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IStrategyConvex.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"ChargedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantBal\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantBal\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EditedAllowedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantBal\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"MinimumToHarvestChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PanicExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetManagementFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"SetPath\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetPerformanceFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"name\":\"SetRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"}],\"name\":\"SetSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"}],\"name\":\"SetUnirouterV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantBal\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminStructure\",\"outputs\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IConvexBoosterL1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculations\",\"outputs\":[{\"internalType\":\"contract IStrategyCalculationsTricryptoL1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCurveOutput\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useEth\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSlippageCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSlippageUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minWant\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editAllowedDepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmounts\",\"type\":\"uint256[]\"}],\"name\":\"editMinimumTokenHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingToHarvest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_enoughRewards\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"_atLeastOne\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IStrategyConvex.Oracle[]\",\"name\":\"oracles\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"curve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswap\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyConvex.DefaultSlippages\",\"name\":\"defaultSlippages\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IStrategyConvex.RewardInfo\",\"name\":\"rewardInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"adminStructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unirouterV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"performanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managementFeeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct StratFeeManager.CommonAddresses\",\"name\":\"commonAddresses\",\"type\":\"tuple\"}],\"internalType\":\"struct StrategyConvexTricryptoNativeL1.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPanicActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listAllowedDepositTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minimumToHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paths\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultSlippage\",\"type\":\"uint256\"}],\"name\":\"setDefaultSlippageCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultSlippage\",\"type\":\"uint256\"}],\"name\":\"setDefaultSlippageUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setManagementFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IStrategyConvex.Oracle[]\",\"name\":\"_oracles\",\"type\":\"tuple[]\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_path\",\"type\":\"bytes[]\"}],\"name\":\"setPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setPerformanceFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategyCalculationsTricryptoL1\",\"name\":\"_calculations\",\"type\":\"address\"}],\"name\":\"setStrategyCalculations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouterV3\",\"type\":\"address\"}],\"name\":\"setUnirouterV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWantDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouterV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWantDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCurveOutput\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useEth\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StrategyConvexTricryptoNativeL1", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}