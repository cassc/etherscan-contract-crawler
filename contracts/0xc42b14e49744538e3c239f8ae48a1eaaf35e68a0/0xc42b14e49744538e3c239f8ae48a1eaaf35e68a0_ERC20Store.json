{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n/** @title  A contract for generating unique identifiers\r\n  *\r\n  * @notice  A contract that provides a identifier generation scheme,\r\n  * guaranteeing uniqueness across all contracts that inherit from it,\r\n  * as well as unpredictability of future identifiers.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract that\r\n  * implements the callback software pattern for cooperative custodianship.\r\n  *\r\n  * @author  Gemini Trust Company, LLC\r\n  */\r\ncontract LockRequestable {\r\n\r\n    // MEMBERS\r\n    /// @notice  the count of all invocations of `generateLockId`.\r\n    uint256 public lockRequestCount;\r\n\r\n    // CONSTRUCTOR\r\n    function LockRequestable() public {\r\n        lockRequestCount = 0;\r\n    }\r\n\r\n    // FUNCTIONS\r\n    /** @notice  Returns a fresh unique identifier.\r\n      *\r\n      * @dev the generation scheme uses three components.\r\n      * First, the blockhash of the previous block.\r\n      * Second, the deployed address.\r\n      * Third, the next value of the counter.\r\n      * This ensure that identifiers are unique across all contracts\r\n      * following this scheme, and that future identifiers are\r\n      * unpredictable.\r\n      *\r\n      * @return a 32-byte unique identifier.\r\n      */\r\n    function generateLockId() internal returns (bytes32 lockId) {\r\n        return keccak256(block.blockhash(block.number - 1), address(this), ++lockRequestCount);\r\n    }\r\n}\r\n\r\n\r\n/** @title  A contract to inherit upgradeable custodianship.\r\n  *\r\n  * @notice  A contract that provides re-usable code for upgradeable\r\n  * custodianship. That custodian may be an account or another contract.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract\r\n  * requiring a custodian to control some aspect of its functionality.\r\n  * This contract provides the mechanism for that custodianship to be\r\n  * passed from one custodian to the next.\r\n  *\r\n  * @author  Gemini Trust Company, LLC\r\n  */\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending custodian changes.\r\n    struct CustodianChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    /// @dev  The address of the account or contract that acts as the custodian.\r\n    address public custodian;\r\n\r\n    /// @dev  The map of lock ids to pending custodian changes.\r\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n    // CONSTRUCTOR\r\n    function CustodianUpgradeable(\r\n        address _custodian\r\n    )\r\n      LockRequestable()\r\n      public\r\n    {\r\n        custodian = _custodian;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n\r\n    /** @notice  Requests a change of the custodian associated with this contract.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _proposedCustodian  The address of the new custodian.\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n        require(_proposedCustodian != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n            proposedNew: _proposedCustodian\r\n        });\r\n\r\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n    }\r\n\r\n    /** @notice  Confirms a pending change of the custodian associated with this contract.\r\n      *\r\n      * @dev  When called by the current custodian with a lock id associated with a\r\n      * pending custodian change, the `address custodian` member will be updated with the\r\n      * requested address.\r\n      *\r\n      * @param  _lockId  The identifier of a pending change request.\r\n      */\r\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n        custodian = getCustodianChangeReq(_lockId);\r\n\r\n        delete custodianChangeReqs[_lockId];\r\n\r\n        emit CustodianChangeConfirmed(_lockId, custodian);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n\r\n        // reject \u2018null\u2019 results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        require(changeRequest.proposedNew != 0);\r\n\r\n        return changeRequest.proposedNew;\r\n    }\r\n\r\n    /// @dev  Emitted by successful `requestCustodianChange` calls.\r\n    event CustodianChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedCustodian\r\n    );\r\n\r\n    /// @dev Emitted by successful `confirmCustodianChange` calls.\r\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\n\r\n/** @title  A contract to inherit upgradeable token implementations.\r\n  *\r\n  * @notice  A contract that provides re-usable code for upgradeable\r\n  * token implementations. It itself inherits from `CustodianUpgradable`\r\n  * as the upgrade process is controlled by the custodian.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract\r\n  * requiring a reference to the active token implementation, either\r\n  * to delegate calls to it, or authorize calls from it. This contract\r\n  * provides the mechanism for that implementation to be be replaced,\r\n  * which constitutes an implementation upgrade.\r\n  *\r\n  * @author Gemini Trust Company, LLC\r\n  */\r\ncontract ERC20ImplUpgradeable is CustodianUpgradeable  {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending implementation changes.\r\n    struct ImplChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    // @dev  The reference to the active token implementation.\r\n    ERC20Impl public erc20Impl;\r\n\r\n    /// @dev  The map of lock ids to pending implementation changes.\r\n    mapping (bytes32 => ImplChangeRequest) public implChangeReqs;\r\n\r\n    // CONSTRUCTOR\r\n    function ERC20ImplUpgradeable(address _custodian) CustodianUpgradeable(_custodian) public {\r\n        erc20Impl = ERC20Impl(0x0);\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyImpl {\r\n        require(msg.sender == address(erc20Impl));\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n    /** @notice  Requests a change of the active implementation associated\r\n      * with this contract.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _proposedImpl  The address of the new active implementation.\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\r\n        require(_proposedImpl != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        implChangeReqs[lockId] = ImplChangeRequest({\r\n            proposedNew: _proposedImpl\r\n        });\r\n\r\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\r\n    }\r\n\r\n    /** @notice  Confirms a pending change of the active implementation\r\n      * associated with this contract.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending change, the `ERC20Impl erc20Impl` member will be updated\r\n      * with the requested address.\r\n      *\r\n      * @param  _lockId  The identifier of a pending change request.\r\n      */\r\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl = getImplChangeReq(_lockId);\r\n\r\n        delete implChangeReqs[_lockId];\r\n\r\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\r\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\r\n\r\n        // reject \u2018null\u2019 results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        require(changeRequest.proposedNew != address(0));\r\n\r\n        return ERC20Impl(changeRequest.proposedNew);\r\n    }\r\n\r\n    /// @dev  Emitted by successful `requestImplChange` calls.\r\n    event ImplChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedImpl\r\n    );\r\n\r\n    /// @dev Emitted by successful `confirmImplChange` calls.\r\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n  // METHODS\r\n\r\n  // NOTE:\r\n  //   public getter functions are not currently recognised as an\r\n  //   implementation of the matching abstract function by the compiler.\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#name\r\n  // function name() public view returns (string);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol\r\n  // function symbol() public view returns (string);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n  // function decimals() public view returns (uint8);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n  // EVENTS\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/** @title  Public interface to ERC20 compliant token.\r\n  *\r\n  * @notice  This contract is a permanent entry point to an ERC20 compliant\r\n  * system of contracts.\r\n  *\r\n  * @dev  This contract contains no business logic and instead\r\n  * delegates to an instance of ERC20Impl. This contract also has no storage\r\n  * that constitutes the operational state of the token. This contract is\r\n  * upgradeable in the sense that the `custodian` can update the\r\n  * `erc20Impl` address, thus redirecting the delegation of business logic.\r\n  * The `custodian` is also authorized to pass custodianship.\r\n  *\r\n  * @author  Gemini Trust Company, LLC\r\n  */\r\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {\r\n\r\n    // MEMBERS\r\n    /// @notice  Returns the name of the token.\r\n    string public name;\r\n\r\n    /// @notice  Returns the symbol of the token.\r\n    string public symbol;\r\n\r\n    /// @notice  Returns the number of decimals the token uses.\r\n    uint8 public decimals;\r\n\r\n    // CONSTRUCTOR\r\n    function ERC20Proxy(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        address _custodian\r\n    )\r\n        ERC20ImplUpgradeable(_custodian)\r\n        public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (ERC20Interface)\r\n    /** @notice  Returns the total token supply.\r\n      *\r\n      * @return  the total token supply.\r\n      */\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Impl.totalSupply();\r\n    }\r\n\r\n    /** @notice  Returns the account balance of another account with address\r\n      * `_owner`.\r\n      *\r\n      * @return  balance  the balance of account with address `_owner`.\r\n      */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Impl.balanceOf(_owner);\r\n    }\r\n\r\n    /** @dev Internal use only.\r\n      */\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /** @notice  Transfers `_value` amount of tokens to address `_to`.\r\n      *\r\n      * @dev Will fire the `Transfer` event. Will revert if the `_from`\r\n      * account balance does not have enough tokens to spend.\r\n      *\r\n      * @return  success  true if transfer completes.\r\n      */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    /** @notice  Transfers `_value` amount of tokens from address `_from`\r\n      * to address `_to`.\r\n      *\r\n      * @dev  Will fire the `Transfer` event. Will revert unless the `_from`\r\n      * account has deliberately authorized the sender of the message\r\n      * via some mechanism.\r\n      *\r\n      * @return  success  true if transfer completes.\r\n      */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    /** @dev Internal use only.\r\n      */\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    /** @notice  Allows `_spender` to withdraw from your account multiple times,\r\n      * up to the `_value` amount. If this function is called again it\r\n      * overwrites the current allowance with _value.\r\n      *\r\n      * @dev  Will fire the `Approval` event.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /** @notice Increases the amount `_spender` is allowed to withdraw from\r\n      * your account.\r\n      * This function is implemented to avoid the race condition in standard\r\n      * ERC20 contracts surrounding the `approve` method.\r\n      *\r\n      * @dev  Will fire the `Approval` event. This function should be used instead of\r\n      * `approve`.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    /** @notice  Decreases the amount `_spender` is allowed to withdraw from\r\n      * your account. This function is implemented to avoid the race\r\n      * condition in standard ERC20 contracts surrounding the `approve` method.\r\n      *\r\n      * @dev  Will fire the `Approval` event. This function should be used\r\n      * instead of `approve`.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    /** @notice  Returns how much `_spender` is currently allowed to spend from\r\n      * `_owner`'s balance.\r\n      *\r\n      * @return  remaining  the remaining allowance.\r\n      */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Impl.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\n\r\n/** @title  ERC20 compliant token intermediary contract holding core logic.\r\n  *\r\n  * @notice  This contract serves as an intermediary between the exposed ERC20\r\n  * interface in ERC20Proxy and the store of balances in ERC20Store. This\r\n  * contract contains core logic that the proxy can delegate to\r\n  * and that the store is called by.\r\n  *\r\n  * @dev  This contract contains the core logic to implement the\r\n  * ERC20 specification as well as several extensions.\r\n  * 1. Changes to the token supply.\r\n  * 2. Batched transfers.\r\n  * 3. Relative changes to spending approvals.\r\n  * 4. Delegated transfer control ('sweeping').\r\n  *\r\n  * @author  Gemini Trust Company, LLC\r\n  */\r\ncontract ERC20Impl is CustodianUpgradeable {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending increases to the token supply (print).\r\n    struct PendingPrint {\r\n        address receiver;\r\n        uint256 value;\r\n    }\r\n\r\n    // MEMBERS\r\n    /// @dev  The reference to the proxy.\r\n    ERC20Proxy public erc20Proxy;\r\n\r\n    /// @dev  The reference to the store.\r\n    ERC20Store public erc20Store;\r\n\r\n    /// @dev  The sole authorized caller of delegated transfer control ('sweeping').\r\n    address public sweeper;\r\n\r\n    /** @dev  The static message to be signed by an external account that\r\n      * signifies their permission to forward their balance to any arbitrary\r\n      * address. This is used to consolidate the control of all accounts\r\n      * backed by a shared keychain into the control of a single key.\r\n      * Initialized as the concatenation of the address of this contract\r\n      * and the word \"sweep\". This concatenation is done to prevent a replay\r\n      * attack in a subsequent contract, where the sweep message could\r\n      * potentially be replayed to re-enable sweeping ability.\r\n      */\r\n    bytes32 public sweepMsg;\r\n\r\n    /** @dev  The mapping that stores whether the address in question has\r\n      * enabled sweeping its contents to another account or not.\r\n      * If an address maps to \"true\", it has already enabled sweeping,\r\n      * and thus does not need to re-sign the `sweepMsg` to enact the sweep.\r\n      */\r\n    mapping (address => bool) public sweptSet;\r\n\r\n    /// @dev  The map of lock ids to pending token increases.\r\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\r\n\r\n    // CONSTRUCTOR\r\n    function ERC20Impl(\r\n          address _erc20Proxy,\r\n          address _erc20Store,\r\n          address _custodian,\r\n          address _sweeper\r\n    )\r\n        CustodianUpgradeable(_custodian)\r\n        public\r\n    {\r\n        require(_sweeper != 0);\r\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\r\n        erc20Store = ERC20Store(_erc20Store);\r\n\r\n        sweeper = _sweeper;\r\n        sweepMsg = keccak256(address(this), \"sweep\");\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyProxy {\r\n        require(msg.sender == address(erc20Proxy));\r\n        _;\r\n    }\r\n    modifier onlySweeper {\r\n        require(msg.sender == sweeper);\r\n        _;\r\n    }\r\n\r\n\r\n    /** @notice  Core logic of the ERC20 `approve` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has an `approve` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval in proxy.\r\n      */\r\n    function approveWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        erc20Store.setAllowance(_sender, _spender, _value);\r\n        erc20Proxy.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the `increaseApproval` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has an `increaseApproval` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval.\r\n      */\r\n    function increaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance + _addedValue;\r\n\r\n        require(newAllowance >= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the `decreaseApproval` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `decreaseApproval` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval.\r\n      */\r\n    function decreaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n\r\n        require(newAllowance <= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Requests an increase in the token supply, with the newly created\r\n      * tokens to be added to the balance of the specified account.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      * NOTE: printing to the zero address is disallowed.\r\n      *\r\n      * @param  _receiver  The receiving address of the print, if confirmed.\r\n      * @param  _value  The number of tokens to add to the total supply and the\r\n      * balance of the receiving address, if confirmed.\r\n      *\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {\r\n        require(_receiver != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        pendingPrintMap[lockId] = PendingPrint({\r\n            receiver: _receiver,\r\n            value: _value\r\n        });\r\n\r\n        emit PrintingLocked(lockId, _receiver, _value);\r\n    }\r\n\r\n    /** @notice  Confirms a pending increase in the token supply.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending increase, the amount requested to be printed in the print request\r\n      * is printed to the receiving address specified in that same request.\r\n      * NOTE: this function will not execute any print that would overflow the\r\n      * total supply, but it will not revert either.\r\n      *\r\n      * @param  _lockId  The identifier of a pending print request.\r\n      */\r\n    function confirmPrint(bytes32 _lockId) public onlyCustodian {\r\n        PendingPrint storage print = pendingPrintMap[_lockId];\r\n\r\n        // reject \u2018null\u2019 results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        address receiver = print.receiver;\r\n        require (receiver != address(0));\r\n        uint256 value = print.value;\r\n\r\n        delete pendingPrintMap[_lockId];\r\n\r\n        uint256 supply = erc20Store.totalSupply();\r\n        uint256 newSupply = supply + value;\r\n        if (newSupply >= supply) {\r\n          erc20Store.setTotalSupply(newSupply);\r\n          erc20Store.addBalance(receiver, value);\r\n\r\n          emit PrintingConfirmed(_lockId, receiver, value);\r\n          erc20Proxy.emitTransfer(address(0), receiver, value);\r\n        }\r\n    }\r\n\r\n    /** @notice  Burns the specified value from the sender's balance.\r\n      *\r\n      * @dev  Sender's balanced is subtracted by the amount they wish to burn.\r\n      *\r\n      * @param  _value  The amount to burn.\r\n      *\r\n      * @return  success  true if the burn succeeded.\r\n      */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        uint256 balanceOfSender = erc20Store.balances(msg.sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        erc20Store.setBalance(msg.sender, balanceOfSender - _value);\r\n        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\r\n\r\n        erc20Proxy.emitTransfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  A function for a sender to issue multiple transfers to multiple\r\n      * different addresses at once. This function is implemented for gas\r\n      * considerations when someone wishes to transfer, as one transaction is\r\n      * cheaper than issuing several distinct individual `transfer` transactions.\r\n      *\r\n      * @dev  By specifying a set of destination addresses and values, the\r\n      * sender can issue one transaction to transfer multiple amounts to\r\n      * distinct addresses, rather than issuing each as a separate\r\n      * transaction. The `_tos` and `_values` arrays must be equal length, and\r\n      * an index in one array corresponds to the same index in the other array\r\n      * (e.g. `_tos[0]` will receive `_values[0]`, `_tos[1]` will receive\r\n      * `_values[1]`, and so on.)\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _tos  The destination addresses to receive the transfers.\r\n      * @param  _values  The values for each destination address.\r\n      * @return  success  If transfers succeeded.\r\n      */\r\n    function batchTransfer(address[] _tos, uint256[] _values) public returns (bool success) {\r\n        require(_tos.length == _values.length);\r\n\r\n        uint256 numTransfers = _tos.length;\r\n        uint256 senderBalance = erc20Store.balances(msg.sender);\r\n\r\n        for (uint256 i = 0; i < numTransfers; i++) {\r\n          address to = _tos[i];\r\n          require(to != address(0));\r\n          uint256 v = _values[i];\r\n          require(senderBalance >= v);\r\n\r\n          if (msg.sender != to) {\r\n            senderBalance -= v;\r\n            erc20Store.addBalance(to, v);\r\n          }\r\n          erc20Proxy.emitTransfer(msg.sender, to, v);\r\n        }\r\n\r\n        erc20Store.setBalance(msg.sender, senderBalance);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Enables the delegation of transfer control for many\r\n      * accounts to the sweeper account, transferring any balances\r\n      * as well to the given destination.\r\n      *\r\n      * @dev  An account delegates transfer control by signing the\r\n      * value of `sweepMsg`. The sweeper account is the only authorized\r\n      * caller of this function, so it must relay signatures on behalf\r\n      * of accounts that delegate transfer control to it. Enabling\r\n      * delegation is idempotent and permanent. If the account has a\r\n      * balance at the time of enabling delegation, its balance is\r\n      * also transfered to the given destination account `_to`.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _vs  The array of recovery byte components of the ECDSA signatures.\r\n      * @param  _rs  The array of 'R' components of the ECDSA signatures.\r\n      * @param  _ss  The array of 'S' components of the ECDSA signatures.\r\n      * @param  _to  The destination for swept balances.\r\n      */\r\n    function enableSweep(uint8[] _vs, bytes32[] _rs, bytes32[] _ss, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\r\n\r\n        uint256 numSignatures = _vs.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<numSignatures; ++i) {\r\n          address from = ecrecover(sweepMsg, _vs[i], _rs[i], _ss[i]);\r\n\r\n          // ecrecover returns 0 on malformed input\r\n          if (from != address(0)) {\r\n            sweptSet[from] = true;\r\n\r\n            uint256 fromBalance = erc20Store.balances(from);\r\n\r\n            if (fromBalance > 0) {\r\n              sweptBalance += fromBalance;\r\n\r\n              erc20Store.setBalance(from, 0);\r\n\r\n              erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n          erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    /** @notice  For accounts that have delegated, transfer control\r\n      * to the sweeper, this function transfers their balances to the given\r\n      * destination.\r\n      *\r\n      * @dev The sweeper account is the only authorized caller of\r\n      * this function. This function accepts an array of addresses to have their\r\n      * balances transferred for gas efficiency purposes.\r\n      * NOTE: any address for an account that has not been previously enabled\r\n      * will be ignored.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _froms  The addresses to have their balances swept.\r\n      * @param  _to  The destination address of all these transfers.\r\n      */\r\n    function replaySweep(address[] _froms, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        uint256 lenFroms = _froms.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<lenFroms; ++i) {\r\n            address from = _froms[i];\r\n\r\n            if (sweptSet[from]) {\r\n                uint256 fromBalance = erc20Store.balances(from);\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    erc20Store.setBalance(from, 0);\r\n\r\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n            erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    /** @notice  Core logic of the ERC20 `transferFrom` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `transferFrom` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the transfer in proxy.\r\n      */\r\n    function transferFromWithSender(\r\n        address _sender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\r\n\r\n        uint256 balanceOfFrom = erc20Store.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\r\n        require(_value <= senderAllowance);\r\n\r\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\r\n\r\n        erc20Proxy.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the ERC20 `transfer` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `transfer` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the transfer in proxy.\r\n      */\r\n    function transferWithSender(\r\n        address _sender,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\r\n\r\n        uint256 balanceOfSender = erc20Store.balances(_sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Proxy.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // METHODS (ERC20 sub interface impl.)\r\n    /// @notice  Core logic of the ERC20 `totalSupply` function.\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Store.totalSupply();\r\n    }\r\n\r\n    /// @notice  Core logic of the ERC20 `balanceOf` function.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Store.balances(_owner);\r\n    }\r\n\r\n    /// @notice  Core logic of the ERC20 `allowance` function.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Store.allowed(_owner, _spender);\r\n    }\r\n\r\n    // EVENTS\r\n    /// @dev  Emitted by successful `requestPrint` calls.\r\n    event PrintingLocked(bytes32 _lockId, address _receiver, uint256 _value);\r\n    /// @dev Emitted by successful `confirmPrint` calls.\r\n    event PrintingConfirmed(bytes32 _lockId, address _receiver, uint256 _value);\r\n}\r\n\r\n\r\n/** @title  ERC20 compliant token balance store.\r\n  *\r\n  * @notice  This contract serves as the store of balances, allowances, and\r\n  * supply for the ERC20 compliant token. No business logic exists here.\r\n  *\r\n  * @dev  This contract contains no business logic and instead\r\n  * is the final destination for any change in balances, allowances, or token\r\n  * supply. This contract is upgradeable in the sense that its custodian can\r\n  * update the `erc20Impl` address, thus redirecting the source of logic that\r\n  * determines how the balances will be updated.\r\n  *\r\n  * @author  Gemini Trust Company, LLC\r\n  */\r\ncontract ERC20Store is ERC20ImplUpgradeable {\r\n\r\n    // MEMBERS\r\n    /// @dev  The total token supply.\r\n    uint256 public totalSupply;\r\n\r\n    /// @dev  The mapping of balances.\r\n    mapping (address => uint256) public balances;\r\n\r\n    /// @dev  The mapping of allowances.\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // CONSTRUCTOR\r\n    function ERC20Store(address _custodian) ERC20ImplUpgradeable(_custodian) public {\r\n        totalSupply = 0;\r\n    }\r\n\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (ERC20 Ledger)\r\n\r\n    /** @notice  The function to set the total supply of tokens.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update the total supply. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param _newTotalSupply the value to set as the new total supply\r\n      */\r\n    function setTotalSupply(\r\n        uint256 _newTotalSupply\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n    /** @notice  Sets how much `_owner` allows `_spender` to transfer on behalf\r\n      * of `_owner`.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update spending allowances. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param  _owner  The account that will allow an on-behalf-of spend.\r\n      * @param  _spender  The account that will spend on behalf of the owner.\r\n      * @param  _value  The limit of what can be spent.\r\n      */\r\n    function setAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    /** @notice  Sets the balance of `_owner` to `_newBalance`.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update balances. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param  _owner  The account that will hold a new balance.\r\n      * @param  _newBalance  The balance to set.\r\n      */\r\n    function setBalance(\r\n        address _owner,\r\n        uint256 _newBalance\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n    /** @notice Adds `_balanceIncrease` to `_owner`'s balance.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update balances. The only authorized caller\r\n      * is the active implementation.\r\n      * WARNING: the caller is responsible for preventing overflow.\r\n      *\r\n      * @param  _owner  The account that will hold a new balance.\r\n      * @param  _balanceIncrease  The balance to add.\r\n      */\r\n    function addBalance(\r\n        address _owner,\r\n        uint256 _balanceIncrease\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = balances[_owner] + _balanceIncrease;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_balanceIncrease\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Impl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"requestImplChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"implChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]", "ContractName": "ERC20Store", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dffc66191baf5047866033d2fe400907af4038a8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f71c041a7e2e1982066e42161140427038f4d8e4375836a5f2c4a739656a73e0"}