{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ethereans/factories/impl/DelegationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../model/IDelegationFactory.sol\\\";\\nimport \\\"./EthereansFactory.sol\\\";\\nimport \\\"../../../base/model/IProposalsManager.sol\\\";\\nimport { ReflectionUtilities, BehaviorUtilities, Uint256Utilities, AddressUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\nimport { Grimoire as BaseGrimoire, Getters } from \\\"../../../base/lib/KnowledgeBase.sol\\\";\\nimport { Getters as ExternalGetters } from \\\"../../../ext/lib/KnowledgeBase.sol\\\";\\nimport \\\"../../../ext/subDAO/model/ISubDAO.sol\\\";\\nimport \\\"../../../base/model/IProposalsManager.sol\\\";\\nimport \\\"../../../core/model/IOrganization.sol\\\";\\nimport \\\"../../../base/model/IStateManager.sol\\\";\\nimport { State } from \\\"../../../base/lib/KnowledgeBase.sol\\\";\\nimport \\\"@ethereansos/items-v2/contracts/projection/IItemProjection.sol\\\";\\nimport \\\"@ethereansos/items-v2/contracts/projection/factory/model/IItemProjectionFactory.sol\\\";\\nimport \\\"../model/IProposalModelsFactory.sol\\\";\\n\\ncontract DelegationFactory is EthereansFactory, IDelegationFactory {\\n    using ReflectionUtilities for address;\\n    using Getters for IOrganization;\\n    using ExternalGetters for IOrganization;\\n    using State for IStateManager;\\n    using Uint256Utilities for uint256;\\n    using AddressUtilities for address;\\n\\n    uint256 public constant MANDATORY_COMPONENTS = 3;\\n    //ProposalsManager true\\n    //TreasuryManager false\\n    //DelegationTokensManager true\\n\\n    uint256 public constant PROPOSALS_MANAGER_POSITION = 0;\\n\\n    address[] private _utilityModels;\\n    bytes32[] private _utilityModelKeys;\\n    bool[] private _utilityModelsActive;\\n\\n    uint256 public presetArrayMaxSize;\\n\\n    address public itemProjectionFactoryAddress;\\n    address public mainInterface;\\n    address public projectionAddress;\\n    bytes32 public collectionId;\\n    ISubDAO.SubDAOProposalModel[] private _proposalModels;\\n\\n    address public proposalModelsFactory;\\n\\n    uint256 private constant BY_SPECIFIC_ADDRESS_POSITION = 0;\\n    uint256 private constant BLOCK_LENGTH_POSITION = 2;\\n    uint256 private constant HARD_CAP_POSITION = 3;\\n    uint256 private constant VALIDATION_BOMB_POSITION = 4;\\n    uint256 private constant QUORUM_POSITION = 5;\\n\\n    constructor(bytes memory lazyInitData) EthereansFactory(lazyInitData) {\\n    }\\n\\n    function _ethosFactoryLazyInit(bytes memory lazyInitData) internal override returns(bytes memory lazyInitResponse) {\\n        (proposalModelsFactory, _utilityModels, _utilityModelKeys, _utilityModelsActive, lazyInitResponse) = abi.decode(lazyInitData, (address, address[], bytes32[], bool[], bytes));\\n        ISubDAO.SubDAOProposalModel[] memory proposalModels;\\n        Header memory collectionHeader;\\n        (itemProjectionFactoryAddress, collectionHeader, presetArrayMaxSize, proposalModels) = abi.decode(lazyInitResponse, (address, Header, uint256, ISubDAO.SubDAOProposalModel[]));\\n        for(uint256 i = 0; i < proposalModels.length; i++) {\\n            _proposalModels.push(proposalModels[i]);\\n        }\\n        _deployCollection(collectionHeader);\\n        lazyInitResponse = \\\"\\\";\\n    }\\n\\n    function mintItems(CreateItem[] memory items) external returns(uint256[] memory itemIds) {\\n        require(deployer[msg.sender] != address(0), \\\"unauthorized\\\");\\n        for(uint256 i = 0; i < items.length; i++) {\\n            items[i].collectionId = collectionId;\\n        }\\n        return IItemProjection(projectionAddress).mintItems(items);\\n    }\\n\\n    function data() external override view returns(address[] memory utilityModels, bytes32[] memory utilitiyModelKeys, bool[] memory utilitiyModelActive, string memory proposalUri) {\\n        return (_utilityModels, _utilityModelKeys, _utilityModelsActive, \\\"\\\");\\n    }\\n\\n    function deploy(bytes calldata deployData) external payable override(Factory, IFactory) virtual returns(address productAddress, bytes memory productInitResponse) {\\n        (OrganizationDeployData memory organizationDeployData) = abi.decode(deployData, (OrganizationDeployData));\\n\\n        deployer[productAddress = modelAddress.clone()] = msg.sender;\\n\\n        uint256 componentsLength = MANDATORY_COMPONENTS;\\n        IOrganization.Component[] memory components = new IOrganization.Component[](componentsLength);\\n\\n        for(uint256 i = 0; i < MANDATORY_COMPONENTS; i++) {\\n            components[i] = _createOrganizationComponent(i, productAddress, i == PROPOSALS_MANAGER_POSITION ? abi.encode(true, organizationDeployData.mandatoryComponentsDeployData[i]) : organizationDeployData.mandatoryComponentsDeployData[i]);\\n        }\\n\\n        productInitResponse = _emitDeploy(productAddress, organizationDeployData.uri, components);\\n\\n        require(ILazyInitCapableElement(productAddress).initializer() == address(this));\\n    }\\n\\n    address[] private _validationAddresses;\\n    address[] private _canTerminateAddresses;\\n\\n    function createNewRules(\\n        address delegationAddress,\\n        uint256 quorumPercentage,\\n        uint256 validationBomb,\\n        uint256 blockLength,\\n        uint256 hardCapPercentage\\n    ) public override returns (address[] memory validationAddresses, address[] memory canTerminateAddresses) {\\n        require(deployer[delegationAddress] != address(0), \\\"unknown delegation\\\");\\n\\n        _addTo(QUORUM_POSITION, quorumPercentage, true, true);\\n        if(validationBomb > 0) {\\n            _addTo(VALIDATION_BOMB_POSITION, validationBomb, false, true);\\n        }\\n\\n        if(blockLength > 0) {\\n            _addTo(BLOCK_LENGTH_POSITION, blockLength, false, false);\\n        }\\n\\n        if(hardCapPercentage > 0) {\\n            _addTo(HARD_CAP_POSITION, hardCapPercentage, true, false);\\n        }\\n\\n        validationAddresses = _validationAddresses;\\n        canTerminateAddresses = _canTerminateAddresses;\\n\\n        require(validationAddresses.length > 0, \\\"No validators\\\");\\n        require(canTerminateAddresses.length > 0, \\\"No canTerminates\\\");\\n\\n        delete _validationAddresses;\\n        delete _canTerminateAddresses;\\n    }\\n\\n    function initializeProposalModels(\\n        address delegationAddress,\\n        address host,\\n        uint256 quorumPercentage,\\n        uint256 validationBomb,\\n        uint256 blockLength,\\n        uint256 hardCapPercentage\\n        ) external override {\\n\\n        require(deployer[delegationAddress] == msg.sender, \\\"unauthorized\\\");\\n        (address creationRules,) = IProposalModelsFactory(proposalModelsFactory).deploy(abi.encode(BY_SPECIFIC_ADDRESS_POSITION, abi.encode(host, true)));\\n\\n        (address[] memory validationAddresses, address[] memory canTerminateAddresses) = createNewRules(\\n            delegationAddress,\\n            quorumPercentage,\\n            validationBomb,\\n            blockLength,\\n            hardCapPercentage\\n        );\\n\\n        ISubDAO.SubDAOProposalModel[] memory proposalModels = _proposalModels;\\n        proposalModels[0].creationRules = creationRules;//Attach-Detach\\n\\n        proposalModels[1].creationRules = creationRules;//Change URI\\n\\n        proposalModels[2].creationRules = creationRules;//Change Rules\\n\\n        proposalModels[3].creationRules = creationRules;//Transfer\\n        proposalModels[3].validatorsAddresses[0] = validationAddresses;\\n        proposalModels[3].canTerminateAddresses[0] = canTerminateAddresses;\\n\\n        proposalModels[4].creationRules = creationRules;//Vote\\n        proposalModels[4].validatorsAddresses[0] = validationAddresses;\\n        proposalModels[4].canTerminateAddresses[0] = canTerminateAddresses;\\n\\n        ISubDAO(delegationAddress).setInitialProposalModels(proposalModels);\\n    }\\n\\n    function _addTo(uint256 position, uint256 value, bool valueIsPercentage, bool validators) private {\\n        bytes memory init = valueIsPercentage ? abi.encode(value, true) : abi.encode(value);\\n        (address model,) = IProposalModelsFactory(proposalModelsFactory).deploy(abi.encode(position, init));\\n        if(validators) {\\n            _validationAddresses.push(model);\\n        } else {\\n            _canTerminateAddresses.push(model);\\n        }\\n    }\\n\\n    function _emitDeploy(address productAddress, string memory uri, IOrganization.Component[] memory components) private returns(bytes memory productInitResponse) {\\n        emit Deployed(modelAddress, productAddress, msg.sender, productInitResponse = ILazyInitCapableElement(productAddress).lazyInit(abi.encode(address(0), abi.encode(uri, dynamicUriResolver, abi.encode(false, presetArrayMaxSize, abi.encode(new ISubDAO.SubDAOProposalModel[](0), abi.encode(components)))))));\\n    }\\n\\n    function proposeToAttachOrDetach(address delegationAddress, address delegationsManagerAddress, bool attach) public returns(bytes32 proposalId) {\\n        require(deployer[delegationAddress] != address(0), \\\"Unrecognized\\\");\\n\\n        IProposalsManager.ProposalCode[] memory proposalCodes = new IProposalsManager.ProposalCode[](1);\\n        proposalCodes[0] = IProposalsManager.ProposalCode(address(0), abi.encode(delegationsManagerAddress, attach));\\n\\n        IProposalsManager.ProposalCodes[] memory proposalCodesArray = new IProposalsManager.ProposalCodes[](1);\\n        proposalCodesArray[0] = IProposalsManager.ProposalCodes(proposalCodes, true);\\n\\n        return IOrganization(delegationAddress).proposalsManager().batchCreate(proposalCodesArray)[0];\\n    }\\n\\n    function _createOrganizationComponent(uint256 index, address productAddress, bytes memory lazyInitData) private returns(IOrganization.Component memory organizationComponent) {\\n        ILazyInitCapableElement((organizationComponent = IOrganization.Component(_utilityModelKeys[index], _utilityModels[index].clone(), _utilityModelsActive[index], true)).location).lazyInit(abi.encode(productAddress, lazyInitData));\\n        deployer[organizationComponent.location] = msg.sender;\\n    }\\n\\n    function _deployCollection(Header memory collectionHeader) private {\\n        mainInterface = IItemProjectionFactory(itemProjectionFactoryAddress).mainInterface();\\n\\n        collectionHeader.host = address(0);\\n\\n        bytes memory deployData = abi.encode((uint256(1)).asSingletonArray(), address(this).asSingletonArray());\\n        deployData = abi.encode(bytes32(0), collectionHeader, new CreateItem[](0), deployData);\\n        deployData = abi.encode(address(0), deployData);\\n        deployData = abi.encode(0, deployData);\\n        (projectionAddress,) = IItemProjectionFactory(itemProjectionFactoryAddress).deploy(deployData);\\n        collectionId = IItemProjection(projectionAddress).collectionId();\\n    }\\n}\"\r\n    },\r\n    \"contracts/ethereans/factories/model/IProposalModelsFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@ethereansos/swissknife/contracts/factory/impl/Factory.sol\\\";\\n\\ninterface IProposalModelsFactory is IFactory {\\n\\n    event Singleton(address indexed productAddress);\\n\\n    function deploySingleton(bytes calldata code, bytes calldata deployData) external returns(address deployedAddress, bytes memory deployLazyInitResponse);\\n\\n    function addModel(bytes calldata code, string calldata uri) external returns(address modelAddress, uint256 positionIndex);\\n\\n    function models() external view returns(address[] memory addresses, string[] memory uris);\\n\\n    function singletons() external view returns(address[] memory addresses);\\n\\n    function setModelUris(uint256[] memory indices, string[] memory uris) external;\\n\\n    function model(uint256 i) external view returns(address modelAddress, string memory modelUri);\\n\\n    function singleton(uint256 i) external view returns(address singletonAddress);\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/projection/factory/model/IItemProjectionFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@ethereansos/swissknife/contracts/factory/impl/Factory.sol\\\";\\n\\ninterface IItemProjectionFactory is IFactory {\\n\\n    function mainInterface() external view returns(address);\\n\\n    function deploySingleton(bytes calldata code, bytes calldata deployData) external returns(address deployedAddress, bytes memory deployLazyInitResponse);\\n\\n    function addModel(bytes calldata code) external returns(address modelAddress, uint256 positionIndex);\\n\\n    function models() external view returns(address[] memory);\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/projection/IItemProjection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../model/Item.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IItemProjection is Item, ILazyInitCapableElement {\\n\\n    function mainInterface() external view returns(address);\\n\\n    function collectionId() external view returns(bytes32);\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n    function itemPlainUri(uint256 itemId) external view returns(string memory);\\n    function setHeader(Header calldata value) external returns(Header memory oldValue);\\n\\n    function toInteroperableInterfaceAmount(uint256 amount, uint256 itemId, address account) external view returns(uint256);\\n    function toMainInterfaceAmount(uint256 amount, uint256 itemId) external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/base/lib/KnowledgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../core/model/IOrganization.sol\\\";\\nimport \\\"../model/IMicroservicesManager.sol\\\";\\nimport \\\"../model/IStateManager.sol\\\";\\nimport \\\"../model/IProposalsManager.sol\\\";\\nimport \\\"../model/ITreasuryManager.sol\\\";\\nimport { ReflectionUtilities, BytesUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\nlibrary Grimoire {\\n    bytes32 constant public COMPONENT_KEY_TREASURY_MANAGER = 0xcfe1633df53a0649d88d788961f26058c5e7a0b5644675f19f67bb2975827ba2;\\n    bytes32 constant public COMPONENT_KEY_STATE_MANAGER = 0xd1d09e8f5708558865b8acd5f13c69781ae600e42dbc7f52b8ef1b9e33dbcd36;\\n    bytes32 constant public COMPONENT_KEY_MICROSERVICES_MANAGER = 0x0aef4c8f864010d3e1817691f51ade95a646fffafd7f3df9cb8200def342cfd7;\\n    bytes32 constant public COMPONENT_KEY_PROPOSALS_MANAGER = 0xa504406933af7ca120d20b97dfc79ea9788beb3c4d3ac1ff9a2c292b2c28e0cc;\\n}\\n\\nlibrary Getters {\\n\\n    function treasuryManager(IOrganization organization) internal view returns(ITreasuryManager) {\\n        return ITreasuryManager(organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER));\\n    }\\n\\n    function stateManager(IOrganization organization) internal view returns(IStateManager) {\\n        return IStateManager(organization.get(Grimoire.COMPONENT_KEY_STATE_MANAGER));\\n    }\\n\\n    function microservicesManager(IOrganization organization) internal view returns(IMicroservicesManager) {\\n        return IMicroservicesManager(organization.get(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER));\\n    }\\n\\n    function proposalsManager(IOrganization organization) internal view returns(IProposalsManager) {\\n        return IProposalsManager(organization.get(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER));\\n    }\\n}\\n\\nlibrary Setters {\\n\\n    function replaceTreasuryManager(IOrganization organization, address newComponentAddress) internal returns(ITreasuryManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = ITreasuryManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_TREASURY_MANAGER, newComponentAddress, false, true)));\\n    }\\n\\n    function replaceStateManager(IOrganization organization, address newComponentAddress) internal returns(IStateManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IStateManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_STATE_MANAGER, newComponentAddress, false ,true)));\\n    }\\n\\n    function replaceMicroservicesManager(IOrganization organization, address newComponentAddress) internal returns(IMicroservicesManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IMicroservicesManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER, newComponentAddress, true, true)));\\n    }\\n\\n    function replaceProposalsManager(IOrganization organization, address newComponentAddress) internal returns(IProposalsManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IProposalsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER, newComponentAddress, true, true)));\\n    }\\n}\\n\\nlibrary Treasury {\\n    using ReflectionUtilities for address;\\n\\n    function storeETH(IOrganization organization, uint256 value) internal {\\n        if(value != 0) {\\n            organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER).submit(value, \\\"\\\");\\n        }\\n    }\\n\\n    function callTemporaryFunction(ITreasuryManager treasuryManager, bytes4 selector, address subject, uint256 value, bytes memory data) internal returns(bytes memory response) {\\n        address oldServer = treasuryManager.setAdditionalFunction(selector, subject, false);\\n        response = address(treasuryManager).submit(value, abi.encodePacked(selector, data));\\n        treasuryManager.setAdditionalFunction(selector, oldServer, false);\\n    }\\n}\\n\\nlibrary State {\\n    using BytesUtilities for bytes;\\n\\n    bytes32 constant public ENTRY_TYPE_ADDRESS = 0x421683f821a0574472445355be6d2b769119e8515f8376a1d7878523dfdecf7b;\\n    bytes32 constant public ENTRY_TYPE_ADDRESS_ARRAY = 0x23d8ff3dc5aed4a634bcf123581c95e70c60ac0e5246916790aef6d4451ff4c1;\\n    bytes32 constant public ENTRY_TYPE_BOOL = 0xc1053bdab4a5cf55238b667c39826bbb11a58be126010e7db397c1b67c24271b;\\n    bytes32 constant public ENTRY_TYPE_BOOL_ARRAY = 0x8761250c4d2c463ce51f91f5d2c2508fa9142f8a42aa9f30b965213bf3e6c2ac;\\n    bytes32 constant public ENTRY_TYPE_BYTES = 0xb963e9b45d014edd60cff22ec9ad383335bbc3f827be2aee8e291972b0fadcf2;\\n    bytes32 constant public ENTRY_TYPE_BYTES_ARRAY = 0x084b42f8a8730b98eb0305d92103d9107363192bb66162064a34dc5716ebe1a0;\\n    bytes32 constant public ENTRY_TYPE_STRING = 0x97fc46276c172633607a331542609db1e3da793fca183d594ed5a61803a10792;\\n    bytes32 constant public ENTRY_TYPE_STRING_ARRAY = 0xa227fd7a847724343a7dda3598ee0fb2d551b151b73e4a741067596daa6f5658;\\n    bytes32 constant public ENTRY_TYPE_UINT256 = 0xec13d6d12b88433319b64e1065a96ea19cd330ef6603f5f6fb685dde3959a320;\\n    bytes32 constant public ENTRY_TYPE_UINT256_ARRAY = 0xc1b76e99a35aa41ed28bbbd9e6c7228760c87b410ebac94fa6431da9b592411f;\\n\\n    function getAddress(IStateManager stateManager, string memory name) internal view returns(address) {\\n        return stateManager.get(name).value.asAddress();\\n    }\\n\\n    function setAddress(IStateManager stateManager, string memory name, address val) internal returns(address oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS, abi.encodePacked(val))).asAddress();\\n    }\\n\\n    function getAddressArray(IStateManager stateManager, string memory name) internal view returns(address[] memory) {\\n        return stateManager.get(name).value.asAddressArray();\\n    }\\n\\n    function setAddressArray(IStateManager stateManager, string memory name, address[] memory val) internal returns(address[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS_ARRAY, abi.encode(val))).asAddressArray();\\n    }\\n\\n    function getBool(IStateManager stateManager, string memory name) internal view returns(bool) {\\n        return stateManager.get(name).value.asBool();\\n    }\\n\\n    function setBool(IStateManager stateManager, string memory name, bool val) internal returns(bool oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL, abi.encode(val ? 1 : 0))).asBool();\\n    }\\n\\n    function getBoolArray(IStateManager stateManager, string memory name) internal view returns(bool[] memory) {\\n        return stateManager.get(name).value.asBoolArray();\\n    }\\n\\n    function setBoolArray(IStateManager stateManager, string memory name, bool[] memory val) internal returns(bool[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL_ARRAY, abi.encode(val))).asBoolArray();\\n    }\\n\\n    function getBytes(IStateManager stateManager, string memory name) internal view returns(bytes memory) {\\n        return stateManager.get(name).value;\\n    }\\n\\n    function setBytes(IStateManager stateManager, string memory name, bytes memory val) internal returns(bytes memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES, val));\\n    }\\n\\n    function getBytesArray(IStateManager stateManager, string memory name) internal view returns(bytes[] memory) {\\n        return stateManager.get(name).value.asBytesArray();\\n    }\\n\\n    function setBytesArray(IStateManager stateManager, string memory name, bytes[] memory val) internal returns(bytes[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES_ARRAY, abi.encode(val))).asBytesArray();\\n    }\\n\\n    function getString(IStateManager stateManager, string memory name) internal view returns(string memory) {\\n        return string(stateManager.get(name).value);\\n    }\\n\\n    function setString(IStateManager stateManager, string memory name, string memory val) internal returns(string memory oldValue) {\\n        return string(stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING, bytes(val))));\\n    }\\n\\n    function getStringArray(IStateManager stateManager, string memory name) internal view returns(string[] memory) {\\n        return stateManager.get(name).value.asStringArray();\\n    }\\n\\n    function setStringArray(IStateManager stateManager, string memory name, string[] memory val) internal returns(string[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING_ARRAY, abi.encode(val))).asStringArray();\\n    }\\n\\n    function getUint256(IStateManager stateManager, string memory name) internal view returns(uint256) {\\n        return stateManager.get(name).value.asUint256();\\n    }\\n\\n    function setUint256(IStateManager stateManager, string memory name, uint256 val) internal returns(uint256 oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256, abi.encode(val))).asUint256();\\n    }\\n\\n    function getUint256Array(IStateManager stateManager, string memory name) internal view returns(uint256[] memory) {\\n        return stateManager.get(name).value.asUint256Array();\\n    }\\n\\n    function setUint256Array(IStateManager stateManager, string memory name, uint256[] memory val) internal returns(uint256[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256_ARRAY, abi.encode(val))).asUint256Array();\\n    }\\n}\"\r\n    },\r\n    \"contracts/base/model/IStateManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IStateManager is ILazyInitCapableElement {\\n\\n    struct StateEntry {\\n        string key;\\n        bytes32 entryType;\\n        bytes value;\\n    }\\n\\n    function size() external view returns (uint256);\\n    function all() external view returns (StateEntry[] memory);\\n    function partialList(uint256 start, uint256 offset) external view returns (StateEntry[] memory);\\n    function list(string[] calldata keys) external view returns (StateEntry[] memory);\\n    function listByIndices(uint256[] calldata indices) external view returns (StateEntry[] memory);\\n\\n    function exists(string calldata key) external view returns(bool result, uint256 index);\\n\\n    function get(string calldata key) external view returns(StateEntry memory);\\n    function getByIndex(uint256 index) external view returns(StateEntry memory);\\n\\n    function set(StateEntry calldata newValue) external returns(bytes memory replacedValue);\\n    function batchSet(StateEntry[] calldata newValues) external returns(bytes[] memory replacedValues);\\n\\n    function remove(string calldata key) external returns(bytes32 removedType, bytes memory removedValue);\\n    function batchRemove(string[] calldata keys) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\\n    function removeByIndices(uint256[] calldata indices) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\\n}\"\r\n    },\r\n    \"contracts/core/model/IOrganization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IOrganization is IDynamicMetadataCapableElement {\\n\\n    struct Component {\\n        bytes32 key;\\n        address location;\\n        bool active;\\n        bool log;\\n    }\\n\\n    function keyOf(address componentAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\\n\\n    function get(bytes32 key) external view returns(address componentAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\\n    function isActive(address subject) external view returns(bool);\\n    function keyIsActive(bytes32 key) external view returns(bool);\\n\\n    function set(Component calldata) external returns(address replacedComponentAddress);\\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\\n\\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n}\"\r\n    },\r\n    \"contracts/base/model/IProposalsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\\n\\n    struct ProposalCode {\\n        address location;\\n        bytes bytecode;\\n    }\\n\\n    struct ProposalCodes {\\n        ProposalCode[] codes;\\n        bool alsoTerminate;\\n    }\\n\\n    struct Proposal {\\n        address proposer;\\n        address[] codeSequence;\\n        uint256 creationBlock;\\n        uint256 accept;\\n        uint256 refuse;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n        bool validationPassed;\\n        uint256 terminationBlock;\\n        bytes votingTokens;\\n    }\\n\\n    struct ProposalConfiguration {\\n        address[] collections;\\n        uint256[] objectIds;\\n        uint256[] weights;\\n        address creationRules;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n    }\\n\\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\\n\\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\\n\\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\\n    function weight(bytes32 code) external view returns(uint256);\\n\\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\\n    function batchVote(bytes[] calldata data) external payable;\\n\\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\\n\\n    function terminate(bytes32[] calldata proposalIds) external;\\n\\n    function configuration() external view returns(ProposalConfiguration memory);\\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\\n\\n    function lastProposalId() external view returns(bytes32);\\n\\n    function lastVoteBlock(address voter) external view returns (uint256);\\n\\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\\n\\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n\\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n}\\n\\ninterface IProposalChecker {\\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\\n}\\n\\ninterface IExternalProposalsManagerCommands {\\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\\n}\"\r\n    },\r\n    \"contracts/ext/subDAO/model/ISubDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../../core/model/IOrganization.sol\\\";\\nimport \\\"../../../base/model/IProposalsManager.sol\\\";\\n\\ninterface ISubDAO is IOrganization, IExternalProposalsManagerCommands {\\n\\n    event Proposed(uint256 indexed modelIndex, uint256 indexed presetIndex, bytes32 indexed proposalId);\\n\\n    struct SubDAOProposalModel {\\n        address source;\\n        string uri;\\n        bool isPreset;\\n        bytes[] presetValues;\\n        bytes32[] presetProposals;\\n        address creationRules;\\n        address triggeringRules;\\n        uint256 votingRulesIndex;\\n        address[][] canTerminateAddresses;\\n        address[][] validatorsAddresses;\\n    }\\n\\n    function presetArrayMaxSize() external view returns(uint256);\\n\\n    function proposalModels() external view returns(SubDAOProposalModel[] memory);\\n    function setProposalModels(SubDAOProposalModel[] calldata newValue) external returns(SubDAOProposalModel[] memory oldValue);\\n\\n    function setInitialProposalModels(SubDAOProposalModel[] calldata newValue) external;\\n\\n    function setVotingRules(uint256 modelIndex, uint256 votingRulesIndex) external returns(address[] memory oldCanTerminateAddresses, address[] memory oldValidatorsAddresses);\\n    function setCreationAndTriggeringRules(uint256 modelIndex, address newCreationRules, address newTriggeringRules) external returns(address oldCreationRules, address oldTriggeringRules);\\n    function setPresetValues(uint256 modelIndex, bytes[] calldata newPresetValues) external returns(bytes[] memory oldPresetValues, bytes32[] memory deprecatedProposalIds);\\n\\n    function finalizeInit(address firstHost) external;\\n\\n    function isPersistent(bytes32 proposalId) external view returns(bool result, bool isDeprecated);\\n}\"\r\n    },\r\n    \"contracts/ext/lib/KnowledgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../core/model/IOrganization.sol\\\";\\nimport \\\"../subDAOsManager/model/ISubDAOsManager.sol\\\";\\nimport \\\"../delegationsManager/model/IDelegationsManager.sol\\\";\\nimport \\\"../treasurySplitterManager/model/ITreasurySplitterManager.sol\\\";\\nimport \\\"../investmentsManager/model/IInvestmentsManager.sol\\\";\\nimport \\\"../delegation/model/IDelegationTokensManager.sol\\\";\\n\\nlibrary Grimoire {\\n    bytes32 constant public COMPONENT_KEY_TREASURY_SPLITTER_MANAGER = 0x87a92f6bd20613c184485be8eadb46851dd4294a8359f902606085b8be6e7ae6;\\n    bytes32 constant public COMPONENT_KEY_SUBDAOS_MANAGER = 0x5b87d6e94145c2e242653a71b7d439a3638a93c3f0d32e1ea876f9fb1feb53e2;\\n    bytes32 constant public COMPONENT_KEY_DELEGATIONS_MANAGER = 0x49b87f4ee20613c184485be8eadb46851dd4294a8359f902606085b8be6e7ae6;\\n    bytes32 constant public COMPONENT_KEY_INVESTMENTS_MANAGER = 0x4f3ad97a91794a00945c0ead3983f793d34044c6300048d8b4ef95636edd234b;\\n}\\n\\nlibrary DelegationGrimoire {\\n    bytes32 constant public COMPONENT_KEY_TOKENS_MANAGER = 0x62b56c3ab20613c184485be8eadb46851dd4294a8359f902606085b8be9f7dc5;\\n}\\n\\nlibrary Getters {\\n    function treasurySplitterManager(IOrganization organization) internal view returns(ITreasurySplitterManager) {\\n        return ITreasurySplitterManager(organization.get(Grimoire.COMPONENT_KEY_TREASURY_SPLITTER_MANAGER));\\n    }\\n\\n    function subDAOsManager(IOrganization organization) internal view returns(ISubDAOsManager) {\\n        return ISubDAOsManager(organization.get(Grimoire.COMPONENT_KEY_SUBDAOS_MANAGER));\\n    }\\n\\n    function delegationsManager(IOrganization organization) internal view returns(IDelegationsManager) {\\n        return IDelegationsManager(organization.get(Grimoire.COMPONENT_KEY_DELEGATIONS_MANAGER));\\n    }\\n\\n    function investmentsManager(IOrganization organization) internal view returns(IInvestmentsManager) {\\n        return IInvestmentsManager(organization.get(Grimoire.COMPONENT_KEY_INVESTMENTS_MANAGER));\\n    }\\n}\\n\\nlibrary Setters {\\n    function replaceTreasurySplitterManager(IOrganization organization, address newComponentAddress) internal returns(ITreasurySplitterManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = ITreasurySplitterManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_TREASURY_SPLITTER_MANAGER, newComponentAddress, false, true)));\\n    }\\n\\n    function replaceSubDAOsManager(IOrganization organization, address newComponentAddress) internal returns(ISubDAOsManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = ISubDAOsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_SUBDAOS_MANAGER, newComponentAddress, true, true)));\\n    }\\n\\n    function replaceDelegationsManager(IOrganization organization, address newComponentAddress) internal returns(IDelegationsManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IDelegationsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_DELEGATIONS_MANAGER, newComponentAddress, false, true)));\\n    }\\n\\n    function replaceInvestmentsManager(IOrganization organization, address newComponentAddress) internal returns(IInvestmentsManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IInvestmentsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_INVESTMENTS_MANAGER, newComponentAddress, false, true)));\\n    }\\n}\\n\\nlibrary DelegationGetters {\\n    function tokensManager(IOrganization organization) internal view returns(IDelegationTokensManager) {\\n        return IDelegationTokensManager(organization.get(DelegationGrimoire.COMPONENT_KEY_TOKENS_MANAGER));\\n    }\\n}\\n\\nlibrary DelegationUtilities {\\n    using DelegationGetters for IOrganization;\\n\\n    function extractVotingTokens(address delegationsManagerAddress, address delegationAddress) internal view returns (bytes memory) {\\n        IDelegationsManager delegationsManager = IDelegationsManager(delegationsManagerAddress);\\n        (bool exists,,) = delegationsManager.exists(delegationAddress);\\n        require(exists, \\\"wrong address\\\");\\n        (address collection, uint256 tokenId) = delegationsManager.supportedToken();\\n        (collection, tokenId) = IOrganization(delegationAddress).tokensManager().wrapped(collection, tokenId, delegationsManagerAddress);\\n        require(tokenId != 0, \\\"Wrap tokens first\\\");\\n        address[] memory collections = new address[](1);\\n        uint256[] memory tokenIds = new uint256[](1);\\n        uint256[] memory weights = new uint256[](1);\\n        collections[0] = collection;\\n        tokenIds[0] = tokenId;\\n        weights[0] = 1;\\n        return abi.encode(collections, tokenIds, weights);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary BehaviorUtilities {\\n\\n    function randomKey(uint256 i) internal view returns (bytes32) {\\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\\n    }\\n\\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\\n        if(arraySize != 0 && start < arraySize && offset != 0) {\\n            uint256 length = start + offset;\\n            if(start < (length = length > arraySize ? arraySize : length)) {\\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\\n            }\\n        }\\n    }\\n}\\n\\nlibrary ReflectionUtilities {\\n\\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.staticcall(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.call{value : value}(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function isContract(address subject) internal view returns (bool) {\\n        if(subject == address(0)) {\\n            return false;\\n        }\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(subject)\\n        }\\n        return codeLength > 0;\\n    }\\n\\n    function clone(address originalContract) internal returns(address copyContract) {\\n        assembly {\\n            mstore(\\n                0,\\n                or(\\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\\n                    mul(originalContract, 0x1000000000000000000)\\n                )\\n            )\\n            copyContract := create(0, 0, 32)\\n            switch extcodesize(copyContract)\\n                case 0 {\\n                    invalid()\\n                }\\n        }\\n    }\\n}\\n\\nlibrary BytesUtilities {\\n\\n    bytes private constant ALPHABET = \\\"0123456789abcdef\\\";\\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function asAddress(bytes memory b) internal pure returns(address) {\\n        if(b.length == 0) {\\n            return address(0);\\n        }\\n        if(b.length == 20) {\\n            address addr;\\n            assembly {\\n                addr := mload(add(b, 20))\\n            }\\n            return addr;\\n        }\\n        return abi.decode(b, (address));\\n    }\\n\\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (address[]));\\n        }\\n    }\\n\\n    function asBool(bytes memory bs) internal pure returns(bool) {\\n        return asUint256(bs) != 0;\\n    }\\n\\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bool[]));\\n        }\\n    }\\n\\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bytes[]));\\n        }\\n    }\\n\\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string));\\n        }\\n    }\\n\\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string[]));\\n        }\\n    }\\n\\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\\n        if (bs.length >= 32) {\\n            assembly {\\n                x := mload(add(bs, add(0x20, 0)))\\n            }\\n        }\\n    }\\n\\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (uint256[]));\\n        }\\n    }\\n\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\\n        array = new bytes[](1);\\n        array[0] = a;\\n    }\\n\\n    function toBase64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        string memory table = BASE64_ENCODER_DATA;\\n\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, encodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary StringUtilities {\\n\\n    bytes1 private constant CHAR_0 = bytes1('0');\\n    bytes1 private constant CHAR_A = bytes1('A');\\n    bytes1 private constant CHAR_a = bytes1('a');\\n    bytes1 private constant CHAR_f = bytes1('f');\\n\\n    bytes  internal constant BASE64_DECODER_DATA = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                                   hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                                   hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                                   hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function isEmpty(string memory test) internal pure returns (bool) {\\n        return equals(test, \\\"\\\");\\n    }\\n\\n    function equals(string memory a, string memory b) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toLowerCase(string memory str) internal pure returns(string memory) {\\n        bytes memory bStr = bytes(str);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\\n        }\\n        return string(bStr);\\n    }\\n\\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\\n        bytes memory data = abi.encodePacked(str);\\n        if(data.length == 0 || data[0] != \\\"0\\\" || (data[1] != \\\"x\\\" && data[1] != \\\"X\\\")) {\\n            return \\\"\\\";\\n        }\\n        uint256 start = 2;\\n        toDecode = new bytes((data.length - 2) / 2);\\n\\n        for(uint256 i = 0; i < toDecode.length; i++) {\\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\\n        }\\n    }\\n\\n    function toBase64(string memory input) internal pure returns(string memory) {\\n        return BytesUtilities.toBase64(abi.encodePacked(input));\\n    }\\n\\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        bytes memory table = BASE64_DECODER_DATA;\\n\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            mstore(result, decodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\\n        bytes1 charc = bytes1(c);\\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\\n    }\\n}\\n\\nlibrary Uint256Utilities {\\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\\n        array = new uint256[](1);\\n        array[0] = n;\\n    }\\n\\n    function toHex(uint256 _i) internal pure returns (string memory) {\\n        return BytesUtilities.toString(abi.encodePacked(_i));\\n    }\\n\\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\\n        for(uint256 i = 0; i < arr.length; i++) {\\n            result += arr[i];\\n        }\\n    }\\n}\\n\\nlibrary AddressUtilities {\\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\\n        array = new address[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(address _addr) internal pure returns (string memory) {\\n        return _addr == address(0) ? \\\"0x0000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(_addr));\\n    }\\n}\\n\\nlibrary Bytes32Utilities {\\n\\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\\n        array = new bytes32[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(bytes32 bt) internal pure returns (string memory) {\\n        return bt == bytes32(0) ?  \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(bt));\\n    }\\n}\\n\\nlibrary TransferUtilities {\\n    using ReflectionUtilities for address;\\n\\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return account.balance;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\\n    }\\n\\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return 0;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\\n    }\\n\\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"contracts/ethereans/factories/impl/EthereansFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/IEthereansFactory.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/factory/impl/Factory.sol\\\";\\nimport \\\"../../factoryOfFactories/model/IFactoryOfFactories.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { TransferUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nabstract contract EthereansFactory is Factory, IEthereansFactory {\\n    using TransferUtilities for address;\\n\\n    uint256 internal _feePercentageForTransacted;\\n    address internal _feeReceiver;\\n    address internal _tokenToTransferOrBurnAddressInCreation;\\n    uint256 internal _transferOrBurnAmountInCreation;\\n    address internal _transferOrBurnReceiverInCreation;\\n    address internal _tokenToTransferOrBurnAddressInApplication;\\n    uint256 internal _transferOrBurnAmountInApplication;\\n    address internal _transferOrBurnReceiverInApplication;\\n\\n    constructor(bytes memory lazyInitData) Factory(lazyInitData) {\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    function _factoryLazyInit(bytes memory initData) internal override virtual returns (bytes memory factoryLazyInitResponse) {\\n        EthereansFactoryInitializer memory ethereansFactoryInitializer;\\n        (ethereansFactoryInitializer) = abi.decode(initData, (EthereansFactoryInitializer));\\n        _feePercentageForTransacted = ethereansFactoryInitializer.feePercentageForTransacted;\\n        _feeReceiver = ethereansFactoryInitializer.feeReceiver;\\n        _tokenToTransferOrBurnAddressInCreation = ethereansFactoryInitializer.tokenToTransferOrBurnAddressInCreation;\\n        _transferOrBurnAmountInCreation = ethereansFactoryInitializer.transferOrBurnAmountInCreation;\\n        _transferOrBurnReceiverInCreation = ethereansFactoryInitializer.transferOrBurnReceiverInCreation;\\n        _tokenToTransferOrBurnAddressInApplication = ethereansFactoryInitializer.tokenToTransferOrBurnAddressInApplication;\\n        _transferOrBurnAmountInApplication = ethereansFactoryInitializer.transferOrBurnAmountInApplication;\\n        _transferOrBurnReceiverInApplication = ethereansFactoryInitializer.transferOrBurnReceiverInApplication;\\n        factoryLazyInitResponse = _ethosFactoryLazyInit(ethereansFactoryInitializer.factoryLazyInitData);\\n    }\\n\\n    function feeInfo() public override view returns(address operator, uint256 feePercentageForTransacted, address feeReceiver, address tokenToTransferOrBurnAddressInCreation, uint256 transferOrBurnAmountInCreation, address transferOrBurnReceiverInCreation, address tokenToTransferOrBurnAddressInApplication, uint256 transferOrBurnAmountInApplication, address transferOrBurnReceiverInApplication) {\\n        operator = initializer;\\n        (feePercentageForTransacted, feeReceiver, tokenToTransferOrBurnAddressInCreation, transferOrBurnAmountInCreation, transferOrBurnReceiverInCreation, tokenToTransferOrBurnAddressInApplication, transferOrBurnAmountInApplication, transferOrBurnReceiverInApplication) = _realFeeInfo();\\n    }\\n\\n    function payFee(address sender, address tokenAddress, uint256 value, bytes calldata permitSignature) external override payable returns (uint256 feePaid) {\\n        (uint256 feePercentageForTransacted, address feeReceiver, , , , , uint256 transferOrBurnAmountInApplication, ) = _realFeeInfo();\\n        if(feePercentageForTransacted != 0) {\\n            (uint256 feeSentOrBurnt, uint256 fofFeePaid) = IFactoryOfFactories(initializer).payFee{value : tokenAddress == address(0) ? value : 0}(sender, tokenAddress, value, permitSignature, feePercentageForTransacted, feeReceiver);\\n            feePaid = feeSentOrBurnt + fofFeePaid;\\n            _feePaid(sender, tokenAddress, value, feeSentOrBurnt, fofFeePaid, feePercentageForTransacted, feeReceiver);\\n        } else {\\n            require(transferOrBurnAmountInApplication == 0, \\\"zero fees\\\");\\n        }\\n    }\\n\\n    function _feePaid(address sender, address tokenAddress, uint256 value, uint256 feeSentOrBurnt, uint256 feePaid, uint256 feePercentageForTransacted, address feeReceiver) internal virtual {\\n    }\\n\\n    function burnOrTransferToken(address sender, bytes calldata permitSignature) external payable override returns(uint256 amountTransferedOrBurnt) {\\n        (uint256 feePercentageForTransacted, , , , , address tokenToTransferOrBurnAddressInApplication, uint256 transferOrBurnAmountInApplication, address transferOrBurnReceiverInApplication) = _realFeeInfo();\\n        if(transferOrBurnAmountInApplication != 0) {\\n            (uint256 feeSentOrBurnt, uint256 fofAmountTransferedOrBurnt) = IFactoryOfFactories(initializer).burnOrTransferTokenAmount{value : tokenToTransferOrBurnAddressInApplication == address(0) ? transferOrBurnAmountInApplication : 0}(sender, tokenToTransferOrBurnAddressInApplication, transferOrBurnAmountInApplication, permitSignature, transferOrBurnReceiverInApplication);\\n            amountTransferedOrBurnt = feeSentOrBurnt + fofAmountTransferedOrBurnt;\\n            _amountTransferedOrBurnt(sender, feeSentOrBurnt, fofAmountTransferedOrBurnt, tokenToTransferOrBurnAddressInApplication, transferOrBurnAmountInApplication, transferOrBurnReceiverInApplication);\\n        } else {\\n            require(feePercentageForTransacted == 0, \\\"zero amount\\\");\\n        }\\n    }\\n\\n    function _amountTransferedOrBurnt(address sender, uint256 feeSentOrBurnt, uint256 amountTransferedOrBurnt, address tokenToTransferOrBurnAddressInApplication, uint256 transferOrBurnAmountInApplication, address transferOrBurnReceiverInApplication) internal virtual {\\n    }\\n\\n    function _burnOrTransferTokenAtCreation(address sender, bytes memory permitSignature) internal returns(uint256 amountTransferedOrBurnt) {\\n        (, , address tokenToTransferOrBurnAddressInCreation, uint256 transferOrBurnAmountInCreation, address transferOrBurnReceiverInCreation, , , ) = _realFeeInfo();\\n        if(transferOrBurnAmountInCreation != 0) {\\n            (uint256 feeSentOrBurnt, uint256 fofAmountTransferedOrBurnt) = IFactoryOfFactories(initializer).burnOrTransferTokenAmount{value : tokenToTransferOrBurnAddressInCreation == address(0) ? transferOrBurnAmountInCreation : 0}(sender, tokenToTransferOrBurnAddressInCreation, transferOrBurnAmountInCreation, permitSignature, transferOrBurnReceiverInCreation);\\n            amountTransferedOrBurnt = feeSentOrBurnt + fofAmountTransferedOrBurnt;\\n            _amountTransferedOrBurntAtCreation(sender, feeSentOrBurnt, fofAmountTransferedOrBurnt, tokenToTransferOrBurnAddressInCreation, transferOrBurnAmountInCreation, transferOrBurnReceiverInCreation);\\n        }\\n    }\\n\\n    function _amountTransferedOrBurntAtCreation(address sender, uint256 feeSentOrBurnt, uint256 amountTransferedOrBurnt, address tokenToTransferOrBurnAddressInCreation, uint256 transferOrBurnAmountInCreation, address transferOrBurnReceiverInCreation) internal virtual {\\n    }\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4 selector, bytes calldata, uint256) internal override pure returns (bool, bool) {\\n        if(selector == this.setModelAddress.selector || selector == this.setDynamicUriResolver.selector) {\\n            return (true, false);\\n        }\\n        return (false, false);\\n    }\\n\\n    function _realFeeInfo() internal virtual view returns(uint256 feePercentageForTransacted, address feeReceiver, address tokenToTransferOrBurnAddressInCreation, uint256 transferOrBurnAmountInCreation, address transferOrBurnReceiverInCreation, address tokenToTransferOrBurnAddressInApplication, uint256 transferOrBurnAmountInApplication, address transferOrBurnReceiverInApplication) {\\n        return (_feePercentageForTransacted, _feeReceiver, _tokenToTransferOrBurnAddressInCreation, _transferOrBurnAmountInCreation, _transferOrBurnReceiverInCreation, _tokenToTransferOrBurnAddressInApplication, _transferOrBurnAmountInApplication, _transferOrBurnReceiverInApplication);\\n    }\\n\\n    function _ethosFactoryLazyInit(bytes memory lazyInitData) internal virtual returns(bytes memory lazyInitResponse);\\n}\"\r\n    },\r\n    \"contracts/ethereans/factories/model/IDelegationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IOrganizationFactory.sol\\\";\\nimport { IDelegationRulesChanger } from \\\"../../../ext/delegation/impl/DelegationProposals.sol\\\";\\n\\ninterface IDelegationFactory is IOrganizationFactory, IDelegationRulesChanger {\\n\\n    function initializeProposalModels(\\n        address delegationAddress,\\n        address host,\\n        uint256 quorum,\\n        uint256 validationBomb,\\n        uint256 blockLength,\\n        uint256 hardCap) external;\\n}\"\r\n    },\r\n    \"contracts/ext/delegation/model/IDelegationTokensManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IDelegationTokensManager is ILazyInitCapableElement, IERC1155Receiver {\\n\\n    event Wrapped(address sourceAddress, uint256 sourceObjectId, address indexed sourceDelegationsManagerAddress, uint256 indexed wrappedObjectId);\\n\\n    function itemMainInterfaceAddress() external view returns(address);\\n    function projectionAddress() external view returns(address);\\n    function collectionId() external view returns(bytes32);\\n    function ticker() external view returns(string memory);\\n\\n    function wrap(address sourceDelegationsManagerAddress, bytes memory permitSignature, uint256 amount, address receiver) payable external returns(uint256 wrappedObjectId);\\n\\n    function wrapped(address sourceCollection, uint256 sourceObjectId, address sourceDelegationsManagerAddress) external view returns(address wrappedCollection, uint256 wrappedObjectId);\\n    function source(uint256 wrappedObjectId) external view returns(address sourceCollectionAddress, uint256 sourceObjectId, address sourceDelegationsManagerAddress);\\n}\"\r\n    },\r\n    \"contracts/ext/investmentsManager/model/IInvestmentsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@ethereansos/covenants/contracts/presto/IPrestoUniV3.sol\\\";\\n\\ninterface IInvestmentsManager is ILazyInitCapableElement {\\n\\n    function ONE_HUNDRED() external pure returns(uint256);\\n\\n    function refundETHReceiver() external view returns(bytes32 key, address receiverAddress);\\n\\n    function executorRewardPercentage() external view returns(uint256);\\n\\n    function prestoAddress() external view returns(address prestoAddress);\\n\\n    function tokenFromETHToBurn() external view returns(address addr);\\n\\n    function tokensFromETH() external view returns(address[] memory addresses);\\n    function setTokensFromETH(address[] calldata addresses) external returns(address[] memory oldAddresses);\\n\\n    function swapFromETH(PrestoOperation[] calldata tokensFromETHData, PrestoOperation calldata tokenFromETHToBurnData, address executorRewardReceiver) external returns (uint256[] memory tokenAmounts, uint256 tokenFromETHToBurnAmount, uint256 executorReward);\\n\\n    function lastSwapToETHBlock() external view returns (uint256);\\n\\n    function swapToETHInterval() external view returns (uint256);\\n\\n    function nextSwapToETHBlock() external view returns (uint256);\\n\\n    function tokensToETH() external view returns(address[] memory addresses, uint256[] memory percentages);\\n    function setTokensToETH(address[] calldata addresses, uint256[] calldata percentages) external returns(address[] memory oldAddresses, uint256[] memory oldPercentages);\\n\\n    function swapToETH(PrestoOperation[] calldata tokensToETHData, address executorRewardReceiver) external returns (uint256[] memory executorRewards, uint256[] memory ethAmounts);\\n}\"\r\n    },\r\n    \"contracts/ext/treasurySplitterManager/model/ITreasurySplitterManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface ITreasurySplitterManager is ILazyInitCapableElement {\\n\\n    event Splitted(bytes32 indexed subDAO, address indexed receiver, uint256 amount);\\n\\n    function ONE_HUNDRED() external pure returns(uint256);\\n\\n    function lastSplitBlock() external view returns (uint256);\\n\\n    function splitInterval() external view returns (uint256);\\n\\n    function nextSplitBlock() external view returns (uint256);\\n\\n    function executorRewardPercentage() external view returns(uint256);\\n\\n    function flushExecutorRewardPercentage() external view returns(uint256);\\n\\n    function receiversAndPercentages() external view returns (bytes32[] memory keys, address[] memory addresses, uint256[] memory percentages);\\n\\n    function flushReceiver() external view returns(bytes32 key, address addr);\\n\\n    function flushERC20Tokens(address[] calldata tokenAddresses, address executorRewardReceiver) external;\\n\\n    function splitTreasury(address executorRewardReceiver) external;\\n}\"\r\n    },\r\n    \"contracts/ext/delegationsManager/model/IDelegationsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IDelegationsManager is ILazyInitCapableElement {\\n\\n    event DelegationSet(address indexed delegationAddress, address indexed treasuryAddress);\\n    event SupportedToken(address indexed collectionAddress, uint256 indexed objectId);\\n    event Factory(address indexed factory, bool indexed allowed);\\n\\n    struct DelegationData {\\n        address location;\\n        address treasury;\\n    }\\n\\n    function split(address executorRewardReceiver) external;\\n\\n    function supportedToken() external view returns(address collection, uint256 objectId);\\n    function setSupportedToken(address collection, uint256 tokenId) external;\\n\\n    function maxSize() external view returns(uint256);\\n    function setMaxSize(uint256 newValue) external returns (uint256 oldValue);\\n\\n    function size() external view returns (uint256);\\n    function list() external view returns (DelegationData[] memory);\\n    function partialList(uint256 start, uint256 offset) external view returns (DelegationData[] memory);\\n    function listByAddresses(address[] calldata delegationAddresses) external view returns (DelegationData[] memory);\\n    function listByIndices(uint256[] calldata indices) external view returns (DelegationData[] memory);\\n\\n    function exists(address delegationAddress) external view returns(bool result, uint256 index, address treasuryOf);\\n    function treasuryOf(address delegationAddress) external view returns(address treasuryAddress);\\n\\n    function get(address delegationAddress) external view returns(DelegationData memory);\\n    function getByIndex(uint256 index) external view returns(DelegationData memory);\\n\\n    function set() external;\\n\\n    function remove(address[] calldata delegationAddresses) external returns(DelegationData[] memory removedDelegations);\\n    function removeAll() external;\\n\\n    function executorRewardPercentage() external view returns(uint256);\\n\\n    function getSplit(address executorRewardReceiver) external view returns (address[] memory receivers, uint256[] memory values);\\n    function getSituation() external view returns(address[] memory treasuries, uint256[] memory treasuryPercentages);\\n\\n    function factoryIsAllowed(address factoryAddress) external view returns(bool);\\n    function setFactoriesAllowed(address[] memory factoryAddresses, bool[] memory allowed) external;\\n\\n    function isBanned(address productAddress) external view returns(bool);\\n    function ban(address[] memory productAddresses) external;\\n\\n    function isValid(address delegationAddress) external view returns(bool);\\n\\n    event PaidFor(address indexed delegationAddress, address indexed from, address indexed retriever, uint256 amount);\\n\\n    function paidFor(address delegationAddress, address retriever) external view returns(uint256 totalPaid, uint256 retrieverPaid);\\n    function payFor(address delegationAddress, uint256 amount, bytes memory permitSignature, address retriever) external payable;\\n    function retirePayment(address delegationAddress, address receiver, bytes memory data) external;\\n    function attachInsurance() external view returns (uint256);\\n    function setAttachInsurance(uint256 value) external returns (uint256 oldValue);\\n}\"\r\n    },\r\n    \"contracts/ext/subDAOsManager/model/ISubDAOsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface ISubDAOsManager is ILazyInitCapableElement {\\n\\n    struct SubDAOEntry {\\n        bytes32 key;\\n        address location;\\n        address newHost;\\n    }\\n\\n    function keyOf(address subdaoAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory subdaosAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory subdaosAddresses);\\n\\n    function get(bytes32 key) external view returns(address subdaoAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory subdaosAddresses);\\n    function exists(address subject) external view returns(bool);\\n    function keyExists(bytes32 key) external view returns(bool);\\n\\n    function set(bytes32 key, address location, address newHost) external returns(address replacedSubdaoAddress);\\n    function batchSet(SubDAOEntry[] calldata) external returns (address[] memory replacedSubdaoAddresses);\\n\\n    function submit(bytes32 key, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n\\n    event SubDAOSet(bytes32 indexed key, address indexed from, address indexed to);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/factory/impl/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/IFactory.sol\\\";\\nimport \\\"../../dynamicMetadata/impl/DynamicMetadataCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\ncontract Factory is IFactory, DynamicMetadataCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override modelAddress;\\n    mapping(address => address) public override deployer;\\n\\n    constructor(bytes memory lazyInitData) DynamicMetadataCapableElement(lazyInitData) {\\n    }\\n\\n    function _dynamicMetadataElementLazyInit(bytes memory lazyInitData) internal override returns (bytes memory lazyInitResponse) {\\n        require(modelAddress == address(0), \\\"init\\\");\\n        (modelAddress, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        lazyInitResponse = _factoryLazyInit(lazyInitResponse);\\n    }\\n\\n    function _dynamicMetadataElementSupportsInterface(bytes4 interfaceId) override internal view returns(bool) {\\n        return\\n            interfaceId == type(IFactory).interfaceId ||\\n            interfaceId == this.modelAddress.selector ||\\n            interfaceId == this.setModelAddress.selector ||\\n            interfaceId == this.deployer.selector ||\\n            interfaceId == this.deploy.selector ||\\n            _factorySupportsInterface(interfaceId);\\n    }\\n\\n    function setModelAddress(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = modelAddress;\\n        modelAddress = newValue;\\n    }\\n\\n    function deploy(bytes calldata deployData) external payable override virtual returns(address deployedAddress, bytes memory deployedLazyInitResponse) {\\n        deployer[deployedAddress = modelAddress.clone()] = msg.sender;\\n        emit Deployed(modelAddress, deployedAddress, msg.sender, deployedLazyInitResponse = ILazyInitCapableElement(deployedAddress).lazyInit(deployData));\\n        require(ILazyInitCapableElement(deployedAddress).initializer() == address(this));\\n    }\\n\\n    function _factoryLazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _factorySupportsInterface(bytes4 interfaceId) internal virtual view returns(bool) {\\n    }\\n}\"\r\n    },\r\n    \"contracts/ext/delegation/impl/DelegationProposals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../delegationsManager/model/IDelegationsManager.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/factory/model/IFactory.sol\\\";\\nimport \\\"../../../base/model/IProposalsManager.sol\\\";\\nimport \\\"../../../base/model/ITreasuryManager.sol\\\";\\nimport \\\"../../../core/model/IOrganization.sol\\\";\\nimport { Getters } from \\\"../../../base/lib/KnowledgeBase.sol\\\";\\nimport { Uint256Utilities, AddressUtilities, TransferUtilities, Bytes32Utilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\nimport \\\"../../../ext/subDAO/model/ISubDAO.sol\\\";\\nimport { Getters as ExternalGetters, DelegationUtilities } from \\\"../../../ext/lib/KnowledgeBase.sol\\\";\\nimport \\\"../../../ethereans/factories/model/IDelegationFactory.sol\\\";\\n\\ncontract DelegationsManagerAttacherProposal {\\n    using AddressUtilities for address;\\n\\n    string public uri;\\n    address public delegationsManagerAddress;\\n\\n    string public additionalUri;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        (additionalUri, delegationsManagerAddress) = abi.decode(lazyInitResponseData, (string, address));\\n\\n        lazyInitResponseData = \\\"\\\";\\n    }\\n\\n    function execute(bytes32) external {\\n        IOrganization organization = IOrganization(ILazyInitCapableElement(msg.sender).host());\\n        organization.submit(delegationsManagerAddress, abi.encodeWithSignature(\\\"set()\\\"), address(0));\\n    }\\n}\\n\\ncontract DelegationTransferManagerProposal {\\n    string public uri;\\n    address public treasuryManagerAddress;\\n    ITreasuryManager.TransferEntry[] public entries;\\n\\n    string public additionalUri;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        ITreasuryManager.TransferEntry[] memory _entries;\\n        (additionalUri, treasuryManagerAddress, _entries) = abi.decode(lazyInitResponseData, (string, address, ITreasuryManager.TransferEntry[]));\\n        for(uint256 i = 0; i < _entries.length; i++) {\\n            entries.push(_entries[i]);\\n        }\\n\\n        require(ILazyInitCapableElement(treasuryManagerAddress).host() == msg.sender, \\\"Wrong Treasury Manager\\\");\\n\\n        lazyInitResponseData = DelegationUtilities.extractVotingTokens(ILazyInitCapableElement(treasuryManagerAddress).initializer(), msg.sender);\\n    }\\n\\n    function execute(bytes32) external {\\n        ITreasuryManager(treasuryManagerAddress).batchTransfer(entries);\\n    }\\n\\n    function allEntries() external view returns(ITreasuryManager.TransferEntry[] memory) {\\n        return entries;\\n    }\\n}\\n\\ncontract VoteProposal {\\n    using Getters for IOrganization;\\n    using ExternalGetters for IOrganization;\\n    using Uint256Utilities for uint256;\\n    using TransferUtilities for address;\\n    using Bytes32Utilities for bytes32;\\n\\n    string public uri;\\n    address public proposalsManagerAddress;\\n    bytes32 public organizationProposalID;\\n    address public collectionAddress;\\n    uint256 public objectId;\\n    uint256 public accept;\\n    uint256 public refuse;\\n    bool public vote;\\n    bool public afterTermination;\\n\\n    bool public _voting;\\n\\n    string public additionalUri;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        _lazyInit1(lazyInitResponseData);\\n\\n        lazyInitResponseData = DelegationUtilities.extractVotingTokens(address(IOrganization(ILazyInitCapableElement(proposalsManagerAddress).host()).delegationsManager()), msg.sender);\\n    }\\n\\n    function _lazyInit1(bytes memory lazyInitResponseData) private {\\n        (proposalsManagerAddress, organizationProposalID, collectionAddress, lazyInitResponseData) = abi.decode(lazyInitResponseData, (address, bytes32, address, bytes));\\n        _lazyInit2(lazyInitResponseData);\\n    }\\n\\n    function _lazyInit2(bytes memory lazyInitResponseData) private {\\n        (objectId, accept, refuse, vote, afterTermination, additionalUri) = abi.decode(lazyInitResponseData, (uint256, uint256, uint256, bool, bool, string));\\n    }\\n\\n    receive() external payable {\\n        require(_voting, \\\"not voting\\\");\\n    }\\n\\n    function execute(bytes32) external {\\n        ITreasuryManager treasuryManager = IOrganization(ILazyInitCapableElement(msg.sender).host()).treasuryManager();\\n        return vote ? _vote(treasuryManager) : _withdraw(treasuryManager);\\n    }\\n\\n    function _vote(ITreasuryManager treasuryManager) private {\\n        bool hasERC20 = collectionAddress == address(0);\\n        ITreasuryManager.TransferEntry[] memory transferEntries = new ITreasuryManager.TransferEntry[](1);\\n        transferEntries[0] = ITreasuryManager.TransferEntry({\\n            token : hasERC20 ? address(uint160(objectId)) : collectionAddress,\\n            objectIds : hasERC20 ? new uint256[](0) : objectId.asSingletonArray(),\\n            values : (accept + refuse).asSingletonArray(),\\n            receiver : hasERC20 ? address(this) : proposalsManagerAddress,\\n            safe : false,\\n            batch : false,\\n            withData : false,\\n            data : hasERC20 ? bytes(\\\"\\\") : abi.encode(organizationProposalID, accept, refuse, address(treasuryManager), false)\\n        });\\n        _voting = hasERC20;\\n        treasuryManager.batchTransfer(transferEntries);\\n        _voting = false;\\n        IProposalsManager proposalsManager = IProposalsManager(proposalsManagerAddress);\\n        if(hasERC20) {\\n            address erc20TokenAddress = address(uint160(objectId));\\n            if(erc20TokenAddress != address(0)) {\\n                erc20TokenAddress.safeApprove(proposalsManagerAddress, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            }\\n            proposalsManager.vote{value : erc20TokenAddress != address(0) ? 0 : (accept + refuse)}(erc20TokenAddress, \\\"\\\", organizationProposalID, accept, refuse, address(treasuryManager), false);\\n        }\\n    }\\n\\n    function _withdraw(ITreasuryManager treasuryManager) private {\\n        treasuryManager.submit(proposalsManagerAddress, abi.encodeWithSelector(IProposalsManager(proposalsManagerAddress).withdrawAll.selector, organizationProposalID.asSingletonArray(), address(treasuryManager), afterTermination), address(treasuryManager));\\n    }\\n}\\n\\ninterface IDelegationRulesChanger {\\n\\n    function createNewRules(\\n        address delegationAddress,\\n        uint256 quorum,\\n        uint256 validationBomb,\\n        uint256 blockLength,\\n        uint256 hardCap) external returns (address[] memory validationAddresses, address[] memory canTerminateAddresses);\\n}\\n\\ncontract DelegationChangeRulesProposal {\\n    string public uri;\\n\\n    uint256 public quorum;\\n\\n    uint256 public validationBomb;\\n\\n    uint256 public blockLength;\\n\\n    uint256 public hardCap;\\n\\n    string public additionalUri;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        (additionalUri, quorum, validationBomb, blockLength, hardCap) = abi.decode(lazyInitResponseData, (string, uint256, uint256, uint256, uint256));\\n\\n        require(blockLength > 0 || hardCap > 0, \\\"No termination rules\\\");\\n\\n        lazyInitResponseData = \\\"\\\";\\n    }\\n\\n    function execute(bytes32) external {\\n        ISubDAO subDAO = ISubDAO(ILazyInitCapableElement(msg.sender).host());\\n\\n        (address[] memory validators, address[] memory canTerminates) = IDelegationRulesChanger(subDAO.initializer()).createNewRules(address(subDAO), quorum, validationBomb, blockLength, hardCap);\\n\\n        ISubDAO.SubDAOProposalModel[] memory proposalModels = subDAO.proposalModels();\\n\\n        ISubDAO.SubDAOProposalModel memory prop = proposalModels[proposalModels.length - 2];\\n        prop.validatorsAddresses[0] = validators;\\n        prop.canTerminateAddresses[0] = canTerminates;\\n        proposalModels[proposalModels.length - 2] = prop;\\n\\n        prop = proposalModels[proposalModels.length - 1];\\n        prop.validatorsAddresses[0] = validators;\\n        prop.canTerminateAddresses[0] = canTerminates;\\n        proposalModels[proposalModels.length - 1] = prop;\\n\\n        subDAO.setProposalModels(proposalModels);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ethereans/factories/model/IOrganizationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IEthereansFactory.sol\\\";\\n\\ninterface IOrganizationFactory is IEthereansFactory {\\n\\n    struct OrganizationDeployData {\\n        string uri;\\n        bytes[] mandatoryComponentsDeployData;\\n        uint256[] additionalComponents;\\n        bytes[] additionalComponentsDeployData;\\n        bytes[] specialComponentsData;\\n        bytes specificOrganizationData;\\n    }\\n\\n    function data() external view returns(address[] memory utilityModels, bytes32[] memory utilitiyModelKeys, bool[] memory utilitiyModelActive, string memory proposalUri);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ethereans/factoryOfFactories/model/IFactoryOfFactories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IFactoryOfFactories {\\n\\n    function size() external view returns (uint256);\\n    function all() external view returns (address[] memory hosts, address[][] memory factoryLists);\\n    function partialList(uint256 start, uint256 offset) external view returns (address[] memory hosts, address[][] memory factoryLists);\\n\\n    function get(uint256 index) external view returns(address host, address[] memory factoryList);\\n\\n    function create(address[] calldata hosts, bytes[][] calldata factoryBytecodes) external returns (address[][] memory factoryLists, uint256[] memory listPositions);\\n    function setFactoryListsMetadata(uint256[] calldata listPositions, address[] calldata newHosts) external returns (address[] memory replacedHosts);\\n    event FactoryList(uint256 indexed listPosition, address indexed fromHost, address indexed toHost);\\n\\n    function add(uint256[] calldata listPositions, bytes[][] calldata factoryBytecodes) external returns(address[][] memory factoryLists, uint256[][] memory factoryPositions);\\n    event FactoryAdded(uint256 indexed listPosition, address indexed host, address indexed factoryAddress, uint256 factoryPosition);\\n\\n    function payFee(address sender, address tokenAddress, uint256 value, bytes calldata permitSignature, uint256 feePercentage, address feeReceiver) external payable returns (uint256 feeSentOrBurnt, uint256 feePaid);\\n    function burnOrTransferTokenAmount(address sender, address tokenAddress, uint256 value, bytes calldata permitSignature, address receiver) external payable returns(uint256 feeSentOrBurnt, uint256 amountTransferedOrBurnt);\\n}\"\r\n    },\r\n    \"contracts/ethereans/factories/model/IEthereansFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/factory/model/IFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IEthereansFactory is IFactory {\\n\\n    struct EthereansFactoryInitializer {\\n        uint256 feePercentageForTransacted;\\n        address feeReceiver;\\n        address tokenToTransferOrBurnAddressInCreation;\\n        uint256 transferOrBurnAmountInCreation;\\n        address transferOrBurnReceiverInCreation;\\n        address tokenToTransferOrBurnAddressInApplication;\\n        uint256 transferOrBurnAmountInApplication;\\n        address transferOrBurnReceiverInApplication;\\n        bytes factoryLazyInitData;\\n    }\\n\\n    function feeInfo() external view returns(address operator, uint256 feePercentageForTransacted, address feeReceiver, address tokenToTransferOrBurnAddressInCreation, uint256 transferOrBurnAmountInCreation, address transferOrBurnReceiverInCreation, address tokenToTransferOrBurnAddressInApplication, uint256 transferOrBurnAmountInApplication, address transferOrBurnReceiverInApplication);\\n\\n    function payFee(address sender, address tokenAddress, uint256 value, bytes calldata permitSignature) external payable returns (uint256 feePaid);\\n    function burnOrTransferToken(address sender, bytes calldata permitSignature) external payable returns(uint256 amountTransferedOrBurnt);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\\n\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n\\n    function setUri(string calldata newValue) external returns (string memory oldValue);\\n\\n    function dynamicUriResolver() external view returns(address);\\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/base/model/ITreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface ITreasuryManager is ILazyInitCapableElement {\\n\\n    struct TransferEntry {\\n        address token;\\n        uint256[] objectIds;\\n        uint256[] values;\\n        address receiver;\\n        bool safe;\\n        bool batch;\\n        bool withData;\\n        bytes data;\\n    }\\n\\n    function transfer(address token, uint256 value, address receiver, uint256 tokenType, uint256 objectId, bool safe, bool withData, bytes calldata data) external returns(bool result, bytes memory returnData);\\n    function batchTransfer(TransferEntry[] calldata transferEntries) external returns(bool[] memory results, bytes[] memory returnDatas);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n\\n    function setAdditionalFunction(bytes4 selector, address newServer, bool log) external returns (address oldServer);\\n    event AdditionalFunction(address caller, bytes4 indexed selector, address indexed oldServer, address indexed newServer);\\n}\"\r\n    },\r\n    \"contracts/base/model/IMicroservicesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IMicroservicesManager is ILazyInitCapableElement {\\n\\n    struct Microservice {\\n        string key;\\n        address location;\\n        string methodSignature;\\n        bool submittable;\\n        string returnAbiParametersArray;\\n        bool isInternal;\\n        bool needsSender;\\n    }\\n\\n    function size() external view returns (uint256);\\n    function all() external view returns (Microservice[] memory);\\n    function partialList(uint256 start, uint256 offset) external view returns (Microservice[] memory);\\n    function list(string[] calldata keys) external view returns (Microservice[] memory);\\n    function listByIndices(uint256[] calldata indices) external view returns (Microservice[] memory);\\n\\n    function exists(string calldata key) external view returns(bool result, uint256 index);\\n\\n    function get(string calldata key) external view returns(Microservice memory);\\n    function getByIndex(uint256 index) external view returns(Microservice memory);\\n\\n    function set(Microservice calldata newValue) external returns(Microservice memory replacedValue);\\n    function batchSet(Microservice[] calldata newValues) external returns(Microservice[] memory replacedValues);\\n\\n    event MicroserviceAdded(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\\n\\n    function remove(string calldata key) external returns(Microservice memory removedValue);\\n    function batchRemove(string[] calldata keys) external returns(Microservice[] memory removedValues);\\n    function removeByIndices(uint256[] calldata indices) external returns(Microservice[] memory removedValues);\\n\\n    event MicroserviceRemoved(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\\n\\n    function read(string calldata key, bytes calldata data) external view returns(bytes memory returnData);\\n    function submit(string calldata key, bytes calldata data) external payable returns(bytes memory returnData);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/Item.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IERC1155Views.sol\\\";\\n\\nstruct Header {\\n    address host;\\n    string name;\\n    string symbol;\\n    string uri;\\n}\\n\\nstruct CreateItem {\\n    Header header;\\n    bytes32 collectionId;\\n    uint256 id;\\n    address[] accounts;\\n    uint256[] amounts;\\n}\\n\\ninterface Item is IERC1155, IERC1155Views {\\n\\n    event CollectionItem(bytes32 indexed fromCollectionId, bytes32 indexed toCollectionId, uint256 indexed itemId);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function decimals() external view returns(uint256);\\n\\n    function burn(address account, uint256 itemId, uint256 amount) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts) external;\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes calldata data) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    function mintItems(CreateItem[] calldata items) external returns(uint256[] memory itemIds);\\n    function setItemsCollection(uint256[] calldata itemIds, bytes32[] calldata collectionIds) external returns(bytes32[] memory oldCollectionIds);\\n    function setItemsMetadata(uint256[] calldata itemIds, Header[] calldata newValues) external returns(Header[] memory oldValues);\\n\\n    function interoperableOf(uint256 itemId) external view returns(address);\\n}\"\r\n    },\r\n    \"@ethereansos/covenants/contracts/presto/IPrestoUniV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./PrestoDataUniV3.sol\\\";\\n\\ninterface IPrestoUniV3 {\\n\\n    function ONE_HUNDRED() external view returns (uint256);\\n    function doubleProxy() external view returns (address);\\n    function feePercentage() external view returns (uint256);\\n\\n    function feePercentageInfo() external view returns (uint256, address);\\n\\n    function setDoubleProxy(address _doubleProxy) external;\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function execute(PrestoOperation[] memory operations) external payable returns(uint256[] memory outputAmounts);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/factory/model/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IFactory is IDynamicMetadataCapableElement {\\n\\n    event Deployed(address indexed modelAddress, address indexed deployedAddress, address indexed deployer, bytes deployedLazyInitResponse);\\n\\n    function modelAddress() external view returns(address);\\n    function setModelAddress(address newValue) external returns(address oldValue);\\n\\n    function deployer(address deployedAddress) external view returns(address);\\n\\n    function deploy(bytes calldata deployData) external payable returns(address deployedAddress, bytes memory deployedLazyInitResponse);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/impl/DynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/IDynamicMetadataCapableElement.sol\\\";\\nimport \\\"../model/IDynamicUriResolver.sol\\\";\\nimport \\\"../../generic/impl/LazyInitCapableElement.sol\\\";\\n\\nabstract contract DynamicMetadataCapableElement is IDynamicMetadataCapableElement, LazyInitCapableElement {\\n\\n    string public override plainUri;\\n    address public override dynamicUriResolver;\\n\\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\\n    }\\n\\n    function _lazyInit(bytes memory lazyInitData) internal override returns (bytes memory lazyInitResponse) {\\n        (plainUri, dynamicUriResolver, lazyInitResponse) = abi.decode(lazyInitData, (string, address, bytes));\\n        lazyInitResponse = _dynamicMetadataElementLazyInit(lazyInitResponse);\\n    }\\n\\n    function _supportsInterface(bytes4 interfaceId) internal override view returns(bool) {\\n        return\\n            interfaceId == type(IDynamicMetadataCapableElement).interfaceId ||\\n            interfaceId == this.plainUri.selector ||\\n            interfaceId == this.uri.selector ||\\n            interfaceId == this.dynamicUriResolver.selector ||\\n            interfaceId == this.setUri.selector ||\\n            interfaceId == this.setDynamicUriResolver.selector ||\\n            _dynamicMetadataElementSupportsInterface(interfaceId);\\n    }\\n\\n    function uri() external override view returns(string memory) {\\n        return _uri(plainUri, \\\"\\\");\\n    }\\n\\n    function setUri(string calldata newValue) external override authorizedOnly returns (string memory oldValue) {\\n        oldValue = plainUri;\\n        plainUri = newValue;\\n    }\\n\\n    function setDynamicUriResolver(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = dynamicUriResolver;\\n        dynamicUriResolver = newValue;\\n    }\\n\\n    function _uri(string memory _plainUri, bytes memory additionalData) internal view returns(string memory) {\\n        if(dynamicUriResolver == address(0)) {\\n            return _plainUri;\\n        }\\n        return IDynamicUriResolver(dynamicUriResolver).resolve(address(this), _plainUri, additionalData, msg.sender);\\n    }\\n\\n    function _dynamicMetadataElementLazyInit(bytes memory lazyInitData) internal virtual returns(bytes memory);\\n\\n    function _dynamicMetadataElementSupportsInterface(bytes4 interfaceId) internal virtual view returns(bool);\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/IERC1155Views.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\\n */\\ninterface IERC1155Views {\\n\\n    /**\\n     * @dev Returns the total supply of the given token id\\n     * @param itemId the id of the token whose availability you want to know \\n     */\\n    function totalSupply(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the given token id\\n     * @param itemId the id of the token whose name you want to know \\n     */\\n    function name(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the given token id\\n     * @param itemId the id of the token whose symbol you want to know \\n     */\\n    function symbol(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the given token id\\n     * @param itemId the id of the token whose decimals you want to know \\n     */\\n    function decimals(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the uri of the given token id\\n     * @param itemId the id of the token whose uri you want to know \\n     */\\n    function uri(uint256 itemId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ILazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override initializer;\\n    address public override host;\\n\\n    constructor(bytes memory lazyInitData) {\\n        if(lazyInitData.length > 0) {\\n            _privateLazyInit(lazyInitData);\\n        }\\n    }\\n\\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\\n        return _privateLazyInit(lazyInitData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == this.supportsInterface.selector ||\\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\\n            interfaceId == this.lazyInit.selector ||\\n            interfaceId == this.initializer.selector ||\\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\\n            interfaceId == this.host.selector ||\\n            interfaceId == this.setHost.selector ||\\n            _supportsInterface(interfaceId);\\n    }\\n\\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = host;\\n        host = newValue;\\n        emit Host(oldValue, newValue);\\n    }\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\\n        if(chidlElementValidationIsConsistent) {\\n            return chidlElementValidationResult;\\n        }\\n        if(subject == host) {\\n            return true;\\n        }\\n        if(!host.isContract()) {\\n            return false;\\n        }\\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\\n        return result && abi.decode(resultData, (bool));\\n    }\\n\\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\\n        require(initializer == address(0), \\\"init\\\");\\n        initializer = msg.sender;\\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        emit Host(address(0), host);\\n        lazyInitResponse = _lazyInit(lazyInitResponse);\\n    }\\n\\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\\n    }\\n\\n    modifier authorizedOnly {\\n        require(_authorizedOnly(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _authorizedOnly() internal returns(bool) {\\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicUriResolver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IDynamicUriResolver {\\n    function resolve(address subject, string calldata plainUri, bytes calldata inputData, address caller) external view returns(string memory);\\n}\"\r\n    },\r\n    \"@ethereansos/covenants/contracts/presto/PrestoDataUniV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nstruct PrestoOperation {\\n\\n    address inputTokenAddress;\\n    uint256 inputTokenAmount;\\n\\n    address ammPlugin;\\n    address[] liquidityPoolAddresses;\\n    address[] swapPath;\\n    bool enterInETH;\\n    bool exitInETH;\\n\\n    uint256[] tokenMins;\\n\\n    address[] receivers;\\n    uint256[] receiversPercentages;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modelAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"deployedLazyInitResponse\",\"type\":\"bytes\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANDATORY_COMPONENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSALS_MANAGER_POSITION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitSignature\",\"type\":\"bytes\"}],\"name\":\"burnOrTransferToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTransferedOrBurnt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validationBomb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCapPercentage\",\"type\":\"uint256\"}],\"name\":\"createNewRules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validationAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"canTerminateAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"utilityModels\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"utilitiyModelKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"utilitiyModelActive\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"proposalUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"deployData\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"productInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicUriResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentageForTransacted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToTransferOrBurnAddressInCreation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferOrBurnAmountInCreation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transferOrBurnReceiverInCreation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToTransferOrBurnAddressInApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferOrBurnAmountInApplication\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transferOrBurnReceiverInApplication\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validationBomb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCapPercentage\",\"type\":\"uint256\"}],\"name\":\"initializeProposalModels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemProjectionFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CreateItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"mintItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitSignature\",\"type\":\"bytes\"}],\"name\":\"payFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plainUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presetArrayMaxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalModelsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationsManagerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"attach\",\"type\":\"bool\"}],\"name\":\"proposeToAttachOrDetach\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setDynamicUriResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setModelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"oldValue\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DelegationFactory", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "ersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}