{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IInterestRateModel {\\n\\tfunction getSupplyInterestRate(\\n\\t\\tuint256 totalSupply,\\n\\t\\tuint256 totalBorrow\\n\\t) external pure returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidatePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ILiquidatePool {\\n\\tfunction liquidateSTBT(address caller, uint256 stbtAmount) external;\\n\\n\\tfunction flashLiquidateSTBTByCurve(\\n\\t\\tuint256 stbtAmount,\\n\\t\\tint128 j,\\n\\t\\tuint256 minReturn,\\n\\t\\taddress receiver\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IMigrator {}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISTBT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC1644 is IERC20 {\\n\\t// Controller Events\\n\\tevent ControllerTransfer(\\n\\t\\taddress _controller,\\n\\t\\taddress indexed _from,\\n\\t\\taddress indexed _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes _data,\\n\\t\\tbytes _operatorData\\n\\t);\\n\\n\\tevent ControllerRedemption(\\n\\t\\taddress _controller,\\n\\t\\taddress indexed _tokenHolder,\\n\\t\\tuint256 _value,\\n\\t\\tbytes _data,\\n\\t\\tbytes _operatorData\\n\\t);\\n\\n\\t// Controller Operation\\n\\tfunction isControllable() external view returns (bool);\\n\\n\\tfunction controllerTransfer(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data,\\n\\t\\tbytes calldata _operatorData\\n\\t) external;\\n\\n\\tfunction controllerRedeem(\\n\\t\\taddress _tokenHolder,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data,\\n\\t\\tbytes calldata _operatorData\\n\\t) external;\\n}\\n\\ninterface IERC1643 {\\n\\t// Document Events\\n\\tevent DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\\n\\tevent DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\\n\\n\\t// Document Management\\n\\tfunction getDocument(bytes32 _name) external view returns (string memory, bytes32, uint256);\\n\\n\\tfunction setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\\n\\n\\tfunction removeDocument(bytes32 _name) external;\\n\\n\\tfunction getAllDocuments() external view returns (bytes32[] memory);\\n}\\n\\ninterface IERC1594 is IERC20 {\\n\\t// Issuance / Redemption Events\\n\\tevent Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\\n\\tevent Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\\n\\n\\t// Transfers\\n\\tfunction transferWithData(address _to, uint256 _value, bytes calldata _data) external;\\n\\n\\tfunction transferFromWithData(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external;\\n\\n\\t// Token Issuance\\n\\tfunction isIssuable() external view returns (bool);\\n\\n\\tfunction issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\\n\\n\\t// Token Redemption\\n\\tfunction redeem(uint256 _value, bytes calldata _data) external;\\n\\n\\tfunction redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\\n\\n\\t// Transfer Validity\\n\\tfunction canTransfer(\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external view returns (bool, uint8, bytes32);\\n\\n\\tfunction canTransferFrom(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external view returns (bool, uint8, bytes32);\\n}\\n\\ninterface ISTBT is IERC20, IERC20Metadata, IERC1594, IERC1643, IERC1644 {\\n\\tstruct Permission {\\n\\t\\tbool sendAllowed; // default: true\\n\\t\\tbool receiveAllowed;\\n\\t\\t// Address holder\u2019s KYC will be validated till this time, after that the holder needs to re-KYC.\\n\\t\\tuint64 expiryTime; // default:0 validated forever\\n\\t}\\n\\n\\tfunction setIssuer(address _issuer) external;\\n\\n\\tfunction setController(address _controller) external;\\n\\n\\tfunction setModerator(address _moderator) external;\\n\\n\\tfunction setMinDistributeInterval(uint64 interval) external;\\n\\n\\tfunction setMaxDistributeRatio(uint64 ratio) external;\\n\\n\\tfunction setPermission(address addr, Permission calldata permission) external;\\n\\n\\tfunction distributeInterests(\\n\\t\\tint256 _distributedInterest,\\n\\t\\tuint interestFromTime,\\n\\t\\tuint interestToTime\\n\\t) external;\\n\\n\\tfunction increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n\\tfunction sharesOf(address _account) external view returns (uint256);\\n\\n\\tfunction getSharesByAmount(uint256 _amount) external view returns (uint256 result);\\n\\n\\tfunction getAmountByShares(uint256 _shares) external view returns (uint256 result);\\n}\\n\"\r\n    },\r\n    \"contracts/rUSTP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for TProtocol.\\n *\\n * This contract is abstract. To make the contract deployable override the\\n * `_getTotalSupplyrUSTP` function. `rUSTPool.sol` contract inherits rUSTP and defines\\n * the `_getTotalSupplyrUSTP` function.\\n *\\n * rUSTP balances are dynamic and represent the holder's share in the total amount\\n * of Ether controlled by the protocol. Account shares aren't normalized, so the\\n * contract also stores the sum of all shares to calculate each account's token balance\\n * which equals to:\\n *\\n *   shares[account] * _getTotalSupplyrUSTP() / _getTotalShares()\\n *\\n * For example, assume that we have:\\n *\\n *   _getTotalSupplyrUSTP() -> 10 rUSTP\\n *   sharesOf(user1) -> 100\\n *   sharesOf(user2) -> 400\\n *\\n * Therefore:\\n *\\n *   balanceOf(user1) -> 2 tokens which corresponds 2 rUSTP\\n *   balanceOf(user2) -> 8 tokens which corresponds 8 rUSTP\\n *\\n * Since balances of all token holders change when the amount of total supplied rUSTP\\n * changes, this token cannot fully implement ERC20 standard: it only emits `Transfer`\\n * events upon explicit transfer between holders. In contrast, when total amount of\\n * pooled Ether increases, no `Transfer` events are generated: doing so would require\\n * emitting an event for each token holder and thus running an unbounded loop.\\n */\\n\\nabstract contract rUSTP is ERC20 {\\n\\tusing SafeMath for uint256;\\n\\tuint256 private totalShares;\\n\\n\\t/**\\n\\t * @dev rUSTP balances are dynamic and are calculated based on the accounts' shares\\n\\t * and the total amount of Ether controlled by the protocol. Account shares aren't\\n\\t * normalized, so the contract also stores the sum of all shares to calculate\\n\\t * each account's token balance which equals to:\\n\\t *\\n\\t *   shares[account] * _getTotalSupplyrUSTP() / _getTotalShares()\\n\\t */\\n\\tmapping(address => uint256) private shares;\\n\\n\\t/**\\n\\t * @dev Allowances are nominated in tokens, not token shares.\\n\\t */\\n\\tmapping(address => mapping(address => uint256)) private allowances;\\n\\n\\t/**\\n\\t * @notice An executed shares transfer from `sender` to `recipient`.\\n\\t *\\n\\t * @dev emitted in pair with an ERC20-defined `Transfer` event.\\n\\t */\\n\\tevent TransferShares(address indexed from, address indexed to, uint256 sharesValue);\\n\\n\\t/**\\n\\t * @notice An executed `burnShares` request\\n\\t *\\n\\t * @dev Reports simultaneously burnt shares amount\\n\\t * and corresponding rUSTP amount.\\n\\t * The rUSTP amount is calculated twice: before and after the burning incurred rebase.\\n\\t *\\n\\t * @param account holder of the burnt shares\\n\\t * @param preRebaseTokenAmount amount of rUSTP the burnt shares corresponded to before the burn\\n\\t * @param postRebaseTokenAmount amount of rUSTP the burnt shares corresponded to after the burn\\n\\t * @param sharesAmount amount of burnt shares\\n\\t */\\n\\tevent SharesBurnt(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 preRebaseTokenAmount,\\n\\t\\tuint256 postRebaseTokenAmount,\\n\\t\\tuint256 sharesAmount\\n\\t);\\n\\n\\t/**\\n\\t * @return the number of decimals for getting user representation of a token amount.\\n\\t */\\n\\tfunction decimals() public pure override returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence.\\n\\t *\\n\\t * @dev Always equals to `_getTotalSupplyrUSTP()` since token amount\\n\\t * is pegged to the total amount of rUSTP controlled by the protocol.\\n\\t */\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _getTotalSupplyrUSTP();\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of tokens owned by the `_account`.\\n\\t *\\n\\t * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n\\t * total rUSTP controlled by the protocol. See `sharesOf`.\\n\\t */\\n\\tfunction balanceOf(address _account) public view override returns (uint256) {\\n\\t\\treturn getrUSTPAmountByShares(_sharesOf(_account));\\n\\t}\\n\\n\\t/**\\n\\t * @return the total amount of shares in existence.\\n\\t *\\n\\t * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n\\t * it is necessary to store it in order to calculate each account's relative share.\\n\\t */\\n\\tfunction getTotalShares() public view returns (uint256) {\\n\\t\\treturn _getTotalShares();\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of shares owned by `_account`.\\n\\t */\\n\\tfunction sharesOf(address _account) external view returns (uint256) {\\n\\t\\treturn _sharesOf(_account);\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of shares that corresponds to `_rUSTPAmount` protocol-supplied rUSTP.\\n\\t */\\n\\tfunction getSharesByrUSTPAmount(uint256 _rUSTPAmount) public view returns (uint256) {\\n\\t\\tuint256 totalSupplyrUSTP = _getTotalSupplyrUSTP();\\n\\t\\treturn\\n\\t\\t\\ttotalSupplyrUSTP == 0 ? 0 : _rUSTPAmount.mul(_getTotalShares()).div(totalSupplyrUSTP);\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of rUSTP that corresponds to `_sharesAmount` token shares.\\n\\t */\\n\\tfunction getrUSTPAmountByShares(uint256 _sharesAmount) public view returns (uint256) {\\n\\t\\tuint256 totalSharesAmount = _getTotalShares();\\n\\t\\treturn\\n\\t\\t\\ttotalSharesAmount == 0\\n\\t\\t\\t\\t? 0\\n\\t\\t\\t\\t: _sharesAmount.mul(_getTotalSupplyrUSTP()).div(totalSharesAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Moves `_sharesAmount` token shares from the caller's account to the `_recipient` account.\\n\\t *\\n\\t * @return amount of transferred tokens.\\n\\t * Emits a `TransferShares` event.\\n\\t * Emits a `Transfer` event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `_recipient` cannot be the zero address.\\n\\t * - the caller must have at least `_sharesAmount` shares.\\n\\t * - the contract must not be paused.\\n\\t *\\n\\t * @dev The `_sharesAmount` argument is the amount of shares, not tokens.\\n\\t */\\n\\tfunction transferShares(address _recipient, uint256 _sharesAmount) external returns (uint256) {\\n\\t\\t_transferShares(msg.sender, _recipient, _sharesAmount);\\n\\t\\tuint256 tokensAmount = getrUSTPAmountByShares(_sharesAmount);\\n\\t\\t_emitTransferEvents(msg.sender, _recipient, tokensAmount, _sharesAmount);\\n\\t\\treturn tokensAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @return the total amount of rUSTP.\\n\\t * @dev This is used for calculating tokens from shares and vice versa.\\n\\t * @dev This function is required to be implemented in a derived contract.\\n\\t */\\n\\tfunction _getTotalSupplyrUSTP() internal view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @notice Moves `_amount` tokens from `_sender` to `_recipient`.\\n\\t * Emits a `Transfer` event.\\n\\t * Emits a `TransferShares` event.\\n\\t */\\n\\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal override {\\n\\t\\tuint256 _sharesToTransfer = getSharesByrUSTPAmount(_amount);\\n\\t\\t_transferShares(_sender, _recipient, _sharesToTransfer);\\n\\t\\t_emitTransferEvents(_sender, _recipient, _amount, _sharesToTransfer);\\n\\t}\\n\\n\\t/**\\n\\t * @return the total amount of shares in existence.\\n\\t */\\n\\tfunction _getTotalShares() internal view returns (uint256) {\\n\\t\\treturn totalShares;\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of shares owned by `_account`.\\n\\t */\\n\\tfunction _sharesOf(address _account) internal view returns (uint256) {\\n\\t\\treturn shares[_account];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Moves `_sharesAmount` shares from `_sender` to `_recipient`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `_sender` cannot be the zero address.\\n\\t * - `_recipient` cannot be the zero address.\\n\\t * - `_sender` must hold at least `_sharesAmount` shares.\\n\\t * - the contract must not be paused.\\n\\t */\\n\\tfunction _transferShares(address _sender, address _recipient, uint256 _sharesAmount) internal {\\n\\t\\trequire(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n\\t\\trequire(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n\\t\\tuint256 currentSenderShares = shares[_sender];\\n\\t\\trequire(_sharesAmount <= currentSenderShares, \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n\\t\\tshares[_sender] = currentSenderShares.sub(_sharesAmount);\\n\\t\\tshares[_recipient] = shares[_recipient].add(_sharesAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates `_sharesAmount` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n\\t * @dev This doesn't increase the token total supply.\\n\\t *\\n\\t * NB: The method doesn't check protocol pause relying on the external enforcement.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `_recipient` cannot be the zero address.\\n\\t * - the contract must not be paused.\\n\\t */\\n\\tfunction _mintShares(\\n\\t\\taddress _recipient,\\n\\t\\tuint256 _sharesAmount\\n\\t) internal returns (uint256 newTotalShares) {\\n\\t\\trequire(_recipient != address(0), \\\"MINT_TO_ZERO_ADDR\\\");\\n\\n\\t\\tnewTotalShares = _getTotalShares().add(_sharesAmount);\\n\\t\\ttotalShares = newTotalShares;\\n\\n\\t\\tshares[_recipient] = shares[_recipient].add(_sharesAmount);\\n\\n\\t\\t// Notice: we're not emitting a Transfer event from the zero address here since shares mint\\n\\t\\t// works by taking the amount of tokens corresponding to the minted shares from all other\\n\\t\\t// token holders, proportionally to their share. The total supply of the token doesn't change\\n\\t\\t// as the result. This is equivalent to performing a send from each other token holder's\\n\\t\\t// address to `address`, but we cannot reflect this as it would require sending an unbounded\\n\\t\\t// number of events.\\n\\t}\\n\\n\\t/**\\n\\t * @notice Destroys `_sharesAmount` shares from `_account`'s holdings, decreasing the total amount of shares.\\n\\t * @dev This doesn't decrease the token total supply.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `_account` cannot be the zero address.\\n\\t * - `_account` must hold at least `_sharesAmount` shares.\\n\\t * - the contract must not be paused.\\n\\t */\\n\\tfunction _burnShares(\\n\\t\\taddress _account,\\n\\t\\tuint256 _sharesAmount\\n\\t) internal returns (uint256 newTotalShares) {\\n\\t\\trequire(_account != address(0), \\\"BURN_FROM_ZERO_ADDR\\\");\\n\\n\\t\\tuint256 accountShares = shares[_account];\\n\\t\\trequire(_sharesAmount <= accountShares, \\\"BALANCE_EXCEEDED\\\");\\n\\n\\t\\tuint256 preRebaseTokenAmount = getrUSTPAmountByShares(_sharesAmount);\\n\\n\\t\\tnewTotalShares = _getTotalShares().sub(_sharesAmount);\\n\\t\\ttotalShares = newTotalShares;\\n\\n\\t\\tshares[_account] = accountShares.sub(_sharesAmount);\\n\\n\\t\\tuint256 postRebaseTokenAmount = getrUSTPAmountByShares(_sharesAmount);\\n\\n\\t\\temit SharesBurnt(_account, preRebaseTokenAmount, postRebaseTokenAmount, _sharesAmount);\\n\\n\\t\\t// Notice: we're not emitting a Transfer event to the zero address here since shares burn\\n\\t\\t// works by redistributing the amount of tokens corresponding to the burned shares between\\n\\t\\t// all other token holders. The total supply of the token doesn't change as the result.\\n\\t\\t// This is equivalent to performing a send from `address` to each other token holder address,\\n\\t\\t// but we cannot reflect this as it would require sending an unbounded number of events.\\n\\n\\t\\t// We're emitting `SharesBurnt` event to provide an explicit rebase log record nonetheless.\\n\\t}\\n\\n\\t/**\\n\\t * @dev Emits {Transfer} and {TransferShares} events\\n\\t */\\n\\tfunction _emitTransferEvents(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint _tokenAmount,\\n\\t\\tuint256 _sharesAmount\\n\\t) internal {\\n\\t\\temit Transfer(_from, _to, _tokenAmount);\\n\\t\\temit TransferShares(_from, _to, _sharesAmount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/rUSTPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISTBT.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/ILiquidatePool.sol\\\";\\nimport \\\"./interfaces/IMigrator.sol\\\";\\nimport \\\"./rUSTP.sol\\\";\\n\\ncontract rUSTPool is rUSTP, AccessControl, Pausable {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\tbytes32 public constant POOL_MANAGER_ROLE = keccak256(\\\"POOL_MANAGER_ROLE\\\");\\n\\n\\tuint256 public lastCheckpoint;\\n\\t// Used to calculate the interest base.\\n\\tuint256 public constant APR_COEFFICIENT = 1e8;\\n\\t// Used to calculate the fee base.\\n\\tuint256 public constant FEE_COEFFICIENT = 1e8;\\n\\t// Used to calculate shares of STBT deposited by users.\\n\\tuint256 public totalDepositedSharesSTBT;\\n\\t// Used to calculate total supply of rUSTP.\\n\\tuint256 public totalSupplyrUSTP;\\n\\n\\tuint256 public safeCollateralRate = 101 * 1e18;\\n\\tuint256 public reserveFactor;\\n\\n\\tbool public migrating;\\n\\n\\t// Used to record the user's STBT shares.\\n\\tmapping(address => uint256) public depositedSharesSTBT;\\n\\t// Used to record the user's loan shares of rUSTP.\\n\\tmapping(address => uint256) borrowedShares;\\n\\tuint256 public totalBorrowShares;\\n\\tuint256 public totalBorrowrUSTP;\\n\\n\\tmapping(address => bool) liquidateProvider;\\n\\t// Used to be a flash liquidate provider\\n\\tmapping(address => bool) flashLiquidateProvider;\\n\\tmapping(address => bool) pendingFlashLiquidateProvider;\\n\\n\\t// We assume that the interest rate will not exceed 10%.\\n\\tuint256 public constant maxInterestRate = APR_COEFFICIENT / 10;\\n\\n\\t// collateral token.\\n\\tISTBT public stbt;\\n\\t// Used to mint rUSTP.\\n\\tIERC20 public usdc;\\n\\t// interest rate model\\n\\tIInterestRateModel public interestRateModel;\\n\\tILiquidatePool public liquidatePool;\\n\\n\\tIMigrator public migrator;\\n\\n\\t// the claimable fee for protocol\\n\\t// reserves will be claim with rUSTP.\\n\\tuint256 public totalUnclaimReserves;\\n\\n\\tevent SupplySTBT(address indexed user, uint256 amount, uint256 shares, uint256 timestamp);\\n\\tevent SupplyUSDC(address indexed user, uint256 amount, uint256 timestamp);\\n\\tevent Mint(address indexed user, uint256 amount, uint256 timestamp);\\n\\tevent Burn(address indexed user, uint256 amount, uint256 timestamp);\\n\\tevent WithdrawSTBT(address indexed user, uint256 amount, uint256 shares, uint256 timestamp);\\n\\tevent WithdrawUSDC(address indexed user, uint256 amount, uint256 timestamp);\\n\\tevent BorrowUSDC(address indexed user, uint256 amount, uint256 timestamp);\\n\\tevent RepayUSDC(address indexed user, uint256 amount, uint256 timestamp);\\n\\n\\tevent ReservesAdded(uint256 addAmount, uint256 newTotalUnclaimReserves);\\n\\tevent LiquidationRecord(\\n\\t\\taddress liquidator,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 rUSTPAmount,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tevent SafeCollateralRateChanged(uint256 newSafeRatio);\\n\\n\\t// 0 is not, 1 is pending, 2 is a provider.\\n\\tevent FlashLiquidateProvider(address user, uint8 status);\\n\\tevent NewLiquidateProvider(address user, bool status);\\n\\n\\tevent MintDebt(address indexed user, uint256 amount, uint256 shareAmount, uint256 timestamp);\\n\\tevent BurnDebt(address indexed user, uint256 amount, uint256 shareAmount, uint256 timestamp);\\n\\n\\tconstructor(\\n\\t\\taddress admin,\\n\\t\\tISTBT _stbt,\\n\\t\\tIERC20 _usdc\\n\\t) ERC20(\\\"Interest-bearing USD of TProtocol\\\", \\\"rUSTP\\\") {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, admin);\\n\\t\\tstbt = _stbt;\\n\\t\\tusdc = _usdc;\\n\\t\\tmigrating = true;\\n\\t}\\n\\n\\tmodifier realizeInterest() {\\n\\t\\tif (totalSupplyrUSTP != 0) {\\n\\t\\t\\tuint256 totalInterest = getRPS().mul(block.timestamp.sub(lastCheckpoint));\\n\\t\\t\\tuint256 reserves = totalInterest.mul(reserveFactor).div(FEE_COEFFICIENT);\\n\\n\\t\\t\\ttotalSupplyrUSTP = totalSupplyrUSTP.add(totalInterest).sub(reserves);\\n\\t\\t\\ttotalUnclaimReserves = totalUnclaimReserves.add(reserves);\\n\\t\\t\\ttotalBorrowrUSTP = totalBorrowrUSTP.add(totalInterest);\\n\\n\\t\\t\\temit ReservesAdded(reserves, totalUnclaimReserves);\\n\\t\\t}\\n\\t\\tlastCheckpoint = block.timestamp;\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause the contract. Revert if already paused.\\n\\t */\\n\\tfunction pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause the contract. Revert if already unpaused.\\n\\t */\\n\\tfunction unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev to set the liquidate pool\\n\\t * @param _address the address of liquidate pool\\n\\t */\\n\\tfunction initLiquidatePool(\\n\\t\\taddress _address\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) realizeInterest {\\n\\t\\trequire(address(liquidatePool) == address(0), \\\"initialized.\\\");\\n\\t\\tliquidatePool = ILiquidatePool(_address);\\n\\t}\\n\\n\\t/**\\n\\t * @dev to set the migrator\\n\\t * @param _address the address of migrator\\n\\t */\\n\\tfunction initMigrator(address _address) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(address(migrator) == address(0), \\\"initialized\\\");\\n\\t\\trequire(migrating, \\\"migration has been done\\\");\\n\\t\\tmigrator = IMigrator(_address);\\n\\t}\\n\\n\\t/**\\n\\t * @dev to revoke migrator\\n\\t */\\n\\tfunction revokeMigrator() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(migrating, \\\"migration has been done\\\");\\n\\t\\tmigrator = IMigrator(address(0));\\n\\t\\tmigrating = false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev claim protocol's reserves fee\\n\\t * @param _receiver the address be used to receive reserves fee.\\n\\t */\\n\\tfunction claimReservesFee(\\n\\t\\taddress _receiver\\n\\t) external realizeInterest onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_mintrUSTP(_receiver, totalUnclaimReserves);\\n\\t\\ttotalUnclaimReserves = 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev to set the rate of manager fee\\n\\t * @param _reserveFactor the rate. it should be multiply 10**6\\n\\t */\\n\\tfunction setReserveFactor(\\n\\t\\tuint256 _reserveFactor\\n\\t) external onlyRole(POOL_MANAGER_ROLE) realizeInterest {\\n\\t\\trequire(_reserveFactor <= FEE_COEFFICIENT, \\\"reserve factor should be less than 100%.\\\");\\n\\t\\treserveFactor = _reserveFactor;\\n\\t}\\n\\n\\t/**\\n\\t * @dev to set interest rate model\\n\\t * @param _interestRateModel the model address\\n\\t */\\n\\tfunction setInterestRateModel(\\n\\t\\tIInterestRateModel _interestRateModel\\n\\t) external onlyRole(POOL_MANAGER_ROLE) realizeInterest {\\n\\t\\t// To ensure 100% utilization.\\n\\t\\tuint256 supplyInterestRate = _interestRateModel.getSupplyInterestRate(\\n\\t\\t\\ttotalSupplyrUSTP,\\n\\t\\t\\ttotalSupplyrUSTP\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tsupplyInterestRate <= maxInterestRate,\\n\\t\\t\\t\\\"interest rate should be less than maxInterestRate.\\\"\\n\\t\\t);\\n\\t\\tinterestRateModel = _interestRateModel;\\n\\t}\\n\\n\\t/**\\n\\t * @notice  safeCollateralRate\\n\\t */\\n\\tfunction setSafeCollateralRate(\\n\\t\\tuint256 newSafeRatio\\n\\t) external onlyRole(POOL_MANAGER_ROLE) realizeInterest {\\n\\t\\trequire(newSafeRatio >= 101 * 1e18, \\\"Safe CollateralRate should more than 101%\\\");\\n\\t\\tsafeCollateralRate = newSafeRatio;\\n\\t\\temit SafeCollateralRateChanged(newSafeRatio);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Supply USDC.\\n\\t * Emits a `SupplyUSDC` event.\\n\\t *\\n\\t * @param _amount the amount of USDC\\n\\t */\\n\\tfunction supplyUSDC(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Supply USDC should more then 0.\\\");\\n\\t\\tusdc.transferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\t// convert to rUSTP.\\n\\t\\tuint256 convertTorUSTP = _amount.mul(1e12);\\n\\n\\t\\t_mintrUSTP(msg.sender, convertTorUSTP);\\n\\n\\t\\temit SupplyUSDC(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Supply STBT.\\n\\t * Emits a `SupplySTBT` event.\\n\\t *\\n\\t * @param _amount the amount of STBT.\\n\\t */\\n\\tfunction supplySTBT(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Supply STBT should more then 0.\\\");\\n\\t\\t_supplySTBTFor(_amount, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Supply STBT for others.\\n\\t * Emits a `SupplySTBT` event.\\n\\t *\\n\\t * @param _amount the amount of STBT.\\n\\t * @param _receiver receiver\\n\\t */\\n\\n\\tfunction supplySTBTFor(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _receiver\\n\\t) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Supply STBT should more then 0.\\\");\\n\\t\\t_supplySTBTFor(_amount, _receiver);\\n\\t}\\n\\n\\tfunction _supplySTBTFor(uint256 _amount, address _receiver) internal {\\n\\t\\tuint256 beforeShares = stbt.sharesOf(address(this));\\n\\t\\tstbt.transferFrom(msg.sender, address(this), _amount);\\n\\t\\tuint256 afterShares = stbt.sharesOf(address(this));\\n\\n\\t\\tuint256 userDepositedShares = afterShares.sub(beforeShares);\\n\\n\\t\\ttotalDepositedSharesSTBT += userDepositedShares;\\n\\t\\tdepositedSharesSTBT[_receiver] += userDepositedShares;\\n\\n\\t\\temit SupplySTBT(_receiver, _amount, userDepositedShares, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw STBT to an address.\\n\\t * Emits a `WithdrawSTBT` event.\\n\\t *\\n\\t * @param _amount the amount of STBT.\\n\\t */\\n\\tfunction withdrawSTBT(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Withdraw STBT should more then 0.\\\");\\n\\n\\t\\tuint256 withdrawShares = stbt.getSharesByAmount(_amount);\\n\\t\\ttotalDepositedSharesSTBT -= withdrawShares;\\n\\t\\tdepositedSharesSTBT[msg.sender] -= withdrawShares;\\n\\n\\t\\t_requireIsSafeCollateralRate(msg.sender);\\n\\t\\tstbt.transfer(msg.sender, _amount);\\n\\n\\t\\temit WithdrawSTBT(msg.sender, _amount, withdrawShares, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all STBT to an address.\\n\\t * Emits a `WithdrawSTBT` event.\\n\\t *\\n\\t */\\n\\tfunction withdrawAllSTBT() external whenNotPaused realizeInterest {\\n\\t\\tuint256 withdrawShares = depositedSharesSTBT[msg.sender];\\n\\t\\trequire(withdrawShares > 0, \\\"Withdraw STBT should more then 0.\\\");\\n\\t\\tuint256 _amount = stbt.getAmountByShares(withdrawShares);\\n\\n\\t\\ttotalDepositedSharesSTBT -= withdrawShares;\\n\\t\\tdepositedSharesSTBT[msg.sender] = 0;\\n\\n\\t\\t_requireIsSafeCollateralRate(msg.sender);\\n\\t\\tstbt.transfer(msg.sender, _amount);\\n\\n\\t\\temit WithdrawSTBT(msg.sender, _amount, withdrawShares, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw USDC to an address.\\n\\t * rUSTP:USDC always 1:1.\\n\\t * Emits a `WithdrawUSDC` event.\\n\\t *\\n\\t * @param _amount the amount of USDC.\\n\\t */\\n\\tfunction withdrawUSDC(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Withdraw USDC should more then 0.\\\");\\n\\n\\t\\t// convert to rUSTP.\\n\\t\\tuint256 convertTorUSTP = _amount.mul(10 ** 12);\\n\\n\\t\\t_burnrUSTP(msg.sender, convertTorUSTP);\\n\\t\\tusdc.transfer(msg.sender, _amount);\\n\\n\\t\\temit WithdrawUSDC(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all USDC to an address.\\n\\t * rUSTP:USDC always 1:1.\\n\\t * Emits a `WithdrawUSDC` event.\\n\\t *\\n\\t */\\n\\tfunction withdrawAllUSDC() external whenNotPaused realizeInterest {\\n\\t\\tuint256 _amount = balanceOf(msg.sender);\\n\\t\\trequire(_amount > 0, \\\"Withdraw USDC should more then 0.\\\");\\n\\n\\t\\t// convert to USDC.\\n\\t\\tuint256 convertToUSDC = _amount.div(10 ** 12);\\n\\n\\t\\t_burnrUSTP(msg.sender, _amount);\\n\\n\\t\\tif (convertToUSDC > 0) {\\n\\t\\t\\tusdc.transfer(msg.sender, convertToUSDC);\\n\\t\\t}\\n\\n\\t\\temit WithdrawUSDC(msg.sender, convertToUSDC, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Borrow USDC to an address.\\n\\t * Emits a `BorrowUSDC` event.\\n\\t *\\n\\t * @param _amount the amount of USDC.\\n\\t */\\n\\tfunction borrowUSDC(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Borrow USDC should more then 0.\\\");\\n\\n\\t\\t// convert to rUSTP.\\n\\t\\tuint256 convertTorUSTP = _amount.mul(10 ** 12);\\n\\n\\t\\t_mintrUSTPDebt(msg.sender, convertTorUSTP);\\n\\t\\t_requireIsSafeCollateralRate(msg.sender);\\n\\n\\t\\tusdc.safeTransfer(msg.sender, _amount);\\n\\n\\t\\temit BorrowUSDC(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repay USDC from user\\n\\t * Emits a `RepayUSDC` event.\\n\\t *\\n\\t * @param _amount the amount of USDC.\\n\\t */\\n\\tfunction repayUSDC(uint256 _amount) external whenNotPaused realizeInterest {\\n\\t\\trequire(_amount > 0, \\\"Repay USDC should more then 0.\\\");\\n\\n\\t\\tusdc.transferFrom(msg.sender, address(this), _amount);\\n\\t\\t// convert to rUSTP.\\n\\t\\tuint256 convertTorUSTP = _amount.mul(1e12);\\n\\n\\t\\t_burnrUSTPDebt(msg.sender, convertTorUSTP);\\n\\n\\t\\temit RepayUSDC(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repay all USDC from user\\n\\t * Emits a `RepayUSDC` event.\\n\\t *\\n\\t */\\n\\tfunction repayAll() external whenNotPaused realizeInterest {\\n\\t\\tuint256 userBorrowShares = borrowedShares[msg.sender];\\n\\t\\trequire(userBorrowShares > 0, \\\"Repay USDC should more then 0.\\\");\\n\\n\\t\\tuint256 repayrUSTP = getBorrowrUSTPAmountByShares(userBorrowShares);\\n\\n\\t\\t// convert to USDC.\\n\\t\\tuint256 convertToUSDC = repayrUSTP.div(1e12) + 1;\\n\\t\\tusdc.transferFrom(msg.sender, address(this), convertToUSDC);\\n\\n\\t\\t_burnrUSTPDebt(msg.sender, repayrUSTP);\\n\\n\\t\\temit RepayUSDC(msg.sender, convertToUSDC, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice The sender liquidates the borrowers collateral.\\n\\t * *Can be liquidated at any time*\\n\\t * Emits a `LiquidationRecord` event.\\n\\t *\\n\\t * @param borrower The borrower be liquidated\\n\\t * @param repayAmount The amount of the rUSTP to repay\\n\\t */\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external whenNotPaused realizeInterest {\\n\\t\\trequire(liquidateProvider[borrower], \\\"borrower is not a provider.\\\");\\n\\t\\t_liquidateProcedure(borrower, repayAmount);\\n\\t\\tliquidatePool.liquidateSTBT(msg.sender, repayAmount);\\n\\n\\t\\temit LiquidationRecord(msg.sender, borrower, repayAmount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice The sender liquidates the borrowers collateral by Curve.\\n\\t * *Can be liquidated at any time*\\n\\t * Emits a `LiquidationRecord` event.\\n\\t *\\n\\t * @param borrower The borrower be liquidated\\n\\t * @param repayAmount The amount of the rUSTP to repay\\n\\t * @param j token of index for curve pool\\n\\t * @param minReturn the minimum amount of return\\n\\t */\\n\\tfunction flashLiquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tint128 j,\\n\\t\\tuint256 minReturn\\n\\t) external whenNotPaused realizeInterest {\\n\\t\\trequire(flashLiquidateProvider[borrower], \\\"borrower is not a provider.\\\");\\n\\t\\t_liquidateProcedure(borrower, repayAmount);\\n\\t\\tliquidatePool.flashLiquidateSTBTByCurve(repayAmount, j, minReturn, msg.sender);\\n\\n\\t\\temit LiquidationRecord(msg.sender, borrower, repayAmount, block.timestamp);\\n\\t}\\n\\n\\tfunction _liquidateProcedure(address borrower, uint256 repayAmount) internal {\\n\\t\\trequire(msg.sender != borrower, \\\"don't liquidate self.\\\");\\n\\t\\tuint256 borrowedUSD = getBorrowrUSTPAmountByShares(borrowedShares[borrower]);\\n\\t\\trequire(borrowedUSD >= repayAmount, \\\"repayAmount should be less than borrower's debt.\\\");\\n\\t\\t_burnrUSTP(msg.sender, repayAmount);\\n\\n\\t\\t_burnrUSTPDebt(borrower, repayAmount);\\n\\n\\t\\t// always assuming STBT:rUSTP is 1:1.\\n\\t\\tuint256 liquidateShares = stbt.getSharesByAmount(repayAmount);\\n\\t\\t// TODO maybe no need to check.\\n\\t\\trequire(\\n\\t\\t\\tdepositedSharesSTBT[borrower] >= liquidateShares,\\n\\t\\t\\t\\\"liquidateShares should be less than borrower's deposit.\\\"\\n\\t\\t);\\n\\t\\ttotalDepositedSharesSTBT -= liquidateShares;\\n\\t\\tdepositedSharesSTBT[borrower] -= liquidateShares;\\n\\n\\t\\tstbt.transfer(address(liquidatePool), repayAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice User chooses to apply a provider\\n\\t */\\n\\tfunction applyFlashLiquidateProvider() external {\\n\\t\\tpendingFlashLiquidateProvider[msg.sender] = true;\\n\\t\\temit FlashLiquidateProvider(msg.sender, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @notice User chooses to cancel a provider\\n\\t */\\n\\tfunction cancelFlashLiquidateProvider() external {\\n\\t\\tpendingFlashLiquidateProvider[msg.sender] = false;\\n\\t\\tflashLiquidateProvider[msg.sender] = false;\\n\\t\\temit FlashLiquidateProvider(msg.sender, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Admin accept a apply for provider\\n\\t */\\n\\tfunction acceptFlashLiquidateProvider(address user) external onlyRole(POOL_MANAGER_ROLE) {\\n\\t\\trequire(pendingFlashLiquidateProvider[user], \\\"the user did not apply.\\\");\\n\\t\\tpendingFlashLiquidateProvider[user] = false;\\n\\t\\tflashLiquidateProvider[user] = true;\\n\\t\\temit FlashLiquidateProvider(user, 2);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Admin add a provider\\n\\t */\\n\\tfunction setLiquidateProvider(address user, bool status) external onlyRole(POOL_MANAGER_ROLE) {\\n\\t\\tliquidateProvider[user] = status;\\n\\t\\temit NewLiquidateProvider(user, status);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Migrate wTBT to rUSTP\\n\\t * @param _user the user of deposit USDC\\n\\t * @param _borrower the user of deposit STBT\\n\\t * @param _amount the amount of migration\\n\\t */\\n\\tfunction migrate(\\n\\t\\taddress _user,\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _amount\\n\\t) external whenNotPaused realizeInterest {\\n\\t\\trequire(migrating, \\\"migration is done.\\\");\\n\\t\\trequire(msg.sender == address(migrator), \\\"no authorization.\\\");\\n\\n\\t\\t// Mint USTP to user, 1-to-1 stbt\\n\\t\\t_mintrUSTP(_user, _amount);\\n\\n\\t\\t// supply stbt\\n\\t\\tuint256 beforeShares = stbt.sharesOf(address(this));\\n\\t\\tstbt.transferFrom(_borrower, address(this), _amount);\\n\\t\\tuint256 afterShares = stbt.sharesOf(address(this));\\n\\n\\t\\tuint256 userDepositedShares = afterShares.sub(beforeShares);\\n\\n\\t\\ttotalDepositedSharesSTBT += userDepositedShares;\\n\\t\\tdepositedSharesSTBT[_borrower] += userDepositedShares;\\n\\n\\t\\t// Borrow\\n\\t\\t// At migrate. we don't check healthy\\n\\t\\t// Deposit stbt for borrower later\\n\\t\\t_mintrUSTPDebt(_borrower, _amount);\\n\\n\\t\\temit BorrowUSDC(msg.sender, _amount, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the borrowed shares of user\\n\\t *\\n\\t * @param user the address of borrower\\n\\t */\\n\\n\\tfunction getBorrowedSharesOf(address user) external view returns (uint256) {\\n\\t\\treturn borrowedShares[user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the borrowed amount of user\\n\\t *\\n\\t * @param user the address of borrower\\n\\t */\\n\\n\\tfunction getBorrowedAmount(address user) public view returns (uint256) {\\n\\t\\treturn getBorrowrUSTPAmountByShares(borrowedShares[user]);\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of borrow shares that corresponds to `_rUSTPAmount` protocol-borrowed rUSTP.\\n\\t */\\n\\tfunction getBorrowSharesByrUSTPAmount(uint256 _rUSTPAmount) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\ttotalBorrowrUSTP == 0 ? 0 : _rUSTPAmount.mul(totalBorrowShares).div(totalBorrowrUSTP);\\n\\t}\\n\\n\\t/**\\n\\t * @return the amount of borrow rUSTP that corresponds to `_sharesAmount` borrow shares.\\n\\t */\\n\\tfunction getBorrowrUSTPAmountByShares(uint256 _sharesAmount) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\ttotalBorrowShares == 0 ? 0 : _sharesAmount.mul(totalBorrowrUSTP).div(totalBorrowShares);\\n\\t}\\n\\n\\t/**\\n\\t * @dev mint rUSTP for _receiver.\\n\\t * Emits`Mint` and `Transfer` event.\\n\\t *\\n\\t * @param _receiver the address be used to receive rUSTP.\\n\\t * @param _amount the amount of rUSTP.\\n\\t */\\n\\tfunction _mintrUSTP(address _receiver, uint256 _amount) internal {\\n\\t\\tuint256 sharesAmount = getSharesByrUSTPAmount(_amount);\\n\\t\\tif (sharesAmount == 0) {\\n\\t\\t\\t//rUSTP shares are 1:1 to USDC at first.\\n\\t\\t\\tsharesAmount = _amount;\\n\\t\\t}\\n\\t\\t_mintShares(_receiver, sharesAmount);\\n\\t\\ttotalSupplyrUSTP += _amount;\\n\\t\\temit Mint(msg.sender, _amount, block.timestamp);\\n\\t\\temit Transfer(address(0), _receiver, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev burn rUSTP from _receiver.\\n\\t * Emits`Burn` and `Transfer` event.\\n\\t *\\n\\t * @param _account the address be used to burn rUSTP.\\n\\t * @param _amount the amount of rUSTP.\\n\\t */\\n\\tfunction _burnrUSTP(address _account, uint256 _amount) internal {\\n\\t\\tuint256 sharesAmount = getSharesByrUSTPAmount(_amount);\\n\\t\\trequire(sharesAmount > 0, \\\"shares should be more then 0.\\\");\\n\\t\\t_burnShares(_account, sharesAmount);\\n\\t\\ttotalSupplyrUSTP -= _amount;\\n\\t\\temit Burn(msg.sender, _amount, block.timestamp);\\n\\t\\temit Transfer(_account, address(0), _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev mint rUSTP debt for _receiver.\\n\\t *\\n\\t * @param _receiver the address be used to receive rUSTP debt.\\n\\t * @param _amount the amount of rUSTP.\\n\\t */\\n\\tfunction _mintrUSTPDebt(address _receiver, uint256 _amount) internal {\\n\\t\\tuint256 borrowShares = getBorrowSharesByrUSTPAmount(_amount);\\n\\t\\tif (borrowShares == 0) {\\n\\t\\t\\tborrowShares = _amount;\\n\\t\\t}\\n\\t\\tborrowedShares[_receiver] += borrowShares;\\n\\t\\ttotalBorrowShares += borrowShares;\\n\\n\\t\\ttotalBorrowrUSTP += _amount;\\n\\n\\t\\trequire(totalBorrowrUSTP <= totalSupplyrUSTP, \\\"shold be less then supply of rUSTP.\\\");\\n\\n\\t\\temit MintDebt(msg.sender, _amount, borrowShares, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @dev burn rUSTP debt from _receiver.\\n\\t *\\n\\t * @param _account the address be used to burn rUSTP.\\n\\t * @param _amount the amount of rUSTP.\\n\\t */\\n\\tfunction _burnrUSTPDebt(address _account, uint256 _amount) internal {\\n\\t\\tuint256 borrowShares = getBorrowSharesByrUSTPAmount(_amount);\\n\\t\\trequire(borrowShares > 0, \\\"shares should be more then 0.\\\");\\n\\t\\tborrowedShares[_account] -= borrowShares;\\n\\t\\ttotalBorrowShares -= borrowShares;\\n\\n\\t\\ttotalBorrowrUSTP -= _amount;\\n\\n\\t\\temit BurnDebt(msg.sender, _amount, borrowShares, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice total supply of rUSTP.\\n\\t */\\n\\tfunction _getTotalSupplyrUSTP() internal view override returns (uint256) {\\n\\t\\treturn totalSupplyrUSTP;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Return USD value of STBT\\n\\t * it should be equal to $1.\\n\\t * maybe possible through the oracle.\\n\\t */\\n\\tfunction _stbtPrice() internal pure returns (uint256) {\\n\\t\\treturn 1e18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev The USD value of the collateral asset must be higher than safeCollateralRate.\\n\\t */\\n\\tfunction _requireIsSafeCollateralRate(address user) internal view {\\n\\t\\tuint256 borrowedAmount = getBorrowedAmount(user);\\n\\t\\tif (borrowedAmount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\t(stbt.getAmountByShares(depositedSharesSTBT[user]).mul(_stbtPrice()).mul(100) /\\n\\t\\t\\t\\tborrowedAmount) >= safeCollateralRate,\\n\\t\\t\\t\\\"Cannot be lower than the safeCollateralRate.\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev revolutions per second\\n\\t */\\n\\tfunction getRPS() public view returns (uint256) {\\n\\t\\tuint256 _totalSupplyrUSTP = _getTotalSupplyrUSTP();\\n\\t\\tuint256 supplyInterestRate = interestRateModel.getSupplyInterestRate(\\n\\t\\t\\t_totalSupplyrUSTP,\\n\\t\\t\\tgetrUSTPAmountByShares(totalBorrowShares)\\n\\t\\t);\\n\\t\\tif (supplyInterestRate >= maxInterestRate) {\\n\\t\\t\\tsupplyInterestRate = maxInterestRate;\\n\\t\\t}\\n\\t\\treturn supplyInterestRate.mul(_totalSupplyrUSTP).div(365 days).div(APR_COEFFICIENT);\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract ISTBT\",\"name\":\"_stbt\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BorrowUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BurnDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"FlashLiquidateProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rUSTPAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiquidationRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MintDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"NewLiquidateProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RepayUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalUnclaimReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSafeRatio\",\"type\":\"uint256\"}],\"name\":\"SafeCollateralRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preRebaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postRebaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"SharesBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SupplySTBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SupplyUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesValue\",\"type\":\"uint256\"}],\"name\":\"TransferShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawSTBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APR_COEFFICIENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_COEFFICIENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"acceptFlashLiquidateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyFlashLiquidateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFlashLiquidateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimReservesFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedSharesSTBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"flashLiquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rUSTPAmount\",\"type\":\"uint256\"}],\"name\":\"getBorrowSharesByrUSTPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBorrowedSharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"getBorrowrUSTPAmountByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rUSTPAmount\",\"type\":\"uint256\"}],\"name\":\"getSharesByrUSTPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"getrUSTPAmountByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"initLiquidatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"initMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatePool\",\"outputs\":[{\"internalType\":\"contract ILiquidatePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"_interestRateModel\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setLiquidateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeRatio\",\"type\":\"uint256\"}],\"name\":\"setSafeCollateralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stbt\",\"outputs\":[{\"internalType\":\"contract ISTBT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplySTBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"supplySTBTFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplyUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowrUSTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedSharesSTBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyrUSTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllSTBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSTBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "rUSTPool", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000031b8939c6e55a4ddaf0d6479320a0dfd9766ee9d000000000000000000000000530824da86689c9c17cdc2871ff29b058345b44a000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}