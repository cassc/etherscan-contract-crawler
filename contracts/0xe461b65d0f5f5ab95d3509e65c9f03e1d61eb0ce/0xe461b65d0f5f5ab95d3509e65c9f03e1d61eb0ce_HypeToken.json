{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n/*\r\n    https://www.hypenometer.com/\r\n    https://twitter.com/hypenometer\r\n    https://t.me/Hypenometer_bot\r\n    https://docs.hypenometer.com/\r\n\r\n    Hypenometer is a Telegram Bot that has its main focus on tracking\r\n    how much a new token is being targeted by the most famous sniper bots out there,\r\n    namely Banana Gun, Maestro, Alphaman and Unibot. Our team has automatic the process\r\n    of gathering information from each of these bots and present them to you in an easy\r\n    to read and easy to use Bot.\r\n\r\n    Plus, we like waifus. Hope you don't mind the theme :3~\r\n    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b2\u2884\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2804\u2802\u2889\u2824\u2810\u280b\u2808\u2821\u2848\u2809\u2810\u2820\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2880\u2840\u28a0\u28e4\u2814\u2801\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28a2\u2800\u2800\u2808\u2831\u2864\u28e4\u2804\u28c0\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2830\u2801\u2800\u28f0\u28ff\u2803\u2800\u28a0\u2803\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2800\u2808\u289e\u28e6\u2840\u2808\u2847\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2887\u28e0\u287f\u2801\u2800\u2880\u2843\u2800\u28c8\u2800\u2800\u2800\u2800\u28b0\u2840\u2800\u2800\u2800\u2800\u28a2\u2830\u2800\u2800\u28ba\u28e7\u28b0\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2808\u28ff\u2801\u2858\u2800\u284c\u2847\u2800\u287f\u2838\u2800\u2800\u2800\u2808\u2855\u2844\u2800\u2810\u2840\u2808\u2800\u2883\u2800\u2800\u283e\u2807\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2807\u2847\u2803\u28a0\u2800\u2836\u2840\u2847\u2883\u2821\u2840\u2800\u2800\u2821\u2808\u2882\u2840\u2881\u2800\u2841\u2838\u2800\u2846\u2818\u2840\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2838\u2800\u28b8\u2800\u2818\u285c\u2800\u28d1\u28b4\u28c0\u2811\u282f\u2842\u2804\u28c0\u28e3\u2880\u28c8\u28ba\u285c\u28a3\u2800\u2846\u2847\u2800\u28a3\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2807\u2800\u28b8\u2800\u2857\u28f0\u287f\u287b\u283f\u2873\u2845\u2800\u2800\u2800\u2800\u2808\u2875\u283f\u283f\u287b\u28f7\u2861\u2847\u2847\u2800\u28b8\u28c7\u2800\u2800\u2800\r\n\u2800\u2800\u28b0\u2800\u2800\u2846\u2844\u28e7\u284f\u2838\u28a0\u28b2\u28b8\u2801\u2800\u2800\u2800\u2800\u2810\u2899\u28b0\u2802\u28a1\u2818\u28c7\u2847\u2803\u2800\u2800\u28b9\u2844\u2800\u2800\r\n\u2800\u2800\u281f\u2800\u2800\u28b0\u2881\u2847\u2807\u2830\u28c0\u2881\u285c\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28c0\u28c1\u280c\u2800\u2803\u2830\u2800\u2800\u2800\u2808\u2830\u2800\u2800\r\n\u2800\u2858\u2800\u2800\u2800\u2800\u288a\u28e4\u2800\u2800\u2824\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2824\u2804\u2800\u28b8\u2803\u2800\u2800\u2800\u2800\u2800\u2803\u2800\r\n\u28a0\u2801\u2880\u2800\u2800\u2800\u2808\u28bf\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2800\r\n\u2818\u2838\u2818\u2840\u2800\u2800\u2800\u2800\u28a3\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2803\u2800\u2800\u2800\u2800\u2880\u280e\u2800\u2800\u2800\u2800\u2800\u28a0\u2800\u2800\u2847\r\n\u2800\u2807\u2886\u2883\u2800\u2800\u2800\u2800\u2800\u284f\u28b2\u28a4\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u2804\u285a\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2800\u2800\u2800\r\n\u28b0\u2808\u288c\u288e\u2886\u2800\u2800\u2800\u2800\u2801\u28cc\u2806\u2870\u2841\u2809\u2809\u2800\u2809\u2801\u2871\u2858\u287c\u2807\u2800\u2800\u2800\u2800\u2880\u28ac\u2803\u28a0\u2800\u2846\r\n\u2800\u28a2\u2800\u2811\u28b5\u28e7\u2840\u2800\u2800\u287f\u2833\u2802\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u28ba\u2840\u2800\u2800\u2880\u28a0\u28ee\u2803\u2880\u2806\u2870\u2800\r\n\u2800\u2800\u2811\u2804\u28c0\u2819\u286d\u2822\u2880\u2840\u2800\u2801\u2804\u28c0\u28c0\u2800\u2880\u28c0\u28c0\u28c0\u2860\u2802\u2883\u2840\u2814\u2831\u285e\u2881\u2804\u28c1\u2814\u2801\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u28a0\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2809\u2801\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\r\n*/\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract HypeToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    uint8 private constant _decimals = 18;\r\n    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    uint256 private constant _tTotal = 1_000_000 * 10**_decimals;\r\n    uint256 private _initialBuyTax=15;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=4;\r\n    uint256 private _finalSellTax=4;\r\n    uint256 private _reduceBuyTaxAt=30;\r\n    uint256 private _reduceSellTaxAt=30;\r\n    uint256 private _buyCount;\r\n    uint256 private _maxWalletSize = _tTotal * 2 / 100;\r\n    uint256 private _taxSwapThreshold= _tTotal / 300;\r\n    uint256 private _maxTaxSwap= _tTotal / 300;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    address private uniswapV2Pair;\r\n    bool private inSwap;\r\n    bool public tradeOpen;\r\n    bool private swapEnabled;\r\n    address payable private _taxWallet;\r\n\r\n    string private constant _name = unicode\"HYPENOMETER\";\r\n    string private constant _symbol = unicode\"HYPE\";\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\r\n        _approve(msg.sender, address(this), type(uint256).max);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint256 taxAmount=0;\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            require(tradeOpen, \"Trading not open\");\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the limit\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the limit\");\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradeOpen);\r\n        swapEnabled = true;\r\n        tradeOpen = true;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxWalletSize=_tTotal;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HypeToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5c362ab29f6c3add27c46f75d051a72be4c96a7b09300c9032a774516a9c7b1"}