{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"IDOFactory_new_flattened.sol\": {\r\n      \"content\": \"\\r\\n// File: IUniswapV2Factory.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function migrator() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function setMigrator(address) external;\\r\\n}\\r\\n// File: IUniswapV2Router01.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n// File: IUniswapV2Router02.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n// File: openzeppelin/contracts/security/ReentrancyGuard.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/utils/Address.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/utils/math/SafeMath.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/ERC20.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n// File: openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n// File: openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n// File: IDOERC20Pool.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract IDOERC20Pool is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    struct FinInfo {\\r\\n        uint256 tokenPrice; // one token in erc20pay WEI\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 minPayment;\\r\\n        uint256 maxPayment;\\r\\n        uint256 listingPrice; // one token in WEI\\r\\n        uint256 lpInterestRate;\\r\\n    }\\r\\n\\r\\n    struct Timestamps {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 unlockTimestamp;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint debt;\\r\\n        uint total;\\r\\n        uint totalInvested;\\r\\n    }\\r\\n\\r\\n    ERC20 public rewardToken;\\r\\n    uint256 public decimals;\\r\\n\\r\\n    ERC20 public payToken;\\r\\n    uint256 public payTokenDecimals;\\r\\n\\r\\n    string public metadataURL;\\r\\n\\r\\n    FinInfo public finInfo;\\r\\n    Timestamps public timestamps;\\r\\n\\r\\n    uint256 public totalInvested;\\r\\n    uint256 public tokensForDistribution;\\r\\n    uint256 public distributedTokens;\\r\\n\\r\\n    bool public distributed = false;\\r\\n\\r\\n    bool public allowRefund = true;\\r\\n    bool public allowSoftWithdraw = false;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    uint256 public contractType = 2;\\r\\n    \\r\\n    event TokensDebt(\\r\\n        address indexed holder,\\r\\n        uint256 payAmount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n\\r\\n    event TokensWithdrawn(address indexed holder, uint256 amount);\\r\\n    \\r\\n    address public factory;\\r\\n    \\r\\n    function setAllowRefund(bool newVal) public onlyOwner {\\r\\n        allowRefund = newVal;\\r\\n    }\\r\\n\\r\\n    function setAllowSoftWithdraw(bool newVal) public onlyOwner {\\r\\n        allowSoftWithdraw = newVal;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        ERC20 _rewardToken,\\r\\n        ERC20 _payToken,\\r\\n        FinInfo memory _finInfo,\\r\\n        Timestamps memory _timestamps,\\r\\n        string memory _metadataURL\\r\\n    ) {\\r\\n        factory = msg.sender;\\r\\n        rewardToken = _rewardToken;\\r\\n        decimals = rewardToken.decimals();\\r\\n\\r\\n        payToken = _payToken;\\r\\n        payTokenDecimals = payToken.decimals();\\r\\n        \\r\\n        finInfo = _finInfo;\\r\\n\\r\\n        setTimestamps(_timestamps);\\r\\n\\r\\n        setMetadataURL(_metadataURL);\\r\\n    }\\r\\n\\r\\n    function setTimestamps(Timestamps memory _timestamps) internal {\\r\\n        require(\\r\\n            _timestamps.startTimestamp < _timestamps.endTimestamp,\\r\\n            \\\"Start timestamp must be less than finish timestamp\\\"\\r\\n        );\\r\\n        require(\\r\\n            _timestamps.endTimestamp > block.timestamp,\\r\\n            \\\"Finish timestamp must be more than current block\\\"\\r\\n        );\\r\\n\\r\\n        timestamps = _timestamps;\\r\\n    }\\r\\n\\r\\n    function setMetadataURL(string memory _metadataURL) public{\\r\\n        metadataURL = _metadataURL;\\r\\n    }\\r\\n\\r\\n    function pay(uint256 amount) external {\\r\\n        require(block.timestamp >= timestamps.startTimestamp, \\\"Not started\\\");\\r\\n        require(block.timestamp < timestamps.endTimestamp, \\\"Ended\\\");\\r\\n\\r\\n        require(amount >= finInfo.minPayment, \\\"Less then min amount\\\");\\r\\n        require(amount <= finInfo.maxPayment, \\\"More then max amount\\\");\\r\\n        require(totalInvested.add(amount) <= finInfo.hardCap, \\\"Overfilled\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.totalInvested.add(amount) <= finInfo.maxPayment, \\\"More then max amount\\\");\\r\\n        // @to-do - check allowance\\r\\n\\r\\n        uint256 tokenAmount = getTokenAmount(amount, finInfo.tokenPrice);\\r\\n\\r\\n        payToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        totalInvested = totalInvested.add(amount);\\r\\n        tokensForDistribution = tokensForDistribution.add(tokenAmount);\\r\\n        user.totalInvested = user.totalInvested.add(amount);\\r\\n        user.total = user.total.add(tokenAmount);\\r\\n        user.debt = user.debt.add(tokenAmount);\\r\\n\\r\\n        emit TokensDebt(msg.sender, amount, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function refund() external {\\r\\n        require(allowRefund, \\\"Refund not enabled\\\");\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvested < finInfo.softCap, \\\"The IDO pool has reach soft cap.\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        uint256 _amount = user.totalInvested;\\r\\n        require(_amount > 0 , \\\"You have no investment.\\\");\\r\\n\\r\\n        user.debt = 0;\\r\\n        user.totalInvested = 0;\\r\\n        user.total = 0;\\r\\n\\r\\n        payToken.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to claim tokens for the specific user.\\r\\n    /// @param _user Token receiver.\\r\\n    function claimFor(address _user) external {\\r\\n        proccessClaim(_user);\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to claim tokens for themselves.\\r\\n    function claim() external {\\r\\n        proccessClaim(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @dev Proccess the claim.\\r\\n    /// @param _receiver Token receiver.\\r\\n    function proccessClaim(\\r\\n        address _receiver\\r\\n    ) internal nonReentrant{\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        if (!allowSoftWithdraw) {\\r\\n            require(totalInvested >= finInfo.softCap, \\\"The IDO pool did not reach soft cap.\\\");\\r\\n        }\\r\\n\\r\\n        UserInfo storage user = userInfo[_receiver];\\r\\n\\r\\n        uint256 _amount = user.debt;\\r\\n        require(_amount > 0 , \\\"You do not have debt tokens.\\\");\\r\\n\\r\\n        user.debt = 0;\\r\\n        distributedTokens = distributedTokens.add(_amount);\\r\\n        rewardToken.safeTransfer(_receiver, _amount);\\r\\n        emit TokensWithdrawn(_receiver,_amount);\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        if (!allowSoftWithdraw) {\\r\\n            require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n            require(totalInvested >= finInfo.softCap, \\\"The IDO pool did not reach soft cap.\\\");\\r\\n            require(!distributed, \\\"Already distributed.\\\");\\r\\n        }\\r\\n\\r\\n        uint256 balance = payToken.balanceOf(address(this));\\r\\n\\r\\n        payToken.safeTransfer(msg.sender, balance);\\r\\n\\r\\n        if (!allowSoftWithdraw) distributed = true;\\r\\n    }\\r\\n\\r\\n     function withdrawNotSoldTokens() external onlyOwner {\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        if (!allowSoftWithdraw) {\\r\\n            require(distributed, \\\"Withdraw allowed after distributed.\\\");\\r\\n        }\\r\\n\\r\\n        uint256 balance = getNotSoldToken();\\r\\n        require(balance > 0, \\\"The IDO pool has not unsold tokens.\\\");\\r\\n        rewardToken.safeTransfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function getNotSoldToken() public view returns(uint256){\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        return balance.add(distributedTokens).sub(tokensForDistribution);\\r\\n    }\\r\\n\\r\\n    function refundTokens() external onlyOwner {\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvested < finInfo.softCap, \\\"The IDO pool has reach soft cap.\\\");\\r\\n\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"The IDO pool has not refund tokens.\\\");\\r\\n        rewardToken.safeTransfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTokenAmount(\\r\\n        uint256 amount,\\r\\n        uint256 rate\\r\\n    ) internal view returns (uint256) {\\r\\n        return (\\r\\n            rate\\r\\n            * ((decimals > 0) ? 10**decimals : 1)\\r\\n            * amount\\r\\n        ) / ((payTokenDecimals > 0) ? 10**payTokenDecimals : 1);\\r\\n    }\\r\\n    /**\\r\\n     * @notice It allows the owner to recover wrong tokens sent to the contract\\r\\n     * @param _tokenAddress: the address of the token to withdraw with the exception of rewardToken\\r\\n     * @param _tokenAmount: the number of token amount to withdraw\\r\\n     * @dev Only callable by owner.\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\r\\n        require(_tokenAddress != address(rewardToken));\\r\\n        ERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\r\\n    }\\r\\n}\\r\\n// File: TokenLocker.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract TokenLocker is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    ERC20 public token;\\r\\n    address public withdrawer;\\r\\n    uint256 public withdrawTime;\\r\\n    string public name;\\r\\n\\r\\n    event withdrawTokenEvent(uint256 timestamp, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        ERC20 _token,\\r\\n        string memory _name,\\r\\n        address _withdrawer,\\r\\n        uint256 _withdrawTime\\r\\n    ){\\r\\n        require(_withdrawTime > block.timestamp, \\\"withdraw time should be more than now\\\");\\r\\n\\r\\n        token = _token;\\r\\n        name = _name;\\r\\n        withdrawer = _withdrawer;\\r\\n        withdrawTime = _withdrawTime;\\r\\n    }\\r\\n\\r\\n    function withdrawToken(uint256 amount) public{\\r\\n        require(amount >= token.balanceOf(address(this)), \\\"Withdraw amount is exceed balance\\\");\\r\\n        require(msg.sender == withdrawer, \\\"You are not withdrawer\\\");\\r\\n        require(block.timestamp > withdrawTime, \\\"Not time yet\\\");\\r\\n        token.transfer(msg.sender, amount);\\r\\n            emit withdrawTokenEvent(block.timestamp, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokenAll() public{\\r\\n        require(msg.sender == withdrawer, \\\"You are not withdrawer\\\");\\r\\n        require(block.timestamp > withdrawTime, \\\"Not time yet\\\");\\r\\n        uint256 amount = token.balanceOf(address(this));\\r\\n        token.transfer(msg.sender, amount);\\r\\n        emit withdrawTokenEvent(block.timestamp, amount);\\r\\n    }\\r\\n\\r\\n    function tokenRemaining() public view returns(uint256){\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n}\\r\\n// File: TokenLockerFactory.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface IDOFactoryInterface {\\r\\n    function isIdoAddress(address _address) external view returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\ncontract TokenLockerFactory is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 public lockerCount = 0;\\r\\n    uint256 public fee = 0;\\r\\n\\r\\n    bool public onlyOwnerCreate = false;\\r\\n\\r\\n    function setOnlyOwnerCreate(bool newVal) public onlyOwner {\\r\\n        onlyOwnerCreate = newVal;\\r\\n    }\\r\\n\\r\\n    struct lockerInfo {\\r\\n        uint256 lockerId;\\r\\n        address tokenAddress;\\r\\n        address creator;\\r\\n        uint256 ramaining;\\r\\n        address withdrawer;\\r\\n        uint256 withdrawTime;\\r\\n    }\\r\\n\\r\\n    address[] public lockerAddresses;\\r\\n\\r\\n    event LockerCreated(uint256 lockerId, address indexed lockerAddress, address tokenAddress);\\r\\n\\r\\n    IDOFactoryInterface public idoFactory;\\r\\n\\r\\n    constructor(address _idoFactory){\\r\\n        idoFactory = IDOFactoryInterface(_idoFactory);\\r\\n    }\\r\\n    function setIDOFactory(address _idoFactory) public onlyOwner {\\r\\n        idoFactory = IDOFactoryInterface(_idoFactory);\\r\\n    }\\r\\n\\r\\n    function canCreateIdo() private view returns (bool) {\\r\\n        if (!onlyOwnerCreate) return true;\\r\\n        if (msg.sender == this.owner()) return true;\\r\\n        if (idoFactory.isIdoAddress(msg.sender)) return true;\\r\\n        return false;\\r\\n    }\\r\\n    function getLockerAddresses() public view returns (address[] memory) {\\r\\n      return lockerAddresses;\\r\\n    }\\r\\n\\r\\n    function createLocker(\\r\\n        ERC20 _tokenAddress,\\r\\n        string memory _name,\\r\\n        uint256 _lockAmount,\\r\\n        address _withdrawer,\\r\\n        uint256 _withdrawTime\\r\\n    ) payable public returns(address){\\r\\n        require(canCreateIdo() == true, 'Not allow create IDO for you');\\r\\n        require(msg.value == fee, 'Fee amount is required');\\r\\n\\r\\n        TokenLocker tokenLocker = new TokenLocker(_tokenAddress, _name, _withdrawer, _withdrawTime);\\r\\n        tokenLocker.transferOwnership(msg.sender);\\r\\n\\r\\n        _tokenAddress.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(tokenLocker),\\r\\n                _lockAmount\\r\\n            );\\r\\n\\r\\n        lockerAddresses.push(address(tokenLocker));\\r\\n\\r\\n        emit LockerCreated(lockerCount, address(tokenLocker), address(_tokenAddress));\\r\\n        lockerCount++;\\r\\n        return address(tokenLocker);\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdrawFee() public onlyOwner{\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 amount) public onlyOwner{\\r\\n        fee = amount;\\r\\n    }\\r\\n}\\r\\n// File: IDOPool.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract IDOPool is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    struct FinInfo {\\r\\n        uint256 tokenPrice; // one token in WEI\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 minEthPayment;\\r\\n        uint256 maxEthPayment;\\r\\n        uint256 listingPrice; // one token in WEI\\r\\n        uint256 lpInterestRate;\\r\\n    }\\r\\n\\r\\n    struct Timestamps {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 unlockTimestamp;\\r\\n    }\\r\\n\\r\\n    struct DEXInfo {\\r\\n        address router;\\r\\n        address factory;\\r\\n        address weth;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint debt;\\r\\n        uint total;\\r\\n        uint totalInvestedETH;\\r\\n    }\\r\\n\\r\\n    ERC20 public rewardToken;\\r\\n    uint256 public decimals;\\r\\n    string public metadataURL;\\r\\n\\r\\n    FinInfo public finInfo;\\r\\n    Timestamps public timestamps;\\r\\n    DEXInfo public dexInfo;\\r\\n\\r\\n    TokenLockerFactory public lockerFactory;\\r\\n\\r\\n    uint256 public totalInvestedETH;\\r\\n    uint256 public tokensForDistribution;\\r\\n    uint256 public distributedTokens;\\r\\n\\r\\n    bool public distributed = false;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event TokensDebt(\\r\\n        address indexed holder,\\r\\n        uint256 ethAmount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n\\r\\n    event TokensWithdrawn(address indexed holder, uint256 amount);\\r\\n\\r\\n    uint256 public contractType = 1;\\r\\n\\r\\n    address public factory;\\r\\n\\r\\n    constructor(\\r\\n        ERC20 _rewardToken,\\r\\n        FinInfo memory _finInfo,\\r\\n        Timestamps memory _timestamps,\\r\\n        DEXInfo memory _dexInfo,\\r\\n        address _lockerFactoryAddress,\\r\\n        string memory _metadataURL\\r\\n    ) {\\r\\n        factory = msg.sender;\\r\\n        \\r\\n        rewardToken = _rewardToken;\\r\\n        decimals = rewardToken.decimals();\\r\\n        lockerFactory = TokenLockerFactory(_lockerFactoryAddress);\\r\\n\\r\\n        finInfo = _finInfo;\\r\\n\\r\\n        setTimestamps(_timestamps);\\r\\n\\r\\n        dexInfo = _dexInfo;\\r\\n\\r\\n        setMetadataURL(_metadataURL);\\r\\n    }\\r\\n\\r\\n    function setTimestamps(Timestamps memory _timestamps) internal {\\r\\n        require(\\r\\n            _timestamps.startTimestamp < _timestamps.endTimestamp,\\r\\n            \\\"Start timestamp must be less than finish timestamp\\\"\\r\\n        );\\r\\n        require(\\r\\n            _timestamps.endTimestamp > block.timestamp,\\r\\n            \\\"Finish timestamp must be more than current block\\\"\\r\\n        );\\r\\n\\r\\n        timestamps = _timestamps;\\r\\n    }\\r\\n\\r\\n    function setMetadataURL(string memory _metadataURL) public{\\r\\n        metadataURL = _metadataURL;\\r\\n    }\\r\\n\\r\\n    function pay() payable external {\\r\\n        require(block.timestamp >= timestamps.startTimestamp, \\\"Not started\\\");\\r\\n        require(block.timestamp < timestamps.endTimestamp, \\\"Ended\\\");\\r\\n\\r\\n        require(msg.value >= finInfo.minEthPayment, \\\"Less then min amount\\\");\\r\\n        require(msg.value <= finInfo.maxEthPayment, \\\"More then max amount\\\");\\r\\n        require(totalInvestedETH.add(msg.value) <= finInfo.hardCap, \\\"Overfilled\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.totalInvestedETH.add(msg.value) <= finInfo.maxEthPayment, \\\"More then max amount\\\");\\r\\n\\r\\n        uint256 tokenAmount = getTokenAmount(msg.value, finInfo.tokenPrice);\\r\\n\\r\\n        totalInvestedETH = totalInvestedETH.add(msg.value);\\r\\n        tokensForDistribution = tokensForDistribution.add(tokenAmount);\\r\\n        user.totalInvestedETH = user.totalInvestedETH.add(msg.value);\\r\\n        user.total = user.total.add(tokenAmount);\\r\\n        user.debt = user.debt.add(tokenAmount);\\r\\n\\r\\n        emit TokensDebt(msg.sender, msg.value, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function refund() external {\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvestedETH < finInfo.softCap, \\\"The IDO pool has reach soft cap.\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        uint256 _amount = user.totalInvestedETH;\\r\\n        require(_amount > 0 , \\\"You have no investment.\\\");\\r\\n\\r\\n        user.debt = 0;\\r\\n        user.totalInvestedETH = 0;\\r\\n        user.total = 0;\\r\\n\\r\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to claim tokens for the specific user.\\r\\n    /// @param _user Token receiver.\\r\\n    function claimFor(address _user) external {\\r\\n        proccessClaim(_user);\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to claim tokens for themselves.\\r\\n    function claim() external {\\r\\n        proccessClaim(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @dev Proccess the claim.\\r\\n    /// @param _receiver Token receiver.\\r\\n    function proccessClaim(\\r\\n        address _receiver\\r\\n    ) internal nonReentrant{\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvestedETH >= finInfo.softCap, \\\"The IDO pool did not reach soft cap.\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[_receiver];\\r\\n\\r\\n        uint256 _amount = user.debt;\\r\\n        require(_amount > 0 , \\\"You do not have debt tokens.\\\");\\r\\n\\r\\n        user.debt = 0;\\r\\n        distributedTokens = distributedTokens.add(_amount);\\r\\n        rewardToken.safeTransfer(_receiver, _amount);\\r\\n        emit TokensWithdrawn(_receiver,_amount);\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external payable onlyOwner {\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvestedETH >= finInfo.softCap, \\\"The IDO pool did not reach soft cap.\\\");\\r\\n        require(!distributed, \\\"Already distributed.\\\");\\r\\n\\r\\n        // This forwards all available gas. Be sure to check the return value!\\r\\n        uint256 balance = address(this).balance;\\r\\n\\r\\n        if ( finInfo.lpInterestRate > 0 && finInfo.listingPrice > 0 ) {\\r\\n            // if TokenLockerFactory has fee we should provide there fee by msg.value and sub it from balance for correct execution\\r\\n            balance -= msg.value;\\r\\n            uint256 ethForLP = (balance * finInfo.lpInterestRate)/100;\\r\\n            uint256 ethWithdraw = balance - ethForLP;\\r\\n\\r\\n            uint256 tokenAmount = getTokenAmount(ethForLP, finInfo.listingPrice);\\r\\n\\r\\n            // Add Liquidity ETH\\r\\n            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(dexInfo.router);\\r\\n            rewardToken.approve(address(uniswapRouter), tokenAmount);\\r\\n            (,, uint liquidity) = uniswapRouter.addLiquidityETH{value: ethForLP}(\\r\\n                address(rewardToken),\\r\\n                tokenAmount,\\r\\n                0, // slippage is unavoidable\\r\\n                0, // slippage is unavoidable\\r\\n                address(this),\\r\\n                block.timestamp + 360\\r\\n            );\\r\\n\\r\\n            // Lock LP Tokens\\r\\n            (address lpTokenAddress) = IUniswapV2Factory(dexInfo.factory).getPair(address(rewardToken), dexInfo.weth);\\r\\n\\r\\n            ERC20 lpToken = ERC20(lpTokenAddress);\\r\\n\\r\\n            if (timestamps.unlockTimestamp > block.timestamp) {\\r\\n                lpToken.approve(address(lockerFactory), liquidity);\\r\\n                lockerFactory.createLocker{value: msg.value}(\\r\\n                    lpToken,\\r\\n                    string.concat(lpToken.symbol(), \\\" tokens locker\\\"),\\r\\n                    liquidity, msg.sender, timestamps.unlockTimestamp\\r\\n                );\\r\\n            } else {\\r\\n                lpToken.transfer(msg.sender, liquidity);\\r\\n                // return msg.value along with eth to output if someone sent it wrong\\r\\n                ethWithdraw += msg.value;\\r\\n            }\\r\\n\\r\\n            // Withdraw rest ETH\\r\\n            (bool success, ) = msg.sender.call{value: ethWithdraw}(\\\"\\\");\\r\\n            require(success, \\\"Transfer failed.\\\");\\r\\n        } else {\\r\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\r\\n            require(success, \\\"Transfer failed.\\\");\\r\\n        }\\r\\n\\r\\n        distributed = true;\\r\\n    }\\r\\n\\r\\n     function withdrawNotSoldTokens() external onlyOwner {\\r\\n        require(distributed, \\\"Withdraw allowed after distributed.\\\");\\r\\n\\r\\n        uint256 balance = getNotSoldToken();\\r\\n        require(balance > 0, \\\"The IDO pool has not unsold tokens.\\\");\\r\\n        rewardToken.safeTransfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function getNotSoldToken() public view returns(uint256){\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        return balance.add(distributedTokens).sub(tokensForDistribution);\\r\\n    }\\r\\n\\r\\n    function refundTokens() external onlyOwner {\\r\\n        require(block.timestamp > timestamps.endTimestamp, \\\"The IDO pool has not ended.\\\");\\r\\n        require(totalInvestedETH < finInfo.softCap, \\\"The IDO pool has reach soft cap.\\\");\\r\\n\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"The IDO pool has not refund tokens.\\\");\\r\\n        rewardToken.safeTransfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function getTokenAmount(uint256 ethAmount, uint256 oneTokenInWei)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (ethAmount / oneTokenInWei) * 10**decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the owner to recover wrong tokens sent to the contract\\r\\n     * @param _tokenAddress: the address of the token to withdraw with the exception of rewardToken\\r\\n     * @param _tokenAmount: the number of token amount to withdraw\\r\\n     * @dev Only callable by owner.\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\r\\n        require(_tokenAddress != address(rewardToken));\\r\\n        ERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\r\\n    }\\r\\n}\\r\\n// File: IDOFactory.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract IDOFactory is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20Burnable;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 public version = 2;\\r\\n\\r\\n    ERC20Burnable public feeToken;\\r\\n    address public feeWallet;\\r\\n    uint256 public feeAmount;\\r\\n    uint256 public burnPercent; // use this state only if your token is ERC20Burnable and has burnFrom method\\r\\n    uint256 public divider;\\r\\n\\r\\n    bool public onlyOwnerCreate = false;\\r\\n\\r\\n    function setOnlyOwnerCreate(bool _onlyOwnerCreate) external onlyOwner {\\r\\n        onlyOwnerCreate = _onlyOwnerCreate;\\r\\n    }\\r\\n\\r\\n    address[] public idoPools;\\r\\n    mapping (address => bool) public idoPoolsMap;\\r\\n    function isIdoAddress(address _address) public view returns (bool) {\\r\\n        return idoPoolsMap[_address];\\r\\n    }\\r\\n\\r\\n    event IDOCreated(\\r\\n        address indexed owner,\\r\\n        address idoPool,\\r\\n        address indexed rewardToken,\\r\\n        string tokenURI\\r\\n    );\\r\\n\\r\\n    event TokenFeeUpdated(address newFeeToken);\\r\\n    event FeeAmountUpdated(uint256 newFeeAmount);\\r\\n    event BurnPercentUpdated(uint256 newBurnPercent, uint256 divider);\\r\\n    event FeeWalletUpdated(address newFeeWallet);\\r\\n\\r\\n    constructor(\\r\\n        ERC20Burnable _feeToken,\\r\\n        uint256 _feeAmount,\\r\\n        uint256 _burnPercent\\r\\n    ){\\r\\n        feeToken = _feeToken;\\r\\n        feeAmount = _feeAmount;\\r\\n        burnPercent = _burnPercent;\\r\\n        divider = 100;\\r\\n    }\\r\\n\\r\\n    function getIdoPools() public view returns (address[] memory) {\\r\\n      return idoPools;\\r\\n    }\\r\\n\\r\\n    function setFeeToken(address _newFeeToken) external onlyOwner {\\r\\n        require(isContract(_newFeeToken), \\\"New address is not a token\\\");\\r\\n        feeToken = ERC20Burnable(_newFeeToken);\\r\\n\\r\\n        emit TokenFeeUpdated(_newFeeToken);\\r\\n    }\\r\\n\\r\\n    function setFeeAmount(uint256 _newFeeAmount) external onlyOwner {\\r\\n        feeAmount = _newFeeAmount;\\r\\n\\r\\n        emit FeeAmountUpdated(_newFeeAmount);\\r\\n    }\\r\\n\\r\\n    function setFeeWallet(address _newFeeWallet) external onlyOwner {\\r\\n        feeWallet = _newFeeWallet;\\r\\n\\r\\n        emit FeeWalletUpdated(_newFeeWallet);\\r\\n    }\\r\\n\\r\\n    function setBurnPercent(uint256 _newBurnPercent, uint256 _newDivider)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_newBurnPercent <= _newDivider, \\\"Burn percent must be less than divider\\\");\\r\\n        burnPercent = _newBurnPercent;\\r\\n        divider = _newDivider;\\r\\n\\r\\n        emit BurnPercentUpdated(_newBurnPercent, _newDivider);\\r\\n    }\\r\\n\\r\\n    function createIDO(\\r\\n        ERC20 _rewardToken,\\r\\n        IDOPool.FinInfo memory _finInfo,\\r\\n        IDOPool.Timestamps memory _timestamps,\\r\\n        IDOPool.DEXInfo memory _dexInfo,\\r\\n        address _lockerFactoryAddress,\\r\\n        string memory _metadataURL\\r\\n    ) external {\\r\\n        if (onlyOwnerCreate) {\\r\\n            require(msg.sender == this.owner(), \\\"Only owner can create IDOPool\\\");\\r\\n        }\\r\\n        IDOPool idoPool =\\r\\n            new IDOPool(\\r\\n                _rewardToken,\\r\\n                _finInfo,\\r\\n                _timestamps,\\r\\n                _dexInfo,\\r\\n                _lockerFactoryAddress,\\r\\n                _metadataURL\\r\\n            );\\r\\n\\r\\n        idoPool.transferOwnership(msg.sender);\\r\\n\\r\\n        uint8 tokenDecimals = _rewardToken.decimals();\\r\\n\\r\\n        uint256 transferAmount = getTokenAmount(_finInfo.hardCap, _finInfo.tokenPrice, tokenDecimals);\\r\\n\\r\\n        if (_finInfo.lpInterestRate > 0 && _finInfo.listingPrice > 0) {\\r\\n            transferAmount += getTokenAmount(_finInfo.hardCap * _finInfo.lpInterestRate / 100, _finInfo.listingPrice, tokenDecimals);\\r\\n        }\\r\\n\\r\\n        processIDOCreate(\\r\\n            transferAmount,\\r\\n            _rewardToken,\\r\\n            address(idoPool),\\r\\n            _metadataURL\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createIDOERC20(\\r\\n        uint256 transferAmount,\\r\\n        ERC20 _rewardToken,\\r\\n        ERC20 _payToken,\\r\\n        IDOERC20Pool.FinInfo memory _finInfo,\\r\\n        IDOERC20Pool.Timestamps memory _timestamps,\\r\\n        string memory _metadataURL,\\r\\n        bool allowSoftWithdraw\\r\\n    ) external {\\r\\n        if (onlyOwnerCreate) {\\r\\n            require(msg.sender == this.owner(), \\\"Only owner can create IDOPool\\\");\\r\\n        }\\r\\n        IDOERC20Pool idoPool =\\r\\n            new IDOERC20Pool(\\r\\n                _rewardToken,\\r\\n                _payToken,\\r\\n                _finInfo,\\r\\n                _timestamps,\\r\\n                _metadataURL\\r\\n            );\\r\\n        if (allowSoftWithdraw) {\\r\\n            idoPool.setAllowRefund(false);\\r\\n            idoPool.setAllowSoftWithdraw(true);\\r\\n        }\\r\\n        idoPool.transferOwnership(msg.sender);\\r\\n\\r\\n        processIDOCreate(\\r\\n            transferAmount,\\r\\n            _rewardToken,\\r\\n            address(idoPool),\\r\\n            _metadataURL\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function processIDOCreate(\\r\\n        uint256 transferAmount,\\r\\n        ERC20 _rewardToken,\\r\\n        address idoPoolAddress,\\r\\n        string memory _metadataURL\\r\\n    ) private {\\r\\n\\r\\n        _rewardToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            idoPoolAddress,\\r\\n            transferAmount\\r\\n        );\\r\\n        \\r\\n        idoPools.push(idoPoolAddress);\\r\\n\\r\\n        emit IDOCreated(\\r\\n            msg.sender,\\r\\n            idoPoolAddress,\\r\\n            address(_rewardToken),\\r\\n            _metadataURL\\r\\n        );\\r\\n\\r\\n\\r\\n        if(feeAmount > 0){\\r\\n            if (burnPercent > 0){\\r\\n                uint256 burnAmount = feeAmount.mul(burnPercent).div(divider);\\r\\n\\r\\n                feeToken.safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    feeWallet,\\r\\n                    feeAmount.sub(burnAmount)\\r\\n                );\\r\\n\\r\\n                feeToken.burnFrom(msg.sender, burnAmount);\\r\\n            } else {\\r\\n                feeToken.safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    feeWallet,\\r\\n                    feeAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAmount(uint256 ethAmount, uint256 oneTokenInWei, uint8 decimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (ethAmount / oneTokenInWei) * 10**decimals;\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divider\",\"type\":\"uint256\"}],\"name\":\"BurnPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"idoPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"IDOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeToken\",\"type\":\"address\"}],\"name\":\"TokenFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEthPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpInterestRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IDOPool.FinInfo\",\"name\":\"_finInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDOPool.Timestamps\",\"name\":\"_timestamps\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"internalType\":\"struct IDOPool.DEXInfo\",\"name\":\"_dexInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_lockerFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURL\",\"type\":\"string\"}],\"name\":\"createIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_payToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpInterestRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IDOERC20Pool.FinInfo\",\"name\":\"_finInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDOERC20Pool.Timestamps\",\"name\":\"_timestamps\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_metadataURL\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowSoftWithdraw\",\"type\":\"bool\"}],\"name\":\"createIDOERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdoPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idoPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"idoPoolsMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isIdoAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCreate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBurnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDivider\",\"type\":\"uint256\"}],\"name\":\"setBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeToken\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCreate\",\"type\":\"bool\"}],\"name\":\"setOnlyOwnerCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IDOFactory", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000097666650818ddd3a2922193c803bcbb47cef1a9700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}