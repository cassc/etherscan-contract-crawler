{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\ncontract BuilderShop {\r\n   address[] builderInstances;\r\n   uint contractId = 0;\r\n\r\n   //nifty registry is hard coded\r\n   address niftyRegistryContract = 0x6e53130dDfF21E3BC963Ee902005223b9A202106;\r\n\r\n   modifier onlyValidSender() {\r\n       NiftyRegistry nftg_registry = NiftyRegistry(niftyRegistryContract);\r\n       bool is_valid = nftg_registry.isValidNiftySender(msg.sender);\r\n       require(is_valid==true);\r\n       _;\r\n   }\r\n\r\n   mapping (address => bool) public BuilderShops;\r\n\r\n   function isValidBuilderShop(address builder_shop) public view returns (bool isValid) {\r\n       //public function, allowing anyone to check if a contract address is a valid nifty gateway contract\r\n       return(BuilderShops[builder_shop]);\r\n   }\r\n\r\n   event BuilderInstanceCreated(address new_contract_address, uint contractId);\r\n\r\n   function createNewBuilderInstance(\r\n       string memory _name,\r\n       string memory _symbol,\r\n       uint num_nifties,\r\n       string memory token_base_uri,\r\n       string memory creator_name)\r\n       public returns (NiftyBuilderInstance tokenAddress) { // <- must replace this !!!\r\n   //public onlyValidSender returns (NiftyBuilderInstance tokenAddress) {\r\n\r\n       contractId = contractId + 1;\r\n\r\n       NiftyBuilderInstance new_contract = new NiftyBuilderInstance(\r\n           _name,\r\n           _symbol,\r\n           contractId,\r\n           num_nifties,\r\n           token_base_uri,\r\n           creator_name\r\n       );\r\n\r\n       address externalId = address(new_contract);\r\n\r\n       BuilderShops[externalId] = true;\r\n\r\n       emit BuilderInstanceCreated(externalId, contractId);\r\n\r\n       return (new_contract);\r\n    }\r\n}\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with GSN meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\ncontract Context {\r\n   // Empty internal constructor, to prevent people from mistakenly deploying\r\n   // an instance of this contract, which should be used via inheritance.\r\n   constructor () internal { }\r\n   // solhint-disable-previous-line no-empty-blocks\r\n\r\n   function _msgSender() internal view returns (address payable) {\r\n       return msg.sender;\r\n   }\r\n\r\n   function _msgData() internal view returns (bytes memory) {\r\n       this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n       return msg.data;\r\n   }\r\n}\r\n\r\n/**\r\n* @dev Interface of the ERC165 standard, as defined in the\r\n* https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n*\r\n* Implementers can declare support of contract interfaces, which can then be\r\n* queried by others ({ERC165Checker}).\r\n*\r\n* For an implementation, see {ERC165}.\r\n*/\r\ninterface IERC165 {\r\n   /**\r\n    * @dev Returns true if this contract implements the interface defined by\r\n    * `interfaceId`. See the corresponding\r\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n    * to learn more about how these ids are created.\r\n    *\r\n    * This function call must use less than 30 000 gas.\r\n    */\r\n   function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n* @dev Implementation of the {IERC165} interface.\r\n*\r\n* Contracts may inherit from this and call {_registerInterface} to declare\r\n* their support of an interface.\r\n*/\r\ncontract ERC165 is IERC165 {\r\n   /*\r\n    * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n    */\r\n   bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n   /**\r\n    * @dev Mapping of interface ids to whether or not it's supported.\r\n    */\r\n   mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n   constructor () internal {\r\n       // Derived contracts need only register support for their own interfaces,\r\n       // we register support for ERC165 itself here\r\n       _registerInterface(_INTERFACE_ID_ERC165);\r\n   }\r\n\r\n   /**\r\n    * @dev See {IERC165-supportsInterface}.\r\n    *\r\n    * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n    */\r\n   function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n       return _supportedInterfaces[interfaceId];\r\n   }\r\n\r\n   /**\r\n    * @dev Registers the contract as an implementer of the interface defined by\r\n    * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n    * registering its interface id is not required.\r\n    *\r\n    * See {IERC165-supportsInterface}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n    */\r\n   function _registerInterface(bytes4 interfaceId) internal {\r\n       require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n       _supportedInterfaces[interfaceId] = true;\r\n   }\r\n}\r\n\r\n/**\r\n* @dev Required interface of an ERC721 compliant contract.\r\n*/\r\ncontract IERC721 is IERC165 {\r\n   event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n   event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n   event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n   /**\r\n    * @dev Returns the number of NFTs in `owner`'s account.\r\n    */\r\n   function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n   /**\r\n    * @dev Returns the owner of the NFT specified by `tokenId`.\r\n    */\r\n   function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n   /**\r\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    *\r\n    *\r\n    * Requirements:\r\n    * - `from`, `to` cannot be zero.\r\n    * - `tokenId` must be owned by `from`.\r\n    * - If the caller is not `from`, it must be have been allowed to move this\r\n    * NFT by either {approve} or {setApprovalForAll}.\r\n    */\r\n   function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n   /**\r\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Requirements:\r\n    * - If the caller is not `from`, it must be approved to move this NFT by\r\n    * either {approve} or {setApprovalForAll}.\r\n    */\r\n   function transferFrom(address from, address to, uint256 tokenId) public;\r\n   function approve(address to, uint256 tokenId) public;\r\n   function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n   function setApprovalForAll(address operator, bool _approved) public;\r\n   function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n   function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n* @title ERC721 token receiver interface\r\n* @dev Interface for any contract that wants to support safeTransfers\r\n* from ERC721 asset contracts.\r\n*/\r\ncontract IERC721Receiver {\r\n   /**\r\n    * @notice Handle the receipt of an NFT\r\n    * @dev The ERC721 smart contract calls this function on the recipient\r\n    * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n    * otherwise the caller will revert the transaction. The selector to be\r\n    * returned can be obtained as `this.onERC721Received.selector`. This\r\n    * function MAY throw to revert and reject the transfer.\r\n    * Note: the ERC721 contract address is always the message sender.\r\n    * @param operator The address which called `safeTransferFrom` function\r\n    * @param from The address which previously owned the token\r\n    * @param tokenId The NFT identifier which is being transferred\r\n    * @param data Additional data with no specified format\r\n    * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    */\r\n   function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n   public returns (bytes4);\r\n}\r\n\r\n/**\r\n* @title ERC721 Non-Fungible Token Standard basic implementation\r\n* @dev see https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n   using SafeMath for uint256;\r\n   using Address for address;\r\n   using Counters for Counters.Counter;\r\n\r\n   // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n   bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n   // Mapping from token ID to owner\r\n   mapping (uint256 => address) private _tokenOwner;\r\n\r\n   // Mapping from token ID to approved address\r\n   mapping (uint256 => address) private _tokenApprovals;\r\n\r\n   // Mapping from owner to number of owned token\r\n   mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n   // Mapping from owner to operator approvals\r\n   mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n   /*\r\n    *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n    *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n    *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n    *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n    *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n    *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n    *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n    *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n    *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n    *\r\n    *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n    *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n    */\r\n   bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n   constructor () public {\r\n       // register the supported interfaces to conform to ERC721 via ERC165\r\n       _registerInterface(_INTERFACE_ID_ERC721);\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n   function balanceOf(address owner) public view returns (uint256) {\r\n       require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n       return _ownedTokensCount[owner].current();\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the owner of the specified token ID.\r\n    * @param tokenId uint256 ID of the token to query the owner of\r\n    * @return address currently marked as the owner of the given token ID\r\n    */\r\n   function ownerOf(uint256 tokenId) public view returns (address) {\r\n       address owner = _tokenOwner[tokenId];\r\n       require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n       return owner;\r\n   }\r\n\r\n   /**\r\n    * @dev Approves another address to transfer the given token ID\r\n    * The zero address indicates there is no approved address.\r\n    * There can only be one approved address per token at a given time.\r\n    * Can only be called by the token owner or an approved operator.\r\n    * @param to address to be approved for the given token ID\r\n    * @param tokenId uint256 ID of the token to be approved\r\n    */\r\n   function approve(address to, uint256 tokenId) public {\r\n       address owner = ownerOf(tokenId);\r\n       require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n       require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n           \"ERC721: approve caller is not owner nor approved for all\"\r\n       );\r\n\r\n       _tokenApprovals[tokenId] = to;\r\n       emit Approval(owner, to, tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the approved address for a token ID, or zero if no address set\r\n    * Reverts if the token ID does not exist.\r\n    * @param tokenId uint256 ID of the token to query the approval of\r\n    * @return address currently approved for the given token ID\r\n    */\r\n   function getApproved(uint256 tokenId) public view returns (address) {\r\n       require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n       return _tokenApprovals[tokenId];\r\n   }\r\n\r\n   /**\r\n    * @dev Sets or unsets the approval of a given operator\r\n    * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n    * @param to operator address to set the approval\r\n    * @param approved representing the status of the approval to be set\r\n    */\r\n   function setApprovalForAll(address to, bool approved) public {\r\n       require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n       _operatorApprovals[_msgSender()][to] = approved;\r\n       emit ApprovalForAll(_msgSender(), to, approved);\r\n   }\r\n\r\n   /**\r\n    * @dev Tells whether an operator is approved by a given owner.\r\n    * @param owner owner address which you want to query the approval of\r\n    * @param operator operator address which you want to query the approval of\r\n    * @return bool whether the given operator is approved by the given owner\r\n    */\r\n   function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n       return _operatorApprovals[owner][operator];\r\n   }\r\n\r\n   /**\r\n    * @dev Transfers the ownership of a given token ID to another address.\r\n    * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n    * Requires the msg.sender to be the owner, approved, or operator.\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n   function transferFrom(address from, address to, uint256 tokenId) public {\r\n       //solhint-disable-next-line max-line-length\r\n       require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n       _transferFrom(from, to, tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the msg.sender to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n   function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n       safeTransferFrom(from, to, tokenId, \"\");\r\n   }\r\n\r\n   /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the _msgSender() to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n   function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n       require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n       _safeTransferFrom(from, to, tokenId, _data);\r\n   }\r\n\r\n   /**\r\n    * @dev Safely transfers the ownership of a given token ID to another address\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * Requires the msg.sender to be the owner, approved, or operator\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n   function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n       _transferFrom(from, to, tokenId);\r\n       require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns whether the specified token exists.\r\n    * @param tokenId uint256 ID of the token to query the existence of\r\n    * @return bool whether the token exists\r\n    */\r\n   function _exists(uint256 tokenId) internal view returns (bool) {\r\n       address owner = _tokenOwner[tokenId];\r\n       return owner != address(0);\r\n   }\r\n\r\n   /**\r\n    * @dev Returns whether the given spender can transfer a given token ID.\r\n    * @param spender address of the spender to query\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @return bool whether the msg.sender is approved for the given token ID,\r\n    * is an operator of the owner, or is the owner of the token\r\n    */\r\n   function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n       require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n       address owner = ownerOf(tokenId);\r\n       return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to safely mint a new token.\r\n    * Reverts if the given token ID already exists.\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * @param to The address that will own the minted token\r\n    * @param tokenId uint256 ID of the token to be minted\r\n    */\r\n   function _safeMint(address to, uint256 tokenId) internal {\r\n       _safeMint(to, tokenId, \"\");\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to safely mint a new token.\r\n    * Reverts if the given token ID already exists.\r\n    * If the target address is a contract, it must implement `onERC721Received`,\r\n    * which is called upon a safe transfer, and return the magic value\r\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n    * the transfer is reverted.\r\n    * @param to The address that will own the minted token\r\n    * @param tokenId uint256 ID of the token to be minted\r\n    * @param _data bytes data to send along with a safe transfer check\r\n    */\r\n   function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n       _mint(to, tokenId);\r\n       require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to mint a new token.\r\n    * Reverts if the given token ID already exists.\r\n    * @param to The address that will own the minted token\r\n    * @param tokenId uint256 ID of the token to be minted\r\n    */\r\n   function _mint(address to, uint256 tokenId) internal {\r\n       require(to != address(0), \"ERC721: mint to the zero address\");\r\n       require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n       _tokenOwner[tokenId] = to;\r\n       _ownedTokensCount[to].increment();\r\n\r\n       emit Transfer(address(0), to, tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to burn a specific token.\r\n    * Reverts if the token does not exist.\r\n    * Deprecated, use {_burn} instead.\r\n    * @param owner owner of the token to burn\r\n    * @param tokenId uint256 ID of the token being burned\r\n    */\r\n   function _burn(address owner, uint256 tokenId) internal {\r\n       require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n       _clearApproval(tokenId);\r\n\r\n       _ownedTokensCount[owner].decrement();\r\n       _tokenOwner[tokenId] = address(0);\r\n\r\n       emit Transfer(owner, address(0), tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to burn a specific token.\r\n    * Reverts if the token does not exist.\r\n    * @param tokenId uint256 ID of the token being burned\r\n    */\r\n   function _burn(uint256 tokenId) internal {\r\n       _burn(ownerOf(tokenId), tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to transfer ownership of a given token ID to another address.\r\n    * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n   function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n       require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n       require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n       _clearApproval(tokenId);\r\n\r\n       _ownedTokensCount[from].decrement();\r\n       _ownedTokensCount[to].increment();\r\n\r\n       _tokenOwner[tokenId] = to;\r\n\r\n       emit Transfer(from, to, tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n    * The call is not executed if the target address is not a contract.\r\n    *\r\n    * This function is deprecated.\r\n    * @param from address representing the previous owner of the given token ID\r\n    * @param to target address that will receive the tokens\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    * @param _data bytes optional data to send along with the call\r\n    * @return bool whether the call correctly returned the expected magic value\r\n    */\r\n   function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n       internal returns (bool)\r\n   {\r\n       if (!to.isContract()) {\r\n           return true;\r\n       }\r\n\r\n       bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\r\n       return (retval == _ERC721_RECEIVED);\r\n   }\r\n\r\n   /**\r\n    * @dev Private function to clear current approval of a given token ID.\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n   function _clearApproval(uint256 tokenId) private {\r\n       if (_tokenApprovals[tokenId] != address(0)) {\r\n           _tokenApprovals[tokenId] = address(0);\r\n       }\r\n   }\r\n}\r\n\r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n* @dev See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract IERC721Enumerable is IERC721 {\r\n   function totalSupply() public view returns (uint256);\r\n   function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n   function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n* @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n* @dev See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n   // Mapping from owner to list of owned token IDs\r\n   mapping(address => uint256[]) private _ownedTokens;\r\n\r\n   // Mapping from token ID to index of the owner tokens list\r\n   mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n   // Array with all token ids, used for enumeration\r\n   uint256[] private _allTokens;\r\n\r\n   // Mapping from token id to position in the allTokens array\r\n   mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n   /*\r\n    *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n    *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n    *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n    *\r\n    *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n    */\r\n   bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n   /**\r\n    * @dev Constructor function.\r\n    */\r\n   constructor () public {\r\n       // register the supported interface to conform to ERC721Enumerable via ERC165\r\n       _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n    * @param owner address owning the tokens list to be accessed\r\n    * @param index uint256 representing the index to be accessed of the requested tokens list\r\n    * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n    */\r\n   function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n       require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n       return _ownedTokens[owner][index];\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the total amount of tokens stored by the contract.\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n   function totalSupply() public view returns (uint256) {\r\n       return _allTokens.length;\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the token ID at a given index of all the tokens in this contract\r\n    * Reverts if the index is greater or equal to the total number of tokens.\r\n    * @param index uint256 representing the index to be accessed of the tokens list\r\n    * @return uint256 token ID at the given index of the tokens list\r\n    */\r\n   function tokenByIndex(uint256 index) public view returns (uint256) {\r\n       require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n       return _allTokens[index];\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to transfer ownership of a given token ID to another address.\r\n    * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n    * @param from current owner of the token\r\n    * @param to address to receive the ownership of the given token ID\r\n    * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n   function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n       super._transferFrom(from, to, tokenId);\r\n\r\n       _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n       _addTokenToOwnerEnumeration(to, tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to mint a new token.\r\n    * Reverts if the given token ID already exists.\r\n    * @param to address the beneficiary that will own the minted token\r\n    * @param tokenId uint256 ID of the token to be minted\r\n    */\r\n   function _mint(address to, uint256 tokenId) internal {\r\n       super._mint(to, tokenId);\r\n\r\n       _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n       _addTokenToAllTokensEnumeration(tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to burn a specific token.\r\n    * Reverts if the token does not exist.\r\n    * Deprecated, use {ERC721-_burn} instead.\r\n    * @param owner owner of the token to burn\r\n    * @param tokenId uint256 ID of the token being burned\r\n    */\r\n   function _burn(address owner, uint256 tokenId) internal {\r\n       super._burn(owner, tokenId);\r\n\r\n       _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n       // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n       _ownedTokensIndex[tokenId] = 0;\r\n\r\n       _removeTokenFromAllTokensEnumeration(tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the list of token IDs of the requested owner.\r\n    * @param owner address owning the tokens\r\n    * @return uint256[] List of token IDs owned by the requested address\r\n    */\r\n   function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n       return _ownedTokens[owner];\r\n   }\r\n\r\n   /**\r\n    * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n    * @param to address representing the new owner of the given token ID\r\n    * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n   function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n       _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n       _ownedTokens[to].push(tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Private function to add a token to this extension's token tracking data structures.\r\n    * @param tokenId uint256 ID of the token to be added to the tokens list\r\n    */\r\n   function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n       _allTokensIndex[tokenId] = _allTokens.length;\r\n       _allTokens.push(tokenId);\r\n   }\r\n\r\n   /**\r\n    * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n    * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n    * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n    * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n    * @param from address representing the previous owner of the given token ID\r\n    * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n   function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n       // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n       // then delete the last slot (swap and pop).\r\n\r\n       uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n       uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n       // When the token to delete is the last token, the swap operation is unnecessary\r\n       if (tokenIndex != lastTokenIndex) {\r\n           uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n           _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n           _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n       }\r\n\r\n       // This also deletes the contents at the last position of the array\r\n       _ownedTokens[from].length--;\r\n\r\n       // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n       // lastTokenId, or just over the end of the array if the token was the last one).\r\n   }\r\n\r\n   /**\r\n    * @dev Private function to remove a token from this extension's token tracking data structures.\r\n    * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n    * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n    */\r\n   function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n       // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n       // then delete the last slot (swap and pop).\r\n\r\n       uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n       uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n       // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n       // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n       // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n       uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n       _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n       _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n       // This also deletes the contents at the last position of the array\r\n       _allTokens.length--;\r\n       _allTokensIndex[tokenId] = 0;\r\n   }\r\n}\r\n\r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n* @dev See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract IERC721Metadata is IERC721 {\r\n   function name() external view returns (string memory);\r\n   function symbol() external view returns (string memory);\r\n   function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n   // Token name\r\n   string private _name;\r\n\r\n   // Token symbol\r\n   string private _symbol;\r\n\r\n   // Optional mapping for token URIs\r\n   mapping(uint256 => string) private _tokenURIs;\r\n  \r\n   \r\n   //Optional mapping for IPFS link to canonical image file\r\n   mapping(uint256 => string) private _tokenIPFSHashes;\r\n\r\n   /*\r\n    *     bytes4(keccak256('name()')) == 0x06fdde03\r\n    *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n    *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n    *\r\n    *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n    */\r\n   bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n   /**\r\n    * @dev Constructor function\r\n    */\r\n   constructor (string memory name, string memory symbol) public {\r\n       _name = name;\r\n       _symbol = symbol;\r\n\r\n       // register the supported interfaces to conform to ERC721 via ERC165\r\n       _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the token name.\r\n    * @return string representing the token name\r\n    */\r\n   function name() external view returns (string memory) {\r\n       return _name;\r\n   }\r\n\r\n   /**\r\n    * @dev Gets the token symbol.\r\n    * @return string representing the token symbol\r\n    */\r\n   function symbol() external view returns (string memory) {\r\n       return _symbol;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns an URI for a given token ID.\r\n    * Throws if the token ID does not exist. May return an empty string.\r\n    * @param tokenId uint256 ID of the token to query\r\n    */\r\n   function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n       require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n       return _tokenURIs[tokenId];\r\n   }\r\n   \r\n   \r\n     /**\r\n    * @dev Returns an URI for a given token ID.\r\n    * Throws if the token ID does not exist. May return an empty string.\r\n    * @param tokenId uint256 ID of the token to query\r\n    */\r\n   function tokenIPFSHash(uint256 tokenId) external view returns (string memory) {\r\n       require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n       return _tokenIPFSHashes[tokenId];\r\n   }\r\n\r\n   /**\r\n    * @dev Internal function to set the token URI for a given token.\r\n    * Reverts if the token ID does not exist.\r\n    * @param tokenId uint256 ID of the token to set its URI\r\n    * @param uri string URI to assign\r\n    */\r\n   function _setTokenURI(uint256 tokenId, string memory uri) internal {\r\n       require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n       _tokenURIs[tokenId] = uri;\r\n   }\r\n   \r\n      /**\r\n    * @dev Internal function to set the token IPFS hash for a given token.\r\n    * Reverts if the token ID does not exist.\r\n    * @param tokenId uint256 ID of the token to set its URI\r\n    * @param ipfs_hash string IPFS link to assign\r\n    */\r\n   function _setTokenIPFSHash(uint256 tokenId, string memory ipfs_hash) internal {\r\n       require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n       _tokenIPFSHashes[tokenId] = ipfs_hash;\r\n   }\r\n   \r\n   \r\n\r\n   /**\r\n    * @dev Internal function to burn a specific token.\r\n    * Reverts if the token does not exist.\r\n    * Deprecated, use _burn(uint256) instead.\r\n    * @param owner owner of the token to burn\r\n    * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n   function _burn(address owner, uint256 tokenId) internal {\r\n       super._burn(owner, tokenId);\r\n\r\n       // Clear metadata (if any)\r\n       if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n           delete _tokenURIs[tokenId];\r\n       }\r\n   }\r\n}\r\n\r\n\r\n/**\r\n* @title Full ERC721 Token\r\n* @dev This implementation includes all the required and some optional functionality of the ERC721 standard\r\n* Moreover, it includes approve all functionality using operator terminology.\r\n*\r\n* See https://eips.ethereum.org/EIPS/eip-721\r\n*/\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n   constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n       // solhint-disable-previous-line no-empty-blocks\r\n   }\r\n}\r\n\r\n\r\ncontract NiftyBuilderInstance is ERC721Full {\r\n\r\n   //MODIFIERS\r\n\r\n   modifier onlyValidSender() {\r\n       NiftyRegistry nftg_registry = NiftyRegistry(niftyRegistryContract);\r\n       bool is_valid = nftg_registry.isValidNiftySender(msg.sender);\r\n       require(is_valid==true);\r\n       _;\r\n   }\r\n\r\n   //CONSTANTS\r\n\r\n   // how many nifties this contract is selling\r\n   // used for metadat retrieval\r\n   uint public numNiftiesCurrentlyInContract;\r\n\r\n   //id of this contract for metadata server\r\n   uint public contractId;\r\n   \r\n   //is permanently closed\r\n   bool public isClosed = false;\r\n\r\n   //baseURI for metadata server\r\n   string public baseURI;\r\n\r\n//   //name of creator\r\n//   string public creatorName;\r\n\r\n   string public nameOfCreator;\r\n\r\n   //nifty registry contract\r\n   address public niftyRegistryContract = 0x6e53130dDfF21E3BC963Ee902005223b9A202106;\r\n\r\n   //master builder - ONLY DOES STATIC CALLS\r\n   address public masterBuilderContract = 0x6EFB06cF568253a53C7511BD3c31AB28BecB0192;\r\n\r\n   using Counters for Counters.Counter;\r\n\r\n   //MAPPINGS\r\n\r\n   //mappings for token Ids\r\n   mapping (uint => Counters.Counter) public _numNiftyMinted;\r\n   mapping (uint => uint) public _niftyPrice;\r\n   mapping (uint => string) public _niftyIPFSHashes;\r\n   mapping (uint => bool) public _IPFSHashHasBeenSet;\r\n\r\n   //EVENTS\r\n\r\n   //purchase + creation events\r\n   event NiftyPurchased(address _buyer, uint256 _amount, uint _tokenId);\r\n   event NiftyCreated(address new_owner, uint _niftyType, uint _tokenId);\r\n\r\n   //CONSTRUCTOR FUNCTION\r\n\r\n   constructor(\r\n       string memory _name,\r\n       string memory _symbol,\r\n       uint contract_id,\r\n       uint num_nifties,\r\n       string memory base_uri,\r\n       string memory name_of_creator) ERC721Full(_name, _symbol) public {\r\n\r\n       //set local variables based on inputs\r\n       contractId = contract_id;\r\n       numNiftiesCurrentlyInContract = num_nifties;\r\n       baseURI = base_uri;\r\n       nameOfCreator = name_of_creator;\r\n\r\n       //offset starts at 1 - there is no niftyType of 0\r\n    //   for (uint i=0; i<(num_nifties); i++) {\r\n    //       _numNiftyPermitted[i+1] = nifty_quantities[i];\r\n    //   }\r\n   }\r\n   \r\n   function setNiftyIPFSHash(uint niftyType, \r\n                            string memory ipfs_hash) onlyValidSender public {\r\n        //can only be set once\r\n        if (_IPFSHashHasBeenSet[niftyType] == true) {\r\n            revert(\"Can only be set once\");\r\n        } else {\r\n            _niftyIPFSHashes[niftyType] = ipfs_hash;\r\n            _IPFSHashHasBeenSet[niftyType]  = true;\r\n        }\r\n    }\r\n    \r\n    function closeContract() onlyValidSender public {\r\n        //permanently close this open edition\r\n        isClosed = true;\r\n        \r\n    }\r\n\r\n   function giftNifty(address collector_address, \r\n                      uint niftyType) onlyValidSender public {\r\n       //master for static calls\r\n       BuilderMaster bm = BuilderMaster(masterBuilderContract);\r\n       _numNiftyMinted[niftyType].increment();\r\n       //check if this collection is closed\r\n       if (isClosed==true) {\r\n           revert(\"This contract is closed!\");\r\n       }\r\n       //mint a nifty\r\n       uint specificTokenId = _numNiftyMinted[niftyType].current();\r\n       uint tokenId = bm.encodeTokenId(contractId, niftyType, specificTokenId);\r\n       string memory tokenIdStr = bm.uint2str(tokenId);\r\n       string memory tokenURI = bm.strConcat(baseURI, tokenIdStr);\r\n       string memory ipfsHash = _niftyIPFSHashes[niftyType];\r\n       //mint token\r\n       _mint(collector_address, tokenId);\r\n       _setTokenURI(tokenId, tokenURI);\r\n       _setTokenIPFSHash(tokenId, ipfsHash);\r\n       //do events\r\n       emit NiftyCreated(collector_address, niftyType, tokenId);\r\n   }\r\n\r\n}\r\n\r\ncontract NiftyRegistry {\r\n   function isValidNiftySender(address sending_key) public view returns (bool);\r\n   function isOwner(address owner_key) public view returns (bool);\r\n}\r\n\r\ncontract BuilderMaster {\r\n   function getContractId(uint tokenId) public view returns (uint);\r\n   function getNiftyTypeId(uint tokenId) public view returns (uint);\r\n   function getSpecificNiftyNum(uint tokenId) public view returns (uint);\r\n   function encodeTokenId(uint contractId, uint niftyType, uint specificNiftyNum) public view returns (uint);\r\n   function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) public view returns (string memory);\r\n   function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) public view returns (string memory);\r\n   function strConcat(string memory _a, string memory _b, string memory _c) public view returns (string memory);\r\n   function strConcat(string memory _a, string memory _b) public view returns (string memory);\r\n   function uint2str(uint _i) public view returns (string memory _uintAsString);\r\n}\r\n\r\n/**\r\n* Contracts and libraries below are from OpenZeppelin, except nifty builder instance\r\n**/\r\n\r\n\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n   /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a + b;\r\n       require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return sub(a, b, \"SafeMath: subtraction overflow\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    *\r\n    * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n    * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n    */\r\n   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b <= a, errorMessage);\r\n       uint256 c = a - b;\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n       // benefit is lost if 'b' is also tested.\r\n       // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n       if (a == 0) {\r\n           return 0;\r\n       }\r\n\r\n       uint256 c = a * b;\r\n       require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return div(a, b, \"SafeMath: division by zero\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n    * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n    */\r\n   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       // Solidity only automatically asserts when dividing by 0\r\n       require(b > 0, errorMessage);\r\n       uint256 c = a / b;\r\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n       return c;\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return mod(a, b, \"SafeMath: modulo by zero\");\r\n   }\r\n\r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts with custom message when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    *\r\n    * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n    * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n    */\r\n   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b != 0, errorMessage);\r\n       return a % b;\r\n   }\r\n}\r\n\r\n/**\r\n* @dev Collection of functions related to the address type\r\n*/\r\nlibrary Address {\r\n   /**\r\n    * @dev Returns true if `account` is a contract.\r\n    *\r\n    * This test is non-exhaustive, and there may be false-negatives: during the\r\n    * execution of a contract's constructor, its address will be reported as\r\n    * not containing a contract.\r\n    *\r\n    * IMPORTANT: It is unsafe to assume that an address for which this\r\n    * function returns false is an externally-owned account (EOA) and not a\r\n    * contract.\r\n    */\r\n   function isContract(address account) internal view returns (bool) {\r\n       // This method relies in extcodesize, which returns 0 for contracts in\r\n       // construction, since the code is only stored at the end of the\r\n       // constructor execution.\r\n\r\n       // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n       // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n       // for accounts without code, i.e. `keccak256('')`\r\n       bytes32 codehash;\r\n       bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n       // solhint-disable-next-line no-inline-assembly\r\n       assembly { codehash := extcodehash(account) }\r\n       return (codehash != 0x0 && codehash != accountHash);\r\n   }\r\n\r\n   /**\r\n    * @dev Converts an `address` into `address payable`. Note that this is\r\n    * simply a type cast: the actual underlying value is not changed.\r\n    *\r\n    * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n    * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n    */\r\n   function toPayable(address account) internal pure returns (address payable) {\r\n       return address(uint160(account));\r\n   }\r\n\r\n   /**\r\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n    * `recipient`, forwarding all available gas and reverting on errors.\r\n    *\r\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n    * imposed by `transfer`, making them unable to receive funds via\r\n    * `transfer`. {sendValue} removes this limitation.\r\n    *\r\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n    *\r\n    * IMPORTANT: because control is transferred to `recipient`, care must be\r\n    * taken to not create reentrancy vulnerabilities. Consider using\r\n    * {ReentrancyGuard} or the\r\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n    */\r\n   function sendValue(address payable recipient, uint256 amount) internal {\r\n       require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n       // solhint-disable-next-line avoid-call-value\r\n       (bool success, ) = recipient.call.value(amount)(\"\");\r\n       require(success, \"Address: unable to send value, recipient may have reverted\");\r\n   }\r\n}\r\n\r\n/**\r\n* @title Counters\r\n* @author Matt Condon (@shrugs)\r\n* @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n* of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n*\r\n* Include with `using Counters for Counters.Counter;`\r\n* Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n* overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n* directly accessed.\r\n*/\r\nlibrary Counters {\r\n   using SafeMath for uint256;\r\n\r\n   struct Counter {\r\n       // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n       // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n       // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n       uint256 _value; // default: 0\r\n   }\r\n\r\n   function current(Counter storage counter) internal view returns (uint256) {\r\n       return counter._value;\r\n   }\r\n\r\n   function increment(Counter storage counter) internal {\r\n       // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n       counter._value += 1;\r\n   }\r\n\r\n   function decrement(Counter storage counter) internal {\r\n       counter._value = counter._value.sub(1);\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_nifties\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"base_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_of_creator\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_niftyType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NiftyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NiftyPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_IPFSHashHasBeenSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_niftyIPFSHashes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_niftyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_numNiftyMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"giftNifty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterBuilderContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameOfCreator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"niftyRegistryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numNiftiesCurrentlyInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfs_hash\",\"type\":\"string\"}],\"name\":\"setNiftyIPFSHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NiftyBuilderInstance", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000e58206279204d757261742050616b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b5842594d5552415450414b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f6170692e6e69667479676174657761792e636f6d2f70616b2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000350616b0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b17cc8de5c125bf1db18f217a6b5bc7c5312e723679b25aa883506d2c7f379e4"}