{"SourceCode": "// SPDX-License-Identifier: CC0-1.0\r\npragma solidity ^0.8.15;\r\n\r\ninterface IImmutablesArt {\r\n    function anyoneMintProjectEdition(uint) external payable;\r\n    function artistUpdateProjectArtistAddress(uint, address) external;\r\n    function currentTokenId() external view returns (uint);\r\n    function projectIdToRoyaltyAddress(uint) external view returns (address);\r\n    function safeTransferFrom(address, address, uint) external;\r\n}\r\n\r\ninterface IRoyaltyManager {\r\n    function release() external;\r\n}\r\n\r\ncontract Fermaminter {\r\n    /// @notice The ImmutablesArt contract\r\n    IImmutablesArt public immutable immutablesArt;\r\n    /// @notice The ImmutablesArt projectId this contract manages\r\n    uint public immutable projectId;\r\n\r\n    IRoyaltyManager private immutable royaltyManager;\r\n\r\n    /// @notice The owner address\r\n    address public owner;\r\n    /// @notice Query if an account is approved to mint\r\n    mapping(address => bool) public isApproved;\r\n\r\n    event Approval(address indexed operator, bool approved);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    error NotApproved();\r\n    error NotOwner();\r\n\r\n    constructor(IImmutablesArt immutablesArt_, uint projectId_) {\r\n        immutablesArt = immutablesArt_;\r\n        projectId = projectId_;\r\n        royaltyManager = IRoyaltyManager(immutablesArt_.projectIdToRoyaltyAddress(projectId_));\r\n\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Mint an edition from the project\r\n    function mint(address to) external payable {\r\n        if (!isApproved[msg.sender] && msg.sender != owner) revert NotApproved();\r\n\r\n        immutablesArt.anyoneMintProjectEdition(projectId);\r\n        immutablesArt.safeTransferFrom(address(this), to, immutablesArt.currentTokenId());\r\n    }\r\n\r\n    /// @notice Approve an account to mint\r\n    function setApproval(address operator, bool approved) external {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        isApproved[operator] = approved;\r\n        emit Approval(operator, approved);\r\n    }\r\n\r\n    /// @notice Transfer ownership of this contract to a new address\r\n    function transferOwnership(address newOwner) external {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n\r\n    /// @notice Set the artist on the project to this contract's owner\r\n    function relinquishProject() external {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        immutablesArt.artistUpdateProjectArtistAddress(projectId, owner);\r\n    }\r\n\r\n    /// @notice Query if this contract implements an interface\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC-165,\r\n            interfaceId == 0x7f5828d0; // ERC-173.\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /// @notice Send any royalties and the contract balance to the owner\r\n    function release() external returns (bytes memory) {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        royaltyManager.release();\r\n        (bool success, bytes memory returndata) = owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n        return returndata;\r\n    }\r\n\r\n    /// @notice Transfer ERC-20 tokens to the owner\r\n    function withdrawl(address erc20, uint value) external returns (bytes memory) {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        // \"0xa9059cbb\" is the selector for ERC-20 transfer.\r\n        (bool success, bytes memory returndata) = erc20.call(abi.encodeWithSelector(0xa9059cbb, owner, value));\r\n        require(success);\r\n        return returndata;\r\n    }\r\n\r\n    /// @notice Call a contract with the specified data\r\n    function call(address contractAddress, bytes calldata data) external payable returns (bytes memory) {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        (bool success, bytes memory returndata) = contractAddress.call{value: msg.value}(data);\r\n        require(success);\r\n        return returndata;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IImmutablesArt\",\"name\":\"immutablesArt_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesArt\",\"outputs\":[{\"internalType\":\"contract IImmutablesArt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fermaminter", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000a8a6cb3978e2c4edcf5a3d0cb3400e1e5d0314790000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35b22f40bb3d6e07fde7d23b68be1da7268eb490b7f973b60c8bba5860d74641"}