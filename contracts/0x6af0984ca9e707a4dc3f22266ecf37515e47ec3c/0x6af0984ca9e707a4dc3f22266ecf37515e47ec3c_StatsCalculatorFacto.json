{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/stats/StatsCalculatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Roles } from \\\"src/libs/Roles.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\nimport { Clones } from \\\"openzeppelin-contracts/proxy/Clones.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\nimport { IStatsCalculatorFactory } from \\\"src/interfaces/stats/IStatsCalculatorFactory.sol\\\";\\nimport { SystemComponent } from \\\"src/SystemComponent.sol\\\";\\n\\ncontract StatsCalculatorFactory is SystemComponent, IStatsCalculatorFactory, SecurityBase {\\n    using Clones for address;\\n\\n    /// @notice Registered stat calculator templates\\n    mapping(bytes32 => address) public templates;\\n\\n    modifier onlyCreator() {\\n        if (!_hasRole(Roles.CREATE_STATS_CALC_ROLE, msg.sender)) {\\n            revert Errors.MissingRole(Roles.CREATE_STATS_CALC_ROLE, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTemplateManager() {\\n        if (!_hasRole(Roles.STATS_CALC_TEMPLATE_MGMT_ROLE, msg.sender)) {\\n            revert Errors.MissingRole(Roles.STATS_CALC_TEMPLATE_MGMT_ROLE, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    event TemplateRemoved(bytes32 aprTemplateId, address template);\\n    event TemplateRegistered(bytes32 aprTemplateId, address newTemplate);\\n    event TemplateReplaced(bytes32 aprTemplateId, address oldAddress, address newAddress);\\n\\n    error TemplateAlreadyRegistered(bytes32 aprTemplateId);\\n    error TemplateDoesNotExist(bytes32 aprTemplateId);\\n    error TemplateReplaceMismatch(bytes32 aprTemplateId, address actualOld, address specifiedOld);\\n    error TemplateReplaceMatches(bytes32 aprTemplateId, address actualOld, address specifiedOld);\\n\\n    constructor(ISystemRegistry _systemRegistry)\\n        SystemComponent(_systemRegistry)\\n        SecurityBase(address(_systemRegistry.accessController()))\\n    { }\\n\\n    /// @inheritdoc IStatsCalculatorFactory\\n    function create(\\n        bytes32 aprTemplateId,\\n        bytes32[] calldata dependentAprIds,\\n        bytes calldata initData\\n    ) external onlyCreator returns (address calculatorAddress) {\\n        // Get the template to clone\\n        address template = templates[aprTemplateId];\\n        Errors.verifyNotZero(template, \\\"template\\\");\\n\\n        // Copy and set it up\\n        calculatorAddress = template.clone();\\n        IStatsCalculator(calculatorAddress).initialize(dependentAprIds, initData);\\n\\n        // Add the vault to the registry\\n        systemRegistry.statsCalculatorRegistry().register(calculatorAddress);\\n    }\\n\\n    /// @notice Register a new template\\n    /// @dev Does not allow overwriting an aprTemplateId, must replace or remove first\\n    /// @param aprTemplateId id of the template\\n    /// @param newTemplate address of the template\\n    function registerTemplate(bytes32 aprTemplateId, address newTemplate) external onlyTemplateManager {\\n        Errors.verifyNotZero(aprTemplateId, \\\"aprTemplateId\\\");\\n        Errors.verifyNotZero(newTemplate, \\\"template\\\");\\n\\n        // Cannot overwrite an existing template\\n        if (templates[aprTemplateId] != address(0)) {\\n            revert TemplateAlreadyRegistered(aprTemplateId);\\n        }\\n\\n        emit TemplateRegistered(aprTemplateId, newTemplate);\\n\\n        templates[aprTemplateId] = newTemplate;\\n    }\\n\\n    /// @notice Replace an template registered with an id\\n    /// @dev Requires an existing registration. Specified old template must match. New can't match old\\n    /// @param aprTemplateId id of the template\\n    /// @param oldTemplate address of currently registered template\\n    /// @param newTemplate address of new template to register with id\\n    function replaceTemplate(\\n        bytes32 aprTemplateId,\\n        address oldTemplate,\\n        address newTemplate\\n    ) external onlyTemplateManager {\\n        Errors.verifyNotZero(aprTemplateId, \\\"aprTemplateId\\\");\\n        Errors.verifyNotZero(oldTemplate, \\\"oldTemplate\\\");\\n        Errors.verifyNotZero(newTemplate, \\\"newTemplate\\\");\\n\\n        // Make sure you're replacing what you think you are\\n        if (templates[aprTemplateId] != oldTemplate) {\\n            revert TemplateReplaceMismatch(aprTemplateId, templates[aprTemplateId], oldTemplate);\\n        }\\n\\n        // If you're trying to replace with the same template you're probably\\n        // not doing what you think you're doing\\n        if (oldTemplate == newTemplate) {\\n            revert TemplateReplaceMatches(aprTemplateId, templates[aprTemplateId], oldTemplate);\\n        }\\n\\n        emit TemplateReplaced(aprTemplateId, oldTemplate, newTemplate);\\n\\n        templates[aprTemplateId] = newTemplate;\\n    }\\n\\n    /// @notice Remove a registered template\\n    /// @dev Must have a template set with id or will revert\\n    /// @param aprTemplateId id of the template\\n    function removeTemplate(bytes32 aprTemplateId) external onlyTemplateManager {\\n        Errors.verifyNotZero(aprTemplateId, \\\"aprTemplateId\\\");\\n\\n        // Template must exist otherwise why would you have called\\n        if (templates[aprTemplateId] == address(0)) {\\n            revert TemplateDoesNotExist(aprTemplateId);\\n        }\\n\\n        emit TemplateRemoved(aprTemplateId, templates[aprTemplateId]);\\n\\n        delete templates[aprTemplateId];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libs/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nlibrary Roles {\\n    // --------------------------------------------------------------------\\n    // Central roles list used by all contracts that call AccessController\\n    // --------------------------------------------------------------------\\n\\n    bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n    bytes32 public constant CREATE_POOL_ROLE = keccak256(\\\"CREATE_POOL_ROLE\\\");\\n    bytes32 public constant CREATE_DESTINATION_VAULT_ROLE = keccak256(\\\"CREATE_DESTINATION_VAULT_ROLE\\\");\\n    bytes32 public constant REGISTRY_UPDATER = keccak256(\\\"REGISTRY_UPDATER\\\");\\n\\n    bytes32 public constant TOKEN_RECOVERY_ROLE = keccak256(\\\"TOKEN_RECOVERY_ROLE\\\");\\n    bytes32 public constant DESTINATION_VAULTS_UPDATER = keccak256(\\\"DESTINATION_VAULTS_UPDATER\\\");\\n    bytes32 public constant SET_WITHDRAWAL_QUEUE_ROLE = keccak256(\\\"SET_WITHDRAWAL_QUEUE_ROLE\\\");\\n\\n    bytes32 public constant DESTINATION_VAULT_OPERATOR_ROLE = keccak256(\\\"DESTINATION_VAULT_OPERATOR_ROLE\\\");\\n\\n    bytes32 public constant DV_REWARD_MANAGER_ROLE = keccak256(\\\"DV_REWARD_MANAGER_ROLE\\\");\\n\\n    bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n    bytes32 public constant CREATE_STATS_CALC_ROLE = keccak256(\\\"CREATE_STATS_CALC_ROLE\\\");\\n    bytes32 public constant STATS_CALC_TEMPLATE_MGMT_ROLE = keccak256(\\\"STATS_CALC_TEMPLATE_MGMT_ROLE\\\");\\n    bytes32 public constant STATS_SNAPSHOT_ROLE = keccak256(\\\"STATS_SNAPSHOT_ROLE\\\");\\n    bytes32 public constant STATS_INCENTIVE_TOKEN_UPDATER = keccak256(\\\"STATS_INCENTIVE_TOKEN_UPDATER\\\");\\n\\n    bytes32 public constant SOLVER_ROLE = keccak256(\\\"SOLVER_ROLE\\\");\\n\\n    bytes32 public constant LMP_FEE_SETTER_ROLE = keccak256(\\\"LMP_FEE_SETTER_ROLE\\\");\\n\\n    bytes32 public constant EMERGENCY_PAUSER = keccak256(\\\"EMERGENCY_PAUSER\\\");\\n\\n    bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\\\"ORACLE_MANAGER_ROLE\\\");\\n\\n    bytes32 public constant LSD_BACKING_UPDATER = keccak256(\\\"LSD_BACKING_UPDATER\\\");\\n\\n    bytes32 public constant LMP_UPDATE_DEBT_REPORTING_ROLE = keccak256(\\\"LMP_UPDATE_DEBT_REPORTING_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"openzeppelin-contracts/utils/Address.sol\\\";\\n\\nlibrary Errors {\\n    using Address for address;\\n    ///////////////////////////////////////////////////////////////////\\n    //                       Set errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error AccessDenied();\\n    error ZeroAddress(string paramName);\\n    error ZeroAmount();\\n    error InsufficientBalance(address token);\\n    error AssetNotAllowed(address token);\\n    error NotImplemented();\\n    error InvalidAddress(address addr);\\n    error InvalidParam(string paramName);\\n    error InvalidParams();\\n    error AlreadySet(string param);\\n    error SlippageExceeded(uint256 expected, uint256 actual);\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2, string details);\\n\\n    error ItemNotFound();\\n    error ItemExists();\\n    error MissingRole(bytes32 role, address user);\\n    error RegistryItemMissing(string item);\\n    error NotRegistered();\\n    // Used to check storage slot is empty before setting.\\n    error MustBeZero();\\n    // Used to check storage slot set before deleting.\\n    error MustBeSet();\\n\\n    error ApprovalFailed(address token);\\n    error FlashLoanFailed(address token, uint256 amount);\\n\\n    error SystemMismatch(address source1, address source2);\\n\\n    error InvalidToken(address token);\\n\\n    function verifyNotZero(address addr, string memory paramName) internal pure {\\n        if (addr == address(0)) {\\n            revert ZeroAddress(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(bytes32 key, string memory paramName) internal pure {\\n        if (key == bytes32(0)) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotEmpty(string memory val, string memory paramName) internal pure {\\n        if (bytes(val).length == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(uint256 num, string memory paramName) internal pure {\\n        if (num == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifySystemsMatch(address component1, address component2) internal view {\\n        bytes memory call = abi.encodeWithSignature(\\\"getSystemRegistry()\\\");\\n\\n        address registry1 = abi.decode(component1.functionStaticCall(call), (address));\\n        address registry2 = abi.decode(component2.functionStaticCall(call), (address));\\n\\n        if (registry1 != registry2) {\\n            revert SystemMismatch(component1, component2);\\n        }\\n    }\\n\\n    function verifyArrayLengths(uint256 length1, uint256 length2, string memory details) external pure {\\n        if (length1 != length2) {\\n            revert ArrayLengthMismatch(length1, length2, details);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/security/SecurityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { Context } from \\\"openzeppelin-contracts/utils/Context.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SecurityBase {\\n    IAccessController public immutable accessController;\\n\\n    error UndefinedAddress();\\n\\n    constructor(address _accessController) {\\n        if (_accessController == address(0)) revert UndefinedAddress();\\n\\n        accessController = IAccessController(_accessController);\\n    }\\n\\n    modifier onlyOwner() {\\n        accessController.verifyOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier hasRole(bytes32 role) {\\n        if (!accessController.hasRole(role, msg.sender)) revert Errors.AccessDenied();\\n        _;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //  Forward all the regular methods to central security module\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function _hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return accessController.hasRole(role, account);\\n    }\\n\\n    // NOTE: left commented forward methods in here for potential future use\\n    //     function _getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n    //         return accessController.getRoleAdmin(role);\\n    //     }\\n    //\\n    //     function _grantRole(bytes32 role, address account) internal {\\n    //         accessController.grantRole(role, account);\\n    //     }\\n    //\\n    //     function _revokeRole(bytes32 role, address account) internal {\\n    //         accessController.revokeRole(role, account);\\n    //     }\\n    //\\n    //     function _renounceRole(bytes32 role, address account) internal {\\n    //         accessController.renounceRole(role, account);\\n    //     }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { IWETH9 } from \\\"src/interfaces/utils/IWETH9.sol\\\";\\nimport { IGPToke } from \\\"src/interfaces/staking/IGPToke.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"./vault/ILMPVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"./security/IAccessController.sol\\\";\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\nimport { ICurveResolver } from \\\"src/interfaces/utils/ICurveResolver.sol\\\";\\nimport { ILMPVaultRouter } from \\\"src/interfaces/vault/ILMPVaultRouter.sol\\\";\\nimport { ILMPVaultFactory } from \\\"src/interfaces/vault/ILMPVaultFactory.sol\\\";\\nimport { ISystemSecurity } from \\\"src/interfaces/security/ISystemSecurity.sol\\\";\\nimport { IDestinationRegistry } from \\\"./destinations/IDestinationRegistry.sol\\\";\\nimport { IRootPriceOracle } from \\\"src/interfaces/oracles/IRootPriceOracle.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"src/interfaces/vault/ILMPVaultRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"./vault/IDestinationVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { IDestinationRegistry } from \\\"src/interfaces/destinations/IDestinationRegistry.sol\\\";\\nimport { IStatsCalculatorRegistry } from \\\"src/interfaces/stats/IStatsCalculatorRegistry.sol\\\";\\nimport { IAsyncSwapperRegistry } from \\\"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IIncentivesPricingStats } from \\\"src/interfaces/stats/IIncentivesPricingStats.sol\\\";\\n\\n/// @notice Root most registry contract for the system\\ninterface ISystemRegistry {\\n    /// @notice Get the TOKE contract for the system\\n    /// @return toke instance of TOKE used in the system\\n    function toke() external view returns (IERC20Metadata);\\n\\n    /// @notice Get the referenced WETH contract for the system\\n    /// @return weth contract pointer\\n    function weth() external view returns (IWETH9);\\n\\n    /// @notice Get the GPToke staking contract\\n    /// @return gpToke instance of the gpToke contract for the system\\n    function gpToke() external view returns (IGPToke);\\n\\n    /// @notice Get the LMP Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function lmpVaultRegistry() external view returns (ILMPVaultRegistry registry);\\n\\n    /// @notice Get the destination Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationVaultRegistry() external view returns (IDestinationVaultRegistry registry);\\n\\n    /// @notice Get the access Controller for this system\\n    /// @return controller instance of the access controller for this system\\n    function accessController() external view returns (IAccessController controller);\\n\\n    /// @notice Get the destination template registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationTemplateRegistry() external view returns (IDestinationRegistry registry);\\n\\n    /// @notice LMP Vault Router\\n    /// @return router instance of the lmp vault router\\n    function lmpVaultRouter() external view returns (ILMPVaultRouter router);\\n\\n    /// @notice Vault factory lookup by type\\n    /// @return vaultFactory instance of the vault factory for this vault type\\n    function getLMPVaultFactoryByType(bytes32 vaultType) external view returns (ILMPVaultFactory vaultFactory);\\n\\n    /// @notice Get the stats calculator registry for this system\\n    /// @return registry instance of the registry for this system\\n    function statsCalculatorRegistry() external view returns (IStatsCalculatorRegistry registry);\\n\\n    /// @notice Get the root price oracle for this system\\n    /// @return oracle instance of the root price oracle for this system\\n    function rootPriceOracle() external view returns (IRootPriceOracle oracle);\\n\\n    /// @notice Get the async swapper registry for this system\\n    /// @return registry instance of the registry for this system\\n    function asyncSwapperRegistry() external view returns (IAsyncSwapperRegistry registry);\\n\\n    /// @notice Get the swap router for this system\\n    /// @return router instance of the swap router for this system\\n    function swapRouter() external view returns (ISwapRouter router);\\n\\n    /// @notice Get the curve resolver for this system\\n    /// @return resolver instance of the curve resolver for this system\\n    function curveResolver() external view returns (ICurveResolver resolver);\\n\\n    /// @notice Register given address as a Reward Token\\n    /// @dev Reverts if address is 0 or token was already registered\\n    /// @param rewardToken token address to add\\n    function addRewardToken(address rewardToken) external;\\n\\n    /// @notice Removes given address from Reward Token list\\n    /// @dev Reverts if address was not registered\\n    /// @param rewardToken token address to remove\\n    function removeRewardToken(address rewardToken) external;\\n\\n    /// @notice Verify if given address is registered as Reward Token\\n    /// @param rewardToken token address to verify\\n    /// @return bool that indicates true if token is registered and false if not\\n    function isRewardToken(address rewardToken) external view returns (bool);\\n\\n    /// @notice Get the system security instance for this system\\n    /// @return security instance of system security for this system\\n    function systemSecurity() external view returns (ISystemSecurity security);\\n\\n    /// @notice Get the Incentive Pricing Stats\\n    /// @return incentivePricing the incentive pricing contract\\n    function incentivePricing() external view returns (IIncentivesPricingStats);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Capture information about a pool or destination\\ninterface IStatsCalculator {\\n    /// @notice thrown when no snapshot is taken\\n    error NoSnapshotTaken();\\n\\n    /// @notice The id for this instance of a calculator\\n    function getAprId() external view returns (bytes32);\\n\\n    /// @notice The id of the underlying asset/pool/destination this calculator represents\\n    /// @dev This may be a generated address\\n    function getAddressId() external view returns (address);\\n\\n    /// @notice Setup the calculator after it has been copied\\n    /// @dev Should only be executed one time\\n    /// @param dependentAprIds apr ids that cover the dependencies of this calculator\\n    /// @param initData setup data specific to this type of calculator\\n    function initialize(bytes32[] calldata dependentAprIds, bytes calldata initData) external;\\n\\n    /// @notice Capture stat data about this setup\\n    function snapshot() external;\\n\\n    /// @notice Indicates if a snapshot should be taken\\n    /// @return takeSnapshot if true then a snapshot should be taken. If false, calling snapshot will do nothing\\n    function shouldSnapshot() external view returns (bool takeSnapshot);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\n\\n/// @title Create and register stat calculators\\ninterface IStatsCalculatorFactory is ISystemComponent {\\n    /// @notice Create an instance of a calculator pointed to a pool or destination\\n    /// @param aprTemplateId id of the template registered with the factory\\n    /// @param dependentAprIds apr ids that cover the dependencies of this calculator\\n    /// @param initData setup data specific to the type of calculator\\n    /// @return calculatorAddress the id that was generated based on the init data\\n    function create(\\n        bytes32 aprTemplateId,\\n        bytes32[] calldata dependentAprIds,\\n        bytes calldata initData\\n    ) external returns (address calculatorAddress);\\n}\\n\"\r\n    },\r\n    \"src/SystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SystemComponent is ISystemComponent {\\n    ISystemRegistry internal immutable systemRegistry;\\n\\n    constructor(ISystemRegistry _systemRegistry) {\\n        Errors.verifyNotZero(address(_systemRegistry), \\\"_systemRegistry\\\");\\n        systemRegistry = _systemRegistry;\\n    }\\n\\n    function getSystemRegistry() external view returns (address) {\\n        return address(systemRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessControlEnumerable } from \\\"openzeppelin-contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IAccessController is IAccessControlEnumerable {\\n    error AccessDenied();\\n\\n    function setupRole(bytes32 role, address account) external;\\n\\n    function verifyOwner(address account) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking/IGPToke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IGPToke {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Variables\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function startEpoch() external view returns (uint256);\\n    function minStakeDuration() external view returns (uint256);\\n\\n    struct Lockup {\\n        uint128 amount;\\n        uint128 end;\\n        uint256 points;\\n    }\\n\\n    function getLockups(address user) external view returns (Lockup[] memory);\\n    function toke() external view returns (IERC20Metadata);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error ZeroAddress();\\n    error StakingDurationTooShort();\\n    error StakingDurationTooLong();\\n    error StakingPointsExceeded();\\n    error IncorrectStakingAmount();\\n    error InsufficientFunds();\\n    error LockupDoesNotExist();\\n    error NotUnlockableYet();\\n    error AlreadyUnlocked();\\n    error ExtendDurationTooShort();\\n    error TransfersDisabled();\\n    error TransferFailed();\\n    error NoRewardsToClaim();\\n    error InsufficientAmount();\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event SetMaxStakeDuration(uint256 oldDuration, uint256 newDuration);\\n    event Stake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Unstake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Extend(\\n        address indexed user,\\n        uint256 lockupId,\\n        uint256 amount,\\n        uint256 oldEnd,\\n        uint256 newEnd,\\n        uint256 oldPoints,\\n        uint256 newPoints\\n    );\\n    event RewardsAdded(uint256 amount, uint256 accRewardPerShare);\\n    event RewardsCollected(address indexed user, uint256 amount);\\n    event RewardsClaimed(address indexed user, uint256 amount);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Staking Methods\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Stake TOKE to an address that may not be the same as the sender of the funds. This can be used to give\\n     * staked funds to someone else.\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     * @param to address to receive ownership of the stake\\n     */\\n    function stake(uint256 amount, uint256 duration, address to) external;\\n\\n    /**\\n     * @notice Stake TOKE\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @notice Stake TOKE for myself.\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     */\\n    function stake(uint256 amount, uint256 duration) external;\\n\\n    /**\\n     * @notice Collect staked OGV for a lockup and any earned rewards.\\n     * @param lockupId the id of the lockup to unstake\\n     */\\n    function unstake(uint256 lockupId) external;\\n\\n    /**\\n     * @notice Extend a stake lockup for additional points.\\n     *\\n     * The stake end time is computed from the current time + duration, just like it is for new stakes. So a new stake\\n     * for seven days duration and an old stake extended with a seven days duration would have the same end.\\n     *\\n     * If an extend is made before the start of staking, the start time for the new stake is shifted forwards to the\\n     * start of staking, which also shifts forward the end date.\\n     *\\n     * @param lockupId the id of the old lockup to extend\\n     * @param duration number of seconds from now to stake for\\n     */\\n    function extend(uint256 lockupId, uint256 duration) external;\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Rewards\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice The total amount of rewards earned for all stakes\\n    function totalRewardsEarned() external returns (uint256);\\n\\n    /// @notice Total rewards claimed by all stakers\\n    function totalRewardsClaimed() external returns (uint256);\\n\\n    /// @notice Rewards claimed by a specific wallet\\n    /// @param user Address of the wallet to check\\n    function rewardsClaimed(address user) external returns (uint256);\\n\\n    /**\\n     * @notice Preview the number of points that would be returned for the\\n     * given amount and duration.\\n     *\\n     * @param amount TOKE to be staked\\n     * @param duration number of seconds to stake for\\n     * @return points staking points that would be returned\\n     * @return end staking period end date\\n     */\\n    function previewPoints(uint256 amount, uint256 duration) external view returns (uint256, uint256);\\n\\n    /// @notice Preview the reward amount a caller can claim\\n    function previewRewards() external view returns (uint256);\\n\\n    /// @notice Preview the reward amount a specified wallet can claim\\n    function previewRewards(address user) external view returns (uint256);\\n\\n    /// @notice Claim rewards for the caller\\n    function collectRewards() external returns (uint256);\\n\\n    /// @notice Check if amount can be staked\\n    function isStakeableAmount(uint256 amount) external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Keep track of Vaults created through the Vault Factory\\ninterface ILMPVaultRegistry {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error VaultNotFound(address vaultAddress);\\n    error VaultAlreadyExists(address vaultAddress);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event VaultAdded(address indexed asset, address indexed vault);\\n    event VaultRemoved(address indexed asset, address indexed vault);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Functions\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Checks if an address is a valid vault\\n    /// @param vaultAddress Vault address to be added\\n    function isVault(address vaultAddress) external view returns (bool);\\n\\n    /// @notice Registers a vault\\n    /// @param vaultAddress Vault address to be added\\n    function addVault(address vaultAddress) external;\\n\\n    /// @notice Removes vault registration\\n    /// @param vaultAddress Vault address to be removed\\n    function removeVault(address vaultAddress) external;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given asset\\n    /// @param asset Asset address\\n    function listVaultsForAsset(address asset) external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given type\\n    /// @param _vaultType Vault type\\n    function listVaultsForType(bytes32 _vaultType) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISyncSwapper } from \\\"./ISyncSwapper.sol\\\";\\n\\ninterface ISwapRouter {\\n    struct SwapData {\\n        address token;\\n        address pool;\\n        ISyncSwapper swapper;\\n        bytes data;\\n    }\\n\\n    error MaxSlippageExceeded();\\n    error SwapRouteLookupFailed();\\n    error SwapFailed();\\n\\n    event SwapRouteSet(address indexed token, SwapData[] routes);\\n    event SwapForQuoteSuccessful(\\n        address indexed assetToken,\\n        uint256 sellAmount,\\n        address indexed quoteToken,\\n        uint256 minBuyAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /**\\n     * @notice Sets a new swap route for a given asset token.\\n     * @param assetToken The asset token for which the swap route is being set.\\n     * @param _swapRoute The new swap route as an array of SwapData. The last element represents the quoteToken.\\n     * @dev Each 'hop' in the swap route is validated using the respective swapper's validate function. The validate\\n     * function ensures that the encoded data contains the correct 'fromAddress' and 'toAddress' (swapData.token), and\\n     * verifies that these tokens are in the pool.\\n     */\\n    function setSwapRoute(address assetToken, SwapData[] calldata _swapRoute) external;\\n\\n    /**\\n     * @notice Swaps the asset token for the quote token.\\n     * @dev We're adopting an \\\"exact in, variable out\\\" model for all our swaps. This ensures that the entire sellAmount\\n     * is used, eliminating the need for additional balance checks and refunds. This model is expected to be followed by\\n     * all swapper implementations to maintain consistency and to optimize for gas efficiency.\\n     * @param assetToken The address of the asset token to swap.\\n     * @param sellAmount The exact amount of the asset token to swap.\\n     * @param quoteToken The address of the quote token.\\n     * @param minBuyAmount The minimum amount of the quote token expected to be received from the swap.\\n     * @return The amount received from the swap.\\n     */\\n    function swapForQuote(\\n        address assetToken,\\n        uint256 sellAmount,\\n        address quoteToken,\\n        uint256 minBuyAmount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/ICurveResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\ninterface ICurveResolver {\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped.\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolve(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, bool isStableSwap);\\n\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped\\n    /// @return lpToken lp token of the pool\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolveWithLpToken(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, address lpToken, bool isStableSwap);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { ILMPVaultRouterBase } from \\\"src/interfaces/vault/ILMPVaultRouterBase.sol\\\";\\nimport { IAsyncSwapper, SwapParams } from \\\"src/interfaces/liquidation/IAsyncSwapper.sol\\\";\\n\\n/**\\n * @title ILMPVaultRouter Interface\\n * @notice Extends the ILMPVaultRouterBase with specific flows to save gas\\n */\\ninterface ILMPVaultRouter is ILMPVaultRouterBase {\\n    /**\\n     * ***************************   Deposit ********************************\\n     */\\n\\n    /**\\n     * @notice swap and deposit max assets to a LMPVault.\\n     * @dev The goal is to deposit whatever amount is received from the swap into the vault such as depositMax.\\n     * Balances are checked in the swapper function.\\n     * @param swapper The address of the swapper contract.\\n     * @param swapParams The swap parameters.\\n     * @param vault The ILMPVault contract.\\n     * @param to The address to receive the deposited amount.\\n     * @param minSharesOut The minimum amount of shares to be received as output.\\n     * @return sharesOut The amount of shares deposited into the vault.\\n     */\\n    function swapAndDepositToVault(\\n        address swapper,\\n        SwapParams memory swapParams,\\n        ILMPVault vault,\\n        address to,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice deposit max assets to a LMPVault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function depositMax(ILMPVault vault, address to, uint256 minSharesOut) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Withdraw   **********************************\\n     */\\n\\n    /**\\n     * @notice withdraw `amount` to a LMPVault.\\n     * @param fromVault The LMPVault to withdraw assets from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to withdraw from fromVault.\\n     * @param maxSharesIn The max amount of fromVault shares withdrawn by caller.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError, MinSharesError\\n     */\\n    function withdrawToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesIn,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Redeem    ********************************\\n     */\\n\\n    /**\\n     * @notice redeem `shares` to a LMPVault.\\n     * @param fromVault The LMPVault to redeem shares from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to redeem from fromVault.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinAmountError, MinSharesError\\n     */\\n    function redeemToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 shares,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem max shares to a LMPVault.\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeemMax(ILMPVault vault, address to, uint256 minAmountOut) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ILMPVaultFactory {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Vault Creation\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Spin up a new LMPVault\\n     * @param supplyLimit Total supply limit for the new vault\\n     * @param walletLimit Wallet limit for the new vault\\n     * @param symbolSuffix Symbol suffix of the new token\\n     * @param descPrefix Description prefix of the new token\\n     * @param salt Vault creation salt\\n     * @param extraParams Any extra data needed for the vault\\n     */\\n    function createVault(\\n        uint256 supplyLimit,\\n        uint256 walletLimit,\\n        string memory symbolSuffix,\\n        string memory descPrefix,\\n        bytes32 salt,\\n        bytes calldata extraParams\\n    ) external returns (address newVaultAddress);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/ISystemSecurity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ISystemSecurity {\\n    /// @notice Get the number of NAV/share operations currently in progress\\n    /// @return Number of operations\\n    function navOpsInProgress() external view returns (uint256);\\n\\n    /// @notice Called at the start of any NAV/share changing operation\\n    function enterNavOperation() external;\\n\\n    /// @notice Called at the end of any NAV/share changing operation\\n    function exitNavOperation() external;\\n\\n    /// @notice Whether or not the system as a whole is paused\\n    function isSystemPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationAdapter } from \\\"src/interfaces/destinations/IDestinationAdapter.sol\\\";\\n\\ninterface IDestinationRegistry {\\n    event Register(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Replace(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Unregister(bytes32[] indexed destinationTypes);\\n\\n    event Whitelist(bytes32[] indexed destinationTypes);\\n    event RemoveFromWhitelist(bytes32[] indexed destinationTypes);\\n\\n    error InvalidAddress(address addr);\\n    error NotAllowedDestination();\\n    error DestinationAlreadySet();\\n\\n    /**\\n     * @notice Adds a new addresses of the given destination types\\n     * @dev Fails if trying to overwrite previous value of the same destination type\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function register(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Replaces an addresses of the given destination types\\n     * @dev Fails if given destination type was not set previously\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function replace(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Removes an addresses of the given pre-registered destination types\\n     * @param destinationTypes Ones from the destination types whitelist\\n     */\\n    function unregister(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Gives an address of the given destination type\\n     * @dev Should revert on missing destination\\n     * @param destination One from the destination type whitelist\\n     */\\n    function getAdapter(bytes32 destination) external returns (IDestinationAdapter);\\n\\n    /**\\n     * @notice Adds given destination types to the whitelist\\n     * @param destinationTypes Types to whitelist\\n     */\\n    function addToWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Removes given pre-whitelisted destination types\\n     * @param destinationTypes Ones from the destination type whitelist\\n     */\\n    function removeFromWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Checks if the given destination type is whitelisted\\n     * @param destinationType Type to verify\\n     */\\n    function isWhitelistedDestination(bytes32 destinationType) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/oracles/IRootPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Retrieve a price for any token used in the system\\ninterface IRootPriceOracle {\\n    /// @notice Returns a fair price for the provided token in ETH\\n    /// @param token token to get the price of\\n    /// @return price the price of the token in ETH\\n    function getPriceInEth(address token) external returns (uint256 price);\\n\\n    /// @notice Returns a spot price for the provided token in ETH, utilizing specified liquidity pool\\n    /// @param token token to get the spot price of\\n    /// @param pool liquidity pool to be used for price determination\\n    /// @return price the spot price of the token in ETH based on the provided pool\\n    function getSpotPriceInEth(address token, address pool) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVaultFactory } from \\\"src/interfaces/vault/IDestinationVaultFactory.sol\\\";\\n\\n/// @notice Tracks valid Destination Vaults for the system\\ninterface IDestinationVaultRegistry {\\n    /// @notice Determines if a given address is a valid Destination Vault in the system\\n    /// @param destinationVault address to check\\n    /// @return True if vault is registered\\n    function isRegistered(address destinationVault) external view returns (bool);\\n\\n    /// @notice Registers a new Destination Vault\\n    /// @dev Should be locked down to only a factory\\n    /// @param newDestinationVault Address of the new vault\\n    function register(address newDestinationVault) external;\\n\\n    /// @notice Checks if an address is a valid Destination Vault and reverts if not\\n    /// @param destinationVault Destination Vault address to checked\\n    function verifyIsRegistered(address destinationVault) external view;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Factory that is allowed to create and registry Destination Vaults\\n    function factory() external view returns (IDestinationVaultFactory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\n\\n/// @notice Track stat calculators for this instance of the system\\ninterface IStatsCalculatorRegistry {\\n    /// @notice Get a registered calculator\\n    /// @dev Should revert if missing\\n    /// @param aprId key of the calculator to get\\n    /// @return calculator instance of the calculator\\n    function getCalculator(bytes32 aprId) external view returns (IStatsCalculator calculator);\\n\\n    /// @notice Register a new stats calculator\\n    /// @param calculator address of the calculator\\n    function register(address calculator) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface IAsyncSwapperRegistry {\\n    event SwapperAdded(address indexed item);\\n    event SwapperRemoved(address indexed item);\\n\\n    /// @notice Registers an item\\n    /// @param item Item address to be added\\n    function register(address item) external;\\n\\n    /// @notice Removes item registration\\n    /// @param item Item address to be removed\\n    function unregister(address item) external;\\n\\n    /// @notice Returns a list of all registered items\\n    function list() external view returns (address[] memory);\\n\\n    /// @notice Checks if an address is a valid item\\n    /// @param item Item address to be checked\\n    function isRegistered(address item) external view returns (bool);\\n\\n    /// @notice Checks if an address is a valid swapper and reverts if not\\n    /// @param item Swapper address to be checked\\n    function verifyIsRegistered(address item) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IIncentivesPricingStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title EWMA pricing for incentive tokens\\ninterface IIncentivesPricingStats {\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event TokenSnapshot(\\n        address indexed token,\\n        uint40 lastSnapshot,\\n        uint256 fastFilterPrice,\\n        uint256 slowFilterPrice,\\n        uint256 initCount,\\n        bool initComplete\\n    );\\n\\n    error TokenAlreadyRegistered(address token);\\n    error TokenNotFound(address token);\\n    error IncentiveTokenPriceStale(address token);\\n    error TokenSnapshotNotReady(address token);\\n\\n    struct TokenSnapshotInfo {\\n        uint40 lastSnapshot;\\n        bool _initComplete;\\n        uint8 _initCount;\\n        uint256 _initAcc;\\n        uint256 fastFilterPrice;\\n        uint256 slowFilterPrice;\\n    }\\n\\n    /// @notice add a token to snapshot\\n    /// @dev the token must be configured in the RootPriceOracle before adding here\\n    /// @param token the address of the token to add\\n    function setRegisteredToken(address token) external;\\n\\n    /// @notice remove a token from being snapshot\\n    /// @param token the address of the token to remove\\n    function removeRegisteredToken(address token) external;\\n\\n    /// @notice get the addresses for all currently registered tokens\\n    /// @return tokens all of the registered token addresses\\n    function getRegisteredTokens() external view returns (address[] memory tokens);\\n\\n    /// @notice get all of the registered tokens with the latest snapshot info\\n    /// @return tokenAddresses token addresses in the same order as info\\n    /// @return info a list of snapshot info for the tokens\\n    function getTokenPricingInfo()\\n        external\\n        view\\n        returns (address[] memory tokenAddresses, TokenSnapshotInfo[] memory info);\\n\\n    /// @notice update the snapshot for the specified tokens\\n    /// @dev if a token is not ready to be snapshot the entire call will fail\\n    function snapshot(address[] calldata tokensToSnapshot) external;\\n\\n    /// @notice get the latest prices for an incentive token. Reverts if token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPrice(address token, uint40 staleCheck) external view returns (uint256 fastPrice, uint256 slowPrice);\\n\\n    /// @notice get the latest prices for an incentive token or zero if the token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPriceOrZero(\\n        address token,\\n        uint40 staleCheck\\n    ) external view returns (uint256 fastPrice, uint256 slowPrice);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @notice Stores a reference to the registry for this system\\ninterface ISystemComponent {\\n    /// @notice The system instance this contract is tied to\\n    function getSystemRegistry() external view returns (address registry);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\n\\ninterface ISyncSwapper {\\n    error DataMismatch(string element);\\n    error InvalidIndex();\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param pool The address of the pool for the swapper\\n     * @param sellTokenAddress The address of the token to sell\\n     * @param sellAmount The amount of sellToken to sell\\n     * @param buyTokenAddress The address of the token to buy\\n     * @param minBuyAmount The minimum amount of buyToken expected\\n     * @param data Additional data used differently by the different swappers\\n     * @return actualBuyAmount The actual amount received from the swap\\n     */\\n    function swap(\\n        address pool,\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        uint256 minBuyAmount,\\n        bytes memory data\\n    ) external returns (uint256 actualBuyAmount);\\n\\n    /**\\n     * @notice Validates that the swapData contains the correct information, ensuring that the encoded data contains the\\n     * correct 'fromAddress' and 'toAddress' (swapData.token), and verifies that these tokens are in the pool\\n     * @dev This function should revert with a DataMismatch error if the swapData is invalid\\n     * @param fromAddress The address from which the swap originates\\n     * @param swapData The data associated with the swap that needs to be validated\\n     */\\n    function validate(address fromAddress, ISwapRouter.SwapData memory swapData) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC4626 } from \\\"openzeppelin-contracts/interfaces/IERC4626.sol\\\";\\nimport { IERC20Permit } from \\\"openzeppelin-contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\n\\ninterface ILMPVault is IERC4626, IERC20Permit {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event TokensPulled(address[] tokens, uint256[] amounts, address[] destinations);\\n    event TokensRecovered(address[] tokens, uint256[] amounts, address[] destinations);\\n    event Nav(uint256 idle, uint256 debt, uint256 totalSupply);\\n    event RewarderSet(address rewarder);\\n    event DestinationDebtReporting(address destination, uint256 debtValue, uint256 claimed, uint256 claimGasUsed);\\n    event FeeCollected(uint256 fees, address feeSink, uint256 mintedShares, uint256 profit, uint256 idle, uint256 debt);\\n    event Shutdown(VaultShutdownStatus reason);\\n\\n    /* ******************************** */\\n    /*      Errors                      */\\n    /* ******************************** */\\n\\n    error ERC4626MintExceedsMax(uint256 shares, uint256 maxMint);\\n    error ERC4626DepositExceedsMax(uint256 assets, uint256 maxDeposit);\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n    error AmountExceedsAllowance(uint256 shares, uint256 allowed);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    error WithdrawalFailed();\\n    error DepositFailed();\\n    error InsufficientFundsInDestinations(uint256 deficit);\\n    error WithdrawalIncomplete();\\n\\n    /// @notice Query the type of vault\\n    function vaultType() external view returns (bytes32);\\n\\n    /// @notice Allow token recoverer to collect dust / unintended transfers (non-tracked assets only)\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Set the order of destination vaults used for withdrawals\\n    // NOTE: will be done going directly to strategy (IStrategy) vault points to.\\n    //       How it'll delegate is still being decided\\n    // function setWithdrawalQueue(address[] calldata destinations) external;\\n\\n    /// @notice Claim Accrued Rewards\\n    function claimRewards() external;\\n\\n    /// @notice Set the withdrawal queue to be used when taking out Assets\\n    /// @param _destinations The ordered list of destination vaults to go for withdrawals\\n    function setWithdrawalQueue(address[] calldata _destinations) external;\\n\\n    /// @notice Get the withdrawal queue to be used when taking out Assets\\n    function getWithdrawalQueue() external returns (IDestinationVault[] memory _destinations);\\n\\n    /// @notice Get a list of destination vaults with pending assets to clear out\\n    function getRemovalQueue() external view returns (address[] memory);\\n\\n    /// @notice Remove emptied destination vault from pending removal queue\\n    function removeFromRemovalQueue(address vaultToRemove) external;\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    /// @notice Current performance fee taken on profit. 100% == 10000\\n    function performanceFeeBps() external view returns (uint256);\\n\\n    /// @notice The amount of baseAsset deposited into the contract pending deployment\\n    function totalIdle() external view returns (uint256);\\n\\n    /// @notice The current (though cached) value of assets we've deployed\\n    function totalDebt() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity >=0.8.7;\\n\\nimport { ILMPVault } from \\\"./ILMPVault.sol\\\";\\n\\n/**\\n * @title LMPVault Router Base Interface\\n * @notice A canonical router between LMPVaults\\n *\\n * The base router is a multicall style router inspired by Uniswap v3 with built-in features for permit,\\n * WETH9 wrap/unwrap, and ERC20 token pulling/sweeping/approving. It includes methods for the four mutable\\n * ERC4626 functions deposit/mint/withdraw/redeem as well.\\n *\\n * These can all be arbitrarily composed using the multicall functionality of the router.\\n *\\n * NOTE the router is capable of pulling any approved token from your wallet. This is only possible when\\n * your address is msg.sender, but regardless be careful when interacting with the router or ERC4626 Vaults.\\n * The router makes no special considerations for unique ERC20 implementations such as fee on transfer.\\n * There are no built in protections for unexpected behavior beyond enforcing the minSharesOut is received.\\n */\\ninterface ILMPVaultRouterBase {\\n    /// @notice thrown when amount of assets received is below the min set by caller\\n    error MinAmountError();\\n\\n    /// @notice thrown when amount of shares received is below the min set by caller\\n    error MinSharesError();\\n\\n    /// @notice thrown when amount of assets received is above the max set by caller\\n    error MaxAmountError();\\n\\n    /// @notice thrown when amount of shares received is above the max set by caller\\n    error MaxSharesError();\\n\\n    /**\\n     * @notice mint `shares` from an ERC4626 vault.\\n     * @param vault The LMPVault to mint shares from.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to mint from `vault`.\\n     * @param maxAmountIn The max amount of assets used to mint.\\n     * @return amountIn the amount of assets used to mint by `to`.\\n     * @dev throws MaxAmountError\\n     */\\n    function mint(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 maxAmountIn\\n    ) external payable returns (uint256 amountIn);\\n\\n    /**\\n     * @notice deposit `amount` to an ERC4626 vault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to deposit to `vault`.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function deposit(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice withdraw `amount` from an ERC4626 vault.\\n     * @param vault The LMPVault to withdraw assets from.\\n     * @param to The destination of assets.\\n     * @param amount The amount of assets to withdraw from vault.\\n     * @param maxSharesOut The max amount of shares burned for assets requested.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError\\n     */\\n    function withdraw(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem `shares` shares from a LMPVault\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param shares The amount of shares to redeem from vault.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeem(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 minAmountOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nstruct SwapParams {\\n    /// @dev The address of the token to be sold.\\n    address sellTokenAddress;\\n    /// @dev The amount of tokens to be sold.\\n    uint256 sellAmount;\\n    /// @dev The address of the token to be bought.\\n    address buyTokenAddress;\\n    /// @dev The expected minimum amount of tokens to be bought.\\n    uint256 buyAmount;\\n    /// @dev Data payload to be used for complex swap operations.\\n    bytes data;\\n    /// @dev Extra data payload reserved for future development. This field allows for additional information\\n    /// or functionality to be added without changing the struct and interface.\\n    bytes extraData;\\n}\\n\\ninterface IAsyncSwapper {\\n    error TokenAddressZero();\\n    error SwapFailed();\\n    error InsufficientBuyAmountReceived(uint256 buyTokenAmountReceived, uint256 buyAmount);\\n    error InsufficientSellAmount();\\n    error InsufficientBuyAmount();\\n    error InsufficientBalance(uint256 balanceNeeded, uint256 balanceAvailable);\\n\\n    event Swapped(\\n        address indexed sellTokenAddress,\\n        address indexed buyTokenAddress,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 buyTokenAmountReceived\\n    );\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param swapParams Encoded swap data\\n     * @return buyTokenAmountReceived The amount of buyToken received from the swap\\n     */\\n    function swap(SwapParams memory swapParams) external returns (uint256 buyTokenAmountReceived);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IDestinationAdapter\\n * @dev This is a super-interface to unify different types of adapters to be registered in Destination Registry.\\n *      Specific interface type is defined by extending from this interface.\\n */\\ninterface IDestinationAdapter {\\n    error MustBeMoreThanZero();\\n    error ArraysLengthMismatch();\\n    error BalanceMustIncrease();\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n    error InvalidAddress(address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\n/// @notice Creates and registers Destination Vaults for the system\\ninterface IDestinationVaultFactory is ISystemComponent {\\n    /// @notice Creates a vault of the specified type\\n    /// @dev vaultType will be bytes32 encoded and checked that a template is registered\\n    /// @param vaultType human readable key of the vault template\\n    /// @param baseAsset Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer Underlying asset the vault will wrap\\n    /// @param additionalTrackedTokens Any tokens in addition to base and underlyer that should be tracked\\n    /// @param salt Contracts are created via CREATE2 with this value\\n    /// @param params params to be passed to vaults initialize function\\n    /// @return vault address of the newly created destination vault\\n    function create(\\n        string memory vaultType,\\n        address baseAsset,\\n        address underlyer,\\n        address[] memory additionalTrackedTokens,\\n        bytes32 salt,\\n        bytes memory params\\n    ) external returns (address vault);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IBaseAssetVault } from \\\"./IBaseAssetVault.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDestinationVault is IBaseAssetVault, IERC20 {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    error LogicDefect();\\n    error UnreachableError();\\n    error BaseAmountReceived(uint256 amount);\\n\\n    /* ******************************** */\\n    /* View                             */\\n    /* ******************************** */\\n\\n    /// @notice The asset that is deposited into the vault\\n    function underlying() external view returns (address);\\n\\n    /// @notice The asset that rewards and withdrawals to LMP is done in\\n    /// @inheritdoc IBaseAssetVault\\n    function baseAsset() external view override returns (address);\\n\\n    /// @notice Debt balance of underlying asset that is in contract.  This\\n    ///     value includes only assets that are known as debt by the rest of the\\n    ///     system (i.e. transferred in on rebalance), and does not include\\n    ///     extraneous amounts of underlyer that may have ended up in this contract.\\n    function internalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Debt balance of underlyering asset staked externally.  This value only\\n    ///     includes assets known as debt to the rest of the system, and does not include\\n    ///     any assets staked on behalf of the DV in external contracts.\\n    function externalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of _underlyer in DV.  Debt + tokens that may have\\n    ///     been transferred into the contract outside of rebalance.\\n    function internalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of staked _underlyer in external contract.  This\\n    ///     will include any _underlyer that has been staked on behalf of the DV.\\n    function externalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Balance of underlying debt, sum of `externalDebtBalance()` and `internalDebtBalance()`.\\n    function balanceOfUnderlyingDebt() external view returns (uint256);\\n\\n    /// @notice Rewarder for this vault\\n    function rewarder() external view returns (address);\\n\\n    /// @notice Exchange this destination vault points to\\n    function exchangeName() external view returns (string memory);\\n\\n    /// @notice Tokens that base asset can be swapped into\\n    function underlyingTokens() external view returns (address[] memory);\\n\\n    /* ******************************** */\\n    /* Events                           */\\n    /* ******************************** */\\n\\n    event Donated(address sender, uint256 amount);\\n    event Withdraw(\\n        uint256 target, uint256 actual, uint256 debtLoss, uint256 claimLoss, uint256 fromIdle, uint256 fromDebt\\n    );\\n\\n    /* ******************************** */\\n    /* Errors                           */\\n    /* ******************************** */\\n\\n    error ZeroAddress(string paramName);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    /* ******************************** */\\n    /* Functions                        */\\n    /* ******************************** */\\n\\n    /// @notice Setup the contract. These will be cloned so no constructor\\n    /// @param baseAsset_ Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer_ Underlying asset the vault will wrap\\n    /// @param rewarder_ Reward tracker for this vault\\n    /// @param additionalTrackedTokens_ Additional tokens that should be considered 'tracked'\\n    /// @param params_ Any extra parameters needed to setup the contract\\n    function initialize(\\n        IERC20 baseAsset_,\\n        IERC20 underlyer_,\\n        IMainRewarder rewarder_,\\n        address[] memory additionalTrackedTokens_,\\n        bytes memory params_\\n    ) external;\\n\\n    /// @notice Calculates the current value of our debt\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue() external returns (uint256 value);\\n\\n    /// @notice Calculates the current value of a portion of the debt based on shares\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @param shares The number of shares to value\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue(uint256 shares) external returns (uint256 value);\\n\\n    /// @notice Collects any earned rewards from staking, incentives, etc. Transfers to sender\\n    /// @dev Should be limited to LIQUIDATOR_ROLE. Rewards must be collected before claimed\\n    /// @return amounts amount of rewards claimed for each token\\n    /// @return tokens tokens claimed\\n    function collectRewards() external returns (uint256[] memory amounts, address[] memory tokens);\\n\\n    /// @notice Pull any non-tracked token to the specified destination\\n    /// @dev Should be limited to TOKEN_RECOVERY_ROLE\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Deposit underlying to receive destination vault shares\\n    /// @param amount amount of base lp asset to deposit\\n    function depositUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n    /// @notice Withdraw underlying by burning destination vault shares\\n    /// @param shares amount of destination vault shares to burn\\n    /// @param to destination of the underlying asset\\n    /// @return amount underlyer amount 'to' received\\n    function withdrawUnderlying(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Burn specified shares for underlyer swapped to base asset\\n    /// @param shares amount of vault shares to burn\\n    /// @param to destination of the base asset\\n    /// @return amount base asset amount 'to' received\\n    function withdrawBaseAsset(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Estimate the base asset amount that can be withdrawn given a certain number of shares. This function\\n    /// performs a \\\"simulation\\\" of the withdrawal process. It will actually execute the withdrawal, but will then revert\\n    /// the transaction, returning the estimated amount in the revert reason.\\n    /// @param shares The number of shares to be used in the estimation.\\n    /// @param to The address to receive the withdrawn amount.\\n    /// @param account Address involved in the withdrawal; Must be set to address(0).\\n    /// @return The estimated base asset amount.\\n    function estimateWithdrawBaseAsset(uint256 shares, address to, address account) external returns (uint256);\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    /// @dev Should pull back tokens from staking locations\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVault } from \\\"../vault/IDestinationVault.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ninterface IStrategy {\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event DestinationVaultAdded(address destination);\\n    event DestinationVaultRemoved(address destination);\\n    event WithdrawalQueueSet(address[] destinations);\\n    event AddedToRemovalQueue(address destination);\\n    event RemovedFromRemovalQueue(address destination);\\n\\n    error InvalidDestinationVault();\\n\\n    error RebalanceFailed(string message);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    /// @notice add supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to add\\n    function addDestinations(address[] calldata _destinations) external;\\n\\n    /// @notice remove supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to remove\\n    function removeDestinations(address[] calldata _destinations) external;\\n\\n    /// @param destinationIn The address / lp token of the destination vault that will increase\\n    /// @param tokenIn The address of the underlyer token that will be provided by the swapper\\n    /// @param amountIn The amount of the underlying LP tokens that will be received\\n    /// @param destinationOut The address of the destination vault that will decrease\\n    /// @param tokenOut The address of the underlyer token that will be received by the swapper\\n    /// @param amountOut The amount of the tokenOut that will be received by the swapper\\n    struct RebalanceParams {\\n        address destinationIn;\\n        address tokenIn;\\n        uint256 amountIn;\\n        address destinationOut;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    /// @notice rebalance the LMP from the tokenOut (decrease) to the tokenIn (increase)\\n    function rebalance(RebalanceParams memory params) external;\\n\\n    /// @notice rebalance the LMP from the tokenOut (decrease) to the tokenIn (increase)\\n    /// This uses a flash loan to receive the tokenOut to reduce the working capital requirements of the swapper\\n    /// @param receiver The contract receiving the tokens, needs to implement the\\n    /// `onFlashLoan(address user, address token, uint256 amount, uint256 fee, bytes calldata)` interface\\n    /// @param params Parameters by which to perform the rebalance\\n    /// @param data A data parameter to be passed on to the `receiver` for any custom use\\n    function flashRebalance(\\n        IERC3156FlashBorrower receiver,\\n        RebalanceParams calldata params,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice verify that a rebalance (swap between destinations) meets all the strategy constraints\\n    /// @param destinationIn The address of the destination vault that will increase\\n    /// @param tokenIn The address of the destination vault token that will be provided by the swapper\\n    /// @param amountIn The amount of the tokenIn that will be provided by the swapper\\n    /// @param destinationOut The address of the destination vault that will decrease\\n    /// @param tokenOut The address of the destination vault token that will be received by the swapper\\n    /// @param amountOut The amount of the tokenOut that will be received by the swapper\\n    function verifyRebalance(\\n        address destinationIn,\\n        address tokenIn,\\n        uint256 amountIn,\\n        address destinationOut,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external returns (bool success, string memory message);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IBaseAssetVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBaseAssetVault {\\n    /// @notice Asset that this Vault primarily manages\\n    /// @dev Vault decimals should be the same as the baseAsset\\n    function baseAsset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IMainRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\nimport { IExtraRewarder } from \\\"src/interfaces/rewarders/IExtraRewarder.sol\\\";\\n\\ninterface IMainRewarder is IBaseRewarder {\\n    error ExtraRewardsNotAllowed();\\n\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardsCleared();\\n    event ExtraRewardRemoved(address reward);\\n\\n    /**\\n     * @notice Adds an ExtraRewarder contract address to the extraRewards array.\\n     * @param reward The address of the ExtraRewarder contract.\\n     */\\n    function addExtraReward(address reward) external;\\n\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account, and transfers all\\n     * rewards for the account from this contract and any linked extra reward contracts.\\n     * @param account The address of the account to withdraw tokens and claim rewards for.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param claim If true, claims all rewards for the account from this contract and any linked extra reward\\n     * contracts.\\n     */\\n    function withdraw(address account, uint256 amount, bool claim) external;\\n\\n    /**\\n     * @notice Clears the extraRewards array.\\n     */\\n    function clearExtraRewards() external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract and any linked extra reward\\n     * contracts.\\n     * @dev If claimExtras is true, also claims all rewards from linked extra reward contracts.\\n     * @param account The address of the account to claim rewards for.\\n     * @param claimExtras If true, claims rewards from linked extra reward contracts.\\n     */\\n    function getReward(address account, bool claimExtras) external;\\n\\n    /**\\n     * @notice Number of extra rewards currently registered\\n     */\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the rewarder at the specified index\\n     */\\n    function getExtraRewarder(uint256 index) external view returns (IExtraRewarder);\\n\\n    /**\\n     * @notice Token that is tracked as the deposit token\\n     * @dev Rewards don't actually take possession of token\\n     */\\n    function stakeTracker() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"IERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IBaseRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStakeTracking } from \\\"src/interfaces/rewarders/IStakeTracking.sol\\\";\\n\\ninterface IBaseRewarder {\\n    event RewardAdded(\\n        uint256 reward,\\n        uint256 rewardRate,\\n        uint256 lastUpdateBlock,\\n        uint256 periodInBlockFinish,\\n        uint256 historicalRewards\\n    );\\n    event UserRewardUpdated(\\n        address indexed user, uint256 amount, uint256 rewardPerTokenStored, uint256 lastUpdateBlock\\n    );\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event QueuedRewardsUpdated(uint256 startingQueuedRewards, uint256 startingNewRewards, uint256 queuedRewards);\\n    event AddedToWhitelist(address indexed wallet);\\n    event RemovedFromWhitelist(address indexed wallet);\\n\\n    event TokeLockDurationUpdated(uint256 newDuration);\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account\\n     */\\n    function getReward() external;\\n\\n    /**\\n     * @notice Stakes the specified amount of tokens for the specified account.\\n     * @param account The address of the account to stake tokens for.\\n     * @param amount The amount of tokens to stake.\\n     */\\n    function stake(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Calculate the earned rewards for an account.\\n     * @param account Address of the account.\\n     * @return The earned rewards for the given account.\\n     */\\n    function earned(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the rewards per token for the current block.\\n     * @dev The total amount of rewards available in the system is fixed, and it needs to be distributed among the users\\n     * based on their token balances and staking duration.\\n     * Rewards per token represent the amount of rewards that each token is entitled to receive at the current block.\\n     * The calculation takes into account the reward rate, the time duration since the last update,\\n     * and the total supply of tokens in the staking pool.\\n     * @return The updated rewards per token value for the current block.\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current reward rate per block.\\n     * @return The current reward rate per block.\\n     */\\n    function rewardRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current TOKE lock duration.\\n     * @return The current TOKE lock duration.\\n     */\\n    function tokeLockDuration() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the last block where rewards are applicable.\\n     * @return The last block number where rewards are applicable.\\n     */\\n    function lastBlockRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of tokens staked\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens staked for the specified account\\n     * @param account The address of the account to get the balance of\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Queue new rewards to be distributed.\\n     * @param newRewards The amount of new rewards to be queued.\\n     */\\n    function queueNewRewards(uint256 newRewards) external;\\n\\n    /**\\n     * @notice Token distributed as rewards\\n     * @return reward token address\\n     */\\n    function rewardToken() external view returns (address);\\n\\n    /**\\n     * @notice Add an address to the whitelist.\\n     * @param wallet The address to be added to the whitelist.\\n     */\\n    function addToWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Remove an address from the whitelist.\\n     * @param wallet The address to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Check if an address is whitelisted.\\n     * @param wallet The address to be checked.\\n     * @return bool indicating if the address is whitelisted.\\n     */\\n    function isWhitelisted(address wallet) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IExtraRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\n\\ninterface IExtraRewarder is IBaseRewarder {\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account.\\n     * @param account The address of the account to withdraw tokens for.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdraw(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract.\\n     * @param account The address of the account to claim rewards for.\\n     */\\n    function getReward(address account) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IStakeTracking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IStakeTracking {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"erc4626-tests/=lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/\",\r\n      \"usingtellor/=lib/usingtellor/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"_systemRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MissingRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"}],\"name\":\"TemplateAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"}],\"name\":\"TemplateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actualOld\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"specifiedOld\",\"type\":\"address\"}],\"name\":\"TemplateReplaceMatches\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actualOld\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"specifiedOld\",\"type\":\"address\"}],\"name\":\"TemplateReplaceMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UndefinedAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTemplate\",\"type\":\"address\"}],\"name\":\"TemplateRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"TemplateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TemplateReplaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract IAccessController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"dependentAprIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calculatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newTemplate\",\"type\":\"address\"}],\"name\":\"registerTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"}],\"name\":\"removeTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"aprTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTemplate\",\"type\":\"address\"}],\"name\":\"replaceTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StatsCalculatorFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000406d2d96871f798fcf54d5969f69f55f803eea4", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}