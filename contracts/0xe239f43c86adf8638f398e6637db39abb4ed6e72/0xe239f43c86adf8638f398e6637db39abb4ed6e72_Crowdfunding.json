{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Crowdfunding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Crowdfunding is ReentrancyGuard {\\n   \\n    struct Campaign {\\n        address owner;\\n        string title;\\n        string url;\\n        string description;\\n        uint256 target;\\n        uint256 deadline;\\n        uint256 amountCollected;\\n        string image;\\n        address[] donators;\\n        uint256[] donations;\\n        address invited;\\n        bool exists;\\n    }\\n    \\n    IERC20 private _token;\\n    address private _owner;\\n    address public _crowdfunding;\\n\\n    address payable public wallet;\\n\\n    mapping(uint256 => Campaign) public campaigns;\\n    mapping (uint256 => bool) public votingsCampaigns;\\n\\n    uint256 public numberOfCampaigns = 0;\\n    uint256 public tokenAmount;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"owner only\\\");\\n        _;\\n    }\\n\\n    event TokenDonate(\\n        address indexed purchaser,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n\\n    constructor(IERC20 token, uint256 _tokenAmount, address payable _wallet) ReentrancyGuard() {\\n        require(_wallet != address(0));\\n        _token = token;\\n        tokenAmount = _tokenAmount * 10 ** 18;\\n        _owner = msg.sender;\\n        wallet = _wallet;\\n    }\\n\\n    function createCampaign(string memory _title, string memory _url, string memory _description, uint256 _target, uint256 _deadline, string memory _image, address _invited) nonReentrant public returns (uint256) {\\n        uint _titleLength = bytes(_title).length;\\n        uint _descriptionLength = bytes(_description).length;\\n        require(_target >= 100 * 10 ** 18, \\\"Mininum voice 100 GRAv\\\");\\n        require(_target <= 500 * 10 ** 18, \\\"Maximum voice 500 GRAv\\\");\\n        require(_deadline > block.timestamp, 'Check you deadline');\\n        require(_getBalance(msg.sender) > 1000 * 10 ** 18, \\\"You must need to buy GRAV\\\");\\n        require(_titleLength < 50, \\\"Title is so long\\\");\\n        require(_descriptionLength < 200, \\\"Description is so long\\\");\\n        Campaign storage campaign = campaigns[numberOfCampaigns];       \\n\\n        campaign.owner = msg.sender;\\n        campaign.title = _title;\\n        campaign.url = _url;\\n        campaign.description = _description;\\n        campaign.target = _target;\\n        campaign.deadline = _deadline;\\n        campaign.amountCollected = 0;\\n        campaign.image = _image;\\n        campaign.invited = _invited;\\n        campaign.exists = true;\\n\\n        numberOfCampaigns++;\\n\\n        return numberOfCampaigns - 1;\\n    }\\n\\n    function donateToCampaign(uint256 _id) nonReentrant public payable {\\n        uint256 bal = _getBalance(msg.sender);\\n        \\n        Campaign storage campaign = campaigns[_id];\\n        require(_getBalance(msg.sender) > 1000 * 10 ** 18, \\\"You must need to buy GRAV\\\");\\n        require(campaign.exists == true, 'Project missing');\\n        require(campaign.deadline > block.timestamp, 'Voting over you can create a new');\\n        \\n        _preValidatePurchase(msg.sender, 0, bal, campaign.owner, _id);\\n        _processPurchase(campaign.owner, tokenAmount);\\n\\n        emit TokenDonate(\\n            msg.sender,\\n            campaign.owner,\\n            tokenAmount\\n        );       \\n        \\n        campaign.donators.push(msg.sender);\\n        campaign.donations.push(tokenAmount);\\n        campaign.amountCollected = campaign.amountCollected + tokenAmount;\\n        \\n    }\\n\\n    function getDonators(uint256 _id) view public returns(address[] memory, uint256[] memory) {\\n        Campaign storage campaign = campaigns[_id];\\n        require(campaign.exists == true, 'Project missing');\\n        require(_getBalance(msg.sender) > 1000 * 10 ** 18, \\\"You must need to buy GRAV\\\");\\n        return (campaigns[_id].donators, campaigns[_id].donations);\\n    }\\n\\n    function getCampaigns() public view returns (Campaign[] memory) {\\n        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns);\\n\\n        for (uint i = 0; i < numberOfCampaigns; i++) {\\n            Campaign storage item = campaigns[i];\\n            allCampaigns[i] = item;\\n        }\\n        return allCampaigns;\\n    }\\n\\n    function getCampaign(uint256 _id) public view returns (Campaign memory) {\\n        require(_getBalance(msg.sender) > 1000 * 10 ** 18, \\\"Insufficient GRAV\\\");\\n        Campaign storage campaign = campaigns[_id];\\n        require(campaign.exists == true, 'Project missing');\\n\\n        return campaign;\\n    }\\n\\n    function _getBalance(address _addr) internal view returns (uint256) {\\n        return _token.balanceOf(_addr);\\n    }\\n\\n    function _deliverTokens(\\n        address _to,\\n        uint256 _tokenAmount\\n    )\\n        internal\\n    {\\n        _token.transfer( _to, _tokenAmount);\\n    }\\n\\n    function _preValidatePurchase(\\n        address _beneficiary,\\n        uint256 _weiAmount,\\n        uint256 _bal,\\n        address _campaingOwner,\\n        uint256 _id\\n    )\\n        internal view\\n    {\\n        require(_beneficiary != address(0));\\n        require(_weiAmount == 0);\\n        require(_bal > 1000 * 10 ** 18, \\\"Insufficient GRAV\\\");\\n        require(_campaingOwner != msg.sender, \\\"Owner can`t voting\\\");\\n        require(votingsCampaigns[_id], \\\"Please provide a project number in support\\\");\\n    }\\n\\n    function _processPurchase(\\n        address _to,\\n        uint256 _tokenAmount\\n    )\\n        internal\\n    {\\n        _deliverTokens( _to, _tokenAmount);\\n    }\\n\\n    function _getTokenAmount()\\n        public view returns (uint256)\\n    {\\n        return tokenAmount;\\n    }\\n\\n    function setVoting(uint256 _id, uint256 _amount)\\n       nonReentrant public payable\\n    {\\n        uint256 bal = _getBalance(msg.sender);\\n        \\n        Campaign storage campaign = campaigns[_id];\\n        require(campaign.exists == true, 'Project missing');\\n        require(campaign.deadline > block.timestamp, \\\"Voting over you can create a new\\\");\\n        require(msg.sender != address(0));\\n        require(msg.sender == campaign.owner, \\\"Publication owner only\\\");\\n        require(bal > 1000 * 10 ** 18, \\\"Insufficient GRAV\\\");\\n        require(_amount >= 100 * 10 ** 18, \\\"Minimum voting\\\");\\n        require(_amount <= 500 * 10 ** 18, \\\"Maximum voting\\\");\\n        _processPurchase(_crowdfunding, _amount);\\n\\n        emit TokenDonate(\\n            msg.sender,\\n            _crowdfunding,\\n            _amount\\n        );    \\n        votingsCampaigns[_id] = true;\\n    }\\n\\n    function getVoting(uint256 _id) external view returns(bool) {\\n        return votingsCampaigns[_id];\\n    }\\n\\n    function setCrowdfundingAddress(address _crowdfund) external onlyOwner {\\n        _crowdfunding = _crowdfund;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDonate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_crowdfunding\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"invited\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"donateToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"invited\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct Crowdfunding.Campaign\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaigns\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"invited\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct Crowdfunding.Campaign[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDonators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdfund\",\"type\":\"address\"}],\"name\":\"setCrowdfundingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setVoting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingsCampaigns\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Crowdfunding", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c10a9fa5c25780f700f0a97b804cc419b55a10c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c8c5861da7f3c2ab4b5a7b011b03c3cd65c152ab", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}