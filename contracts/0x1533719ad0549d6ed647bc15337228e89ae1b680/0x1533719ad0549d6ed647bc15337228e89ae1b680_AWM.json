{"SourceCode": "/*\r\n\r\nREWARDS SO SIMPLELE AN AUTIST CAN HANDLELE IT! \r\n\r\nTwitter: https://twitter.com/AutistWealthMgt\r\nTG: https://t.me/AWM_Portal\r\nWebsite: http://www.autistwealthmanagement.com/\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenHandler is Ownable {\r\n    function sendTokenToOwner(address token) external onlyOwner {\r\n        if(IERC20(token).balanceOf(address(this)) > 0){\r\n            IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract AWM is ERC20Detailed, Ownable {\r\n\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public rewardYield = 315920639267394;\r\n    uint256 public rewardYieldDenominator = 100000000000000000;\r\n\r\n    uint256 public rebaseFrequency = 1 days / 12; // 7200 seconds - every 2 hours\r\n    uint256 public nextRebase;\r\n    bool public autoRebase = true;\r\n\r\n    uint256 public timeBetweenRebaseReduction = 15 days;\r\n    uint256 public rebaseReductionAmount = 3; // 30% reduction\r\n    uint256 public lastReduction;\r\n\r\n    uint256 public maxTxnAmount;\r\n    uint256 public maxWallet;\r\n\r\n    mapping(address => bool) _isFeeExempt;\r\n    address[] public _makerPairs;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 public constant MAX_FEE_RATE = 5;\r\n    uint256 public constant MAX_REBASE_FREQUENCY = 7200;\r\n    uint256 public constant MIN_REBASE_FREQUENCY = 7200;\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = type(uint256).max;\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 6_942_000 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS = type(uint256).max - (type(uint256).max % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = 69_420_000 * 10**DECIMALS; \r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event RemovedLimits();\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public marketingAddress;\r\n    address public treasuryAddress;\r\n    address public PAIREDTOKEN;\r\n\r\n    IDEXRouter public immutable router;\r\n    address public pair;\r\n\r\n    TokenHandler public tokenHandler;\r\n\r\n     // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferBlock; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public liquidityFee = 0;\r\n    uint256 public marketingFee = 3;\r\n    uint256 public treasuryFee = 2;\r\n    uint256 public totalFee = liquidityFee + marketingFee + treasuryFee;\r\n    uint256 public feeDenominator = 100;\r\n    \r\n    bool public limitsInEffect = true;\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS / 100000 * 25);\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    constructor() ERC20Detailed(block.chainid==1 ? \"Autist Wealth Management\" : \"AWM\", block.chainid==1 ? \"AWM\" : \"AWM\", 18) {\r\n    //constructor() ERC20Detailed(block.chainid==1 ? \"Autist Wealth Management\" : \"AWM\", block.chainid==1 ? \"AWM\" : \"AWM\", 18) {\r\n        address dexAddress;\r\n        address pairedTokenAddress;\r\n        if(block.chainid == 1){\r\n            dexAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n            pairedTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; //WETH\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n        marketingAddress = address(0xa773aC8751AE7F4b9B5D4393Ce3204fDA32346ef); //Marketing\r\n        treasuryAddress = address(0x40bF1fd3578Bc4F8BadD3cbCbD419027E8614073); //Treasury\r\n\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n        \r\n        PAIREDTOKEN = pairedTokenAddress;\r\n\r\n        router = IDEXRouter(dexAddress);\r\n\r\n        tokenHandler = new TokenHandler();\r\n\r\n        _allowedFragments[address(this)][address(router)] = ~uint256(0);\r\n        _allowedFragments[address(msg.sender)][address(router)] = ~uint256(0);\r\n        _allowedFragments[address(this)][address(this)] = ~uint256(0);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS / 100 * 95;\r\n        _gonBalances[treasuryAddress] += TOTAL_GONS - _gonBalances[msg.sender];\r\n        _gonsPerFragment = TOTAL_GONS/(_totalSupply);\r\n\r\n        maxTxnAmount = _totalSupply * 1 / 100; // 1% max txn\r\n        maxWallet = _totalSupply * 1 / 100; // 1% max wallet\r\n        \r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[address(msg.sender)] = true;\r\n        _isFeeExempt[address(dexAddress)] = true;\r\n        _isFeeExempt[address(0xdead)] = true;\r\n\r\n        emit Transfer(address(0x0), msg.sender, balanceOf(msg.sender));\r\n        emit Transfer(address(0x0), treasuryAddress, balanceOf(treasuryAddress));  \r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) external view override returns (uint256){\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who]/(_gonsPerFragment);\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold/(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldRebase() public view returns (bool) {\r\n        return nextRebase <= block.timestamp;\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        if(_isFeeExempt[from] || _isFeeExempt[to]){\r\n            return false;\r\n        } else {\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n        !inSwap &&\r\n        swapEnabled &&\r\n        totalFee > 0 &&\r\n        _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    function manualSync() public {\r\n        for(uint i = 0; i < _makerPairs.length; i++){\r\n            try InterfaceLP(_makerPairs[i]).sync(){} catch {}\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    // alter the paired token so bots can't prep for new path (hypothetically)\r\n    function alterToken(address newToken) external onlyOwner {\r\n        require(newToken != address(0), \"Zero address\");\r\n        require(!tradingActive, \"trading already active\");\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), newToken);\r\n        _allowedFragments[address(this)][pair] = ~uint256(0);\r\n        setAutomatedMarketMakerPair(pair, true);\r\n        PAIREDTOKEN = newToken;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(!tradingActive){\r\n            require(_isFeeExempt[sender] || _isFeeExempt[recipient], \"Trading is paused\");\r\n        }\r\n\r\n        if(limitsInEffect){\r\n            if (!_isFeeExempt[sender] && !_isFeeExempt[recipient]){\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \r\n                if (transferDelayEnabled){\r\n                    if (recipient != address(router) && !automatedMarketMakerPairs[recipient]){\r\n                        require(_holderLastTransferBlock[tx.origin] + 2 < block.number && _holderLastTransferBlock[recipient] + 2 < block.number, \"_transfer:: Transfer Delay enabled.  Try again later.\");\r\n                        _holderLastTransferBlock[tx.origin] = block.number;\r\n                        _holderLastTransferBlock[recipient] = block.number;\r\n                    }\r\n                }\r\n                //when buy\r\n                if (automatedMarketMakerPairs[sender]) {\r\n                    require(amount <= maxTxnAmount, \"Buy transfer amount exceeds the max buy.\");\r\n                }\r\n                if (!automatedMarketMakerPairs[recipient]){\r\n                    require(balanceOf(recipient) + amount <= maxWallet, \"Max Wallet Exceeded\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!_isFeeExempt[sender] && !_isFeeExempt[recipient] && shouldSwapBack() && !automatedMarketMakerPairs[sender]){\r\n            inSwap = true;\r\n            swapBack();\r\n            inSwap = false;\r\n        }\r\n\r\n        if(autoRebase && !automatedMarketMakerPairs[sender] && !inSwap && shouldRebase() && !_isFeeExempt[recipient] && !_isFeeExempt[sender]){\r\n            rebase();\r\n        }\r\n\r\n        uint256 gonAmount = amount*(_gonsPerFragment);\r\n\r\n        _gonBalances[sender] = _gonBalances[sender]-(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, gonAmount) : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient]+(gonAmountReceived);\r\n\r\n        emit Transfer(sender, recipient, gonAmountReceived/(_gonsPerFragment));\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to,  uint256 value) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != MAX_UINT256) {\r\n            require(_allowedFragments[from][msg.sender] >= value,\"Insufficient Allowance\");\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender]-(value);\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function swapBack() public {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n        if(contractBalance > gonSwapThreshold/(_gonsPerFragment) * 20){\r\n            contractBalance = gonSwapThreshold/(_gonsPerFragment) * 20;\r\n        }\r\n\r\n        uint256 tokensForLiquidity = contractBalance * liquidityFee / totalFee;\r\n\r\n        if(tokensForLiquidity > 0 && contractBalance >= tokensForLiquidity){\r\n            _transferFrom(address(this), pair, tokensForLiquidity);\r\n            manualSync();\r\n            contractBalance -= tokensForLiquidity;\r\n            tokensForLiquidity = 0;\r\n        }\r\n        \r\n        swapTokensForPAIREDTOKEN(contractBalance);\r\n\r\n        tokenHandler.sendTokenToOwner(address(PAIREDTOKEN));\r\n        \r\n        uint256 pairedTokenBalance = IERC20(PAIREDTOKEN).balanceOf(address(this));\r\n\r\n        uint256 pairedTokenForTreasury = pairedTokenBalance * treasuryFee / (treasuryFee + marketingFee);\r\n\r\n        if(pairedTokenForTreasury > 0){\r\n            IERC20(PAIREDTOKEN).transfer(treasuryAddress, pairedTokenForTreasury);\r\n        }\r\n\r\n        if(IERC20(PAIREDTOKEN).balanceOf(address(this)) > 0){\r\n            IERC20(PAIREDTOKEN).transfer(marketingAddress, IERC20(PAIREDTOKEN).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function swapTokensForPAIREDTOKEN(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(PAIREDTOKEN);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount\r\n            path,\r\n            address(tokenHandler),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(address sender, uint256 gonAmount) internal returns (uint256){\r\n\r\n        uint256 feeAmount = gonAmount*(totalFee)/(feeDenominator);\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)]+(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount/(_gonsPerFragment));\r\n\r\n        return gonAmount-(feeAmount);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue-(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n        spender\r\n        ]+(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override returns (bool){\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function getSupplyDeltaOnNextRebase() external view returns (uint256){\r\n        return (_totalSupply*rewardYield)/rewardYieldDenominator;\r\n    }\r\n\r\n    function rebase() private returns (uint256) {\r\n        uint256 epoch = block.timestamp;\r\n\r\n        if(lastReduction + timeBetweenRebaseReduction <= block.timestamp){\r\n            rewardYield -= rewardYield * rebaseReductionAmount / 10;\r\n            lastReduction = block.timestamp;\r\n        }\r\n\r\n        uint256 supplyDelta = (_totalSupply*rewardYield)/rewardYieldDenominator;\r\n        \r\n        nextRebase = nextRebase + rebaseFrequency;\r\n\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        _totalSupply = _totalSupply+supplyDelta;\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS/(_totalSupply);\r\n\r\n        manualSync();\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external {\r\n        require(!inSwap, \"Try again\");\r\n        require(shouldRebase(), \"Not in time\");\r\n        rebase();\r\n    }\r\n    \r\n    function setAutomatedMarketMakerPair(address _pair, bool _value) public onlyOwner {\r\n        require(automatedMarketMakerPairs[_pair] != _value, \"Value already set\");\r\n\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if(_value){\r\n            _makerPairs.push(_pair);\r\n        } else {\r\n            require(_makerPairs.length > 1, \"Required 1 pair\");\r\n            for (uint256 i = 0; i < _makerPairs.length; i++) {\r\n                if (_makerPairs[i] == _pair) {\r\n                    _makerPairs[i] = _makerPairs[_makerPairs.length - 1];\r\n                    _makerPairs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingActive, \"Trading already active\");\r\n        tradingActive = true;\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n        lastReduction = block.timestamp;\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\r\n        require(_isFeeExempt[_addr] != _value, \"Not changed\");\r\n        _isFeeExempt[_addr] = _value;\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingReceiver, address _treasuryReceiver) external onlyOwner {\r\n        require(_marketingReceiver != address(0) && _treasuryReceiver != address(0), \"zero address\");\r\n        treasuryAddress = _treasuryReceiver;\r\n        marketingAddress = _marketingReceiver;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _treasuryFee) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        treasuryFee = _treasuryFee;\r\n        totalFee = liquidityFee + marketingFee + treasuryFee;\r\n        require(totalFee <= MAX_FEE_RATE, \"Fees set too high\");\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens, address destination) external onlyOwner returns (bool success){\r\n        require(tokenAddress != address(this), \"Cannot take native tokens\");\r\n        return ERC20Detailed(tokenAddress).transfer(destination, tokens);\r\n    }\r\n\r\n    function setNextRebase(uint256 _nextRebase) external onlyOwner {\r\n        require(_nextRebase > block.timestamp, \"Must set rebase in the future\");\r\n        nextRebase = _nextRebase;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REBASE_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REBASE_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIREDTOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_makerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"alterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyDeltaOnNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseReductionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRebase\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBetweenRebaseReduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHandler\",\"outputs\":[{\"internalType\":\"contract TokenHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AWM", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://399a7f69f0f71e3b311e1fbc4547db673f957a702e0d21ebd7ee9b22de0f665c"}