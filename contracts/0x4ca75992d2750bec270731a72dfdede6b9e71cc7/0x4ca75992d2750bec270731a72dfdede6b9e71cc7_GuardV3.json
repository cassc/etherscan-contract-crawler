{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\n// File @zeppelin-solidity/contracts/token/ERC20/IERC20.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File contracts/utils/TokenTransferHelper.sol\r\n// License-Identifier: MIT\r\n\r\nlibrary TokenTransferHelper {\r\n    function safeTransfer(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\r\n            IERC20.transfer.selector,\r\n            receiver,\r\n            amount\r\n        ));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"helix:transfer token failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\r\n            IERC20.transferFrom.selector,\r\n            sender,\r\n            receiver,\r\n            amount\r\n        ));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"helix:transferFrom token failed\");\r\n    }\r\n\r\n    function safeTransferNative(\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success,) = payable(receiver).call{value: amount}(\"\");\r\n        require(success, \"helix:transfer native token failed\");\r\n    }\r\n\r\n    function tryTransferNative(\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns(bool) {\r\n        (bool success,) = payable(receiver).call{value: amount}(\"\");\r\n        return success;\r\n    }\r\n}\r\n\r\n// File contracts/xtoken/v3/interfaces/IXTokenCallback.sol\r\n// License-Identifier: MIT\r\n\r\ninterface IXTokenCallback {\r\n    function xTokenCallback(\r\n        uint256 transferId,\r\n        address xToken,\r\n        uint256 amount,\r\n        bytes calldata extData\r\n    ) external;\r\n}\r\n\r\ninterface IXTokenRollbackCallback {\r\n    function xTokenRollbackCallback(\r\n        uint256 transferId,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/Strings.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/cryptography/ECDSA.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File contracts/xtoken/v3/templates/GuardRegistryV3.sol\r\n// License-Identifier: Apache-2.0\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Manages a set of guards and a threshold to double-check BEEFY commitment\r\n * @dev Stores the guards and a threshold\r\n * @author echo\r\n */\r\ncontract GuardRegistryV3 {\r\n    event AddedGuard(address guard);\r\n    event RemovedGuard(address guard);\r\n    event ChangedThreshold(uint256 threshold);\r\n\r\n    // keccak256(\r\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\r\n    // );\r\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    address internal constant SENTINEL_GUARDS = address(0x1);\r\n\r\n    /**\r\n     * @dev Nonce to prevent replay of update operations\r\n     */\r\n    uint256 public nonce;\r\n    /**\r\n     * @dev Store all guards in the linked list\r\n     */\r\n    mapping(address => address) internal guards;\r\n    /**\r\n     * @dev Count of all guards\r\n     */\r\n    uint256 internal guardCount;\r\n    /**\r\n     * @dev Number of required confirmations for update operations\r\n     */\r\n    uint256 internal threshold;\r\n\r\n    /**\r\n     * @dev Sets initial storage of contract.\r\n     * @param _guards List of Safe guards.\r\n     * @param _threshold Number of required confirmations for check commitment or change guards.\r\n     */\r\n    function initialize(address[] memory _guards, uint256 _threshold) internal {\r\n        // Threshold can only be 0 at initialization.\r\n        // Check ensures that setup function can only be called once.\r\n        require(threshold == 0, \"Guard: Guards have already been setup\");\r\n        // Validate that threshold is smaller than number of added guards.\r\n        require(_threshold <= _guards.length, \"Guard: Threshold cannot exceed guard count\");\r\n        // There has to be at least one Safe guard.\r\n        require(_threshold >= 1, \"Guard: Threshold needs to be greater than 0\");\r\n        // Initializing Safe guards.\r\n        address currentGuard = SENTINEL_GUARDS;\r\n        for (uint256 i = 0; i < _guards.length; i++) {\r\n            // Guard address cannot be null.\r\n            address guard = _guards[i];\r\n            require(guard != address(0) && guard != SENTINEL_GUARDS && guard != address(this) && currentGuard != guard, \"Guard: Invalid guard address provided\");\r\n            // No duplicate guards allowed.\r\n            require(guards[guard] == address(0), \"Guard: Address is already an guard\");\r\n            guards[currentGuard] = guard;\r\n            currentGuard = guard;\r\n            emit AddedGuard(guard);\r\n        }\r\n        guards[currentGuard] = SENTINEL_GUARDS;\r\n        guardCount = _guards.length;\r\n        threshold = _threshold;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to add a new guard to the registry and update the threshold at the same time.\r\n     *      This can only be done via multi-sig.\r\n     * @notice Adds the guard `guard` to the registry and updates the threshold to `_threshold`.\r\n     * @param guard New guard address.\r\n     * @param _threshold New threshold.\r\n     * @param signatures The signatures of the guards which to add new guard and update the `threshold` .\r\n     */\r\n    function addGuardWithThreshold(\r\n        address guard,\r\n        uint256 _threshold,\r\n        bytes[] memory signatures\r\n    ) public {\r\n        // Guard address cannot be null, the sentinel or the registry itself.\r\n        require(guard != address(0) && guard != SENTINEL_GUARDS && guard != address(this), \"Guard: Invalid guard address provided\");\r\n        // No duplicate guards allowed.\r\n        require(guards[guard] == address(0), \"Guard: Address is already an guard\");\r\n        verifyGuardSignatures(msg.sig, abi.encode(guard, _threshold), signatures);\r\n        guards[guard] = guards[SENTINEL_GUARDS];\r\n        guards[SENTINEL_GUARDS] = guard;\r\n        guardCount++;\r\n        emit AddedGuard(guard);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold) _changeThreshold(_threshold);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to remove an guard from the registry and update the threshold at the same time.\r\n     *      This can only be done via multi-sig.\r\n     * @notice Removes the guard `guard` from the registry and updates the threshold to `_threshold`.\r\n     * @param prevGuard Guard that pointed to the guard to be removed in the linked list\r\n     * @param guard Guard address to be removed.\r\n     * @param _threshold New threshold.\r\n     * @param signatures The signatures of the guards which to remove a guard and update the `threshold` .\r\n     */\r\n    function removeGuard(\r\n        address prevGuard,\r\n        address guard,\r\n        uint256 _threshold,\r\n        bytes[] memory signatures\r\n    ) public {\r\n        // Only allow to remove an guard, if threshold can still be reached.\r\n        require(guardCount - 1 >= _threshold, \"Guard: Threshold cannot exceed guard count\");\r\n        // Validate guard address and check that it corresponds to guard index.\r\n        require(guard != address(0) && guard != SENTINEL_GUARDS, \"Guard: Invalid guard address provided\");\r\n        require(guards[prevGuard] == guard, \"Guard: Invalid prevGuard, guard pair provided\");\r\n        verifyGuardSignatures(msg.sig, abi.encode(prevGuard, guard, _threshold), signatures);\r\n        guards[prevGuard] = guards[guard];\r\n        guards[guard] = address(0);\r\n        guardCount--;\r\n        emit RemovedGuard(guard);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold) _changeThreshold(_threshold);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to swap/replace a guard from the registry with another address.\r\n     *      This can only be done via multi-sig.\r\n     * @notice Replaces the guard `oldGuard` in the registry with `newGuard`.\r\n     * @param prevGuard guard that pointed to the guard to be replaced in the linked list\r\n     * @param oldGuard guard address to be replaced.\r\n     * @param newGuard New guard address.\r\n     * @param signatures The signatures of the guards which to swap/replace a guard and update the `threshold` .\r\n     */\r\n    function swapGuard(\r\n        address prevGuard,\r\n        address oldGuard,\r\n        address newGuard,\r\n        bytes[] memory signatures\r\n    ) public {\r\n        // Guard address cannot be null, the sentinel or the registry itself.\r\n        require(newGuard != address(0) && newGuard != SENTINEL_GUARDS && newGuard != address(this), \"Guard: Invalid guard address provided\");\r\n        // No duplicate guards allowed.\r\n        require(guards[newGuard] == address(0), \"Guard: Address is already an guard\");\r\n        // Validate oldGuard address and check that it corresponds to guard index.\r\n        require(oldGuard != address(0) && oldGuard != SENTINEL_GUARDS, \"Guard: Invalid guard address provided\");\r\n        require(guards[prevGuard] == oldGuard, \"Guard: Invalid prevGuard, guard pair provided\");\r\n        verifyGuardSignatures(msg.sig, abi.encode(prevGuard, oldGuard, newGuard), signatures);\r\n        guards[newGuard] = guards[oldGuard];\r\n        guards[prevGuard] = newGuard;\r\n        guards[oldGuard] = address(0);\r\n        emit RemovedGuard(oldGuard);\r\n        emit AddedGuard(newGuard);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to update the number of required confirmations by guards.\r\n     *      This can only be done via multi-sig.\r\n     * @notice Changes the threshold of the registry to `_threshold`.\r\n     * @param _threshold New threshold.\r\n     * @param signatures The signatures of the guards which to update the `threshold` .\r\n     */\r\n    function changeThreshold(uint256 _threshold, bytes[] memory signatures) public {\r\n        verifyGuardSignatures(msg.sig, abi.encode(_threshold), signatures);\r\n        _changeThreshold(_threshold);\r\n    }\r\n\r\n    function _changeThreshold(uint256 _threshold) internal {\r\n        // Validate that threshold is smaller than number of owners.\r\n        require(_threshold <= guardCount, \"Guard: Threshold cannot exceed guard count\");\r\n        // There has to be at least one guard.\r\n        require(_threshold >= 1, \"Guard: Threshold needs to be greater than 0\");\r\n        threshold = _threshold;\r\n        emit ChangedThreshold(threshold);\r\n    }\r\n\r\n    function getThreshold() public view returns (uint256) {\r\n        return threshold;\r\n    }\r\n\r\n    function isGuard(address guard) public view returns (bool) {\r\n        return guard != SENTINEL_GUARDS && guards[guard] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of guards.\r\n     * @return Array of guards.\r\n     */\r\n    function getGuards() public view returns (address[] memory) {\r\n        address[] memory array = new address[](guardCount);\r\n\r\n        // populate return array\r\n        uint256 index = 0;\r\n        address currentGuard = guards[SENTINEL_GUARDS];\r\n        while (currentGuard != SENTINEL_GUARDS) {\r\n            array[index] = currentGuard;\r\n            currentGuard = guards[currentGuard];\r\n            index++;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function verifyGuardSignatures(\r\n        bytes4 methodID,\r\n        bytes memory params,\r\n        bytes[] memory signatures\r\n    ) internal {\r\n        bytes32 structHash =\r\n            keccak256(\r\n                abi.encode(\r\n                    methodID,\r\n                    params,\r\n                    nonce\r\n                )\r\n            );\r\n        checkGuardSignatures(structHash, signatures);\r\n        nonce++;\r\n    }\r\n\r\n    function verifyGuardSignaturesWithoutNonce(\r\n        bytes4 methodID,\r\n        bytes memory params,\r\n        bytes[] memory signatures\r\n    ) view internal {\r\n        bytes32 structHash =\r\n            keccak256(\r\n                abi.encode(\r\n                    methodID,\r\n                    params\r\n                )\r\n            );\r\n        checkGuardSignatures(structHash, signatures);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\r\n     * @param structHash The struct Hash of the data (could be either a message/commitment hash).\r\n     * @param signatures Signature data that should be verified. only ECDSA signature.\r\n     * Signers need to be sorted in ascending order\r\n     */\r\n    function checkGuardSignatures(\r\n        bytes32 structHash,\r\n        bytes[] memory signatures\r\n    ) public view {\r\n        // Load threshold to avoid multiple storage loads\r\n        uint256 _threshold = threshold;\r\n        // Check that a threshold is set\r\n        require(_threshold > 0, \"Guard: Threshold needs to be defined\");\r\n        bytes32 dataHash = encodeDataHash(structHash);\r\n        checkNSignatures(dataHash, signatures, _threshold);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash).\r\n     * @param signatures Signature data that should be verified. only ECDSA signature.\r\n     * Signers need to be sorted in ascending order\r\n     * @param requiredSignatures Amount of required valid signatures.\r\n     */\r\n    function checkNSignatures(\r\n        bytes32 dataHash,\r\n        bytes[] memory signatures,\r\n        uint256 requiredSignatures\r\n    ) public view {\r\n        // Check that the provided signature data is not too short\r\n        require(signatures.length >= requiredSignatures, \"GS020\");\r\n        // There cannot be an owner with address 0.\r\n        address lastGuard = address(0);\r\n        address currentGuard;\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            currentGuard = ECDSA.recover(dataHash, signatures[i]);\r\n            require(currentGuard > lastGuard && guards[currentGuard] != address(0) && currentGuard != SENTINEL_GUARDS, \"Guard: Invalid guard provided\");\r\n            lastGuard = currentGuard;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the chain id used by this contract.\r\n     */\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function domainSeparator() public view returns (bytes32) {\r\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), address(this)));\r\n    }\r\n\r\n    function encodeDataHash(bytes32 structHash) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(hex\"1901\", domainSeparator(), structHash));\r\n    }\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/Context.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/security/Pausable.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/introspection/IERC165.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/introspection/ERC165Checker.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\r\n\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // prepare call\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n\r\n        // perform static call\r\n        bool success;\r\n        uint256 returnSize;\r\n        uint256 returnValue;\r\n        assembly {\r\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\r\n            returnSize := returndatasize()\r\n            returnValue := mload(0x00)\r\n        }\r\n\r\n        return success && returnSize >= 0x20 && returnValue > 0;\r\n    }\r\n}\r\n\r\n// File @zeppelin-solidity/contracts/utils/introspection/ERC165.sol@v4.7.3\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File contracts/xtoken/v3/templates/GuardV3.sol\r\n// License-Identifier: Apache-2.0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GuardV3 is GuardRegistryV3, Pausable, ERC165 {\r\n    mapping(uint256 => bytes32) public deposits;\r\n\r\n    uint256 public maxUnclaimableTime;\r\n    mapping(address => bool) public depositors;\r\n    address public operator;\r\n\r\n    event TokenDeposit(address sender, uint256 id, uint256 timestamp, address token, uint256 amount, bytes data);\r\n    event TokenClaimed(uint256 id);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(\r\n        address[] memory _guards,\r\n        address _operator,\r\n        uint256 _threshold,\r\n        uint256 _maxUnclaimableTime\r\n    ) {\r\n        maxUnclaimableTime = _maxUnclaimableTime;\r\n        operator = _operator;\r\n        initialize(_guards, _threshold);\r\n    }\r\n\r\n    modifier onlyDepositor() {\r\n        require(depositors[msg.sender] == true, \"Guard: Invalid depositor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"Guard: Invalid operator\");\r\n        _;\r\n    }\r\n\r\n    function unpause() external onlyOperator {\r\n        _unpause();\r\n    }\r\n\r\n    function pause() external onlyOperator {\r\n        _pause();\r\n    }\r\n\r\n    function setOperator(address _operator, bytes[] calldata _signatures) external {\r\n        verifyGuardSignatures(msg.sig, abi.encode(_operator), _signatures);\r\n        operator = _operator;\r\n    }\r\n\r\n    function setDepositor(address _depositor, bool _enable) external onlyOperator {\r\n        depositors[_depositor] = _enable;\r\n    }\r\n\r\n    function setMaxUnclaimableTime(uint256 _maxUnclaimableTime, bytes[] calldata _signatures) external {\r\n        verifyGuardSignatures(msg.sig, abi.encode(_maxUnclaimableTime), _signatures);\r\n        maxUnclaimableTime = _maxUnclaimableTime;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IXTokenCallback).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n      * @dev deposit token to guard, waiting to claim, only allowed depositor\r\n      * @param _transferId the id of the operation, should be siged later by guards\r\n      * @param _xToken the erc20 token address\r\n      * @param _amount the amount of the token\r\n      * @param _extData encoding on source: abi.encode(address(recipient), bytes(nextExtData))\r\n      *                 if recipient is an EOA address, then nextExtData = \"0x\"\r\n      *                 if recipient is a contract address support `xTokenCallback` interface, then nextExtData is the interface's parameter\r\n      */\r\n    function xTokenCallback(\r\n        uint256 _transferId,\r\n        address _xToken,\r\n        uint256 _amount,\r\n        bytes calldata _extData\r\n    ) external onlyDepositor whenNotPaused {\r\n        require(deposits[_transferId] == bytes32(0), \"Guard: deposit conflict\");\r\n        deposits[_transferId] = hash(abi.encodePacked(msg.sender, block.timestamp, _xToken, _amount, _extData));\r\n        // ensure can be decoded by abi.decode(_extData, (address, bytes))\r\n        require(_extData.length >= 96, \"invalid extData\");\r\n        emit TokenDeposit(msg.sender, _transferId, block.timestamp, _xToken, _amount, _extData);\r\n    }\r\n\r\n    function claimById(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _timestamp,\r\n        address _token,\r\n        uint256 _amount,\r\n        bytes calldata _extData\r\n    ) internal {\r\n        require(hash(abi.encodePacked(_from, _timestamp, _token, _amount, _extData)) == deposits[_id], \"Guard: Invalid id to claim\");\r\n        require(_amount > 0, \"Guard: Invalid amount to claim\");\r\n        delete deposits[_id];\r\n        (address recipient, bytes memory data) = abi.decode(_extData, (address, bytes));\r\n        TokenTransferHelper.safeTransfer(_token, recipient, _amount);\r\n\r\n        emit TokenClaimed(_id);\r\n        if (ERC165Checker.supportsInterface(recipient, type(IXTokenCallback).interfaceId)) {\r\n            IXTokenCallback(recipient).xTokenCallback(_id, _token, _amount, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev claim the tokens in the contract saved by deposit, this acquire signatures from guards\r\n      * @param _id the id to be claimed\r\n      * @param _signatures the signatures of the guards which to claim tokens.\r\n      */\r\n    function claim(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _timestamp,\r\n        address _token,\r\n        uint256 _amount,\r\n        bytes calldata _extData,\r\n        bytes[] calldata _signatures\r\n    ) public {\r\n        verifyGuardSignaturesWithoutNonce(msg.sig, abi.encode(_from, _id, _timestamp, _token, _amount, _extData), _signatures);\r\n        claimById(_from, _id, _timestamp, _token, _amount, _extData);\r\n    }\r\n\r\n    function rescueFunds(\r\n        address _token,\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes[] calldata _signatures\r\n    ) external {\r\n        verifyGuardSignatures(msg.sig, abi.encode(_token, _recipient, _amount), _signatures);\r\n        if (_token == address(0)) {\r\n            payable(_recipient).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).transfer(_recipient, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev claim the tokens without signatures, this only allowed when timeout\r\n      * @param _id the id to be claimed\r\n      */\r\n    function claimByTimeout(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _timestamp,\r\n        address _token,\r\n        uint256 _amount,\r\n        bytes calldata _extData\r\n    ) public whenNotPaused {\r\n        require(_timestamp < block.timestamp && block.timestamp - _timestamp > maxUnclaimableTime, \"Guard: claim at invalid time\");\r\n        claimById(_from, _id, _timestamp, _token, _amount, _extData);\r\n    }\r\n\r\n    function hash(bytes memory _value) public pure returns (bytes32) {\r\n        return sha256(_value);\r\n    }\r\n\r\n    function encodeExtData(address recipient, bytes calldata extData) external pure returns (bytes memory) {\r\n        return abi.encode(recipient, extData);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_guards\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUnclaimableTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"AddedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"RemovedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"addGuardWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"structHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"checkGuardSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extData\",\"type\":\"bytes\"}],\"name\":\"claimByTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"structHash\",\"type\":\"bytes32\"}],\"name\":\"encodeDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extData\",\"type\":\"bytes\"}],\"name\":\"encodeExtData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"isGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnclaimableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevGuard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"removeGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUnclaimableTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"setMaxUnclaimableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevGuard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldGuard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGuard\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"swapGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extData\",\"type\":\"bytes\"}],\"name\":\"xTokenCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GuardV3", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000088a39b052d477cfde47600a7c9950a441ce61cb40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000003f48000000000000000000000000000000000000000000000000000000000000000010000000000000000000000003b9e571adecb0c277486036d6097e9c2cccfa9d9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b2ff2e93df07c5a9045bb648a3ab7eeb9a8e4d31928d8491142505e5c6a7f371"}