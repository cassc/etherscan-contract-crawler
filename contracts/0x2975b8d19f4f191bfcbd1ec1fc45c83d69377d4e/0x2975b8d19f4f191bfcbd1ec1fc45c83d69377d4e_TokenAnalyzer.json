{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract TokenAnalyzer {\r\n    IUniswapV2Router public uniswapV2Router;\r\n    address public owner;\r\n\r\n    constructor(address _uniswapV2Router) {\r\n        uniswapV2Router = IUniswapV2Router(_uniswapV2Router);\r\n        owner = msg.sender;  // Set the contract deployer as the owner\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function analyzeToken(address tokenAddress) external payable returns (bool isHoneypot, uint256 buyTax, uint256 sellTax) {\r\n        address wethAddress = uniswapV2Router.WETH();\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = wethAddress;\r\n        path[1] = tokenAddress;\r\n\r\n        uint256[] memory amountsOutBuy;\r\n        uint256[] memory amountsOutSell;\r\n\r\n        // Estimate tokens to be received\r\n        uint256[] memory estimatedTokens = uniswapV2Router.getAmountsOut(msg.value, path);\r\n        uint256 estimatedTokensReceived = estimatedTokens[1];\r\n\r\n        // Try simulating a buy\r\n        try uniswapV2Router.swapExactETHForTokens{value: msg.value}(0, path, address(this), block.timestamp + 15) returns (uint256[] memory result) {\r\n            amountsOutBuy = result;\r\n        } catch {\r\n            isHoneypot = true;\r\n            return (isHoneypot, 0, 0);\r\n        }\r\n\r\n        uint256 actualTokensReceived = amountsOutBuy[1];\r\n        buyTax = ((estimatedTokensReceived - actualTokensReceived) * 1000) / estimatedTokensReceived;  // Calculating buyTax based on estimated and actual tokens received\r\n\r\n        path[0] = tokenAddress;\r\n        path[1] = wethAddress;\r\n\r\n        // Reset approve\r\n        IERC20(tokenAddress).approve(address(uniswapV2Router), 0);\r\n        IERC20(tokenAddress).approve(address(uniswapV2Router), actualTokensReceived);\r\n\r\n        // Estimate ETH to be received\r\n        uint256[] memory estimatedEth = uniswapV2Router.getAmountsOut(actualTokensReceived, path);\r\n        uint256 estimatedEthReceived = estimatedEth[1];\r\n\r\n        // Try simulating a sell\r\n        try uniswapV2Router.swapExactTokensForETH(actualTokensReceived, 0, path, address(this), block.timestamp + 15) returns (uint256[] memory result) {\r\n            amountsOutSell = result;\r\n        } catch {\r\n            isHoneypot = true;\r\n            return (isHoneypot, buyTax, 0);\r\n        }\r\n\r\n        uint256 actualEthReceived = amountsOutSell[1];\r\n        sellTax = ((estimatedEthReceived - actualEthReceived) * 1000) / estimatedEthReceived;  // Calculating sellTax based on estimated and actual ETH received\r\n\r\n        if (actualTokensReceived == 0 || actualEthReceived == 0) {\r\n            isHoneypot = true;\r\n        }\r\n\r\n        return (isHoneypot, buyTax, sellTax);\r\n    }\r\n\r\n    // Function to withdraw ETH from the contract\r\n    function withdrawETH(uint256 amount) external onlyOwner {\r\n        require(amount <= address(this).balance, \"Insufficient balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    // Fallback function to accept ETH\r\n    fallback() external payable {\r\n    }\r\n\r\n    // Receive function to accept ETH\r\n    receive() external payable {\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"analyzeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isHoneypot\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenAnalyzer", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6087767f398ddf987b32604e10bd9d5aba2b83e2002e920bd2112669be53fa1"}