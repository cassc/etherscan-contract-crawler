{"SourceCode": "{\"Dependencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\"},\"SteviepRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\\n| $$  \\\\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\\\ $$\\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\\n \\\\____  $$   | $$   | $$__/    \\\\  $$ $$/   | $$  | $$__/   | $$____/\\n /$$  \\\\ $$   | $$   | $$        \\\\  $$$/    | $$  | $$      | $$\\n|  $$$$$$/   | $$   | $$$$$$$$   \\\\  $/    /$$$$$$| $$$$$$$$| $$\\n \\\\______/    |__/   |________/    \\\\_/    |______/|________/|__/\\n\\n\\n\\n /$$$$$$$  /$$$$$$$$  /$$$$$$  /$$$$$$  /$$$$$$  /$$$$$$$$ /$$$$$$$  /$$     /$$\\n| $$__  $$| $$_____/ /$$__  $$|_  $$_/ /$$__  $$|__  $$__/| $$__  $$|  $$   /$$/\\n| $$  \\\\ $$| $$      | $$  \\\\__/  | $$  | $$  \\\\__/   | $$   | $$  \\\\ $$ \\\\  $$ /$$/\\n| $$$$$$$/| $$$$$   | $$ /$$$$  | $$  |  $$$$$$    | $$   | $$$$$$$/  \\\\  $$$$/\\n| $$__  $$| $$__/   | $$|_  $$  | $$   \\\\____  $$   | $$   | $$__  $$   \\\\  $$/\\n| $$  \\\\ $$| $$      | $$  \\\\ $$  | $$   /$$  \\\\ $$   | $$   | $$  \\\\ $$    | $$\\n| $$  | $$| $$$$$$$$|  $$$$$$/ /$$$$$$|  $$$$$$/   | $$   | $$  | $$    | $$\\n|__/  |__/|________/ \\\\______/ |______/ \\\\______/    |__/   |__/  |__/    |__/\\n\\n\\n  by steviep.eth\\n\\n*/\\n\\nimport \\\"./Dependencies.sol\\\";\\n\\n\\npragma solidity ^0.8.17;\\n\\n\\ninterface IRouter {\\n  function tokenIsValid(address addr, uint256 tokenId) external view returns (bool);\\n}\\n\\ncontract SteviepRegistry is Ownable {\\n  IRouter public forwardedRouter;\\n  FullContractRouter public fullContractRouter;\\n\\n  mapping(address =\\u003e address) public routerOverride;\\n\\n  constructor() {\\n    fullContractRouter = new FullContractRouter();\\n    ABContractRouter ab = new ABContractRouter();\\n\\n    routerOverride[0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270] = address(ab);\\n    routerOverride[0x99a9B7c1116f9ceEB1652de04d5969CcE509B069] = address(ab);\\n\\n    RangeRouter rr = new RangeRouter();\\n\\n    routerOverride[0x18dE6097cE5B5B2724C9Cae6Ac519917f3F178c0] = address(rr);\\n    routerOverride[0x76570EFa012b27892E0589846cfa7890609Ad45D] = address(rr);\\n\\n  }\\n\\n\\n  function tokenIsValid(address tokenContract, uint256 tokenId) external view returns (bool) {\\n    if (address(forwardedRouter) != address(0)) {\\n      return forwardedRouter.tokenIsValid(tokenContract, tokenId);\\n\\n    } else if (address(routerOverride[tokenContract]) == address(0)) {\\n      return fullContractRouter.tokenIsValid(tokenContract, tokenId);\\n\\n    } else {\\n      return IRouter(routerOverride[tokenContract]).tokenIsValid(tokenContract, tokenId);\\n    }\\n  }\\n\\n  function setOverride(address tokenContract, address routerContract) external onlyOwner {\\n    routerOverride[tokenContract] = routerContract;\\n  }\\n\\n  function forward(IRouter router) external onlyOwner {\\n    forwardedRouter = router;\\n  }\\n}\\n\\n\\ncontract FullContractRouter is Ownable {\\n  mapping(address =\\u003e bool) public contractAL;\\n\\n  constructor() {\\n    contractAL[0x4f9e2E709895CC8ae62be86c6289F7081Ba048A6] = true; // SJPs\\n    contractAL[0x13178AB07A88f065EFe6D06089a6e6AB55AE8a15] = true; // IOUs\\n    contractAL[0xE6da43BCFA2aE0eD8C6aC4b3BEeA1eC9ae65DAbA] = true; // NVCs\\n    contractAL[0xBD1cA111380B436350034c7040E7C44949605702] = true; // NFs\\n    contractAL[0x30b541f1182ef19c56a39634B2fdACa5a0F2A741] = true; // Free\\n    contractAL[0xf49b26cF118Db11A7DD1D9B88C7E1bC153851757] = true; // UFIM\\n    contractAL[0x13bBBEfE251c94467D183821b663Ef0bD0a8A722] = true; // 10ETH\\n    contractAL[0x59fAcEa786c01A178f0d5BbEff8BE8bA7091D0bd] = true; // TO\\n    contractAL[0x3C6Fe936f6e050C243B901D809AEA24084674687] = true; // Editions\\n    contractAL[0x9304D9116Bb83ccedCc33ac4918Adb9b1E104230] = true; // Fiefdoms\\n    contractAL[0x41d3d86a84c8507A7Bc14F2491ec4d188FA944E7] = true; // MMO\\n    contractAL[0x1c218412046fdFCD561806bE1DCb2c94307Be625] = true; // MMO15\\n    contractAL[0xA860D381A193A0811C77c8FCD881B3E9F245A419] = true; // OFFON\\n  }\\n\\n  function setContract(address addr, bool al) external onlyOwner {\\n    contractAL[addr] = al;\\n  }\\n\\n  function tokenIsValid(address addr, uint256) external view returns (bool) {\\n    return contractAL[addr];\\n  }\\n\\n  function tokenIsValid(address addr) external view returns (bool) {\\n    return contractAL[addr];\\n  }\\n}\\n\\n\\ninterface IABContract {\\n  function tokenIdToProjectId(uint256) external view returns (uint256);\\n}\\n\\ncontract ABContractRouter is Ownable, IRouter {\\n\\n  mapping(uint256 =\\u003e bool) public projectIdAL;\\n  mapping(address =\\u003e bool) public abContractAL;\\n\\n  constructor() {\\n    abContractAL[0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270] = true;\\n    abContractAL[0x99a9B7c1116f9ceEB1652de04d5969CcE509B069] = true;\\n    projectIdAL[44] = true; // CGK\\n    projectIdAL[102] = true; // ISIIAD\\n    projectIdAL[152] = true; // FIM\\n    projectIdAL[316] = true; // Maps\\n    projectIdAL[387] = true; // Pointers\\n    projectIdAL[457] = true; // DMs\\n  }\\n\\n  function setProjectId(uint256 projectId, bool al) external onlyOwner {\\n    projectIdAL[projectId] = al;\\n  }\\n\\n  function setABContract(address addr, bool al) external onlyOwner {\\n    abContractAL[addr] = al;\\n  }\\n\\n  function tokenIsValid(address addr, uint256 tokenId) external view returns (bool) {\\n    require(abContractAL[addr], \\u0027Not an AB contract\\u0027);\\n    uint256 projectId = IABContract(addr).tokenIdToProjectId(tokenId);\\n    return projectIdAL[projectId];\\n  }\\n}\\n\\ncontract RangeRouter is Ownable, IRouter {\\n  struct Range {\\n    uint256 min;\\n    uint256 exclusiveMax;\\n  }\\n\\n  mapping(address =\\u003e Range) public addrToRange;\\n\\n  constructor() {\\n    addrToRange[0x18dE6097cE5B5B2724C9Cae6Ac519917f3F178c0] = Range(0, 712); // IFD\\n    addrToRange[0x76570EFa012b27892E0589846cfa7890609Ad45D] = Range(200, 300); // TAAT\\n\\n  }\\n\\n  function setRange(address addr, uint256 min, uint256 exclusiveMax) external onlyOwner {\\n    addrToRange[addr] = Range(min, exclusiveMax);\\n  }\\n\\n  function tokenIsValid(address addr, uint256 tokenId) external view returns (bool) {\\n    return (\\n      tokenId \\u003e= addrToRange[addr].min\\n      \\u0026\\u0026 tokenId \\u003c addrToRange[addr].exclusiveMax\\n    );\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardedRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullContractRouter\",\"outputs\":[{\"internalType\":\"contract FullContractRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerOverride\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerContract\",\"type\":\"address\"}],\"name\":\"setOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SteviepRegistry", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e8415c6a8d2b5fc666e74e24ec3da0d5ce2aa993abcbe205bcbe1ec01936c6d"}