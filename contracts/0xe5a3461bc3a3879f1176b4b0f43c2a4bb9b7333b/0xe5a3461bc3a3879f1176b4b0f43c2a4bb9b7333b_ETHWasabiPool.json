{"SourceCode": "// File: contracts/IWasabiPoolFactory.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Required interface of an WasabiPoolFactory compliant contract.\r\n */\r\ninterface IWasabiPoolFactory {\r\n\r\n    /**\r\n     * @dev The States of Pools\r\n     */\r\n    enum PoolState {\r\n        INVALID,\r\n        ACTIVE,\r\n        DISABLED\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when there is a new pool created\r\n     */\r\n    event NewPool(address poolAddress, address indexed nftAddress, address indexed owner);\r\n\r\n    /**\r\n     * @dev INVALID/ACTIVE/DISABLE the specified pool.\r\n     */\r\n    function togglePool(address _poolAddress, PoolState _poolState) external;\r\n\r\n    /**\r\n     * @dev Checks if the pool for the given address is enabled.\r\n     */\r\n    function isValidPool(address _poolAddress) external view returns(bool);\r\n\r\n    /**\r\n     * @dev Returns the PoolState\r\n     */\r\n    function getPoolState(address _poolAddress) external view returns(PoolState);\r\n\r\n    /**\r\n     * @dev Returns IWasabiConduit Contract Address.\r\n     */\r\n    function getConduitAddress() external view returns(address);\r\n\r\n    /**\r\n     * @dev Returns IWasabiFeeManager Contract Address.\r\n     */\r\n    function getFeeManager() external view returns(address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/fees/IWasabiFeeManager.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an Wasabi Fee Manager compliant contract.\r\n */\r\ninterface IWasabiFeeManager {\r\n    /**\r\n     * @dev Returns the fee data for the given pool and amount\r\n     * @param _pool the pool address\r\n     * @param _amount the amount being paid\r\n     * @return receiver the receiver of the fee\r\n     * @return amount the fee amount\r\n     */\r\n    function getFeeData(address _pool, uint256 _amount) external view returns (address receiver, uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns the fee data for the given option and amount\r\n     * @param _optionId the option id\r\n     * @param _amount the amount being paid\r\n     * @return receiver the receiver of the fee\r\n     * @return amount the fee amount\r\n     */\r\n    function getFeeDataForOption(uint256 _optionId, uint256 _amount) external view returns (address receiver, uint256 amount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/WasabiStructs.sol\r\n\r\n\r\n\r\nlibrary WasabiStructs {\r\n    enum OptionType {\r\n        CALL,\r\n        PUT\r\n    }\r\n\r\n    struct OptionData {\r\n        bool active;\r\n        OptionType optionType;\r\n        uint256 strikePrice;\r\n        uint256 expiry;\r\n        uint256 tokenId; // Locked token for CALL options\r\n    }\r\n\r\n    struct PoolAsk {\r\n        uint256 id;\r\n        address poolAddress;\r\n        OptionType optionType;\r\n        uint256 strikePrice;\r\n        uint256 premium;\r\n        uint256 expiry;\r\n        uint256 tokenId; // Token to lock for CALL options\r\n        uint256 orderExpiry;\r\n    }\r\n\r\n    struct PoolBid {\r\n        uint256 id;\r\n        uint256 price;\r\n        address tokenAddress;\r\n        uint256 orderExpiry;\r\n        uint256 optionId;\r\n    }\r\n\r\n    struct Bid {\r\n        uint256 id;\r\n        uint256 price;\r\n        address tokenAddress;\r\n        address collection;\r\n        uint256 orderExpiry;\r\n        address buyer;\r\n        OptionType optionType;\r\n        uint256 strikePrice;\r\n        uint256 expiry;\r\n        uint256 expiryAllowance;\r\n        address optionTokenAddress;\r\n    }\r\n\r\n    struct Ask {\r\n        uint256 id;\r\n        uint256 price;\r\n        address tokenAddress;\r\n        uint256 orderExpiry;\r\n        address seller;\r\n        uint256 optionId;\r\n    }\r\n\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        uint256 chainId;\r\n        address verifyingContract;\r\n    }\r\n\r\n    struct ExecutionInfo {\r\n        address module;\r\n        bytes data;\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/IWasabiPool.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an WasabiPool compliant contract.\r\n */\r\ninterface IWasabiPool is IERC165, IERC721Receiver {\r\n    \r\n    /**\r\n     * @dev Emitted when `admin` is changed.\r\n     */\r\n    event AdminChanged(address admin);\r\n\r\n    /**\r\n     * @dev Emitted when an order is cancelled.\r\n     */\r\n    event OrderCancelled(uint256 id);\r\n\r\n    /**\r\n     * @dev Emitted when a pool bid is taken\r\n     */\r\n    event PoolBidTaken(uint256 id);\r\n\r\n    /**\r\n     * @dev Emitted when an ERC721 is received\r\n     */\r\n    event ERC721Received(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when ETH is received\r\n     */\r\n    event ETHReceived(uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when ERC20 is received\r\n     */\r\n    event ERC20Received(uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when an ERC721 is withdrawn\r\n     */\r\n    event ERC721Withdrawn(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when ERC20 is withdrawn\r\n     */\r\n    event ERC20Withdrawn(uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when ETH is withdrawn\r\n     */\r\n    event ETHWithdrawn(uint amount);\r\n\r\n    /**\r\n     * @dev Emitted when an option is executed.\r\n     */\r\n    event OptionExecuted(uint256 optionId);\r\n\r\n    /**\r\n     * @dev Emitted when an option is issued\r\n     */\r\n    event OptionIssued(uint256 optionId, uint256 price);\r\n\r\n    /**\r\n     * @dev Emitted when an option is issued\r\n     */\r\n    event OptionIssued(uint256 optionId, uint256 price, uint256 poolAskId);\r\n\r\n    /**\r\n     * @dev Emitted when the pool settings are edited\r\n     */\r\n    event PoolSettingsChanged();\r\n\r\n    /**\r\n     * @dev Returns the address of the nft\r\n     */\r\n    function getNftAddress() external view returns(address);\r\n\r\n    /**\r\n     * @dev Returns the address of the nft\r\n     */\r\n    function getLiquidityAddress() external view returns(address);\r\n\r\n    /**\r\n     * @dev Writes an option for the given ask.\r\n     */\r\n    function writeOption(\r\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Writes an option for the given rule and buyer.\r\n     */\r\n    function writeOptionTo(\r\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature, address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Executes the option for the given id.\r\n     */\r\n    function executeOption(uint256 _optionId) external payable;\r\n\r\n    /**\r\n     * @dev Executes the option for the given id.\r\n     */\r\n    function executeOptionWithSell(uint256 _optionId, uint256 _tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Cancels the order for the given _orderId.\r\n     */\r\n    function cancelOrder(uint256 _orderId) external;\r\n\r\n    /**\r\n     * @dev Withdraws ERC721 tokens from the pool.\r\n     */\r\n    function withdrawERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\r\n\r\n    /**\r\n     * @dev Deposits ERC721 tokens to the pool.\r\n     */\r\n    function depositERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\r\n\r\n    /**\r\n     * @dev Withdraws ETH from this pool\r\n     */\r\n    function withdrawETH(uint256 _amount) external payable;\r\n\r\n    /**\r\n     * @dev Withdraws ERC20 tokens from this pool\r\n     */\r\n    function withdrawERC20(IERC20 _token, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Sets the admin of this pool.\r\n     */\r\n    function setAdmin(address _admin) external;\r\n\r\n    /**\r\n     * @dev Removes the admin from this pool.\r\n     */\r\n    function removeAdmin() external;\r\n\r\n    /**\r\n     * @dev Returns the address of the current admin.\r\n     */\r\n    function getAdmin() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of the factory managing this pool\r\n     */\r\n    function getFactory() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the available balance this pool contains that can be withdrawn or collateralized\r\n     */\r\n    function availableBalance() view external returns(uint256);\r\n\r\n    /**\r\n     * @dev Returns an array of ids of all outstanding (issued or expired) options\r\n     */\r\n    function getOptionIds() external view returns(uint256[] memory);\r\n\r\n    /**\r\n     * @dev Returns the id of the option that locked the given token id, reverts if there is none\r\n     */\r\n    function getOptionIdForToken(uint256 _tokenId) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev Returns the option data for the given option id\r\n     */\r\n    function getOptionData(uint256 _optionId) external view returns(WasabiStructs.OptionData memory);\r\n\r\n    /**\r\n     * @dev Returns 'true' if the option for the given id is valid and active, 'false' otherwise\r\n     */\r\n    function isValid(uint256 _optionId) view external returns(bool);\r\n\r\n    /**\r\n     * @dev Checks if _tokenId unlocked\r\n     */\r\n    function isAvailableTokenId(uint256 _tokenId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev Clears the expired options from the pool\r\n     */\r\n    function clearExpiredOptions(uint256[] memory _optionIds) external;\r\n\r\n    /**\r\n     * @dev accepts the bid for LPs with _tokenId. If its a put option, _tokenId can be 0\r\n     */\r\n    function acceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _tokenId) external returns(uint256);\r\n\r\n    /**\r\n     * @dev accepts the ask for LPs\r\n     */\r\n    function acceptAsk(WasabiStructs.Ask calldata _ask, bytes calldata _signature) external;\r\n\r\n    /**\r\n     * @dev accepts a bid created for this pool\r\n     */\r\n    function acceptPoolBid(WasabiStructs.PoolBid calldata _poolBid, bytes calldata _signature) external payable;\r\n}\r\n\r\n// File: contracts/WasabiOption.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An ERC721 which tracks Wasabi Option positions of accounts\r\n */\r\ncontract WasabiOption is ERC721, IERC2981, Ownable {\r\n    \r\n    address private lastFactory;\r\n    mapping(address => bool) private factoryAddresses;\r\n    mapping(uint256 => address) private optionPools;\r\n    uint256 private _currentId = 1;\r\n    string private _baseURIextended;\r\n\r\n    /**\r\n     * @dev Constructs WasabiOption\r\n     */\r\n    constructor() ERC721(\"Wasabi Option NFTs\", \"WASAB\") {}\r\n\r\n    /**\r\n     * @dev Toggles the owning factory\r\n     */\r\n    function toggleFactory(address _factory, bool _enabled) external onlyOwner {\r\n        factoryAddresses[_factory] = _enabled;\r\n        if (_enabled) {\r\n            lastFactory = _factory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mints a new WasabiOption\r\n     */\r\n    function mint(address _to, address _factory) external returns (uint256 mintedId) {\r\n        require(factoryAddresses[_factory] == true, \"Invalid Factory\");\r\n        require(IWasabiPoolFactory(_factory).isValidPool(_msgSender()), \"Only valid pools can mint\");\r\n\r\n        _safeMint(_to, _currentId);\r\n        mintedId = _currentId;\r\n        optionPools[mintedId] = _msgSender();\r\n        _currentId++;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns the specified option\r\n     */\r\n    function burn(uint256 _optionId) external {\r\n        require(optionPools[_optionId] == _msgSender(), \"Caller can't burn option\");\r\n        _burn(_optionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the base URI\r\n     */\r\n    function setBaseURI(string memory baseURI_) external onlyOwner {\r\n        _baseURIextended = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the pool which created the given option\r\n     */\r\n    function getPool(uint256 _optionId) external view returns (address) {\r\n        return optionPools[_optionId];\r\n    }\r\n    \r\n    /// @inheritdoc ERC721\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseURIextended;\r\n    }\r\n\r\n    /// @inheritdoc IERC2981\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address, uint256) {\r\n        IWasabiPool pool = IWasabiPool(optionPools[_tokenId]);\r\n        IWasabiPoolFactory factory = IWasabiPoolFactory(pool.getFactory());\r\n        IWasabiFeeManager feeManager = IWasabiFeeManager(factory.getFeeManager());\r\n        return feeManager.getFeeDataForOption(_tokenId, _salePrice);\r\n    }\r\n    \r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: contracts/IWasabiConduit.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an WasabiConduit compliant contract.\r\n */\r\ninterface IWasabiConduit {\r\n\r\n    /**\r\n     * @dev Buys multiple options\r\n     */\r\n    function buyOptions(\r\n        WasabiStructs.PoolAsk[] calldata _requests,\r\n        WasabiStructs.Ask[] calldata _asks,\r\n        bytes[] calldata _signatures\r\n    ) external payable returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Buys an option\r\n     */\r\n    function buyOption(\r\n        WasabiStructs.PoolAsk calldata _request,\r\n        bytes calldata _signature\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers a NFT to _target\r\n     *\r\n     * @param _nft the address of NFT\r\n     * @param _tokenId the tokenId to transfer\r\n     * @param _target the target to transfer the NFT\r\n     */\r\n    function transferToken(\r\n        address _nft,\r\n        uint256 _tokenId,\r\n        address _target\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Sets Option information\r\n     */\r\n    function setOption(WasabiOption _option) external;\r\n\r\n    /**\r\n     * @dev Sets maximum number of option to buy\r\n     */\r\n    function setMaxOptionsToBuy(uint256 _maxOptionsToBuy) external;\r\n\r\n    /**\r\n     * @dev Sets pool factory address\r\n     */\r\n    function setPoolFactoryAddress(address _factory) external;\r\n\r\n    /**\r\n     * @dev Accpets the Ask\r\n     */\r\n    function acceptAsk(\r\n        WasabiStructs.Ask calldata _ask,\r\n        bytes calldata _signature\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Accpets the Bid\r\n     */\r\n    function acceptBid(\r\n        uint256 _optionId,\r\n        address _poolAddress,\r\n        WasabiStructs.Bid calldata _bid,\r\n        bytes calldata _signature\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Pool Accepts the _bid\r\n     */\r\n    function poolAcceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _optionId) external;\r\n\r\n    /**\r\n     * @dev Cancel the _ask\r\n     */\r\n    function cancelAsk(\r\n        WasabiStructs.Ask calldata _ask,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Cancel the _bid\r\n     */\r\n    function cancelBid(\r\n        WasabiStructs.Bid calldata _bid,\r\n        bytes calldata _signature\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IWasabiErrors.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface for defining all the errors\r\n */\r\n\r\ninterface IWasabiErrors {\r\n\r\n    /**\r\n     * @dev Thrown when an order that has been filled or cancelled is being acted upon\r\n     */\r\n    error OrderFilledOrCancelled();\r\n\r\n    /**\r\n     * @dev Thrown when someone tries to make an unauthorized request\r\n     */\r\n    error Unauthorized();\r\n\r\n    /**\r\n     * @dev Thrown when a signature is invalid\r\n     */\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @dev Thrown when there is no sufficient available liquidity left in the pool for issuing a PUT option\r\n     */\r\n    error InsufficientAvailableLiquidity();\r\n\r\n    /**\r\n     * @dev Thrown when the requested NFT for a CALL is already locked for another option\r\n     */\r\n    error RequestNftIsLocked();\r\n\r\n    /**\r\n     * @dev Thrown when the NFT is not in the pool or invalid\r\n     */\r\n    error NftIsInvalid();\r\n\r\n    /**\r\n     * @dev Thrown when the expiry of an ask is invalid for the pool\r\n     */\r\n    error InvalidExpiry();\r\n\r\n    /**\r\n     * @dev Thrown when the strike price of an ask is invalid for the pool\r\n     */\r\n    error InvalidStrike();\r\n\r\n    /**\r\n     * @dev Thrown when an expired order or option is being exercised\r\n     */\r\n    error HasExpired();\r\n    \r\n    /**\r\n     * @dev Thrown when sending ETH failed\r\n     */\r\n    error FailedToSend();\r\n}\r\n\r\n// File: contracts/lib/Signing.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Signature Verification\r\n */\r\nlibrary Signing {\r\n\r\n    /**\r\n     * @dev Returns the message hash for the given request\r\n     */\r\n    function getMessageHash(WasabiStructs.PoolAsk calldata _request) public pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                _request.id,\r\n                _request.poolAddress,\r\n                _request.optionType,\r\n                _request.strikePrice,\r\n                _request.premium,\r\n                _request.expiry,\r\n                _request.tokenId,\r\n                _request.orderExpiry));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the message hash for the given request\r\n     */\r\n    function getAskHash(WasabiStructs.Ask calldata _ask) public pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                _ask.id,\r\n                _ask.price,\r\n                _ask.tokenAddress,\r\n                _ask.orderExpiry,\r\n                _ask.seller,\r\n                _ask.optionId));\r\n    }\r\n\r\n    function getBidHash(WasabiStructs.Bid calldata _bid) public pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                _bid.id,\r\n                _bid.price,\r\n                _bid.tokenAddress,\r\n                _bid.collection,\r\n                _bid.orderExpiry,\r\n                _bid.buyer,\r\n                _bid.optionType,\r\n                _bid.strikePrice,\r\n                _bid.expiry,\r\n                _bid.expiryAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev creates an ETH signed message hash\r\n     */\r\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\r\n        /*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    }\r\n\r\n    function getSigner(\r\n        WasabiStructs.PoolAsk calldata _request,\r\n        bytes memory signature\r\n    ) public pure returns (address) {\r\n        bytes32 messageHash = getMessageHash(_request);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, signature);\r\n    }\r\n\r\n    function getAskSigner(\r\n        WasabiStructs.Ask calldata _ask,\r\n        bytes memory signature\r\n    ) public pure returns (address) {\r\n        bytes32 messageHash = getAskHash(_ask);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, signature);\r\n    }\r\n\r\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(sig.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            /*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // implicitly return (r, s, v)\r\n    }\r\n}\r\n\r\n// File: contracts/lib/PoolAskVerifier.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Signature Verification for PoolAsk\r\n */\r\nlibrary PoolAskVerifier {\r\n\r\n    bytes32 constant EIP712DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n    bytes32 constant POOLASK_TYPEHASH =\r\n        keccak256(\r\n            \"PoolAsk(uint256 id,address poolAddress,uint8 optionType,uint256 strikePrice,uint256 premium,uint256 expiry,uint256 tokenId,uint256 orderExpiry)\"\r\n        );\r\n\r\n    /**\r\n     * @dev Creates the hash of the EIP712 domain for this validator\r\n     *\r\n     * @param _eip712Domain the domain to hash\r\n     * @return the hashed domain\r\n     */\r\n    function hashDomain(\r\n        WasabiStructs.EIP712Domain memory _eip712Domain\r\n    ) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    EIP712DOMAIN_TYPEHASH,\r\n                    keccak256(bytes(_eip712Domain.name)),\r\n                    keccak256(bytes(_eip712Domain.version)),\r\n                    _eip712Domain.chainId,\r\n                    _eip712Domain.verifyingContract\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Creates the hash of the PoolAsk for this validator\r\n     *\r\n     * @param _poolAsk to hash\r\n     * @return the poolAsk domain\r\n     */\r\n    function hashForPoolAsk(\r\n        WasabiStructs.PoolAsk memory _poolAsk\r\n    ) public pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    POOLASK_TYPEHASH,\r\n                    _poolAsk.id,\r\n                    _poolAsk.poolAddress,\r\n                    _poolAsk.optionType,\r\n                    _poolAsk.strikePrice,\r\n                    _poolAsk.premium,\r\n                    _poolAsk.expiry,\r\n                    _poolAsk.tokenId,\r\n                    _poolAsk.orderExpiry\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the signer of the given signature for the given _poolAsk\r\n     *\r\n     * @param _poolAsk the ask to validate\r\n     * @param _signature the signature to validate\r\n     * @return address who signed the signature\r\n     */\r\n    function getSignerForPoolAsk(\r\n        WasabiStructs.PoolAsk memory _poolAsk,\r\n        bytes memory _signature\r\n    ) public view returns (address) {\r\n        bytes32 domainSeparator = hashDomain(\r\n            WasabiStructs.EIP712Domain({\r\n                name: \"PoolAskSignature\",\r\n                version: \"1\",\r\n                chainId: getChainID(),\r\n                verifyingContract: address(this)\r\n            })\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, hashForPoolAsk(_poolAsk))\r\n        );\r\n        return Signing.recoverSigner(digest, _signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the signer of the given signature for the given poolAsk is the given signer\r\n     *\r\n     * @param _poolAsk the _poolAsk to validate\r\n     * @param _signature the signature to validate\r\n     * @param _signer the signer to validate\r\n     * @return true if the signature belongs to the signer, false otherwise\r\n     */\r\n    function verifyPoolAsk(\r\n        WasabiStructs.PoolAsk memory _poolAsk,\r\n        bytes memory _signature,\r\n        address _signer\r\n    ) internal view returns (bool) {\r\n        return getSignerForPoolAsk(_poolAsk, _signature) == _signer;\r\n    }\r\n\r\n    /**\r\n     * @return the current chain id\r\n     */\r\n    function getChainID() internal view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/PoolBidVerifier.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Signature Verification for PoolBid\r\n */\r\nlibrary PoolBidVerifier {\r\n\r\n    bytes32 constant EIP712DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n    bytes32 constant POOLBID_TYPEHASH =\r\n        keccak256(\r\n            \"PoolBid(uint256 id,uint256 price,address tokenAddress,uint256 orderExpiry,uint256 optionId)\"\r\n        );\r\n\r\n    /**\r\n     * @dev Creates the hash of the EIP712 domain for this validator\r\n     *\r\n     * @param _eip712Domain the domain to hash\r\n     * @return the hashed domain\r\n     */\r\n    function hashDomain(\r\n        WasabiStructs.EIP712Domain memory _eip712Domain\r\n    ) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    EIP712DOMAIN_TYPEHASH,\r\n                    keccak256(bytes(_eip712Domain.name)),\r\n                    keccak256(bytes(_eip712Domain.version)),\r\n                    _eip712Domain.chainId,\r\n                    _eip712Domain.verifyingContract\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Creates the hash of the PoolBid for this validator\r\n     *\r\n     * @param _poolBid to hash\r\n     * @return the poolBid hash\r\n     */\r\n    function hashForPoolBid(\r\n        WasabiStructs.PoolBid memory _poolBid\r\n    ) public pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    POOLBID_TYPEHASH,\r\n                    _poolBid.id,\r\n                    _poolBid.price,\r\n                    _poolBid.tokenAddress,\r\n                    _poolBid.orderExpiry,\r\n                    _poolBid.optionId\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the signer of the given signature for the given _poolBid\r\n     *\r\n     * @param _poolBid the bid to validate\r\n     * @param _signature the signature to validate\r\n     * @return address who signed the signature\r\n     */\r\n    function getSignerForPoolBid(\r\n        WasabiStructs.PoolBid memory _poolBid,\r\n        bytes memory _signature\r\n    ) public view returns (address) {\r\n        bytes32 domainSeparator = hashDomain(\r\n            WasabiStructs.EIP712Domain({\r\n                name: \"PoolBidVerifier\",\r\n                version: \"1\",\r\n                chainId: getChainID(),\r\n                verifyingContract: address(this)\r\n            })\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, hashForPoolBid(_poolBid))\r\n        );\r\n        return Signing.recoverSigner(digest, _signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the signer of the given signature for the given _poolBid is the given signer\r\n     *\r\n     * @param _poolBid the bid to validate\r\n     * @param _signature the signature to validate\r\n     * @param _signer the signer to validate\r\n     * @return true if the signature belongs to the signer, false otherwise\r\n     */\r\n    function verifyPoolBid(\r\n        WasabiStructs.PoolBid memory _poolBid,\r\n        bytes memory _signature,\r\n        address _signer\r\n    ) internal view returns (bool) {\r\n        return getSignerForPoolBid(_poolBid, _signature) == _signer;\r\n    }\r\n\r\n    /**\r\n     * @return the current chain id\r\n     */\r\n    function getChainID() internal view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n}\r\n\r\n// File: contracts/AbstractWasabiPool.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * An base abstract implementation of the IWasabiPool which handles issuing and exercising options alond with state management.\r\n */\r\nabstract contract AbstractWasabiPool is IERC721Receiver, Ownable, IWasabiPool, ReentrancyGuard {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    // Pool metadata\r\n    IWasabiPoolFactory public factory;\r\n    WasabiOption private optionNFT;\r\n    IERC721 private nft;\r\n    address private admin;\r\n\r\n    // Option state\r\n    EnumerableSet.UintSet private optionIds;\r\n    mapping(uint256 => uint256) private tokenIdToOptionId;\r\n    mapping(uint256 => WasabiStructs.OptionData) private options;\r\n    mapping(uint256 => bool) public idToFilledOrCancelled;\r\n\r\n    receive() external payable virtual {}\r\n\r\n    fallback() external payable {\r\n        require(false, \"No fallback\");\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes this pool\r\n     */\r\n    function baseInitialize(\r\n        IWasabiPoolFactory _factory,\r\n        IERC721 _nft,\r\n        address _optionNFT,\r\n        address _owner,\r\n        address _admin\r\n    ) internal {\r\n        require(owner() == address(0), \"Already initialized\");\r\n        factory = _factory;\r\n        _transferOwnership(_owner);\r\n\r\n        nft = _nft;\r\n        optionNFT = WasabiOption(_optionNFT);\r\n\r\n        if (_admin != address(0)) {\r\n            admin = _admin;\r\n            emit AdminChanged(_admin);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getNftAddress() external view returns(address) {\r\n        return address(nft);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getLiquidityAddress() public view virtual returns(address) {\r\n        return address(0);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        admin = _admin;\r\n        emit AdminChanged(_admin);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function removeAdmin() external onlyOwner {\r\n        admin = address(0);\r\n        emit AdminChanged(address(0));\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getAdmin() public view virtual returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getFactory() external view returns (address) {\r\n        return address(factory);\r\n    }\r\n\r\n    /**\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address /* operator */,\r\n        address /* from */,\r\n        uint256 tokenId,\r\n        bytes memory /* data */)\r\n    public virtual override returns (bytes4) {\r\n        if (_msgSender() == address(optionNFT)) {\r\n            if (!optionIds.contains(tokenId)) {\r\n                revert IWasabiErrors.NftIsInvalid();\r\n            }\r\n            clearOption(tokenId, 0, false);\r\n        } else if (_msgSender() != address(nft)) {\r\n            revert IWasabiErrors.NftIsInvalid();\r\n        }\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function writeOptionTo(\r\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature, address _receiver\r\n    ) public payable nonReentrant returns (uint256) {\r\n        if (idToFilledOrCancelled[_request.id]) {\r\n            revert IWasabiErrors.OrderFilledOrCancelled();\r\n        }\r\n        validate(_request, _signature);\r\n\r\n        uint256 optionId = optionNFT.mint(_receiver, address(factory));\r\n        WasabiStructs.OptionData memory optionData = WasabiStructs.OptionData(\r\n            true,\r\n            _request.optionType,\r\n            _request.strikePrice,\r\n            _request.expiry,\r\n            _request.tokenId\r\n        );\r\n        options[optionId] = optionData;\r\n\r\n        // Lock NFT / Token into a vault\r\n        if (_request.optionType == WasabiStructs.OptionType.CALL) {\r\n            tokenIdToOptionId[_request.tokenId] = optionId;\r\n        }\r\n        optionIds.add(optionId);\r\n        idToFilledOrCancelled[_request.id] = true;\r\n\r\n        emit OptionIssued(optionId, _request.premium, _request.id);\r\n        return optionId;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function writeOption(\r\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature\r\n    ) external payable returns (uint256) {\r\n        return writeOptionTo(_request, _signature, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Validates the given PoolAsk in order to issue an option\r\n     */\r\n    function validate(WasabiStructs.PoolAsk calldata _request, bytes calldata _signature) internal {\r\n        // 1. Validate Signature\r\n        address signer = PoolAskVerifier.getSignerForPoolAsk(_request, _signature);\r\n        if (signer == address(0) || (signer != admin && signer != owner())) {\r\n            revert IWasabiErrors.InvalidSignature();\r\n        }\r\n\r\n        // 2. Validate Meta\r\n        if (_request.orderExpiry < block.timestamp) {\r\n            revert IWasabiErrors.HasExpired();\r\n        }\r\n        \r\n        require(_request.poolAddress == address(this), \"WasabiPool: Signature doesn't belong to this pool\");\r\n        validateAndWithdrawPayment(_request.premium, \"WasabiPool: Not enough premium is supplied\");\r\n\r\n        // 3. Request Validation\r\n        if (_request.strikePrice == 0) {\r\n            revert IWasabiErrors.InvalidStrike();\r\n        }\r\n        if (_request.expiry == 0) {\r\n            revert IWasabiErrors.InvalidExpiry();\r\n        }\r\n\r\n        // 4. Type specific validation\r\n        if (_request.optionType == WasabiStructs.OptionType.CALL) {\r\n            if (nft.ownerOf(_request.tokenId) != address(this)) {\r\n                revert IWasabiErrors.NftIsInvalid();\r\n            }\r\n            // Check that the token is free\r\n            uint256 optionId = tokenIdToOptionId[_request.tokenId];\r\n            if (isValid(optionId)) {\r\n                revert IWasabiErrors.RequestNftIsLocked();\r\n            }\r\n        } else if (_request.optionType == WasabiStructs.OptionType.PUT) {\r\n            if (availableBalance() < _request.strikePrice) {\r\n                revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function executeOption(uint256 _optionId) external payable nonReentrant {\r\n        validateOptionForExecution(_optionId, 0);\r\n        clearOption(_optionId, 0, true);\r\n        emit OptionExecuted(_optionId);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function executeOptionWithSell(uint256 _optionId, uint256 _tokenId) external payable nonReentrant {\r\n        validateOptionForExecution(_optionId, _tokenId);\r\n        clearOption(_optionId, _tokenId, true);\r\n        emit OptionExecuted(_optionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Validates the option if its available for execution\r\n     */\r\n    function validateOptionForExecution(uint256 _optionId, uint256 _tokenId) private {\r\n        require(optionIds.contains(_optionId), \"WasabiPool: Option NFT doesn't belong to this pool\");\r\n        require(_msgSender() == optionNFT.ownerOf(_optionId), \"WasabiPool: Only the token owner can execute the option\");\r\n\r\n        WasabiStructs.OptionData memory optionData = options[_optionId];\r\n        if (optionData.expiry < block.timestamp) {\r\n            revert IWasabiErrors.HasExpired();\r\n        }\r\n\r\n        if (optionData.optionType == WasabiStructs.OptionType.CALL) {\r\n            validateAndWithdrawPayment(optionData.strikePrice, \"WasabiPool: Strike price needs to be supplied to execute a CALL option\");\r\n        } else if (optionData.optionType == WasabiStructs.OptionType.PUT) {\r\n            require(_msgSender() == nft.ownerOf(_tokenId), \"WasabiPool: Need to own the token to sell in order to execute a PUT option\");\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function acceptBid(\r\n        WasabiStructs.Bid calldata _bid,\r\n        bytes calldata _signature,\r\n        uint256 _tokenId\r\n    ) public onlyOwner returns(uint256) {\r\n        // Other validations are done in WasabiConduit\r\n        if (_bid.optionType == WasabiStructs.OptionType.CALL) {\r\n            if (!isAvailableTokenId(_tokenId)) {\r\n                revert IWasabiErrors.NftIsInvalid();\r\n            }\r\n        } else {\r\n            if (availableBalance() < _bid.strikePrice) {\r\n                revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n            }\r\n            _tokenId = 0;\r\n        }\r\n\r\n        // Lock NFT / Token into a vault\r\n        uint256 _optionId = optionNFT.mint(_bid.buyer, address(factory));\r\n        if (_bid.optionType == WasabiStructs.OptionType.CALL) {\r\n            tokenIdToOptionId[_tokenId] = _optionId;\r\n        }\r\n\r\n        WasabiStructs.OptionData memory optionData = WasabiStructs.OptionData(\r\n            true,\r\n            _bid.optionType,\r\n            _bid.strikePrice,\r\n            _bid.expiry,\r\n            _tokenId\r\n        );\r\n        options[_optionId] = optionData;\r\n        optionIds.add(_optionId);\r\n\r\n        emit OptionIssued(_optionId, _bid.price);\r\n        IWasabiConduit(factory.getConduitAddress()).poolAcceptBid(_bid, _signature, _optionId);\r\n        return _optionId;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function acceptAsk (\r\n        WasabiStructs.Ask calldata _ask,\r\n        bytes calldata _signature\r\n    ) external onlyOwner {\r\n\r\n        if (_ask.tokenAddress == getLiquidityAddress() && availableBalance() < _ask.price) {\r\n            revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n        }\r\n\r\n        if (_ask.tokenAddress == address(0)) {\r\n            IWasabiConduit(factory.getConduitAddress()).acceptAsk{value: _ask.price}(_ask, _signature);\r\n        } else {\r\n            IERC20 erc20 = IERC20(_ask.tokenAddress);\r\n            erc20.approve(factory.getConduitAddress(), _ask.price);\r\n            IWasabiConduit(factory.getConduitAddress()).acceptAsk(_ask, _signature);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function acceptPoolBid(WasabiStructs.PoolBid calldata _poolBid, bytes calldata _signature) external payable nonReentrant {\r\n        // 1. Validate\r\n        address signer = PoolBidVerifier.getSignerForPoolBid(_poolBid, _signature);\r\n        if (signer != owner()) {\r\n            revert IWasabiErrors.InvalidSignature();\r\n        }\r\n        if (!isValid(_poolBid.optionId)) {\r\n            revert IWasabiErrors.HasExpired();\r\n        }\r\n        if (idToFilledOrCancelled[_poolBid.id]) {\r\n            revert IWasabiErrors.OrderFilledOrCancelled();\r\n        }\r\n        if (_poolBid.orderExpiry < block.timestamp) {\r\n            revert IWasabiErrors.HasExpired();\r\n        }\r\n\r\n        // 2. Only owner of option can accept bid\r\n        if (_msgSender() != optionNFT.ownerOf(_poolBid.optionId)) {\r\n            revert IWasabiErrors.Unauthorized();\r\n        }\r\n\r\n        if (_poolBid.tokenAddress == getLiquidityAddress()) {\r\n            WasabiStructs.OptionData memory optionData = getOptionData(_poolBid.optionId);\r\n            if (optionData.optionType == WasabiStructs.OptionType.CALL && availableBalance() < _poolBid.price) {\r\n                revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n            } else if (optionData.optionType == WasabiStructs.OptionType.PUT &&\r\n                // The strike price of the option can be used to payout the bid price\r\n                (availableBalance() + optionData.strikePrice) < _poolBid.price\r\n            ) {\r\n                revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n            }\r\n            clearOption(_poolBid.optionId, 0, false);\r\n            payAddress(_msgSender(), _poolBid.price);\r\n        } else {\r\n            IWasabiFeeManager feeManager = IWasabiFeeManager(factory.getFeeManager());\r\n            (address feeReceiver, uint256 feeAmount) = feeManager.getFeeData(address(this), _poolBid.price);\r\n            uint256 maxFee = _maxFee(_poolBid.price);\r\n            if (feeAmount > maxFee) {\r\n                feeAmount = maxFee;\r\n            }\r\n\r\n            if (_poolBid.tokenAddress == address(0)) {\r\n                if (address(this).balance < _poolBid.price) {\r\n                    revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n                }\r\n                (bool sent, ) = payable(_msgSender()).call{value: _poolBid.price - feeAmount}(\"\");\r\n                if (!sent) {\r\n                    revert IWasabiErrors.FailedToSend();\r\n                }\r\n                if (feeAmount > 0) {\r\n                    (bool _sent, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n                    if (!_sent) {\r\n                        revert IWasabiErrors.FailedToSend();\r\n                    }\r\n                }\r\n            } else {\r\n                IERC20 erc20 = IERC20(_poolBid.tokenAddress);\r\n                if (erc20.balanceOf(address(this)) < _poolBid.price) {\r\n                    revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n                }\r\n                if (!erc20.transfer(_msgSender(), _poolBid.price - feeAmount)) {\r\n                    revert IWasabiErrors.FailedToSend();\r\n                }\r\n                if (feeAmount > 0) {\r\n                    if (!erc20.transfer(feeReceiver, feeAmount)) {\r\n                        revert IWasabiErrors.FailedToSend();\r\n                    }\r\n                }\r\n            }\r\n            clearOption(_poolBid.optionId, 0, false);\r\n        }\r\n        idToFilledOrCancelled[_poolBid.id] = true;\r\n        emit PoolBidTaken(_poolBid.id);\r\n    }\r\n\r\n    /**\r\n     * @dev An abstract function to check available balance in this pool.\r\n     */\r\n    function availableBalance() view public virtual returns(uint256);\r\n\r\n    /**\r\n     * @dev An abstract function to send payment for any function\r\n     */\r\n    function payAddress(address _seller, uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev An abstract function to validate and withdraw payment for any function\r\n     */\r\n    function validateAndWithdrawPayment(uint256 _premium, string memory _message) internal virtual;\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function clearExpiredOptions(uint256[] memory _optionIds) public {\r\n        if (_optionIds.length > 0) {\r\n            for (uint256 i = 0; i < _optionIds.length; i++) {\r\n                uint256 _optionId = _optionIds[i];\r\n                if (!isValid(_optionId)) {\r\n                    optionIds.remove(_optionId);\r\n                }\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < optionIds.length();) {\r\n                uint256 _optionId = optionIds.at(i);\r\n                if (!isValid(_optionId)) {\r\n                    optionIds.remove(_optionId);\r\n                } else {\r\n                    i ++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Clears the option from the existing state and optionally exercises it.\r\n     */\r\n    function clearOption(uint256 _optionId, uint256 _tokenId, bool _exercised) internal {\r\n        WasabiStructs.OptionData memory optionData = options[_optionId];\r\n        if (optionData.optionType == WasabiStructs.OptionType.CALL) {\r\n            if (_exercised) {\r\n                // Sell to executor, the validateOptionForExecution already checked if strike is paid\r\n                nft.safeTransferFrom(address(this), _msgSender(), optionData.tokenId);\r\n            }\r\n            if (tokenIdToOptionId[optionData.tokenId] == _optionId) {\r\n                delete tokenIdToOptionId[optionData.tokenId];\r\n            }\r\n        } else if (optionData.optionType == WasabiStructs.OptionType.PUT) {\r\n            if (_exercised) {\r\n                // Buy from executor\r\n                nft.safeTransferFrom(_msgSender(), address(this), _tokenId);\r\n                payAddress(_msgSender(), optionData.strikePrice);\r\n            }\r\n        }\r\n        options[_optionId].active = false;\r\n        optionIds.remove(_optionId);\r\n        optionNFT.burn(_optionId);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function withdrawERC721(IERC721 _nft, uint256[] calldata _tokenIds) external onlyOwner nonReentrant {\r\n        bool isPoolAsset = _nft == nft;\r\n\r\n        uint256 numNFTs = _tokenIds.length;\r\n        for (uint256 i; i < numNFTs; ) {\r\n            if (isPoolAsset) {\r\n                if (nft.ownerOf(_tokenIds[i]) != address(this)) {\r\n                    revert IWasabiErrors.NftIsInvalid();\r\n                }\r\n                uint256 optionId = tokenIdToOptionId[_tokenIds[i]];\r\n                if (isValid(optionId)) {\r\n                    revert IWasabiErrors.RequestNftIsLocked();\r\n                }\r\n\r\n                delete tokenIdToOptionId[_tokenIds[i]];\r\n            }\r\n            _nft.safeTransferFrom(address(this), owner(), _tokenIds[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function depositERC721(IERC721 _nft, uint256[] calldata _tokenIds) external onlyOwner nonReentrant {\r\n        require(_nft == nft, 'Invalid Collection');\r\n        uint256 numNFTs = _tokenIds.length;\r\n        for (uint256 i; i < numNFTs; ) {\r\n            _nft.safeTransferFrom(_msgSender(), address(this), _tokenIds[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function cancelOrder(uint256 _orderId) external {\r\n        if (_msgSender() != admin && _msgSender() != owner()) {\r\n            revert IWasabiErrors.Unauthorized();\r\n        }\r\n        if (idToFilledOrCancelled[_orderId]) {\r\n            revert IWasabiErrors.OrderFilledOrCancelled();\r\n        }\r\n        idToFilledOrCancelled[_orderId] = true;\r\n        emit OrderCancelled(_orderId);\r\n    }\r\n\r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return interfaceId == type(IWasabiPool).interfaceId\r\n            || interfaceId == type(IERC721Receiver).interfaceId;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function isValid(uint256 _optionId) view public returns(bool) {\r\n        return options[_optionId].active && options[_optionId].expiry >= block.timestamp;\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getOptionData(uint256 _optionId) public view returns(WasabiStructs.OptionData memory) {\r\n        return options[_optionId];\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getOptionIdForToken(uint256 _tokenId) external view returns(uint256) {\r\n        if (nft.ownerOf(_tokenId) != address(this)) {\r\n            revert IWasabiErrors.NftIsInvalid();\r\n        }\r\n        return tokenIdToOptionId[_tokenId];\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function getOptionIds() public view returns(uint256[] memory) {\r\n        return optionIds.values();\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function isAvailableTokenId(uint256 _tokenId) public view returns(bool) {\r\n        if (nft.ownerOf(_tokenId) != address(this)) {\r\n            return false;\r\n        }\r\n        uint256 optionId = tokenIdToOptionId[_tokenId];\r\n        return !isValid(optionId);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the maximum fee that the protocol can take for the given amount\r\n     */\r\n    function _maxFee(uint256 _amount) internal pure returns(uint256) {\r\n        return _amount / 10;\r\n    }\r\n}\r\n\r\n// File: contracts/pools/ETHWasabiPool.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * An ETH backed implementation of the IWasabiErrors.\r\n */\r\ncontract ETHWasabiPool is AbstractWasabiPool {\r\n    receive() external payable override {\r\n        emit ETHReceived(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes this pool with the given parameters.\r\n     */\r\n    function initialize(\r\n        IWasabiPoolFactory _factory,\r\n        IERC721 _nft,\r\n        address _optionNFT,\r\n        address _owner,\r\n        address _admin\r\n    ) external payable {\r\n        baseInitialize(_factory, _nft, _optionNFT, _owner, _admin);\r\n    }\r\n\r\n    /// @inheritdoc AbstractWasabiPool\r\n    function validateAndWithdrawPayment(uint256 _premium, string memory _message) internal override {        \r\n        IWasabiFeeManager feeManager = IWasabiFeeManager(factory.getFeeManager());\r\n        (address feeReceiver, uint256 feeAmount) = feeManager.getFeeData(address(this), _premium);\r\n\r\n        if (feeAmount > 0) {\r\n            uint256 maxFee = _maxFee(_premium);\r\n            if (feeAmount > maxFee) {\r\n                feeAmount = maxFee;\r\n            }\r\n\r\n            (bool _sent, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n            if (!_sent) {\r\n                revert IWasabiErrors.FailedToSend();\r\n            }\r\n        }\r\n\r\n        require(msg.value >= (_premium + feeAmount) && _premium > 0, _message);\r\n    }\r\n\r\n    /// @inheritdoc AbstractWasabiPool\r\n    function payAddress(address _seller, uint256 _amount) internal override {\r\n        IWasabiFeeManager feeManager = IWasabiFeeManager(factory.getFeeManager());\r\n        (address feeReceiver, uint256 feeAmount) = feeManager.getFeeData(address(this), _amount);\r\n\r\n        if (feeAmount > 0) {\r\n            uint256 maxFee = _maxFee(_amount);\r\n            if (feeAmount > maxFee) {\r\n                feeAmount = maxFee;\r\n            }\r\n            (bool _sent, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n            if (!_sent) {\r\n                revert IWasabiErrors.FailedToSend();\r\n            }\r\n        }\r\n\r\n        (bool sent, ) = payable(_seller).call{value: _amount - feeAmount}(\"\");\r\n        if (!sent) {\r\n            revert IWasabiErrors.FailedToSend();\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function withdrawETH(uint256 _amount) external payable onlyOwner {\r\n        if (availableBalance() < _amount) {\r\n            revert IWasabiErrors.InsufficientAvailableLiquidity();\r\n        }\r\n        address payable to = payable(_msgSender());\r\n        (bool sent, ) = to.call{value: _amount}(\"\");\r\n        if (!sent) {\r\n            revert IWasabiErrors.FailedToSend();\r\n        }\r\n\r\n        emit ETHWithdrawn(_amount);\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function withdrawERC20(IERC20 _token, uint256 _amount) external onlyOwner {\r\n        if (!_token.transfer(msg.sender, _amount)) {\r\n            revert IWasabiErrors.FailedToSend();\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IWasabiPool\r\n    function availableBalance() view public override returns(uint256) {\r\n        uint256 balance = address(this).balance;\r\n        uint256[] memory optionIds = getOptionIds();\r\n        for (uint256 i = 0; i < optionIds.length; i++) {\r\n            WasabiStructs.OptionData memory optionData = getOptionData(optionIds[i]);\r\n            if (optionData.optionType == WasabiStructs.OptionType.PUT && isValid(optionIds[i])) {\r\n                balance -= optionData.strikePrice;\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"FailedToSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAvailableLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrike\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftIsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFilledOrCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNftIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"OptionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OptionIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAskId\",\"type\":\"uint256\"}],\"name\":\"OptionIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolBidTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolSettingsChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"acceptAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.PoolBid\",\"name\":\"_poolBid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"acceptPoolBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_optionIds\",\"type\":\"uint256[]\"}],\"name\":\"clearExpiredOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"executeOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"executeOptionWithSell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IWasabiPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"getOptionData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.OptionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOptionIdForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToFilledOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWasabiPoolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isAvailableTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.PoolAsk\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"writeOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.PoolAsk\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"writeOptionTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHWasabiPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "PoolAskVerifier:e3f3dca2bd68cbd34b58cfc3bcd109998fcce0ac;PoolBidVerifier:66873693e8b125dbea46274173b0d6dcd1933cca", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d68b729683b67aac1630260e8e40dc473eb072dbb23d3524a04f9071c71e3276"}