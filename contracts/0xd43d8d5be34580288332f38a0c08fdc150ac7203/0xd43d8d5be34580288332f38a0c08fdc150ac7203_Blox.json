{"SourceCode": "/**\r\n\r\n *0xBLOX*\r\n\r\n*/\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n\r\n        return payable(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n   \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n\r\n\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n\r\n        assembly { codehash := extcodehash(account) }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n\r\n    }\r\n\r\n\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\r\n        if (success) {\r\n\r\n            return returndata;\r\n\r\n        } else {\r\n\r\n            // Look for revert reason and bubble it up if present\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract Blox is Context, IERC20, Ownable {\r\n\r\n    using Address for address;\r\n\r\n\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n\r\n\r\n\r\n    string private _name     = \"Blox\";\r\n\r\n    string private _symbol   = \"BLOX\";  \r\n\r\n    uint8  private _decimals = 9;\r\n\r\n   \r\n\r\n    uint256 private constant MAX = type(uint256).max;\r\n\r\n    uint256 private _tTotal = 30_000_000 * (10 ** _decimals);\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n\r\n\r\n    uint256 public taxFee = 1;\r\n\r\n    uint256 private _previousTaxFee = taxFee;\r\n\r\n    \r\n\r\n    uint256 public burnFee = 0;\r\n\r\n    uint256 private _previousburnFee = burnFee;\r\n\r\n\r\n\r\n    uint256 public bloxTeamFee = 1;\r\n\r\n    uint256 private _previousbloxTeamFee = bloxTeamFee;\r\n\r\n\r\n\r\n    uint256 public marketingFee = 0;\r\n\r\n    uint256 private _previousMarketingFee = marketingFee;\r\n\r\n\r\n\r\n    uint256 public foundationFee = 0;\r\n\r\n    uint256 private _previousfoundationFee = foundationFee;\r\n\r\n\r\n\r\n    uint256 public totalFees = taxFee + burnFee + marketingFee + foundationFee + bloxTeamFee;\r\n\r\n\r\n\r\n    address public marketingWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public foundationWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public bloxTeamWallet = 0xDab9277349A7567fD1397f924C51dc3B0eedb243;    \r\n\r\n\r\n\r\n    bool public walletToWalletTransferWithoutFee = true;\r\n\r\n    \r\n\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n\r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n\r\n    address public  uniswapV2Pair;\r\n\r\n\r\n\r\n    bool private inSwapAndLiquify;\r\n\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public swapTokensAtAmount = _tTotal / 20000;\r\n\r\n    \r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event MarketingWalletChanged(address marketingWallet);\r\n\r\n    event foundationWalletChanged(address foundationWallet);\r\n\r\n    event burnWalletChanged(address burnWallet);\r\n\r\n    event bloxTeamWalletChanged(address bloxTeamWallet);\r\n\r\n    event SwapEnabledUpdated(bool enabled);\r\n\r\n    event SendMarketing(uint256 bnbSend);\r\n\r\n    event Sendfoundation(uint256 bnbSend);\r\n\r\n    event Sendburn(uint256 bnbSend);\r\n\r\n    event SendCharity(uint256 bnbSend);\r\n\r\n    \r\n\r\n    constructor() \r\n\r\n    { \r\n\r\n        address newOwner = 0x171cAD126a9360cc093e38902223bC678736c357;\r\n\r\n        transferOwnership(newOwner);\r\n\r\n\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), MAX);\r\n\r\n\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n\r\n        _isExcludedFromFees[foundationWallet] = true;\r\n\r\n        _isExcludedFromFees[burnWallet] = true;\r\n\r\n        _isExcludedFromFees[bloxTeamWallet] = true;\r\n\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n\r\n\r\n\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _tTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n\r\n        return tokenFromReflection(_rOwned[account]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n\r\n        return _isExcluded[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalReflectionDistributed() public view returns (uint256) {\r\n\r\n        return _tFeeTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function deliver(uint256 tAmount) public {\r\n\r\n        address sender = _msgSender();\r\n\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _rTotal = _rTotal - rAmount;\r\n\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\r\n        if (!deductTransferFee) {\r\n\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n\r\n            return rAmount;\r\n\r\n        } else {\r\n\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n\r\n            return rTransferAmount;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        return rAmount / currentRate;\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if(_rOwned[account] > 0) {\r\n\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n\r\n        _excluded.push(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_excluded[i] == account) {\r\n\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n\r\n                _tOwned[account] = 0;\r\n\r\n                _isExcluded[account] = false;\r\n\r\n                _excluded.pop();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function claimStuckTokens(address token) external onlyOwner {\r\n\r\n        require(token != address(this), \"Owner cannot claim native tokens\");\r\n\r\n        if (token == address(0x0)) {\r\n\r\n            payable(msg.sender).transfer(address(this).balance);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        IERC20 ERC20token = IERC20(token);\r\n\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n\r\n        ERC20token.transfer(msg.sender, balance);\r\n\r\n    }\r\n\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        return account.code.length > 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sendBNB(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\r\n        _rTotal = _rTotal - rFee;\r\n\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation) = _getTValues(tAmount);\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, tfoundation,  _getRate());\r\n\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketing, tfoundation);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n\r\n        uint256 tMarketing = calculateMarketingFee(tAmount);\r\n\r\n        uint256 tfoundation = calculatefoundationFee(tAmount);\r\n\r\n        uint256 tTransferAmount = tAmount - tFee - tMarketing - tfoundation;\r\n\r\n        return (tTransferAmount, tFee, tMarketing, tfoundation);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n\r\n        uint256 rFee = tFee * currentRate;\r\n\r\n        uint256 rMarketing = tMarketing * currentRate;\r\n\r\n        uint256 rfoundation = tfoundation * currentRate;\r\n\r\n        uint256 rTransferAmount = rAmount - rFee - rMarketing - rfoundation;\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply / tSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n\r\n        uint256 rSupply = _rTotal;\r\n\r\n        uint256 tSupply = _tTotal;      \r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n\r\n        }\r\n\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _takeburn(address sender, uint256 tTransferAmount, uint256 rTransferAmount, uint256 tAmount) private returns (uint256, uint256) {\r\n\r\n        if(burnFee==0) {\r\n\r\n            return(tTransferAmount, rTransferAmount); }\r\n\r\n        uint256 tburn = calculateburnFee(tAmount);\r\n\r\n        uint256 rburn = tburn * _getRate();\r\n\r\n        rTransferAmount = rTransferAmount - rburn;\r\n\r\n        tTransferAmount = tTransferAmount - tburn;\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rburn;\r\n\r\n        emit Transfer(sender, address(this), tburn);\r\n\r\n        return(tTransferAmount, rTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _takebloxTeam(address sender, uint256 tTransferAmount, uint256 rTransferAmount, uint256 tAmount) private returns (uint256, uint256) {\r\n\r\n        if(bloxTeamFee==0) {\r\n\r\n            return(tTransferAmount, rTransferAmount); }\r\n\r\n        uint256 tCharity = calculatebloxTeamFee(tAmount);\r\n\r\n        uint256 rCharity = tCharity * _getRate();\r\n\r\n        rTransferAmount = rTransferAmount - rCharity;\r\n\r\n        tTransferAmount = tTransferAmount - tCharity;\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rCharity;\r\n\r\n        emit Transfer(sender, address(this), tCharity);\r\n\r\n        return(tTransferAmount, rTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n\r\n        if (tMarketing > 0) {\r\n\r\n            uint256 currentRate =  _getRate();\r\n\r\n            uint256 rMarketing = tMarketing * currentRate;\r\n\r\n            _rOwned[address(this)] = _rOwned[address(this)] + rMarketing;\r\n\r\n            if(_isExcluded[address(this)])\r\n\r\n                _tOwned[address(this)] = _tOwned[address(this)] + tMarketing;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _takefoundation(uint256 tfoundation) private {\r\n\r\n        if (tfoundation > 0) {\r\n\r\n            uint256 currentRate =  _getRate();\r\n\r\n            uint256 rfoundation = tfoundation * currentRate;\r\n\r\n            _rOwned[address(this)] = _rOwned[address(this)] + rfoundation;\r\n\r\n            if(_isExcluded[address(this)])\r\n\r\n                _tOwned[address(this)] = _tOwned[address(this)] + tfoundation;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount * taxFee / 100;\r\n\r\n    }\r\n\r\n\r\n\r\n    function calculateburnFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount * burnFee / 100;\r\n\r\n    }\r\n\r\n\r\n\r\n    function calculatebloxTeamFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount * bloxTeamFee / 100;\r\n\r\n    }\r\n\r\n\r\n\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount * marketingFee / 100;\r\n\r\n    }\r\n\r\n\r\n\r\n    function calculatefoundationFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount * foundationFee  / 100;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function removeAllFee() private {\r\n\r\n        if(taxFee == 0 && burnFee == 0 && bloxTeamFee == 0 && marketingFee == 0 && foundationFee == 0) return;\r\n\r\n        \r\n\r\n        _previousTaxFee = taxFee;\r\n\r\n        _previousburnFee = burnFee;\r\n\r\n        _previousbloxTeamFee = bloxTeamFee;\r\n\r\n        _previousMarketingFee = marketingFee;\r\n\r\n        _previousfoundationFee = foundationFee;\r\n\r\n        taxFee = 0;\r\n\r\n        marketingFee = 0;\r\n\r\n        burnFee = 0;\r\n\r\n        bloxTeamFee = 0;\r\n\r\n        foundationFee = 0;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function restoreAllFee() private {\r\n\r\n        taxFee = _previousTaxFee;\r\n\r\n        burnFee = _previousburnFee;\r\n\r\n        bloxTeamFee = _previousbloxTeamFee;\r\n\r\n        marketingFee = _previousMarketingFee;\r\n\r\n        foundationFee = _previousfoundationFee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n\r\n        return _isExcludedFromFees[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));        \r\n\r\n        bool overMinTokenBalance = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n\r\n            overMinTokenBalance &&\r\n\r\n            !inSwapAndLiquify &&\r\n\r\n            to == uniswapV2Pair &&\r\n\r\n            swapEnabled\r\n\r\n        ) {\r\n\r\n            inSwapAndLiquify = true;\r\n\r\n            \r\n\r\n            uint256 taxForSwap = foundationFee + marketingFee + burnFee + bloxTeamFee;\r\n\r\n            if(taxForSwap > 0) {\r\n\r\n                uint256 initialBalance = address(this).balance;\r\n\r\n\r\n\r\n                address[] memory path = new address[](2);\r\n\r\n                path[0] = address(this);\r\n\r\n                path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n\r\n                uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n                    contractTokenBalance,\r\n\r\n                    0, // accept any amount of ETH\r\n\r\n                    path,\r\n\r\n                    address(this),\r\n\r\n                    block.timestamp);\r\n\r\n\r\n\r\n                uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n\r\n\r\n                if(foundationFee > 0) {\r\n\r\n                    uint256 foundationBNB = newBalance * foundationFee / taxForSwap;\r\n\r\n                    sendBNB(payable(foundationWallet), foundationBNB);\r\n\r\n                    emit Sendfoundation(foundationBNB);\r\n\r\n                    \r\n\r\n                }\r\n\r\n                \r\n\r\n                if(marketingFee > 0) {\r\n\r\n                    uint256 marketingBNB = newBalance * marketingFee / taxForSwap;\r\n\r\n                    sendBNB(payable(marketingWallet), marketingBNB);\r\n\r\n                    emit SendMarketing(marketingBNB);\r\n\r\n                }\r\n\r\n\r\n\r\n                if(burnFee > 0) {\r\n\r\n                    uint256 burnBNB = newBalance * burnFee / taxForSwap;\r\n\r\n                    sendBNB(payable(burnWallet), burnBNB);\r\n\r\n                    emit Sendburn(burnBNB);\r\n\r\n                }\r\n\r\n\r\n\r\n                if(bloxTeamFee > 0) {\r\n\r\n                    uint256 charityBNB = newBalance * bloxTeamFee / taxForSwap;\r\n\r\n                    sendBNB(payable(bloxTeamWallet), charityBNB);\r\n\r\n                    emit SendCharity(charityBNB);\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            inSwapAndLiquify = false;\r\n\r\n        }\r\n\r\n\r\n\r\n        _tokenTransfer(from,to,amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    //=======Swap=======//\r\n\r\n    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner() {\r\n\r\n        require(newAmount >= totalSupply() / 100000, \"SwapTokensAtAmount must be greater than 0.001% of total supply\");\r\n\r\n        swapTokensAtAmount = newAmount;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n\r\n        swapEnabled = _enabled;\r\n\r\n        emit SwapEnabledUpdated(_enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    //=======TaxAndTransfer=======//\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        bool restoreFees = false;\r\n\r\n        if (_isExcludedFromFees[sender] || \r\n\r\n            _isExcludedFromFees[recipient] || \r\n\r\n            (walletToWalletTransferWithoutFee && \r\n\r\n            sender != uniswapV2Pair && recipient != uniswapV2Pair)\r\n\r\n        ) {\r\n\r\n            removeAllFee();\r\n\r\n            restoreFees = true;\r\n\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _transferFromExcluded(sender, recipient, amount);\r\n\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferToExcluded(sender, recipient, amount);\r\n\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _transferStandard(sender, recipient, amount);\r\n\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferBothExcluded(sender, recipient, amount);\r\n\r\n        } else {\r\n\r\n            _transferStandard(sender, recipient, amount);\r\n\r\n        }\r\n\r\n        if (restoreFees) {\r\n\r\n            restoreAllFee();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation) = _getValues(tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takeburn(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takebloxTeam(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        _takeMarketing(tMarketing);\r\n\r\n        _takefoundation(tfoundation);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation) = _getValues(tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takeburn(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takebloxTeam(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        _takeMarketing(tMarketing);\r\n\r\n        _takefoundation(tfoundation);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation) = _getValues(tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takeburn(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takebloxTeam(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; \r\n\r\n        _takeMarketing(tMarketing);\r\n\r\n        _takefoundation(tfoundation);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tfoundation) = _getValues(tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takeburn(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        (tTransferAmount, rTransferAmount) = _takebloxTeam(sender, tTransferAmount, rTransferAmount, tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        _takeMarketing(tMarketing);\r\n\r\n        _takefoundation(tfoundation);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    //=======FeeManagement=======//\r\n\r\n    function excludeFromFees(address account) external onlyOwner {\r\n\r\n        require(!_isExcludedFromFees[account], \"Account is already the value of true\");\r\n\r\n        _isExcludedFromFees[account] = true;\r\n\r\n\r\n\r\n        emit ExcludeFromFees(account, true);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function changeMarketingWallet(address _marketingWallet) external onlyOwner {\r\n\r\n        require(_marketingWallet != marketingWallet, \"Marketing wallet is already that address\");\r\n\r\n        require(!isContract(_marketingWallet), \"Marketing wallet cannot be a contract\");\r\n\r\n        marketingWallet = _marketingWallet;\r\n\r\n        emit MarketingWalletChanged(marketingWallet);\r\n\r\n    }\r\n\r\n\r\n\r\n    function changefoundationWallet(address _foundationWallet) external onlyOwner {\r\n\r\n        require(_foundationWallet != foundationWallet, \"foundation wallet is already that address\");\r\n\r\n        require(!isContract(_foundationWallet), \"foundation wallet cannot be a contract\");\r\n\r\n        foundationWallet = _foundationWallet;\r\n\r\n        emit foundationWalletChanged(foundationWallet);\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeburnWallet(address _burnWallet) external onlyOwner {\r\n\r\n        require(_burnWallet != burnWallet, \"burn wallet is already that address\");\r\n\r\n        require(!isContract(_burnWallet), \"burn wallet cannot be a contract\");\r\n\r\n        burnWallet = _burnWallet;\r\n\r\n        emit burnWalletChanged(burnWallet);\r\n\r\n    }\r\n\r\n\r\n\r\n    function changebloxTeamWallet(address _bloxTeamWallet) external onlyOwner {\r\n\r\n        require(_bloxTeamWallet != bloxTeamWallet, \"wallet is already that address\");\r\n\r\n        require(!isContract(_bloxTeamWallet), \"wallet cannot be a contract\");\r\n\r\n        bloxTeamWallet = _bloxTeamWallet;\r\n\r\n        emit bloxTeamWalletChanged(bloxTeamWallet);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setTaxFeePercent(uint256 _taxFee) external onlyOwner() {\r\n\r\n        taxFee = _taxFee;\r\n\r\n        totalFees = taxFee + marketingFee + burnFee + foundationFee + bloxTeamFee;\r\n\r\n        require(totalFees <= 25, \"Total fees must be less than 25%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMarketingFeePercent(uint256 _marketing) external onlyOwner {\r\n\r\n        marketingFee = _marketing;\r\n\r\n        totalFees = taxFee + marketingFee + burnFee + foundationFee + bloxTeamFee;\r\n\r\n        require(totalFees <= 25, \"Total fees must be less than 25%\");\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setburnFeePercent(uint256 _burnFee) external onlyOwner() {\r\n\r\n        burnFee = _burnFee;\r\n\r\n        totalFees = taxFee + marketingFee + burnFee + foundationFee + bloxTeamFee;\r\n\r\n        require(totalFees <= 25, \"Total fees must be less than 25%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function setbloxTeamPercent(uint256 _bloxTeam) external onlyOwner() {\r\n\r\n        bloxTeamFee = _bloxTeam;\r\n\r\n        totalFees = taxFee + marketingFee + burnFee + foundationFee + bloxTeamFee;\r\n\r\n        require(totalFees <= 25, \"Total fees must be less than 25%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function setfoundationFeePercent(uint256 _foundationFee) external onlyOwner() {\r\n\r\n        foundationFee = _foundationFee;\r\n\r\n        totalFees = taxFee + marketingFee + burnFee + foundationFee + bloxTeamFee;\r\n\r\n        require(totalFees <= 25, \"Total fees must be less than 25%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function enableWalletToWalletTransferWithoutFee(bool enable) external onlyOwner {\r\n\r\n        require(walletToWalletTransferWithoutFee != enable, \"Wallet to wallet transfer without fee is already set to that value\");\r\n\r\n        walletToWalletTransferWithoutFee = enable;\r\n\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendCharity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"Sendburn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"Sendfoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bloxTeamWallet\",\"type\":\"address\"}],\"name\":\"bloxTeamWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnWallet\",\"type\":\"address\"}],\"name\":\"burnWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"foundationWallet\",\"type\":\"address\"}],\"name\":\"foundationWalletChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloxTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloxTeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"changeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloxTeamWallet\",\"type\":\"address\"}],\"name\":\"changebloxTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnWallet\",\"type\":\"address\"}],\"name\":\"changeburnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationWallet\",\"type\":\"address\"}],\"name\":\"changefoundationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableWalletToWalletTransferWithoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bloxTeam\",\"type\":\"uint256\"}],\"name\":\"setbloxTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setburnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundationFee\",\"type\":\"uint256\"}],\"name\":\"setfoundationFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToWalletTransferWithoutFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Blox", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f40d72a0290ac7919c6b7dac422dd91227f29644448bc586bd2f427e398cd8d3"}