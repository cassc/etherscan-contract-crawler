{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTArtGenCreatorImpl.sol\": {\r\n      \"content\": \"import \\\"./NFTArtGenUpgradeable.sol\\\";\\n\\ncontract NFTArtGenCreatorImpl is NFTArtGenUpgradeable {\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _maxSupply,\\n    uint256 _commission\\n  ) public initializer {\\n    __NFTArtGen_init(_name, _symbol, _maxSupply, _commission);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTArtGenUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./utils/ERC721AUpgradeable.sol\\\";\\nimport \\\"./utils/ERC721ABurnableUpgradeable.sol\\\";\\nimport \\\"./utils/ERC721AQueryableUpgradeable.sol\\\";\\nimport \\\"./utils/filters/DefaultOperatorFiltererUpgradeable.sol\\\";\\nimport \\\"./utils/abstracts/TeamMembersUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/INFTArtGen.sol\\\";\\n\\ncontract NFTArtGenUpgradeable is\\n  Initializable,\\n  IERC2981,\\n  ERC721AUpgradeable,\\n  ERC721ABurnableUpgradeable,\\n  ERC721AQueryableUpgradeable,\\n  TeamMembersUpgradeable,\\n  DefaultOperatorFiltererUpgradeable,\\n  INFTArtGen\\n{\\n  using AddressUpgradeable for address;\\n  using StringsUpgradeable for uint256;\\n  using MathUpgradeable for uint256;\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n  uint32 public maxPerMint;\\n  uint32 public maxPerWallet;\\n  uint32 public maxFreeMint;\\n  uint256 public pauseMintAt;\\n  uint256 public cost;\\n  bool public open;\\n  bool public revealed;\\n  bool public presaleOpen;\\n  bool public referralOpen;\\n  uint256 public referralCap;\\n  address public reqToken;\\n  uint256 internal maxSupply;\\n  string internal baseUri;\\n  address internal recipient;\\n  uint256 internal recipientFee;\\n  string internal uriNotRevealed;\\n  bytes32 private merkleRoot;\\n  mapping(address => uint256) private referralMap;\\n  mapping(address => uint256) private _freeMints;\\n  address private constant _NFTGen = 0x460Fd5059E7301680fA53E63bbBF7272E643e89C;\\n  mapping(address => uint256) private _shares;\\n  address[] private _payees;\\n\\n  function __NFTArtGen_init(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _maxSupply,\\n    uint256 _commission\\n  ) internal onlyInitializing {\\n    __ERC721A_init(_name, _symbol);\\n    __ERC721ABurnable_init();\\n    __ERC721AQueryable_init();\\n    __Ownable_init();\\n    __DefaultOperatorFilterer_init();\\n    maxSupply = _maxSupply;\\n    revealed = false;\\n\\n    _shares[_NFTGen] = _commission;\\n    _shares[owner()] = 1000 - _commission;\\n    _payees.push(_NFTGen);\\n    _payees.push(owner());\\n  }\\n\\n  // ------ Dev Only ------\\n\\n  function setCommission(uint256 _val1) external override {\\n    require(msg.sender == _NFTGen, \\\"Invalid address\\\");\\n    uint256 diff = _shares[_NFTGen] - _val1;\\n    _shares[_NFTGen] = _val1;\\n    _shares[_payees[1]] += diff;\\n  }\\n\\n  // ------ Owner Only ------\\n\\n  function updateSale(\\n    bool _open,\\n    uint256 _cost,\\n    uint32 _maxW,\\n    uint32 _maxM\\n  ) external override onlyTeamOrOwner {\\n    open = _open;\\n    cost = _cost;\\n    maxPerWallet = _maxW;\\n    maxPerMint = _maxM;\\n  }\\n\\n  function _startTokenId() internal view virtual override returns (uint256) {\\n    return 1;\\n  }\\n\\n  function updateReqToken(address _address) external override onlyTeamOrOwner {\\n    reqToken = _address;\\n  }\\n\\n  function updatePresale(bool _open, bytes32 root)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    presaleOpen = _open;\\n    merkleRoot = root;\\n  }\\n\\n  function updateReveal(bool _revealed, string memory _uri)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    revealed = _revealed;\\n\\n    if (_revealed == false) {\\n      uriNotRevealed = _uri;\\n    }\\n\\n    if (_revealed == true) {\\n      bytes memory b1 = bytes(baseUri);\\n      if (b1.length == 0) {\\n        baseUri = _uri;\\n      }\\n    }\\n  }\\n\\n  function updateMaxFreeMint(uint32 _cap) external override onlyTeamOrOwner {\\n    maxFreeMint = _cap;\\n  }\\n\\n  function updatePauseMintAt(uint256 _pauseAt)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    require(_pauseAt >= supply(), \\\"Invalid value\\\");\\n    pauseMintAt = _pauseAt;\\n  }\\n\\n  function updateBaseUri(string memory _uri) external override onlyTeamOrOwner {\\n    baseUri = _uri;\\n  }\\n\\n  function updateWithdrawSplit(\\n    address[] memory _addresses,\\n    uint256[] memory _fees\\n  ) external override onlyOwner {\\n    for (uint256 i = 1; i < _payees.length; i++) {\\n      delete _shares[_payees[i]];\\n    }\\n    _payees = new address[](_addresses.length + 1);\\n    _payees[0] = _NFTGen;\\n\\n    for (uint256 i = 0; i < _addresses.length; i++) {\\n      _shares[_addresses[i]] = _fees[i];\\n      _payees[i + 1] = _addresses[i];\\n    }\\n  }\\n\\n  function getWithdrawSplit()\\n    external\\n    view\\n    override\\n    returns (address[] memory, uint256[] memory)\\n  {\\n    uint256[] memory values = new uint256[](_payees.length);\\n\\n    for (uint256 i = 0; i < _payees.length; i++) {\\n      values[i] = _shares[_payees[i]];\\n    }\\n\\n    return (_payees, values);\\n  }\\n\\n  function updateReferral(bool _open, uint256 _val)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    referralOpen = _open;\\n    referralCap = _val;\\n  }\\n\\n  function updateRoyalties(address _recipient, uint256 _fee)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    recipient = _recipient;\\n    recipientFee = _fee;\\n  }\\n\\n  function withdraw() external payable override {\\n    uint256 balance = address(this).balance;\\n    require(balance > 0, \\\"Zero balance\\\");\\n\\n    for (uint256 i = 0; i < _payees.length; i++) {\\n      uint256 split = _shares[_payees[i]];\\n      uint256 value = ((split * balance) / 1000);\\n      AddressUpgradeable.sendValue(payable(_payees[i]), value);\\n    }\\n  }\\n\\n  // ------ Mint! ------\\n  function airdrop(address[] memory _recipients, uint256[] memory _amount)\\n    external\\n    override\\n    onlyTeamOrOwner\\n  {\\n    require(_recipients.length == _amount.length);\\n\\n    for (uint256 i = 0; i < _amount.length; i++) {\\n      require(supply() + _amount[i] <= totalSupply(), \\\"reached max supply\\\");\\n      _safeMint(_recipients[i], _amount[i]);\\n    }\\n  }\\n\\n  function mint(uint256 count)\\n    external\\n    payable\\n    override\\n    preMintChecks(count, msg.sender)\\n    postMintChecks\\n  {\\n    require(open == true, \\\"Mint not open\\\");\\n    _safeMint(msg.sender, count);\\n  }\\n\\n  function mintTo(uint256 count, address to)\\n    external\\n    payable\\n    override\\n    preMintChecks(count, to)\\n    postMintChecks\\n  {\\n    require(open == true, \\\"Mint not open\\\");\\n    _safeMint(to, count);\\n  }\\n\\n  function mintAll() external payable override onlyOwner {\\n    if (msg.value > 0) {\\n      AddressUpgradeable.sendValue(payable(_NFTGen), msg.value);\\n    }\\n\\n    _safeMint(owner(), totalSupply() - supply());\\n  }\\n\\n  function presaleMint(uint32 count, bytes32[] calldata proof)\\n    external\\n    payable\\n    override\\n    preMintChecks(count, msg.sender)\\n    postMintChecks\\n  {\\n    require(presaleOpen, \\\"Presale not open\\\");\\n    require(merkleRoot != \\\"\\\", \\\"Presale not ready\\\");\\n    require(\\n      MerkleProof.verify(\\n        proof,\\n        merkleRoot,\\n        keccak256(abi.encodePacked(msg.sender))\\n      ),\\n      \\\"Not a presale member\\\"\\n    );\\n\\n    _safeMint(msg.sender, count);\\n  }\\n\\n  function presaleMintTo(\\n    uint32 count,\\n    bytes32[] calldata proof,\\n    address to\\n  ) external payable override preMintChecks(count, to) postMintChecks {\\n    require(presaleOpen, \\\"Presale not open\\\");\\n    require(merkleRoot != \\\"\\\", \\\"Presale not ready\\\");\\n    require(\\n      MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(to))),\\n      \\\"Not a presale member\\\"\\n    );\\n\\n    _safeMint(to, count);\\n  }\\n\\n  function referralMint(uint32 count, address referrer)\\n    external\\n    payable\\n    override\\n    preMintChecks(count, msg.sender)\\n    postMintChecks\\n  {\\n    require(referralOpen == true, \\\"Referrals not open\\\");\\n    require(open == true, \\\"Mint not open\\\");\\n    require(referralCap > 0, \\\"Cap is set to zero\\\");\\n    require(_numberMinted(referrer) > 0, \\\"Referrer has not minted\\\");\\n    require(msg.sender != referrer, \\\"Cannot refer yourself\\\");\\n\\n    _safeMint(msg.sender, count);\\n\\n    referralMap[referrer] += 1;\\n    if (referralMap[referrer] % referralCap == 0) {\\n      if (supply() < totalSupply()) {\\n        _safeMint(referrer, 1);\\n      }\\n    }\\n  }\\n\\n  function referralMintTo(\\n    uint32 count,\\n    address referrer,\\n    address to\\n  ) external payable override preMintChecks(count, to) postMintChecks {\\n    require(referralOpen == true, \\\"Referrals not open\\\");\\n    require(open == true, \\\"Mint not open\\\");\\n    require(referralCap > 0, \\\"Cap is set to zero\\\");\\n    require(_numberMinted(referrer) > 0, \\\"Referrer has not minted\\\");\\n    require(to != referrer, \\\"Cannot refer yourself\\\");\\n\\n    _safeMint(to, count);\\n\\n    referralMap[referrer] += 1;\\n    if (referralMap[referrer] % referralCap == 0) {\\n      if (supply() < totalSupply()) {\\n        _safeMint(referrer, 1);\\n      }\\n    }\\n  }\\n\\n  // ------ Read ------\\n  function supply() public view override returns (uint256) {\\n    return _currentIndex - 1;\\n  }\\n\\n  function totalSupply()\\n    public\\n    view\\n    override(ERC721AUpgradeable, INFTArtGen)\\n    returns (uint256)\\n  {\\n    return maxSupply - _burnCounter;\\n  }\\n\\n  function numberMintedOfOwner(address _address)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _numberMinted(_address);\\n  }\\n\\n  function remainingMintsOfOwner(address _address)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return maxPerWallet - _numberMinted(_address);\\n  }\\n\\n  function mintCostOfOwner(address _address, uint256 _count)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 mintedSoFar = _numberMinted(_address);\\n    if (maxFreeMint > 0 && mintedSoFar < maxFreeMint) {\\n      return\\n        cost *\\n        (_count - MathUpgradeable.min(_count, maxFreeMint - mintedSoFar));\\n    }\\n\\n    return _count * cost;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721AUpgradeable, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC2981).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external\\n    view\\n    override\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    return (recipient, (_salePrice * recipientFee) / 1000);\\n  }\\n\\n  function affiliatesOf(address wallet)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return referralMap[wallet];\\n  }\\n\\n  function tokenURI(uint256 _tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    require(_exists(_tokenId), \\\"Does not exist\\\");\\n    if (revealed == false) {\\n      return\\n        string(\\n          abi.encodePacked(\\n            uriNotRevealed,\\n            StringsUpgradeable.toString(_tokenId),\\n            \\\".json\\\"\\n          )\\n        );\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          baseUri,\\n          StringsUpgradeable.toString(_tokenId),\\n          \\\".json\\\"\\n        )\\n      );\\n  }\\n\\n  // ------ Modifiers ------\\n\\n  modifier preMintChecks(uint256 count, address to) {\\n    require(count > 0, \\\"Mint at least one.\\\");\\n    require(count <= maxPerMint, \\\"Max mint reached.\\\");\\n    require(supply() + count <= totalSupply(), \\\"reached max supply\\\");\\n    require(_numberMinted(to) + count <= maxPerWallet, \\\"can not mint more\\\");\\n    require(msg.value >= mintCostOfOwner(to, count), \\\"Not enough fund.\\\");\\n\\n    if (pauseMintAt > 0) {\\n      require(supply() + count <= pauseMintAt, \\\"reached pause supply\\\");\\n    }\\n\\n    if (reqToken != address(0)) {\\n      IERC721 accessToken = IERC721(reqToken);\\n      require(accessToken.balanceOf(msg.sender) > 0, \\\"Access token not owned\\\");\\n    }\\n\\n    _;\\n  }\\n\\n  modifier postMintChecks() {\\n    _;\\n\\n    if (pauseMintAt > 0 && supply() >= pauseMintAt) {\\n      open = false;\\n      presaleOpen = false;\\n      pauseMintAt = 0;\\n    }\\n  }\\n\\n  function addressAndUintToBytes(address _address, uint256 _uint)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    return bytes(abi.encodePacked(_address, _uint));\\n  }\\n\\n  // copy pasta https://github.com/GNSPS/solidity-bytes-utils/blob/6458fb2780a3092bc756e737f246be1de6d3d362/contracts/BytesLib.sol\\n  function toAddress(bytes memory _bytes, uint256 _start)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n    address tempAddress;\\n\\n    assembly {\\n      tempAddress := div(\\n        mload(add(add(_bytes, 0x20), _start)),\\n        0x1000000000000000000000000\\n      )\\n    }\\n\\n    return tempAddress;\\n  }\\n\\n  function toUint256(bytes memory _bytes, uint256 _start)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n    uint256 tempUint;\\n\\n    assembly {\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\n    }\\n\\n    return tempUint;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override onlyAllowedOperator(from) {\\n    super.transferFrom(from, to, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override onlyAllowedOperator(from) {\\n    super.safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public override onlyAllowedOperator(from) {\\n    super.safeTransferFrom(from, to, tokenId, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165Upgradeable,\\n  IERC721AUpgradeable\\n{\\n  using AddressUpgradeable for address;\\n  using StringsUpgradeable for uint256;\\n\\n  // The tokenId of the next token to be minted.\\n  uint256 internal _currentIndex;\\n\\n  // The number of tokens burned.\\n  uint256 internal _burnCounter;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  function __ERC721A_init(string memory name_, string memory symbol_)\\n    internal\\n    onlyInitializing\\n  {\\n    __ERC721A_init_unchained(name_, symbol_);\\n  }\\n\\n  function __ERC721A_init_unchained(string memory name_, string memory symbol_)\\n    internal\\n    onlyInitializing\\n  {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _currentIndex = _startTokenId();\\n  }\\n\\n  /**\\n   * To change the starting tokenId, please override this function.\\n   */\\n  function _startTokenId() internal view virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    // Counter underflow is impossible as _burnCounter cannot be incremented\\n    // more than _currentIndex - _startTokenId() times\\n    unchecked {\\n      return _currentIndex - _burnCounter - _startTokenId();\\n    }\\n  }\\n\\n  /**\\n   * Returns the total amount of tokens minted in the contract.\\n   */\\n  function _totalMinted() internal view returns (uint256) {\\n    // Counter underflow is impossible as _currentIndex does not decrement,\\n    // and it is initialized to _startTokenId()\\n    unchecked {\\n      return _currentIndex - _startTokenId();\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721Upgradeable).interfaceId ||\\n      interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  /**\\n   * Returns the number of tokens minted by `owner`.\\n   */\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  /**\\n   * Returns the number of tokens burned by or on behalf of `owner`.\\n   */\\n  function _numberBurned(address owner) internal view returns (uint256) {\\n    return uint256(_addressData[owner].numberBurned);\\n  }\\n\\n  /**\\n   * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n   */\\n  function _getAux(address owner) internal view returns (uint64) {\\n    return _addressData[owner].aux;\\n  }\\n\\n  /**\\n   * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n   * If there are multiple variables, please pack them into a uint64.\\n   */\\n  function _setAux(address owner, uint64 aux) internal {\\n    _addressData[owner].aux = aux;\\n  }\\n\\n  /**\\n   * Gas spent here starts off proportional to the maximum mint batch size.\\n   * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n   */\\n  function _ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (TokenOwnership memory)\\n  {\\n    uint256 curr = tokenId;\\n\\n    unchecked {\\n      if (_startTokenId() <= curr)\\n        if (curr < _currentIndex) {\\n          TokenOwnership memory ownership = _ownerships[curr];\\n          if (!ownership.burned) {\\n            if (ownership.addr != address(0)) {\\n              return ownership;\\n            }\\n            // Invariant:\\n            // There will always be an ownership that has an address and is not burned\\n            // before an ownership that does not have an address and is not burned.\\n            // Hence, curr will not underflow.\\n            while (true) {\\n              curr--;\\n              ownership = _ownerships[curr];\\n              if (ownership.addr != address(0)) {\\n                return ownership;\\n              }\\n            }\\n          }\\n        }\\n    }\\n    revert OwnerQueryForNonexistentToken();\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return _ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length != 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n    if (to == owner) revert ApprovalToCurrentOwner();\\n\\n    if (_msgSender() != owner)\\n      if (!isApprovedForAll(owner, _msgSender())) {\\n        revert ApprovalCallerNotOwnerNorApproved();\\n      }\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override\\n  {\\n    if (operator == _msgSender()) revert ApproveToCaller();\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    _transfer(from, to, tokenId);\\n    if (to.isContract())\\n      if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n        revert TransferToNonERC721ReceiverImplementer();\\n      }\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return\\n      _startTokenId() <= tokenId &&\\n      tokenId < _currentIndex &&\\n      !_ownerships[tokenId].burned;\\n  }\\n\\n  /**\\n   * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n   */\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement\\n   *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    uint256 startTokenId = _currentIndex;\\n    if (to == address(0)) revert MintToZeroAddress();\\n    if (quantity == 0) revert MintZeroQuantity();\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    // Overflows are incredibly unrealistic.\\n    // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n    // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n    unchecked {\\n      _addressData[to].balance += uint64(quantity);\\n      _addressData[to].numberMinted += uint64(quantity);\\n\\n      _ownerships[startTokenId].addr = to;\\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n      uint256 updatedIndex = startTokenId;\\n      uint256 end = updatedIndex + quantity;\\n\\n      if (to.isContract()) {\\n        do {\\n          emit Transfer(address(0), to, updatedIndex);\\n          if (\\n            !_checkContractOnERC721Received(\\n              address(0),\\n              to,\\n              updatedIndex++,\\n              _data\\n            )\\n          ) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n          }\\n        } while (updatedIndex < end);\\n        // Reentrancy protection\\n        if (_currentIndex != startTokenId) revert();\\n      } else {\\n        do {\\n          emit Transfer(address(0), to, updatedIndex++);\\n        } while (updatedIndex < end);\\n      }\\n      _currentIndex = updatedIndex;\\n    }\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 quantity) internal {\\n    uint256 startTokenId = _currentIndex;\\n    if (to == address(0)) revert MintToZeroAddress();\\n    if (quantity == 0) revert MintZeroQuantity();\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    // Overflows are incredibly unrealistic.\\n    // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n    // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n    unchecked {\\n      _addressData[to].balance += uint64(quantity);\\n      _addressData[to].numberMinted += uint64(quantity);\\n\\n      _ownerships[startTokenId].addr = to;\\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n      uint256 updatedIndex = startTokenId;\\n      uint256 end = updatedIndex + quantity;\\n\\n      do {\\n        emit Transfer(address(0), to, updatedIndex++);\\n      } while (updatedIndex < end);\\n\\n      _currentIndex = updatedIndex;\\n    }\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n    if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n    bool isApprovedOrOwner = (_msgSender() == from ||\\n      isApprovedForAll(from, _msgSender()) ||\\n      getApproved(tokenId) == _msgSender());\\n\\n    if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n    if (to == address(0)) revert TransferToZeroAddress();\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, from);\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n    unchecked {\\n      _addressData[from].balance -= 1;\\n      _addressData[to].balance += 1;\\n\\n      TokenOwnership storage currSlot = _ownerships[tokenId];\\n      currSlot.addr = to;\\n      currSlot.startTimestamp = uint64(block.timestamp);\\n\\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n      uint256 nextTokenId = tokenId + 1;\\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n      if (nextSlot.addr == address(0)) {\\n        // This will suffice for checking _exists(nextTokenId),\\n        // as a burned slot cannot contain the zero address.\\n        if (nextTokenId != _currentIndex) {\\n          nextSlot.addr = from;\\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n        }\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Equivalent to `_burn(tokenId, false)`.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    _burn(tokenId, false);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n    address from = prevOwnership.addr;\\n\\n    if (approvalCheck) {\\n      bool isApprovedOrOwner = (_msgSender() == from ||\\n        isApprovedForAll(from, _msgSender()) ||\\n        getApproved(tokenId) == _msgSender());\\n\\n      if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n    }\\n\\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, from);\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n    unchecked {\\n      AddressData storage addressData = _addressData[from];\\n      addressData.balance -= 1;\\n      addressData.numberBurned += 1;\\n\\n      // Keep track of who burned the token, and the timestamp of burning.\\n      TokenOwnership storage currSlot = _ownerships[tokenId];\\n      currSlot.addr = from;\\n      currSlot.startTimestamp = uint64(block.timestamp);\\n      currSlot.burned = true;\\n\\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n      uint256 nextTokenId = tokenId + 1;\\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n      if (nextSlot.addr == address(0)) {\\n        // This will suffice for checking _exists(nextTokenId),\\n        // as a burned slot cannot contain the zero address.\\n        if (nextTokenId != _currentIndex) {\\n          nextSlot.addr = from;\\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n        }\\n      }\\n    }\\n\\n    emit Transfer(from, address(0), tokenId);\\n    _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n    unchecked {\\n      _burnCounter++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkContractOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    try\\n      IERC721ReceiverUpgradeable(to).onERC721Received(\\n        _msgSender(),\\n        from,\\n        tokenId,\\n        _data\\n      )\\n    returns (bytes4 retval) {\\n      return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n    } catch (bytes memory reason) {\\n      if (reason.length == 0) {\\n        revert TransferToNonERC721ReceiverImplementer();\\n      } else {\\n        assembly {\\n          revert(add(32, reason), mload(reason))\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   * And also called before burning one token.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   * And also called after one token has been burned.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` has been minted for `to`.\\n   * - When `to` is zero, `tokenId` has been burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[42] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721ABurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721ABurnableUpgradeable.sol\\\";\\nimport \\\"./ERC721AUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721A Burnable Token\\n * @dev ERC721A Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721ABurnableUpgradeable is\\n  Initializable,\\n  ERC721AUpgradeable,\\n  IERC721ABurnableUpgradeable\\n{\\n  function __ERC721ABurnable_init() internal onlyInitializing {}\\n\\n  function __ERC721ABurnable_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own `tokenId` or be an approved operator.\\n   */\\n  function burn(uint256 tokenId) public virtual override {\\n    _burn(tokenId, true);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721AQueryableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721AQueryableUpgradeable.sol\\\";\\nimport \\\"./ERC721AUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721A Queryable\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryableUpgradeable is\\n  Initializable,\\n  ERC721AUpgradeable,\\n  IERC721AQueryableUpgradeable\\n{\\n  function __ERC721AQueryable_init() internal onlyInitializing {}\\n\\n  function __ERC721AQueryable_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n   *\\n   * If the `tokenId` is out of bounds:\\n   *   - `addr` = `address(0)`\\n   *   - `startTimestamp` = `0`\\n   *   - `burned` = `false`\\n   *\\n   * If the `tokenId` is burned:\\n   *   - `addr` = `<Address of owner before token was burned>`\\n   *   - `startTimestamp` = `<Timestamp when token was burned>`\\n   *   - `burned = `true`\\n   *\\n   * Otherwise:\\n   *   - `addr` = `<Address of owner>`\\n   *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n   *   - `burned = `false`\\n   */\\n  function explicitOwnershipOf(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (TokenOwnership memory)\\n  {\\n    TokenOwnership memory ownership;\\n    if (tokenId < _startTokenId() || tokenId >= _currentIndex) {\\n      return ownership;\\n    }\\n    ownership = _ownerships[tokenId];\\n    if (ownership.burned) {\\n      return ownership;\\n    }\\n    return _ownershipOf(tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n   * See {ERC721AQueryable-explicitOwnershipOf}\\n   */\\n  function explicitOwnershipsOf(uint256[] memory tokenIds)\\n    external\\n    view\\n    override\\n    returns (TokenOwnership[] memory)\\n  {\\n    unchecked {\\n      uint256 tokenIdsLength = tokenIds.length;\\n      TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n      for (uint256 i; i != tokenIdsLength; ++i) {\\n        ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n      }\\n      return ownerships;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an array of token IDs owned by `owner`,\\n   * in the range [`start`, `stop`)\\n   * (i.e. `start <= tokenId < stop`).\\n   *\\n   * This function allows for tokens to be queried if the collection\\n   * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n   *\\n   * Requirements:\\n   *\\n   * - `start` < `stop`\\n   */\\n  function tokensOfOwnerIn(\\n    address owner,\\n    uint256 start,\\n    uint256 stop\\n  ) external view override returns (uint256[] memory) {\\n    unchecked {\\n      if (start >= stop) revert InvalidQueryRange();\\n      uint256 tokenIdsIdx;\\n      uint256 stopLimit = _currentIndex;\\n      // Set `start = max(start, _startTokenId())`.\\n      if (start < _startTokenId()) {\\n        start = _startTokenId();\\n      }\\n      // Set `stop = min(stop, _currentIndex)`.\\n      if (stop > stopLimit) {\\n        stop = stopLimit;\\n      }\\n      uint256 tokenIdsMaxLength = balanceOf(owner);\\n      // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n      // to cater for cases where `balanceOf(owner)` is too big.\\n      if (start < stop) {\\n        uint256 rangeLength = stop - start;\\n        if (rangeLength < tokenIdsMaxLength) {\\n          tokenIdsMaxLength = rangeLength;\\n        }\\n      } else {\\n        tokenIdsMaxLength = 0;\\n      }\\n      uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n      if (tokenIdsMaxLength == 0) {\\n        return tokenIds;\\n      }\\n      // We need to call `explicitOwnershipOf(start)`,\\n      // because the slot at `start` may not be initialized.\\n      TokenOwnership memory ownership = explicitOwnershipOf(start);\\n      address currOwnershipAddr;\\n      // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n      // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n      if (!ownership.burned) {\\n        currOwnershipAddr = ownership.addr;\\n      }\\n      for (\\n        uint256 i = start;\\n        i != stop && tokenIdsIdx != tokenIdsMaxLength;\\n        ++i\\n      ) {\\n        ownership = _ownerships[i];\\n        if (ownership.burned) {\\n          continue;\\n        }\\n        if (ownership.addr != address(0)) {\\n          currOwnershipAddr = ownership.addr;\\n        }\\n        if (currOwnershipAddr == owner) {\\n          tokenIds[tokenIdsIdx++] = i;\\n        }\\n      }\\n      // Downsize the array to fit.\\n      assembly {\\n        mstore(tokenIds, tokenIdsIdx)\\n      }\\n      return tokenIds;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an array of token IDs owned by `owner`.\\n   *\\n   * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n   * It is meant to be called off-chain.\\n   *\\n   * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n   * multiple smaller scans if the collection is large enough to cause\\n   * an out-of-gas error (10K pfp collections should be fine).\\n   */\\n  function tokensOfOwner(address owner)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    unchecked {\\n      uint256 tokenIdsIdx;\\n      address currOwnershipAddr;\\n      uint256 tokenIdsLength = balanceOf(owner);\\n      uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n      TokenOwnership memory ownership;\\n      for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n        ownership = _ownerships[i];\\n        if (ownership.burned) {\\n          continue;\\n        }\\n        if (ownership.addr != address(0)) {\\n          currOwnershipAddr = ownership.addr;\\n        }\\n        if (currOwnershipAddr == owner) {\\n          tokenIds[tokenIdsIdx++] = i;\\n        }\\n      }\\n      return tokenIds;\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/filters/DefaultOperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {OperatorFiltererUpgradeable} from \\\"./OperatorFiltererUpgradeable.sol\\\";\\n\\nabstract contract DefaultOperatorFiltererUpgradeable is\\n  OperatorFiltererUpgradeable\\n{\\n  address constant DEFAULT_SUBSCRIPTION =\\n    address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n  function __DefaultOperatorFilterer_init() internal onlyInitializing {\\n    OperatorFiltererUpgradeable.__OperatorFilterer_init(\\n      DEFAULT_SUBSCRIPTION,\\n      true\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/abstracts/TeamMembersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract TeamMembersUpgradeable is OwnableUpgradeable {\\n  mapping(address => bool) private members;\\n\\n  function addTeamMember(address _address) public onlyOwner {\\n    require(_address != address(0));\\n    members[_address] = true;\\n  }\\n\\n  function removeTeamMember(address _address) public onlyOwner {\\n    require(_address != address(0));\\n\\n    delete members[_address];\\n  }\\n\\n  function isTeamMember(address _address) public view returns (bool) {\\n    return members[_address] == true;\\n  }\\n\\n  modifier onlyTeamOrOwner() {\\n    require(owner() == _msgSender() || isTeamMember(_msgSender()));\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTArtGen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.7;\\n\\ninterface INFTArtGen {\\n  /**\\n   *\\n   * @notice Set the commission for the contract\\n   * @param _val1 The new commission value\\n   * @dev Only callable by the owner/team\\n   */\\n  function setCommission(uint256 _val1) external;\\n\\n  /**\\n   *\\n   * @notice Update the sale parameters\\n   * @param _open Whether the sale is open\\n   * @param _cost The cost of each token\\n   * @param _maxW The max number of mints per wallet\\n   * @param _maxM The max number of mints per transaction\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateSale(\\n    bool _open,\\n    uint256 _cost,\\n    uint32 _maxW,\\n    uint32 _maxM\\n  ) external;\\n\\n  /**\\n   *\\n   * @notice Update the ERC20 token (most contracts will not use this)\\n   * @param _address The new address of the token\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateReqToken(address _address) external;\\n\\n  /**\\n   *\\n   * @notice Update the presale parameters\\n   * @param _open Whether the presale is open\\n   * @param root The merkle root for the whitelisted addresses\\n   * @dev Only callable by the owner/team\\n   */\\n  function updatePresale(bool _open, bytes32 root) external;\\n\\n  /**\\n   *\\n   * @notice Reveal the collection's URI\\n   * @param _revealed Whether the collection is revealed\\n   * @param _uri The collection's URI\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateReveal(bool _revealed, string memory _uri) external;\\n\\n  /**\\n   *\\n   * @notice Update the max number of free mints\\n   * @param _cap The new cap\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateMaxFreeMint(uint32 _cap) external;\\n\\n  /**\\n   *\\n   * @notice Update the number to pause minting at\\n   * @param _pauseAt The new number to pause minting at\\n   * @dev Only callable by the owner/team\\n   */\\n  function updatePauseMintAt(uint256 _pauseAt) external;\\n\\n  /**\\n   *\\n   * @notice Update the base URI\\n   * @param _uri The new base URI\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateBaseUri(string memory _uri) external;\\n\\n  /**\\n   *\\n   * @notice Update the withdraw split\\n   * @param _addresses The new addresses\\n   * @param _fees The new shares for each address\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateWithdrawSplit(\\n    address[] memory _addresses,\\n    uint256[] memory _fees\\n  ) external;\\n\\n  /**\\n   *\\n   * @notice Get the current commission\\n   * @return The current withdraw split\\n   */\\n  function getWithdrawSplit()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   *\\n   * @notice Update the referral parameters\\n   * @param _open Whether the referral program is open\\n   * @param _val The referral value\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateReferral(bool _open, uint256 _val) external;\\n\\n  /**\\n   *\\n   * @notice Update the royalties parameters\\n   * @param _recipient The new royalty recipient\\n   * @param _fee The royalty fee\\n   * @dev Only callable by the owner/team\\n   */\\n  function updateRoyalties(address _recipient, uint256 _fee) external;\\n\\n  /**\\n   *\\n   * @notice Withdraw the native token balance from the contract\\n   * @dev Only callable by the owner/team\\n   */\\n  function withdraw() external payable;\\n\\n  /**\\n   *\\n   * @notice Send tokens to a list of recipients\\n   * @param _recipients The recipients\\n   * @param _amount The amount to send to each recipient\\n   * @dev Only callable by the owner/team\\n   */\\n  function airdrop(address[] memory _recipients, uint256[] memory _amount)\\n    external;\\n\\n  /**\\n   *\\n   * @notice Mint tokens\\n   * @param count The number of tokens to mint\\n   */\\n  function mint(uint256 count) external payable;\\n\\n  /**\\n   *\\n   * @notice Mint tokens to a specific address\\n   * @param count The number of tokens to mint\\n   * @param to The address to mint to\\n   */\\n  function mintTo(uint256 count, address to) external payable;\\n\\n  /**\\n   *\\n   * @notice Mint all tokens to the contract owner\\n   * @dev Only callable by the owner\\n   */\\n  function mintAll() external payable;\\n\\n  /**\\n   *\\n   * @notice Mint tokens when presale is open\\n   * @param count The number of tokens to mint\\n   * @param proof The merkle proof for the address\\n   */\\n  function presaleMint(uint32 count, bytes32[] calldata proof) external payable;\\n\\n  /**\\n   *\\n   * @notice Mint tokens when presale is open to a specific address\\n   * @param count The number of tokens to mint\\n   * @param proof The merkle proof for the address\\n   * @param to The address to mint to\\n   */\\n  function presaleMintTo(\\n    uint32 count,\\n    bytes32[] calldata proof,\\n    address to\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @notice Mint tokens while the referral program is open\\n   * @param count The number of tokens to mint\\n   * @param referrer The address of the referrer\\n   */\\n  function referralMint(uint32 count, address referrer) external payable;\\n\\n  /**\\n   *\\n   * @notice Mint tokens while the referral program is open to a specific address\\n   * @param count The number of tokens to mint\\n   * @param referrer The address of the referrer\\n   * @param to The address to mint to\\n   */\\n  function referralMintTo(\\n    uint32 count,\\n    address referrer,\\n    address to\\n  ) external payable;\\n\\n  /**\\n   *\\n   * @notice Get the minted count\\n   */\\n  function supply() external view returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Get the max supply\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Get the number of tokens minted by a specific address\\n   * @param _address The address to check\\n   */\\n  function numberMintedOfOwner(address _address)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Get the number of tokens a specific address can still mint\\n   * @param _address The address to check\\n   */\\n  function remainingMintsOfOwner(address _address)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   *\\n   * @notice Get the cost to mint _count tokens for a specific address\\n   * @param _address The address to check\\n   * @param _count The number of tokens to check\\n   */\\n  function mintCostOfOwner(address _address, uint256 _count)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Get the number of referral mints for a specific address\\n   * @param wallet The address to check\\n   */\\n  function affiliatesOf(address wallet) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721AUpgradeable is\\n  IERC721Upgradeable,\\n  IERC721MetadataUpgradeable\\n{\\n  /**\\n   * The caller must own the token or be an approved operator.\\n   */\\n  error ApprovalCallerNotOwnerNorApproved();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error ApprovalQueryForNonexistentToken();\\n\\n  /**\\n   * The caller cannot approve to their own address.\\n   */\\n  error ApproveToCaller();\\n\\n  /**\\n   * The caller cannot approve to the current owner.\\n   */\\n  error ApprovalToCurrentOwner();\\n\\n  /**\\n   * Cannot query the balance for the zero address.\\n   */\\n  error BalanceQueryForZeroAddress();\\n\\n  /**\\n   * Cannot mint to the zero address.\\n   */\\n  error MintToZeroAddress();\\n\\n  /**\\n   * The quantity of tokens minted must be more than zero.\\n   */\\n  error MintZeroQuantity();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error OwnerQueryForNonexistentToken();\\n\\n  /**\\n   * The caller must own the token or be an approved operator.\\n   */\\n  error TransferCallerNotOwnerNorApproved();\\n\\n  /**\\n   * The token must be owned by `from`.\\n   */\\n  error TransferFromIncorrectOwner();\\n\\n  /**\\n   * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n   */\\n  error TransferToNonERC721ReceiverImplementer();\\n\\n  /**\\n   * Cannot transfer to the zero address.\\n   */\\n  error TransferToZeroAddress();\\n\\n  /**\\n   * The token does not exist.\\n   */\\n  error URIQueryForNonexistentToken();\\n\\n  // Compiler will pack this into a single 256bit word.\\n  struct TokenOwnership {\\n    // The address of the owner.\\n    address addr;\\n    // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    uint64 startTimestamp;\\n    // Whether the token has been burned.\\n    bool burned;\\n  }\\n\\n  // Compiler will pack this into a single 256bit word.\\n  struct AddressData {\\n    // Realistically, 2**64-1 is more than enough.\\n    uint64 balance;\\n    // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberMinted;\\n    // Keeps track of burn count with minimal overhead for tokenomics.\\n    uint64 numberBurned;\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n  }\\n\\n  /**\\n   * @dev Returns the total amount of tokens stored by the contract.\\n   *\\n   * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n   */\\n  function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IERC721ABurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721ABurnable compliant contract.\\n */\\ninterface IERC721ABurnableUpgradeable is IERC721AUpgradeable {\\n  /**\\n   * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own `tokenId` or be an approved operator.\\n   */\\n  function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IERC721AQueryableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721AQueryable compliant contract.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n  /**\\n   * Invalid query range (`start` >= `stop`).\\n   */\\n  error InvalidQueryRange();\\n\\n  /**\\n   * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n   *\\n   * If the `tokenId` is out of bounds:\\n   *   - `addr` = `address(0)`\\n   *   - `startTimestamp` = `0`\\n   *   - `burned` = `false`\\n   *\\n   * If the `tokenId` is burned:\\n   *   - `addr` = `<Address of owner before token was burned>`\\n   *   - `startTimestamp` = `<Timestamp when token was burned>`\\n   *   - `burned = `true`\\n   *\\n   * Otherwise:\\n   *   - `addr` = `<Address of owner>`\\n   *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n   *   - `burned = `false`\\n   */\\n  function explicitOwnershipOf(uint256 tokenId)\\n    external\\n    view\\n    returns (TokenOwnership memory);\\n\\n  /**\\n   * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n   * See {ERC721AQueryable-explicitOwnershipOf}\\n   */\\n  function explicitOwnershipsOf(uint256[] memory tokenIds)\\n    external\\n    view\\n    returns (TokenOwnership[] memory);\\n\\n  /**\\n   * @dev Returns an array of token IDs owned by `owner`,\\n   * in the range [`start`, `stop`)\\n   * (i.e. `start <= tokenId < stop`).\\n   *\\n   * This function allows for tokens to be queried if the collection\\n   * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n   *\\n   * Requirements:\\n   *\\n   * - `start` < `stop`\\n   */\\n  function tokensOfOwnerIn(\\n    address owner,\\n    uint256 start,\\n    uint256 stop\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns an array of token IDs owned by `owner`.\\n   *\\n   * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n   * It is meant to be called off-chain.\\n   *\\n   * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n   * multiple smaller scans if the collection is large enough to cause\\n   * an out-of-gas error (10K pfp collections should be fine).\\n   */\\n  function tokensOfOwner(address owner)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/filters/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IOperatorFilterRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n  error OperatorNotAllowed(address operator);\\n\\n  IOperatorFilterRegistry constant operatorFilterRegistry =\\n    IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n  function __OperatorFilterer_init(\\n    address subscriptionOrRegistrantToCopy,\\n    bool subscribe\\n  ) internal onlyInitializing {\\n    // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n    // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n    // order for the modifier to filter addresses.\\n    if (address(operatorFilterRegistry).code.length > 0) {\\n      if (!operatorFilterRegistry.isRegistered(address(this))) {\\n        if (subscribe) {\\n          operatorFilterRegistry.registerAndSubscribe(\\n            address(this),\\n            subscriptionOrRegistrantToCopy\\n          );\\n        } else {\\n          if (subscriptionOrRegistrantToCopy != address(0)) {\\n            operatorFilterRegistry.registerAndCopyEntries(\\n              address(this),\\n              subscriptionOrRegistrantToCopy\\n            );\\n          } else {\\n            operatorFilterRegistry.register(address(this));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  modifier onlyAllowedOperator(address from) virtual {\\n    // Check registry code length to facilitate testing in environments without a deployed registry.\\n    if (address(operatorFilterRegistry).code.length > 0) {\\n      // Allow spending tokens from addresses with balance\\n      // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n      // from an EOA.\\n      if (from == msg.sender) {\\n        _;\\n        return;\\n      }\\n      if (\\n        !operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\\n      ) {\\n        revert OperatorNotAllowed(msg.sender);\\n      }\\n    }\\n    _;\\n  }\\n\\n  modifier onlyAllowedOperatorApproval(address operator) virtual {\\n    // Check registry code length to facilitate testing in environments without a deployed registry.\\n    if (address(operatorFilterRegistry).code.length > 0) {\\n      if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n        revert OperatorNotAllowed(operator);\\n      }\\n    }\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/filters/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IOperatorFilterRegistry {\\n  function isOperatorAllowed(address registrant, address operator)\\n    external\\n    view\\n    returns (bool);\\n\\n  function register(address registrant) external;\\n\\n  function registerAndSubscribe(address registrant, address subscription)\\n    external;\\n\\n  function registerAndCopyEntries(address registrant, address registrantToCopy)\\n    external;\\n\\n  function unregister(address addr) external;\\n\\n  function updateOperator(\\n    address registrant,\\n    address operator,\\n    bool filtered\\n  ) external;\\n\\n  function updateOperators(\\n    address registrant,\\n    address[] calldata operators,\\n    bool filtered\\n  ) external;\\n\\n  function updateCodeHash(\\n    address registrant,\\n    bytes32 codehash,\\n    bool filtered\\n  ) external;\\n\\n  function updateCodeHashes(\\n    address registrant,\\n    bytes32[] calldata codeHashes,\\n    bool filtered\\n  ) external;\\n\\n  function subscribe(address registrant, address registrantToSubscribe)\\n    external;\\n\\n  function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n  function subscriptionOf(address addr) external returns (address registrant);\\n\\n  function subscribers(address registrant) external returns (address[] memory);\\n\\n  function subscriberAt(address registrant, uint256 index)\\n    external\\n    returns (address);\\n\\n  function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n  function isOperatorFiltered(address registrant, address operator)\\n    external\\n    returns (bool);\\n\\n  function isCodeHashOfFiltered(address registrant, address operatorWithCode)\\n    external\\n    returns (bool);\\n\\n  function isCodeHashFiltered(address registrant, bytes32 codeHash)\\n    external\\n    returns (bool);\\n\\n  function filteredOperators(address addr) external returns (address[] memory);\\n\\n  function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n  function filteredOperatorAt(address registrant, uint256 index)\\n    external\\n    returns (address);\\n\\n  function filteredCodeHashAt(address registrant, uint256 index)\\n    external\\n    returns (bytes32);\\n\\n  function isRegistered(address addr) external returns (bool);\\n\\n  function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"addressAndUintToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"affiliatesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721AUpgradeable.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721AUpgradeable.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawSplit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTeamMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFreeMint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintCostOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"numberMintedOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMintAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"presaleMintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"referralMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"referralMintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remainingMintsOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val1\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_cap\",\"type\":\"uint32\"}],\"name\":\"updateMaxFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pauseAt\",\"type\":\"uint256\"}],\"name\":\"updatePauseMintAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"updateReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateReqToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_revealed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxW\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxM\",\"type\":\"uint32\"}],\"name\":\"updateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"updateWithdrawSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "NFTArtGenCreatorImpl", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}