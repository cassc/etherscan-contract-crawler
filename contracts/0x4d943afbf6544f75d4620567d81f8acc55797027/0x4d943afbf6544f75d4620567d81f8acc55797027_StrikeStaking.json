{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking/StrikeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StrikeStakingProxy.sol\\\";\\nimport \\\"../Lib/GSN/Context.sol\\\";\\nimport \\\"../Lib/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Lib/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../Lib/math/Math.sol\\\";\\nimport \\\"../Lib/math/SafeMath.sol\\\";\\n\\n// Based on EPS's & Geist's MultiFeeDistribution\\ncontract StrikeStaking is StrikeStakingG1Storage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyOwner() {\\n        require(admin == msg.sender, \\\"caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function owner() public view returns(address) {\\n        return admin;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    struct Reward {\\n        uint256 periodFinish;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n    }\\n    struct Balances {\\n        uint256 total;\\n        uint256 unlocked;\\n        uint256 locked;\\n        uint256 earned;\\n    }\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    IERC20 public stakingToken;\\n    address[] public rewardTokens;\\n    mapping(address => Reward) public rewardData;\\n\\n    // Duration that rewards are streamed over\\n    uint256 public constant rewardsDuration = 86400 * 14; // 2 weeks\\n\\n    // Duration of lock/earned penalty period\\n    uint256 public constant lockDuration = rewardsDuration * 6; // 12 weeks\\n\\n    // Duration of lock/earned group period\\n    uint256 public constant groupDuration = 86400 * 7; // 1 weeks\\n\\n    // Addresses approved to call mint\\n    mapping(address => bool) public minters;\\n    address[] public mintersArray;\\n\\n    // reward token -> distributor -> is approved to add rewards\\n    mapping(address => mapping(address => bool)) public rewardDistributors;\\n\\n    // user -> reward token -> amount\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n    mapping(address => mapping(address => uint256)) public rewards;\\n\\n    uint256 public totalSupply;\\n    uint256 public lockedSupply;\\n\\n    // Private mappings for balance data\\n    mapping(address => Balances) private balances;\\n    mapping(address => LockedBalance[]) private userLocks;\\n    mapping(address => LockedBalance[]) private userEarnings;\\n\\n    bool private _notEntered;\\n\\n    uint256 public constant QUART = 25000; //  25%\\n\\tuint256 public constant HALF = 65000; //  65%\\n\\tuint256 public constant WHOLE = 100000; // 100%\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents blacklisted users from calling the contract.\\n     */\\n    modifier nonBlacklist(address account) {\\n        require(\\n            account != 0x3CAb82103fccaDbe95f7ab18d7d00C08Ce4dD8C3,\\n            \\\"Blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBlacklist(address account) {\\n        require(\\n            account == 0x3CAb82103fccaDbe95f7ab18d7d00C08Ce4dD8C3,\\n            \\\"No blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor() public {\\n    }\\n\\n    function initialize(\\n        address _stakingToken,\\n        address[] calldata _minters\\n    ) external {\\n        require(address(stakingToken) == address(0), \\\"StrikeStaking:initialize: Already initialized\\\");\\n\\n        _notEntered = true;\\n\\n        stakingToken = IERC20(_stakingToken);\\n        for (uint256 i; i < _minters.length; i++) {\\n            minters[_minters[i]] = true;\\n            mintersArray.push(_minters[i]);\\n        }\\n        // First reward MUST be the staking token or things will break\\n        // related to the 50% penalty and distribution to locked balances\\n        rewardTokens.push(_stakingToken);\\n        rewardData[_stakingToken].lastUpdateTime = block.timestamp;\\n        rewardData[_stakingToken].periodFinish = block.timestamp;\\n    }\\n\\n    /* ========== ADMIN CONFIGURATION ========== */\\n\\n    // Add a new reward token to be distributed to stakers\\n    function addReward(address _rewardsToken, address _distributor) public onlyOwner {\\n        require(rewardData[_rewardsToken].lastUpdateTime == 0, \\\"MultiFeeDistribution::addReward: Invalid\\\");\\n        rewardTokens.push(_rewardsToken);\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\\n        rewardDistributors[_rewardsToken][_distributor] = true;\\n        emit RewardTokenAdded(_rewardsToken);\\n        emit RewardDistributorApproved(_rewardsToken, _distributor, true);\\n    }\\n\\n    // Modify approval for an address to call notifyRewardAmount\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external onlyOwner {\\n        require(rewardData[_rewardsToken].lastUpdateTime > 0, \\\"MultiFeeDistribution::approveRewardDistributor: Invalid\\\");\\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\\n        emit RewardDistributorApproved(_rewardsToken, _distributor, _approved);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function _rewardPerToken(address _rewardsToken, uint256 _supply) internal view returns (uint256) {\\n        if (_supply == 0) {\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\n        }\\n        return\\n            rewardData[_rewardsToken].rewardPerTokenStored.add(\\n                lastTimeRewardApplicable(_rewardsToken).sub(rewardData[_rewardsToken].lastUpdateTime).mul(rewardData[_rewardsToken].rewardRate).mul(1e18).div(_supply)\\n            );\\n    }\\n\\n    function _earned(\\n        address _user,\\n        address _rewardsToken,\\n        uint256 _balance,\\n        uint256 supply\\n    ) internal view returns (uint256) {\\n        return _balance.mul(_rewardPerToken(_rewardsToken, supply).sub(userRewardPerTokenPaid[_user][_rewardsToken])).div(1e18).add(rewards[_user][_rewardsToken]);\\n    }\\n\\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\\n        return Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\\n    }\\n\\n    function rewardPerToken(address _rewardsToken) external view returns (uint256) {\\n        uint256 supply = _rewardsToken == address(stakingToken) ? lockedSupply : totalSupply;\\n        return _rewardPerToken(_rewardsToken, supply);\\n    }\\n\\n    function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\\n        return rewardData[_rewardsToken].rewardRate.mul(rewardsDuration);\\n    }\\n\\n    // Address and claimable amount of all reward tokens for the given account\\n    function claimableRewards(address account) external view returns (RewardData[] memory _rewards) {\\n        _rewards = new RewardData[](rewardTokens.length);\\n        for (uint256 i = 0; i < _rewards.length; i++) {\\n            // If i == 0 this is the stakingReward, distribution is based on locked balances\\n            uint256 balance = i == 0 ? balances[account].locked : balances[account].total;\\n            uint256 supply = i == 0 ? lockedSupply : totalSupply;\\n            _rewards[i].token = rewardTokens[i];\\n            _rewards[i].amount = _earned(account, _rewards[i].token, balance, supply);\\n        }\\n        return _rewards;\\n    }\\n\\n    // Total balance of an account, including unlocked, locked and earned tokens\\n    function totalBalance(address user) external view returns (uint256 amount) {\\n        return balances[user].total;\\n    }\\n\\n    // Total withdrawable balance for an account to which no penalty is applied\\n    function unlockedBalance(address user) external view returns (uint256 amount) {\\n        amount = balances[user].unlocked;\\n        LockedBalance[] storage earnings = userEarnings[user];\\n        for (uint256 i = 0; i < earnings.length; i++) {\\n            if (earnings[i].unlockTime > block.timestamp) {\\n                break;\\n            }\\n            amount = amount.add(earnings[i].amount);\\n        }\\n        return amount;\\n    }\\n\\n    // Information on the \\\"earned\\\" balances of a user\\n    // Earned balances may be withdrawn immediately for a 50% penalty\\n    function earnedBalances(address user) external view returns (uint256 total, LockedBalance[] memory earningsData) {\\n        LockedBalance[] storage earnings = userEarnings[user];\\n        uint256 idx;\\n        for (uint256 i = 0; i < earnings.length; i++) {\\n            if (earnings[i].unlockTime > block.timestamp) {\\n                if (idx == 0) {\\n                    earningsData = new LockedBalance[](earnings.length - i);\\n                }\\n                earningsData[idx] = earnings[i];\\n                idx++;\\n                total = total.add(earnings[i].amount);\\n            }\\n        }\\n        return (total, earningsData);\\n    }\\n\\n    // Information on a user's locked balances\\n    function lockedBalances(address user)\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 unlockable,\\n            uint256 locked,\\n            LockedBalance[] memory lockData\\n        )\\n    {\\n        LockedBalance[] storage locks = userLocks[user];\\n        uint256 idx;\\n        for (uint256 i = 0; i < locks.length; i++) {\\n            if (locks[i].unlockTime > block.timestamp) {\\n                if (idx == 0) {\\n                    lockData = new LockedBalance[](locks.length - i);\\n                }\\n                lockData[idx] = locks[i];\\n                idx++;\\n                locked = locked.add(locks[i].amount);\\n            } else {\\n                unlockable = unlockable.add(locks[i].amount);\\n            }\\n        }\\n        return (balances[user].locked, unlockable, locked, lockData);\\n    }\\n\\n    // Final balance received and penalty balance paid by user upon calling exit\\n    function withdrawableBalance(address user) public view returns (uint256 amount, uint256 penaltyAmount) {\\n        uint256 earned = balances[user].earned;\\n\\t\\tif (earned > 0) {\\n\\t\\t\\tuint256 length = userEarnings[user].length;\\n\\t\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[user][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, , uint256 newPenaltyAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(newPenaltyAmount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tamount = balances[user].unlocked.add(earned).sub(penaltyAmount);\\n\\t\\treturn (amount, penaltyAmount);\\n    }\\n\\n    function _penaltyInfo(\\n\\t\\tLockedBalance memory earning\\n\\t) internal view returns (uint256 amount, uint256 penaltyFactor, uint256 penaltyAmount) {\\n\\t\\tif (earning.unlockTime > block.timestamp) {\\n\\t\\t\\t// 90% on day 1, decays to 25% on day 90\\n\\t\\t\\tpenaltyFactor = earning.unlockTime.sub(block.timestamp).mul(HALF).div(lockDuration).add(QUART); // 25% + timeLeft/vestDuration * 65%\\n\\t\\t}\\n\\t\\tpenaltyAmount = earning.amount.mul(penaltyFactor).div(WHOLE);\\n\\t\\tamount = earning.amount.sub(penaltyAmount);\\n\\t}\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Stake tokens to receive rewards\\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\\n    function stake(uint256 amount, bool lock) external nonReentrant updateReward(msg.sender) nonBlacklist(msg.sender) {\\n        require(amount > 0, \\\"MultiFeeDistribution::stake: Cannot stake 0\\\");\\n        require(lock == true, \\\"Only lock enabled\\\");\\n        totalSupply = totalSupply.add(amount);\\n        Balances storage bal = balances[msg.sender];\\n        bal.total = bal.total.add(amount);\\n        if (lock) {\\n            lockedSupply = lockedSupply.add(amount);\\n            bal.locked = bal.locked.add(amount);\\n            uint256 unlockTime = block.timestamp.div(groupDuration).mul(groupDuration).add(lockDuration);\\n            uint256 idx = userLocks[msg.sender].length;\\n            if (idx == 0 || userLocks[msg.sender][idx - 1].unlockTime < unlockTime) {\\n                userLocks[msg.sender].push(LockedBalance({amount: amount, unlockTime: unlockTime}));\\n            } else {\\n                userLocks[msg.sender][idx - 1].amount = userLocks[msg.sender][idx - 1].amount.add(amount);\\n            }\\n        } else {\\n            bal.unlocked = bal.unlocked.add(amount);\\n        }\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    // Mint new tokens\\n    // Minted tokens receive rewards normally but incur a 50% penalty when\\n    // withdrawn before lockDuration has passed.\\n    function mint(address user, uint256 amount) external updateReward(user) nonBlacklist(user) {\\n        require(minters[msg.sender], \\\"MultiFeeDistribution::mint: Only minters allowed\\\");\\n\\n        totalSupply = totalSupply.add(amount);\\n        Balances storage bal = balances[user];\\n        bal.total = bal.total.add(amount);\\n        bal.earned = bal.earned.add(amount);\\n        uint256 unlockTime = block.timestamp.div(groupDuration).mul(groupDuration).add(lockDuration);\\n        LockedBalance[] storage earnings = userEarnings[user];\\n        uint256 idx = earnings.length;\\n\\n        if (idx == 0 || earnings[idx - 1].unlockTime < unlockTime) {\\n            earnings.push(LockedBalance({amount: amount, unlockTime: unlockTime}));\\n        } else {\\n            earnings[idx - 1].amount = earnings[idx - 1].amount.add(amount);\\n        }\\n        emit Staked(user, amount);\\n    }\\n\\n    // Withdraw staked tokens\\n    // First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\\n    // incurs a 50% penalty which is distributed based on locked balances.\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) nonBlacklist(msg.sender) {\\n        require(amount > 0, \\\"MultiFeeDistribution::withdraw: Cannot withdraw 0\\\");\\n\\n        address _address = msg.sender;\\n        uint256 penaltyAmount;\\n\\t\\tBalances storage bal = balances[_address];\\n\\n\\t\\tif (amount <= bal.unlocked) {\\n\\t\\t\\tbal.unlocked = bal.unlocked.sub(amount);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = amount.sub(bal.unlocked);\\n\\t\\t\\trequire(bal.earned >= remaining, \\\"MultiFeeDistribution::invalid earned\\\");\\n\\t\\t\\tbal.unlocked = 0;\\n\\t\\t\\tuint256 sumEarned = bal.earned;\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tfor (i = 0; ; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[_address][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, uint256 penaltyFactor, ) = _penaltyInfo(userEarnings[_address][i]);\\n\\n\\t\\t\\t\\t// Amount required from this lock, taking into account the penalty\\n\\t\\t\\t\\tuint256 requiredAmount = remaining.mul(WHOLE).div(WHOLE.sub(penaltyFactor));\\n\\t\\t\\t\\tif (requiredAmount >= earnedAmount) {\\n\\t\\t\\t\\t\\trequiredAmount = earnedAmount;\\n\\t\\t\\t\\t\\tremaining = remaining.sub(earnedAmount.mul(WHOLE.sub(penaltyFactor)).div(WHOLE)); // remaining -= earned * (1 - pentaltyFactor)\\n\\t\\t\\t\\t\\tif (remaining == 0) i++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuserEarnings[_address][i].amount = earnedAmount.sub(requiredAmount);\\n\\t\\t\\t\\t\\tremaining = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsumEarned = sumEarned.sub(requiredAmount);\\n\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(requiredAmount.mul(penaltyFactor).div(WHOLE)); // penalty += amount * penaltyFactor\\n\\n\\t\\t\\t\\tif (remaining == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(sumEarned != 0, \\\"MultiFeeDistribution::0 earned\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tfor (uint256 j = i; j < userEarnings[_address].length; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address][j - i] = userEarnings[_address][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (uint256 j = 0; j < i; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address].pop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbal.earned = sumEarned;\\n\\t\\t}\\n\\n        uint256 adjustedAmount = amount.add(penaltyAmount);\\n        bal.total = bal.total.sub(adjustedAmount);\\n        totalSupply = totalSupply.sub(adjustedAmount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        if (penaltyAmount > 0) {\\n            _notifyReward(address(stakingToken), penaltyAmount);\\n        }\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    // Withdraw full unlocked balance and earnings\\n    function exit() external nonReentrant updateReward(msg.sender) nonBlacklist(msg.sender) {\\n        (uint256 amount, uint256 penaltyAmount) = withdrawableBalance(msg.sender);\\n        delete userEarnings[msg.sender];\\n        Balances storage bal = balances[msg.sender];\\n        bal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\n        bal.unlocked = 0;\\n        bal.earned = 0;\\n\\n        totalSupply = totalSupply.sub(amount.add(penaltyAmount));\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        if (penaltyAmount > 0) {\\n            _notifyReward(address(stakingToken), penaltyAmount);\\n        }\\n    }\\n\\n    // Claim all pending staking rewards\\n    function getReward() public nonReentrant updateReward(msg.sender) nonBlacklist(msg.sender) {\\n        for (uint256 i; i < rewardTokens.length; i++) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 reward = rewards[msg.sender][_rewardToken];\\n            if (reward > 0) {\\n                rewards[msg.sender][_rewardToken] = 0;\\n                IERC20(_rewardToken).safeTransfer(msg.sender, reward);\\n                emit RewardPaid(msg.sender, _rewardToken, reward);\\n            }\\n        }\\n    }\\n\\n    // Withdraw full unlocked balance and claim pending rewards\\n    function emergencyWithdraw() external updateReward(msg.sender) nonBlacklist(msg.sender) {\\n        (uint256 amount, uint256 penaltyAmount) = withdrawableBalance(msg.sender);\\n        delete userEarnings[msg.sender];\\n        Balances storage bal = balances[msg.sender];\\n        bal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\n        bal.unlocked = 0;\\n        bal.earned = 0;\\n\\n        totalSupply = totalSupply.sub(amount.add(penaltyAmount));\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        if (penaltyAmount > 0) {\\n            _notifyReward(address(stakingToken), penaltyAmount);\\n        }\\n        getReward();\\n    }\\n\\n    // Withdraw all currently locked tokens where the unlock time has passed\\n    function withdrawExpiredLocks() external nonBlacklist(msg.sender) {\\n        LockedBalance[] storage locks = userLocks[msg.sender];\\n        Balances storage bal = balances[msg.sender];\\n        uint256 amount;\\n        uint256 length = locks.length;\\n        if (locks[length - 1].unlockTime <= block.timestamp) {\\n            amount = bal.locked;\\n            delete userLocks[msg.sender];\\n        } else {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (locks[i].unlockTime > block.timestamp) break;\\n                amount = amount.add(locks[i].amount);\\n                delete locks[i];\\n            }\\n        }\\n        bal.locked = bal.locked.sub(amount);\\n        bal.total = bal.total.sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n        lockedSupply = lockedSupply.sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n    }\\n\\n    // Withdraw the locked tokens of a blacklisted user by one of distributors\\n    function removeBlacklistedLocks(address account, address _rewardsToken, address to) external onlyBlacklist(account) updateReward(account) {\\n        require(rewardDistributors[_rewardsToken][msg.sender], \\\"MultiFeeDistribution::removeBlacklistedLocks: Only reward distributors allowed\\\");\\n\\n        LockedBalance[] storage locks = userLocks[account];\\n        Balances storage bal = balances[account];\\n        uint256 amount;\\n        uint256 length = locks.length;\\n        if (locks[length - 1].unlockTime <= block.timestamp) {\\n            amount = bal.locked;\\n            delete userLocks[account];\\n        } else {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (locks[i].unlockTime > block.timestamp) break;\\n                amount = amount.add(locks[i].amount);\\n                delete locks[i];\\n            }\\n        }\\n        bal.locked = bal.locked.sub(amount);\\n        bal.total = bal.total.sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n        lockedSupply = lockedSupply.sub(amount);\\n        stakingToken.safeTransfer(to, amount);\\n\\n        // remove all pending reward\\n        for (uint256 i; i < rewardTokens.length; i++) {\\n            amount = rewards[account][rewardTokens[i]];\\n            if (amount > 0) {\\n                rewards[account][rewardTokens[i]] = 0;\\n                IERC20(rewardTokens[i]).safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function _notifyReward(address _rewardsToken, uint256 reward) internal {\\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\\n            rewardData[_rewardsToken].rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = rewardData[_rewardsToken].periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardData[_rewardsToken].rewardRate);\\n            rewardData[_rewardsToken].rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\n        rewardData[_rewardsToken].periodFinish = block.timestamp.add(rewardsDuration);\\n    }\\n\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\\n        require(rewardDistributors[_rewardsToken][msg.sender], \\\"MultiFeeDistribution::notifyRewardAmount: Only reward distributors allowed\\\");\\n        require(reward > 0, \\\"MultiFeeDistribution::notifyRewardAmount: No reward\\\");\\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\\n        // of transactions required and ensure correctness of the reward amount\\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\\n        _notifyReward(_rewardsToken, reward);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(stakingToken), \\\"MultiFeeDistribution::recoverERC20: Cannot withdraw staking token\\\");\\n        require(rewardData[tokenAddress].lastUpdateTime == 0, \\\"MultiFeeDistribution::recoverERC20: Cannot withdraw reward token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        address token = address(stakingToken);\\n        uint256 balance;\\n        uint256 supply = lockedSupply;\\n        rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\\n        rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\n        if (account != address(0)) {\\n            // Special case, use the locked balances and supply for stakingReward rewards\\n            rewards[account][token] = _earned(account, token, balances[account].locked, supply);\\n            userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\\n            balance = balances[account].total;\\n        }\\n\\n        supply = totalSupply;\\n        for (uint256 i = 1; i < rewardTokens.length; i++) {\\n            token = rewardTokens[i];\\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\n            if (account != address(0)) {\\n                rewards[account][token] = _earned(account, token, balance, supply);\\n                userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event RewardTokenAdded(address indexed rewardTokenAddress);\\n    event RewardDistributorApproved(address indexed rewardAddress, address indexed distributor, bool approved);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\\n    event Recovered(address token, uint256 amount);\\n\\n    function _become(StrikeStakingProxy stakingProxy) public {\\n        require(msg.sender == stakingProxy.admin(), \\\"only staking proxy admin can change brains\\\");\\n        stakingProxy._acceptImplementation();\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure\\n      */\\n    function _acceptAdminInImplementation() public {\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/StrikeStakingProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\nimport \\\"./StrikeStakingStorage.sol\\\";\\n\\n/**\\n * @title StrikeStakingProxy\\n * @dev Storage for the strike staking is at this address, while execution is delegated to the `strikeStakingImplementation`.\\n */\\ncontract StrikeStakingProxy is StrikeStakingProxyAdminStorage {\\n\\n    /**\\n      * @notice Emitted when pendingStrikeStakingImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingStrikeStakingImplementation is accepted, which means strikeStaking implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public {\\n        require(msg.sender == admin, \\\"SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\\");\\n\\n        address oldPendingImplementation = pendingStrikeStakingImplementation;\\n\\n        pendingStrikeStakingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingStrikeStakingImplementation);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of strikeStaking. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    */\\n    function _acceptImplementation() public {\\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\\n        require(msg.sender == pendingStrikeStakingImplementation && pendingStrikeStakingImplementation != address(0), \\\"ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = strikeStakingImplementation;\\n        address oldPendingImplementation = pendingStrikeStakingImplementation;\\n\\n        strikeStakingImplementation = pendingStrikeStakingImplementation;\\n\\n        pendingStrikeStakingImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, strikeStakingImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingStrikeStakingImplementation);\\n    }\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public {\\n        require(msg.sender == admin, \\\"SET_PENDING_ADMIN_OWNER_CHECK\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public {\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = strikeStakingImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/StrikeStakingStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract StrikeStakingProxyAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of StrikeStakingProxy\\n    */\\n    address public strikeStakingImplementation;\\n\\n    /**\\n    * @notice Pending brains of StrikeStakingProxy\\n    */\\n    address public pendingStrikeStakingImplementation;\\n}\\n\\ncontract StrikeStakingG1Storage is StrikeStakingProxyAdminStorage {\\n}\\n\"\r\n    },\r\n    \"contracts/Lib/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RewardDistributorApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUART\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHOLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdminInImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract StrikeStakingProxy\",\"name\":\"stakingProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StrikeStaking.RewardData[]\",\"name\":\"_rewards\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StrikeStaking.LockedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StrikeStaking.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingStrikeStakingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeBlacklistedLocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strikeStakingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawExpiredLocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrikeStaking", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}