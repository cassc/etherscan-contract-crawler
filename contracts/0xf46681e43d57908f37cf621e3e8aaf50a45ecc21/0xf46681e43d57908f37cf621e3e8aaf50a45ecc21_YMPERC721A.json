{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"closedsea/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\\n/// mandatory on-chain royalty enforcement in order for new collections to\\n/// receive royalties.\\n/// For more information, see:\\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\\nabstract contract OperatorFilterer {\\n    /// @dev The default OpenSea operator blocklist subscription.\\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\\n    /// @dev The OpenSea operator filter registry.\\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\\n\\n    /// @dev Registers the current contract to OpenSea's operator filter,\\n    /// and subscribe to the default OpenSea operator blocklist.\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\n    function _registerForOperatorFiltering() internal virtual {\\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\\n    }\\n\\n    /// @dev Registers the current contract to OpenSea's operator filter.\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        virtual\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\\n\\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\\n\\n            for {} iszero(subscribe) {} {\\n                if iszero(subscriptionOrRegistrantToCopy) {\\n                    functionSelector := 0x4420e486 // `register(address)`.\\n                    break\\n                }\\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\\n                break\\n            }\\n            // Store the function selector.\\n            mstore(0x00, shl(224, functionSelector))\\n            // Store the `address(this)`.\\n            mstore(0x04, address())\\n            // Store the `subscriptionOrRegistrantToCopy`.\\n            mstore(0x24, subscriptionOrRegistrantToCopy)\\n            // Register into the registry.\\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\\n                // If the function selector has not been overwritten,\\n                // it is an out-of-gas error.\\n                if eq(shr(224, mload(0x00)), functionSelector) {\\n                    // To prevent gas under-estimation.\\n                    revert(0, 0)\\n                }\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\\n    modifier onlyAllowedOperator(address from) virtual {\\n        if (from != msg.sender) {\\n            if (!_isPriorityOperator(msg.sender)) {\\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to guard a function from approving a blocked operator..\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        if (!_isPriorityOperator(operator)) {\\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\\n    function _revertIfBlocked(address operator) private view {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Store the function selector of `isOperatorAllowed(address,address)`,\\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xc6171134001122334455)\\n            // Store the `address(this)`.\\n            mstore(0x1a, address())\\n            // Store the `operator`.\\n            mstore(0x3a, operator)\\n\\n            // `isOperatorAllowed` always returns true if it does not revert.\\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\\n                // Bubble up the revert if the staticcall reverts.\\n                returndatacopy(0x00, 0x00, returndatasize())\\n                revert(0x00, returndatasize())\\n            }\\n\\n            // We'll skip checking if `from` is inside the blacklist.\\n            // Even though that can block transferring out of wrapper contracts,\\n            // we don't want tokens to be stuck.\\n\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev For deriving contracts to override, so that operator filtering\\n    /// can be turned on / off.\\n    /// Returns true by default.\\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\\n    /// skip operator filtering, helping users save gas.\\n    /// Returns false for all inputs by default.\\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC4906.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./IERC4906.sol\\\";\\r\\ncontract ERC4906 is ERC165, IERC4906 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return( interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId) );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IERC4906.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\ninterface IERC4906 {\\r\\n    /// @dev This event emits when the metadata of a token is changed.\\r\\n    /// So that the third-party platforms such as NFT market could\\r\\n    /// timely update the images and related attributes of the NFT.\\r\\n    event MetadataUpdate(uint256 _tokenId);\\r\\n\\r\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\r\\n    /// So that the third-party platforms such as NFT market could\\r\\n    /// timely update the images and related attributes of the NFTs.    \\r\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MGYERC721A.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"erc721a/contracts/extensions/ERC4907A.sol\\\";\\r\\nimport \\\"closedsea/src/OperatorFilterer.sol\\\";\\r\\nimport \\\"./MGYREWARD.sol\\\";\\r\\nimport \\\"./ERC4906.sol\\\";\\r\\n\\r\\ncontract MGYERC721A is Ownable,ERC4907A, ReentrancyGuard, ERC2981,OperatorFilterer,ERC4906{\\r\\n\\r\\n  //Project Settings\\r\\n  uint256 public wlMintPrice;//wl.price.\\r\\n  uint256 public wlMintPrice1;//wl1.price.\\r\\n  uint256 public wlMintPrice2;//wl2.price.\\r\\n  uint256 public psMintPrice;//publicSale. price.\\r\\n  uint256 public bmMintPrice;//Burn&MintSale. price.\\r\\n  uint256 public hmMintPrice;//Hold&MintSale. price.\\r\\n  uint256 public maxMintsCapPerWL;//WhitelistSale.max mint cap per wallet.\\r\\n  uint256 public maxMintsPerPS;//publicSale.max mint num per wallet.\\r\\n  uint256 public maxMintsPerBM;//Burn&MintSale.max mint num per wallet.\\r\\n  uint256 public maxMintsPerHM;//Hold&MintSale.max mint num per wallet.\\r\\n  uint256 public otherContractCount;//Hold(burn)&MintSale must hold otherContract count.\\r\\n  uint256 public otherContractCountGenesis;//burn&MintSale must hold otherContractGenesis count.\\r\\n  \\r\\n  uint256 public maxSupply;//max supply\\r\\n  address payable internal _withdrawWallet;//withdraw wallet\\r\\n  bool public isSBTEnabled;//SBT(can not transfer.only owner) mode enable.\\r\\n\\r\\n  //URI\\r\\n  mapping(uint256 => string) internal _revealUri;//by Season\\r\\n  mapping(uint256 => string) internal _baseTokenURI;//by Season\\r\\n  //flags\\r\\n  bool public isWlEnabled;//WL enable.\\r\\n  mapping(uint256 => bool) public isWlNumDisabled;//WL,1,2 disable.\\r\\n  bool public isPsEnabled;//PublicSale enable.\\r\\n  bool public isBmEnabled;//Burn&MintSale enable.\\r\\n  bool public isHmEnabled;//Hold&MintSale enable.\\r\\n  bool public isStakingEnabled;//Staking enable.\\r\\n  mapping(uint256 => bool) internal _isRevealed;//reveal enable.by Season.\\r\\n  //mint records.\\r\\n  mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal _wlMinted;//wl.minted num by wallet.by Season.by reset index\\r\\n  mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal _wlMinted1;//wl1.minted num by wallet.by Season.by reset index\\r\\n  mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal _wlMinted2;//wl2.minted num by wallet.by Season.by reset index\\r\\n  mapping(uint256 => mapping(address => uint256)) internal _psMinted;//PublicSale.mint num by wallet.by Season.\\r\\n  mapping(uint256 => mapping(address => uint256)) internal _bmMinted;//Burn&MintSale.mint num by wallet.by Season.\\r\\n  mapping(uint256 => mapping(address => uint256)) internal _hmMinted;//Hold&MintSale.mint num by wallet.by Season.\\r\\n  mapping(uint256 => mapping(uint256 => bool)) internal _otherTokenidUsed;//Hold&MintSale.otherCOntract's tokenid used .by Season.\\r\\n  uint256 internal _wlResetIndex;   //_wlMinted value reset index.\\r\\n\\r\\n  //Season value.\\r\\n  uint256 internal _seasonCounter;   //Season Counter.\\r\\n  mapping(uint256 => uint256) public seasonStartTokenId;//Start tokenid by Season.\\r\\n\\r\\n  //contract status.for UI/UX frontend.\\r\\n  uint256 internal _contractStatus;\\r\\n\\r\\n  //merkleRoot\\r\\n  bytes32 internal _merkleRoot;//whitelist\\r\\n  bytes32 internal _merkleRoot1;//whitelist1\\r\\n  bytes32 internal _merkleRoot2;//whitelist2\\r\\n  //custom token uri\\r\\n  mapping(uint256 => string) internal _customTokenURI;//custom tokenURI by tokenid\\r\\n  //metadata file extention\\r\\n  string internal _extension;\\r\\n  //otherContract\\r\\n  address public otherContract;//with Burn&MintSale or Hold&Mint.\\r\\n  MGYERC721A internal _otherContractFactory;//otherContract's factory\\r\\n  address public otherContractGenesis;//with Burn&MintSaleWithGenesis.\\r\\n  MGYERC721A internal _otherContractGenesisFactory;//otherContractGenesis's factory\\r\\n  //staking\\r\\n  mapping(uint256 => uint256) internal _stakingStartedTimestamp; // tokenId -> staking start time (0 = not staking).\\r\\n  mapping(uint256 => uint256) internal _stakingTotalTime; // tokenId -> cumulative staking time, does not include current time if staking\\r\\n  mapping(uint256 => uint256) internal _claimedLastTimestamp; // tokenId -> last claimed timestamp\\r\\n  uint256 internal constant NULL_STAKED = 0;\\r\\n  address public rewardContract;//reward contract address\\r\\n  MGYREWARD internal _rewardContractFactory;//reward Contract's factory\\r\\n  uint256 public stakingStartTimestamp;//staking start timestamp\\r\\n  uint256 public stakingEndTimestamp;//staking end timestamp\\r\\n  //Opensea Filter\\r\\n  bool public operatorFilteringEnabled;\\r\\n\\r\\n  constructor (\\r\\n      string memory _name,\\r\\n      string memory _symbol\\r\\n  ) ERC721A (_name,_symbol) {\\r\\n    seasonStartTokenId[_seasonCounter] = _startTokenId();\\r\\n    _extension = \\\"\\\";\\r\\n    _registerForOperatorFiltering();\\r\\n  }\\r\\n  //start from 1.adjust for bueno.\\r\\n  function _startTokenId() internal view virtual override returns (uint256) {\\r\\n        return 1;\\r\\n  }\\r\\n  //set Default Royalty._feeNumerator 500 = 5% Royalty\\r\\n  function setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external virtual onlyOwner {\\r\\n      _setDefaultRoyalty(_receiver, _feeNumerator);\\r\\n  }\\r\\n  //for ERC2981,ERC721A.ERC4907A,ERC4906\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC4907A, ERC2981, ERC4906) returns (bool) {\\r\\n    return(\\r\\n      ERC721A.supportsInterface(interfaceId) || \\r\\n      ERC4907A.supportsInterface(interfaceId) ||\\r\\n      ERC2981.supportsInterface(interfaceId) ||\\r\\n      ERC4906.supportsInterface(interfaceId) \\r\\n    );\\r\\n  }\\r\\n  //for ERC2981 Opensea\\r\\n  function contractURI() external view virtual returns (string memory) {\\r\\n        return _formatContractURI();\\r\\n  }\\r\\n  //make contractURI\\r\\n  function _formatContractURI() internal view returns (string memory) {\\r\\n    (address receiver, uint256 royaltyFraction) = royaltyInfo(0,_feeDenominator());//tokenid=0\\r\\n    return string(\\r\\n      abi.encodePacked(\\r\\n        \\\"data:application/json;base64,\\\",\\r\\n        Base64.encode(\\r\\n          bytes(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"seller_fee_basis_points\\\":', Strings.toString(royaltyFraction),\\r\\n                ', \\\"fee_recipient\\\":\\\"', Strings.toHexString(uint256(uint160(receiver)), 20), '\\\"}'\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n  //set owner's wallet.withdraw to this wallet.only owner.\\r\\n  function setWithdrawWallet(address _owner) external virtual onlyOwner {\\r\\n    _withdrawWallet = payable(_owner);\\r\\n  }\\r\\n\\r\\n  //set maxSupply.only owner.\\r\\n  function setMaxSupply(uint256 _maxSupply) external virtual onlyOwner {\\r\\n    require(totalSupply() <= _maxSupply, \\\"Lower than _currentIndex.\\\");\\r\\n    maxSupply = _maxSupply;\\r\\n  }\\r\\n  //set wl price.only owner.\\r\\n  function setWlPrice(uint256 newPrice) external virtual onlyOwner {\\r\\n    wlMintPrice = newPrice;\\r\\n  }\\r\\n  //set wl1 price.only owner.\\r\\n  function setWlPrice1(uint256 newPrice) external virtual onlyOwner {\\r\\n    wlMintPrice1 = newPrice;\\r\\n  }\\r\\n  //set wl2 price.only owner.\\r\\n  function setWlPrice2(uint256 newPrice) external virtual onlyOwner {\\r\\n    wlMintPrice2 = newPrice;\\r\\n  }\\r\\n  //set public Sale price.only owner.\\r\\n  function setPsPrice(uint256 newPrice) external virtual onlyOwner {\\r\\n    psMintPrice = newPrice;\\r\\n  }\\r\\n  //set Burn&MintSale price.only owner.\\r\\n  function setBmPrice(uint256 newPrice) external virtual onlyOwner {\\r\\n    bmMintPrice = newPrice;\\r\\n  }\\r\\n  //set Hold&MintSale price.only owner.\\r\\n  function setHmPrice(uint256 newPrice) external virtual onlyOwner {\\r\\n    hmMintPrice = newPrice;\\r\\n  }\\r\\n  //set reveal.only owner.current season.\\r\\n  function setReveal(bool bool_) external virtual onlyOwner {\\r\\n    _isRevealed[_seasonCounter] = bool_;\\r\\n  }\\r\\n  //set reveal.only owner.by season.\\r\\n  function setRevealBySeason(bool bool_,uint256 _season) external virtual onlyOwner {\\r\\n    _isRevealed[_season] = bool_;\\r\\n  }\\r\\n\\r\\n  //return _isRevealed.current season.\\r\\n  function isRevealed() external view virtual returns (bool){\\r\\n    return _isRevealed[_seasonCounter];\\r\\n  }\\r\\n  //return _isRevealed.by season.\\r\\n  function isRevealedBySeason(uint256 _season) external view virtual returns (bool){\\r\\n    return _isRevealed[_season];\\r\\n  }\\r\\n\\r\\n  //return _wlMinted.current season.\\r\\n  function wlMinted(address _address) external view virtual returns (uint256){\\r\\n    return _wlMinted[_seasonCounter][_address][_wlResetIndex];\\r\\n  }\\r\\n  //return _wlMinted.by season.\\r\\n  function wlMintedBySeason(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _wlMinted[_season][_address][_wlResetIndex];\\r\\n  }\\r\\n  //return _wlMinted.current season.\\r\\n  function wlMinted1(address _address) external view virtual returns (uint256){\\r\\n    return _wlMinted1[_seasonCounter][_address][_wlResetIndex];\\r\\n  }\\r\\n  //return _wlMinted.by season.\\r\\n  function wlMintedBySeason1(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _wlMinted1[_season][_address][_wlResetIndex];\\r\\n  }\\r\\n  //return _wlMinted.current season.\\r\\n  function wlMinted2(address _address) external view virtual returns (uint256){\\r\\n    return _wlMinted2[_seasonCounter][_address][_wlResetIndex];\\r\\n  }\\r\\n  //return _wlMinted.by season.\\r\\n  function wlMintedBySeason2(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _wlMinted2[_season][_address][_wlResetIndex];\\r\\n  }\\r\\n\\r\\n  //return _psMinted.current season.\\r\\n  function psMinted(address _address) external view virtual returns (uint256){\\r\\n    return _psMinted[_seasonCounter][_address];\\r\\n  }\\r\\n  //return _psMinted.by season.\\r\\n  function psMintedBySeason(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _psMinted[_season][_address];\\r\\n  }\\r\\n\\r\\n  //return _bmMinted.current season.\\r\\n  function bmMinted(address _address) external view virtual returns (uint256){\\r\\n    return _bmMinted[_seasonCounter][_address];\\r\\n  }\\r\\n  //return _bmMinted.by season.\\r\\n  function bmMintedBySeason(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _bmMinted[_season][_address];\\r\\n  }\\r\\n\\r\\n  //return _hmMinted.current season.\\r\\n  function hmMinted(address _address) external view virtual returns (uint256){\\r\\n    return _hmMinted[_seasonCounter][_address];\\r\\n  }\\r\\n  //return _hmMinted.by season.\\r\\n  function hmMintedBySeason(address _address,uint256 _season) external view virtual returns (uint256){\\r\\n    return _hmMinted[_season][_address];\\r\\n  }\\r\\n\\r\\n  //set WhitelistSale's max mint Cap num.only owner.\\r\\n  function setWlMaxMintsCap(uint256 _max) external virtual onlyOwner {\\r\\n    maxMintsCapPerWL = _max;\\r\\n  }\\r\\n  //set PublicSale's max mint num.only owner.\\r\\n  function setPsMaxMints(uint256 _max) external virtual onlyOwner {\\r\\n    maxMintsPerPS = _max;\\r\\n  }\\r\\n  //set Burn&MintSale's max mint num.only owner.\\r\\n  function setBmMaxMints(uint256 _max) external virtual onlyOwner {\\r\\n    maxMintsPerBM = _max;\\r\\n  }\\r\\n  //set Hold&MintSale's max mint num.only owner.\\r\\n  function setHmMaxMints(uint256 _max) external virtual onlyOwner {\\r\\n    maxMintsPerHM = _max;\\r\\n  }\\r\\n  //set otherContract count with Hold(burn)&Mint.only owner.\\r\\n  function setOtherContractCount(uint256 _count) external virtual onlyOwner {\\r\\n    otherContractCount = _count;\\r\\n  }\\r\\n  //set _otherTokenidUsed with Hold&Mint.only owner.\\r\\n  function setOtherTokenidUsed(uint256 _tokenId,bool bool_) external virtual onlyOwner {\\r\\n    require(_otherContractFactory.ownerOf(_tokenId) != address(0), \\\"nonexistent token\\\");\\r\\n    _otherTokenidUsed[_seasonCounter][_tokenId] = bool_;\\r\\n  }\\r\\n  //set _otherTokenidUsed with Hold&Mint by season .only owner.\\r\\n  function setOtherTokenidUsedBySeason(uint256 _tokenId,bool bool_,uint256 _season) external virtual onlyOwner {\\r\\n    require(_otherContractFactory.ownerOf(_tokenId) != address(0), \\\"nonexistent token\\\");\\r\\n    _otherTokenidUsed[_season][_tokenId] = bool_;\\r\\n  }\\r\\n  //return _otherTokenidUsed\\r\\n  function getOtherTokenidUsed(uint256 _tokenId) external view virtual returns (bool){\\r\\n    return _otherTokenidUsed[_seasonCounter][_tokenId];\\r\\n  }\\r\\n  //return _otherTokenidUsed.by Season\\r\\n  function getOtherTokenidUsedBySeason(uint256 _tokenId,uint256 _season) external view virtual returns (bool){\\r\\n    return _otherTokenidUsed[_season][_tokenId];\\r\\n  }\\r\\n    \\r\\n  //set WLsale.only owner.\\r\\n  function setWhitelistSale(bool bool_) external virtual onlyOwner {\\r\\n    isWlEnabled = bool_;\\r\\n  }\\r\\n  //set disable WLsale.only owner.\\r\\n  function setDisabledPartWhitelistSale(uint256 _wlNum,bool bool_) external virtual onlyOwner {\\r\\n    isWlNumDisabled[_wlNum] = bool_;\\r\\n  }\\r\\n  //set Publicsale.only owner.\\r\\n  function setPublicSale(bool bool_) external virtual onlyOwner {\\r\\n    isPsEnabled = bool_;\\r\\n  }\\r\\n  //set Burn&MintSale.only owner.\\r\\n  function setBurnAndMintSale(bool bool_) external virtual onlyOwner {\\r\\n    isBmEnabled = bool_;\\r\\n  }\\r\\n  //set Hold&MintSale.only owner.\\r\\n  function setHoldAndMintSale(bool bool_) external virtual onlyOwner {\\r\\n    isHmEnabled = bool_;\\r\\n  }\\r\\n\\r\\n  //set MerkleRoot.only owner.\\r\\n  function setMerkleRoot(bytes32 merkleRoot_) external virtual onlyOwner {\\r\\n    _merkleRoot = merkleRoot_;\\r\\n  }\\r\\n  //set MerkleRoot.only owner.\\r\\n  function setMerkleRoot1(bytes32 merkleRoot_) external virtual onlyOwner {\\r\\n    _merkleRoot1 = merkleRoot_;\\r\\n  }\\r\\n  //set MerkleRoot.only owner.\\r\\n  function setMerkleRoot2(bytes32 merkleRoot_) external virtual onlyOwner {\\r\\n    _merkleRoot2 = merkleRoot_;\\r\\n  }\\r\\n  //isWhitelisted\\r\\n  function isWhitelisted(address address_, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) external view virtual returns (bool) {\\r\\n    (bool ret,) = _isWhitelisted(address_,maxmint_,proof_,proof1_,proof2_);\\r\\n    return(ret);\\r\\n  }\\r\\n  function _isWhitelisted(address address_,uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) internal view  returns (bool,uint256) {\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot,proof_)) return(true,0); \\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot1,proof1_)) return(true,1); \\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot2,proof2_)) return(true,2); \\r\\n    return(false,9999);\\r\\n  }\\r\\n  //get WL maxMints.\\r\\n  function getWhitelistedMaxMints(address address_, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) external view virtual returns (uint256) {\\r\\n    return(_getWhitelistedMaxMints(address_, maxmint_, proof_, proof1_, proof2_));\\r\\n  }\\r\\n  function _getWhitelistedMaxMints(address address_, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) internal view  returns (uint256) {\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot,proof_)) return maxmint_;\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot1,proof1_)) return maxmint_;\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot2,proof2_)) return maxmint_;\\r\\n    return 0;\\r\\n  }\\r\\n  //have you WL?\\r\\n  function hasWhitelistedOneWL(address address_,uint256 maxmint_, bytes32[] memory proof_) external view virtual returns (bool) {\\r\\n    return(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot,proof_));\\r\\n  }\\r\\n  function _hasWhitelistedOneWL(address address_,uint256 maxmint_,bytes32 root_, bytes32[] memory proof_) internal view returns (bool) {\\r\\n    if(maxmint_ > maxMintsCapPerWL)return false;//check exceed maxmint cap\\r\\n    bytes32 _leaf = keccak256(abi.encodePacked(address_,maxmint_));\\r\\n    return(root_ != 0x0 && MerkleProof.verify(proof_,root_,_leaf));\\r\\n  }\\r\\n  //have you WL1?\\r\\n  function hasWhitelistedOneWL1(address address_,uint256 maxmint_,bytes32[] memory proof_) external view virtual returns (bool) {\\r\\n    return(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot1,proof_));\\r\\n  }\\r\\n  //have you WL2?\\r\\n  function hasWhitelistedOneWL2(address address_,uint256 maxmint_,bytes32[] memory proof_) external view virtual returns (bool) {\\r\\n    return(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot2,proof_));\\r\\n  }\\r\\n  //get WL price.\\r\\n  function getWhitelistedPrice(address address_, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) external view virtual returns (uint256) {\\r\\n    return(_getWhitelistedPrice(address_, maxmint_, proof_, proof1_, proof2_));\\r\\n  }\\r\\n  function _getWhitelistedPrice(address address_, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) internal view  returns (uint256) {\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot,proof_)) return wlMintPrice;\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot1,proof1_)) return wlMintPrice1;\\r\\n    if(_hasWhitelistedOneWL(address_,maxmint_,_merkleRoot2,proof2_)) return wlMintPrice2;\\r\\n    return 9999 ether;\\r\\n  }\\r\\n\\r\\n  //set SBT mode Enable. only owner.Noone can transfer. only contract owner can transfer.\\r\\n  function setSBTMode(bool bool_) external virtual onlyOwner {\\r\\n    isSBTEnabled = bool_;\\r\\n  }\\r\\n  //override for SBT mode.only owner can transfer. or mint or burn.\\r\\n  function _beforeTokenTransfers(address from_,address to_,uint256 startTokenId_,uint256 quantity_) internal virtual override {\\r\\n    require(!isSBTEnabled || msg.sender == owner() || from_ == address(0) || to_ == address(0) ,\\\"SBT mode Enabled: token transfer while paused.\\\");\\r\\n\\r\\n    //check tokenid transfer\\r\\n    for (uint256 tokenId = startTokenId_; tokenId < startTokenId_ + quantity_; tokenId++) {\\r\\n      //check staking\\r\\n      require(!isStakingEnabled || _stakingStartedTimestamp[tokenId] == NULL_STAKED,\\\"Staking now.: token transfer while paused.\\\");\\r\\n\\r\\n      //unstake if staking\\r\\n      if (_stakingStartedTimestamp[tokenId] != NULL_STAKED) {\\r\\n        //accum current time\\r\\n        uint256 deltaTime = block.timestamp - _stakingStartedTimestamp[tokenId];\\r\\n        _stakingTotalTime[tokenId] += deltaTime;\\r\\n        //no longer staking\\r\\n        _stakingStartedTimestamp[tokenId] = NULL_STAKED;\\r\\n        _claimedLastTimestamp[tokenId] = NULL_STAKED;\\r\\n\\r\\n      }\\r\\n    }\\r\\n    super._beforeTokenTransfers(from_, to_, startTokenId_, quantity_);\\r\\n  }\\r\\n\\r\\n  //set HiddenBaseURI.only owner.current season.\\r\\n  function setHiddenBaseURI(string memory uri_) external virtual onlyOwner {\\r\\n    _revealUri[_seasonCounter] = uri_;\\r\\n  }\\r\\n  //set HiddenBaseURI.only owner.by season.\\r\\n  function setHiddenBaseURIBySeason(string memory uri_,uint256 _season) external virtual onlyOwner {\\r\\n    _revealUri[_season] = uri_;\\r\\n  }\\r\\n\\r\\n  //return _nextTokenId\\r\\n  function getCurrentIndex() external view virtual returns (uint256){\\r\\n    return _nextTokenId();\\r\\n  }\\r\\n  //return status.\\r\\n  function getContractStatus() external view virtual returns (uint256){\\r\\n    return _contractStatus;\\r\\n  }\\r\\n  //set status.only owner.\\r\\n  function setContractStatus(uint256 status_) external virtual onlyOwner {\\r\\n    _contractStatus = status_;\\r\\n  }\\r\\n  //return wlResetIndex.\\r\\n  function getWlResetIndex() external view virtual returns (uint256){\\r\\n    return _wlResetIndex;\\r\\n  }\\r\\n  //reset _wlMinted.only owner.\\r\\n  function resetWlMinted() external virtual onlyOwner {\\r\\n    _wlResetIndex++;\\r\\n  }\\r\\n  //return Season.\\r\\n  function getSeason() external view virtual returns (uint256){\\r\\n    return _seasonCounter;\\r\\n  }\\r\\n  //increment next Season.only owner.\\r\\n  function incrementSeason() external virtual onlyOwner {\\r\\n    //pause all sale\\r\\n    isWlEnabled = false;\\r\\n    isPsEnabled = false;\\r\\n    isBmEnabled = false;\\r\\n    isHmEnabled = false;\\r\\n    //reset tree\\r\\n    _merkleRoot = 0x0;\\r\\n    _merkleRoot1 = 0x0;\\r\\n    _merkleRoot2 = 0x0;\\r\\n    //increment season\\r\\n    _seasonCounter++;\\r\\n    seasonStartTokenId[_seasonCounter] = _nextTokenId();//set start tonkenid for next Season.\\r\\n  }\\r\\n  //return season by tokenid.\\r\\n  function getSeasonByTokenId(uint256 _tokenId) external view virtual returns(uint256){\\r\\n    return _getSeasonByTokenId(_tokenId);\\r\\n  }\\r\\n  //return season by tokenid.\\r\\n  function _getSeasonByTokenId(uint256 _tokenId) internal view returns(uint256){\\r\\n    require(_exists(_tokenId), \\\"Season query for nonexistent token\\\");\\r\\n    uint256 nextStartTokenId = 10000000000;//start tokenid for next season.set big tokenid.\\r\\n    for (uint256 i = _seasonCounter; i >= 0; i--) {\\r\\n      if(seasonStartTokenId[i] <= _tokenId && _tokenId < nextStartTokenId) return i;\\r\\n      nextStartTokenId = seasonStartTokenId[i];\\r\\n    }\\r\\n    return 0;//can not reach here.\\r\\n  }\\r\\n\\r\\n  //set BaseURI at after reveal. only owner.current season.\\r\\n  function setBaseURI(string memory uri_) external virtual onlyOwner {\\r\\n    _baseTokenURI[_seasonCounter] = uri_;\\r\\n  }\\r\\n  //set BaseURI at after reveal. only owner.by season.\\r\\n  function setBaseURIBySeason(string memory uri_,uint256 _season) external virtual onlyOwner {\\r\\n    _baseTokenURI[_season] = uri_;\\r\\n  }\\r\\n\\r\\n  //set custom tokenURI at after reveal. only owner.\\r\\n  function setCustomTokenURI(uint256 _tokenId,string memory uri_) external virtual onlyOwner {\\r\\n    require(_exists(_tokenId), \\\"URI query for nonexistent token\\\");\\r\\n    _customTokenURI[_tokenId] = uri_;\\r\\n  }\\r\\n  function getCustomTokenURI(uint256 _tokenId) external view virtual returns (string memory) {\\r\\n    require(_exists(_tokenId), \\\"URI query for nonexistent token\\\");\\r\\n    return(_customTokenURI[_tokenId]);\\r\\n  }\\r\\n  //retuen BaseURI.internal.current season.\\r\\n  function _currentBaseURI(uint256 _season) internal view returns (string memory){\\r\\n    return _baseTokenURI[_season];\\r\\n  }\\r\\n  function tokenURI(uint256 _tokenId) public view virtual override(ERC721A,IERC721A) returns (string memory) {\\r\\n    require(_exists(_tokenId), \\\"URI query for nonexistent token\\\");\\r\\n    uint256 _season = _getSeasonByTokenId(_tokenId);//get season.\\r\\n    if(_isRevealed[_season] == false) return _revealUri[_season];\\r\\n    if(bytes(_customTokenURI[_tokenId]).length != 0) return _customTokenURI[_tokenId];//custom URI\\r\\n    return string(abi.encodePacked(_currentBaseURI(_season), Strings.toString(_tokenId), _extension));\\r\\n  }\\r\\n\\r\\n  //common mint.transfer to _address.\\r\\n  function _commonMint(address _address,uint256 _amount) internal virtual { \\r\\n    require((_amount + totalSupply()) <= (maxSupply), \\\"No more NFTs\\\");\\r\\n\\r\\n    _safeMint(_address, _amount);\\r\\n  }\\r\\n  //owner mint.transfer to _address.only owner.\\r\\n  function ownerMint(uint256 _amount, address _address) external virtual onlyOwner {\\r\\n    _commonMint(_address, _amount);\\r\\n  }\\r\\n  //WL mint.\\r\\n  function whitelistMint(uint256 _amount, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) external payable virtual nonReentrant {\\r\\n    uint256 wlNum = _whitelistMintCheck(_amount, maxmint_, proof_, proof1_, proof2_);\\r\\n    _whitelistMintCheckValue(_amount, maxmint_, proof_, proof1_, proof2_);\\r\\n    unchecked{\\r\\n      if(wlNum == 0)      _wlMinted[_seasonCounter][msg.sender][_wlResetIndex] += _amount;\\r\\n      else if(wlNum == 1) _wlMinted1[_seasonCounter][msg.sender][_wlResetIndex] += _amount;\\r\\n      else                _wlMinted2[_seasonCounter][msg.sender][_wlResetIndex] += _amount;\\r\\n    }\\r\\n    _commonMint(msg.sender, _amount);\\r\\n  }\\r\\n  //WL check.except value.\\r\\n  function _whitelistMintCheck(uint256 _amount, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) internal virtual returns(uint256) {\\r\\n    require(isWlEnabled, \\\"whitelistMint is Paused\\\");\\r\\n    (bool isWL,uint256 wlNum) = _isWhitelisted(msg.sender, maxmint_,proof_, proof1_, proof2_);\\r\\n    require(isWL, \\\"You are not whitelisted!\\\");\\r\\n    require(!isWlNumDisabled[wlNum],\\\"Now part of whitelist disabled.\\\");\\r\\n    uint256 maxMints = _getWhitelistedMaxMints(msg.sender, maxmint_, proof_, proof1_, proof2_);\\r\\n    require(maxMints >= _amount, \\\"whitelistMint: Over max mints per wallet\\\");\\r\\n    if(wlNum == 0)      require(maxMints >= _wlMinted[_seasonCounter][msg.sender][_wlResetIndex] + _amount, \\\"You have no whitelistMint left\\\");\\r\\n    else if(wlNum == 1) require(maxMints >= _wlMinted1[_seasonCounter][msg.sender][_wlResetIndex] + _amount, \\\"You have no whitelistMint1 left\\\");\\r\\n    else                require(maxMints >= _wlMinted2[_seasonCounter][msg.sender][_wlResetIndex] + _amount, \\\"You have no whitelistMint2 left\\\");\\r\\n    return (wlNum);\\r\\n  }\\r\\n  //WL check.Only Value.for optional free mint.\\r\\n  function _whitelistMintCheckValue(uint256 _amount, uint256 maxmint_, bytes32[] memory proof_, bytes32[] memory proof1_, bytes32[] memory proof2_) internal virtual {\\r\\n    uint256 price = _getWhitelistedPrice(msg.sender, maxmint_, proof_, proof1_, proof2_);\\r\\n    require(msg.value == price * _amount, \\\"ETH value is not correct\\\");\\r\\n  }\\r\\n  //Public mint.\\r\\n  function publicMint(uint256 _amount) external payable virtual nonReentrant {\\r\\n    require(isPsEnabled, \\\"publicMint is Paused\\\");\\r\\n    require(maxMintsPerPS >= _amount, \\\"publicMint: Over max mints per wallet\\\");\\r\\n    require(maxMintsPerPS >= _psMinted[_seasonCounter][msg.sender] + _amount, \\\"You have no publicMint left\\\");\\r\\n    _publicMintCheckValue(_amount);\\r\\n    require(tx.origin == msg.sender,\\\"publicMint: Caller is contract.\\\");\\r\\n\\r\\n    unchecked{\\r\\n      _psMinted[_seasonCounter][msg.sender] += _amount;\\r\\n    }\\r\\n    _commonMint(msg.sender, _amount);\\r\\n  }\\r\\n  //Public check.Only Value.for optional free mint.\\r\\n  function _publicMintCheckValue(uint256 _amount) internal virtual {\\r\\n    require(msg.value == psMintPrice * _amount, \\\"ETH value is not correct\\\");\\r\\n  }\\r\\n  //set otherContract.only owner\\r\\n  function setOtherContract(address _addr) external virtual onlyOwner {\\r\\n    otherContract = _addr;\\r\\n    _otherContractFactory = MGYERC721A(otherContract);\\r\\n  }\\r\\n  //Burn&MintSale mint.\\r\\n  function _burnAndMint(uint256 _amount,uint256[] calldata _tokenids) internal virtual {\\r\\n    require(isBmEnabled, \\\"Burn&MintSale is Paused\\\");\\r\\n    require(maxMintsPerBM >= _amount, \\\"Burn&MintSale: Over max mints per wallet\\\");\\r\\n    require(maxMintsPerBM >= _bmMinted[_seasonCounter][msg.sender] + _amount, \\\"You have no Burn&MintSale left\\\");\\r\\n    _burnAndMintCheckValue(_amount);\\r\\n    require(otherContract != address(0),\\\"not set otherContract.\\\");\\r\\n    require(otherContractCount != 0 ,\\\"not set otherContractCount.\\\");\\r\\n    require( _tokenids.length == (otherContractCount * _amount),\\\"amount must be multiple of other contract count.\\\");\\r\\n    //check tokens owner , used.\\r\\n    for (uint256 i = 0; i < _tokenids.length; i++) {\\r\\n      require(_otherContractFactory.ownerOf(_tokenids[i]) == msg.sender,\\\"You are not owner of this tokenid.\\\");\\r\\n      _otherContractFactory.burn(_tokenids[i]);//must approval.\\r\\n    }\\r\\n    \\r\\n    unchecked{\\r\\n      _bmMinted[_seasonCounter][msg.sender] += _amount;\\r\\n    }\\r\\n    _commonMint(msg.sender, _amount);\\r\\n  }\\r\\n  //BM check.Only Value.for optional free mint.\\r\\n  function _burnAndMintCheckValue(uint256 _amount) internal virtual {\\r\\n    require(msg.value == bmMintPrice * _amount, \\\"ETH value is not correct\\\");\\r\\n  }\\r\\n //Burn&MintSale mint. external\\r\\n  function burnAndMint(uint256 _amount,uint256[] calldata _tokenids) external payable virtual nonReentrant {\\r\\n    require(otherContractGenesis == address(0),\\\"can not set otherContractGenesis.\\\");\\r\\n    require(otherContractCountGenesis == 0 ,\\\"can not set otherContractCountGenesis.\\\");\\r\\n    _burnAndMint(_amount,_tokenids);\\r\\n  }\\r\\n  //set otherContractGenesis.only owner\\r\\n  function setOtherContractGenesis(address _addr) external virtual onlyOwner {\\r\\n    otherContractGenesis = _addr;\\r\\n    _otherContractGenesisFactory = MGYERC721A(otherContractGenesis);\\r\\n  }\\r\\n  //set otherContractGenesis count with burn&Mint.only owner.\\r\\n  function setOtherContractCountGenesis(uint256 _count) external virtual onlyOwner {\\r\\n    otherContractCountGenesis = _count;\\r\\n  }\\r\\n  //Burn&MintSale with GenesisNFT mint.\\r\\n  function burnAndMintWithGenesis(uint256 _amount,uint256[] calldata _tokenids,uint256[] calldata _tokenidGenesis) external payable virtual nonReentrant {\\r\\n    require(otherContractGenesis != address(0),\\\"not set otherContractGenesis.\\\");\\r\\n    require(otherContractCountGenesis > 0 ,\\\"not set otherContractCountGenesis.\\\");\\r\\n    require(_tokenidGenesis.length >= otherContractCountGenesis,\\\"You have not enough Genesis.\\\");\\r\\n    for (uint256 i = 0; i < _tokenidGenesis.length; i++) {\\r\\n      require(_otherContractGenesisFactory.ownerOf(_tokenidGenesis[i]) == msg.sender,\\\"You are not owner of this tokenidGenesis.\\\");\\r\\n    }\\r\\n    _burnAndMint(_amount,_tokenids);\\r\\n  }\\r\\n\\r\\n  //Hold&MintSale mint.\\r\\n  function holdAndMint(uint256 _amount,uint256[] calldata _tokenids) external payable virtual nonReentrant {\\r\\n    require(isHmEnabled, \\\"Hold&MintSale is Paused\\\");\\r\\n    require(maxMintsPerHM >= _amount, \\\"Hold&MintSale: Over max mints per wallet\\\");\\r\\n    require(maxMintsPerHM >= _hmMinted[_seasonCounter][msg.sender] + _amount, \\\"You have no Hold&MintSale left\\\");\\r\\n    _holdAndMintCheckValue(_amount);\\r\\n    require(otherContract != address(0),\\\"not set otherContract.\\\");\\r\\n    require(otherContractCount != 0 ,\\\"not set otherContractCount.\\\");\\r\\n    require( _tokenids.length == (otherContractCount * _amount),\\\"amount must be multiple of other contract count.\\\");\\r\\n    //check tokens owner , used.\\r\\n    for (uint256 i = 0; i < _tokenids.length; i++) {\\r\\n      require(_otherContractFactory.ownerOf(_tokenids[i]) == msg.sender,\\\"You are not owner of this tokenid.\\\");\\r\\n      require(!_otherTokenidUsed[_seasonCounter][_tokenids[i]] ,\\\"This other tokenid is Used.\\\");\\r\\n      _otherTokenidUsed[_seasonCounter][_tokenids[i]] = true;\\r\\n    }\\r\\n\\r\\n    unchecked{\\r\\n      _hmMinted[_seasonCounter][msg.sender] += _amount;\\r\\n    }\\r\\n    _commonMint(msg.sender, _amount);\\r\\n  }\\r\\n  //HM check.Only Value.for optional free mint.\\r\\n  function _holdAndMintCheckValue(uint256 _amount) internal virtual {\\r\\n    require(msg.value == hmMintPrice * _amount, \\\"ETH value is not correct\\\");\\r\\n  }\\r\\n\\r\\n  //burn\\r\\n  function burn(uint256 tokenId) external virtual {\\r\\n    _burn(tokenId, true);\\r\\n  }\\r\\n\\r\\n  //widraw ETH from this contract.only owner. \\r\\n  function withdraw() external payable virtual onlyOwner nonReentrant{\\r\\n    // This will payout the owner 100% of the contract balance.\\r\\n    // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n    // =============================================================================\\r\\n    bool os;\\r\\n    if(_withdrawWallet != address(0)){//if _withdrawWallet has.\\r\\n      (os, ) = payable(_withdrawWallet).call{value: address(this).balance}(\\\"\\\");\\r\\n    }else{\\r\\n      (os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n    require(os);\\r\\n    // =============================================================================\\r\\n  }\\r\\n  //return wallet owned tokenids.it used high gas and running time.\\r\\n  function walletOfOwner(address owner) external view virtual returns (uint256[] memory) {\\r\\n    //copy from tokensOfOwner in ERC721AQueryable.sol \\r\\n    unchecked {\\r\\n      uint256 tokenIdsIdx = 0;\\r\\n      address currOwnershipAddr = address(0);\\r\\n      uint256 tokenIdsLength = balanceOf(owner);\\r\\n      uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\r\\n      TokenOwnership memory ownership;\\r\\n      for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; i++) {\\r\\n        ownership = _ownershipAt(i);\\r\\n        if (ownership.burned) {\\r\\n          continue;\\r\\n        }\\r\\n        if (ownership.addr != address(0)) {\\r\\n          currOwnershipAddr = ownership.addr;\\r\\n        }\\r\\n        if (currOwnershipAddr == owner) {\\r\\n          tokenIds[tokenIdsIdx++] = i;\\r\\n        }\\r\\n      }\\r\\n      return tokenIds;\\r\\n    }\\r\\n  }\\r\\n  //set Staking enable.only owner.\\r\\n  function setStakingEnable(bool bool_) external virtual onlyOwner {\\r\\n    isStakingEnabled = bool_;\\r\\n    if(bool_){\\r\\n      stakingStartTimestamp = block.timestamp;\\r\\n      stakingEndTimestamp = NULL_STAKED;\\r\\n    }else{\\r\\n      stakingEndTimestamp = block.timestamp;\\r\\n    }\\r\\n  }\\r\\n  //get staking information.\\r\\n  function _getStakingInfo(uint256 _tokenId) internal view virtual returns (uint256 startTimestamp, uint256 currentStakingTime, uint256 totalStakingTime, bool isStaking,uint256 claimedLastTimestamp ){\\r\\n    require(_exists(_tokenId), \\\"nonexistent token\\\");\\r\\n\\r\\n    currentStakingTime = 0;\\r\\n    startTimestamp = _stakingStartedTimestamp[_tokenId];\\r\\n\\r\\n    if (startTimestamp != NULL_STAKED) {  // is staking\\r\\n      currentStakingTime = block.timestamp - startTimestamp;\\r\\n    }\\r\\n    totalStakingTime = currentStakingTime + _stakingTotalTime[_tokenId];\\r\\n    isStaking = startTimestamp != NULL_STAKED;\\r\\n    claimedLastTimestamp = _claimedLastTimestamp[_tokenId];\\r\\n  }\\r\\n  //get staking information.\\r\\n  function getStakingInfo(uint256 _tokenId) external view virtual returns (uint256 startTimestamp, uint256 currentStakingTime, uint256 totalStakingTime, bool isStaking,uint256 claimedLastTimestamp ){\\r\\n    (startTimestamp, currentStakingTime, totalStakingTime, isStaking, claimedLastTimestamp) = _getStakingInfo(_tokenId);\\r\\n  }\\r\\n  \\r\\n  //toggle staking status\\r\\n  function _toggleStaking(uint256 _tokenId) internal virtual {\\r\\n    require(ownerOf(_tokenId) == msg.sender,\\\"You are not owner of this tokenid.\\\");\\r\\n    require(_exists(_tokenId), \\\"nonexistent token\\\");\\r\\n\\r\\n    uint256 startTimestamp = _stakingStartedTimestamp[_tokenId];\\r\\n\\r\\n    if (startTimestamp == NULL_STAKED) { \\r\\n      //start staking\\r\\n      require(isStakingEnabled, \\\"Staking closed\\\");\\r\\n      _stakingStartedTimestamp[_tokenId] = block.timestamp;\\r\\n    } else { \\r\\n      //start unstaking\\r\\n      _stakingTotalTime[_tokenId] += block.timestamp - startTimestamp;\\r\\n      _stakingStartedTimestamp[_tokenId] = NULL_STAKED;\\r\\n      _claimedLastTimestamp[_tokenId] = NULL_STAKED;\\r\\n    }\\r\\n  }\\r\\n  //toggle staking status\\r\\n  function toggleStaking(uint256[] calldata _tokenIds) external virtual {\\r\\n    uint256 num = _tokenIds.length;\\r\\n\\r\\n    for (uint256 i = 0; i < num; i++) {\\r\\n      uint256 tokenId = _tokenIds[i];\\r\\n      _toggleStaking(tokenId);\\r\\n    }\\r\\n  }\\r\\n  //set rewardContract.only owner\\r\\n  function setRewardContract(address _addr) external virtual onlyOwner {\\r\\n    rewardContract = _addr;\\r\\n    _rewardContractFactory = MGYREWARD(rewardContract);\\r\\n  }\\r\\n\\r\\n  //claim reward\\r\\n  function _claimReward(uint256 _tokenId) internal virtual {\\r\\n    require(ownerOf(_tokenId) == msg.sender,\\\"You are not owner of this tokenid.\\\");\\r\\n    require(_exists(_tokenId), \\\"nonexistent token\\\");\\r\\n\\r\\n    //get staking infomation\\r\\n    (uint256 startTimestamp, uint256 currentStakingTime, uint256 totalStakingTime, bool isStaking,uint256 claimedLastTimestamp ) = _getStakingInfo(_tokenId);\\r\\n    uint256 _lastTimestamp = block.timestamp;\\r\\n    \\r\\n    _claimedLastTimestamp[_tokenId] = _lastTimestamp; //execute before claimReward().Warning for slither.\\r\\n    //call reword. other contract \\r\\n    _rewardContractFactory.claimReward(stakingStartTimestamp, stakingEndTimestamp, _tokenId, startTimestamp,  currentStakingTime,  totalStakingTime,  isStaking,  claimedLastTimestamp,  _lastTimestamp);\\r\\n\\r\\n  }\\r\\n  //claim reward\\r\\n  function claimReward(uint256[] calldata _tokenIds) external virtual nonReentrant{\\r\\n    require(isStakingEnabled, \\\"Staking closed\\\");//only staking period\\r\\n    uint256 num = _tokenIds.length;\\r\\n\\r\\n    for (uint256 i = 0; i < num; i++) {\\r\\n      uint256 tokenId = _tokenIds[i];\\r\\n      _claimReward(tokenId);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //Opensea filter\\r\\n  function setApprovalForAll(address operator, bool approved) public override(ERC721A,IERC721A) onlyAllowedOperatorApproval(operator){\\r\\n    super.setApprovalForAll(operator, approved);\\r\\n  }\\r\\n  function approve(address operator, uint256 tokenId) public payable override(ERC721A,IERC721A) onlyAllowedOperatorApproval(operator){\\r\\n    super.approve(operator, tokenId);\\r\\n  }\\r\\n  function transferFrom(address from, address to, uint256 tokenId) public payable override(ERC721A,IERC721A) onlyAllowedOperator(from){\\r\\n    super.transferFrom(from, to, tokenId);\\r\\n  }\\r\\n  function safeTransferFrom(address from, address to, uint256 tokenId) public payable override(ERC721A,IERC721A) onlyAllowedOperator(from){\\r\\n    super.safeTransferFrom(from, to, tokenId);\\r\\n  }\\r\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public payable override(ERC721A,IERC721A) onlyAllowedOperator(from){\\r\\n    super.safeTransferFrom(from, to, tokenId, data);\\r\\n  }\\r\\n  function setOperatorFilteringEnabled(bool value) public onlyOwner {\\r\\n      operatorFilteringEnabled = value;\\r\\n  }\\r\\n  function _operatorFilteringEnabled() internal view override returns (bool) {\\r\\n      return operatorFilteringEnabled;\\r\\n  }\\r\\n\\r\\n  //ERC4906\\r\\n  function metadataUpdate(uint256 _tokenId) external virtual onlyOwner {\\r\\n    emit MetadataUpdate(_tokenId);\\r\\n  }\\r\\n  function batchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId) external virtual onlyOwner {            \\r\\n    emit BatchMetadataUpdate( _fromTokenId, _toTokenId);\\r\\n  }\\r\\n  \\r\\n}\"\r\n    },\r\n    \"contracts/MGYREWARD.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./MGYERC721A.sol\\\";\\r\\n\\r\\ncontract MGYREWARD is Ownable,ReentrancyGuard{\\r\\n  address public callContract;//callable MGYERC721A address\\r\\n  MGYERC721A internal _callContractFactory;//callable Contract's factory\\r\\n\\r\\n  //set callContract.only owner\\r\\n  function setCallContract(address _callAddr) external virtual onlyOwner{\\r\\n    callContract = _callAddr;\\r\\n    _callContractFactory = MGYERC721A(callContract);\\r\\n  }\\r\\n  //execute reward\\r\\n  function _claimReward(uint256 _stakingStartTimestamp, uint256 _stakingEndTimestamp, uint256 _tokenId,uint256 _startTimestamp, uint256 _currentStakingTime, uint256 _totalStakingTime, bool _isStaking, uint256 _claimedLastTimestamp, uint256 _currentClaimedLastTimestamp) internal virtual{\\r\\n    //do reword something todo\\r\\n  }\\r\\n  //execute reward\\r\\n  function claimReward(uint256 _stakingStartTimestamp, uint256 _stakingEndTimestamp, uint256 _tokenId,uint256 _startTimestamp, uint256 _currentStakingTime, uint256 _totalStakingTime, bool _isStaking, uint256 _claimedLastTimestamp, uint256 _currentClaimedLastTimestamp) external virtual nonReentrant{\\r\\n    require(callContract != address(0),\\\"not set callContract.\\\");\\r\\n    require(msg.sender == callContract,\\\"only callContract can call this function.\\\");\\r\\n    \\r\\n    _claimReward(_stakingStartTimestamp, _stakingEndTimestamp, _tokenId, _startTimestamp,  _currentStakingTime,  _totalStakingTime, _isStaking, _claimedLastTimestamp,  _currentClaimedLastTimestamp);\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/YMPERC721A.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"./MGYERC721A.sol\\\";\\r\\n\\r\\ncontract YMPERC721A is MGYERC721A{\\r\\n  constructor (\\r\\n      string memory _name,\\r\\n      string memory _symbol\\r\\n  ) MGYERC721A (_name,_symbol) {\\r\\n    _extension = \\\".json\\\";\\r\\n    operatorFilteringEnabled = true;\\r\\n  }\\r\\n  //disabled\\r\\n  function setSBTMode(bool) external virtual override onlyOwner {\\r\\n  }\\r\\n  //widraw ETH from this contract.only owner.  \\r\\n  function withdraw() external payable override virtual onlyOwner nonReentrant {\\r\\n    // This will payout the owner 100% of the contract balance.\\r\\n    // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n    // =============================================================================\\r\\n    address wallet = payable(0xE99073F2BA37B44f5CCCf4758b179485F3984d7f);\\r\\n    bool os;\\r\\n    (os, ) = payable(wallet).call{value: address(this).balance}(\\\"\\\");\\r\\n    require(os);\\r\\n    // =============================================================================\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/ERC4907A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC4907A.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC4907A\\n *\\n * @dev [ERC4907](https://eips.ethereum.org/EIPS/eip-4907) compliant\\n * extension of ERC721A, which allows owners and authorized addresses\\n * to add a time-limited role with restricted permissions to ERC721 tokens.\\n */\\nabstract contract ERC4907A is ERC721A, IERC4907A {\\n    // The bit position of `expires` in packed user info.\\n    uint256 private constant _BITPOS_EXPIRES = 160;\\n\\n    // Mapping from token ID to user info.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `user`\\n    // - [160..223] `expires`\\n    mapping(uint256 => uint256) private _packedUserInfo;\\n\\n    /**\\n     * @dev Sets the `user` and `expires` for `tokenId`.\\n     * The zero address indicates there is no user.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function setUser(\\n        uint256 tokenId,\\n        address user,\\n        uint64 expires\\n    ) public virtual override {\\n        // Require the caller to be either the token owner or an approved operator.\\n        address owner = ownerOf(tokenId);\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A()))\\n                if (getApproved(tokenId) != _msgSenderERC721A()) revert SetUserCallerNotOwnerNorApproved();\\n\\n        _packedUserInfo[tokenId] = (uint256(expires) << _BITPOS_EXPIRES) | uint256(uint160(user));\\n\\n        emit UpdateUser(tokenId, user, expires);\\n    }\\n\\n    /**\\n     * @dev Returns the user address for `tokenId`.\\n     * The zero address indicates that there is no user or if the user is expired.\\n     */\\n    function userOf(uint256 tokenId) public view virtual override returns (address) {\\n        uint256 packed = _packedUserInfo[tokenId];\\n        assembly {\\n            // Branchless `packed *= (block.timestamp <= expires ? 1 : 0)`.\\n            // If the `block.timestamp == expires`, the `lt` clause will be true\\n            // if there is a non-zero user address in the lower 160 bits of `packed`.\\n            packed := mul(\\n                packed,\\n                // `block.timestamp <= expires ? 1 : 0`.\\n                lt(shl(_BITPOS_EXPIRES, timestamp()), packed)\\n            )\\n        }\\n        return address(uint160(packed));\\n    }\\n\\n    /**\\n     * @dev Returns the user's expires of `tokenId`.\\n     */\\n    function userExpires(uint256 tokenId) public view virtual override returns (uint256) {\\n        return _packedUserInfo[tokenId] >> _BITPOS_EXPIRES;\\n    }\\n\\n    /**\\n     * @dev Override of {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, IERC721A) returns (bool) {\\n        // The interface ID for ERC4907 is `0xad092b5c`,\\n        // as defined in [ERC4907](https://eips.ethereum.org/EIPS/eip-4907).\\n        return super.supportsInterface(interfaceId) || interfaceId == 0xad092b5c;\\n    }\\n\\n    /**\\n     * @dev Returns the user address for `tokenId`, ignoring the expiry status.\\n     */\\n    function _explicitUserOf(uint256 tokenId) internal view virtual returns (address) {\\n        return address(uint160(_packedUserInfo[tokenId]));\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC4907A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC4907A.\\n */\\ninterface IERC4907A is IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error SetUserCallerNotOwnerNorApproved();\\n\\n    /**\\n     * @dev Emitted when the `user` of an NFT or the `expires` of the `user` is changed.\\n     * The zero address for user indicates that there is no user address.\\n     */\\n    event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\\n\\n    /**\\n     * @dev Sets the `user` and `expires` for `tokenId`.\\n     * The zero address indicates there is no user.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function setUser(\\n        uint256 tokenId,\\n        address user,\\n        uint64 expires\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user address for `tokenId`.\\n     * The zero address indicates that there is no user or if the user is expired.\\n     */\\n    function userOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the user's expires of `tokenId`.\\n     */\\n    function userExpires(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetUserCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"UpdateUser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"batchMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"bmMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"bmMintedBySeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"burnAndMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenidGenesis\",\"type\":\"uint256[]\"}],\"name\":\"burnAndMintWithGenesis\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCustomTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOtherTokenidUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"getOtherTokenidUsedBySeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeasonByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaking\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimedLastTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2_\",\"type\":\"bytes32[]\"}],\"name\":\"getWhitelistedMaxMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2_\",\"type\":\"bytes32[]\"}],\"name\":\"getWhitelistedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWlResetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"hasWhitelistedOneWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"hasWhitelistedOneWL1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"hasWhitelistedOneWL2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hmMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hmMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"hmMintedBySeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"holdAndMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"isRevealedBySeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSBTEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2_\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWlEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWlNumDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsCapPerWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerBM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerHM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilteringEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherContractCountGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherContractGenesis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"psMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"psMintedBySeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetWlMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seasonStartTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"setBaseURIBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBmMaxMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBmPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setBurnAndMintSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status_\",\"type\":\"uint256\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setCustomTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wlNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setDisabledPartWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setHiddenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"setHiddenBaseURIBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setHmMaxMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setHmPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setHoldAndMintSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOperatorFilteringEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOtherContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setOtherContractCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setOtherContractCountGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOtherContractGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setOtherTokenidUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"setOtherTokenidUsedBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setPsMaxMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPsPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"setRevealBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setSBTMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setStakingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setWithdrawWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setWlMaxMintsCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setWlPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setWlPrice1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setWlPrice2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxmint_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof1_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof2_\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintPrice1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"wlMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"wlMinted1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"wlMinted2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"wlMintedBySeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"wlMintedBySeason1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"wlMintedBySeason2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YMPERC721A", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000659414d49492b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000959414d4949504c55530000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}