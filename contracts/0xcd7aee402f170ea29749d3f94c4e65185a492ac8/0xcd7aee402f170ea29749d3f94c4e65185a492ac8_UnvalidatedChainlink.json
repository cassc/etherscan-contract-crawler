{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/oracles/chainlink/BaseChainlinkAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {AggregatorV3Interface} from \\\"../../../interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title ChainlinkAdapter Contract\\n/// @author Radiant\\nabstract contract BaseChainlinkAdapter is AggregatorV3Interface {\\n\\t/// @notice Token price feed\\n\\tAggregatorV3Interface public immutable chainlinkFeed;\\n\\tuint256 public immutable heartbeat;\\n\\t/// @notice How late since heartbeat before a price reverts\\n\\tuint256 public constant HEART_BEAT_TOLERANCE = 300;\\n\\n\\terror AddressZero();\\n\\terror RoundNotComplete();\\n\\terror StalePrice();\\n\\terror InvalidPrice();\\n\\n\\t/**\\n\\t * @notice constructor\\n\\t * @param _chainlinkFeed Chainlink price feed for token.\\n\\t * @param _heartbeat heartbeat for feed\\n\\t */\\n\\tconstructor(address _chainlinkFeed, uint256 _heartbeat) {\\n\\t\\tif (_chainlinkFeed == address(0)) revert AddressZero();\\n\\t\\tchainlinkFeed = AggregatorV3Interface(_chainlinkFeed);\\n\\t\\theartbeat = _heartbeat;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns USD price in quote token.\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8\\n\\t */\\n\\tfunction latestAnswer() external view virtual returns (uint256 price);\\n\\n\\tfunction validate(int256 _answer, uint256 _updatedAt) public view {\\n\\t\\tif (_updatedAt == 0) revert RoundNotComplete();\\n\\t\\tif (heartbeat > 0 && block.timestamp - _updatedAt >= heartbeat + HEART_BEAT_TOLERANCE) revert StalePrice();\\n\\t\\tif (_answer <= 0) revert InvalidPrice();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns version of chainlink price feed for token\\n\\t */\\n\\tfunction version() external view returns (uint256) {\\n\\t\\treturn chainlinkFeed.version();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns decimals of chainlink price feed for token\\n\\t */\\n\\tfunction decimals() external view returns (uint8) {\\n\\t\\treturn chainlinkFeed.decimals();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns description of chainlink price feed for token\\n\\t */\\n\\tfunction description() external view returns (string memory) {\\n\\t\\treturn chainlinkFeed.description();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get data about a round\\n\\t * @param _roundId the requested round ID\\n\\t * @return roundId is the round ID from the aggregator for which the data was retrieved.\\n\\t * @return answer is the answer for the given round\\n\\t * @return startedAt is the timestamp when the round was started.\\n\\t * @return updatedAt is the timestamp when the round last was updated.\\n\\t * @return answeredInRound is the round ID of the round in which the answer was computed.\\n\\t */\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n\\t{\\n\\t\\t(roundId, answer, startedAt, updatedAt, answeredInRound) = chainlinkFeed.getRoundData(_roundId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns data of latest round\\n\\t * @return roundId is the round ID from the aggregator for which the data was retrieved.\\n\\t * @return answer is the answer for the given round\\n\\t * @return startedAt is the timestamp when the round was started.\\n\\t * @return updatedAt is the timestamp when the round last was updated.\\n\\t * @return answeredInRound is the round ID of the round in which the answer was computed.\\n\\t */\\n\\tfunction latestRoundData()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n\\t{\\n\\t\\t(roundId, answer, startedAt, updatedAt, answeredInRound) = chainlinkFeed.latestRoundData();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/oracles/chainlink/UnvalidatedChainlinkAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {AggregatorV3Interface} from \\\"../../../interfaces/AggregatorV3Interface.sol\\\";\\nimport {BaseChainlinkAdapter} from \\\"./BaseChainlinkAdapter.sol\\\";\\n\\n/// @title ChainlinkAdapter Contract\\n/// @author Radiant\\ncontract UnvalidatedChainlinkAdapter is BaseChainlinkAdapter {\\n\\tconstructor(address _chainlinkFeed, uint256 _heartbeat) BaseChainlinkAdapter(_chainlinkFeed, _heartbeat) {}\\n\\n\\t/**\\n\\t * @notice Returns USD price in quote token.\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8\\n\\t */\\n\\tfunction latestAnswer() external view override returns (uint256 price) {\\n\\t\\t(, int256 answer, , , ) = chainlinkFeed.latestRoundData();\\n\\t\\treturn uint256(answer);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heartbeat\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundNotComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HEART_BEAT_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedAt\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnvalidatedChainlinkAdapter", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000039c5b4f88215303b8f735f2de6c3ccab4c5df68b0000000000000000000000000000000000000000000000000000000000000e10", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}