{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/SlippageAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.23;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================= SlippageAuction ==========================\\n// ====================================================================\\n// Dutch-style Auction. Starts at a high price and gradually decreases until the entire lot\\n// of tokens is sold, or the time expires.\\n// Frax Finance: https://github.com/FraxFinance\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Timelock2Step } from \\\"frax-std/access-control/v2/Timelock2Step.sol\\\";\\nimport { IUniswapV2Callee } from \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n/// @title SlippageAuction\\n/// @notice Slippage auction to sell tokens over time. Created via factory.\\n/// @dev Both tokens must be 18 decimals.\\n/// @dev https://github.com/FraxFinance/frax-bonds\\ncontract SlippageAuction is ReentrancyGuard, Timelock2Step {\\n    using SafeERC20 for IERC20;\\n\\n    // ==============================================================================\\n    // Storage\\n    // ==============================================================================\\n\\n    /// @notice The name of this auction\\n    string public name;\\n\\n    /// @notice Slippage precision\\n    uint256 public constant PRECISION = 1e18;\\n\\n    /// @notice Stored information about details\\n    Detail[] public details;\\n\\n    /// @notice The token used for buying the tokenSell\\n    address public immutable TOKEN_BUY;\\n\\n    /// @notice The token being auctioned off\\n    address public immutable TOKEN_SELL;\\n\\n    /// @notice Alias for TOKEN_BUY\\n    /// @dev Maintains UniswapV2 interface\\n    address public immutable token0;\\n\\n    /// @notice Alias for TOKEN_SELL\\n    /// @notice Maintains UniswapV2 interface\\n    address public immutable token1;\\n\\n    // ==============================================================================\\n    // Structs\\n    // ==============================================================================\\n\\n    /// @notice Detail information behind an auction\\n    /// @notice Auction information\\n    /// @param amountListed Amount of sellToken placed for auction\\n    /// @param amountLeft Amount of sellToken remaining to buy\\n    /// @param amountExcessBuy Amount of any additional TOKEN_BUY sent to contract during auction\\n    /// @param amountExcessSell Amount of any additional TOKEN_SELL sent to contract during auction\\n    /// @param tokenBuyReceived Amount of tokenBuy that came in from sales\\n    /// @param priceLast Price of the last sale, in tokenBuy amount per tokenSell (amount of tokenBuy to purchase 1e18 tokenSell)\\n    /// @param priceMin Minimum price of 1e18 tokenSell, in tokenBuy\\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param lastBuyTime Time of the last sale\\n    /// @param expiry UNIX timestamp when the auction ends\\n    /// @param active If the auction is active\\n    struct Detail {\\n        uint128 amountListed;\\n        uint128 amountLeft;\\n        uint128 amountExcessBuy;\\n        uint128 amountExcessSell;\\n        uint128 tokenBuyReceived;\\n        uint128 priceLast;\\n        uint128 priceMin;\\n        uint64 priceDecay;\\n        uint64 priceSlippage;\\n        uint32 lastBuyTime;\\n        uint32 expiry;\\n        bool active;\\n    }\\n\\n    // ==============================================================================\\n    // Constructor\\n    // ==============================================================================\\n\\n    /// @param _timelock Address of the timelock/owner\\n    /// @param _tokenBuy Token used to purchase _tokenSell\\n    /// @param _tokenSell Token sold in the auction\\n    constructor(address _timelock, address _tokenBuy, address _tokenSell) Timelock2Step(_timelock) {\\n        name = string(abi.encodePacked(\\\"SlippageAuction: \\\", IERC20Metadata(_tokenSell).symbol()));\\n        TOKEN_BUY = _tokenBuy;\\n        TOKEN_SELL = _tokenSell;\\n\\n        token0 = _tokenBuy;\\n        token1 = _tokenSell;\\n    }\\n\\n    // ==============================================================================\\n    // Views\\n    // ==============================================================================\\n\\n    /// @notice Returns the semantic version of this contract\\n    /// @return _major The major version\\n    /// @return _minor The minor version\\n    /// @return _patch The patch version\\n    function version() external pure returns (uint256 _major, uint256 _minor, uint256 _patch) {\\n        return (1, 0, 1);\\n    }\\n\\n    /// @notice Calculates the pre-slippage price (with the user supplied auction _detail) from the time decay alone\\n    /// @param _detail The auction struct\\n    /// @return _price The price\\n    function getPreSlippagePrice(Detail memory _detail) public view returns (uint256 _price) {\\n        // Calculate Decay\\n        uint256 _decay = (_detail.priceDecay * (block.timestamp - _detail.lastBuyTime));\\n\\n        // Calculate the sale price (in tokenBuy per tokenSell), factoring in the time decay\\n        if (_detail.priceLast < _decay) {\\n            return _price = _detail.priceMin;\\n        } else {\\n            _price = _detail.priceLast - _decay;\\n        }\\n\\n        // Never go below the minimum price\\n        if (_price < _detail.priceMin) _price = _detail.priceMin;\\n    }\\n\\n    /// @notice Calculates the pre-slippage price (with the current auction) from the time decay alone\\n    function getPreSlippagePrice() external view returns (uint256) {\\n        return getPreSlippagePrice(details[details.length - 1]);\\n    }\\n\\n    /// @notice Calculates the amount of tokenSells out for a given tokenBuy amount\\n    /// @param amountIn Amount of tokenBuy in\\n    /// @param _revertOnOverAmountLeft Whether to revert if amountOut > amountLeft\\n    /// @return amountOut Amount of tokenSell out\\n    /// @return _slippagePerTokenSell The slippage component of the price change (in tokenBuy per tokenSell)\\n    /// @return _postPriceSlippage The post-slippage price from the time decay + slippage\\n    function getAmountOut(\\n        uint256 amountIn,\\n        bool _revertOnOverAmountLeft\\n    ) public view returns (uint256 amountOut, uint256 _slippagePerTokenSell, uint256 _postPriceSlippage) {\\n        // Get the auction number\\n        uint256 _auctionNumber = details.length - 1;\\n\\n        // Get the auction info\\n        Detail memory _detail = details[_auctionNumber];\\n\\n        // Revert if the auction is inactive or expired\\n        if (!_detail.active) revert AuctionNotActive();\\n        if (block.timestamp >= _detail.expiry) revert AuctionExpired();\\n\\n        // Calculate the sale price (in tokenBuy per tokenSell), factoring in the time decay\\n        uint256 _preSlippagePrice = getPreSlippagePrice({ _detail: _detail });\\n\\n        // Calculate the slippage component of the price (in tokenBuy per tokenSell)\\n        _slippagePerTokenSell = (_detail.priceSlippage * amountIn) / PRECISION;\\n\\n        // Calculate the output amount of tokenSell\\n        amountOut = (amountIn * PRECISION) / (_preSlippagePrice + _slippagePerTokenSell);\\n\\n        // Make sure you are not going over the amountLeft\\n        if (amountOut > _detail.amountLeft) {\\n            if (_revertOnOverAmountLeft) revert InsufficientTokenSellsAvailable();\\n            else amountOut = _detail.amountLeft;\\n        }\\n\\n        // Set return value\\n        _postPriceSlippage = _preSlippagePrice + (2 * _slippagePerTokenSell); // Price impact is twice the slippage\\n    }\\n\\n    /// @notice Calculates how much tokenBuy you would need to buy out the remaining tokenSell in the auction\\n    /// @return amountIn Amount of tokenBuy needed\\n    /// @return _slippagePerTokenSell The slippage component of the price change (in tokenBuy per tokenSell)\\n    /// @return _postPriceSlippage The post-slippage price from the time decay + slippage\\n    function getAmountInMax()\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 _slippagePerTokenSell, uint256 _postPriceSlippage)\\n    {\\n        // Get the auction number\\n        uint256 _auctionNumber = details.length - 1;\\n\\n        // Get the auction info\\n        Detail memory detail = details[_auctionNumber];\\n\\n        // Call the internal function with amountLeft\\n        return _getAmountIn({ _detail: detail, amountOut: detail.amountLeft });\\n    }\\n\\n    /// @notice Calculates how much tokenBuy you would need in order to obtain a given number of tokenSell\\n    /// @param amountOut The desired amount of tokenSell\\n    /// @return amountIn Amount of tokenBuy needed\\n    /// @return _slippagePerTokenSell The slippage component of the price change (in tokenBuy per tokenSell)\\n    /// @return _postPriceSlippage The post-slippage price from the time decay + slippage\\n    function getAmountIn(\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn, uint256 _slippagePerTokenSell, uint256 _postPriceSlippage) {\\n        // Get the auction number\\n        uint256 _auctionNumber = details.length - 1;\\n\\n        // Get the auction info\\n        Detail memory detail = details[_auctionNumber];\\n\\n        // Call the internal function with amountOut, set return values\\n        (amountIn, _slippagePerTokenSell, _postPriceSlippage) = _getAmountIn({ _detail: detail, amountOut: amountOut });\\n    }\\n\\n    /// @notice Calculate how much tokenBuy you would need to obtain a given number of tokenSell\\n    /// @param _detail The auction struct\\n    /// @return amountIn Amount of tokenBuy needed\\n    /// @return _slippagePerTokenSell The slippage component of the price change (in tokenBuy per tokenSell)\\n    /// @return _postPriceSlippage The post-slippage price from the time decay + slippage\\n    function _getAmountIn(\\n        Detail memory _detail,\\n        uint256 amountOut\\n    ) internal view returns (uint256 amountIn, uint256 _slippagePerTokenSell, uint256 _postPriceSlippage) {\\n        // Do checks\\n        if (!_detail.active) revert AuctionNotActive();\\n        if (block.timestamp >= _detail.expiry) revert AuctionExpired();\\n        if (amountOut > _detail.amountLeft) revert InsufficientTokenSellsAvailable();\\n\\n        // Calculate the sale price (in tokenBuy per tokenSell), factoring in the time decay\\n        uint256 _preSlippagePrice = getPreSlippagePrice({ _detail: _detail });\\n\\n        // Math in a more readable format:\\n        // uint256 _numerator = (amountOut * _preSlippagePrice) / PRECISION;\\n        // uint256 _denominator = (PRECISION -\\n        //     ((amountOut * uint256(_detail.priceSlippage)) / PRECISION));\\n        // amountIn = (_numerator * PRECISION) / _denominator;\\n\\n        // Set return params amountIn\\n        amountIn =\\n            (amountOut * _preSlippagePrice) /\\n            (PRECISION - (amountOut * uint256(_detail.priceSlippage)) / PRECISION);\\n\\n        // Set return params, calculate the slippage component of the price (in tokenBuy per tokenSell)\\n        _slippagePerTokenSell = (_detail.priceSlippage * amountIn) / PRECISION;\\n        _postPriceSlippage = _preSlippagePrice + (2 * _slippagePerTokenSell); // Price impact is twice the slippage\\n    }\\n\\n    /// @notice Calculates how much tokenBuy you would need in order to obtain a given number of tokenSell\\n    /// @dev Maintains compatibility with some router implementations\\n    /// @param amountOut The amount out of sell tokens\\n    /// @param tokenOut The sell token address\\n    /// @return amountIn The amount of tokenBuy needed\\n    function getAmountIn(uint256 amountOut, address tokenOut) public view returns (uint256 amountIn) {\\n        if (tokenOut != TOKEN_SELL) revert InvalidTokenOut();\\n        (amountIn, , ) = getAmountIn({ amountOut: amountOut });\\n    }\\n\\n    /// @notice Calculates the amount of tokenSell out for a given tokenBuy amount\\n    /// @dev Used to maintain compatibility\\n    /// @param amountIn Amount of tokenBuy in\\n    /// @param tokenIn The token being swapped in\\n    /// @return amountOut Amount of tokenSells out\\n    function getAmountOut(uint256 amountIn, address tokenIn) public view returns (uint256 amountOut) {\\n        if (tokenIn != TOKEN_BUY) revert InvalidTokenIn();\\n        (amountOut, , ) = getAmountOut({ amountIn: amountIn, _revertOnOverAmountLeft: false });\\n    }\\n\\n    /// @dev Uni v2 support without revert\\n    function skim(address) external pure {\\n        return;\\n    }\\n\\n    /// @dev Uni v2 support without revert\\n    function sync() external pure {\\n        return;\\n    }\\n\\n    function getAmountOut(uint256, uint256, uint256) external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function getAmountIn(uint256, uint256, uint256) external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function getReserves() external pure returns (uint112, uint112, uint32) {\\n        revert NotImplemented();\\n    }\\n\\n    function price0CumulativeLast() external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function price1CumulativeLast() external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function kLast() external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function factory() external pure returns (address) {\\n        revert NotImplemented();\\n    }\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256) {\\n        revert NotImplemented();\\n    }\\n\\n    function initialize(address, address) external pure {\\n        revert NotImplemented();\\n    }\\n\\n    /// @notice Gets a struct instead of a tuple for details()\\n    /// @param _auctionNumber Detail ID\\n    /// @return The struct of the auction\\n    function getDetailStruct(uint256 _auctionNumber) external view returns (Detail memory) {\\n        return details[_auctionNumber];\\n    }\\n\\n    /// @notice Returns the length of the details array\\n    /// @return _length The length of the details array\\n    function detailsLength() external view returns (uint256 _length) {\\n        _length = details.length;\\n    }\\n\\n    /// @notice Returns the latest auction\\n    /// @dev Returns an empty struct if there are no auctions\\n    /// @return _latestAuction The latest auction struct\\n    function getLatestAuction() external view returns (Detail memory _latestAuction) {\\n        uint256 _length = details.length;\\n        if (_length == 0) return _latestAuction;\\n        _latestAuction = details[details.length - 1];\\n    }\\n\\n    // ==============================================================================\\n    // Owner-only Functions\\n    // ==============================================================================\\n\\n    /// @notice Parameters for starting an auction\\n    /// @dev Sender must have an allowance on tokenSell\\n    /// @param amountListed Amount of tokenSell being sold\\n    /// @param priceStart Starting price of 1e18 tokenSell, in tokenBuy\\n    /// @param priceMin Minimum price of 1e18 tokenSell, in tokenBuy\\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param expiry UNIX timestamp when the auction ends\\n    struct StartAuctionParams {\\n        uint128 amountListed;\\n        uint128 priceStart;\\n        uint128 priceMin;\\n        uint64 priceDecay;\\n        uint64 priceSlippage;\\n        uint32 expiry;\\n    }\\n\\n    /// @notice Starts a new auction\\n    /// @dev Requires an ERC20 allowance on the tokenSell prior to calling\\n    /// @param _params StartAuctionParams\\n    function startAuction(StartAuctionParams calldata _params) external nonReentrant returns (uint256 _auctionNumber) {\\n        _requireSenderIsTimelock();\\n\\n        // Check expiry is not in the past\\n        if (_params.expiry < block.timestamp) revert Expired();\\n\\n        // Ensure that enough amountListed are for sale to prevent round-down errors\\n        // see E2E test for 1e6 requirement.  At 1e8 requirement, there should be enough trades\\n        // to constitute an auction.\\n        if (_params.amountListed < 1e8) revert AmountListedTooLow();\\n\\n        // Ensure that priceStart > priceMin\\n        if (_params.priceStart < _params.priceMin) revert PriceStartLessThanPriceMin();\\n\\n        // Prevent edge-case revert of amountOut within getAmountOut\\n        if (_params.priceMin == 0 && _params.priceSlippage == 0) revert PriceMinAndSlippageBothZero();\\n\\n        // Pre-compute the auction number\\n        _auctionNumber = details.length;\\n\\n        // Ensure that the previous auction, if any, has been stopped\\n        if (_auctionNumber > 0) {\\n            Detail memory _lastAuction = details[_auctionNumber - 1];\\n            if (_lastAuction.active) revert LastAuctionStillActive();\\n        }\\n\\n        // Create the auction\\n        details.push(\\n            Detail({\\n                amountListed: _params.amountListed,\\n                amountLeft: _params.amountListed,\\n                amountExcessBuy: 0,\\n                amountExcessSell: 0,\\n                tokenBuyReceived: 0,\\n                priceLast: _params.priceStart,\\n                priceMin: _params.priceMin,\\n                priceDecay: _params.priceDecay,\\n                priceSlippage: _params.priceSlippage,\\n                lastBuyTime: uint32(block.timestamp),\\n                expiry: _params.expiry,\\n                active: true\\n            })\\n        );\\n\\n        emit AuctionStarted({\\n            auctionNumber: _auctionNumber,\\n            amountListed: _params.amountListed,\\n            priceStart: _params.priceStart,\\n            priceMin: _params.priceMin,\\n            priceDecay: _params.priceDecay,\\n            priceSlippage: _params.priceSlippage,\\n            expiry: _params.expiry\\n        });\\n\\n        // Clear out any tokens held by the auction so that bookkeeping is accurate\\n        _withdrawAnyAvailableTokens({ _excess: true });\\n\\n        // Take the tokenSells from the sender\\n        IERC20(TOKEN_SELL).safeTransferFrom(msg.sender, address(this), _params.amountListed);\\n    }\\n\\n    /// @notice Ends the auction\\n    /// @dev Only callable by the auction owner\\n    /// @return tokenBuyReceived Amount of tokenBuy obtained from the auction\\n    /// @return tokenSellRemaining Amount of unsold tokenSell left over\\n    function stopAuction() public nonReentrant returns (uint256 tokenBuyReceived, uint256 tokenSellRemaining) {\\n        _requireSenderIsTimelock();\\n\\n        // Get the auction info and perform checks\\n        uint256 _auctionNumber = details.length - 1;\\n        Detail storage detail = details[_auctionNumber];\\n        if (!detail.active) revert AuctionNotActive();\\n\\n        // Skim excess token to sender if additional has been received to keep bookkeeping accurate\\n        _withdrawIfTokenBalance({ _token: TOKEN_BUY, _priorBalance: detail.tokenBuyReceived, _excess: true });\\n        _withdrawIfTokenBalance({ _token: TOKEN_SELL, _priorBalance: detail.amountLeft, _excess: true });\\n\\n        // Set Return params\\n        tokenBuyReceived = IERC20(TOKEN_BUY).balanceOf(address(this));\\n        tokenSellRemaining = IERC20(TOKEN_SELL).balanceOf(address(this));\\n\\n        // Effects: Update state with final balances;\\n        detail.active = false;\\n        detail.tokenBuyReceived = uint128(tokenBuyReceived);\\n        detail.amountLeft = uint128(tokenSellRemaining);\\n\\n        // Return any TOKEN_BUY and TOKEN_SELL from the auction to the timelock\\n        _withdrawAnyAvailableTokens({ _excess: false });\\n\\n        emit AuctionStopped({\\n            auctionNumber: _auctionNumber,\\n            tokenBuyReceived: tokenBuyReceived,\\n            tokenSellRemaining: tokenSellRemaining\\n        });\\n    }\\n\\n    // ==============================================================================\\n    // Public Functions\\n    // ==============================================================================\\n\\n    /// @notice Swaps tokenBuys for tokenSells\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    /// @dev Token0 is always the TOKEN_BUY, token1 is always the TOKEN_SELL\\n    /// @dev Maintains uniV2 interface\\n    /// @param amount0Out The amount of tokenBuys to receive\\n    /// @param amount1Out The amount of tokenSells to receive\\n    /// @param to The recipient of the output tokens\\n    /// @param data Callback data\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes memory data) public nonReentrant {\\n        if (amount0Out != 0) revert ExcessiveTokenBuyOut({ minOut: 0, actualOut: amount0Out });\\n        if (amount1Out == 0) revert InsufficientOutputAmount({ minOut: 1, actualOut: 0 });\\n\\n        // Get the auction info (similar to get reserves in univ2)\\n        uint256 _auctionNumber = details.length - 1;\\n        Detail memory detail = details[_auctionNumber];\\n\\n        // Transfer tokens\\n        IERC20(TOKEN_SELL).safeTransfer(to, amount1Out);\\n\\n        // Callback if necessary for flash swap\\n        if (data.length > 0) {\\n            IUniswapV2Callee(to).uniswapV2Call({\\n                sender: msg.sender,\\n                amount0: amount0Out,\\n                amount1: amount1Out,\\n                data: data\\n            });\\n        }\\n\\n        // Calculate the amount of tokenBuys in\\n        uint256 _tokenBuyBalance = IERC20(TOKEN_BUY).balanceOf(address(this));\\n        uint256 _tokenBuyIn = _tokenBuyBalance - detail.tokenBuyReceived;\\n\\n        // Adheres to uniswap v2 interface, called here to prevent stack-too-deep error\\n        emit Swap({\\n            sender: msg.sender,\\n            amount0In: _tokenBuyIn,\\n            amount1In: 0,\\n            amount0Out: 0,\\n            amount1Out: amount1Out,\\n            to: to\\n        });\\n\\n        // Call the internal function with amountOut\\n        (uint256 _minAmountIn, uint256 _slippagePerTokenSell, uint256 _postPriceSlippage) = _getAmountIn({\\n            _detail: detail,\\n            amountOut: amount1Out\\n        });\\n\\n        // Check invariants\\n        if (_tokenBuyIn < _minAmountIn) revert InsufficientInputAmount({ minIn: _minAmountIn, actualIn: _tokenBuyIn });\\n        if (_minAmountIn == 0) revert InputAmountZero();\\n\\n        // Mutate _auction, which has the previous state\\n        detail.amountLeft -= safeUint128(amount1Out);\\n        detail.tokenBuyReceived = safeUint128(_tokenBuyBalance);\\n        detail.priceLast = safeUint128(_postPriceSlippage);\\n        detail.lastBuyTime = uint32(block.timestamp);\\n\\n        // Write back to state, similar to _update in univ2\\n        details[_auctionNumber] = detail;\\n\\n        // Emit Buy event\\n        emit Buy({\\n            auctionNumber: _auctionNumber,\\n            tokenBuy: TOKEN_BUY,\\n            tokenSell: TOKEN_SELL,\\n            amountIn: safeUint128(_tokenBuyIn),\\n            amountOut: safeUint128(amount1Out),\\n            priceLast: detail.priceLast,\\n            slippagePerTokenSell: safeUint128(_slippagePerTokenSell)\\n        });\\n    }\\n\\n    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible\\n    /// @dev Must have an allowance on the TOKEN_BUY prior to invocation\\n    /// @dev Maintains uniV2 interface\\n    /// @param amountIn The amount of buy tokens to send.\\n    /// @param amountOutMin The minimum amount of sell tokens that must be received for the transaction not to revert\\n    /// @param to Recipient of the output tokens\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @return _amounts The input token amount and output token amount\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory _amounts) {\\n        path; // compile warnings\\n\\n        // Ensure deadline has not passed\\n        if (block.timestamp > deadline) revert Expired();\\n\\n        // Calculate the amount of tokenSells out & check invariant\\n        (uint256 amountOut, , ) = getAmountOut({ amountIn: amountIn, _revertOnOverAmountLeft: true });\\n        if (amountOut < amountOutMin) {\\n            revert InsufficientOutputAmount({ minOut: amountOutMin, actualOut: amountOut });\\n        }\\n        // Interactions: Transfer tokenBuys to the contract\\n        IERC20(TOKEN_BUY).safeTransferFrom(msg.sender, address(this), amountIn);\\n\\n        // Call the swap function\\n        swap({ amount0Out: 0, amount1Out: amountOut, to: to, data: new bytes(0) });\\n\\n        // Set return values\\n        _amounts = new uint256[](2);\\n        _amounts[0] = amountIn;\\n        _amounts[1] = amountOut;\\n    }\\n\\n    /// @notice Receives an exact amount of output tokens for as few input tokens as possible\\n    /// @dev Must have an allowance on the TOKEN_BUY prior to invocation\\n    /// @dev Maintains uniV2 interface\\n    /// @param amountOut The amount of sell tokens to receive\\n    /// @param amountInMax The maximum amount of buy tokens that can be required before the transaction reverts\\n    /// @param to Recipient of the output tokens\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @return _amounts The input token amount and output token amount\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory _amounts) {\\n        path; // compile warning\\n\\n        // Ensure deadline has not passed\\n        if (block.timestamp > deadline) revert Expired();\\n\\n        // Calculate the amount of tokenBuys in & check invariant\\n        (uint256 amountIn, , ) = getAmountIn({ amountOut: amountOut });\\n        if (amountIn > amountInMax) revert ExcessiveInputAmount({ minIn: amountInMax, actualIn: amountIn });\\n\\n        // Interactions: Transfer tokenBuys to the contract\\n        IERC20(TOKEN_BUY).safeTransferFrom(msg.sender, address(this), amountIn);\\n\\n        // Call the swap function\\n        swap({ amount0Out: 0, amount1Out: amountOut, to: to, data: new bytes(0) });\\n\\n        // Set return variable\\n        _amounts = new uint256[](2);\\n        _amounts[0] = amountIn;\\n        _amounts[1] = amountOut;\\n    }\\n\\n    // ==============================================================================\\n    // Helpers\\n    // ==============================================================================\\n\\n    /// @notice Withdraw available TOKEN_BUY and TOKEN_SELL on startAuction() and stopAuction()\\n    /// @param _excess Whether to bookkeep any excess tokens received outside of auction\\n    function _withdrawAnyAvailableTokens(bool _excess) private {\\n        _withdrawIfTokenBalance({ _token: TOKEN_BUY, _priorBalance: 0, _excess: _excess });\\n        _withdrawIfTokenBalance({ _token: TOKEN_SELL, _priorBalance: 0, _excess: _excess });\\n    }\\n\\n    /// @notice Withdraw available TOKEN_BUY and TOKEN_SELL on startAuction() and stopAuction()\\n    /// @param _token Address of the token you want to withdraw\\n    /// @param _priorBalance Prior balance of the _token\\n    /// @param _excess Whether to bookkeep any excess tokens received outside of auction\\n    function _withdrawIfTokenBalance(address _token, uint256 _priorBalance, bool _excess) private {\\n        // Fetch the current balance of _token\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        // If the current balance is higher than the prior balance\\n        if (balance > _priorBalance) {\\n            uint256 amount = balance - _priorBalance;\\n\\n            // Bookkeep any excess token received\\n            if (_excess) {\\n                Detail storage detail = details[details.length - 1];\\n                if (_token == TOKEN_BUY) {\\n                    detail.amountExcessBuy += safeUint128(amount);\\n                } else {\\n                    // token == TOKEN_SELL\\n                    detail.amountExcessSell += safeUint128(amount);\\n                }\\n            }\\n\\n            IERC20(_token).safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @dev Overflow protection\\n    function safeUint128(uint256 number) internal pure returns (uint128 casted) {\\n        if (number > type(uint128).max) revert Overflow();\\n        casted = uint128(number);\\n    }\\n\\n    // ==============================================================================\\n    // Errors\\n    // ==============================================================================\\n\\n    /// @notice Emitted when a user attempts to start an auction selling too few tokens\\n    error AmountListedTooLow();\\n\\n    /// @notice Emitted when a user attempts to end an auction that has been stopped\\n    error AuctionNotActive();\\n\\n    /// @notice Emitted when a user attempts to interact with an auction that has expired\\n    error AuctionExpired();\\n\\n    /// @notice Emitted when a user attempts to start a new auction before the previous one has been stopped (via ```stopAuction()```)\\n    error LastAuctionStillActive();\\n\\n    /// @notice Emitted when a user attempts to swap a given amount of buy tokens that would result in an insufficient amount of sell tokens\\n    /// @param minOut Minimum out that the user expects\\n    /// @param actualOut Actual amount out that would occur\\n    error InsufficientOutputAmount(uint256 minOut, uint256 actualOut);\\n\\n    /// @notice Emitted when a user attempts to swap an insufficient amount of buy tokens\\n    /// @param minIn Minimum in that the contract requires\\n    /// @param actualIn Actual amount in that has been deposited\\n    error InsufficientInputAmount(uint256 minIn, uint256 actualIn);\\n\\n    /// @notice Emitted when a user attempts to swap an excessive amount of buy tokens for aa given amount of sell tokens\\n    /// @param minIn    Minimum in that the user expects\\n    /// @param actualIn Actual amount in that would occur\\n    error ExcessiveInputAmount(uint256 minIn, uint256 actualIn);\\n\\n    /// @notice Emitted when a user attempts to buy more sell tokens than are left in the auction\\n    error InsufficientTokenSellsAvailable();\\n\\n    /// @notice Emitted when attempting to swap where the calculated amountIn is 0\\n    error InputAmountZero();\\n\\n    /// @notice Emitted when a user attempts to buy the tokenBuy using the swap() function\\n    error ExcessiveTokenBuyOut(uint256 minOut, uint256 actualOut);\\n\\n    /// @notice Emitted when a user attempts to make a swap after the transaction deadline has passed\\n    error Expired();\\n\\n    /// @notice Emitted when a user attempts to use an invalid buy token\\n    error InvalidTokenIn();\\n\\n    /// @notice Emitted when a user attempts to use an invalid sell token\\n    error InvalidTokenOut();\\n\\n    /// @notice Emitted when calling `startAuction()` when `StartAuctionParams.priceMin == 0 && StartAuctionParams.priceSlippage == 0`\\n    error PriceMinAndSlippageBothZero();\\n\\n    /// @notice Emitted when attempting to call a uni-v2 pair function that is not supported by this contract\\n    error NotImplemented();\\n\\n    /// @notice Emitted when downcasting a uint on type overflow\\n    error Overflow();\\n\\n    /// @notice Emitted when a user attempts to start an auction with `_params.priceStart < _params.priceMin`\\n    error PriceStartLessThanPriceMin();\\n\\n    // ==============================================================================\\n    // Events\\n    // ==============================================================================\\n\\n    /// @dev Emitted when an auction is stopped\\n    /// @param auctionNumber The ID of the auction\\n    /// @param tokenBuyReceived Amount of tokenBuy obtained from the auction\\n    /// @param tokenSellRemaining Amount of unsold tokenSells left over\\n    event AuctionStopped(uint256 auctionNumber, uint256 tokenBuyReceived, uint256 tokenSellRemaining);\\n\\n    /// @dev Emitted when a swap occurs and has more information than the ```Swap``` event\\n    /// @param auctionNumber The ID of the auction, and index in the details array\\n    /// @param tokenBuy The token used to buy the tokenSell being auctioned off\\n    /// @param tokenSell The token being auctioned off\\n    /// @param amountIn Amount of tokenBuy in\\n    /// @param amountOut Amount of tokenSell out\\n    /// @param priceLast The execution price of the buy\\n    /// @param slippagePerTokenSell How many tokenBuys (per tokenSell) were added as slippage\\n    event Buy(\\n        uint256 auctionNumber,\\n        address tokenBuy,\\n        address tokenSell,\\n        uint128 amountIn,\\n        uint128 amountOut,\\n        uint128 priceLast,\\n        uint128 slippagePerTokenSell\\n    );\\n\\n    /// @notice Emitted when a swap occurs\\n    /// @param sender The address of the sender\\n    /// @param amount0In The amount of TOKEN_BUY in\\n    /// @param amount1In The amount of TOKEN_SELL in\\n    /// @param amount0Out The amount of TOKEN_BUY out\\n    /// @param amount1Out The amount of TOKEN_SELL out\\n    /// @param to The address of the recipient\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    /// @dev Emitted when an auction is started\\n    /// @param auctionNumber The ID of the auction\\n    /// @param amountListed Amount of tokenSell being sold\\n    /// @param priceStart Starting price of the tokenSell, in tokenBuy\\n    /// @param priceMin Minimum price of the tokenSell, in tokenBuy\\n    /// @param priceDecay Price decay, per day, using PRECISION\\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\\n    /// @param expiry Expiration time of the auction\\n    event AuctionStarted(\\n        uint256 auctionNumber,\\n        uint128 amountListed,\\n        uint128 priceStart,\\n        uint128 priceMin,\\n        uint128 priceDecay,\\n        uint128 priceSlippage,\\n        uint32 expiry\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/src/access-control/v2/Timelock2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.0;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================== Timelock2Step ===========================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author\\n// Drake Evans: https://github.com/DrakeEvans\\n\\n// Reviewers\\n// Dennis: https://github.com/denett\\n\\n// ====================================================================\\n\\n/// @title Timelock2Step\\n/// @author Drake Evans (Frax Finance) https://github.com/drakeevans\\n/// @dev Inspired by OpenZeppelin's Ownable2Step contract\\n/// @notice  An abstract contract which contains 2-step transfer and renounce logic for a timelock address\\nabstract contract Timelock2Step {\\n    /// @notice The pending timelock address\\n    address public pendingTimelockAddress;\\n\\n    /// @notice The current timelock address\\n    address public timelockAddress;\\n\\n    constructor(address _timelock) {\\n        timelockAddress = _timelock;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: External Functions\\n    // ============================================================================================\\n\\n    /// @notice The ```transferTimelock``` function initiates the timelock transfer\\n    /// @dev Must be called by the current timelock\\n    /// @param _newTimelock The address of the nominated (pending) timelock\\n    function transferTimelock(address _newTimelock) external virtual {\\n        _requireSenderIsTimelock();\\n        _transferTimelock(_newTimelock);\\n    }\\n\\n    /// @notice The ```acceptTransferTimelock``` function completes the timelock transfer\\n    /// @dev Must be called by the pending timelock\\n    function acceptTransferTimelock() external virtual {\\n        _requireSenderIsPendingTimelock();\\n        _acceptTransferTimelock();\\n    }\\n\\n    /// @notice The ```renounceTimelock``` function renounces the timelock after setting pending timelock to current timelock\\n    /// @dev Pending timelock must be set to current timelock before renouncing, creating a 2-step renounce process\\n    function renounceTimelock() external virtual {\\n        _requireSenderIsTimelock();\\n        _requireSenderIsPendingTimelock();\\n        _transferTimelock(address(0));\\n        _setTimelock(address(0));\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Internal Actions\\n    // ============================================================================================\\n\\n    /// @notice The ```_transferTimelock``` function initiates the timelock transfer\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _newTimelock The address of the nominated (pending) timelock\\n    function _transferTimelock(address _newTimelock) internal {\\n        pendingTimelockAddress = _newTimelock;\\n        emit TimelockTransferStarted(timelockAddress, _newTimelock);\\n    }\\n\\n    /// @notice The ```_acceptTransferTimelock``` function completes the timelock transfer\\n    /// @dev This function is to be implemented by a public function\\n    function _acceptTransferTimelock() internal {\\n        pendingTimelockAddress = address(0);\\n        _setTimelock(msg.sender);\\n    }\\n\\n    /// @notice The ```_setTimelock``` function sets the timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _newTimelock The address of the new timelock\\n    function _setTimelock(address _newTimelock) internal {\\n        emit TimelockTransferred(timelockAddress, _newTimelock);\\n        timelockAddress = _newTimelock;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Internal Checks\\n    // ============================================================================================\\n\\n    /// @notice The ```_isTimelock``` function checks if _address is current timelock address\\n    /// @param _address The address to check against the timelock\\n    /// @return Whether or not msg.sender is current timelock address\\n    function _isTimelock(address _address) internal view returns (bool) {\\n        return _address == timelockAddress;\\n    }\\n\\n    /// @notice The ```_requireIsTimelock``` function reverts if _address is not current timelock address\\n    /// @param _address The address to check against the timelock\\n    function _requireIsTimelock(address _address) internal view {\\n        if (!_isTimelock(_address)) revert AddressIsNotTimelock(timelockAddress, _address);\\n    }\\n\\n    /// @notice The ```_requireSenderIsTimelock``` function reverts if msg.sender is not current timelock address\\n    /// @dev This function is to be implemented by a public function\\n    function _requireSenderIsTimelock() internal view {\\n        _requireIsTimelock(msg.sender);\\n    }\\n\\n    /// @notice The ```_isPendingTimelock``` function checks if the _address is pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _address The address to check against the pending timelock\\n    /// @return Whether or not _address is pending timelock address\\n    function _isPendingTimelock(address _address) internal view returns (bool) {\\n        return _address == pendingTimelockAddress;\\n    }\\n\\n    /// @notice The ```_requireIsPendingTimelock``` function reverts if the _address is not pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    /// @param _address The address to check against the pending timelock\\n    function _requireIsPendingTimelock(address _address) internal view {\\n        if (!_isPendingTimelock(_address)) revert AddressIsNotPendingTimelock(pendingTimelockAddress, _address);\\n    }\\n\\n    /// @notice The ```_requirePendingTimelock``` function reverts if msg.sender is not pending timelock address\\n    /// @dev This function is to be implemented by a public function\\n    function _requireSenderIsPendingTimelock() internal view {\\n        _requireIsPendingTimelock(msg.sender);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Events\\n    // ============================================================================================\\n\\n    /// @notice The ```TimelockTransferStarted``` event is emitted when the timelock transfer is initiated\\n    /// @param previousTimelock The address of the previous timelock\\n    /// @param newTimelock The address of the new timelock\\n    event TimelockTransferStarted(address indexed previousTimelock, address indexed newTimelock);\\n\\n    /// @notice The ```TimelockTransferred``` event is emitted when the timelock transfer is completed\\n    /// @param previousTimelock The address of the previous timelock\\n    /// @param newTimelock The address of the new timelock\\n    event TimelockTransferred(address indexed previousTimelock, address indexed newTimelock);\\n\\n    // ============================================================================================\\n    // Functions: Errors\\n    // ============================================================================================\\n\\n    /// @notice Emitted when timelock is transferred\\n    error AddressIsNotTimelock(address timelockAddress, address actualAddress);\\n\\n    /// @notice Emitted when pending timelock is transferred\\n    error AddressIsNotPendingTimelock(address pendingTimelockAddress, address actualAddress);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.23;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"frax-std/=lib/frax-standard-solidity/src/\",\r\n      \"@openzeppelin/=lib/frax-standard-solidity/lib/openzeppelin-contracts/\",\r\n      \"@chainlink/=lib/frax-standard-solidity/lib/chainlink/\",\r\n      \"@openzeppelin/contracts/=lib/frax-standard-solidity/lib/openzeppelin-contracts/contracts/\",\r\n      \"chainlink/=lib/frax-standard-solidity/lib/chainlink/\",\r\n      \"ds-test/=lib/frax-standard-solidity/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/frax-standard-solidity/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/frax-standard-solidity/lib/forge-std/src/\",\r\n      \"frax-standard-solidity/=lib/frax-standard-solidity/src/\",\r\n      \"openzeppelin-contracts/=lib/frax-standard-solidity/lib/openzeppelin-contracts/\",\r\n      \"solidity-bytes-utils/=lib/frax-standard-solidity/lib/solidity-bytes-utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSell\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingTimelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"AddressIsNotPendingTimelock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"AddressIsNotTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountListedTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualIn\",\"type\":\"uint256\"}],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualOut\",\"type\":\"uint256\"}],\"name\":\"ExcessiveTokenBuyOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputAmountZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualIn\",\"type\":\"uint256\"}],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualOut\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokenSellsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastAuctionStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMinAndSlippageBothZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceStartLessThanPriceMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceStart\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceDecay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceSlippage\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBuyReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSellRemaining\",\"type\":\"uint256\"}],\"name\":\"AuctionStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amountOut\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceLast\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"slippagePerTokenSell\",\"type\":\"uint128\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_BUY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTransferTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"details\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessBuy\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessSell\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenBuyReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceLast\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detailsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerTokenSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postPriceSlippage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountInMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerTokenSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postPriceSlippage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revertOnOverAmountLeft\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippagePerTokenSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postPriceSlippage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"getDetailStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessBuy\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessSell\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenBuyReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceLast\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Detail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessBuy\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessSell\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenBuyReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceLast\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Detail\",\"name\":\"_latestAuction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreSlippagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountLeft\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessBuy\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountExcessSell\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenBuyReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceLast\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastBuyTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SlippageAuction.Detail\",\"name\":\"_detail\",\"type\":\"tuple\"}],\"name\":\"getPreSlippagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTimelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amountListed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"priceMin\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"priceDecay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceSlippage\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"internalType\":\"struct SlippageAuction.StartAuctionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBuyReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSellRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTimelock\",\"type\":\"address\"}],\"name\":\"transferTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SlippageAuction", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000452420df4ac1e3db5429b5fd629f3047482c543c000000000000000000000000853d955acef822db058eb8505911ed77f175b99e00000000000000000000000013f19441fb473fe96f1928d4a90f79fdb59675f1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}