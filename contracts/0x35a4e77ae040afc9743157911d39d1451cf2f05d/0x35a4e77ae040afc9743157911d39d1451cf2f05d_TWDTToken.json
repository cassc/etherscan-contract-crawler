{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n//*************** SafeMath ***************\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n//*************** Ownable *************** \r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    function setAdmin(address _admin)public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n}\r\n\r\n//************* ERC20 *************** \r\n\r\ncontract ERC20 {\r\n  \r\n    function balanceOf(address who)public view returns (uint256);\r\n    function transfer(address to, uint256 value)public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value)public returns (bool);\r\n    function allowance(address owner, address spender)public view returns (uint256);\r\n    function approve(address spender, uint256 value)public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n//************* BlackList *************\r\ncontract BlackList is Ownable {\r\n\r\n    function getBlackListStatus(address _address) external view returns (bool) {\r\n        return isBlackListed[_address];\r\n    }\r\n\r\n    mapping (address => bool) public isBlackListed;\r\n    \r\n    function addBlackList(address _evilUser) public onlyOwnerAdmin {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyOwnerAdmin {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n\r\n}\r\n\r\n//************* WhiteList *************\r\n// White list of free-of-fee.\r\n\r\ncontract WhiteList is Ownable {\r\n\r\n    function getWhiteListStatus(address _address) external view returns (bool) {\r\n        return isWhiteListed[_address];\r\n    }\r\n\r\n    mapping (address => bool) public isWhiteListed;\r\n    \r\n    function addWhiteList(address _User) public onlyOwnerAdmin {\r\n        isWhiteListed[_User] = true;\r\n        emit AddedWhiteList(_User);\r\n    }\r\n\r\n    function removeWhiteList(address _User) public onlyOwnerAdmin {\r\n        isWhiteListed[_User] = false;\r\n        emit RemovedWhiteList(_User);\r\n    }\r\n\r\n    event AddedWhiteList(address _user);\r\n    event RemovedWhiteList(address _user);\r\n\r\n}\r\n\r\n//************* KYC ********************\r\n\r\ncontract KYC is Ownable {\r\n    bool public needVerified = false;\r\n\r\n    mapping (address => bool) public verifiedAccount;\r\n\r\n    event VerifiedAccount(address target, bool Verified);\r\n    event Error_No_Binding_Address(address _from, address _to);\r\n    event OpenKYC();\r\n    event CloseKYC();\r\n\r\n    function openKYC() onlyOwnerAdmin public {\r\n        needVerified = true;\r\n        emit OpenKYC();\r\n    }\r\n\r\n    function closeKYC() onlyOwnerAdmin public {\r\n        needVerified = false;\r\n        emit CloseKYC();\r\n    }\r\n\r\n    function verifyAccount(address _target, bool _Verify) onlyOwnerAdmin public {\r\n        require(_target != address(0));\r\n        verifiedAccount[_target] = _Verify;\r\n        emit VerifiedAccount(_target, _Verify);\r\n    }\r\n\r\n    function checkIsKYC(address _from, address _to)public view returns (bool) {\r\n        return (!needVerified || (needVerified && verifiedAccount[_from] && verifiedAccount[_to]));\r\n    }\r\n}\r\n\r\n//************* TWDT Token *************\r\n\r\ncontract TWDTToken is ERC20,Ownable,KYC,BlackList,WhiteList {\r\n    using SafeMath for uint256;\r\n\r\n\t// Token Info.\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint256 public constant decimals = 6;\r\n\r\n    //Wallet address.\r\n    address public blackFundsWallet;\r\n    address public redeemWallet;\r\n    address public feeWallet;\r\n\r\n    //Transaction fees.\r\n    uint256 public feeRate = 0;\r\n    uint256 public minimumFee = 0;\r\n    uint256 public maximumFee = 0;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => bool) public frozenAccountSend;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event FrozenFundsSend(address target, bool frozen);\r\n    event Logs(string log);\r\n\r\n    event TransferredBlackFunds(address _blackListedUser, uint256 _balance);\r\n    event Redeem(uint256 amount);\r\n\r\n    event Fee(uint256 feeRate, uint256 minFee, uint256 maxFee);\r\n\r\n    constructor() public {\r\n        name = \"Taiwan Digital Token\";\r\n        symbol = \"TWDT-ETH\";\r\n        totalSupply = 100000000000*(10**decimals);\r\n        balanceOf[msg.sender] = totalSupply;\t\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256 balance) {\r\n        return balanceOf[_who];\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        // require(balanceOf[_from] >= _value);\r\n        // require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(!frozenAccount[_from]);                  \r\n        require(!frozenAccount[_to]); \r\n        require(!frozenAccountSend[_from]);\r\n        require(!isBlackListed[_from]);\r\n        if(checkIsKYC(_from, _to)){\r\n            //Round down.\r\n            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\r\n            if(isWhiteListed[_from] || isWhiteListed[_to]){\r\n                fee = 0;\r\n            }else if(fee != 0){\r\n                if (fee > maximumFee) {\r\n                    fee = maximumFee;\r\n                } else if (fee < minimumFee){\r\n                    fee = minimumFee;\r\n                }\r\n            }\r\n            \r\n            //_value must be equal to or larger than minimumFee, otherwise it will fail.\r\n            uint256 sendAmount = _value.sub(fee);\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(sendAmount);\r\n            if (fee > 0) {\r\n                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\r\n                emit Transfer(_from, feeWallet, fee);\r\n            }\r\n            emit Transfer(_from, _to, sendAmount);\r\n            return true;\r\n        } else {\r\n            //If not pass KYC, throw the event.\r\n            emit Error_No_Binding_Address(_from, _to);\r\n            return false;\r\n        }\r\n    }\r\n\t\r\n    function transfer(address _to, uint256 _value) public returns (bool){\t    \r\n        return _transferFrom(msg.sender,_to,_value);\r\n    }\r\n    function transferLog(address _to, uint256 _value,string logs) public returns (bool){\r\n        bool _status = _transferFrom(msg.sender,_to,_value);\r\n        emit Logs(logs);\r\n        return _status;\r\n    }\r\n\t\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        require(_spender != address(0));\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\t\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require(allowed[_from][msg.sender] >= _value);\r\n        // require(balanceOf[_from] >= _value);\r\n        // require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        require(!frozenAccountSend[_from]);\r\n        require(!isBlackListed[_from]); \r\n        if(checkIsKYC(_from, _to)){\r\n            //Round down.\r\n            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\r\n            if(isWhiteListed[_from] || isWhiteListed[_to]){\r\n                fee = 0;\r\n            }else if(fee != 0){\r\n                if (fee > maximumFee) {\r\n                    fee = maximumFee;\r\n                } else if (fee < minimumFee){\r\n                    fee = minimumFee;\r\n                }\r\n            }\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            //_value must be equal to or larger than minimumFee, otherwise it will fail.\r\n            uint256 sendAmount = _value.sub(fee);\r\n\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(sendAmount);\r\n            if (fee > 0) {\r\n                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\r\n                emit Transfer(_from, feeWallet, fee);\r\n            }\r\n            emit Transfer(_from, _to, sendAmount);\r\n            return true;\r\n        } else {\r\n            // If not pass KYC, throw the event.\r\n            emit Error_No_Binding_Address(_from, _to);\r\n            return false;\r\n        }\r\n    }\r\n        \r\n    function freezeAccount(address _target, bool _freeze) onlyOwnerAdmin public {\r\n        require(_target != address(0));\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n\r\n    function freezeAccountSend(address _target, bool _freeze) onlyOwnerAdmin public {\r\n        require(_target != address(0));\r\n        frozenAccountSend[_target] = _freeze;\r\n        emit FrozenFundsSend(_target, _freeze);\r\n    }\r\n\r\n    // Transfer of illegal funds.\r\n    // It can transfer tokens to blackFundsWallet only.\r\n    function transferBlackFunds(address _blackListedUser) public onlyOwnerAdmin {\r\n        require(blackFundsWallet != address(0));\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint256 dirtyFunds = balanceOf[_blackListedUser];\r\n        balanceOf[_blackListedUser] = 0;\r\n        balanceOf[blackFundsWallet] = balanceOf[blackFundsWallet].add(dirtyFunds);\r\n        emit Transfer(_blackListedUser, blackFundsWallet, dirtyFunds);\r\n        emit TransferredBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n\r\n    // Burn tokens when user stops rent.\r\n    // It can burn tokens from redeemWallet only.\r\n    function redeem(uint256 amount) public onlyOwnerAdmin {\r\n        require(redeemWallet != address(0));\r\n        require(totalSupply >= amount);\r\n        require(balanceOf[redeemWallet] >= amount);\r\n\r\n        totalSupply = totalSupply.sub(amount);\r\n        balanceOf[redeemWallet] = balanceOf[redeemWallet].sub(amount);\r\n        emit Transfer(redeemWallet, address(0), amount);\r\n        emit Redeem(amount);\r\n    }\r\n\r\n    // Mint a new amount of tokens.\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\r\n        require(_target != address(0));\r\n        require(_mintedAmount > 0);\r\n        require(!frozenAccount[_target]);\r\n        // require(totalSupply + _mintedAmount > totalSupply);\r\n        // require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\r\n        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\r\n        totalSupply = totalSupply.add(_mintedAmount);\r\n        emit Transfer(address(0), this, _mintedAmount);\r\n        emit Transfer(this, _target, _mintedAmount);\r\n    }\r\n\r\n    // Set the illegal fund wallet.\r\n    function setBlackFundsWallet(address _target) onlyOwner public {\r\n        blackFundsWallet = _target;\r\n    }\r\n\r\n    // Set the redeem wallet.\r\n    function setRedeemWallet(address _target) onlyOwner public {\r\n        redeemWallet = _target;\r\n    }\r\n\r\n    // Set the fee wallet.\r\n    function setFeeWallet(address _target) onlyOwner public {\r\n        feeWallet = _target;\r\n    }\r\n\r\n    // Set the token transfer fee.\r\n    // The maximum of feeRate is 0.1%.\r\n    // The maximum of fee is 100 TWDT.\r\n    function setFee(uint256 _feeRate, uint256 _minimumFee, uint256 _maximumFee) onlyOwner public {\r\n        require(_feeRate <= 10);\r\n        require(_maximumFee <= 100);\r\n        require(_minimumFee <= _maximumFee);\r\n\r\n        feeRate = _feeRate;\r\n        minimumFee = _minimumFee.mul(10**decimals);\r\n        maximumFee = _maximumFee.mul(10**decimals);\r\n\r\n        emit Fee(feeRate, minimumFee, maximumFee);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccountSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"checkIsKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_User\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifiedAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"name\":\"_minimumFee\",\"type\":\"uint256\"},{\"name\":\"_maximumFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"logs\",\"type\":\"string\"}],\"name\":\"transferLog\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWhiteListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"transferBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccountSend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_Verify\",\"type\":\"bool\"}],\"name\":\"verifyAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setRedeemWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setBlackFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_User\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blackFundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFundsSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"log\",\"type\":\"string\"}],\"name\":\"Logs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"TransferredBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Verified\",\"type\":\"bool\"}],\"name\":\"VerifiedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Error_No_Binding_Address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenKYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CloseKYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "TWDTToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ee25078d89444bd96ae8cb975024c3637df74256ab0d304974a1290d6c809369"}