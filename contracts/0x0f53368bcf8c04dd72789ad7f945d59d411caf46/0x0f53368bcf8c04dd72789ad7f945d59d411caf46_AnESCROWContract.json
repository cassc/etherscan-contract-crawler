{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() private view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AnESCROWContract is Context, IERC20, Ownable {\r\n    address public MarketingAddress;\r\n    address public BurnAddress;\r\n    address public TokenAddress;\r\n\r\n    uint256 _tax;\r\n\r\n    mapping(address => uint256) private _balance;\r\n\r\n    constructor() {\r\n        MarketingAddress = (0xC813eDb526830D24A2Ce5801d9Ef5026a3967529); //Marketing wallet\r\n        BurnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        TokenAddress = 0xC813eDb526830D24A2Ce5801d9Ef5026a3967529; //Token contract \r\n    }\r\n\r\n\r\n    function SetAddress(address newAddress) external onlyOwner() {\r\n        TokenAddress = newAddress; //both marketing and token address are same\r\n        MarketingAddress = newAddress; //both marketing and token address are same\r\n    }\r\n\r\n\r\n    function KarmicBurn(uint256 Burnamount) external onlyOwner() {\r\n        IERC20(TokenAddress).transfer(BurnAddress, Burnamount * 10**18);\r\n    }\r\n\r\n    function WithdrawFunds(address WithdrawltoAddress , uint256 WithdrawlAmount , uint256 TaxVar) external onlyOwner() {\r\n        if (TaxVar == 1) {\r\n            _tax = 5;\r\n        } else if (TaxVar == 2) {\r\n            _tax = 2;\r\n        } else {\r\n            _tax = 0;\r\n        }\r\n        uint256 tokenstowithdraw;\r\n        tokenstowithdraw = WithdrawlAmount * 10**18;\r\n        address withdrawlAddress;\r\n        withdrawlAddress = WithdrawltoAddress;\r\n\r\n\r\n        if (_tax != 0) {\r\n            //Tax transfer\r\n            uint256 taxTokens = (tokenstowithdraw * _tax) / 100;\r\n            uint256 transferWithdrawlAmount = tokenstowithdraw - taxTokens;\r\n            IERC20(TokenAddress).transfer(MarketingAddress, taxTokens);\r\n            IERC20(TokenAddress).transfer(withdrawlAddress, transferWithdrawlAmount);\r\n        } else {\r\n        IERC20(TokenAddress).transfer(withdrawlAddress, tokenstowithdraw);\r\n        }\r\n    }\r\n\r\n        //Use this in case ETH are sent to the contract by mistake\r\n    function rescueStuckETH(uint256 weiAmount) external onlyOwner() {\r\n        require(address(this).balance >= weiAmount, \"insufficient ETH balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n    \r\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    function rescueOtherStuckERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner() {\r\n        require(_tokenAddr != address(this));\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 1e9, \"Min transfer amt\");\r\n\r\n            _balance[from] -= amount;\r\n            _balance[to] += amount;\r\n\r\n            emit Transfer(from, to, amount);\r\n        \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Burnamount\",\"type\":\"uint256\"}],\"name\":\"KarmicBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WithdrawltoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawlAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TaxVar\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueOtherStuckERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnESCROWContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fb707b55d25640c2050c8ab1c77bdaf0e5fe44966896a6f20cfca3a7427e3a8"}