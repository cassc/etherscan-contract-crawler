{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.2;\r\n\r\n// interface need to claim rouge tokens from contract and handle upgraded functions\r\nabstract contract IERC20 {\r\n    function balanceOf(address owner) public view virtual returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) public virtual;\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function totalSupply() public view virtual returns (uint256);\r\n}\r\n\r\n// interface to potential future upgraded contract,\r\n// only essential write functions that need check that this contract is caller\r\nabstract contract IUpgradedToken {\r\n    function transferByLegacy(\r\n        address sender,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool);\r\n\r\n    function transferFromByLegacy(\r\n        address sender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool);\r\n\r\n    function approveByLegacy(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual;\r\n}\r\n\r\n//\r\n// The ultimate ERC20 token contract for TecraCoin project\r\n//\r\ncontract TcrToken {\r\n    //\r\n    // ERC20 basic information\r\n    //\r\n    uint8 public constant decimals = 8;\r\n    string public constant name = \"TecraCoin\";\r\n    string public constant symbol = \"TCR\";\r\n    uint256 private _totalSupply;\r\n    uint256 public constant maxSupply = 21000000000000000;\r\n\r\n    string public constant version = \"1\";\r\n    uint256 public immutable getChainId;\r\n\r\n    //\r\n    // other flags, data and constants\r\n    //\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    bool public paused;\r\n\r\n    bool public deprecated;\r\n    address public upgradedAddress;\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    string private constant ERROR_DAS = \"Different array sizes\";\r\n    string private constant ERROR_BTL = \"Balance too low\";\r\n    string private constant ERROR_ATL = \"Allowance too low\";\r\n    string private constant ERROR_OO = \"Only Owner\";\r\n\r\n    //\r\n    // events\r\n    //\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event AddedToBlacklist(address indexed account);\r\n    event RemovedFromBlacklist(address indexed account);\r\n\r\n    //\r\n    // data stores\r\n    //\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => bool) public isBlacklisted;\r\n\r\n    mapping(address => bool) public isBlacklistAdmin;\r\n    mapping(address => bool) public isMinter;\r\n    mapping(address => bool) public isPauser;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    //\r\n    // contract constructor\r\n    //\r\n    constructor() {\r\n        owner = msg.sender;\r\n        getChainId = block.chainid;\r\n        // EIP712 Domain\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(version)),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    //\r\n    // \"approve\"\r\n    //\r\n    function approve(address spender, uint256 amount) external {\r\n        if (deprecated) {\r\n            return\r\n                IUpgradedToken(upgradedAddress).approveByLegacy(\r\n                    msg.sender,\r\n                    spender,\r\n                    amount\r\n                );\r\n        }\r\n        _approve(msg.sender, spender, amount);\r\n    }\r\n\r\n    //\r\n    // \"burnable\"\r\n    //\r\n    function burn(uint256 amount) external {\r\n        require(_balances[msg.sender] >= amount, ERROR_BTL);\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 amount) external {\r\n        require(_allowances[msg.sender][from] >= amount, ERROR_ATL);\r\n        require(_balances[from] >= amount, ERROR_BTL);\r\n        _approve(msg.sender, from, _allowances[msg.sender][from] - amount);\r\n        _burn(from, amount);\r\n    }\r\n\r\n    //\r\n    // \"transfer\"\r\n    //\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        if (deprecated) {\r\n            return\r\n                IUpgradedToken(upgradedAddress).transferByLegacy(\r\n                    msg.sender,\r\n                    to,\r\n                    amount\r\n                );\r\n        }\r\n        require(_balances[msg.sender] >= amount, ERROR_BTL);\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        if (deprecated) {\r\n            return\r\n                IUpgradedToken(upgradedAddress).transferFromByLegacy(\r\n                    msg.sender,\r\n                    from,\r\n                    to,\r\n                    amount\r\n                );\r\n        }\r\n        _allowanceTransfer(msg.sender, from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // non-ERC20 functionality\r\n    //\r\n    // Rouge tokens and ETH withdrawal\r\n    function acquire(address token) external onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner).transfer(address(this).balance);\r\n        } else {\r\n            uint256 amount = IERC20(token).balanceOf(address(this));\r\n            require(amount > 0, ERROR_BTL);\r\n            IERC20(token).transfer(owner, amount);\r\n        }\r\n    }\r\n\r\n    //\r\n    // \"blacklist\"\r\n    //\r\n    function addBlacklister(address user) external onlyOwner {\r\n        isBlacklistAdmin[user] = true;\r\n    }\r\n\r\n    function removeBlacklister(address user) external onlyOwner {\r\n        isBlacklistAdmin[user] = false;\r\n    }\r\n\r\n    modifier onlyBlacklister {\r\n        require(isBlacklistAdmin[msg.sender], \"Not a Blacklister\");\r\n        _;\r\n    }\r\n\r\n    modifier notOnBlacklist(address user) {\r\n        require(!isBlacklisted[user], \"Address on blacklist\");\r\n        _;\r\n    }\r\n\r\n    function addBlacklist(address user) external onlyBlacklister {\r\n        isBlacklisted[user] = true;\r\n        emit AddedToBlacklist(user);\r\n    }\r\n\r\n    function removeBlacklist(address user) external onlyBlacklister {\r\n        isBlacklisted[user] = false;\r\n        emit RemovedFromBlacklist(user);\r\n    }\r\n\r\n    function burnBlackFunds(address user) external onlyOwner {\r\n        require(isBlacklisted[user], \"Address not on blacklist\");\r\n        _burn(user, _balances[user]);\r\n    }\r\n\r\n    //\r\n    // \"bulk transfer\"\r\n    //\r\n    // transfer to list of address-amount\r\n    function bulkTransfer(address[] calldata to, uint256[] calldata amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(to.length == amount.length, ERROR_DAS);\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            require(_balances[msg.sender] >= amount[i], ERROR_BTL);\r\n            _transfer(msg.sender, to[i], amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // transferFrom to list of address-amount\r\n    function bulkTransferFrom(\r\n        address from,\r\n        address[] calldata to,\r\n        uint256[] calldata amount\r\n    ) external returns (bool) {\r\n        require(to.length == amount.length, ERROR_DAS);\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _allowanceTransfer(msg.sender, from, to[i], amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // send same amount to multiple addresses\r\n    function bulkTransfer(address[] calldata to, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(_balances[msg.sender] >= amount * to.length, ERROR_BTL);\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(msg.sender, to[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // send same amount to multiple addresses by allowance\r\n    function bulkTransferFrom(\r\n        address from,\r\n        address[] calldata to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(_balances[from] >= amount * to.length, ERROR_BTL);\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _allowanceTransfer(msg.sender, from, to[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // \"mint\"\r\n    //\r\n    modifier onlyMinter {\r\n        require(isMinter[msg.sender], \"Not a Minter\");\r\n        _;\r\n    }\r\n\r\n    function addMinter(address user) external onlyOwner {\r\n        isMinter[user] = true;\r\n    }\r\n\r\n    function removeMinter(address user) external onlyOwner {\r\n        isMinter[user] = false;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyMinter {\r\n        _balances[to] += amount;\r\n        _totalSupply += amount;\r\n        require(_totalSupply < maxSupply, \"You can not mine that much\");\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    //\r\n    // \"ownable\"\r\n    //\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, ERROR_OO);\r\n        _;\r\n    }\r\n\r\n    function giveOwnership(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwner, ERROR_OO);\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //\r\n    // \"pausable\"\r\n    //\r\n    function addPauser(address user) external onlyOwner {\r\n        isPauser[user] = true;\r\n    }\r\n\r\n    function removePauser(address user) external onlyOwner {\r\n        isPauser[user] = false;\r\n    }\r\n\r\n    modifier onlyPauser {\r\n        require(isPauser[msg.sender], \"Not a Pauser\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyPauser notPaused {\r\n        paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    function unpause() external onlyPauser {\r\n        require(paused, \"Contract not paused\");\r\n        paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    //\r\n    // \"permit\"\r\n    // Uniswap integration EIP-2612\r\n    //\r\n    function permit(\r\n        address user,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"permit: EXPIRED\");\r\n        bytes32 digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            PERMIT_TYPEHASH,\r\n                            user,\r\n                            spender,\r\n                            value,\r\n                            nonces[user]++,\r\n                            deadline\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == user,\r\n            \"permit: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(user, spender, value);\r\n    }\r\n\r\n    //\r\n    // upgrade contract\r\n    //\r\n    function upgrade(address token) external onlyOwner {\r\n        deprecated = true;\r\n        upgradedAddress = token;\r\n    }\r\n\r\n    //\r\n    // ERC20 view functions\r\n    //\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        if (deprecated) {\r\n            return IERC20(upgradedAddress).balanceOf(account);\r\n        }\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address account, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (deprecated) {\r\n            return IERC20(upgradedAddress).allowance(account, spender);\r\n        }\r\n        return _allowances[account][spender];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        if (deprecated) {\r\n            return IERC20(upgradedAddress).totalSupply();\r\n        }\r\n        return _totalSupply;\r\n    }\r\n\r\n    //\r\n    // internal functions\r\n    //\r\n    function _approve(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) private notOnBlacklist(account) notOnBlacklist(spender) notPaused {\r\n        _allowances[account][spender] = amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n\r\n    function _allowanceTransfer(\r\n        address spender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(_allowances[from][spender] >= amount, ERROR_ATL);\r\n        require(_balances[from] >= amount, ERROR_BTL);\r\n\r\n        // exception for Uniswap \"approve forever\"\r\n        if (_allowances[from][spender] != type(uint256).max) {\r\n            _approve(from, spender, _allowances[from][spender] - amount);\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) private notPaused {\r\n        _balances[from] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private notOnBlacklist(from) notOnBlacklist(to) notPaused {\r\n        require(to != address(0), \"Use burn instead\");\r\n        require(from != address(0), \"What a Terrible Failure\");\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\n// rav3n_pl was here", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"acquire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bulkTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"burnBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"giveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TcrToken", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c43ae7a63fd8169f79a352397f807aba50009ac72867eabcdaeeeced082457e0"}