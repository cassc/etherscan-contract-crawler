{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SnapshotHackToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.21;\\n\\nimport \\\"ITokenLocker.sol\\\";\\n\\ncontract PrismaSnapshotMockToken {\\n    string public constant name = \\\"Prisma Snapshot Vote\\\";\\n\\n    string public constant symbol = \\\"PRISMA-SNAP\\\";\\n\\n    uint256 public constant decimals = 18;\\n\\n    ITokenLocker public constant locker = ITokenLocker(0x3f78544364c3eCcDCe4d9C89a630AEa26122829d);\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return locker.getAccountWeight(account) * 1e18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return locker.getTotalWeight() * 1e18;\\n    }\\n}\\n\"\r\n    },\r\n    \"ITokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenLocker {\\n    struct LockData {\\n        uint256 amount;\\n        uint256 weeksToUnlock;\\n    }\\n    struct ExtendLockData {\\n        uint256 amount;\\n        uint256 currentWeeks;\\n        uint256 newWeeks;\\n    }\\n\\n    event LockCreated(address indexed account, uint256 amount, uint256 _weeks);\\n    event LockExtended(address indexed account, uint256 amount, uint256 _weeks, uint256 newWeeks);\\n    event LocksCreated(address indexed account, LockData[] newLocks);\\n    event LocksExtended(address indexed account, ExtendLockData[] locks);\\n    event LocksFrozen(address indexed account, uint256 amount);\\n    event LocksUnfrozen(address indexed account, uint256 amount);\\n    event LocksWithdrawn(address indexed account, uint256 withdrawn, uint256 penalty);\\n\\n    function extendLock(uint256 _amount, uint256 _weeks, uint256 _newWeeks) external returns (bool);\\n\\n    function extendMany(ExtendLockData[] calldata newExtendLocks) external returns (bool);\\n\\n    function freeze() external;\\n\\n    function getAccountWeightWrite(address account) external returns (uint256);\\n\\n    function getTotalWeightWrite() external returns (uint256);\\n\\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\\n\\n    function lockMany(address _account, LockData[] calldata newLocks) external returns (bool);\\n\\n    function setPenaltyWithdrawalsEnabled(bool _enabled) external returns (bool);\\n\\n    function unfreeze(bool keepIncentivesVote) external;\\n\\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\\n\\n    function withdrawWithPenalty(uint256 amountToWithdraw) external returns (uint256);\\n\\n    function MAX_LOCK_WEEKS() external view returns (uint256);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function getAccountActiveLocks(\\n        address account,\\n        uint256 minWeeks\\n    ) external view returns (LockData[] memory lockData, uint256 frozenAmount);\\n\\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\\n\\n    function getAccountWeight(address account) external view returns (uint256);\\n\\n    function getAccountWeightAt(address account, uint256 week) external view returns (uint256);\\n\\n    function getTotalWeight() external view returns (uint256);\\n\\n    function getTotalWeightAt(uint256 week) external view returns (uint256);\\n\\n    function getWeek() external view returns (uint256 week);\\n\\n    function getWithdrawWithPenaltyAmounts(\\n        address account,\\n        uint256 amountToWithdraw\\n    ) external view returns (uint256 amountWithdrawn, uint256 penaltyAmountPaid);\\n\\n    function guardian() external view returns (address);\\n\\n    function incentiveVoter() external view returns (address);\\n\\n    function lockToTokenRatio() external view returns (uint256);\\n\\n    function lockToken() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function penaltyWithdrawalsEnabled() external view returns (bool);\\n\\n    function prismaCore() external view returns (address);\\n\\n    function totalDecayRate() external view returns (uint32);\\n\\n    function totalUpdatedWeek() external view returns (uint16);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"SnapshotHackToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrismaSnapshotMockToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}