{"SourceCode": "/**\r\n * \r\n * \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557     \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\r\n * \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\r\n * \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\r\n * \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\r\n * \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\r\n * \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\r\n *     \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557 \r\n *     \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d \r\n *     \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2588\u2554\u255d  \r\n *     \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d    \u255a\u2588\u2588\u2554\u255d   \r\n *     \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551    \r\n *     \u255a\u2550\u255d     \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d    \r\n *         \u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2557                         \r\n *         \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557   \u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557                        \r\n *          \u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551                        \r\n *         \u2588\u2588\u2554\u2550\u2550\u2550\u255d    \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551                        \r\n *         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d                        \r\n *        \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d                         \r\n *                                                    \r\n * Hello\r\n * I am a MillionMoney 2.0 (fixed)\r\n * My URL: https://million.money\r\n * \r\n */\r\n\r\npragma solidity 0.5.11;\r\n\r\ncontract MillionMoney {\r\n    address public ownerWallet;\r\n\r\n    MillionMoney public oldSC = MillionMoney(0x4Dcf60F0cb42c22Df36994CCBebd0b281C57003A);\r\n    uint oldSCUserId = 1;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n\r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 100 days;\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n\r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n\r\n        LEVEL_PRICE[1] = 0.03 ether;\r\n        LEVEL_PRICE[2] = 0.05 ether;\r\n        LEVEL_PRICE[3] = 0.1 ether;\r\n        LEVEL_PRICE[4] = 0.4 ether;\r\n        LEVEL_PRICE[5] = 1 ether;\r\n        LEVEL_PRICE[6] = 2.5 ether;\r\n        LEVEL_PRICE[7] = 5 ether;\r\n        LEVEL_PRICE[8] = 10 ether;\r\n        LEVEL_PRICE[9] = 20 ether;\r\n        LEVEL_PRICE[10] = 40 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        for(uint i = 1; i <= 10; i++) {\r\n            users[ownerWallet].levelExpired[i] = 55555555555;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n        else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n        else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n        else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n        else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n        else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n        else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n        else if(msg.value == LEVEL_PRICE[8]) level = 8;\r\n        else if(msg.value == LEVEL_PRICE[9]) level = 9;\r\n        else if(msg.value == LEVEL_PRICE[10]) level = 10;\r\n        else revert('Incorrect Value send');\r\n\r\n        if(users[msg.sender].isExist) buyLevel(level);\r\n        else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(users[referrer].isExist) refId = users[referrer].id;\r\n            else revert('Incorrect referrer');\r\n\r\n            regUser(refId);\r\n        }\r\n        else revert('Please buy first level for 0.03 ETH');\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(address(oldSC) == address(0), 'Initialize not finished');\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n        require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist'); \r\n        require(_level > 0 && _level <= 10, 'Incorrect level');\r\n\r\n        if(_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        }\r\n        else {\r\n            require(msg.value == LEVEL_PRICE[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0) users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            else users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n        }\r\n\r\n        payForLevel(_level, msg.sender);\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    \r\n    function syncWithOldSC(uint limit) public {\r\n        require(address(oldSC) != address(0), 'Initialize closed');\r\n        require(msg.sender == ownerWallet, 'Access denied');\r\n\r\n        for(uint i = 0; i < limit; i++) {\r\n            address user = oldSC.userList(oldSCUserId);\r\n            (bool isExist,, uint referrerID) = oldSC.users(user);\r\n\r\n            if(isExist) {\r\n                oldSCUserId++;\r\n                \r\n                address ref = oldSC.userList(referrerID);\r\n\r\n                if(!users[user].isExist && users[ref].isExist) {\r\n                    users[user].isExist = true;\r\n                    users[user].id = ++currUserID;\r\n                    users[user].referrerID = users[ref].id;\r\n\r\n                    userList[currUserID] = user;\r\n                    users[ref].referral.push(user);\r\n\r\n                    for(uint j = 1; j <= 8; j++) {\r\n                        users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);\r\n                    }\r\n\r\n                    emit regLevelEvent(user, ref, block.timestamp);\r\n                }\r\n            }\r\n            else break;\r\n        }\r\n    }\r\n\r\n    function syncClose() external {\r\n        require(address(oldSC) != address(0), 'Initialize already closed');\r\n        require(msg.sender == ownerWallet, 'Access denied');\r\n\r\n        oldSC = MillionMoney(0);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n\r\n        if(_level == 1 || _level == 6) {\r\n            referer = userList[users[_user].referrerID];\r\n        }\r\n        else if(_level == 2 || _level == 7) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 3 || _level == 8) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 4 || _level == 9) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n        else if(_level == 5 || _level == 10) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n\r\n        if(!users[referer].isExist) referer = userList[1];\r\n\r\n        bool sent = false;\r\n        if(users[referer].levelExpired[_level] >= now) {\r\n            sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);\r\n\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n            }\r\n        }\r\n        if(!sent) {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n\r\n            payForLevel(_level, referer);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n        address[] memory referrals = new address[](126);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 126; i++) {\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if(i < 62) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"syncClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldSC\",\"outputs\":[{\"internalType\":\"contract MillionMoney\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"syncWithOldSC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]", "ContractName": "MillionMoney", "CompilerVersion": "v0.5.11+commit.c082d0b4", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://223798ee6ba5656c1ee2ba7b019faacd730f65292608b74ef211690afd13f065"}