{"SourceCode": "{\"AccountFrozenBalances.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract AccountFrozenBalances {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private frozen_balances;\\r\\n\\r\\n    function _frozen_add(address _account, uint256 _amount) internal returns (bool) {\\r\\n        frozen_balances[_account] = frozen_balances[_account].add(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _frozen_sub(address _account, uint256 _amount) internal returns (bool) {\\r\\n        frozen_balances[_account] = frozen_balances[_account].sub(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _frozen_balanceOf(address _account) internal view returns (uint) {\\r\\n        return frozen_balances[_account];\\r\\n    }\\r\\n}\"},\"Burnable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Whitelisted.sol\\\";\\r\\n\\r\\ncontract Burnable {\\r\\n    bool private _burnallow;\\r\\n    address private _burner;\\r\\n    address public pendingBurner;\\r\\n\\r\\n    modifier whenBurn() {\\r\\n        require(_burnallow, \\\"burnable: can\\u0027t burn\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(msg.sender == _burner, \\\"caller is not a burner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingBurner() {\\r\\n        require(msg.sender == pendingBurner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BurnerTransferred(address indexed previousBurner, address indexed newBurner);\\r\\n\\r\\n    constructor () internal {\\r\\n        _burnallow = true;\\r\\n        _burner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function burnallow() public view returns (bool) {\\r\\n        return _burnallow;\\r\\n    }\\r\\n\\r\\n    function burner() public view returns (address) {\\r\\n        return _burner;\\r\\n    }\\r\\n\\r\\n    function burnTrigger() public onlyBurner {\\r\\n        _burnallow = !_burnallow;\\r\\n    }\\r\\n\\r\\n    function transferWhitelistAdmin(address newBurner) public onlyBurner {\\r\\n        pendingBurner = newBurner;\\r\\n    }\\r\\n\\r\\n    function claimBurner() public onlyPendingBurner {\\r\\n        emit BurnerTransferred(_burner, pendingBurner);\\r\\n        _burner = pendingBurner;\\r\\n        pendingBurner = address(0);\\r\\n    }\\r\\n}\"},\"HuptexERC20.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./TokenRecipient.sol\\\";\\r\\n\\r\\ncontract HuptexToken is AccountFrozenBalances, Ownable, Whitelisted, Burnable, Pausable, Mintable, Meltable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals;\\r\\n\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n\\r\\n    modifier canTransfer() {\\r\\n        if(paused()){\\r\\n            require (isWhitelisted(msg.sender) == true, \\\"can\\u0027t perform an action\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    event Freeze(address indexed from, uint256 amount);\\r\\n    event Melt(address indexed from, uint256 amount);\\r\\n    event MintFrozen(address indexed to, uint256 amount);\\r\\n    event FrozenTransfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n        mint(msg.sender, 100);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account].add(_frozen_balanceOf(account));\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public canTransfer returns (bool) {\\r\\n        require(recipient != address(this), \\\"can\\u0027t transfer tokens to the contract address\\\");\\r\\n\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /* Approve and then communicate the approved contract in a single tx */\\r\\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\\r\\n        TokenRecipient spender = TokenRecipient(_spender);\\r\\n        if (approve(_spender, _value)) {\\r\\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public canTransfer returns (bool) {\\r\\n        require(recipient != address(this), \\\"can\\u0027t transfer tokens to the contract address\\\");\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\r\\n        _mint(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public whenBurn {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public whenBurn {\\r\\n        _burnFrom(account, amount);\\r\\n    }\\r\\n\\r\\n    function destroy(address account, uint256 amount) public onlyOwner {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function destroyFrozen(address account, uint256 amount) public onlyOwner {\\r\\n        _burnFrozen(account, amount);\\r\\n    }\\r\\n\\r\\n    function mintBatchToken(address[] calldata accounts, uint256[] calldata amounts) external onlyMinter returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"mintBatchToken: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"mintBatchToken: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _mint(accounts[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrozenToken(address from, address to, uint256 amount) public onlyOwner returns (bool) {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _frozen_sub(from, amount);\\r\\n        _frozen_add(to, amount);\\r\\n\\r\\n        emit FrozenTransfer(from, to, amount);\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function freezeTokens(address account, uint256 amount) public onlyOwner returns (bool) {\\r\\n        _freeze(account, amount);\\r\\n        emit Transfer(account, address(this), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function meltTokens(address account, uint256 amount) public onlyMelter returns (bool) {\\r\\n        _melt(account, amount);\\r\\n        emit Transfer(address(this), account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintFrozenTokens(address account, uint256 amount) public onlyMinter returns (bool) {\\r\\n        _mintfrozen(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintBatchFrozenTokens(address[] calldata accounts, uint256[] calldata amounts) external onlyMinter returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"mintBatchFrozenTokens: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"mintBatchFrozenTokens: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _mintfrozen(accounts[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function meltBatchTokens(address[] calldata accounts, uint256[] calldata amounts) external onlyMelter returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"mintBatchFrozenTokens: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"mintBatchFrozenTokens: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _melt(accounts[i], amounts[i]);\\r\\n            emit Transfer(address(this), accounts[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        require(account != address(this), \\\"ERC20: mint to the contract address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: mint amount should be \\u003e 0\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(this), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(this), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address _owner, address spender, uint256 value) internal {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[_owner][spender] = value;\\r\\n        emit Approval(_owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\r\\n    }\\r\\n\\r\\n    function _freeze(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: freeze from the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: freeze from the address: amount should be \\u003e 0\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        _frozen_add(account, amount);\\r\\n\\r\\n        emit Freeze(account, amount);\\r\\n    }\\r\\n\\r\\n    function _mintfrozen(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint frozen to the zero address\\\");\\r\\n        require(account != address(this), \\\"ERC20: mint frozen to the contract address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: mint frozen amount should be \\u003e 0\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n        emit Transfer(address(this), account, amount);\\r\\n\\r\\n        _frozen_add(account, amount);\\r\\n\\r\\n        emit MintFrozen(account, amount);\\r\\n    }\\r\\n\\r\\n    function _melt(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: melt from the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: melt from the address: value should be \\u003e 0\\\");\\r\\n        require(_frozen_balanceOf(account) \\u003e= amount, \\\"ERC20: melt from the address: balance \\u003c amount\\\");\\r\\n\\r\\n        _frozen_sub(account, amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n\\r\\n        emit Melt(account, amount);\\r\\n    }\\r\\n\\r\\n    function _burnFrozen(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: frozen burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        _frozen_sub(account, amount);\\r\\n\\r\\n        emit Transfer(account, address(this), amount);\\r\\n    }\\r\\n}\"},\"Meltable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Burnable.sol\\\";\\r\\n\\r\\ncontract Meltable {\\r\\n    mapping (address =\\u003e bool) private _melters;\\r\\n    address private _melteradmin;\\r\\n    address public pendingMelterAdmin;\\r\\n\\r\\n    modifier onlyMelterAdmin() {\\r\\n        require (msg.sender == _melteradmin, \\\"caller not a melter admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMelter() {\\r\\n        require (_melters[msg.sender] == true, \\\"can\\u0027t perform melt\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingMelterAdmin() {\\r\\n        require(msg.sender == pendingMelterAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event MelterTransferred(address indexed previousMelter, address indexed newMelter);\\r\\n\\r\\n    constructor () internal {\\r\\n        _melteradmin = msg.sender;\\r\\n        _melters[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function melteradmin() public view returns (address) {\\r\\n        return _melteradmin;\\r\\n    }\\r\\n\\r\\n    function addToMelters(address account) public onlyMelterAdmin {\\r\\n        _melters[account] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromMelters(address account) public onlyMelterAdmin {\\r\\n        _melters[account] = false;\\r\\n    }\\r\\n\\r\\n    function transferMelterAdmin(address newMelter) public onlyMelterAdmin {\\r\\n        pendingMelterAdmin = newMelter;\\r\\n    }\\r\\n\\r\\n    function claimMelterAdmin() public onlyPendingMelterAdmin {\\r\\n        emit MelterTransferred(_melteradmin, pendingMelterAdmin);\\r\\n        _melteradmin = pendingMelterAdmin;\\r\\n        pendingMelterAdmin = address(0);\\r\\n    }\\r\\n}\"},\"Mintable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Meltable.sol\\\";\\r\\n\\r\\ncontract Mintable {\\r\\n    mapping (address =\\u003e bool) private _minters;\\r\\n    address private _minteradmin;\\r\\n    address public pendingMinterAdmin;\\r\\n\\r\\n\\r\\n    modifier onlyMinterAdmin() {\\r\\n        require (msg.sender == _minteradmin, \\\"caller not a minter admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require (_minters[msg.sender] == true, \\\"can\\u0027t perform mint\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingMinterAdmin() {\\r\\n        require(msg.sender == pendingMinterAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event MinterTransferred(address indexed previousMinter, address indexed newMinter);\\r\\n\\r\\n    constructor () internal {\\r\\n        _minteradmin = msg.sender;\\r\\n        _minters[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function minteradmin() public view returns (address) {\\r\\n        return _minteradmin;\\r\\n    }\\r\\n\\r\\n    function addToMinters(address account) public onlyMinterAdmin {\\r\\n        _minters[account] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromMinters(address account) public onlyMinterAdmin {\\r\\n        _minters[account] = false;\\r\\n    }\\r\\n\\r\\n    function transferMinterAdmin(address newMinter) public onlyMinterAdmin {\\r\\n        pendingMinterAdmin = newMinter;\\r\\n    }\\r\\n\\r\\n    function claimMinterAdmin() public onlyPendingMinterAdmin {\\r\\n        emit MinterTransferred(_minteradmin, pendingMinterAdmin);\\r\\n        _minteradmin = pendingMinterAdmin;\\r\\n        pendingMinterAdmin = address(0);\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./AccountFrozenBalances.sol\\\";\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n    address public pendingOwner;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingOwner() {\\r\\n        require(msg.sender == pendingOwner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public onlyPendingOwner {\\r\\n        emit OwnershipTransferred(_owner, pendingOwner);\\r\\n        _owner = pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n}\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Mintable.sol\\\";\\r\\n\\r\\ncontract Pausable {\\r\\n    bool private _paused;\\r\\n    address private _pauser;\\r\\n    address public pendingPauser;\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(msg.sender == _pauser, \\\"caller is not a pauser\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingPauser() {\\r\\n        require(msg.sender == pendingPauser);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event PauserTransferred(address indexed previousPauser, address indexed newPauser);\\r\\n\\r\\n\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n        _pauser = msg.sender;\\r\\n    }\\r\\n\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    function pauser() public view returns (address) {\\r\\n        return _pauser;\\r\\n    }\\r\\n\\r\\n    function pauseTrigger() public onlyPauser {\\r\\n        _paused = !_paused;\\r\\n    }\\r\\n\\r\\n    function transferPauser(address newPauser) public onlyPauser {\\r\\n        pendingPauser = newPauser;\\r\\n    }\\r\\n\\r\\n    function claimPauser() public onlyPendingPauser {\\r\\n        emit PauserTransferred(_pauser, pendingPauser);\\r\\n        _pauser = pendingPauser;\\r\\n        pendingPauser = address(0);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\"},\"TokenRecipient.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n\\r\\ncontract TokenRecipient {\\r\\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public;\\r\\n}\"},\"Whitelisted.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Whitelisted {\\r\\n    address private _whitelistadmin;\\r\\n    address public pendingWhiteListAdmin;\\r\\n\\r\\n    mapping (address =\\u003e bool) private _whitelisted;\\r\\n\\r\\n    modifier onlyWhitelistAdmin() {\\r\\n        require(msg.sender == _whitelistadmin, \\\"caller is not admin of whitelist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingWhitelistAdmin() {\\r\\n        require(msg.sender == pendingWhiteListAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event WhitelistAdminTransferred(address indexed previousAdmin, address indexed newAdmin);\\r\\n\\r\\n    constructor () internal {\\r\\n        _whitelistadmin = msg.sender;\\r\\n        _whitelisted[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function whitelistadmin() public view returns (address){\\r\\n        return _whitelistadmin;\\r\\n    }\\r\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\r\\n        _whitelisted[account] = true;\\r\\n    }\\r\\n\\r\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\r\\n        _whitelisted[account] = false;\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address account) public view returns (bool) {\\r\\n        return _whitelisted[account];\\r\\n    }\\r\\n\\r\\n    function transferWhitelistAdmin(address newAdmin) public onlyWhitelistAdmin {\\r\\n        pendingWhiteListAdmin = newAdmin;\\r\\n    }\\r\\n\\r\\n    function claimWhitelistAdmin() public onlyPendingWhitelistAdmin {\\r\\n        emit WhitelistAdminTransferred(_whitelistadmin, pendingWhiteListAdmin);\\r\\n        _whitelistadmin = pendingWhiteListAdmin;\\r\\n        pendingWhiteListAdmin = address(0);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minteradmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTrigger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"meltTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnallow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMinterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMelterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromMelters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"melteradmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"meltBatchTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"transferPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMelter\",\"type\":\"address\"}],\"name\":\"transferMelterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchFrozenTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistadmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMelterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"transferWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFrozenTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMinterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToMelters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMinterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWhiteListAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrozenToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTrigger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Melt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FrozenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMelter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMelter\",\"type\":\"address\"}],\"name\":\"MelterTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBurner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"BurnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"WhitelistAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "HuptexToken", "CompilerVersion": "v0.5.11+commit.c082d0b4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006487570746578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034854580000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ecfda70fc6f5edb897c87a12b691b32396c2287851e4b16d7d6a511f11f31ef1"}