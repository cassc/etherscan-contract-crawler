{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/blueberry-core/contracts/liquidation/ConvexLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { BaseLiquidator } from \\\"./BaseLiquidator.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IBank } from \\\"../interfaces/IBank.sol\\\";\\n\\nimport { ICurveOracle } from \\\"../interfaces/ICurveOracle.sol\\\";\\nimport { ICurvePool } from \\\"../interfaces/curve/ICurvePool.sol\\\";\\nimport { IConvexSpell } from \\\"../interfaces/spell/IConvexSpell.sol\\\";\\nimport { ICvxBooster } from \\\"../interfaces/convex/ICvxBooster.sol\\\";\\nimport { ISoftVault } from \\\"../interfaces/ISoftVault.sol\\\";\\nimport { IWConvexBooster } from \\\"../interfaces/IWConvexBooster.sol\\\";\\n\\n/**\\n * @title ConvexLiquidator\\n * @author Blueberry Protocol\\n * @notice This contract is the liquidator for Convex Spells\\n * @dev Due to the complexity of Curve, a separate deployment for each unique Curve Spell is required\\n */\\ncontract ConvexLiquidator is BaseLiquidator {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The address of the associated Curve Oracle\\n    ICurveOracle internal _curveOracle;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the Liquidator for Convex Spells\\n     * @param bank Address of the Blueberry Bank\\n     * @param treasury Address of the treasury that receives liquidator bot profits\\n     * @param poolAddressesProvider AAVE poolAdddressesProvider address\\n     * @param convexSpell Address of the ConvexSpell\\n     * @param balancerVault Address of the Balancer Vault\\n     * @param swapRouter Address of the Uniswap V3 SwapRouter\\n     * @param weth Address of the WETH token\\n     * @param owner The owner of the contract\\n     */\\n    function initialize(\\n        IBank bank,\\n        address treasury,\\n        address poolAddressesProvider,\\n        address convexSpell,\\n        address balancerVault,\\n        address swapRouter,\\n        address weth,\\n        address owner\\n    ) external initializer {\\n        __Ownable2Step_init();\\n\\n        _initializeAavePoolInfo(poolAddressesProvider);\\n\\n        _bank = bank;\\n        _spell = convexSpell;\\n        _treasury = treasury;\\n        _balancerVault = balancerVault;\\n        _swapRouter = swapRouter;\\n\\n        _curveOracle = IConvexSpell(convexSpell).getCrvOracle();\\n\\n        _weth = weth;\\n        _transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc BaseLiquidator\\n    function _unwindPosition(\\n        IBank.Position memory posInfo,\\n        address softVault,\\n        address debtToken,\\n        uint256 debtAmount\\n    ) internal override {\\n        // Withdraw ERC1155 liquidiation\\n        (address[] memory rewardTokens, uint256[] memory rewards) = IWConvexBooster(posInfo.collToken).burn(\\n            posInfo.collId,\\n            posInfo.collateralSize\\n        );\\n\\n        // Withdraw lp from convexBooster\\n        (uint256 pid, ) = IWConvexBooster(posInfo.collToken).decodeId(posInfo.collId);\\n        ICvxBooster convexBooster = IWConvexBooster(posInfo.collToken).getCvxBooster();\\n\\n        (address lpToken, address token, , , , ) = convexBooster.poolInfo(pid);\\n        IERC20(token).forceApprove(address(convexBooster), IERC20(token).balanceOf(address(this)));\\n        convexBooster.withdraw(pid, IERC20(token).balanceOf(address(this)));\\n\\n        // Withdraw token from Curve Pool\\n        _exit(IERC20(lpToken), debtToken);\\n\\n        address underlyingToken = address(ISoftVault(softVault).getUnderlyingToken());\\n        /// Holding Reward Tokens, Underlying Tokens and Debt Tokens\\n        uint256 debtTokenBalance = IERC20(debtToken).balanceOf(address(this));\\n        uint256 uTokenAmt = IERC20Upgradeable(underlyingToken).balanceOf(address(this));\\n\\n        // Liquidate all reward tokens to debtTokens until we have enough to repay the debt\\n        uint256 rewardLength = rewardTokens.length;\\n        for (uint256 i = 0; i < rewardLength; ++i) {\\n            if (debtAmount > debtTokenBalance) {\\n                if (rewardTokens[i] != address(debtToken) && rewards[i] != 0) {\\n                    debtTokenBalance += _swap(rewardTokens[i], address(debtToken), rewards[i]);\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        // liquidate underlying token if we still don't have enough to repay the debt\\n        if (debtAmount > debtTokenBalance) {\\n            if (underlyingToken != address(debtToken) && uTokenAmt != 0) {\\n                _swap(underlyingToken, address(debtToken), uTokenAmt);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc BaseLiquidator\\n    function _exit(IERC20 lpToken, address dstToken) internal override {\\n        (address curvePool, , ) = _curveOracle.getPoolInfo(address(lpToken));\\n\\n        uint256 tokenIndex;\\n        for (uint256 i = 0; i < 4; i++) {\\n            try ICurvePool(curvePool).coins(i) returns (address coin) {\\n                if (coin == dstToken) {\\n                    tokenIndex = i;\\n                }\\n                // solhint-disable-next-line no-empty-blocks\\n            } catch {}\\n        }\\n\\n        uint256 lpTokenAmt = lpToken.balanceOf(address(this));\\n        lpToken.forceApprove(address(curvePool), lpTokenAmt);\\n\\n        ICurvePool(curvePool).remove_liquidity_one_coin(lpTokenAmt, int128(uint128(tokenIndex)), 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/liquidation/BaseLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { IPoolAddressesProvider } from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\n\\nimport \\\"../utils/BlueberryErrors.sol\\\" as Errors;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SwapRegistry } from \\\"./SwapRegistry.sol\\\";\\n\\nimport { IBank } from \\\"../interfaces/IBank.sol\\\";\\nimport { IBlueberryLiquidator, AutomationCompatibleInterface } from \\\"../interfaces/IBlueberryLiquidator.sol\\\";\\nimport { ISoftVault } from \\\"../interfaces/ISoftVault.sol\\\";\\n\\n/**\\n * @title BaseLiquidator\\n * @author BlueberryProtocol\\n * @notice This contract is the base contract for all liquidators to inherit from\\n * @dev Each spell will have its own liquidator contract\\n */\\nabstract contract BaseLiquidator is IBlueberryLiquidator, SwapRegistry, IERC1155Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The instance of the BlueberryBank contract\\n    IBank internal _bank;\\n\\n    /// @dev The address of the spell that this liquidator is for\\n    address internal _spell;\\n\\n    /// @dev The address of the treasury that will receive the profits of this bot\\n    address internal _treasury;\\n\\n    /// @dev The position id of the liquidation\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 internal _POS_ID;\\n\\n    /// @dev Aave LendingPool\\n    IPool private _pool;\\n\\n    /// @dev aave pool addresses provider\\n    IPoolAddressesProvider private _poolAddressesProvider;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc AutomationCompatibleInterface\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        uint nextPositionId = IBank(_bank).getNextPositionId();\\n\\n        for (uint i = 1; i < nextPositionId; ++i) {\\n            if (_bank.isLiquidatable(i)) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc AutomationCompatibleInterface\\n    function performUpkeep(bytes calldata performData) external override {\\n        (uint positionId, ) = abi.decode(performData, (uint256, bytes));\\n\\n        if (_bank.isLiquidatable(positionId)) {\\n            liquidate(positionId);\\n        } else {\\n            revert Errors.NOT_LIQUIDATABLE(positionId);\\n        }\\n    }\\n\\n    /// @inheritdoc IBlueberryLiquidator\\n    function liquidate(uint256 _positionId) public {\\n        IBank.Position memory posInfo = _bank.getPositionInfo(_positionId);\\n\\n        _bank.accrue(posInfo.debtToken);\\n\\n        // flash borrow the reserve tokens\\n        _POS_ID = _positionId;\\n\\n        _pool.flashLoanSimple(\\n            address(this),\\n            posInfo.debtToken,\\n            _bank.getPositionDebt(_positionId),\\n            abi.encode(msg.sender),\\n            0\\n        );\\n    }\\n\\n    /// @inheritdoc IBlueberryLiquidator\\n    function executeOperation(\\n        address asset, // DebtToken\\n        uint256 amount, // DebtAmount\\n        uint256 premium, // Fee\\n        address /*initiator*/,\\n        bytes calldata /*data*/\\n    ) external virtual override returns (bool) {\\n        if (msg.sender != address(_pool)) {\\n            revert Errors.UNAUTHORIZED();\\n        }\\n\\n        IBank.Position memory posInfo = _bank.getPositionInfo(_POS_ID);\\n        IBank.Bank memory bankInfo = _bank.getBankInfo(posInfo.underlyingToken);\\n\\n        // liquidate from bank\\n        uint256 uVaultShare = IERC20(bankInfo.softVault).balanceOf(address(this));\\n\\n        // forceApprove debtToken for bank and liquidate\\n        IERC20(asset).forceApprove(address(_bank), amount);\\n\\n        _bank.liquidate(_POS_ID, address(asset), amount);\\n\\n        // check if collToken (debtToken/asset), uVaultShare are received after liquidation\\n        uVaultShare = IERC20(bankInfo.softVault).balanceOf(address(this)) - uVaultShare;\\n\\n        // Withdraw SoftVault share to receive underlying token\\n        ISoftVault(bankInfo.softVault).withdraw(uVaultShare);\\n\\n        // Unwind position\\n        _unwindPosition(posInfo, bankInfo.softVault, asset, amount + premium);\\n\\n        // forceApprove aave pool to get back debt\\n        IERC20(asset).forceApprove(address(_pool), amount + premium);\\n\\n        // reset position id\\n        _POS_ID = 0;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Withdraws the balance of specified tokens from the contract\\n     * @param tokens The array of tokens to withdraw\\n     */\\n    function withdraw(address[] memory tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            token.transfer(_treasury, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the Aave Lending Pool and Aave Pool Address Provider during initialization\\n     * @param poolAddressesProvider Address of Aave's PoolAddressesProvider\\n     */\\n    function _initializeAavePoolInfo(address poolAddressesProvider) internal {\\n        _poolAddressesProvider = IPoolAddressesProvider(poolAddressesProvider);\\n        _pool = IPool(IPoolAddressesProvider(poolAddressesProvider).getPool());\\n    }\\n\\n    /**\\n     * @notice Swaps the source token for the destination token\\n     * @dev Swaps between the three major Dexes: Balancer, Curve, and Uniswap\\n     * @param srcToken The address of the source token\\n     * @param dstToken The address of the destination token\\n     * @param amount The amount of the source token to swap\\n     * @return amountReceived The amount of the destination token received\\n     */\\n    function _swap(address srcToken, address dstToken, uint256 amount) internal returns (uint256 amountReceived) {\\n        DexRoute route = _tokenToExchange[srcToken];\\n\\n        address tokenReceived;\\n        if (route == DexRoute.Balancer) {\\n            (tokenReceived, amountReceived) = _swapOnBalancer(srcToken, dstToken, amount);\\n        } else if (route == DexRoute.Curve) {\\n            (tokenReceived, amountReceived) = _swapOnCurve(srcToken, dstToken, amount);\\n        } else {\\n            (tokenReceived, amountReceived) = _swapOnUniswap(srcToken, dstToken, amount);\\n        }\\n\\n        // If the token received is not the same as the desired destination token, recursively swap until we\\n        // get the desired token. This will only happen in the event of a multi-hop swap\\n        if (tokenReceived != dstToken) {\\n            amountReceived = _swap(tokenReceived, dstToken, amountReceived);\\n        }\\n    }\\n\\n    /**\\n     * @notice Unwinds the users position, by burning the wrapper token and liquidating into the debt token\\n     * @dev This function will be implemented by the child liquidator contract for a specific integration\\n     * @param posInfo The Position information struct for the position that is being liquidated\\n     * @param softVault Address of the SoftVault contract that the position is using\\n     * @param debtToken The address of the debt token, this will be the same asset that will be flash-borrowed\\n     * @param debtAmount The amount of debt that needs to be repaid for the flash loan\\n     */\\n    function _unwindPosition(\\n        IBank.Position memory posInfo,\\n        address softVault,\\n        address debtToken,\\n        uint256 debtAmount\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @notice Single-sided exits the liquidity pool to receive the debt token\\n     * @param lpToken The address of the LP token of the pool that needs to be exited\\n     * @param debtToken The address of the debt token that should be received after exiting the pool\\n     */\\n    function _exit(IERC20 lpToken, address debtToken) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Required ERC1155 Overrides\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    function onERC1155Received(\\n        address /*operator*/,\\n        address /*from*/,\\n        uint256 /*id*/,\\n        uint256 /*value*/,\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return (this.onERC1155Received.selector);\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function supportsInterface(bytes4 /*interfaceId*/) external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\nimport { ICoreOracle } from \\\"./ICoreOracle.sol\\\";\\n\\n/**\\n * @title IBank\\n * @notice Interface for the bank operations, including lending, borrowing, and management of collateral positions.\\n */\\ninterface IBank {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       STRUCTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Represents the configuration and current state of a bank.\\n    struct Bank {\\n        bool isListed; /// @dev Indicates if this bank is active.\\n        uint8 index; /// @dev Index for reverse lookups.\\n        address hardVault; /// @dev Address of the hard vault.\\n        address softVault; /// @dev Address of the soft vault.\\n        address bToken; /// @dev Address of the bToken associated with the bank.\\n        uint256 totalShare; /// @dev Total shares of debt across all open positions.\\n        uint256 liqThreshold; /// @dev Liquidation threshold (e.g., 85% for volatile tokens,\\n        /// 90% for stablecoins). Base: 1e4\\n    }\\n\\n    /// @notice Represents a position in the bank, including both debt and collateral.\\n    struct Position {\\n        address owner; /// @dev Address of the position's owner.\\n        address collToken; /// @dev Address of the ERC1155 token used as collateral.\\n        address underlyingToken; /// @dev Address of the isolated underlying collateral token.\\n        address debtToken; /// @dev Address of the debt token.\\n        uint256 underlyingVaultShare; /// @dev Amount of vault share for isolated underlying collateral.\\n        uint256 collId; /// @dev Token ID of the ERC1155 collateral.\\n        uint256 collateralSize; /// @dev Amount of wrapped token used as collateral.\\n        uint256 debtShare; /// @dev Debt share of the given debt token for the bank.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a new bank is added by the owner.\\n    event AddBank(\\n        address token, /// @dev The primary token associated with the bank.\\n        address bToken, /// @dev The corresponding bToken for the bank.\\n        address softVault, /// @dev Address of the soft vault.\\n        address hardVault /// @dev Address of the hard vault.\\n    );\\n\\n    /// @notice Emitted when a bank is modified by the owner.\\n    event ModifyBank(\\n        address token, /// @dev The primary token associated with the bank.\\n        address bToken, /// @dev The corresponding bToken for the bank.\\n        address softVault, /// @dev Address of the soft vault.\\n        address hardVault /// @dev Address of the hard vault.\\n    );\\n\\n    /// @notice Emitted when the oracle's address is updated by the owner.\\n    event SetOracle(address oracle); /// New address of the oracle.\\n\\n    /// @notice Emitted when a Wrapped ERC1155 token is whitelisted or removed by the owner.\\n    event SetWhitelistERC1155(\\n        address indexed token, /// Address of the Wrapped ERC1155 token.\\n        bool isWhitelisted /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when a token is whitelisted or removed by the owner.\\n    event SetWhitelistToken(\\n        address indexed token, /// Address of the token.\\n        bool isWhitelisted /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when tokens are lent to the bank.\\n    event Lend(\\n        uint256 positionId, /// Position ID associated with the lending.\\n        address caller, /// Address of the spell caller.\\n        address token, /// Address of the lent token.\\n        uint256 amount /// Amount of tokens lent.\\n    );\\n\\n    /// @notice Emitted when lent tokens are withdrawn from the bank.\\n    event WithdrawLend(\\n        uint256 positionId, /// Position ID associated with the withdrawal.\\n        address caller, /// Address of the spell caller.\\n        address token, ///Address of the token being withdrawn.\\n        uint256 amount /// Amount of tokens withdrawn.\\n    );\\n\\n    /// @notice Emitted when a user borrows tokens from a bank.\\n    event Borrow(\\n        uint256 positionId, /// Position ID associated with the borrowing.\\n        address caller, /// Address of the spell caller that initiates the borrowing.\\n        address token, /// Token being borrowed.\\n        uint256 amount, /// Amount of tokens borrowed.\\n        uint256 share /// Debt share associated with the borrowed amount.\\n    );\\n\\n    /// @notice Emitted when a user repays borrowed tokens to a bank.\\n    event Repay(\\n        uint256 positionId, /// Position ID associated with the repayment.\\n        address caller, /// Address of the spell caller initiating the repayment.\\n        address token, /// Token being repaid.\\n        uint256 amount, /// Amount of tokens repaid.\\n        uint256 share /// Debt share associated with the repaid amount.\\n    );\\n\\n    /// @notice Emitted when a user adds tokens as collateral.\\n    event PutCollateral(\\n        uint256 positionId, /// Position ID associated with the collateral.\\n        address owner, /// Owner of the collateral position.\\n        address caller, /// Address of the spell caller adding the collateral.\\n        address token, /// Token used as collateral.\\n        uint256 id, /// ID of the wrapped token.\\n        uint256 amount /// Amount of tokens put as collateral.\\n    );\\n\\n    /// @notice Emitted when a user retrieves tokens from their collateral.\\n    event TakeCollateral(\\n        uint256 positionId, /// Position ID associated with the collateral.\\n        address caller, /// Address of the spell caller retrieving the collateral.\\n        address token, /// Token taken from the collateral.\\n        uint256 id, /// ID of the wrapped token.\\n        uint256 amount /// Amount of tokens taken from collateral.\\n    );\\n\\n    /// @notice Emitted when a position is liquidated.\\n    event Liquidate(\\n        uint256 positionId, /// Position ID being liquidated.\\n        address liquidator, /// Address of the user performing the liquidation.\\n        address debtToken, /// Debt token associated with the position.\\n        uint256 amount, /// Amount used for liquidation.\\n        uint256 share, /// Debt share associated with the liquidation.\\n        uint256 positionSize, /// Size of the position being liquidated.\\n        uint256 underlyingVaultSize /// Vault size underlying the liquidated position.\\n    );\\n\\n    /// @notice Emitted when a position is executed.\\n    event Execute(\\n        uint256 positionId, /// Position ID being executed.\\n        address owner /// Owner of the position.\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the next available position ID.\\n     * @return Next position ID.\\n     */\\n    function getNextPositionId() external view returns (uint256);\\n\\n    /// @notice Provides the protocol configuration settings.\\n    function getConfig() external view returns (IProtocolConfig);\\n\\n    /// @notice Provides the current oracle responsible for price feeds.\\n    function getOracle() external view returns (ICoreOracle);\\n\\n    /// @notice Provides all banks in the Blueberry Bank.\\n    function getAllBanks() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get the current FeeManager interface from the configuration.\\n     * @return An interface representing the current FeeManager.\\n     */\\n    function getFeeManager() external view returns (IFeeManager);\\n\\n    /**\\n     * @notice Returns whitelist status of a given token.\\n     * @param token Address of the token.\\n     */\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whitelist status of a given wrapped token.\\n     * @param token Address of the wrapped token.\\n     */\\n    function isWrappedTokenWhitelisted(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whitelist status of a given spell.\\n     * @param spell Address of the spell.\\n     */\\n    function isSpellWhitelisted(address spell) external view returns (bool);\\n\\n    /**\\n     * @dev Determine if lending is currently allowed based on the bank's status flags.\\n     * @notice Check the third-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether lending is permitted.\\n     */\\n    function isLendAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if withdrawing from lending is currently allowed based on the bank's status flags.\\n     * @notice Check the fourth-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether withdrawing from lending is permitted.\\n     */\\n    function isWithdrawLendAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if repayments are currently allowed based on the bank's status flags.\\n     * @notice Check the second-to-last bit of _bankStatus.\\n     * @return A boolean indicating whether repayments are permitted.\\n     */\\n    function isRepayAllowed() external view returns (bool);\\n\\n    /**\\n     * @dev Determine if borrowing is currently allowed based on the bank's status flags.\\n     * @notice Check the last bit of _bankStatus.\\n     * @return A boolean indicating whether borrowing is permitted.\\n     */\\n    function isBorrowAllowed() external view returns (bool);\\n\\n    /// @notice Fetches details of a bank given its token.\\n    function getBankInfo(address token) external view returns (Bank memory bank);\\n\\n    /**\\n     * @notice Gets the status of the bank\\n     * @return The status of the bank\\n     * @dev 1: Borrow is allowed\\n     *      2: Repay is allowed\\n     *      4: Lend is allowed\\n     *      8: WithdrawLend is allowed\\n     */\\n    function getBankStatus() external view returns (uint256);\\n\\n    /**\\n     * @dev Computes the total USD value of the debt of a given position.\\n     * @notice Ensure to call `accrue` beforehand to account for any interest changes.\\n     * @param positionId ID of the position to compute the debt value for.\\n     * @return debtValue Total USD value of the position's debt.\\n     */\\n    function getDebtValue(uint256 positionId) external view returns (uint256 debtValue);\\n\\n    /**\\n     * @notice Gets the repay resumed timestamp of the bank\\n     * @return The timestamp when repay is resumed\\n     */\\n    function getRepayResumedTimestamp() external view returns (uint256);\\n\\n    /**\\n     * @dev Computes the risk ratio of a specified position.\\n     * @notice A higher risk ratio implies greater risk associated with the position.\\n     * @dev    when:  riskRatio = (ov - pv) / cv\\n     *         where: riskRatio = (debt - positionValue) / isolatedCollateralValue\\n     * @param positionId ID of the position to assess risk for.\\n     * @return risk The risk ratio of the position (based on a scale of 1e4).\\n     */\\n    function getPositionRisk(uint256 positionId) external view returns (uint256 risk);\\n\\n    /**\\n     * @notice Retrieve the debt of a given position, considering the stored debt interest.\\n     * @dev Should call accrue first to obtain the current debt.\\n     * @param positionId The ID of the position to query.\\n     */\\n    function getPositionDebt(uint256 positionId) external view returns (uint256 debt);\\n\\n    /**\\n     * @notice Determines if a given position can be liquidated based on its risk ratio.\\n     * @param positionId ID of the position to check.\\n     * @return True if the position can be liquidated; otherwise, false.\\n     */\\n    function isLiquidatable(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @notice Computes the total USD value of the collateral of a given position.\\n     * @dev The returned value includes both the collateral and any pending rewards.\\n     * @param positionId ID of the position to compute the value for.\\n     * @return positionValue Total USD value of the collateral and pending rewards.\\n     */\\n    function getPositionValue(uint256 positionId) external view returns (uint256);\\n\\n    /**\\n     * @notice Computes the isolated collateral value for a particular position.\\n     * @dev Should call accrue first to get current debt.\\n     * @param positionId The unique ID of the position.\\n     * @return icollValue The value of the isolated collateral in USD.\\n     */\\n    function getIsolatedCollateralValue(uint256 positionId) external view returns (uint256 icollValue);\\n\\n    /**\\n     * @notice Provides comprehensive details about a position using its ID.\\n     * @param positionId The unique ID of the position.\\n     * @return A Position struct containing details of the position.\\n     */\\n    function getPositionInfo(uint256 positionId) external view returns (Position memory);\\n\\n    /**\\n     * @notice Fetches information about the currently active position.\\n     * @return A Position struct with details of the current position.\\n     */\\n    function getCurrentPositionInfo() external view returns (Position memory);\\n\\n    /**\\n     * @notice Triggers interest accumulation and fetches the updated borrow balance.\\n     * @param positionId The unique ID of the position.\\n     * @return The updated debt balance after accruing interest.\\n     */\\n    function currentPositionDebt(uint256 positionId) external returns (uint256);\\n\\n    /**\\n     * @dev Lend tokens to the bank as isolated collateral.\\n     * @dev Emit a {Lend} event.\\n     * @notice The tokens lent will be used as collateral in the bank and might earn interest or other rewards.\\n     * @param token The address of the token to lend.\\n     * @param amount The number of tokens to lend.\\n     */\\n    function lend(address token, uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraw isolated collateral tokens previously lent to the bank.\\n     * @dev Emit a {WithdrawLend} event.\\n     * @notice This will reduce the isolated collateral and might also reduce the position's overall health.\\n     * @param token The address of the isolated collateral token to withdraw.\\n     * @param shareAmount The number of vault share tokens to withdraw.\\n     */\\n    function withdrawLend(address token, uint256 shareAmount) external;\\n\\n    /**\\n     * @notice Allows users to borrow tokens from the specified bank.\\n     * @dev This function must only be called from a spell while under execution.\\n     * @dev Emit a {Borrow} event.\\n     * @param token The token to borrow from the bank.\\n     * @param amount The amount of tokens the user wishes to borrow.\\n     * @return borrowedAmount Returns the actual amount borrowed from the bank.\\n     */\\n    function borrow(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Executes a specific action on a position.\\n     * @dev Emit an {Execute} event.\\n     * @notice This can be used for various operations like adjusting collateral, repaying debt, etc.\\n     * @param positionId Unique identifier of the position, or zero for a new position.\\n     * @param spell Address of the contract (\\\"spell\\\") that contains the logic for the action to be executed.\\n     * @param data Data payload to pass to the spell for execution.\\n     */\\n    function execute(uint256 positionId, address spell, bytes memory data) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to repay their borrowed tokens to the bank.\\n     * @dev This function must only be called while under execution.\\n     * @dev Emit a {Repay} event.\\n     * @param token The token to repay to the bank.\\n     * @param amountCall The amount of tokens to be repaid.\\n     */\\n    function repay(address token, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Allows users to provide additional collateral.\\n     * @dev Must only be called during execution.\\n     * @param collToken The ERC1155 token wrapped for collateral (i.e., Wrapped token of LP).\\n     * @param collId The token ID for collateral (i.e., uint256 format of LP address).\\n     * @param amountCall The amount of tokens to add as collateral.\\n     */\\n    function putCollateral(address collToken, uint256 collId, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Allows users to withdraw a portion of their collateral.\\n     * @dev Must only be called during execution.\\n     * @param amount The amount of tokens to be withdrawn as collateral.\\n     * @return Returns the amount of collateral withdrawn.\\n     */\\n    function takeCollateral(uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Liquidates a position by repaying its debt and taking the collateral.\\n     * @dev Emit a {Liquidate} event.\\n     * @notice Liquidation can only be triggered if the position is deemed liquidatable\\n     *         and other conditions are met.\\n     * @param positionId The unique identifier of the position to liquidate.\\n     * @param debtToken The token in which the debt is denominated.\\n     * @param amountCall The amount of debt to be repaid when calling transferFrom.\\n     */\\n    function liquidate(uint256 positionId, address debtToken, uint256 amountCall) external;\\n\\n    /**\\n     * @notice Accrues interest for a given token.\\n     * @param token Address of the token to accrue interest for.\\n     */\\n    function accrue(address token) external;\\n\\n    /**\\n     * @notice Accrues interest for a given list of tokens.\\n     * @param tokens An array of token addresses to accrue interest for.\\n     */\\n    function accrueAll(address[] memory tokens) external;\\n\\n    /* solhint-disable func-name-mixedcase */\\n\\n    /**\\n     * @notice Returns the current executor's address, which is the owner of the current position.\\n     * @return Address of the current executor.\\n     */\\n    function EXECUTOR() external view returns (address);\\n\\n    /**\\n     * @notice Returns the ID of the currently executed position.\\n     * @return Current position ID.\\n     */\\n    function POSITION_ID() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the currently executed bank.\\n     * @return Current bank address.\\n     */\\n    function SPELL() external view returns (address);\\n\\n    /* solhint-enable func-name-mixedcase */\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ICurveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IBaseOracle } from \\\"./IBaseOracle.sol\\\";\\nimport { ICurveAddressProvider } from \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\n\\n/**\\n * @title ICurveOracle\\n * @notice Interface for the CurveOracle contract which provides price feed data for assets on Curve Finance.\\n */\\ninterface ICurveOracle is IBaseOracle {\\n    /**\\n     * @notice Fetches relevant information about a Curve liquidity pool.\\n     * @param crvLp The address of the Curve liquidity pool token (LP token).\\n     * @return pool Address of the pool contract.\\n     * @return coins A list of underlying tokens in the Curve liquidity pool.\\n     * @return virtualPrice The current virtual price of the LP token for the given Curve liquidity pool.\\n     */\\n    function getPoolInfo(address crvLp) external returns (address pool, address[] memory coins, uint256 virtualPrice);\\n\\n    /// @notice Returns the Curve Address Provider.\\n    function getAddressProvider() external view returns (ICurveAddressProvider);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/curve/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface ICurvePool {\\n    function add_liquidity(uint256[2] calldata, uint256) external payable;\\n\\n    function add_liquidity(uint256[3] calldata, uint256) external payable;\\n\\n    function add_liquidity(uint256[4] calldata, uint256) external payable;\\n\\n    function remove_liquidity(uint256, uint256[2] calldata) external;\\n\\n    function remove_liquidity(uint256, uint256[3] calldata) external;\\n\\n    function remove_liquidity(uint256, uint256[4] calldata) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata, uint256) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata, uint256) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata, uint256) external;\\n\\n    function remove_liquidity_one_coin(uint256, int128, uint256) external;\\n\\n    function exchange(uint256, uint128, uint256, uint256) external;\\n\\n    function remove_liquidity_one_coin(uint256, uint256, uint256, bool, address) external;\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address); // v1\\n\\n    function token() external view returns (address); // v2\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function withdraw_admin_fees() external;\\n\\n    function claim_admin_fees() external;\\n\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    // 3crv pool specific functions\\n\\n    function owner() external view returns (address);\\n\\n    function kill_me() external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/spell/IConvexSpell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IBasicSpell } from \\\"./IBasicSpell.sol\\\";\\nimport { ICurveOracle } from \\\"../ICurveOracle.sol\\\";\\nimport { IWConvexBooster } from \\\"../IWConvexBooster.sol\\\";\\n\\n/**\\n * @title IConvexSpell\\n * @notice Interface for the Convex Spell contract.\\n */\\ninterface IConvexSpell is IBasicSpell {\\n    struct ClosePositionFarmParam {\\n        ClosePosParam param;\\n        uint256[] amounts;\\n        bytes[] swapDatas;\\n    }\\n\\n    /**\\n     * @notice Closes an existing liquidity position, unstakes from Curve gauge, and swaps rewards.\\n     * @param closePosParam Struct containing all required parameters for closing a position.\\n     */\\n    function closePositionFarm(ClosePositionFarmParam calldata closePosParam) external;\\n\\n    /**\\n     * @notice Adds liquidity to a Curve pool with two underlying tokens and stakes in Curve gauge.\\n     * @param param Struct containing all required parameters for opening a position.\\n     * @param minLPMint Minimum LP tokens expected to mint for slippage control.\\n     */\\n    function openPositionFarm(OpenPosParam calldata param, uint256 minLPMint) external;\\n\\n    /**\\n     * @notice Adds a new strategy to the spell.\\n     * @param crvLp Address of the Curve LP token for the strategy.\\n     * @param minPosSize Minimum position size in USD for the strategy (with 1e18 precision).\\n     * @param maxPosSize Maximum position size in USD for the strategy (with 1e18 precision).\\n     */\\n    function addStrategy(address crvLp, uint256 minPosSize, uint256 maxPosSize) external;\\n\\n    /// @notice Returns the address of the Cvx oracle.\\n    function getCrvOracle() external view returns (ICurveOracle);\\n\\n    /// @notice Returns the address of the Cvx token.\\n    function getCvxToken() external view returns (address);\\n\\n    /// @notice Returns the address of the wrapped Aura Booster contract.\\n    function getWConvexBooster() external view returns (IWConvexBooster);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/convex/ICvxBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface ICvxBooster {\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns (bool);\\n\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns (bool);\\n\\n    function forceAddPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns (bool);\\n\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (address lptoken, address token, address gauge, address crvRewards, address stash, bool shutdown);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n\\n    function shutdownSystem() external;\\n\\n    function setUsedAddress(address[] memory) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ISoftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { IBErc20 } from \\\"./money-market/IBErc20.sol\\\";\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\n\\n/**\\n * @title ISoftVault\\n * @notice Interface for the SoftVault, allowing deposits and withdrawals of assets.\\n * @dev The SoftVault is responsible for handling user deposits,\\n *      withdrawals, and interactions with underlying Blueberry Money Market bTokens.\\n */\\ninterface ISoftVault is IERC20Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Event emitted when an account deposits assets.\\n     * @param account Address of the account that deposited.\\n     * @param amount The amount of underlying assets deposited.\\n     * @param shareAmount The corresponding amount of vault shares minted.\\n     */\\n    event Deposited(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /**\\n     * @notice Event emitted when an account withdraws assets.\\n     * @param account Address of the account that withdrew.\\n     * @param amount The amount of underlying assets withdrawn.\\n     * @param shareAmount The corresponding amount of vault shares burned.\\n     */\\n    event Withdrawn(address indexed account, uint256 amount, uint256 shareAmount);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the corresponding Blueberry Money Market bToken for this vault.\\n     * @return A Blueberry Money Market bToken interface.\\n     */\\n    function getBToken() external view returns (IBErc20);\\n\\n    /**\\n     * @notice Get the underlying ERC20 token for this vault.\\n     * @return An ERC20 interface of the underlying token.\\n     */\\n    function getUnderlyingToken() external view returns (IERC20Upgradeable);\\n\\n    /**\\n     * @notice Retrieves the protocol configuration for this vault.\\n     * @return Address of the protocol configuration.\\n     */\\n    function getConfig() external view returns (IProtocolConfig);\\n\\n    /**\\n     * @notice Deposit a specified amount of the underlying asset into the vault.\\n     * @dev This function will convert the deposited assets into the corresponding bToken.\\n     * @param amount The amount of the underlying asset to deposit.\\n     * @return shareAmount The amount of vault shares minted for the deposit.\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shareAmount);\\n\\n    /**\\n     * @notice Withdraw a specified amount of the underlying asset from the vault.\\n     * @dev This function will convert the corresponding bToken back into the underlying asset.\\n     * @param amount The amount of vault shares to redeem.\\n     * @return withdrawAmount The amount of the underlying asset withdrawn.\\n     */\\n    function withdraw(uint256 amount) external returns (uint256 withdrawAmount);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IWConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/* solhint-disable max-line-length */\\nimport { IERC1155Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n/* solhint-enable max-line-length */\\n\\nimport { IConvex } from \\\"./convex/IConvex.sol\\\";\\nimport { ICvxBooster } from \\\"./convex/ICvxBooster.sol\\\";\\nimport { IERC20Wrapper } from \\\"./IERC20Wrapper.sol\\\";\\nimport { ICvxBooster } from \\\"./convex/ICvxBooster.sol\\\";\\nimport { IPoolEscrowFactory } from \\\"../wrapper/escrow/interfaces/IPoolEscrowFactory.sol\\\";\\n\\n/**\\n * @title IWConvexBooster\\n * @author Interface for interacting with Convex pools represented as ERC1155 tokens.\\n * @notice Convex Pools allow users to stake liquidity pool tokens in return for CVX and other rewards.\\n */\\ninterface IWConvexBooster is IERC1155Upgradeable, IERC20Wrapper {\\n    /// @notice Emitted when a user stakes liquidity provider tokens and a new ERC1155 token is minted.\\n    event Minted(uint256 indexed id, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Emitted when a user burns an ERC1155 token to claim rewards and close their position.\\n    event Burned(uint256 indexed id, uint256 indexed pid, uint256 amount);\\n\\n    /**\\n     * @notice Encodes pool id and BAL per share into an ERC1155 token id\\n     * @param pid The pool id (The first 16-bits)\\n     * @param cvxPerShare CVX amount per share, which should be multiplied by 1e18 and is the last 240 bits.\\n     * @return The resulting ERC1155 token id\\n     */\\n    function encodeId(uint256 pid, uint256 cvxPerShare) external pure returns (uint256);\\n\\n    /**\\n     * @notice Decode an encoded ID into two separate uint values.\\n     * @param id The encoded uint ID to decode.\\n     * @return pid The pool ID representing the specific Convex pool.\\n     * @return cvxPerShare Original CVX amount per share, which should be multiplied by 1e18.\\n     */\\n    function decodeId(uint256 id) external pure returns (uint256 pid, uint256 cvxPerShare);\\n\\n    /**\\n     *\\n     * @param pid The pool ID representing the specific Convex pool.\\n     * @param amount The amount of liquidity provider tokens to stake.\\n     * @return id The ID of the newly minted ERC1155 token representing the staked position.\\n     */\\n    function mint(uint256 pid, uint256 amount) external returns (uint256 id);\\n\\n    /**\\n     * @notice Burn an ERC1155 token to redeem staked liquidity provider tokens and any earned rewards.\\n     * @param id The ID of the ERC1155 token representing the staked position.\\n     * @param amount The amount of ERC1155 tokens to burn.\\n     * @return rewardTokens An array of reward token addresses.\\n     * @return rewards An array of reward amounts corresponding to the reward token addresses.\\n     */\\n    function burn(\\n        uint256 id,\\n        uint256 amount\\n    ) external returns (address[] memory rewardTokens, uint256[] memory rewards);\\n\\n    /// @notice Get the Convex token's contract address.\\n    function getCvxToken() external view returns (IConvex);\\n\\n    /// @notice Get the Convex Booster contract address.\\n    function getCvxBooster() external view returns (ICvxBooster);\\n\\n    /// @notice Get the Pool Escrow Factory contract address.\\n    function getEscrowFactory() external view returns (IPoolEscrowFactory);\\n\\n    /**\\n     *\\n     * @param pid The pool ID representing the specific Convex pool.\\n     * @return lptoken The liquidity provider token's address for the specific pool.\\n     * @return token The reward token's address for the specific pool.\\n     * @return gauge The gauge contract's address for the specific pool.\\n     * @return crvRewards The Curve rewards contract's address associated with the specific pool.\\n     * @return stash The stash contract's address associated with the specific pool.\\n     * @return shutdown A boolean indicating if the pool is in shutdown mode.\\n     */\\n    function getPoolInfoFromPoolId(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (address lptoken, address token, address gauge, address crvRewards, address stash, bool shutdown);\\n\\n    /**\\n     * @notice Fetch the escrow for a given pool ID.\\n     * @param pid The pool ID representing the specific Convex pool.\\n     * @return The address of the escrow contract.\\n     */\\n    function getEscrow(uint256 pid) external view returns (address);\\n\\n    /**\\n     * @notice Fetch the length of the extra rewarder array for a given pool ID.\\n     * @param pid The pool ID representing the specific Convex pool.\\n     * @return The length of the extra rewarder array.\\n     */\\n    function extraRewardsLength(uint256 pid) external view returns (uint256);\\n\\n    /**\\n     * @notice Fetch the extra rewarder for a given pool ID and index.\\n     * @param pid The pool ID representing the specific Convex pool.\\n     * @param index The index to access in the extraRewarder array.\\n     * @return The address of the extra rewarder contract.\\n     */\\n    function getExtraRewarder(uint256 pid, uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Receive the starting rewardPerToken value for a specific reward token for a given tokenId.\\n     * @param tokenId The ID of the ERC1155 token representing the staked position.\\n     * @param token The address of the reward token.\\n     * @return The reward amount per token share.\\n     */\\n    function getInitialTokenPerShare(uint256 tokenId, address token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@aave/core-v3/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/utils/BlueberryErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\n/**\\n * @title BlueberryErrors\\n * @author BlueberryProtocol\\n * @notice containing all errors used in Blueberry protocol\\n */\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.22;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/// @notice Thrown when the caller is not authorized to call the function.\\nerror UNAUTHORIZED();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n/// @notice Thrown when a pool is subject to read-only reentrancy manipulation.\\nerror REENTRANCY_RISK(address pool);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\n\\n/// @notice Thrown when an incorrect debt token is provided.\\nerror INCORRECT_DEBT(address debtToken);\\n\\n/// @notice Thrown when a swap fails.\\nerror SWAP_FAILED(address swapToken);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a duplicate tokenId is added.\\nerror DUPLICATE_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank doesn't exist for an index.\\nerror BANK_NOT_EXIST(uint8 index);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/liquidation/SwapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../utils/BlueberryErrors.sol\\\" as Errors;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\nimport { IBalancerVault, IAsset } from \\\"../interfaces/balancer-v2/IBalancerVault.sol\\\";\\nimport { ICurvePool } from \\\"../interfaces/curve/ICurvePool.sol\\\";\\nimport { ISwapRegistry } from \\\"../interfaces/ISwapRegistry.sol\\\";\\n\\n/**\\n * @title SwapRegistry\\n * @author BlueberryProtocol\\n * @notice The SwapRegistry contract is used to register the DEX paths for liquidation swaps as\\n *         well as handle all execution of swaps.\\n */\\nabstract contract SwapRegistry is ISwapRegistry, Ownable2StepUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The address of the WETH token\\n    address internal _weth;\\n\\n    /// @dev The Balancer Vault address\\n    address internal _balancerVault;\\n\\n    /// @dev The address of the swap router\\n    address internal _swapRouter;\\n\\n    /// @notice Mapping of a token to the DEX to use for liquidation swaps\\n    mapping(address => DexRoute) internal _tokenToExchange;\\n\\n    /// @notice Mapping of a token pair to the poolId to use for liquidation swaps\\n    mapping(address => mapping(address => bytes32)) internal _balancerRoutes;\\n\\n    /// @notice Mapping of a token pair to curve pool to use for liquidation swaps\\n    mapping(address => mapping(address => address)) internal _curveRoutes;\\n\\n    /// @notice Mapping of a token to whether it is a protocol token\\n    mapping(address => bool) internal _isProtocolToken;\\n\\n    /// @inheritdoc ISwapRegistry\\n    function registerBalancerRoute(address srcToken, address dstToken, bytes32 poolId) external onlyOwner {\\n        if (srcToken == address(0) || dstToken == address(0)) {\\n            revert Errors.ZERO_ADDRESS();\\n        }\\n\\n        if (poolId == bytes32(0)) {\\n            revert Errors.ZERO_AMOUNT();\\n        }\\n\\n        _tokenToExchange[srcToken] = DexRoute.Balancer;\\n        _balancerRoutes[srcToken][dstToken] = poolId;\\n    }\\n\\n    /// @inheritdoc ISwapRegistry\\n    function registerCurveRoute(address srcToken, address dstToken, address pool) external onlyOwner {\\n        if (srcToken == address(0) || dstToken == address(0) || pool == address(0)) {\\n            revert Errors.ZERO_ADDRESS();\\n        }\\n\\n        _tokenToExchange[srcToken] = DexRoute.Curve;\\n        _curveRoutes[srcToken][dstToken] = pool;\\n    }\\n\\n    /// @inheritdoc ISwapRegistry\\n    function registerUniswapRoute(address srcToken) external onlyOwner {\\n        if (srcToken == address(0)) {\\n            revert Errors.ZERO_ADDRESS();\\n        }\\n\\n        _tokenToExchange[srcToken] = DexRoute.UniswapV3;\\n    }\\n\\n    /// @inheritdoc ISwapRegistry\\n    function setProtocolToken(address token, bool isProtocolToken) external onlyOwner {\\n        _isProtocolToken[token] = isProtocolToken;\\n    }\\n\\n    /**\\n     * @notice Swaps two tokens on Balancer\\n     * @dev Return values are in terms of the received token's decimals\\n     * @param srcToken The address of the token that will be sent\\n     * @param dstToken The address of the token that will be received\\n     * @param amount The amount of the source token to swap into the pool\\n     * @return tokenReceived The address of the token received\\n     * @return amountReceived The amount of the token received\\n     */\\n    function _swapOnBalancer(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amount\\n    ) internal returns (address tokenReceived, uint256 amountReceived) {\\n        if (IERC20(srcToken).balanceOf(address(this)) >= amount) {\\n            if (_isProtocolToken[srcToken]) {\\n                dstToken == address(_weth);\\n            }\\n\\n            IERC20(srcToken).forceApprove(_balancerVault, amount);\\n\\n            bytes32 poolId = _balancerRoutes[srcToken][dstToken];\\n\\n            if (poolId == bytes32(0)) {\\n                revert Errors.ZERO_AMOUNT();\\n            }\\n\\n            IBalancerVault.SingleSwap memory singleSwap;\\n            singleSwap.poolId = poolId;\\n            singleSwap.kind = IBalancerVault.SwapKind.GIVEN_IN;\\n            singleSwap.assetIn = IAsset(srcToken);\\n            singleSwap.assetOut = IAsset(dstToken);\\n            singleSwap.amount = amount;\\n\\n            IBalancerVault.FundManagement memory funds;\\n            funds.sender = address(this);\\n            funds.recipient = payable(address(this));\\n\\n            amountReceived = IBalancerVault(_balancerVault).swap(singleSwap, funds, 0, block.timestamp);\\n        }\\n        return (dstToken, amountReceived);\\n    }\\n\\n    /**\\n     * @notice Swaps two tokens on Curve\\n     * @dev Return values are in terms of the received token's decimals\\n     * @param srcToken The address of the token that will be sent\\n     * @param dstToken The address of the token that will be received\\n     * @param amount The amount of the source token to swap into the pool\\n     * @return tokenReceived The address of the token received\\n     * @return amountReceived The amount of the token received\\n     */\\n    function _swapOnCurve(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amount\\n    ) internal returns (address tokenReceived, uint256 amountReceived) {\\n        if (IERC20(srcToken).balanceOf(address(this)) >= amount) {\\n            if (_isProtocolToken[srcToken]) {\\n                dstToken = address(_weth);\\n            }\\n\\n            ICurvePool pool = ICurvePool(_curveRoutes[srcToken][dstToken]);\\n            IERC20(srcToken).forceApprove(address(pool), amount);\\n\\n            uint256 srcIndex;\\n            uint256 dstIndex;\\n            for (uint256 i = 0; i < 4; i++) {\\n                try pool.coins(i) returns (address coin) {\\n                    if (coin == srcToken) {\\n                        srcIndex = i;\\n                    } else if (coin == dstToken) {\\n                        dstIndex = i;\\n                    }\\n                    // solhint-disable-next-line no-empty-blocks\\n                } catch {}\\n\\n                if (srcIndex != 0 && dstIndex != 0) {\\n                    break;\\n                }\\n            }\\n            amountReceived = pool.exchange(srcIndex, dstIndex, amount, 0);\\n\\n            return (dstToken, amountReceived);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps two tokens on Uniswap\\n     * @dev Return values are in terms of the received token's decimals\\n     * @param srcToken The address of the token that will be sent\\n     * @param dstToken The address of the token that will be received\\n     * @param amount The amount of the source token to swap into the pool\\n     * @return tokenReceived The address of the token received\\n     * @return amountReceived The amount of the token received\\n     */\\n    function _swapOnUniswap(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amount\\n    ) internal returns (address tokenReceived, uint256 amountReceived) {\\n        if (IERC20(srcToken).balanceOf(address(this)) >= amount) {\\n            IERC20(srcToken).forceApprove(_swapRouter, amount);\\n\\n            amountReceived = ISwapRouter(_swapRouter).exactInputSingle(\\n                ISwapRouter.ExactInputSingleParams({\\n                    tokenIn: srcToken,\\n                    tokenOut: dstToken,\\n                    fee: 1e4,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: amount,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n        }\\n        return (dstToken, amountReceived);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IBlueberryLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\n/* solhint-disable max-line-length */\\nimport { AutomationCompatibleInterface } from \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n/* solhint-enable max-line-length */\\n\\ninterface IBlueberryLiquidator is AutomationCompatibleInterface {\\n    /**\\n     * @notice Liquidate position using a flash loan\\n     * @param positionId position id to liquidate\\n     */\\n    function liquidate(uint256 positionId) external;\\n\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed assets\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has approved the Pool to pull the total amount\\n     * @dev This function is only called if the flash loan was from Aave\\n     * @param asset The addresses of the flash-borrowed assets\\n     * @param amount The amounts of the flash-borrowed assets\\n     * @param premium The fee of each flash-borrowed asset\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IFeeManager } from \\\"./IFeeManager.sol\\\";\\n\\n/**\\n * @title IProtocolConfig\\n * @author BlueberryProtocol\\n * @notice Interface for the Protocol Configuration,\\n *         encapsulating various fees and related configuration parameters.\\n * @dev This interface defines methods to retrieve fees\\n *      and related parameters that govern the behavior of the protocol.\\n */\\ninterface IProtocolConfig {\\n    /**\\n     * @notice Retrieve the deposit fee rate applied when users deposit into the protocol.\\n     * @return The deposit fee rate.\\n     */\\n    function getDepositFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the withdrawal fee rate applied when users withdraw from the protocol.\\n     * @return The withdrawal fee rate.\\n     */\\n    function getWithdrawFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the reward fee rate applied when users claim rewards from the protocol.\\n     * @return The reward fee rate.\\n     */\\n    function getRewardFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the address where protocol's collected fees are stored and managed.\\n     * @return The treasury address of the protocol.\\n     */\\n    function getTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Retrieve the fee rate applied for withdrawals from vaults.\\n     * @return The fee rate for vault withdrawals.\\n     */\\n    function getTreasuryFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the fee rate applied for withdrawals from vaults.\\n     * @return The fee rate for vault withdrawals.\\n     */\\n    function getWithdrawVaultFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the window of time where the vault withdrawal fee is applied.\\n     * @return The window of time where the vault withdrawal fee is applied.\\n     */\\n    function getWithdrawVaultFeeWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the start time of the window of time where the vault withdrawal fee is applied.\\n     * @return The start time of the window of time where the vault withdrawal fee is applied.\\n     */\\n    function getWithdrawVaultFeeWindowStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the fee manager that handles fee calculations and distributions.\\n     * @return An instance of the IFeeManager interface that manages fees within the protocol.\\n     */\\n    function getFeeManager() external view returns (IFeeManager);\\n\\n    /**\\n     * @notice Get the address of the $BLB-ICHI vault.\\n     * @return The address of the $BLB-ICHI vault.\\n     */\\n    function getBlbUsdcIchiVault() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the $BLB stability pool.\\n     * @return The address of the $BLB stability pool.\\n     */\\n    function getBlbStabilityPool() external view returns (address);\\n\\n    /**\\n     * @notice Get the fee rate applied for withdrawals from the $BLB-ICHI vault.\\n     * @return The fee rate for $BLB-ICHI vault withdrawals.\\n     */\\n    function getBlbIchiVaultFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the fee rate applied for withdrawals from the $BLB-ICHI vault.\\n     * @return The fee rate for $BLB-ICHI vault withdrawals.\\n     */\\n    function getBlbStablePoolFeeRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport { IProtocolConfig } from \\\"./IProtocolConfig.sol\\\";\\n\\n/**\\n * @title IFeeManager\\n * @notice Interface for FeeManager, the central fee management contract in the Blueberry Protocol.\\n * @dev FeeManager is responsible for cutting various fees in the protocol and sending them to the treasury.\\n */\\ninterface IFeeManager {\\n    /**\\n     * @notice Calculates and deducts the deposit fee when lending\\n     *         isolated underlying assets to Blueberry Money Market.\\n     * @param token The address of the underlying token for which the deposit fee is to be calculated.\\n     * @param amount The gross deposit amount before fees.\\n     * @return The net deposit amount after the fee deduction.\\n     */\\n    function doCutDepositFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the withdrawal fee when redeeming\\n     *         isolated underlying tokens from Blueberry Money Market.\\n     * @param token The address of the underlying token for which the withdrawal fee is to be calculated.\\n     * @param amount The gross withdrawal amount before fees.\\n     * @return The net withdrawal amount after the fee deduction.\\n     */\\n    function doCutWithdrawFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the performance fee from the\\n     *         rewards generated due to the leveraged position.\\n     * @param token The address of the reward token for which the reward fee is to be calculated.\\n     * @param amount The gross reward amount before fees.\\n     * @return The net reward amount after the fee deduction.\\n     */\\n    function doCutRewardsFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates and deducts the vault withdrawal fee if\\n     *         the withdrawal occurs within the specified fee window in the Blueberry Money Market.\\n     * @param token The address of the underlying token for which the vault withdrawal fee is to be calculated.\\n     * @param amount The gross vault withdrawal amount before fees.\\n     * @return The net vault withdrawal amount after the fee deduction.\\n     */\\n    function doCutVaultWithdrawFee(address token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Gets the protocol config contract address.\\n     */\\n    function getConfig() external view returns (IProtocolConfig);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ICoreOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IBaseOracle } from \\\"./IBaseOracle.sol\\\";\\n\\n/**\\n *  @title ICoreOracle\\n *  @notice Interface for the CoreOracle contract which provides price feed data for assets in the Blueberry protocol.\\n */\\ninterface ICoreOracle is IBaseOracle {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Event emitted when the owner sets a new oracle route for a given token.\\n     * @param token The ERC20 token for which the oracle route is set.\\n     * @param route The address of the oracle route.\\n     */\\n    event SetRoute(address indexed token, address route);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Check if the given ERC20 token is supported by the oracle.\\n     * @param token The ERC20 token to check support for.\\n     * @return A boolean indicating whether the token is supported or not.\\n     */\\n    function isTokenSupported(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Check if the oracle supports the underlying token of a given ERC1155 wrapper.\\n     * @dev Only meant to validate wrappers of the Blueberry protocol, such as WERC20.\\n     * @param token ERC1155 token address to check support for.\\n     * @param tokenId ERC1155 token id to check support for.\\n     * @return A boolean indicating whether the wrapped token is supported or not.\\n     */\\n    function isWrappedTokenSupported(address token, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the USD value of a specific wrapped ERC1155 token.\\n     * @param token ERC1155 token address.\\n     * @param id ERC1155 token id.\\n     * @param amount Amount of the token for which to get the USD value, normalized to 1e18 decimals.\\n     * @return The USD value of the given wrapped token amount.\\n     */\\n    function getWrappedTokenValue(address token, uint256 id, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the USD value of a given amount of a specific ERC20 token.\\n     * @param token ERC20 token address.\\n     * @param amount Amount of the ERC20 token for which to get the USD value.\\n     * @return The USD value of the given token amount.\\n     */\\n    function getTokenValue(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Fetches the oracle route for the given token.\\n     * @param token Address of the token to get the route for.\\n     * @return The address of the oracle route for the given token.\\n     */\\n    function getRoute(address token) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IBaseOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IBaseOracle\\n * @author BlueberryProtocol\\n * @notice Interface for a basic oracle that provides price data for assets.\\n */\\ninterface IBaseOracle {\\n    /**\\n     * @notice Event emitted when a new LP token is registered within its respective implementation.\\n     * @param token Address of the LP token being registered\\n     */\\n    event RegisterLpToken(address token);\\n\\n    /**\\n     * @notice Fetches the price of the given token in USD with 18 decimals precision.\\n     * @param token Address of the ERC-20 token for which the price is requested.\\n     * @return The USD price of the given token, multiplied by 10**18.\\n     */\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/curve/ICurveAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_id_info(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (address addr, bool is_active, uint256 version, uint256 last_modified, string memory description);\\n\\n    function get_address(uint256 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/spell/IBasicSpell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IBasicSpell\\n * @notice Interface for the Basic Spell contract.\\n */\\ninterface IBasicSpell {\\n    /**\\n     * @dev Defines strategies for Blueberry Protocol.\\n     * @param vault Address of the vault where assets are held.\\n     * @param minPositionSize Minimum size of the position in USD.\\n     * @param maxPositionSize Maximum size of the position in USD.\\n     */\\n    struct Strategy {\\n        address vault;\\n        uint256 minPositionSize;\\n        uint256 maxPositionSize;\\n    }\\n\\n    /**\\n     * @dev Defines parameters required for opening a new position.\\n     * @param strategyId Identifier for the strategy.\\n     * @param collToken Address of the collateral token (e.g., USDC).\\n     * @param collAmount Amount of user's collateral to deposit.\\n     * @param borrowToken Address of the token to borrow.\\n     * @param borrowAmount Amount to borrow from the bank.\\n     * @param farmingPoolId Identifier for the farming pool.\\n     */\\n    struct OpenPosParam {\\n        uint256 strategyId;\\n        address collToken;\\n        uint256 collAmount;\\n        address borrowToken;\\n        uint256 borrowAmount;\\n        uint256 farmingPoolId;\\n    }\\n\\n    /**\\n     * @dev Defines parameters required for closing a position.\\n     * @param strategyId Identifier for the strategy to close.\\n     * @param collToken Address of the isolated collateral token.\\n     * @param borrowToken Address of the token representing the debt.\\n     * @param amountRepay Amount of debt to repay.\\n     * @param amountPosRemove Amount of position to withdraw.\\n     * @param amountShareWithdraw Amount of isolated collateral tokens to withdraw.\\n     * @param amountOutMin Minimum amount to receive after the operation (used to handle slippage).\\n     * @param amountToSwap Collateral amount to swap to repay debt for negative PnL\\n     * @param swapData Paraswap sawp data to swap collateral to borrow token\\n     */\\n    struct ClosePosParam {\\n        uint256 strategyId;\\n        address collToken;\\n        address borrowToken;\\n        uint256 amountRepay;\\n        uint256 amountPosRemove;\\n        uint256 amountShareWithdraw;\\n        uint256 amountOutMin;\\n        uint256 amountToSwap;\\n        bytes swapData;\\n    }\\n\\n    /**\\n     * @notice This event is emitted when a new strategy is added.\\n     * @param strategyId Unique identifier for the strategy.\\n     * @param vault Address of the vault where assets are held.\\n     * @param minPosSize Minimum size of the position in USD.\\n     * @param maxPosSize Maximum size of the position in USD.\\n     */\\n    event StrategyAdded(uint256 strategyId, address vault, uint256 minPosSize, uint256 maxPosSize);\\n\\n    /**\\n     * @notice This event is emitted when a strategy's min/max position size is updated.\\n     * @param strategyId Unique identifier for the strategy.\\n     * @param minPosSize Minimum size of the position in USD.\\n     * @param maxPosSize Maximum size of the position in USD.\\n     */\\n    event StrategyPosSizeUpdated(uint256 strategyId, uint256 minPosSize, uint256 maxPosSize);\\n\\n    /**\\n     * @notice This event is emitted when a strategy's collateral max LTV is updated.\\n     * @param strategyId Unique identifier for the strategy.\\n     * @param collaterals Array of collateral token addresses.\\n     * @param maxLTVs Array of maximum LTVs corresponding to the collaterals. (base 1e4)\\n     */\\n    event CollateralsMaxLTVSet(uint256 strategyId, address[] collaterals, uint256[] maxLTVs);\\n\\n    /**\\n     * @notice Update the position sizes for a specific strategy.\\n     * @dev This function validates the inputs, updates the strategy's position sizes, and emits an event.\\n     * @param strategyId ID of the strategy to be updated.\\n     * @param minPosSize New minimum position size for the strategy.\\n     * @param maxPosSize New maximum position size for the strategy.\\n     */\\n    function setPosSize(uint256 strategyId, uint256 minPosSize, uint256 maxPosSize) external;\\n\\n    /**\\n     * @notice Set maximum Loan-To-Value (LTV) ratios for collaterals in a given strategy.\\n     * @dev This function validates the input arrays, sets the maxLTVs for each collateral, and emits an event.\\n     * @param strategyId ID of the strategy for which the maxLTVs are being set.\\n     * @param collaterals Array of addresses for each collateral token.\\n     * @param maxLTVs Array of maxLTV values corresponding to each collateral token.\\n     */\\n    function setCollateralsMaxLTVs(uint256 strategyId, address[] memory collaterals, uint256[] memory maxLTVs) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/money-market/IBErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface IBErc20 {\\n    function decimals() external view returns (uint8);\\n\\n    function underlying() external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/convex/IConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IConvex is IERC20MetadataUpgradeable {\\n    function reductionPerCliff() external view returns (uint256);\\n\\n    function totalCliffs() external view returns (uint256);\\n\\n    function maxSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/IERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IERC20Wrapper\\n * @author BlueberryProtocol\\n * @notice Interface for the ERC20Wrapper contract which allows the wrapping\\n *         of ERC-20 tokens with associated ERC-1155 token IDs.\\n */\\ninterface IERC20Wrapper {\\n    /**\\n     * @notice Fetches the underlying ERC-20 token address associated with the provided ERC-1155 token ID.\\n     * @param tokenId The ERC-1155 token ID for which the underlying ERC-20 token address is to be fetched.\\n     * @return The address of the underlying ERC-20 token.\\n     */\\n    function getUnderlyingToken(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Fetches pending rewards for a particular ERC-1155 token ID and given amount.\\n     * @param id The ERC-1155 token ID for which the pending rewards are to be fetched.\\n     * @param amount The amount for which pending rewards are to be calculated.\\n     * @return tokens A list of addresses representing reward tokens.\\n     * @return amounts A list of amounts corresponding to each reward token in the `tokens` list.\\n     */\\n    function pendingRewards(uint256 id, uint256 amount) external view returns (address[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/wrapper/escrow/interfaces/IPoolEscrowFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\ninterface IPoolEscrowFactory {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /// @notice Emitted when a new escrow contract is created\\n    event EscrowCreated(address);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice Creates an escrow contract for a given PID\\n     * @param _pid The pool id (The first 16-bits)\\n     * @param _booster The booster address\\n     * @param _rewards The rewards address\\n     * @param _lpToken The LP token address\\n     */\\n    function createEscrow(\\n        uint256 _pid,\\n        address _booster,\\n        address _rewards,\\n        address _lpToken\\n    ) external payable returns (address _escrow);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/balancer-v2/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport { IAsset } from \\\"./IAsset.sol\\\";\\n\\ninterface IBalancerVault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    enum UserBalanceOpKind {\\n        DEPOSIT_INTERNAL,\\n        WITHDRAW_INTERNAL,\\n        TRANSFER_INTERNAL,\\n        TRANSFER_EXTERNAL\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(bytes32 poolId, address sender, address recipient, ExitPoolRequest memory request) external;\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(\\n        bytes32 poolId\\n    ) external view returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangedBlock);\\n\\n    function getPool(bytes32 pid) external view returns (address pool, uint256 poolType);\\n\\n    function manageUserBalance(UserBalanceOp[] memory ops) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/ISwapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n*/\\npragma solidity 0.8.22;\\n\\ninterface ISwapRegistry {\\n    /// @dev Enum representing the different DEXs that can be used for liquidation swaps\\n    enum DexRoute {\\n        UniswapV3, // 0 Uniswap is the default DexRoute\\n        Balancer, // 1\\n        Curve // 2\\n    }\\n\\n    /**\\n     * @notice Registers a Balancer route for a token pair to be used for liquidation swaps\\n     * @dev These swaps convert assets received from liquidations to the debt token\\n     * @param srcToken The address of the token to swap from\\n     * @param dstToken The address of the token to swap to\\n     * @param poolId The PoolId for a given token pair\\n     */\\n    function registerBalancerRoute(address srcToken, address dstToken, bytes32 poolId) external;\\n\\n    /**\\n     * @notice Registers a Balancer route for a token pair to be used for liquidation swaps\\n     * @dev These swaps convert assets received from liquidations to the debt token\\n     * @param srcToken The address of the token to swap from\\n     * @param dstToken The address of the token to swap to\\n     * @param pool The Pool address for a given token pair\\n     */\\n    function registerCurveRoute(address srcToken, address dstToken, address pool) external;\\n\\n    /**\\n     * @notice Registers a Uniswap route for a token to be used for liquidation swaps\\n     * @param srcToken The address of the token to swap from\\n     */\\n    function registerUniswapRoute(address srcToken) external;\\n\\n    /**\\n     * @notice Registers a token as a protocol token\\n     * @dev Due to lack of liquidity depth traditionally protocol tokens do not have smooth swap routes\\n     *      to most other tokens.\\n     *      This function allows the system to know which tokens are protocol tokens and should be treated differently\\n     *      resulting in swapping to WETH before swapping to the debt token\\n     * @param token The address of the token to register\\n     * @param isProtocolToken A boolean indicating if the token is a protocol token\\n     */\\n    function setProtocolToken(address token, bool isProtocolToken) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/contracts/interfaces/balancer-v2/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@blueberry/=lib/blueberry-core/contracts/\",\r\n      \"@blueberry-stakevest/=lib/blueberry-stakevest/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/blueberry-core/node_modules/@openzeppelin/contracts-upgradeable/\",\r\n      \"src/=src/BlueberryContracts/\",\r\n      \"openzeppelin-contracts-upgradeable/contracts/=lib/blueberry-stakevest/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"solady/=lib/blueberry-stakevest/lib/solady/\",\r\n      \"@chainlink/=lib/blueberry-core/node_modules/@chainlink/\",\r\n      \"@aave/=lib/blueberry-core/node_modules/@aave/\",\r\n      \"@eth-optimism/=lib/blueberry-core/node_modules/@eth-optimism/contracts/\",\r\n      \"@uniswap/=lib/blueberry-core/node_modules/@uniswap/\",\r\n      \"base64-sol/=lib/blueberry-core/node_modules/base64-sol/\",\r\n      \"blueberry-core/=lib/blueberry-core/contracts/\",\r\n      \"blueberry-stakevest/=lib/blueberry-stakevest/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=lib/blueberry-core/node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=lib/blueberry-core/node_modules/hardhat-deploy/\",\r\n      \"hardhat/=lib/blueberry-core/node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"openzeppelin/=lib/blueberry-stakevest/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\r\n      \"v3-core/=lib/blueberry-stakevest/lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"NOT_LIQUIDATABLE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBank\",\"name\":\"bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"convexSpell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"registerBalancerRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"registerCurveRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"}],\"name\":\"registerUniswapRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProtocolToken\",\"type\":\"bool\"}],\"name\":\"setProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexLiquidator", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}