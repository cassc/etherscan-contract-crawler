{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ncontract Lock {\\n    bool public unlocked;\\n    address payable public owner;\\n    address payable private benefactor;\\n\\n    event Withdrawal(uint amount, uint when);\\n    event Toggle(bool unlocked);\\n    event UpdateBenefactor(address benefactor);\\n\\n\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n        unlocked = false;\\n    }\\n\\n    function withdraw() public {\\n        require((msg.sender == owner) || (msg.sender == benefactor), \\\"You aren't the owner nor benefactor\\\");\\n        require(unlocked == true);\\n        emit Withdrawal(address(this).balance, block.timestamp);\\n\\n        //owner.transfer(address(this).balance);\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function toggle() public returns (bool) {\\n        require(msg.sender == owner , \\\"You aren't the owner\\\");\\n        emit Toggle(unlocked);\\n        unlocked = !unlocked;\\n        return unlocked;\\n    }\\n\\n    function getBenefactor() public view returns (address) {\\n        return(benefactor);\\n    }\\n\\n    function getUnlocked() public view returns (bool) {\\n        return(unlocked);\\n    }\\n\\n    function setBenefactor(address payable _benefactor) public {\\n        require(msg.sender == owner, \\\"You aren't the owner\\\");\\n        require(_benefactor != address(0));\\n        benefactor = _benefactor;\\n        emit UpdateBenefactor(benefactor);\\n    }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"name\":\"Toggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"}],\"name\":\"UpdateBenefactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBenefactor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_benefactor\",\"type\":\"address\"}],\"name\":\"setBenefactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lock", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}