{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-03-09\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IERC20{\r\n    function name() external view returns(string memory);\r\n\r\n    function symbol() external view returns(string memory);\r\n\r\n    function totalSupply() external view returns (uint );\r\n\r\n    function decimals() external view returns(uint);\r\n\r\n    function balanceOf(address account) external view returns(uint);\r\n\r\n    function approve(address sender , uint value)external returns(bool);\r\n\r\n    function allowance(address sender, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recepient , uint value) external returns(bool);\r\n\r\n    function transferFrom(address sender,address recepient, uint value) external returns(bool);\r\n\r\n    event Transfer(address indexed from , address indexed to , uint value);\r\n\r\n    event Approval(address indexed sender , address indexed  spender , uint value);\r\n\r\n}\r\n\r\n\r\ncontract Context{\r\n  constructor () {}\r\n\r\n  function _msgsender() internal view returns (address) {\r\n    return msg.sender;\r\n  }\r\n}\r\n\r\n\r\nlibrary safeMath{\r\n    function add(uint a , uint b) internal pure returns(uint){\r\n        uint c = a+ b;\r\n        require(c >= a, \"amount exists\");\r\n        return c;\r\n    }\r\n    function sub(uint a , uint b , string memory errorMessage) internal pure returns(uint){\r\n        uint c = a - b;\r\n        require( c <= a , errorMessage );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context{\r\n    address private _Owner;\r\n\r\n    event transferOwnerShip(address indexed _previousOwner , address indexed _newOwner);\r\n\r\n    constructor(){\r\n        _Owner = _msgsender();\r\n        emit transferOwnerShip(address(0),_Owner);\r\n    }\r\n\r\n    function checkOwner() public view returns(address){\r\n        return _Owner;\r\n    }\r\n\r\n    modifier OnlyOwner(){\r\n        require(_Owner == _msgsender(),\"Only Owner can modify the changes\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public OnlyOwner{\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner)internal {\r\n        require(_newOwner != address(0),\"Ownership cant be transferred to 0 address\");\r\n        emit transferOwnerShip(_Owner,_newOwner);\r\n        _Owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract FILMCOIN is Context, IERC20, Ownable {\r\n    using safeMath for uint;\r\n\r\n    mapping(address => uint) _balances;\r\n    mapping(address => mapping(address => uint)) _allowances;\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint private _decimal;\r\n    uint private _totalSupply;\r\n\r\n    event MultiTokenTransfer(address indexed from , address[] indexed Recepients , uint[] indexed Amounts);\r\n\r\n    constructor(address preSaleWallet){\r\n       _name = \"FILM COIN\";\r\n       _symbol = \"FLIKS\";\r\n       _decimal = 18;\r\n       _totalSupply = 130000000*10**18;\r\n       _balances[msg.sender] = _totalSupply.mul(90 * 1e18).div(130 * 1e18,\"\");\r\n       _balances[preSaleWallet] = _totalSupply.mul(40 * 1e18).div(130 * 1e18,\"\");\r\n       emit Transfer(address(0), msg.sender, balanceOf(msg.sender));\r\n       emit Transfer(address(0), preSaleWallet, balanceOf(preSaleWallet));\r\n    }\r\n\r\n    function name() external override view returns(string memory){\r\n        return _name;\r\n    }\r\n    function symbol() external view override returns(string memory){\r\n        return _symbol;\r\n    }\r\n    function decimals() external view override  returns(uint){\r\n        return _decimal;\r\n    }\r\n    function balanceOf(address owner) public view override  returns(uint){\r\n        return _balances[owner];\r\n    }\r\n    function totalSupply() external view override  returns(uint){\r\n        return _totalSupply;\r\n    }\r\n    function approve(address spender , uint value) external override returns(bool){\r\n        _approve(_msgsender(), spender , value);\r\n        return true;\r\n    }\r\n    function allowance(address sender , address spender) external view override returns(uint){\r\n          return _allowances[sender][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n      _approve(_msgsender(), spender, _allowances[_msgsender()][spender].add(addedValue));\r\n      return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n      _approve(_msgsender(), spender, _allowances[_msgsender()][spender].sub(subtractedValue, \"FILMCOIN : decreased allowance below value zero\"));\r\n      return true;\r\n    }\r\n\r\n    function transfer(address recepient , uint value) external override returns(bool){\r\n        _transfer(msg.sender, recepient,value);\r\n         return true;\r\n    }\r\n\r\n     function transferFrom(address sender ,address recepient, uint amount) external override returns(bool){\r\n        _approve(sender, _msgsender(), _allowances[sender][_msgsender()].sub(amount,\"Exceeds allownace\"));\r\n        _transfer(sender,recepient,amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 amount) public OnlyOwner returns (bool) {\r\n        _mint(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public OnlyOwner returns (bool) {\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender,address recepient, uint value) internal  returns(bool success){\r\n        require(_balances[sender] >= value,\"Balance not enough\");\r\n        _balances[sender] = _balances[sender].sub(value,\"Exceeds balance\");\r\n        _balances[recepient] = _balances[recepient].add(value);\r\n        emit Transfer(_msgsender(), recepient , value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender,address spender, uint amount) internal returns(bool success){\r\n        require(sender != address(0),\"Should not be 0 address\");\r\n        require(spender != address(0),\"Should not be zero address\");\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"FILMCOIN : mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n       require(account != address(0), \" FILMCOIN : burn from the zero address\");\r\n       _balances[account] = _balances[account].sub(amount, \" FILMCOIN : burn amount exceeds balance\");\r\n       _totalSupply = _totalSupply.sub(amount,\"cant burn\");\r\n       emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function multiTokenTransfer( address[] memory recepients, uint[] memory amounts) public OnlyOwner{\r\n        require(recepients.length == amounts.length,\"Recepients and Amounts are mismatched\");\r\n        require(recepients.length != 0 ,\"Recepients cannot be empty\");\r\n            for(uint i = 0 ; i < recepients.length; i++){\r\n                require(amounts[i] > 0 ,\"Minimum Amount must be greater than 0\");\r\n                require(recepients[i] != address(0) , \"Recepients must not be zero address\");\r\n                _transfer(msg.sender,recepients[i] , amounts[i].mul(1e18));\r\n            }      \r\n            emit MultiTokenTransfer(msg.sender , recepients , amounts);\r\n    } \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"preSaleWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"Recepients\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"MultiTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recepients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FILMCOIN", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d54d796983a495aaae6200c92e7d8cc0dece052f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f7170013921b39c89b4ee2c7ead4d94fcc4637b384434eb8ce97af0cd15ccb3"}