{"SourceCode": "// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n    function recordExists(bytes32 node) external view returns (bool);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Resolver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev A basic interface for ENS resolvers.\r\n */\r\ncontract Resolver {\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\r\n    function addr(bytes32 node) public view returns (address);\r\n    function setAddr(bytes32 node, address addr) public;\r\n}\r\n\r\n// File: contracts/RegistrarInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract RegistrarInterface {\r\n    event OwnerChanged(bytes32 indexed label, address indexed oldOwner, address indexed newOwner);\r\n    event DomainConfigured(bytes32 indexed label);\r\n    event DomainUnlisted(bytes32 indexed label);\r\n    event NewRegistration(bytes32 indexed label, string subdomain, address indexed owner);\r\n    event RentPaid(bytes32 indexed label, string subdomain, uint amount, uint expirationDate);\r\n\r\n    // InterfaceID of these four methods is 0xc1b15f5a\r\n    function query(bytes32 label, string calldata subdomain) external view returns (string memory domain);\r\n    function register(bytes32 label, string calldata subdomain, address owner, address resolver) external payable;\r\n\r\n    function rentDue(bytes32 label, string calldata subdomain) external view returns (uint timestamp);\r\n    function payRent(bytes32 label, string calldata subdomain) external payable;\r\n}\r\n\r\n// File: contracts/AbstractSubdomainRegistrar.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AbstractSubdomainRegistrar is RegistrarInterface {\r\n\r\n    // namehash('eth')\r\n    bytes32 constant public TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n\r\n    bool public stopped = false;\r\n    address public registrarOwner;\r\n    address public migration;\r\n\r\n    address public registrar;\r\n\r\n    ENS public ens;\r\n\r\n    modifier owner_only(bytes32 label) {\r\n        require(owner(label) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier not_stopped() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier registrar_owner_only() {\r\n        require(msg.sender == registrarOwner);\r\n        _;\r\n    }\r\n\r\n    event DomainTransferred(bytes32 indexed label, string name);\r\n\r\n    constructor(ENS _ens) public {\r\n        ens = _ens;\r\n        registrar = ens.owner(TLD_NODE);\r\n        registrarOwner = msg.sender;\r\n    }\r\n\r\n    function doRegistration(bytes32 node, bytes32 label, address subdomainOwner, Resolver resolver) internal {\r\n        // Get the subdomain so we can configure it\r\n        ens.setSubnodeOwner(node, label, address(this));\r\n\r\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\r\n        // Set the subdomain's resolver\r\n        ens.setResolver(subnode, address(resolver));\r\n\r\n        // Set the address record on the resolver\r\n        resolver.setAddr(subnode, subdomainOwner);\r\n\r\n        // Pass ownership of the new subdomain to the registrant\r\n        ens.setOwner(subnode, subdomainOwner);\r\n    }\r\n\r\n    function undoRegistration(bytes32 node, bytes32 label, Resolver resolver) internal {\r\n        // // Get the subdomain so we can configure it\r\n        ens.setSubnodeOwner(node, label, address(this));\r\n\r\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\r\n        // // Set the subdomain's resolver\r\n        // ens.setResolver(subnode, address(resolver));\r\n\r\n        // Set the address record back to 0x0 on the resolver\r\n        resolver.setAddr(subnode, address(0));\r\n\r\n        // Set ownership of the new subdomain to the 0x0 address\r\n        ens.setOwner(subnode, address(0)); \r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\r\n        return (\r\n            (interfaceID == 0x01ffc9a7) // supportsInterface(bytes4)\r\n            || (interfaceID == 0xc1b15f5a) // RegistrarInterface\r\n        );\r\n    }\r\n\r\n    function rentDue(bytes32 label, string calldata subdomain) external view returns (uint timestamp) {\r\n        return 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the resolver record for a name in ENS.\r\n     * @param name The name to set the resolver for.\r\n     * @param resolver The address of the resolver\r\n     */\r\n    function setResolver(string memory name, address resolver) public owner_only(keccak256(bytes(name))) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        bytes32 node = keccak256(abi.encodePacked(TLD_NODE, label));\r\n        ens.setResolver(node, resolver);\r\n    }\r\n\r\n    /**\r\n     * @dev Configures a domain for sale.\r\n     * @param name The name to configure.\r\n     */\r\n    function configureDomain(string memory name) public {\r\n        configureDomainFor(name, msg.sender, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @dev Stops the registrar, disabling configuring of new domains.\r\n     */\r\n    function stop() public not_stopped registrar_owner_only {\r\n        stopped = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address where domains are migrated to.\r\n     * @param _migration Address of the new registrar.\r\n     */\r\n    function setMigrationAddress(address _migration) public registrar_owner_only {\r\n        require(stopped);\r\n        migration = _migration;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public registrar_owner_only {\r\n        registrarOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns information about a subdomain.\r\n     * @param label The label hash for the domain.\r\n     * @param subdomain The label for the subdomain.\r\n     * @return domain The name of the domain, or an empty string if the subdomain\r\n     *                is unavailable.\r\n     */\r\n    function query(bytes32 label, string calldata subdomain) external view returns (string memory domain);\r\n\r\n    function owner(bytes32 label) public view returns (address);\r\n    function configureDomainFor(string memory name, address payable _owner, address _transfer) public;\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Deed.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface Deed {\r\n\r\n    function setOwner(address payable newOwner) external;\r\n    function setRegistrar(address newRegistrar) external;\r\n    function setBalance(uint newValue, bool throwOnFailure) external;\r\n    function closeDeed(uint refundRatio) external;\r\n    function destroyDeed() external;\r\n\r\n    function owner() external view returns (address);\r\n    function previousOwner() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function creationDate() external view returns (uint);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Registrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface Registrar {\r\n\r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    function state(bytes32 _hash) external view returns (Mode);\r\n    function startAuction(bytes32 _hash) external;\r\n    function startAuctions(bytes32[] calldata _hashes) external;\r\n    function newBid(bytes32 sealedBid) external payable;\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable;\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external;\r\n    function cancelBid(address bidder, bytes32 seal) external;\r\n    function finalizeAuction(bytes32 _hash) external;\r\n    function transfer(bytes32 _hash, address payable newOwner) external;\r\n    function releaseDeed(bytes32 _hash) external;\r\n    function invalidateName(string calldata unhashedName) external;\r\n    function eraseNode(bytes32[] calldata labels) external;\r\n    function transferRegistrars(bytes32 _hash) external;\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external;\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint);\r\n}\r\n\r\n// File: contracts/DotComSeance.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract DotComSeance {\r\n  function ownerOf(uint256 tokenId) public view returns (address);\r\n}\r\n\r\n// File: contracts/SubdomainRegistrar.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n    Subdomain Registrar is heavily modified from \r\n    https://github.com/ensdomains/subdomain-registrar\r\n */\r\n\r\ncontract SubdomainRegistrar is AbstractSubdomainRegistrar {\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == oowner);\r\n        _;\r\n    }\r\n\r\n    event NewSubdomain(string domain, string subdomain, uint256 tokenId, address tokenOwner, string oldSubdomain);\r\n\r\n    Resolver public resolver;\r\n    DotComSeance public dotComSeance;\r\n    address public oowner;\r\n    mapping (uint256 => string) public idToSubdomain;\r\n    bytes32[] public idToDomain;\r\n\r\n    mapping (bytes32 => uint256) public labelToId;\r\n    mapping (bytes32 => string) public domains;\r\n\r\n    constructor(ENS ens, DotComSeance _dotComSeance, Resolver _resolver) AbstractSubdomainRegistrar(ens) public {\r\n        resolver = _resolver;\r\n        dotComSeance = _dotComSeance;\r\n        oowner = msg.sender;\r\n\r\n        domains[keccak256(bytes(\"petsdotcom\"))]= \"petsdotcom\";\r\n        idToDomain.push(keccak256(bytes(\"petsdotcom\")));\r\n\r\n        domains[keccak256(bytes(\"alladvantage\"))]= \"alladvantage\";\r\n        idToDomain.push(keccak256(bytes(\"alladvantage\")));\r\n\r\n        domains[keccak256(bytes(\"bidland\"))]= \"bidland\";\r\n        idToDomain.push(keccak256(bytes(\"bidland\")));\r\n\r\n        domains[keccak256(bytes(\"bizbuyer\"))]= \"bizbuyer\";\r\n        idToDomain.push(keccak256(bytes(\"bizbuyer\")));\r\n\r\n        domains[keccak256(bytes(\"capacityweb\"))]= \"capacityweb\";\r\n        idToDomain.push(keccak256(bytes(\"capacityweb\")));\r\n\r\n        domains[keccak256(bytes(\"cashwars\"))]= \"cashwars\";\r\n        idToDomain.push(keccak256(bytes(\"cashwars\")));\r\n\r\n        domains[keccak256(bytes(\"ecircles\"))]= \"ecircles\";\r\n        idToDomain.push(keccak256(bytes(\"ecircles\")));\r\n\r\n        domains[keccak256(bytes(\"efanshop\"))]= \"efanshop\";\r\n        idToDomain.push(keccak256(bytes(\"efanshop\")));\r\n\r\n        domains[keccak256(bytes(\"ehobbies\"))]= \"ehobbies\";\r\n        idToDomain.push(keccak256(bytes(\"ehobbies\")));\r\n\r\n        domains[keccak256(bytes(\"elaw\"))]= \"elaw\";\r\n        idToDomain.push(keccak256(bytes(\"elaw\")));\r\n\r\n        domains[keccak256(bytes(\"exchangepath\"))]= \"exchangepath\";\r\n        idToDomain.push(keccak256(bytes(\"exchangepath\")));\r\n\r\n        domains[keccak256(bytes(\"financialprinter\"))]= \"financialprinter\";\r\n        idToDomain.push(keccak256(bytes(\"financialprinter\")));\r\n\r\n        domains[keccak256(bytes(\"funbug\"))]= \"funbug\";\r\n        idToDomain.push(keccak256(bytes(\"funbug\")));\r\n\r\n        domains[keccak256(bytes(\"heavenlydoor\"))]= \"heavenlydoor\";\r\n        idToDomain.push(keccak256(bytes(\"heavenlydoor\")));\r\n\r\n        domains[keccak256(bytes(\"iharvest\"))]= \"iharvest\";\r\n        idToDomain.push(keccak256(bytes(\"iharvest\")));\r\n\r\n        domains[keccak256(bytes(\"mrswap\"))]= \"mrswap\";\r\n        idToDomain.push(keccak256(bytes(\"mrswap\")));\r\n\r\n        domains[keccak256(bytes(\"netmorf\"))]= \"netmorf\";\r\n        idToDomain.push(keccak256(bytes(\"netmorf\")));\r\n\r\n        domains[keccak256(bytes(\"popularpower\"))]= \"popularpower\";\r\n        idToDomain.push(keccak256(bytes(\"popularpower\")));\r\n\r\n        domains[keccak256(bytes(\"stickynetworks\"))]= \"stickynetworks\";\r\n        idToDomain.push(keccak256(bytes(\"stickynetworks\")));\r\n\r\n        domains[keccak256(bytes(\"thirdvoice\"))]= \"thirdvoice\";\r\n        idToDomain.push(keccak256(bytes(\"thirdvoice\")));\r\n\r\n        domains[keccak256(bytes(\"wingspanbank\"))]= \"wingspanbank\";\r\n        idToDomain.push(keccak256(bytes(\"wingspanbank\")));\r\n    }\r\n\r\n    // admin\r\n\r\n    function updateOwner(address newOwner) public onlyOwner {\r\n        oowner = newOwner;\r\n    }\r\n    function updateResolver(Resolver _resolver) public onlyOwner {\r\n        require(msg.sender == oowner);\r\n        resolver = _resolver;\r\n    }\r\n\r\n    // meat and potatoes\r\n\r\n    function registerSubdomain(string calldata subdomain, uint256 tokenId) external not_stopped payable {\r\n        // make sure msg.sender is the owner of the NFT tokenId\r\n        address subdomainOwner = dotComSeance.ownerOf(tokenId);\r\n        require(subdomainOwner == msg.sender, \"cant register a subdomain for an NFT you dont own\");\r\n\r\n        // make sure that the tokenId is correlated to the domain\r\n        uint256 workId = tokenId / 100;\r\n\r\n        // guille works are all part of workId 0\r\n        if (workId == 0) {\r\n            workId = tokenId % 100;\r\n        }\r\n\r\n        bytes32 label = idToDomain[workId - 1];\r\n\r\n        bytes32 domainNode = keccak256(abi.encodePacked(TLD_NODE, label));\r\n        bytes32 subdomainLabel = keccak256(bytes(subdomain));\r\n        bytes32 subnode = keccak256(abi.encodePacked(domainNode, subdomainLabel));\r\n\r\n        // Subdomain must not be registered already.\r\n        require(ens.owner(subnode) == address(0), \"subnode already owned\");\r\n\r\n        // if subdomain was previously registered, delete it\r\n        string memory oldSubdomain = idToSubdomain[tokenId];\r\n        if (bytes(oldSubdomain).length != 0) {\r\n            bytes32 oldSubdomainLabel = keccak256(bytes(oldSubdomain));\r\n            undoRegistration(domainNode, oldSubdomainLabel, resolver);\r\n        }\r\n\r\n        doRegistration(domainNode, subdomainLabel, subdomainOwner, resolver);\r\n        idToSubdomain[tokenId] = subdomain;\r\n\r\n        emit NewSubdomain(domains[label], subdomain, tokenId, subdomainOwner, oldSubdomain);\r\n    }\r\n\r\n    // admin\r\n\r\n    function unregister(string calldata subdomain, uint256 tokenId) external onlyOwner {\r\n        uint256 workId = tokenId / 100;\r\n\r\n        if (workId == 0) {\r\n            workId = tokenId % 100;\r\n        }\r\n        bytes32 label = idToDomain[workId - 1];\r\n        bytes32 domainNode = keccak256(abi.encodePacked(TLD_NODE, label));\r\n        bytes32 _subdomain = keccak256(bytes(subdomain));\r\n        undoRegistration(domainNode, _subdomain, resolver);\r\n    }\r\n\r\n    // Don't want to modify too much of the inherited ENS stuff.\r\n    // Everything below is just to satisfy interface and might be used for ENS frontent.\r\n\r\n    function register(bytes32 label, string calldata subdomain, address owner, address resolver) external payable {\r\n        revert(\"nope\");\r\n    }\r\n    function payRent(bytes32 label, string calldata subdomain) external payable {\r\n        revert(\"nope\");\r\n    }\r\n    function configureDomainFor(string memory name, address payable _owner, address _transfer) public owner_only(keccak256(bytes(name))) {\r\n        revert(\"nope\");\r\n    }\r\n    function deed(bytes32 label) internal view returns (Deed) {\r\n        (, address deedAddress,,,) = Registrar(registrar).entries(label);\r\n        return Deed(deedAddress);\r\n    }\r\n    function owner(bytes32 label) public view returns (address) {\r\n        return address(this);\r\n    }\r\n    function query(bytes32 label, string calldata subdomain) external view returns (string memory domain) {\r\n        bytes32 node = keccak256(abi.encodePacked(TLD_NODE, label));\r\n        bytes32 subnode = keccak256(abi.encodePacked(node, keccak256(bytes(subdomain))));\r\n        if (ens.owner(subnode) != address(0x0)) {\r\n            return (\"\");\r\n        }\r\n        return domains[label];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"contract DotComSeance\",\"name\":\"_dotComSeance\",\"type\":\"address\"},{\"internalType\":\"contract Resolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"DomainConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DomainTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"DomainUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldSubdomain\",\"type\":\"string\"}],\"name\":\"NewSubdomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"name\":\"RentPaid\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TLD_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"configureDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transfer\",\"type\":\"address\"}],\"name\":\"configureDomainFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dotComSeance\",\"outputs\":[{\"internalType\":\"contract DotComSeance\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToDomain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToSubdomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"labelToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"}],\"name\":\"payRent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registerSubdomain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrarOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"}],\"name\":\"rentDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migration\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubdomainRegistrar", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e0000000000000000000000006ca044fb1cd505c1db4ef7332e73a236ad6cb71c0000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cd3d85f775de700ef786cd63c459acbc005036a05e728cb8569507b7b8b59cae"}