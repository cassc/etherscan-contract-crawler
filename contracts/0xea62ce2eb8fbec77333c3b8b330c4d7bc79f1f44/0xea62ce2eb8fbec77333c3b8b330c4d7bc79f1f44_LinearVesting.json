{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract LinearVesting is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice event emitted when a vesting schedule is created\r\n    event ScheduleCreated(address indexed _beneficiary);\r\n\r\n    /// @notice event emitted when a successful drawn down of vesting tokens is made\r\n    event DrawDown(address indexed _beneficiary, uint256 indexed _amount);\r\n\r\n    /// @notice start of vesting period as a timestamp\r\n    uint256 public start;\r\n\r\n    /// @notice end of vesting period as a timestamp\r\n    uint256 public end;\r\n\r\n    /// @notice cliff duration in seconds\r\n    uint256 public cliffDuration;\r\n\r\n    /// @notice owner address set on construction\r\n    address public owner;\r\n\r\n    /// @notice amount vested for a beneficiary. Note beneficiary address can not be reused\r\n    mapping(address => uint256) public vestedAmount;\r\n\r\n    /// @notice cumulative total of tokens drawn down (and transferred from the deposit account) per beneficiary\r\n    mapping(address => uint256) public totalDrawn;\r\n\r\n    /// @notice last drawn down time (seconds) per beneficiary\r\n    mapping(address => uint256) public lastDrawnAt;\r\n\r\n    /// @notice ERC20 token we are vesting\r\n    IERC20 public token;\r\n\r\n    /**\r\n     * @notice Construct a new vesting contract\r\n     * @param _token ERC20 token\r\n     * @param _start start timestamp\r\n     * @param _end end timestamp\r\n     * @param _cliffDurationInSecs cliff duration in seconds\r\n     * @dev caller on constructor set as owner; this can not be changed\r\n     */\r\n    constructor(IERC20 _token, uint256 _start, uint256 _end, uint256 _cliffDurationInSecs) public {\r\n        require(address(_token) != address(0), \"VestingContract::constructor: Invalid token\");\r\n        require(_end >= _start, \"VestingContract::constructor: Start must be before end\");\r\n\r\n        token = _token;\r\n        owner = msg.sender;\r\n\r\n        start = _start;\r\n        end = _end;\r\n        cliffDuration = _cliffDurationInSecs;\r\n    }\r\n\r\n    /**\r\n     * @notice Create new vesting schedules in a batch\r\n     * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\r\n     * @param _beneficiaries array of beneficiaries of the vested tokens\r\n     * @param _amounts array of amount of tokens (in wei)\r\n     * @dev array index of address should be the same as the array index of the amount\r\n     */\r\n    function createVestingSchedules(\r\n        address[] calldata _beneficiaries,\r\n        uint256[] calldata _amounts\r\n    ) external returns (bool) {\r\n        require(msg.sender == owner, \"VestingContract::createVestingSchedules: Only Owner\");\r\n        require(_beneficiaries.length > 0, \"VestingContract::createVestingSchedules: Empty Data\");\r\n        require(\r\n            _beneficiaries.length == _amounts.length,\r\n            \"VestingContract::createVestingSchedules: Array lengths do not match\"\r\n        );\r\n\r\n        bool result = true;\r\n\r\n        for(uint i = 0; i < _beneficiaries.length; i++) {\r\n            address beneficiary = _beneficiaries[i];\r\n            uint256 amount = _amounts[i];\r\n            _createVestingSchedule(beneficiary, amount);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Create a new vesting schedule\r\n     * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\r\n     * @param _beneficiary beneficiary of the vested tokens\r\n     * @param _amount amount of tokens (in wei)\r\n     */\r\n    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool) {\r\n        require(msg.sender == owner, \"VestingContract::createVestingSchedule: Only Owner\");\r\n        return _createVestingSchedule(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership role\r\n     * @notice Changes the owner of this contract to a new address\r\n     * @dev Only owner\r\n     * @param _newOwner beneficiary to vest remaining tokens to\r\n     */\r\n    function transferOwnership(address _newOwner) external {\r\n        require(msg.sender == owner, \"VestingContract::transferOwnership: Only owner\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice Draws down any vested tokens due\r\n     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\r\n     */\r\n    function drawDown() nonReentrant external returns (bool) {\r\n        return _drawDown(msg.sender);\r\n    }\r\n\r\n\r\n    // Accessors\r\n\r\n    /**\r\n     * @notice Vested token balance for a beneficiary\r\n     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\r\n     * @return _tokenBalance total balance proxied via the ERC20 token\r\n     */\r\n    function tokenBalance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Vesting schedule and associated data for a beneficiary\r\n     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\r\n     * @return _amount\r\n     * @return _totalDrawn\r\n     * @return _lastDrawnAt\r\n     * @return _remainingBalance\r\n     */\r\n    function vestingScheduleForBeneficiary(address _beneficiary)\r\n    external view\r\n    returns (uint256 _amount, uint256 _totalDrawn, uint256 _lastDrawnAt, uint256 _remainingBalance) {\r\n        return (\r\n        vestedAmount[_beneficiary],\r\n        totalDrawn[_beneficiary],\r\n        lastDrawnAt[_beneficiary],\r\n        vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary])\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Draw down amount currently available (based on the block timestamp)\r\n     * @param _beneficiary beneficiary of the vested tokens\r\n     * @return _amount tokens due from vesting schedule\r\n     */\r\n    function availableDrawDownAmount(address _beneficiary) external view returns (uint256 _amount) {\r\n        return _availableDrawDownAmount(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice Balance remaining in vesting schedule\r\n     * @param _beneficiary beneficiary of the vested tokens\r\n     * @return _remainingBalance tokens still due (and currently locked) from vesting schedule\r\n     */\r\n    function remainingBalance(address _beneficiary) external view returns (uint256) {\r\n        return vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary]);\r\n    }\r\n\r\n    // Internal\r\n\r\n    function _createVestingSchedule(address _beneficiary, uint256 _amount) internal returns (bool) {\r\n        require(_beneficiary != address(0), \"VestingContract::createVestingSchedule: Beneficiary cannot be empty\");\r\n        require(_amount > 0, \"VestingContract::createVestingSchedule: Amount cannot be empty\");\r\n\r\n        // Ensure one per address\r\n        require(vestedAmount[_beneficiary] == 0, \"VestingContract::createVestingSchedule: Schedule already in flight\");\r\n\r\n        vestedAmount[_beneficiary] = _amount;\r\n\r\n        // Vest the tokens into the deposit account and delegate to the beneficiary\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"VestingContract::createVestingSchedule: Unable to escrow tokens\"\r\n        );\r\n\r\n        emit ScheduleCreated(_beneficiary);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _drawDown(address _beneficiary) internal returns (bool) {\r\n        require(vestedAmount[_beneficiary] > 0, \"VestingContract::_drawDown: There is no schedule currently in flight\");\r\n\r\n        uint256 amount = _availableDrawDownAmount(_beneficiary);\r\n        require(amount > 0, \"VestingContract::_drawDown: No allowance left to withdraw\");\r\n\r\n        // Update last drawn to now\r\n        lastDrawnAt[_beneficiary] = _getNow();\r\n\r\n        // Increase total drawn amount\r\n        totalDrawn[_beneficiary] = totalDrawn[_beneficiary].add(amount);\r\n\r\n        // Safety measure - this should never trigger\r\n        require(\r\n            totalDrawn[_beneficiary] <= vestedAmount[_beneficiary],\r\n            \"VestingContract::_drawDown: Safety Mechanism - Drawn exceeded Amount Vested\"\r\n        );\r\n\r\n        // Issue tokens to beneficiary\r\n        require(token.transfer(_beneficiary, amount), \"VestingContract::_drawDown: Unable to transfer tokens\");\r\n\r\n        emit DrawDown(_beneficiary, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n    \r\n\r\n    function _availableDrawDownAmount(address _beneficiary) internal view returns (uint256 _amount) {\r\n\r\n        // Cliff Period\r\n        if (_getNow() <= start.add(cliffDuration)) {\r\n            // the cliff period has not ended, no tokens to draw down\r\n            return 0;\r\n        }\r\n\r\n        // Schedule complete\r\n        if (_getNow() > end) {\r\n            return vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary]);\r\n        }\r\n\r\n        // Schedule is active\r\n\r\n        // Work out when the last invocation was\r\n        uint256 timeLastDrawnOrStart = lastDrawnAt[_beneficiary] == 0 ? start : lastDrawnAt[_beneficiary];\r\n\r\n        // Find out how much time has past since last invocation\r\n        uint256 timePassedSinceLastInvocation = _getNow().sub(timeLastDrawnOrStart);\r\n\r\n        // Work out how many due tokens - time passed * rate per second\r\n        uint256 drawDownRate = vestedAmount[_beneficiary].div(end.sub(start));\r\n        uint256 amount = timePassedSinceLastInvocation.mul(drawDownRate);\r\n\r\n        return amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDurationInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DrawDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"availableDrawDownAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"createVestingSchedules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrawnAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"remainingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestingScheduleForBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastDrawnAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LinearVesting", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000084cffa78b2fbbeec8c37391d2b12a04d2030845e00000000000000000000000000000000000000000000000000000000603c74d0000000000000000000000000000000000000000000000000000000006133a6100000000000000000000000000000000000000000000000000000000000317040", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c984b926503d66816fa37bac18831e17b71d29ddae849ca41b8d23e17e455677"}