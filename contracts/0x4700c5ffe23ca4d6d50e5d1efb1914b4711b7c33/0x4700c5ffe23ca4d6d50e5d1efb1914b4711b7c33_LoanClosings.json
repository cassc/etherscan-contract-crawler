{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LoanClosings.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"LoanClosingsShared.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"IToken.sol\\\";\\n\\ncontract LoanClosings is LoanClosingsShared {\\n\\n    function initialize(\\n        address target)\\n        external\\n        onlyOwner\\n    {\\n        // TODO remove after migration\\n        _setTarget(bytes4(keccak256(\\\"closeWithDeposit(bytes32,address,uint256)\\\")), address(0));\\n        _setTarget(bytes4(keccak256(\\\"closeWithSwap(bytes32,address,uint256)\\\")), address(0));\\n\\n        _setTarget(this.closeWithDeposit.selector, target);\\n        _setTarget(this.closeWithSwap.selector, target);\\n    }\\n\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount, // denominated in loanToken\\n        bytes memory loanDataBytes)\\n        public\\n        payable\\n        nonReentrant\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        )\\n    {\\n        return _closeWithDeposit(\\n            loanId,\\n            receiver,\\n            depositAmount,\\n            loanDataBytes\\n        );\\n    }\\n\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes memory loanDataBytes)\\n        public\\n        nonReentrant\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        )\\n    {\\n        return _closeWithSwap(\\n            loanId,\\n            receiver,\\n            swapAmount,\\n            returnTokenIsCollateral,\\n            loanDataBytes\\n        );\\n    }\\n\\n    function _checkPermit(address token, bytes memory loanDataBytes) internal {\\n        if (loanDataBytes.length != 0) {\\n            if(abi.decode(loanDataBytes, (uint128)) & WITH_PERMIT != 0) {\\n                (uint128 f, bytes[] memory payload) = abi.decode(\\n                    loanDataBytes,\\n                    (uint128, bytes[])\\n                );\\n                (address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) = abi.decode(payload[2], (address, address, uint, uint, uint8, bytes32, bytes32));\\n                require(spender == address(this), \\\"Permit\\\");\\n                IERC20Permit(token).permit(owner, spender, value, deadline, v, r, s);\\n            }\\n        }\\n    }\\n\\n    function _closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount, // denominated in loanToken\\n        bytes memory loanDataBytes)\\n        internal\\n        pausable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        )\\n    {\\n        require(depositAmount != 0, \\\"depositAmount == 0\\\");\\n\\n        Loan memory loanLocal = loans[loanId];\\n        _checkAuthorized(\\n            loanLocal.id,\\n            loanLocal.active,\\n            loanLocal.borrower\\n        );\\n\\n        if (receiver == address(0)) {\\n            receiver = msg.sender;\\n        }\\n\\n        LoanParams memory loanParamsLocal = loanParams[loanLocal.loanParamsId];\\n\\n        _checkPermit(loanParamsLocal.loanToken, loanDataBytes);\\n\\n        uint256 principalPlusInterest = _settleInterest(loanLocal.lender, loanId)\\n            .add(loanLocal.principal);\\n\\n        // can't close more than the full principal\\n        loanCloseAmount = depositAmount > principalPlusInterest ?\\n            principalPlusInterest :\\n            depositAmount;\\n\\n        if (loanCloseAmount != 0) {\\n            _returnPrincipalWithDeposit(\\n                loanParamsLocal.loanToken,\\n                loanLocal.lender,\\n                loanCloseAmount\\n            );\\n        }\\n\\n        if (loanCloseAmount == principalPlusInterest) {\\n            // collateral is only withdrawn if the loan is closed in full\\n            withdrawAmount = loanLocal.collateral;\\n            withdrawToken = loanParamsLocal.collateralToken;\\n            loanLocal.collateral = 0;\\n\\n            _withdrawAsset(\\n                withdrawToken,\\n                receiver,\\n                withdrawAmount\\n            );\\n        }\\n\\n        _finalizeClose(\\n            loanLocal,\\n            loanParamsLocal,\\n            loanCloseAmount,\\n            withdrawAmount, // collateralCloseAmount\\n            0, // collateralToLoanSwapRate\\n            CloseTypes.Deposit\\n        );\\n        IToken(loanLocal.lender).consume(loanCloseAmount);\\n    }\\n\\n    function _closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes)\\n        internal\\n        pausable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        )\\n    {\\n        require(swapAmount != 0, \\\"swapAmount == 0\\\");\\n\\n        Loan memory loanLocal = loans[loanId];\\n        _checkAuthorized(\\n            loanLocal.id,\\n            loanLocal.active,\\n            loanLocal.borrower\\n        );\\n\\n        if (receiver == address(0)) {\\n            receiver = msg.sender;\\n        }\\n\\n        LoanParams memory loanParamsLocal = loanParams[loanLocal.loanParamsId];\\n\\n        uint256 principalPlusInterest = _settleInterest(loanLocal.lender, loanId)\\n            .add(loanLocal.principal);\\n\\n        if (swapAmount > loanLocal.collateral) {\\n            swapAmount = loanLocal.collateral;\\n        }\\n\\n        loanCloseAmount = principalPlusInterest;\\n        if (swapAmount != loanLocal.collateral) {\\n            loanCloseAmount = loanCloseAmount\\n                .mul(swapAmount)\\n                .div(loanLocal.collateral);\\n        }\\n        require(loanCloseAmount != 0, \\\"loanCloseAmount == 0\\\");\\n\\n        uint256 usedCollateral;\\n        uint256 collateralToLoanSwapRate;\\n        (usedCollateral, withdrawAmount, collateralToLoanSwapRate) = _coverPrincipalWithSwap(\\n            loanLocal,\\n            loanParamsLocal,\\n            swapAmount,\\n            loanCloseAmount,\\n            returnTokenIsCollateral,\\n            loanDataBytes\\n        );\\n\\n        if (loanCloseAmount != 0) {\\n            // Repays principal to lender\\n            vaultWithdraw(\\n                loanParamsLocal.loanToken,\\n                loanLocal.lender,\\n                loanCloseAmount\\n            );\\n        }\\n\\n        if (usedCollateral != 0) {\\n            loanLocal.collateral = loanLocal.collateral\\n                .sub(usedCollateral);\\n        }\\n\\n        withdrawToken = returnTokenIsCollateral ?\\n            loanParamsLocal.collateralToken :\\n            loanParamsLocal.loanToken;\\n\\n        if (withdrawAmount != 0) {\\n            _withdrawAsset(\\n                withdrawToken,\\n                receiver,\\n                withdrawAmount\\n            );\\n        }\\n\\n        _finalizeClose(\\n            loanLocal,\\n            loanParamsLocal,\\n            loanCloseAmount,\\n            usedCollateral,\\n            collateralToLoanSwapRate,\\n            CloseTypes.Swap\\n        );\\n        IToken(loanLocal.lender).consume(loanCloseAmount);\\n    }\\n\\n    function _updateDepositAmount(\\n        bytes32 loanId,\\n        uint256 principalBefore,\\n        uint256 principalAfter)\\n        internal\\n    {\\n        uint256 depositValueAsLoanToken;\\n        uint256 depositValueAsCollateralToken;\\n        bytes32 slot = keccak256(abi.encode(loanId, LoanDepositValueID));\\n        assembly {\\n            switch principalAfter\\n            case 0 {\\n                sstore(slot, 0)\\n                sstore(add(slot, 1), 0)\\n            }\\n            default {\\n                depositValueAsLoanToken := div(mul(sload(slot), principalAfter), principalBefore)\\n                sstore(slot, depositValueAsLoanToken)\\n\\n                slot := add(slot, 1)\\n                depositValueAsCollateralToken := div(mul(sload(slot), principalAfter), principalBefore)\\n                sstore(slot, depositValueAsCollateralToken)\\n            }\\n        }\\n\\n        emit LoanDeposit(\\n            loanId,\\n            depositValueAsLoanToken,\\n            depositValueAsCollateralToken\\n        );\\n    }\\n\\n    function _checkAuthorized(\\n        bytes32 _id,\\n        bool _active,\\n        address _borrower)\\n        internal\\n        view\\n    {\\n        require(_active, \\\"loan is closed\\\");\\n        require(\\n            msg.sender == _borrower ||\\n            delegatedManagers[_id][msg.sender],\\n            \\\"unauthorized\\\"\\n        );\\n    }\\n\\n\\n\\n    function _coverPrincipalWithSwap(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 swapAmount,\\n        uint256 principalNeeded,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes)\\n        internal\\n        returns (uint256 usedCollateral, uint256 withdrawAmount, uint256 collateralToLoanSwapRate)\\n    {\\n        uint256 destTokenAmountReceived;\\n        uint256 sourceTokenAmountUsed;\\n        (destTokenAmountReceived, sourceTokenAmountUsed, collateralToLoanSwapRate) = _doCollateralSwap(\\n            loanLocal,\\n            loanParamsLocal,\\n            swapAmount,\\n            principalNeeded,\\n            returnTokenIsCollateral,\\n            loanDataBytes\\n        );\\n\\n        if (returnTokenIsCollateral) {\\n            if (destTokenAmountReceived > principalNeeded) {\\n                // better fill than expected, so send excess to borrower\\n                vaultWithdraw(\\n                    loanParamsLocal.loanToken,\\n                    loanLocal.borrower,\\n                    destTokenAmountReceived - principalNeeded\\n                );\\n            }\\n            withdrawAmount = swapAmount > sourceTokenAmountUsed ?\\n                swapAmount - sourceTokenAmountUsed :\\n                0;\\n        } else {\\n            require(sourceTokenAmountUsed == swapAmount, \\\"swap error\\\");\\n            withdrawAmount = destTokenAmountReceived - principalNeeded;\\n        }\\n\\n        usedCollateral = sourceTokenAmountUsed > swapAmount ?\\n            sourceTokenAmountUsed :\\n            swapAmount;\\n    }\\n\\n    function _doCollateralSwap(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 swapAmount,\\n        uint256 principalNeeded,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes)\\n        internal\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed, uint256 collateralToLoanSwapRate)\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed, collateralToLoanSwapRate) = _loanSwap(\\n            loanLocal.id,\\n            loanParamsLocal.collateralToken,\\n            loanParamsLocal.loanToken,\\n            loanLocal.borrower,\\n            swapAmount, // minSourceTokenAmount\\n            loanLocal.collateral, // maxSourceTokenAmount\\n            returnTokenIsCollateral ?\\n                principalNeeded :  // requiredDestTokenAmount\\n                0,\\n            false, // bypassFee\\n            loanDataBytes\\n        );\\n        require(destTokenAmountReceived >= principalNeeded, \\\"insufficient dest amount\\\");\\n        require(sourceTokenAmountUsed <= loanLocal.collateral, \\\"excessive source amount\\\");\\n    }\\n\\n    function _getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 principal,\\n        uint256 collateral,\\n        bool silentFail)\\n        internal\\n        returns (uint256 currentMargin, uint256 collateralToLoanRate)\\n    {\\n        address _priceFeeds = priceFeeds;\\n        (bool success, bytes memory data) = _priceFeeds.staticcall(\\n            abi.encodeWithSelector(\\n                IPriceFeeds(_priceFeeds).getCurrentMargin.selector,\\n                loanToken,\\n                collateralToken,\\n                principal,\\n                collateral\\n            )\\n        );\\n        if (success) {\\n            assembly {\\n                currentMargin := mload(add(data, 32))\\n                collateralToLoanRate := mload(add(data, 64))\\n            }\\n        } else {\\n            require(silentFail, \\\"margin query failed\\\");\\n        }\\n    }\\n\\n    function _finalizeClose(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 loanCloseAmount,\\n        uint256 collateralCloseAmount,\\n        uint256 collateralToLoanSwapRate,\\n        CloseTypes closeType)\\n        internal\\n    {\\n        (uint256 principalBefore, uint256 principalAfter)  = _closeLoan(\\n            loanLocal,\\n            loanParamsLocal.loanToken,\\n            loanCloseAmount\\n        );\\n\\n        // this is still called even with full loan close to return collateralToLoanRate\\n        (uint256 currentMargin, uint256 collateralToLoanRate) = _getCurrentMargin(\\n            loanParamsLocal.loanToken,\\n            loanParamsLocal.collateralToken,\\n            principalAfter,\\n            loanLocal.collateral,\\n            true // silentFail\\n        );\\n\\n        //// Note: We can safely skip the margin check if closing via closeWithDeposit or if closing the loan in full by any method ////\\n        require(\\n            closeType == CloseTypes.Deposit ||\\n            principalAfter == 0 || // loan fully closed\\n            currentMargin > loanParamsLocal.maintenanceMargin,\\n            \\\"unhealthy position\\\"\\n        );\\n\\n        _updateDepositAmount(\\n            loanLocal.id,\\n            principalBefore,\\n            principalAfter\\n        );\\n\\n        _emitClosingEvents(\\n            loanParamsLocal,\\n            loanLocal,\\n            loanCloseAmount,\\n            collateralCloseAmount,\\n            collateralToLoanRate,\\n            collateralToLoanSwapRate,\\n            currentMargin,\\n            closeType\\n        );\\n    }\\n}\"\r\n    },\r\n    \"LoanClosingsShared.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"State.sol\\\";\\nimport \\\"LoanClosingsEvents.sol\\\";\\nimport \\\"VaultController.sol\\\";\\nimport \\\"InterestHandler.sol\\\";\\nimport \\\"SwapsUser.sol\\\";\\nimport \\\"ILoanPool.sol\\\";\\nimport \\\"PausableGuardian.sol\\\";\\n\\ncontract LoanClosingsShared is State, LoanClosingsEvents, VaultController, InterestHandler, SwapsUser, PausableGuardian {\\n\\n    enum CloseTypes {\\n        Deposit,\\n        Swap,\\n        Liquidation\\n    }\\n\\n    function _getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 principal,\\n        uint256 collateral,\\n        bool silentFail)\\n        internal\\n        returns (uint256 currentMargin, uint256 collateralToLoanRate)\\n    {\\n        address _priceFeeds = priceFeeds;\\n        (bool success, bytes memory data) = _priceFeeds.staticcall(\\n            abi.encodeWithSelector(\\n                IPriceFeeds(_priceFeeds).getCurrentMargin.selector,\\n                loanToken,\\n                collateralToken,\\n                principal,\\n                collateral\\n            )\\n        );\\n        if (success) {\\n            assembly {\\n                currentMargin := mload(add(data, 32))\\n                collateralToLoanRate := mload(add(data, 64))\\n            }\\n        } else {\\n            require(silentFail, \\\"margin query failed\\\");\\n        }\\n    }\\n\\n    // The receiver always gets back an ERC20 (even WETH)\\n    function _returnPrincipalWithDeposit(\\n        address loanToken,\\n        address receiver,\\n        uint256 principalNeeded)\\n        internal\\n    {\\n        if (principalNeeded != 0) {\\n            if (msg.value == 0) {\\n                vaultTransfer(\\n                    loanToken,\\n                    msg.sender,\\n                    receiver,\\n                    principalNeeded\\n                );\\n            } else {\\n                require(loanToken == address(wethToken), \\\"wrong asset sent\\\");\\n                require(msg.value >= principalNeeded, \\\"not enough ether\\\");\\n                wethToken.deposit.value(principalNeeded)();\\n                if (receiver != address(this)) {\\n                    vaultTransfer(\\n                        loanToken,\\n                        address(this),\\n                        receiver,\\n                        principalNeeded\\n                    );\\n                }\\n                if (msg.value > principalNeeded) {\\n                    // refund overage\\n                    Address.sendValue(\\n                        msg.sender,\\n                        msg.value - principalNeeded\\n                    );\\n                }\\n            }\\n        } else {\\n            require(msg.value == 0, \\\"wrong asset sent\\\");\\n        }\\n    }\\n\\n    function _closeLoan(\\n        Loan memory loanLocal,\\n        address loanToken,\\n        uint256 loanCloseAmount)\\n        internal\\n        returns (uint256 principalBefore, uint256 principalAfter)\\n    {\\n        require(loanCloseAmount != 0, \\\"nothing to close\\\");\\n\\n        principalBefore = loanLocal.principal;\\n        uint256 loanInterest = loanInterestTotal[loanLocal.id];\\n\\n        if (loanCloseAmount == principalBefore.add(loanInterest)) {\\n            poolPrincipalTotal[loanLocal.lender] = poolPrincipalTotal[loanLocal.lender]\\n                .sub(principalBefore);\\n            loanLocal.principal = 0;\\n\\n            loanInterestTotal[loanLocal.id] = 0;\\n\\n            loanLocal.active = false;\\n            loanLocal.endTimestamp = block.timestamp;\\n            loanLocal.pendingTradesId = 0;\\n            activeLoansSet.removeBytes32(loanLocal.id);\\n            lenderLoanSets[loanLocal.lender].removeBytes32(loanLocal.id);\\n            borrowerLoanSets[loanLocal.borrower].removeBytes32(loanLocal.id);\\n        } else {\\n            // interest is paid before principal\\n            if (loanCloseAmount >= loanInterest) {\\n                principalAfter = principalBefore.sub(loanCloseAmount - loanInterest);\\n\\n                loanLocal.principal = principalAfter;\\n                poolPrincipalTotal[loanLocal.lender] = poolPrincipalTotal[loanLocal.lender]\\n                    .sub(loanCloseAmount - loanInterest);\\n\\n                loanInterestTotal[loanLocal.id] = 0;\\n            } else {\\n                principalAfter = principalBefore;\\n                loanInterestTotal[loanLocal.id] = loanInterest - loanCloseAmount;\\n                loanInterest = loanCloseAmount;\\n            }\\n        }\\n\\n        uint256 poolInterest = poolInterestTotal[loanLocal.lender];\\n        if (poolInterest > loanInterest) {\\n            poolInterestTotal[loanLocal.lender] = poolInterest - loanInterest;\\n        }\\n        else {\\n            poolInterestTotal[loanLocal.lender] = 0;\\n        }\\n\\n        // pay fee\\n        _payLendingFee(\\n            loanLocal.lender,\\n            loanToken,\\n            _getLendingFee(loanInterest)\\n        );\\n\\n        loans[loanLocal.id] = loanLocal;\\n    }\\n\\n    function _emitClosingEvents(\\n        LoanParams memory loanParamsLocal,\\n        Loan memory loanLocal,\\n        uint256 loanCloseAmount,\\n        uint256 collateralCloseAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 collateralToLoanSwapRate,\\n        uint256 currentMargin,\\n        CloseTypes closeType)\\n        internal\\n    {\\n        if (closeType == CloseTypes.Deposit) {\\n            emit CloseWithDeposit(\\n                loanLocal.borrower,                             // user (borrower)\\n                loanLocal.lender,                               // lender\\n                loanLocal.id,                                   // loanId\\n                msg.sender,                                     // closer\\n                loanParamsLocal.loanToken,                      // loanToken\\n                loanParamsLocal.collateralToken,                // collateralToken\\n                loanCloseAmount,                                // loanCloseAmount\\n                collateralCloseAmount,                          // collateralCloseAmount\\n                collateralToLoanRate,                           // collateralToLoanRate\\n                currentMargin                                   // currentMargin\\n            );\\n        } else if (closeType == CloseTypes.Swap) {\\n            // exitPrice = 1 / collateralToLoanSwapRate\\n            if (collateralToLoanSwapRate != 0) {\\n                collateralToLoanSwapRate = SafeMath.div(WEI_PRECISION * WEI_PRECISION, collateralToLoanSwapRate);\\n            }\\n\\n            // currentLeverage = 100 / currentMargin\\n            if (currentMargin != 0) {\\n                currentMargin = SafeMath.div(10**38, currentMargin);\\n            }\\n\\n            emit CloseWithSwap(\\n                loanLocal.borrower,                             // user (trader)\\n                loanLocal.lender,                               // lender\\n                loanLocal.id,                                   // loanId\\n                loanParamsLocal.collateralToken,                // collateralToken\\n                loanParamsLocal.loanToken,                      // loanToken\\n                msg.sender,                                     // closer\\n                collateralCloseAmount,                          // positionCloseSize\\n                loanCloseAmount,                                // loanCloseAmount\\n                collateralToLoanSwapRate,                       // exitPrice (1 / collateralToLoanSwapRate)\\n                currentMargin                                   // currentLeverage\\n            );\\n        } else { // closeType == CloseTypes.Liquidation\\n            emit Liquidate(\\n                loanLocal.borrower,                             // user (borrower)\\n                msg.sender,                                     // liquidator\\n                loanLocal.id,                                   // loanId\\n                loanLocal.lender,                               // lender\\n                loanParamsLocal.loanToken,                      // loanToken\\n                loanParamsLocal.collateralToken,                // collateralToken\\n                loanCloseAmount,                                // loanCloseAmount\\n                collateralCloseAmount,                          // collateralCloseAmount\\n                collateralToLoanRate,                           // collateralToLoanRate\\n                currentMargin                                   // currentMargin\\n            );\\n        }\\n    }\\n\\n    // withdraws asset to receiver\\n    function _withdrawAsset(\\n        address assetToken,\\n        address receiver,\\n        uint256 assetAmount)\\n        internal\\n    {\\n        if (assetAmount != 0) {\\n            if (assetToken == address(wethToken)) {\\n                vaultEtherWithdraw(\\n                    receiver,\\n                    assetAmount\\n                );\\n            } else {\\n                vaultWithdraw(\\n                    assetToken,\\n                    receiver,\\n                    assetAmount\\n                );\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"State.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\nimport \\\"Constants.sol\\\";\\nimport \\\"Objects.sol\\\";\\nimport \\\"EnumerableBytes32Set.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"InterestOracle.sol\\\";\\nimport \\\"VolumeTracker.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\n\\n\\ncontract State is Constants, Objects, ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\\n    address public priceFeeds;                                                              // handles asset reference price lookups\\n    address public swapsImpl;                                                               // handles asset swaps using dex liquidity\\n\\n    mapping (bytes4 => address) public logicTargets;                                        // implementations of protocol functions\\n\\n    mapping (bytes32 => Loan) public loans;                                                 // loanId => Loan\\n    mapping (bytes32 => LoanParams) public loanParams;                                      // loanParamsId => LoanParams loanParamsId = keccak(loanToken, collateralToken,isTorque)\\n\\n    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                    // lender => orderParamsId => Order\\n    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;                  // borrower => orderParamsId => Order\\n\\n    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;                // loanId => delegated => approved\\n\\n    // Interest\\n    mapping (address => mapping (address => LenderInterest)) public lenderInterest;         // lender => loanToken => LenderInterest object (depreciated)\\n    mapping (bytes32 => LoanInterest) public loanInterest;                                  // loanId => LoanInterest object (depreciated)\\n\\n    // Internals\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                               // implementations set\\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                                // active loans set\\n\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;           // lender loans set\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;         // borrow loans set\\n    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;        // user loan params set (deprecated)\\n\\n    address public feesController;                                                          // address controlling fee withdrawals\\n\\n    uint256 public lendingFeePercent = 10 ether; // 10% fee                                 // fee taken from lender interest payments\\n    mapping (address => uint256) public lendingFeeTokensHeld;                               // total interest fees received and not withdrawn per asset\\n    mapping (address => uint256) public lendingFeeTokensPaid;                               // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\\n\\n    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                             // fee paid for each trade\\n    mapping (address => uint256) public tradingFeeTokensHeld;                               // total trading fees received and not withdrawn per asset\\n    mapping (address => uint256) public tradingFeeTokensPaid;                               // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\\n\\n    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                           // origination fee paid for each loan\\n    mapping (address => uint256) public borrowingFeeTokensHeld;                             // total borrowing fees received and not withdrawn per asset\\n    mapping (address => uint256) public borrowingFeeTokensPaid;                             // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\\n\\n    uint256 public protocolTokenHeld;                                                       // current protocol token deposit balance\\n    uint256 public protocolTokenPaid;                                                       // lifetime total payout of protocol token\\n\\n    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                         // fee share for affiliate program\\n\\n    mapping (address => mapping (address => uint256)) public liquidationIncentivePercent;   // percent discount on collateral for liquidators per loanToken and collateralToken, LiquidationHelper.getLiquidationAmounts will use default liquidation incentive of 7e18\\n\\n    mapping (address => address) public loanPoolToUnderlying;                               // loanPool => underlying\\n    mapping (address => address) public underlyingToLoanPool;                               // underlying => loanPool\\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                                  // loan pools set\\n\\n    mapping (address => bool) public supportedTokens;                                       // supported tokens for swaps\\n\\n    uint256 public maxDisagreement = 5 ether;                                               // % disagreement between swap rate and reference rate\\n\\n    uint256 public sourceBufferPercent = 5 ether;                                           // used to estimate kyber swap source amount\\n\\n    uint256 public maxSwapSize = 1500 ether;                                                // maximum supported swap size in ETH\\n\\n\\n    /**** new interest model start */\\n    mapping(address => uint256) public poolLastUpdateTime; // per itoken\\n    mapping(address => uint256) public poolPrincipalTotal; // per itoken\\n    mapping(address => uint256) public poolInterestTotal; // per itoken\\n    mapping(address => uint256) public poolRatePerTokenStored; // per itoken\\n\\n    mapping(bytes32 => uint256) public loanInterestTotal; // per loan\\n    mapping(bytes32 => uint256) public loanRatePerTokenPaid; // per loan\\n\\n    mapping(address => uint256) internal poolLastInterestRate; // per itoken\\n    mapping(address => InterestOracle.Observation[256]) internal poolInterestRateObservations; // per itoken\\n    mapping(address => uint8) internal poolLastIdx; // per itoken\\n    uint32 public timeDelta;\\n    uint32 public twaiLength;\\n    /**** new interest model end */\\n\\n    mapping(address => VolumeTracker.Observation[65535]) internal volumeTradedObservations; //recorded Observations for every trade per user\\n    mapping(address => uint16) internal volumeLastIdx; //last index in the observation array. bounded by cardinality\\n    mapping(address => uint16) internal volumeTradedCardinality; //upper bound for recording data into array. Can be increased, not decreased, and increases cost for binary searches when increased. increase with caution\\n\\n    function _setTarget(\\n        bytes4 sig,\\n        address target)\\n        internal\\n    {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Constants.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"IWethERC20.sol\\\";\\n\\n\\ncontract Constants {\\n\\n    uint256 internal constant WEI_PRECISION = 10**18;\\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\\n\\n    uint256 internal constant DAYS_IN_A_YEAR = 365;\\n    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\\n\\n    // string internal constant UserRewardsID = \\\"UserRewards\\\"; // decommissioned\\n    string internal constant LoanDepositValueID = \\\"LoanDepositValue\\\";\\n\\n    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // mainnet\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // mainnet\\n    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3; // mainnet\\n    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F; // mainnet\\n    address public constant OOKI = address(0x0De05F6447ab4D22c8827449EE4bA2D5C288379B); // mainnet\\n\\n    //IWethERC20 public constant wethToken = IWethERC20(0xd0A1E359811322d97991E03f863a0C30C2cF029C); // kovan\\n    //address public constant bzrxTokenAddress = 0xB54Fc2F2ea17d798Ad5C7Aba2491055BCeb7C6b2; // kovan\\n    //address public constant vbzrxTokenAddress = 0x6F8304039f34fd6A6acDd511988DCf5f62128a32; // kovan\\n    \\n    //IWethERC20 public constant wethToken = IWethERC20(0x602C71e4DAC47a042Ee7f46E0aee17F94A3bA0B6); // local testnet only\\n    //address public constant bzrxTokenAddress = 0x3194cBDC3dbcd3E11a07892e7bA5c3394048Cc87; // local testnet only\\n    //address public constant vbzrxTokenAddress = 0xa3B53dDCd2E3fC28e8E130288F2aBD8d5EE37472; // local testnet only\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); // bsc (Wrapped BNB)\\n    // address public constant bzrxTokenAddress = address(0); // bsc\\n    // address public constant vbzrxTokenAddress = address(0); // bsc\\n    // address public constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d; // bsc\\n    // address public constant OOKI = 0xa5a6817ac4c164F27df3254B71fE83904B1C3c3e; // bsc\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270); // polygon (Wrapped MATIC)\\n    // address public constant bzrxTokenAddress = address(0); // polygon\\n    // address public constant vbzrxTokenAddress = address(0); // polygon\\n    // address public constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; // polygon\\n    // address public constant OOKI = 0xCd150B1F528F326f5194c012f32Eb30135C7C2c9; // polygon\\n\\n    //IWethERC20 public constant wethToken = IWethERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7); // avax (Wrapped AVAX)\\n    //address public constant bzrxTokenAddress = address(0); // avax\\n    //address public constant vbzrxTokenAddress = address(0); // avax\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1); // arbitrum\\n    // address public constant bzrxTokenAddress = address(0); // arbitrum\\n    // address public constant vbzrxTokenAddress = address(0); // arbitrum\\n    // address public constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8; // arbitrum\\n    // address public constant OOKI = address(0x400F3ff129Bc9C9d239a567EaF5158f1850c65a4); // arbitrum\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0xD4949664cD82660AaE99bEdc034a0deA8A0bd517); // evmos (Wrapped evmos)\\n    // address public constant bzrxTokenAddress = address(0); // evmos\\n    // address public constant vbzrxTokenAddress = address(0); // evmos\\n    // address public constant OOKI = address(0); // evmos\\n\\n    // IWethERC20 public constant wethToken = IWethERC20(0x4200000000000000000000000000000000000006); // optimism (Wrapped eth)\\n    // address public constant bzrxTokenAddress = address(0); // optimism\\n    // address public constant vbzrxTokenAddress = address(0); // optimism\\n    // address public constant USDC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;\\n    // address public constant OOKI = address(0); // optimism\\n\\n}\\n\"\r\n    },\r\n    \"IWethERC20.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"IWeth.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\n\\ncontract IWethERC20 is IWeth, IERC20 {}\\n\"\r\n    },\r\n    \"IWeth.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Objects.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"LoanStruct.sol\\\";\\nimport \\\"LoanParamsStruct.sol\\\";\\nimport \\\"OrderStruct.sol\\\";\\nimport \\\"LenderInterestStruct.sol\\\";\\nimport \\\"LoanInterestStruct.sol\\\";\\n\\n\\ncontract Objects is\\n    LoanStruct,\\n    LoanParamsStruct,\\n    OrderStruct,\\n    LenderInterestStruct,\\n    LoanInterestStruct\\n{}\"\r\n    },\r\n    \"LoanStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanStruct {\\n    struct Loan {\\n        bytes32 id;                 // id of the loan\\n        bytes32 loanParamsId;       // the linked loan params id\\n        bytes32 pendingTradesId;    // the linked pending trades id\\n        uint256 principal;          // total borrowed amount outstanding\\n        uint256 collateral;         // total collateral escrowed for the loan\\n        uint256 startTimestamp;     // loan start time\\n        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\\n        uint256 startMargin;        // initial margin when the loan opened\\n        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\\n        address borrower;           // borrower of this loan\\n        address lender;             // lender of this loan\\n        bool active;                // if false, the loan has been fully closed\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanParamsStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        bytes32 id;                 // id of loan params object\\n        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\\n        address owner;              // owner of this object (depreciated)\\n        address loanToken;          // the token being loaned\\n        address collateralToken;    // the required collateral token\\n        uint256 minInitialMargin;   // the minimum allowed initial margin\\n        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\\n        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term) historically(0 means torque non zero means fulcrum)\\n    }\\n}\\n\"\r\n    },\r\n    \"OrderStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract OrderStruct {\\n    struct Order {\\n        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\\n        uint256 interestRate;           // interest rate defined by the creator of this order\\n        uint256 minLoanTerm;            // minimum loan term allowed\\n        uint256 maxLoanTerm;            // maximum loan term allowed\\n        uint256 createdTimestamp;       // timestamp when this order was created\\n        uint256 expirationTimestamp;    // timestamp when this order expires\\n    }\\n}\\n\"\r\n    },\r\n    \"LenderInterestStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LenderInterestStruct {\\n    struct LenderInterest {\\n        uint256 principalTotal;     // total borrowed amount outstanding of asset (DEPRECIATED)\\n        uint256 owedPerDay;         // interest owed per day for all loans of asset (DEPRECIATED)\\n        uint256 owedTotal;          // total interest owed for all loans of asset (DEPRECIATED)\\n        uint256 paidTotal;          // total interest paid so far for asset (DEPRECIATED)\\n        uint256 updatedTimestamp;   // last update (DEPRECIATED)\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanInterestStruct.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanInterestStruct {\\n    struct LoanInterest {\\n        uint256 owedPerDay;         // interest owed per day for loan (DEPRECIATED)\\n        uint256 depositTotal;       // total escrowed interest for loan (DEPRECIATED)\\n        uint256 updatedTimestamp;   // last update (DEPRECIATED)\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableBytes32Set.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @dev Library for managing loan sets\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n *\\n */\\nlibrary EnumerableBytes32Set {\\n\\n    struct Bytes32Set {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @dev Add an address value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(set, value)){\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes an address value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (contains(set, value)){\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\\n        internal\\n        view\\n        returns (bytes32[] memory output)\\n    {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end-start);\\n        for (uint256 i = start; i < end; i++) {\\n            output[i-start] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.values.length;\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function get(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return set.values[index];\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function getAddress(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 value = set.values[index];\\n        address addrvalue;\\n        assembly {\\n            addrvalue := value\\n        }\\n        return addrvalue;\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.5.0 <0.6.0;\\n\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n    * @dev We use a single lock for the whole contract.\\n    */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n    * @dev Prevents a contract from calling itself, directly or indirectly.\\n    * If you mark a function `nonReentrant`, you should also\\n    * mark it `external`. Calling one `nonReentrant` function from\\n    * another is not supported. Instead, you can implement a\\n    * `private` function doing the actual work, and an `external`\\n    * wrapper marked as `nonReentrant`.\\n    */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"InterestOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nlibrary InterestOracle {\\n    struct Observation {\\n        uint32 blockTimestamp;\\n        int56 irCumulative;\\n        int24 tick;\\n    }\\n\\n    /// @param last The specified observation\\n    /// @param blockTimestamp The new timestamp\\n    /// @param tick The active tick\\n    /// @return Observation The newly populated observation\\n    function convert(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick\\n    ) private pure returns (Observation memory) {\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                irCumulative: last.irCumulative + int56(tick) * (blockTimestamp - last.blockTimestamp),\\n                tick: tick\\n            });\\n    }\\n\\n    /// @param self oracle array\\n    /// @param index most recent observation index\\n    /// @param blockTimestamp timestamp of observation\\n    /// @param tick active tick\\n    /// @param cardinality populated elements\\n    /// @param minDelta minimum time delta between observations\\n    /// @return indexUpdated The new index\\n    function write(\\n        Observation[256] storage self,\\n        uint8 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint8 cardinality,\\n        uint32 minDelta\\n    ) internal returns (uint8 indexUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation in last minDelta seconds\\n        if (last.blockTimestamp + minDelta >= blockTimestamp) return index;\\n\\n        indexUpdated = (index + 1) % cardinality;\\n        self[indexUpdated] = convert(last, blockTimestamp, tick);\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function binarySearch(\\n        Observation[256] storage self,\\n        uint32 target,\\n        uint8 index,\\n        uint8 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            if (beforeOrAt.blockTimestamp == 0) {\\n                l = 0;\\n                r = index;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = beforeOrAt.blockTimestamp <= target;\\n            bool targetBeforeOrAt = atOrAfter.blockTimestamp >= target;\\n            if (!targetAtOrAfter) {\\n                r = i - 1;\\n                continue;\\n            } else if (!targetBeforeOrAt) {\\n                l = i + 1;\\n                continue;\\n            }\\n            break;\\n        }\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param tick current tick\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function getSurroundingObservations(\\n        Observation[256] storage self,\\n        uint32 target,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n\\n        beforeOrAt = self[index];\\n\\n        if (beforeOrAt.blockTimestamp <= target) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                return (beforeOrAt, convert(beforeOrAt, target, tick));\\n            }\\n        }\\n\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (beforeOrAt.blockTimestamp == 0) beforeOrAt = self[0];\\n        require(beforeOrAt.blockTimestamp <= target && beforeOrAt.blockTimestamp != 0, \\\"OLD\\\");\\n        return binarySearch(self, target, index, cardinality);\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgo lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return irCumulative cumulative interest rate, calculated with rate * time\\n    function observeSingle(\\n        Observation[256] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) internal view returns (int56 irCumulative) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) {\\n                last = convert(last, time, tick);\\n            }\\n            return last.irCumulative;\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\\n            getSurroundingObservations(self, target, tick, index, cardinality);\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // left boundary\\n            return beforeOrAt.irCumulative;\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // right boundary\\n            return atOrAfter.irCumulative;\\n        } else {\\n            // middle\\n            return\\n                beforeOrAt.irCumulative +\\n                    ((atOrAfter.irCumulative - beforeOrAt.irCumulative) / (atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp)) *\\n                    (target - beforeOrAt.blockTimestamp);\\n        }\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgos lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return irCumulative cumulative interest rate, calculated with rate * time\\n    function arithmeticMean(\\n        Observation[256] storage self,\\n        uint32 time,\\n        uint32[2] memory secondsAgos,\\n        int24 tick,\\n        uint8 index,\\n        uint8 cardinality\\n    ) internal view returns (int24) {\\n        int56 firstPoint = observeSingle(self, time, secondsAgos[1], tick, index, cardinality);\\n        int56 secondPoint = observeSingle(self, time, secondsAgos[0], tick, index, cardinality);\\n        return int24((firstPoint-secondPoint) / (secondsAgos[0]-secondsAgos[1]));\\n    }\\n}\"\r\n    },\r\n    \"VolumeTracker.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nlibrary VolumeTracker {\\n    struct Observation {\\n        uint32 blockTimestamp;\\n        uint128 volCumulative;\\n    }\\n\\n    /// @param last The specified observation\\n    /// @param blockTimestamp The new timestamp\\n    /// @param tick The active tick\\n    /// @return Observation The newly populated observation\\n    function convert(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        uint128 tick\\n    ) private pure returns (Observation memory) {\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                volCumulative: last.volCumulative + tick\\n            });\\n    }\\n\\n    /// @param self oracle array\\n    /// @param index most recent observation index\\n    /// @param blockTimestamp timestamp of observation\\n    /// @param tick active tick\\n    /// @param cardinality populated elements\\n    /// @return indexUpdated The new index\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        uint128 tick,\\n        uint16 cardinality,\\n        uint32 minDelta\\n    ) public returns (uint16 indexUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation in last minDelta seconds\\n        if (last.blockTimestamp + minDelta >= blockTimestamp) {\\n            self[index] = convert(last, last.blockTimestamp, tick);\\n            return index;\\n        }\\n        indexUpdated = (index + 1) % cardinality;\\n        self[indexUpdated] = convert(last, blockTimestamp, tick);\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt) {\\n        Observation memory atOrAfter;\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            if (beforeOrAt.blockTimestamp == 0) {\\n                l = 0;\\n                r = index;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = beforeOrAt.blockTimestamp <= target;\\n            bool targetBeforeOrAt = atOrAfter.blockTimestamp >= target;\\n            if (!targetAtOrAfter) {\\n                r = i - 1;\\n                continue;\\n            } else if (!targetBeforeOrAt) {\\n                l = i + 1;\\n                continue;\\n            }\\n            break;\\n        }\\n    }\\n\\n    /// @param self oracle array\\n    /// @param target targeted timestamp to retrieve value\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt) {\\n\\n        beforeOrAt = self[index];\\n\\n        if (beforeOrAt.blockTimestamp <= target) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                return beforeOrAt;\\n            } else {\\n                return beforeOrAt;\\n            }\\n        }\\n\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (beforeOrAt.blockTimestamp == 0) beforeOrAt = self[0];\\n        require(beforeOrAt.blockTimestamp <= target && beforeOrAt.blockTimestamp != 0, \\\"OLD\\\");\\n        return binarySearch(self, target, index, cardinality);\\n    }\\n\\n    function checkLastTradeTime(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        uint16 index\\n    ) internal view returns (bool) {\\n        return self[index].blockTimestamp >= time-secondsAgo;\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgo lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return volCumulative cumulative volume\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        uint16 index,\\n        uint16 cardinality\\n    ) internal view returns (uint128 volCumulative) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            return last.volCumulative;\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        return getSurroundingObservations(self, target, index, cardinality).volCumulative;\\n    }\\n\\n    /// @param self oracle array\\n    /// @param time current timestamp\\n    /// @param secondsAgos lookback time\\n    /// @param index latest index\\n    /// @param cardinality populated elements\\n    /// @return volDelta Volume delta based on time period\\n    function volumeDelta(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[2] memory secondsAgos,\\n        uint16 index,\\n        uint16 cardinality\\n    ) public view returns (uint128 volDelta) {\\n        if (!checkLastTradeTime(self, time, secondsAgos[0], index)) return 0; //no trades since the furthest seconds back\\n        uint128 secondPoint;\\n        //acts as a way to ensure data is available for new traders. If passed cardinality in reporting then it is fair game for errors as assumptions cannot be made\\n        if (self[cardinality].volCumulative == 0 && self[1].blockTimestamp > secondsAgos[0]) {\\n            secondPoint = 0;\\n        } else { \\n            secondPoint = observeSingle(self, time, secondsAgos[0], index, cardinality);\\n        }\\n        uint128 firstPoint = observeSingle(self, time, secondsAgos[1], index, cardinality);\\n        return firstPoint-secondPoint;\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"LoanClosingsEvents.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract LoanClosingsEvents {\\n\\n    event CloseWithDeposit(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address closer,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    event CloseWithSwap(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address collateralToken,\\n        address loanToken,\\n        address closer,\\n        uint256 positionCloseSize,\\n        uint256 loanCloseAmount,\\n        uint256 exitPrice, // one unit of collateralToken, denominated in loanToken\\n        uint256 currentLeverage\\n    );\\n\\n    event Liquidate(\\n        address indexed user,\\n        address indexed liquidator,\\n        bytes32 indexed loanId,\\n        address lender,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n    \\n    // DEPRECATED\\n    event Rollover(\\n        address indexed user,\\n        address indexed caller,\\n        bytes32 indexed loanId,\\n        address lender,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralAmountUsed,\\n        uint256 interestAmountAdded,\\n        uint256 loanEndTimestamp,\\n        uint256 gasRebate\\n    );\\n\\n    event LoanDeposit(\\n        bytes32 indexed loanId,\\n        uint256 depositValueAsLoanToken,\\n        uint256 depositValueAsCollateralToken\\n    );\\n}\\n\"\r\n    },\r\n    \"VaultController.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"Constants.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\n\\n\\ncontract VaultController is Constants {\\n    using SafeERC20 for IERC20;\\n\\n    event VaultDeposit(\\n        address indexed asset,\\n        address indexed from,\\n        uint256 amount\\n    );\\n    event VaultWithdraw(\\n        address indexed asset,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    function vaultEtherDeposit(\\n        address from,\\n        uint256 value)\\n        internal\\n    {\\n        IWethERC20 _wethToken = wethToken;\\n        _wethToken.deposit.value(value)();\\n\\n        emit VaultDeposit(\\n            address(_wethToken),\\n            from,\\n            value\\n        );\\n    }\\n\\n    function vaultEtherWithdraw(\\n        address to,\\n        uint256 value)\\n        internal\\n    {\\n        if (value != 0) {\\n            IWethERC20 _wethToken = wethToken;\\n            uint256 balance = address(this).balance;\\n            if (value > balance) {\\n                _wethToken.withdraw(value - balance);\\n            }\\n            Address.sendValue(address(uint160(to)), value);\\n\\n            emit VaultWithdraw(\\n                address(_wethToken),\\n                to,\\n                value\\n            );\\n        }\\n    }\\n\\n    function vaultDeposit(\\n        address token,\\n        address from,\\n        uint256 value)\\n        internal\\n    {\\n        if (value != 0) {\\n            IERC20(token).safeTransferFrom(\\n                from,\\n                address(this),\\n                value\\n            );\\n\\n            emit VaultDeposit(\\n                token,\\n                from,\\n                value\\n            );\\n        }\\n    }\\n\\n    function vaultWithdraw(\\n        address token,\\n        address to,\\n        uint256 value)\\n        internal\\n    {\\n        if (value != 0) {\\n            IERC20(token).safeTransfer(\\n                to,\\n                value\\n            );\\n\\n            emit VaultWithdraw(\\n                token,\\n                to,\\n                value\\n            );\\n        }\\n    }\\n\\n    function vaultTransfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value)\\n        internal\\n    {\\n        if (value != 0) {\\n            if (from == address(this)) {\\n                IERC20(token).safeTransfer(\\n                    to,\\n                    value\\n                );\\n            } else {\\n                IERC20(token).safeTransferFrom(\\n                    from,\\n                    to,\\n                    value\\n                );\\n            }\\n        }\\n    }\\n\\n    function vaultApprove(\\n        address token,\\n        address to,\\n        uint256 value)\\n        internal\\n    {\\n        if (value != 0 && IERC20(token).allowance(address(this), to) != 0) {\\n            IERC20(token).safeApprove(to, 0);\\n        }\\n        IERC20(token).safeApprove(to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"InterestHandler.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"State.sol\\\";\\nimport \\\"ILoanPool.sol\\\";\\nimport \\\"MathUtil.sol\\\";\\nimport \\\"InterestRateEvents.sol\\\";\\nimport \\\"InterestOracle.sol\\\";\\nimport \\\"TickMathV1.sol\\\";\\n\\ncontract InterestHandler is State, InterestRateEvents {\\n    using MathUtil for uint256;\\n    using InterestOracle for InterestOracle.Observation[256];\\n    // returns up to date loan interest or 0 if not applicable\\n    function _settleInterest(\\n        address pool,\\n        bytes32 loanId)\\n        internal\\n        returns (uint256 _loanInterestTotal)\\n    {\\n        poolLastIdx[pool] = poolInterestRateObservations[pool].write(\\n            poolLastIdx[pool],\\n            uint32(block.timestamp),\\n            TickMathV1.getTickAtSqrtRatio(uint160(poolLastInterestRate[pool])),\\n            uint8(-1),\\n            timeDelta\\n        );\\n        uint256[7] memory interestVals = _settleInterest2(\\n            pool,\\n            loanId,\\n            false\\n        );\\n        poolInterestTotal[pool] = interestVals[1];\\n        poolRatePerTokenStored[pool] = interestVals[2];\\n\\n        if (interestVals[3] != 0) {\\n            poolLastInterestRate[pool] = interestVals[3];\\n            emit PoolInterestRateVals(\\n                pool,\\n                interestVals[0],\\n                interestVals[1],\\n                interestVals[2],\\n                interestVals[3]\\n            );\\n        }\\n\\n        if (loanId != 0) {\\n            _loanInterestTotal = interestVals[5];\\n            loanInterestTotal[loanId] = _loanInterestTotal;\\n            loanRatePerTokenPaid[loanId] = interestVals[6];\\n            emit LoanInterestRateVals(\\n                loanId,\\n                interestVals[4],\\n                interestVals[5],\\n                interestVals[6]\\n            );\\n        }\\n\\n        poolLastUpdateTime[pool] = block.timestamp;\\n    }\\n\\n    function _getPoolPrincipal(\\n        address pool)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256[7] memory interestVals = _settleInterest2(\\n            pool,\\n            0,\\n            true\\n        );\\n\\n        return interestVals[0]      // _poolPrincipalTotal\\n            .add(interestVals[1]);  // _poolInterestTotal\\n    }\\n\\n    function _getLoanPrincipal(\\n        address pool,\\n        bytes32 loanId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256[7] memory interestVals = _settleInterest2(\\n            pool,\\n            loanId,\\n            false\\n        );\\n\\n        return interestVals[4]      // _loanPrincipalTotal\\n            .add(interestVals[5]);  // _loanInterestTotal\\n    }\\n\\n    function _settleInterest2(\\n        address pool,\\n        bytes32 loanId,\\n        bool includeLendingFee)\\n        internal\\n        view\\n        returns (uint256[7] memory interestVals)\\n    {\\n        /*\\n            uint256[7] ->\\n            0: _poolPrincipalTotal,\\n            1: _poolInterestTotal,\\n            2: _poolRatePerTokenStored,\\n            3: _poolNextInterestRate,\\n            4: _loanPrincipalTotal,\\n            5: _loanInterestTotal,\\n            6: _loanRatePerTokenPaid\\n        */\\n\\n        interestVals[0] = poolPrincipalTotal[pool]\\n            .add(lenderInterest[pool][loanPoolToUnderlying[pool]].principalTotal); // backwards compatibility\\n        interestVals[1] = poolInterestTotal[pool];\\n\\n        uint256 lendingFee = interestVals[1]\\n            .mul(lendingFeePercent)\\n            .divCeil(WEI_PERCENT_PRECISION);\\n\\n        uint256 _poolVariableRatePerTokenNewAmount;\\n        (_poolVariableRatePerTokenNewAmount, interestVals[3]) = _getRatePerTokenNewAmount(pool, interestVals[0].add(interestVals[1] - lendingFee));\\n\\n        interestVals[1] = interestVals[0]\\n            .mul(_poolVariableRatePerTokenNewAmount)\\n            .div(WEI_PERCENT_PRECISION * WEI_PERCENT_PRECISION)\\n            .add(interestVals[1]);\\n\\n        if (includeLendingFee) {\\n            interestVals[1] -= lendingFee;\\n        }\\n\\n        interestVals[2] = poolRatePerTokenStored[pool]\\n            .add(_poolVariableRatePerTokenNewAmount);\\n\\n         if (loanId != 0 && (interestVals[4] = loans[loanId].principal) != 0) {\\n            interestVals[5] = interestVals[4]\\n                .mul(interestVals[2].sub(loanRatePerTokenPaid[loanId])) // _loanRatePerTokenUnpaid\\n                .div(WEI_PERCENT_PRECISION * WEI_PERCENT_PRECISION)\\n                .add(loanInterestTotal[loanId]);\\n\\n            interestVals[6] = interestVals[2];\\n        }\\n    }\\n\\n    function _getRatePerTokenNewAmount(\\n        address pool,\\n        uint256 poolTotal)\\n        internal\\n        view\\n        returns (uint256 ratePerTokenNewAmount, uint256 nextInterestRate)\\n    {\\n        uint256 timeSinceUpdate = block.timestamp.sub(poolLastUpdateTime[pool]);\\n        uint256 benchmarkRate = TickMathV1.getSqrtRatioAtTick(poolInterestRateObservations[pool].arithmeticMean(\\n            uint32(block.timestamp),\\n            [uint32(timeSinceUpdate+twaiLength), uint32(timeSinceUpdate)],\\n            poolInterestRateObservations[pool][poolLastIdx[pool]].tick,\\n            poolLastIdx[pool],\\n            uint8(-1)\\n        ));\\n        if (timeSinceUpdate != 0 &&\\n            (nextInterestRate = ILoanPool(pool)._nextBorrowInterestRate(poolTotal, 0, benchmarkRate)) != 0) {\\n            ratePerTokenNewAmount = timeSinceUpdate\\n                .mul(nextInterestRate) // rate per year\\n                .mul(WEI_PERCENT_PRECISION)\\n                .div(31536000); // seconds in a year\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ILoanPool.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\n\\ninterface ILoanPool {\\n    function tokenPrice()\\n        external\\n        view\\n        returns (uint256 price);\\n\\n    function borrowInterestRate()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function _nextBorrowInterestRate(\\n        uint256 totalBorrow,\\n        uint256 newBorrow,\\n        uint256 lastInterestRate)\\n        external\\n        view\\n        returns (uint256 nextRate);\\n\\n    function totalAssetSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function assetBalanceOf(\\n        address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\"\r\n    },\r\n    \"MathUtil.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary MathUtil {\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\"\r\n    },\r\n    \"InterestRateEvents.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract InterestRateEvents {\\n\\n    event PoolInterestRateVals(\\n        address indexed pool,\\n        uint256 poolPrincipalTotal,\\n        uint256 poolInterestTotal,\\n        uint256 poolRatePerTokenStored,\\n        uint256 poolNextInterestRate\\n    );\\n\\n    event LoanInterestRateVals(\\n        bytes32 indexed loanId,\\n        uint256 loanPrincipalTotal,\\n        uint256 loanInterestTotal,\\n        uint256 loanRatePerTokenPaid\\n    );\\n}\"\r\n    },\r\n    \"TickMathV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMathV1 {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) public pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = uint256(-1) / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) public pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\"\r\n    },\r\n    \"SwapsUser.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"State.sol\\\";\\nimport \\\"IPriceFeeds.sol\\\";\\nimport \\\"SwapsEvents.sol\\\";\\nimport \\\"FeesHelper.sol\\\";\\nimport \\\"ISwapsImpl.sol\\\";\\nimport \\\"TickMathV1.sol\\\";\\nimport \\\"IDexRecords.sol\\\";\\nimport \\\"Flags.sol\\\";\\nimport \\\"VolumeTracker.sol\\\";\\n\\ncontract SwapsUser is State, SwapsEvents, FeesHelper, Flags {\\n    using VolumeTracker for VolumeTracker.Observation[65535];\\n    function _loanSwap(\\n        bytes32 loanId,\\n        address sourceToken,\\n        address destToken,\\n        address user,\\n        uint256 minSourceTokenAmount,\\n        uint256 maxSourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bool bypassFee,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed,\\n            uint256 sourceToDestSwapRate\\n        )\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\\n            [\\n                sourceToken,\\n                destToken,\\n                address(this), // receiver\\n                address(this), // returnToSender\\n                user\\n            ],\\n            [\\n                minSourceTokenAmount,\\n                maxSourceTokenAmount,\\n                requiredDestTokenAmount\\n            ],\\n            loanId,\\n            bypassFee,\\n            loanDataBytes\\n        );\\n\\n        // will revert if swap size too large\\n        _checkSwapSize(sourceToken, sourceTokenAmountUsed);\\n\\n        // will revert if disagreement found\\n        sourceToDestSwapRate = IPriceFeeds(priceFeeds).checkPriceDisagreement(\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived,\\n            maxDisagreement\\n        );\\n\\n        emit LoanSwap(\\n            loanId,\\n            sourceToken,\\n            destToken,\\n            user,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived\\n        );\\n    }\\n\\n    function _swapsCall(\\n        address[5] memory addrs,\\n        uint256[3] memory vals,\\n        bytes32 loanId,\\n        bool miscBool, // bypassFee\\n        bytes memory loanDataBytes\\n    ) internal returns (uint256, uint256) {\\n        //addrs[0]: sourceToken\\n        //addrs[1]: destToken\\n        //addrs[2]: receiver\\n        //addrs[3]: returnToSender\\n        //addrs[4]: user\\n        //vals[0]:  minSourceTokenAmount\\n        //vals[1]:  maxSourceTokenAmount\\n        //vals[2]:  requiredDestTokenAmount\\n\\n        require(vals[0] != 0, \\\"sourceAmount == 0\\\");\\n\\n        uint256 destTokenAmountReceived;\\n        uint256 sourceTokenAmountUsed;\\n        uint256 tradingFee;\\n        uint128 flagNumber = loanDataBytes.length != 0 ? abi.decode(loanDataBytes, (uint128)) : 0;\\n        if (!miscBool) {\\n            // bypassFee\\n            if (vals[2] == 0) {\\n                // condition: vals[0] will always be used as sourceAmount\\n                if (flagNumber & PAY_WITH_OOKI_FLAG != 0) {\\n                    tradingFee = _getTradingFeeWithOOKI(addrs[0], vals[0]);\\n                    if(tradingFee != 0){\\n                        if(flagNumber & HOLD_OOKI_FLAG != 0){\\n                            tradingFee = _adjustForHeldBalance(tradingFee, addrs[4]);\\n                        }\\n                        IERC20(OOKI).safeTransferFrom(addrs[4], address(this), tradingFee);\\n                        _payTradingFee(\\n                            addrs[4], // user\\n                            loanId,\\n                            OOKI, // sourceToken\\n                            tradingFee\\n                        );\\n                    }\\n                    tradingFee = 0;\\n                } else {\\n                    tradingFee = _getTradingFee(vals[0]);\\n                    if (tradingFee != 0) {\\n                        if(flagNumber & HOLD_OOKI_FLAG != 0){\\n                            tradingFee = _adjustForHeldBalance(tradingFee, addrs[4]);\\n                        }\\n                        _payTradingFee(\\n                            addrs[4], // user\\n                            loanId,\\n                            addrs[0], // sourceToken\\n                            tradingFee\\n                        );\\n\\n                        vals[0] = vals[0].sub(tradingFee);\\n                        if (vals[1] != 0) {\\n                            vals[1] = vals[1].sub(tradingFee);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // condition: unknown sourceAmount will be used\\n\\n                if (flagNumber & PAY_WITH_OOKI_FLAG != 0) {\\n                    tradingFee = _getTradingFeeWithOOKI(addrs[1], vals[2]);\\n                    if(tradingFee != 0){\\n                        if(flagNumber & HOLD_OOKI_FLAG != 0){\\n                            tradingFee = _adjustForHeldBalance(tradingFee, addrs[4]);\\n                        }\\n                        IERC20(OOKI).safeTransferFrom(addrs[4], address(this), tradingFee);\\n                        _payTradingFee(\\n                            addrs[4], // user\\n                            loanId,\\n                            OOKI, // sourceToken\\n                            tradingFee\\n                        );\\n                    }\\n                    tradingFee = 0;\\n                } else {\\n                    tradingFee = _getTradingFee(vals[2]);\\n\\n                    if (tradingFee != 0) {\\n                        if(flagNumber & HOLD_OOKI_FLAG != 0){\\n                            tradingFee = _adjustForHeldBalance(tradingFee, addrs[4]);\\n                        }\\n                        vals[2] = vals[2].add(tradingFee);\\n                    }\\n                }\\n\\n\\n            }\\n        }\\n\\n        if (vals[1] == 0) {\\n            vals[1] = vals[0];\\n        } else {\\n            require(vals[0] <= vals[1], \\\"min greater than max\\\");\\n        }\\n        if (flagNumber & DEX_SELECTOR_FLAG != 0) {\\n            (, bytes[] memory payload) = abi.decode(\\n                loanDataBytes,\\n                (uint128, bytes[])\\n            );\\n            loanDataBytes = payload[0];\\n        }\\n        (\\n            destTokenAmountReceived,\\n            sourceTokenAmountUsed\\n        ) = _swapsCall_internal(addrs, vals, loanDataBytes);\\n\\n        if (flagNumber & TRACK_VOLUME_FLAG != 0) {\\n            _writeVolume(addrs[4], addrs[0], sourceTokenAmountUsed);\\n        }\\n\\n        if (vals[2] == 0) {\\n            // there's no minimum destTokenAmount, but all of vals[0] (minSourceTokenAmount) must be spent, and amount spent can't exceed vals[0]\\n            require(\\n                sourceTokenAmountUsed == vals[0],\\n                \\\"swap too large to fill\\\"\\n            );\\n\\n            if (tradingFee != 0) {\\n                sourceTokenAmountUsed = sourceTokenAmountUsed + tradingFee; // will never overflow\\n            }\\n        } else {\\n            // there's a minimum destTokenAmount required, but sourceTokenAmountUsed won't be greater than vals[1] (maxSourceTokenAmount)\\n            require(sourceTokenAmountUsed <= vals[1], \\\"swap fill too large\\\");\\n            require(\\n                destTokenAmountReceived >= vals[2],\\n                \\\"insufficient swap liquidity\\\"\\n            );\\n\\n            if (tradingFee != 0) {\\n                _payTradingFee(\\n                    addrs[4], // user\\n                    loanId, // loanId,\\n                    addrs[1], // destToken\\n                    tradingFee\\n                );\\n\\n                destTokenAmountReceived = destTokenAmountReceived - tradingFee; // will never overflow\\n            }\\n        }\\n\\n        return (destTokenAmountReceived, sourceTokenAmountUsed);\\n    }\\n\\n    function _writeVolume(address user, address tradeToken, uint256 amount) internal {\\n        if (volumeTradedCardinality[user] == 0) volumeTradedCardinality[user] = 256;\\n        uint128 tradingVolumeInUSDC = uint128(IPriceFeeds(priceFeeds)\\n            .queryReturn(\\n                tradeToken,\\n                USDC,\\n                amount\\n            ));\\n        volumeLastIdx[user] = volumeTradedObservations[user].write(\\n            volumeLastIdx[user],\\n            uint32(block.timestamp),\\n            tradingVolumeInUSDC,\\n            volumeTradedCardinality[user],\\n            uint32(86400)\\n        );\\n    }\\n\\n    function _swapsCall_internal(\\n        address[5] memory addrs,\\n        uint256[3] memory vals,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        bytes memory data;\\n        address swapImplAddress;\\n        bytes memory swapData;\\n        uint256 dexNumber = 1;\\n        if (loanDataBytes.length != 0) {\\n            (dexNumber, swapData) = abi.decode(\\n                loanDataBytes,\\n                (uint256, bytes)\\n            );\\n        }\\n\\n        swapImplAddress = IDexRecords(swapsImpl).retrieveDexAddress(\\n            dexNumber\\n        );\\n        \\n        data = abi.encodeWithSelector(\\n            ISwapsImpl(swapImplAddress).dexSwap.selector,\\n            addrs[0], // sourceToken\\n            addrs[1], // destToken\\n            addrs[2], // receiverAddress\\n            addrs[3], // returnToSenderAddress\\n            vals[0], // minSourceTokenAmount\\n            vals[1], // maxSourceTokenAmount\\n            vals[2], // requiredDestTokenAmount\\n            swapData\\n        );\\n\\n        bool success;\\n        (success, data) = swapImplAddress.delegatecall(data);\\n\\n        if (!success) {\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = abi.decode(\\n            data,\\n            (uint256, uint256)\\n        );\\n    }\\n\\n    function _swapsExpectedReturn(\\n        address trader,\\n        address sourceToken,\\n        address destToken,\\n        uint256 tokenAmount,\\n        bytes memory payload,\\n        bool isGetAmountOut\\n    ) internal returns (uint256 expectedReturn) {\\n        \\n        uint256 tradingFee = _getTradingFee(tokenAmount);\\n\\n        address swapImplAddress;\\n        bytes memory dataToSend;\\n        uint256 dexNumber = 1;\\n        if (payload.length == 0) {\\n            dataToSend = abi.encode(sourceToken, destToken);\\n        } else {\\n            (uint128 flag, bytes[] memory payloads) = abi.decode(\\n                payload,\\n                (uint128, bytes[])\\n            );\\n            if (flag & HOLD_OOKI_FLAG != 0) {\\n                tradingFee = _adjustForHeldBalance(tradingFee, trader);\\n            }\\n            if (flag & PAY_WITH_OOKI_FLAG != 0) {\\n                tradingFee = 0;\\n            }\\n            if(flag & DEX_SELECTOR_FLAG != 0){\\n                (dexNumber, dataToSend) = abi.decode(payloads[0], (uint256, bytes));\\n            } else {\\n                dataToSend = abi.encode(sourceToken, destToken);\\n            }\\n        }\\n        if (tradingFee != 0) {\\n            if (isGetAmountOut) {\\n                tokenAmount = tokenAmount.sub(tradingFee);\\n            } else {\\n                tokenAmount = tokenAmount.add(tradingFee);\\n            }\\n            \\n        }\\n        \\n        swapImplAddress = IDexRecords(swapsImpl).retrieveDexAddress(\\n            dexNumber\\n        );\\n\\n        if (isGetAmountOut) {\\n            (expectedReturn, ) = ISwapsImpl(swapImplAddress).dexAmountOutFormatted(\\n                dataToSend,\\n                tokenAmount\\n            );\\n        } else {\\n            (expectedReturn, ) = ISwapsImpl(swapImplAddress).dexAmountInFormatted(\\n                dataToSend,\\n                tokenAmount\\n            ); \\n        }\\n\\n    }\\n\\n    function _checkSwapSize(address tokenAddress, uint256 amount)\\n        internal\\n        view\\n    {\\n        uint256 _maxSwapSize = maxSwapSize;\\n        if (_maxSwapSize != 0) {\\n            uint256 amountInEth;\\n            if (tokenAddress == address(wethToken)) {\\n                amountInEth = amount;\\n            } else {\\n                amountInEth = IPriceFeeds(priceFeeds).amountInEth(\\n                    tokenAddress,\\n                    amount\\n                );\\n            }\\n            require(amountInEth <= _maxSwapSize, \\\"swap too large\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IPriceFeeds.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.9.0;\\n\\n\\ninterface IPriceFeeds {\\n\\n    function pricesFeeds(address token)\\n        external\\n        view\\n        returns(address pricefeed);\\n\\n    function queryRate(\\n        address sourceToken,\\n        address destToken)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n\\n    function queryPrecision(\\n        address sourceToken,\\n        address destToken)\\n        external\\n        view\\n        returns (uint256 precision);\\n\\n    function queryReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount)\\n        external\\n        view\\n        returns (uint256 destAmount);\\n\\n    function checkPriceDisagreement(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount,\\n        uint256 maxSlippage)\\n        external\\n        view\\n        returns (uint256 sourceToDestSwapRate);\\n\\n    function amountInEth(\\n        address Token,\\n        uint256 amount)\\n        external\\n        view\\n        returns (uint256 ethAmount);\\n\\n    function getMaxDrawdown(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentMarginAndCollateralSize(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount)\\n        external\\n        view\\n        returns (uint256 currentMargin, uint256 collateralInEthAmount);\\n\\n    function getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount)\\n        external\\n        view\\n        returns (uint256 currentMargin, uint256 collateralToLoanRate);\\n\\n    function shouldLiquidate(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"SwapsEvents.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract SwapsEvents {\\n\\n    event LoanSwap(\\n        bytes32 indexed loanId,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        address borrower,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n\\n    event ExternalSwap(\\n        address indexed user,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"FeesHelper.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"State.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ERC20Detailed.sol\\\";\\nimport \\\"IPriceFeeds.sol\\\";\\nimport \\\"VaultController.sol\\\";\\nimport \\\"FeesEvents.sol\\\";\\nimport \\\"MathUtil.sol\\\";\\n\\ncontract FeesHelper is State, VaultController, FeesEvents {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    function _adjustForHeldBalance(\\n        uint256 feeAmount,\\n        address user)\\n        internal view\\n        returns (uint256)\\n    {\\n        uint256 balance = ERC20Detailed(OOKI).balanceOf(user);\\n        if (balance > 1e25) {\\n            return feeAmount.mul(4).divCeil(5);\\n        } else if (balance > 1e24) {\\n            return feeAmount.mul(85).divCeil(100);\\n        } else if (balance > 1e23) {\\n            return feeAmount.mul(9).divCeil(10);\\n        } else {\\n            return feeAmount;\\n        }\\n    }\\n\\n    // calculate trading fee\\n    function _getTradingFee(\\n        uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return feeTokenAmount\\n            .mul(tradingFeePercent)\\n            .divCeil(WEI_PERCENT_PRECISION);\\n    }\\n\\n    // calculate trading fee\\n    function _getTradingFeeWithOOKI(\\n        address sourceToken,\\n        uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IPriceFeeds(priceFeeds)\\n            .queryReturn(\\n                sourceToken,\\n                OOKI,\\n                feeTokenAmount\\n                    .mul(tradingFeePercent)\\n                    .divCeil(WEI_PERCENT_PRECISION)\\n            );\\n    }\\n\\n    // calculate loan origination fee\\n    function _getBorrowingFee(\\n        uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return feeTokenAmount\\n            .mul(borrowingFeePercent)\\n            .divCeil(WEI_PERCENT_PRECISION);\\n    }\\n\\n    // calculate loan origination fee\\n    function _getBorrowingFeeWithOOKI(\\n        address sourceToken,\\n        uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IPriceFeeds(priceFeeds)\\n            .queryReturn(\\n                sourceToken,\\n                OOKI,\\n                feeTokenAmount\\n                    .mul(borrowingFeePercent)\\n                    .divCeil(WEI_PERCENT_PRECISION)\\n            );\\n    }\\n\\n    // calculate lender (interest) fee\\n    function _getLendingFee(\\n        uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return feeTokenAmount\\n            .mul(lendingFeePercent)\\n            .divCeil(WEI_PERCENT_PRECISION);\\n    }\\n\\n    // settle trading fee\\n    function _payTradingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        uint256 tradingFee)\\n        internal\\n    {\\n        if (tradingFee != 0) {\\n            tradingFeeTokensHeld[feeToken] = tradingFeeTokensHeld[feeToken]\\n                .add(tradingFee);\\n\\n            emit PayTradingFee(\\n                user,\\n                feeToken,\\n                loanId,\\n                tradingFee\\n            );\\n        }\\n    }\\n\\n    // settle loan origination fee\\n    function _payBorrowingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        uint256 borrowingFee)\\n        internal\\n    {\\n        if (borrowingFee != 0) {\\n            borrowingFeeTokensHeld[feeToken] = borrowingFeeTokensHeld[feeToken]\\n                .add(borrowingFee);\\n\\n            emit PayBorrowingFee(\\n                user,\\n                feeToken,\\n                loanId,\\n                borrowingFee\\n            );\\n        }\\n    }\\n\\n    // settle lender (interest) fee\\n    function _payLendingFee(\\n        address lender,\\n        address feeToken,\\n        uint256 lendingFee)\\n        internal\\n    {\\n        if (lendingFee != 0) {\\n            lendingFeeTokensHeld[feeToken] = lendingFeeTokensHeld[feeToken]\\n                .add(lendingFee);\\n\\n            vaultTransfer(\\n                feeToken,\\n                lender,\\n                address(this),\\n                lendingFee\\n            );\\n\\n            emit PayLendingFee(\\n                lender,\\n                feeToken,\\n                lendingFee\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"FeesEvents.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ncontract FeesEvents {\\n\\n    enum FeeType {\\n        Lending,\\n        Trading,\\n        Borrowing,\\n        SettleInterest\\n    }\\n\\n    event PayLendingFee(\\n        address indexed payer,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event SettleFeeRewardForInterestExpense(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event PayTradingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event PayBorrowingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    // DEPRECATED\\n    event EarnReward(\\n        address indexed receiver,\\n        bytes32 indexed loanId,\\n        FeeType indexed feeType,\\n        address token,\\n        uint256 amount\\n    );\\n}\"\r\n    },\r\n    \"ISwapsImpl.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.17;\\n\\ninterface ISwapsImpl {\\n    function dexSwap(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        address receiverAddress,\\n        address returnToSenderAddress,\\n        uint256 minSourceTokenAmount,\\n        uint256 maxSourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bytes calldata payload\\n    )\\n        external\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed\\n        );\\n\\n    function dexExpectedRate(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function dexAmountOut(bytes calldata route, uint256 amountIn)\\n        external\\n        returns (uint256 amountOut, address midToken);\\n\\n    function dexAmountOutFormatted(bytes calldata route, uint256 amountOut)\\n        external\\n        returns (uint256 amountIn, address midToken);\\n\\n    function dexAmountIn(bytes calldata route, uint256 amountOut)\\n        external\\n        returns (uint256 amountIn, address midToken);\\n\\n    function dexAmountInFormatted(bytes calldata route, uint256 amountOut)\\n        external\\n        returns (uint256 amountIn, address midToken);\\n\\n    function setSwapApprovals(address[] calldata tokens) external;\\n\\t\\n    function revokeApprovals(address[] calldata tokens) external;\\n}\\n\"\r\n    },\r\n    \"IDexRecords.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17;\\n\\ninterface IDexRecords {\\n    function retrieveDexAddress(uint256 dexNumber)\\n        external\\n        view\\n        returns (address);\\n\\n    function setDexID(address dexAddress) external;\\n\\t\\n    function setDexID(uint256 dexID, address dexAddress) external;\\n\\t\\n    function getDexCount() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"Flags.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.9.0;\\n\\ncontract Flags {\\n    uint128 public constant HOLD_OOKI_FLAG = 1;     // base-2: 1\\n    uint128 public constant DEX_SELECTOR_FLAG = 2;  // base-2: 10\\n    uint128 public constant DELEGATE_FLAG = 4;      // base-2: 100\\n    uint128 public constant PAY_WITH_OOKI_FLAG = 8; // base-2: 1000\\n    uint128 public constant WITH_PERMIT = 16;       // base-2: 10000\\n    uint128 public constant TRACK_VOLUME_FLAG = 32; // base-2: 100000\\n}\\n\"\r\n    },\r\n    \"PausableGuardian.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\n\\ncontract PausableGuardian is Ownable {\\n\\n    // keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    // keccak256(\\\"Pausable_GuardianAddress\\\")\\n    bytes32 internal constant Pausable_GuardianAddress = 0x80e6706973d0c59541550537fd6a33b971efad732635e6c3b99fb01006803cdf;\\n\\n    modifier pausable {\\n        require(!_isPaused(msg.sig), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian {\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _isPaused(bytes4 sig) public view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n\\n    function toggleFunctionPause(bytes4 sig) public onlyGuardian {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 1)\\n        }\\n    }\\n\\n    function toggleFunctionUnPause(bytes4 sig) public onlyGuardian {\\n        // only DAO can unpause, and adding guardian temporarily\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 0)\\n        }\\n    }\\n\\n    function changeGuardian(address newGuardian) public onlyGuardian {\\n        assembly {\\n            sstore(Pausable_GuardianAddress, newGuardian)\\n        }\\n    }\\n\\n    function getGuardian() public view returns (address guardian) {\\n        assembly {\\n            guardian := sload(Pausable_GuardianAddress)\\n        }\\n    }\\n\\n    function pause(bytes4 [] calldata sig)\\n        external\\n        onlyGuardian\\n    {\\n        for(uint256 i = 0; i < sig.length; ++i){\\n            toggleFunctionPause(sig[i]);\\n        }\\n    }\\n\\n    function unpause(bytes4 [] calldata sig)\\n        external\\n        onlyGuardian\\n    {\\n        for(uint256 i = 0; i < sig.length; ++i){\\n            toggleFunctionUnPause(sig[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"IToken.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache-2.0\\n */\\n\\npragma solidity >=0.5.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n// import \\\"IERC20.sol\\\";\\n\\n// import \\\"IERC20.sol\\\";\\n// SPDX-License-Identifier: Apache-2.0\\n\\ninterface IToken {\\n\\n    // IERC20 specification. hard including it to avoid compatibility of openzeppelin with different libraries\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Mint(address indexed minter,uint256 tokenAmount,uint256 assetAmount,uint256 price);\\n    event Burn(address indexed burner,uint256 tokenAmount,uint256 assetAmount,uint256 price);\\n    event FlashBorrow(address borrower,address target,address loanToken,uint256 loanAmount);\\n\\n    function tokenPrice() external view returns (uint256);\\n\\n    function internalBalanceOf() external view returns(uint256);\\n\\n    function mint(address receiver, uint256 depositAmount)\\n        external\\n        returns (uint256);\\n\\n    function burn(address receiver, uint256 burnAmount)\\n        external\\n        returns (uint256 loanAmountPaid);\\n\\n    function flashBorrow(\\n        uint256 borrowAmount,\\n        address borrower,\\n        address target,\\n        string calldata signature,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n\\n    function borrow(\\n        bytes32 loanId, // 0 if new loan\\n        uint256 withdrawAmount,\\n        uint256 initialLoanDuration, // duration in seconds\\n        uint256 collateralTokenSent, // if 0, loanId must be provided; any ETH sent must equal this value\\n        address collateralTokenAddress, // if address(0), this means ETH and ETH must be sent with the call or loanId must be provided\\n        address borrower,\\n        address receiver,\\n        bytes calldata loanDataBytes // arbitrary order data\\n    ) external payable returns (LoanOpenData memory);\\n\\n    function marginTrade(\\n        bytes32 loanId, // 0 if new loan\\n        uint256 leverageAmount,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress,\\n        address trader,\\n        bytes calldata loanDataBytes // arbitrary order data\\n    ) external payable returns (LoanOpenData memory);\\n\\n    function profitOf(address user) external view returns (int256);\\n\\n    function checkpointPrice(address _user) external view returns (uint256);\\n\\n    function borrowInterestRate() external view returns (uint256);\\n\\n    function nextBorrowInterestRate(uint256 borrowAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function supplyInterestRate() external view returns (uint256);\\n\\n    function nextSupplyInterestRate(int256 supplyAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupplyInterestRate(uint256 assetSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalAssetBorrow() external view returns (uint256);\\n\\n    function totalAssetSupply() external view returns (uint256);\\n\\n    function assetBalanceOf(address _owner) external view returns (uint256);\\n\\n    function loanTokenAddress() external view returns (address);\\n\\n    function initialPrice() external view returns (uint256);\\n\\n    function loanParamsIds(uint256) external view returns (bytes32);\\n\\n\\n    /// Guardian interface\\n\\n    function _isPaused(bytes4 sig) external view returns (bool isPaused);\\n\\n    function toggleFunctionPause(bytes4 sig) external;\\n\\n    function toggleFunctionUnPause(bytes4 sig) external;\\n\\n    function changeGuardian(address newGuardian) external;\\n\\n    function getGuardian() external view returns (address guardian);\\n    \\n    function revokeApproval(address _loanTokenAddress) external;\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function DOMAIN_SEPARATOR() external view returns(bytes32);\\n    function PERMIT_TYPEHASH() external view returns(bytes32);\\n    function nonces(address) external view returns (uint);\\n    /// Admin functions\\n    function setTarget(address _newTarget) external;\\n    \\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function initializeDomainSeparator() external;\\n\\n    struct LoanOpenData {\\n        bytes32 loanId;\\n        uint256 principal;\\n        uint256 collateral;\\n    }\\n\\t\\n    //flash borrow fees\\n    function updateFlashBorrowFeePercent(uint256 newFeePercent) external;\\n\\n    function flashBorrowFeePercent() external view returns(uint256);\\n\\n    function setDemandCurve(address _rateHelper) external; \\n\\n    function getPoolUtilization()\\n        external\\n        view\\n    returns (uint256);\\n\\n    function name() external view returns (string memory);\\n \\n    function symbol() external view  returns (string memory);\\n\\n    function mintWithEther(address receiver) external payable;\\n\\n    function burnToEther(address payable receiver,uint256 burnAmount) external returns (uint256 loanAmountPaid);\\n\\n    function consume(uint256 consumeAmount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"LoanClosings.sol\": {\r\n        \"TickMathV1\": \"0xAE0886d167cCF942c4DAD960f5CFc9C3c7A2816E\",\r\n        \"VolumeTracker\": \"0xFF00e3Da71d76F85dcaF9946a747463C8BFa153f\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralWithdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"}],\"name\":\"CloseWithDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionCloseSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanCloseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLeverage\",\"type\":\"uint256\"}],\"name\":\"CloseWithSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"enum FeesEvents.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralWithdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositValueAsLoanToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositValueAsCollateralToken\",\"type\":\"uint256\"}],\"name\":\"LoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanPrincipalTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanInterestTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanRatePerTokenPaid\",\"type\":\"uint256\"}],\"name\":\"LoanInterestRateVals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"LoanSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBorrowingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayLendingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolPrincipalTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolInterestTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolRatePerTokenStored\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolNextInterestRate\",\"type\":\"uint256\"}],\"name\":\"PoolInterestRateVals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasRebate\",\"type\":\"uint256\"}],\"name\":\"Rollover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SettleFeeRewardForInterestExpense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultWithdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATE_FLAG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEX_SELECTOR_FLAG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLD_OOKI_FLAG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OOKI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAY_WITH_OOKI_FLAG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRACK_VOLUME_FLAG\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITH_PERMIT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"_isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"changeGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"loanDataBytes\",\"type\":\"bytes\"}],\"name\":\"closeWithDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanCloseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnTokenIsCollateral\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"loanDataBytes\",\"type\":\"bytes\"}],\"name\":\"closeWithSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanCloseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterestTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanRatePerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sig\",\"type\":\"bytes4[]\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInterestTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolPrincipalTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRatePerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBufferPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeDelta\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionUnPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twaiLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sig\",\"type\":\"bytes4[]\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vbzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWethERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LoanClosings", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}