{"SourceCode": "// File: interfaces/IUniswapV2Factory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// only necessary functions\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// File: interfaces/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// only necessary functions\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\n\r\n// File: interfaces/IERC20SwapTax.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n//\r\n// === fees ===\r\n// Generally, taxes on tokens are used for either\r\n//   1) paying the team\r\n//   2) revenue share\r\n//   3) adding to liquidity\r\n// So i decided to give deployers these three options. Project also occasionally\r\n// burn tokens from taxes, but I didn't feel that was essential functionality.\r\n//\r\n// === limits and blacklists ===\r\n// Due to the nature of the token's reliance on the v2Router and its own liquidity,\r\n// it's natural that contract owners might want more granular control over\r\n// actions that could potentially harm the LP. The contract gives owners the option\r\n// to activate:\r\n//   - limits on maxTransaction sizes and maxWallet sizes\r\n//   - blacklist that restricts swaps and transfers\r\n//\r\n\r\n/// @title ERC20 Swap Tax Interface\r\n/// @notice An ERC20 Swap Tax token takes a fee from all token swaps\r\ninterface IERC20SwapTax {\r\n\r\n    // immutables\r\n\r\n    /// @notice The main v2 router address\r\n    function v2Router() external view returns (address);\r\n    /// @notice The main v2 pair address\r\n    function v2Pair() external view returns (address);\r\n    /// @notice The initial token supply\r\n    function initialSupply() external view returns (uint256);\r\n\r\n    // fees\r\n\r\n    /// @notice The total tax taken on swaps in percent\r\n    function totalSwapFee() external view returns (uint8);\r\n    /// @notice The protocol tax allocation in percent\r\n    function protocolFee() external view returns (uint8);\r\n    /// @notice The liquidity pool tax allocation in percent\r\n    function liquidityFee() external view returns (uint8);\r\n    /// @notice The team tax allocation in percent\r\n    function teamFee() external view returns (uint8);\r\n    /// @notice The address to collect the team fee\r\n    function teamWallet() external view returns (address);\r\n    /// @notice The address to collect the protocol fee\r\n    function protocolWallet() external view returns (address);\r\n\r\n    // params\r\n\r\n    /// @notice The minimum amount of token that the contract will swap\r\n    function swapThreshold() external view returns (uint128);\r\n    /// @notice The maximum amount of token that the contract will swap\r\n    function maxContractSwap() external view returns (uint128);\r\n    /// @notice If limits are active, the max swap amount\r\n    function maxTransaction() external view returns (uint128);\r\n    /// @notice If limits are active, the max wallet size\r\n    function maxWallet() external view returns (uint128);\r\n\r\n    // state\r\n\r\n    /// @notice If limits are active\r\n    function limitsActive() external view returns (bool);\r\n    /// @notice If the blacklist is active\r\n    function blacklistActive() external view returns (bool);\r\n    /// @notice If trading through the v2Pair is enabled\r\n    function tradingEnabled() external view returns (bool);\r\n    /// @notice If the contract is allowed to swap\r\n    function contractSwapEnabled() external view returns (bool);\r\n\r\n    // addresses\r\n\r\n    /// @notice Is the address an automated market-maker pair\r\n    function isAmm(address) external view returns (bool);\r\n    /// @notice Is the address excluded from tax fees\r\n    function isExcludedFromFees(address) external view returns (bool);\r\n    /// @notice Is the address blacklisted\r\n    function isBlacklisted(address) external view returns (bool);\r\n    /// @notice Is the address excluded from limits\r\n    function isExcludedFromLimits(address) external view returns (bool);\r\n\r\n    // events\r\n    event AmmUpdated(address indexed account, bool isAmm);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event TeamWalletUpdated(address indexed newWallet, address indexed oldWallet);\r\n    event ProtocolWalletUpdated(address indexed newWallet, address indexed oldWallet);\r\n    event SwapAndAdd(uint256 tokensSwapped, uint256 ethToLp, uint256 tokenToLp);\r\n}\r\n\r\n// File: dependencies/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: dependencies/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: interfaces/IERC20Permit.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: dependencies/ERC20.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\n// Same as Solmate ERC20 with a virtual internal _transfer()\r\n\r\n/// @title Lightweight ERC20\r\n/// @notice A gas-efficient ERC20Permit contract\r\n/// @dev Ensure to always update totalSupply with balance\r\nabstract contract ERC20 is IERC20, IERC20Permit {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n// File: libraries/Math.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n// helpful pure math functions\r\nlibrary Math {\r\n    uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\r\n\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\r\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\r\n                revert(0, 0)\r\n            }\r\n\r\n            // Divide x * y by the denominator.\r\n            z := div(mul(x, y), denominator)\r\n        }\r\n    }\r\n}\r\n\r\n// File: katza_x.sol\r\n\r\n\r\n\r\n// Katza Project.\r\n// https://t.me/katzaproject\r\n// https://twitter.com/katzaproject\r\n// https://katza.world\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract KatzaProject is ERC20, IERC20SwapTax, Ownable {\r\n    using Math for uint256;\r\n\r\n    function MAX_TAX() public pure virtual returns (uint8) {\r\n        return 5;\r\n    }\r\n\r\n    uint256 public immutable override initialSupply;\r\n\r\n    address public immutable override v2Router;\r\n    address public immutable override v2Pair;\r\n\r\n    address public override protocolWallet;\r\n    address public override teamWallet;\r\n\r\n    bool public override tradingEnabled;\r\n    bool public override contractSwapEnabled;\r\n\r\n    bool public override limitsActive;\r\n    bool public override blacklistActive;\r\n\r\n    uint8 public override totalSwapFee;\r\n    uint8 public override protocolFee;\r\n    uint8 public override liquidityFee;\r\n    uint8 public override teamFee;\r\n\r\n    mapping(address => bool) public override isAmm;\r\n    mapping(address => bool) public override isBlacklisted;\r\n    mapping(address => bool) public override isExcludedFromFees;\r\n    mapping(address => bool) public override isExcludedFromLimits;\r\n\r\n    uint128 public override swapThreshold;\r\n    uint128 public override maxContractSwap;\r\n    uint128 public override maxTransaction;\r\n    uint128 public override maxWallet;\r\n\r\n    bool private _swapping;\r\n    address internal immutable WETH;\r\n    address internal constant DEAD = address(0xdEaD);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _initialSupply,\r\n        address _v2Router,\r\n        address _protocolWallet,\r\n        uint8 _protocolFee,\r\n        uint8 _liquidityFee,\r\n        uint8 _teamFee,\r\n        bool _limitsActive,\r\n        bool _blacklistActive\r\n    ) ERC20(_name, _symbol, 18) {\r\n        initialSupply = _initialSupply;\r\n\r\n        protocolWallet = _protocolWallet;\r\n        teamWallet = owner();\r\n\r\n        limitsActive = _limitsActive;\r\n        blacklistActive = _blacklistActive;\r\n\r\n        updateFees(_protocolFee, _liquidityFee, _teamFee);\r\n\r\n        v2Router = _v2Router;\r\n        WETH = IUniswapV2Router02(v2Router).WETH();\r\n        v2Pair = IUniswapV2Factory(IUniswapV2Router02(v2Router).factory()).createPair(address(this), WETH);\r\n\r\n    \r\n        swapThreshold   = uint128(initialSupply.mulDiv(25  , 10_000));\r\n        maxContractSwap = uint128(initialSupply.mulDiv(50 , 10_000));\r\n        maxTransaction  = uint128(initialSupply.mulDiv(500, 10_000));\r\n        maxWallet       = uint128(initialSupply.mulDiv(500, 10_000));\r\n\r\n        updateAmm(v2Pair, true);\r\n\r\n        excludeFromLimits(address(this), true);\r\n        excludeFromLimits(owner(), true);\r\n        excludeFromLimits(v2Router, true);\r\n        excludeFromLimits(v2Pair, true);\r\n        excludeFromLimits(DEAD, true);\r\n\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(DEAD, true);\r\n\r\n        allowance[address(this)][v2Router] = type(uint256).max;\r\n        emit Approval(address(this), v2Router, type(uint256).max);\r\n\r\n        _mint(owner(), initialSupply);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        if (blacklistActive) require(!(isBlacklisted[from] || isBlacklisted[to]), \"BL\");\r\n        if (limitsActive) _checkLimits(from, to, amount);\r\n\r\n        bool excluded = isExcludedFromFees[from] || isExcludedFromFees[to];\r\n        uint8 _swapFee = totalSwapFee;\r\n\r\n        if (excluded || _swapFee == 0 || amount == 0) {\r\n            // no fees or excluded -> process transfer normally\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        // if currently swapping exclude from all fees\r\n        excluded = _swapping;\r\n\r\n        bool isBuy = isAmm[from];\r\n\r\n        if (isBuy || excluded || !contractSwapEnabled || balanceOf[address(this)] < swapThreshold) {\r\n            // ...\r\n        } else {\r\n            _swapping = true;\r\n            _swapBack();\r\n            _swapping = false;\r\n        }\r\n\r\n\r\n        balanceOf[from] -= amount;\r\n        uint256 fee = 0;\r\n\r\n        if ((isBuy || isAmm[to]) && !excluded) {\r\n            fee = amount.mulDiv(_swapFee, 100);\r\n\r\n            unchecked {\r\n                balanceOf[address(this)] += fee;\r\n            }\r\n            emit Transfer(from, address(this), fee);\r\n        }\r\n\r\n        unchecked {\r\n            balanceOf[to] += (amount - fee);\r\n        }\r\n        emit Transfer(from, to, amount - fee);\r\n    }\r\n\r\n    function _checkLimits(address from, address to, uint256 amount) internal view {\r\n        if (from == owner() || to == owner() || to == DEAD || _swapping) return;\r\n\r\n        if (!tradingEnabled) {\r\n            require(isExcludedFromFees[from] || isExcludedFromFees[to], \"TC\");\r\n        }\r\n        // buy\r\n        if (isAmm[from] && !isExcludedFromLimits[to]) {\r\n            require(amount <= maxTransaction, \"MAX_TX\");\r\n            require(amount + balanceOf[to] <= maxWallet, \"MAX_WALLET\");\r\n        }\r\n        // sell\r\n        else if (isAmm[to] && !isExcludedFromLimits[from]) {\r\n            require(amount <= maxTransaction, \"MAX_TX\");\r\n        }\r\n        // transfer\r\n        else if (!isExcludedFromLimits[to]) {\r\n            require(amount + balanceOf[to] <= maxWallet, \"MAX_WALLET\");\r\n        }\r\n    }\r\n\r\n    /// @dev Swap contract balance to ETH if over the threshold\r\n    function _swapBack() private {\r\n        uint256 balance = balanceOf[address(this)];\r\n\r\n        if (balance == 0) return;\r\n        if (balance > maxContractSwap) balance = maxContractSwap;\r\n\r\n        uint256 protocolTokens = balance.mulDiv(protocolFee, totalSwapFee);\r\n        uint256 teamTokens = balance.mulDiv(teamFee, totalSwapFee);\r\n\r\n        // half the remaining tokens are for liquidity\r\n        uint256 liquidityTokens = (balance - protocolTokens - teamTokens) / 2;\r\n        uint256 swapTokens = balance - liquidityTokens;\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n\r\n        _swapTokensForEth(swapTokens);\r\n\r\n        ethBalance = address(this).balance - ethBalance;\r\n\r\n        uint256 ethForTeam = ethBalance.mulDiv(teamTokens, swapTokens);\r\n        uint256 ethForLiquidity = ethBalance - ethForTeam - ethBalance.mulDiv(protocolTokens, swapTokens);\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            _addLiquidity(liquidityTokens, ethForLiquidity);\r\n\r\n            emit SwapAndAdd(swapTokens, ethForLiquidity, liquidityTokens);\r\n        }\r\n\r\n        // don't verify the call so transfers out can fail\r\n        (bool success, ) = teamWallet.call{value: ethForTeam}(\"\");\r\n        (success, ) = protocolWallet.call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    /// @dev Perform a v2 swap for ETH\r\n    function _swapTokensForEth(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        IUniswapV2Router02(v2Router).swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Add v2 liquidity\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        IUniswapV2Router02(v2Router).addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Once trading is active, can never be inactive\r\n    function enableTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n        contractSwapEnabled = true;\r\n    }\r\n\r\n    /// @dev Update the threshold for contract swaps\r\n    function updateSwapThreshold(uint128 newThreshold) external onlyOwner {\r\n        require(newThreshold >= totalSupply.mulDiv(1, 1_000_000), \"BST\"); // >= 0.0001%\r\n        require(newThreshold <= totalSupply.mulDiv(5, 10_000), \"BST\"); // <= 0.05%\r\n        swapThreshold = newThreshold;\r\n    }\r\n\r\n    /// @dev Update the max contract swap\r\n    function updateMaxContractSwap(uint128 newMaxSwap) external onlyOwner {\r\n        require(newMaxSwap >= totalSupply.mulDiv(1, 100_000), \"BMS\"); // >= 0.001%\r\n        require(newMaxSwap <= totalSupply.mulDiv(50, 10_000), \"BMS\"); // <= 0.5%\r\n        maxContractSwap = newMaxSwap;\r\n    }\r\n\r\n    /// @dev Update the max transaction while limits are in effect\r\n    function updateMaxTransaction(uint128 newMaxTx) external onlyOwner {\r\n        require(newMaxTx >= totalSupply.mulDiv(50, 10_000), \"BMT\"); // >= 0.5%\r\n        maxTransaction = newMaxTx;\r\n    }\r\n\r\n    /// @dev Update the max wallet while limits are in effect\r\n    function updateMaxWallet(uint128 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= totalSupply.mulDiv(100, 10_000), \"BMW\"); // >= 1%\r\n        maxWallet = newMaxWallet;\r\n    }\r\n\r\n    /// @dev Emergency disabling of contract sales\r\n    function updateContractSwapEnabled(bool enabled) external onlyOwner {\r\n        contractSwapEnabled = enabled;\r\n    }\r\n\r\n    /// @dev Update the swap fees\r\n    function updateFees(uint8 _protocolFee, uint8 _liquidityFee, uint8 _teamFee) public onlyOwner {\r\n        require(_protocolFee + _liquidityFee + _teamFee <= MAX_TAX(), \"BF\");\r\n        totalSwapFee = _protocolFee + _liquidityFee + _teamFee;\r\n        protocolFee = _protocolFee;\r\n        liquidityFee = _liquidityFee;\r\n        teamFee = _teamFee;\r\n    }\r\n\r\n    /// @dev Exclude account from the limited max transaction size\r\n    function excludeFromLimits(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromLimits[account] = excluded;\r\n    }\r\n\r\n    /// @dev Exclude account from all fees\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    /// @dev Designate address as an AMM pair to process fees\r\n    function updateAmm(address account, bool amm) public onlyOwner {\r\n        if (!amm) require(account != v2Pair, \"FP\");\r\n        isAmm[account] = amm;\r\n        emit AmmUpdated(account, amm);\r\n    }\r\n\r\n    /// @dev Update the protocol wallet\r\n    function updateProtocolWallet(address newWallet) external onlyOwner {\r\n        emit ProtocolWalletUpdated(newWallet, protocolWallet);\r\n        protocolWallet = newWallet;\r\n    }\r\n\r\n    /// @dev Update the team wallet\r\n    function updateTeamWallet(address newWallet) external onlyOwner {\r\n        emit TeamWalletUpdated(newWallet, teamWallet);\r\n        teamWallet = newWallet;\r\n    }\r\n\r\n    /// @dev Withdraw token stuck in the contract\r\n    function sweepToken(address token, address to) external onlyOwner {\r\n        require(token != address(0), \"ZA\");\r\n        ERC20(token).transfer(to, ERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /// @dev Withdraw eth stuck in the contract\r\n    function sweepEth(address to) external onlyOwner {\r\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\r\n        require(success, \"TF\");\r\n    }\r\n\r\n    /// @dev Blacklist an account\r\n    function blacklist(address account) public onlyOwner {\r\n        require(blacklistActive, \"RK\");\r\n        require(account != address(v2Pair), \"BLU\");\r\n        require(account != address(v2Router), \"BLU\");\r\n        isBlacklisted[account] = true;\r\n    }\r\n\r\n    /// @dev Remove an account from the blacklist\r\n    function unblacklist(address account) public onlyOwner {\r\n        isBlacklisted[account] = false;\r\n    }\r\n\r\n    /// @dev Irreversible action, limits can never be reinstated\r\n    function deactivateLimits() external onlyOwner {\r\n        limitsActive = false;\r\n    }\r\n\r\n    /// @dev Renounce blacklist authority\r\n    function deactivateBlacklist() public onlyOwner {\r\n        blacklistActive = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_v2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolWallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_teamFee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_limitsActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_blacklistActive\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAmm\",\"type\":\"bool\"}],\"name\":\"AmmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"ProtocolWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenToLp\",\"type\":\"uint256\"}],\"name\":\"SwapAndAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"TeamWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAmm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContractSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"amm\",\"type\":\"bool\"}],\"name\":\"updateAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_teamFee\",\"type\":\"uint8\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxSwap\",\"type\":\"uint128\"}],\"name\":\"updateMaxContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxTx\",\"type\":\"uint128\"}],\"name\":\"updateMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxWallet\",\"type\":\"uint128\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateProtocolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newThreshold\",\"type\":\"uint128\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KatzaProject", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000c9f2c9cd04674edea400000000000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000442fe32b41e3113abed2a76f64caaa1a730d558c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000054b61747a6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b545a0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6253d9a4a228c2112778f4d20e2a5f2470092b807b8f04bab7d69bf332b91c3d"}