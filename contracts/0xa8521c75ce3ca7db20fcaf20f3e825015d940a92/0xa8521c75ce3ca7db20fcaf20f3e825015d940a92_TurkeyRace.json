{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: turkeys/turkeyRace.sol\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\n// Interface for the turkeysGameContract\r\ninterface ITurkeysGameContract {\r\n    function stats(uint256 tokenId) external view returns (uint8 strength, uint8 intelligence, uint8 speed, uint8 bravery);\r\n}\r\n\r\ncontract TurkeyRace is Ownable {\r\n\r\n    struct Racer {\r\n        uint256 tokenId;\r\n        uint256 endTime;\r\n    }\r\n\r\n    struct Bet {\r\n        uint256 amount;\r\n        address bettor;\r\n    }\r\n\r\n    uint256 public eligibleFee = 400000000000;\r\n\r\n    mapping(uint256 => Racer) public eligibleRacers;\r\n    mapping(uint256 => Racer) public currentRacers;\r\n    mapping(uint256 => Bet[]) public bets;\r\n    address public nftAddress = 0x49C59D51a3e0fA9df6c80F38Dda32b66E51b21c8;\r\n    address public paymentToken = 0xA8b28269376a854Ce52B7238733cb257Dd3934e8;\r\n    address public rewardWallet = 0xA1E18278f32c8Fc411Fd15C1dFD760976c5b48Ef;\r\n\r\n    IERC20 public paymentTokenContract = IERC20(0xA8b28269376a854Ce52B7238733cb257Dd3934e8);\r\n    ITurkeysGameContract public turkeysGameContract = ITurkeysGameContract(0x49C59D51a3e0fA9df6c80F38Dda32b66E51b21c8);\r\n\r\n    uint256[] public currentRacerIds;\r\n\r\n    event PreRace(uint256[] racerIds);\r\n    event RaceResult(uint256 winnerId);\r\n    event NewBet(uint256 tokenId, uint256 amount);\r\n    event Overtake(uint256 overtaker, uint256 overtaken);\r\n    event TurkeyPun(string message);\r\n    event EligibilityChanged(uint256 tokenId, bool eligible);\r\n\r\n    function makeEligible(uint256[] memory tokenIds) public {\r\n        IERC721 nft = IERC721(nftAddress);\r\n        IERC20 token = IERC20(paymentToken);\r\n\r\n        uint256 totalFee = eligibleFee * tokenIds.length;\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), totalFee), \"Fee payment failed\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(nft.ownerOf(tokenId) == msg.sender, \"You don't own this NFT\");\r\n            eligibleRacers[tokenId] = Racer(tokenId, block.timestamp + 7 days);\r\n            emit EligibilityChanged(tokenId, true);\r\n        }\r\n    }\r\n\r\n    function preRace() public onlyOwner {\r\n        uint256 eligibleCount = 0;\r\n\r\n        // Count the number of eligible racers\r\n        for (uint256 i = 1; i <= 444; i++) { // replace 1000 with a variable or function that gets the actual max tokenId\r\n            if (eligibleRacers[i].endTime >= block.timestamp) {\r\n                eligibleCount++;\r\n            }\r\n        }\r\n\r\n        require(eligibleCount >= 5, \"Not enough eligible racers\");\r\n\r\n        uint256[] memory racerIds = new uint256[](5);\r\n        for (uint256 i = 0; i < 5; ) {\r\n            uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, i))) % 1000 + 1; // replace 1000 with actual max tokenId\r\n\r\n            if (eligibleRacers[random].endTime >= block.timestamp) {\r\n                currentRacerIds.push(random);\r\n                racerIds[i] = random;\r\n                currentRacers[random] = eligibleRacers[random];\r\n                i++;\r\n            }\r\n        }\r\n\r\n        emit PreRace(racerIds);\r\n    }\r\n\r\n    function placeBet(uint256 tokenId, uint256 amount) public {\r\n        require(currentRacers[tokenId].tokenId != 0, \"This NFT is not racing\");\r\n\r\n        IERC20 token = IERC20(paymentToken);\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n\r\n        bets[tokenId].push(Bet(amount, msg.sender));\r\n        emit NewBet(tokenId, amount);\r\n    }\r\n\r\n    function race() public onlyOwner {\r\n        uint256 winnerId;\r\n    \r\n        uint8[] memory speedStats = new uint8[](currentRacerIds.length);\r\n        uint256 maxScore = 0;\r\n\r\n        for (uint256 i = 0; i < currentRacerIds.length; i++) {\r\n            (,,speedStats[i],) = turkeysGameContract.stats(currentRacerIds[i]);\r\n            \r\n            uint256 adjustedSpeed = uint256(sqrt(speedStats[i]));  // Use square root to adjust speed\r\n            uint256 randomFactor = uint256(keccak256(abi.encodePacked(block.timestamp, i))) % 100;\r\n            \r\n            uint256 combinedValue = adjustedSpeed + randomFactor;\r\n            \r\n            if (combinedValue > maxScore) {\r\n                maxScore = combinedValue;\r\n                winnerId = currentRacerIds[i];\r\n            }\r\n        }\r\n\r\n        // Placeholder array to track current positions\r\n        uint256[] memory positions = new uint256[](currentRacerIds.length);\r\n        \r\n        // Random overtakes and turkey puns\r\n        for(uint i = 0; i < 6; i++) {\r\n            uint256 randomEvent = uint256(keccak256(abi.encodePacked(block.timestamp, i))) % 10;\r\n            \r\n            if (randomEvent < 3) { // 30% chance of an overtake event\r\n                uint256 overtakerIndex = uint256(keccak256(abi.encodePacked(block.timestamp, i, \"overtaker\"))) % currentRacerIds.length;\r\n                uint256 overtakenIndex = uint256(keccak256(abi.encodePacked(block.timestamp, i, \"overtaken\"))) % currentRacerIds.length;\r\n\r\n                // Simple logic to make sure a faster NFT overtakes a slower one\r\n                if (speedStats[currentRacerIds[overtakerIndex]] > speedStats[currentRacerIds[overtakenIndex]]) {\r\n                    // Swap positions\r\n                    uint256 temp = positions[overtakerIndex];\r\n                    positions[overtakerIndex] = positions[overtakenIndex];\r\n                    positions[overtakenIndex] = temp;\r\n                    \r\n                    emit Overtake(currentRacerIds[overtakerIndex], currentRacerIds[overtakenIndex]);\r\n                }\r\n            } else { // 70% chance of a turkey pun event\r\n                uint256 punIndex = uint256(keccak256(abi.encodePacked(block.timestamp, i, \"pun\"))) % 5;\r\n                \r\n                if (punIndex == 0) {\r\n                    emit TurkeyPun(\"This turkey is really winging it!\");\r\n                } else if (punIndex == 1) {\r\n                    emit TurkeyPun(\"What a peck-tacular performance!\");\r\n                } else if (punIndex == 2) {\r\n                    emit TurkeyPun(\"Gobble up the competition!\");\r\n                } else if (punIndex == 3) {\r\n                    emit TurkeyPun(\"Feather or not he wins, it's been a great race!\");\r\n                } else if (punIndex == 4) {\r\n                    emit TurkeyPun(\"This turkey is really strutting its stuff!\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Distribute rewards\r\n        IERC20 token = IERC20(paymentToken);\r\n        uint256 totalBet = 0;\r\n\r\n        // Compute total bet amount on the winner\r\n        for (uint256 i = 0; i < bets[winnerId].length; i++) {\r\n            totalBet += bets[winnerId][i].amount;\r\n        }\r\n\r\n        // Transfer 5% to the NFT owner, 10% to the specified wallet\r\n        IERC721 nft = IERC721(nftAddress);\r\n        uint256 reward = (totalBet * 5) / 100;\r\n        require(token.transfer(nft.ownerOf(winnerId), reward), \"Transfer failed\");\r\n        require(token.transfer(rewardWallet, (totalBet * 10) / 100), \"Transfer failed\");\r\n\r\n        // Split 85% between bettors\r\n        for (uint256 i = 0; i < bets[winnerId].length; i++) {\r\n            uint256 bettorReward = ((totalBet * 85) / 100 * bets[winnerId][i].amount) / totalBet;\r\n            require(token.transfer(bets[winnerId][i].bettor, bettorReward), \"Transfer failed\");\r\n        }\r\n\r\n        // Reset current racers\r\n        for (uint256 i = 0; i < currentRacerIds.length; i++) {\r\n            delete currentRacers[currentRacerIds[i]];\r\n        }\r\n        // Clear the IDs as well\r\n        delete currentRacerIds;\r\n\r\n        updateAllEligibilities();\r\n\r\n        emit RaceResult(winnerId);\r\n    }\r\n\r\n    function sqrt(uint x) public pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    function updateAllEligibilities() public {\r\n        for (uint256 i = 0; i < currentRacerIds.length; i++) {\r\n            uint256 tokenId = currentRacerIds[i];\r\n            \r\n            if (eligibleRacers[tokenId].endTime != 0) {\r\n                // Check if the eligibility has expired\r\n                if (block.timestamp > eligibleRacers[tokenId].endTime) {\r\n                    delete eligibleRacers[tokenId];\r\n                    emit EligibilityChanged(tokenId, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFee(uint256 newFee) public onlyOwner {\r\n        eligibleFee = newFee;\r\n    }\r\n\r\n    function withdrawStuckEther() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawStuckTokens(uint256 amount) external onlyOwner {\r\n        require(paymentTokenContract.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        paymentTokenContract.transfer(owner(), amount);\r\n    }\r\n\r\n    function getCurrentRacerIds() public view returns (uint256[] memory) {\r\n        return currentRacerIds;\r\n    }\r\n\r\n    function updateNftAddress(address _newNftAddress) external onlyOwner {\r\n        nftAddress = _newNftAddress;\r\n    }\r\n\r\n    function updatePaymentToken(address _newPaymentToken) external onlyOwner {\r\n        paymentToken = _newPaymentToken;\r\n    }\r\n\r\n    function updateRewardWallet(address _newRewardWallet) external onlyOwner {\r\n        rewardWallet = _newRewardWallet;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"name\":\"EligibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overtaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overtaken\",\"type\":\"uint256\"}],\"name\":\"Overtake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"racerIds\",\"type\":\"uint256[]\"}],\"name\":\"PreRace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerId\",\"type\":\"uint256\"}],\"name\":\"RaceResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TurkeyPun\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRacerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRacers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eligibleRacers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRacerIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"makeEligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"race\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turkeysGameContract\",\"outputs\":[{\"internalType\":\"contract ITurkeysGameContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllEligibilities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNftAddress\",\"type\":\"address\"}],\"name\":\"updateNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPaymentToken\",\"type\":\"address\"}],\"name\":\"updatePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardWallet\",\"type\":\"address\"}],\"name\":\"updateRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TurkeyRace", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7480884f538999eff99ca792c0adbed7112a5a73e33ad183ffb8ef0c04629368"}